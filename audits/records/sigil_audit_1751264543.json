[
  {
    "execution_id": "exec-836a17b0-59ec6c75-1751264532",
    "timestamp": "2025-06-30T06:22:12.176639+00:00",
    "sacred_chain": {
      "input_data": "aes-gcm",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'aes-gcm' -> 'aes-gcm'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "aes-gcm",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/aes-gcm",
            "title": "aes-gcm v0.10.3",
            "content": {
              "raw_markdown": "#  aes-gcm v0.10.3\nPure Rust implementation of the AES-GCM (Galois/Counter Mode) Authenticated Encryption with Associated Data (AEAD) Cipher with optional architecture-specific hardware acceleration \n  * [ #aead ](https://crates.io/keywords/aead)\n  * [ #aes ](https://crates.io/keywords/aes)\n  * [ #encryption ](https://crates.io/keywords/encryption)\n  * [ #gcm ](https://crates.io/keywords/gcm)\n  * [ #ghash ](https://crates.io/keywords/ghash)\n\n\n  * [ Readme ](https://crates.io/crates/aes-gcm)\n  * [ 31 Versions ](https://crates.io/crates/aes-gcm/versions)\n  * [ Dependencies ](https://crates.io/crates/aes-gcm/dependencies)\n  * [ Dependents ](https://crates.io/crates/aes-gcm/reverse_dependencies)\n\n\n## Metadata\nalmost 2 years ago \nv1.56.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n145 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add aes-gcm\nOr add the following line to your Cargo.toml:\naes-gcm = \"0.10.3\"\n## Documentation\n[ docs.rs/aes-gcm ](https://docs.rs/aes-gcm)\n## Repository\n[ github.com/RustCrypto/AEADs ](https://github.com/RustCrypto/AEADs)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Cryptography](https://crates.io/categories/cryptography)\n\n\n[ Report crate ](https://crates.io/support?crate=aes-gcm&inquire=crate-violation)\n### Stats Overview\n55,467,398 Downloads all time\n31 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  aes-gcm v0.10.3\nPure Rust implementation of the AES-GCM (Galois/Counter Mode) Authenticated Encryption with Associated Data (AEAD) Cipher with optional architecture-specific hardware acceleration \n  *  #aead \u27e81\u27e9\n  *  #aes \u27e82\u27e9\n  *  #encryption \u27e83\u27e9\n  *  #gcm \u27e84\u27e9\n  *  #ghash \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  31 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nalmost 2 years ago \nv1.56.0 \n Apache-2.0 \u27e810\u27e9 OR  MIT \u27e811\u27e9\n145 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add aes-gcm\nOr add the following line to your Cargo.toml:\naes-gcm = \"0.10.3\"\n## Documentation\n docs.rs/aes-gcm \u27e812\u27e9\n## Repository\n github.com/RustCrypto/AEADs \u27e813\u27e9\n## Owners\n## Categories\n  * No standard library\u27e814\u27e9\n  * Cryptography\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n55,467,398 Downloads all time\n31 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/aead:  #aead \n\u27e82\u27e9 https://crates.io/keywords/aes:  #aes \n\u27e83\u27e9 https://crates.io/keywords/encryption:  #encryption \n\u27e84\u27e9 https://crates.io/keywords/gcm:  #gcm \n\u27e85\u27e9 https://crates.io/keywords/ghash:  #ghash \n\u27e86\u27e9 https://crates.io/crates/aes-gcm:  Readme \n\u27e87\u27e9 https://crates.io/crates/aes-gcm/versions:  31 Versions \n\u27e88\u27e9 https://crates.io/crates/aes-gcm/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/aes-gcm/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e812\u27e9 https://docs.rs/aes-gcm:  docs.rs/aes-gcm \n\u27e813\u27e9 https://github.com/RustCrypto/AEADs:  github.com/RustCrypto/AEADs \n\u27e814\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e815\u27e9 https://crates.io/categories/cryptography: Cryptography\n\u27e816\u27e9 https://crates.io/support?crate=aes-gcm&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1567,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118321.815974"
          },
          "docs_rs": {
            "url": "https://docs.rs/aes-gcm",
            "title": "Crate aes_gcmCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/aes-gcm/latest/aes_gcm/all.html \"show sidebar\")\n# Crate aes_gcmCopy item path\n[Settings](https://docs.rs/aes-gcm/latest/settings.html)\n[Help](https://docs.rs/aes-gcm/latest/help.html)\nSummary[Source](https://docs.rs/aes-gcm/latest/src/aes_gcm/lib.rs.html#1-373)\nExpand description\n## [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#rustcrypto-aes-gcm)RustCrypto: AES-GCM\n[![crate](https://buildstats.info/crate/aes-gcm)](https://crates.io/crates/aes-gcm) [![Docs](https://docs.rs/aes-gcm/badge.svg)](https://docs.rs/aes-gcm/) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.56+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260038-AEADs) [![Build Status](https://github.com/RustCrypto/AEADs/workflows/aes-gcm/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/AEADs/actions)\nPure Rust implementation of the AES-GCM [Authenticated Encryption with Associated Data (AEAD)](https://en.wikipedia.org/wiki/Authenticated_encryption) cipher.\n[Documentation](https://docs.rs/aes-gcm/)\n### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#security-notes)Security Notes\nThis crate has received one [security audit by NCC Group](https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/), with no significant findings. We would like to thank [MobileCoin](https://www.mobilecoin.com/) for funding the audit.\nAll implementations contained in the crate are designed to execute in constant time, either by relying on hardware intrinsics (i.e. AES-NI and CLMUL on x86/x86_64), or using a portable implementation which is only constant time on processors which implement constant-time multiplication.\nIt is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\n### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#license)License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n## [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#usage)Usage\nSimple usage (allocating, no associated data):\n```\nuse aes_gcm::{\n  aead::{Aead, AeadCore, KeyInit, OsRng},\n  Aes256Gcm, Nonce, Key // Or `Aes128Gcm`\n};\n// The encryption key can be generated randomly:\nlet key = Aes256Gcm::generate_key(OsRng);\n// Transformed from a byte array:\nlet key: &[u8; 32] = &[42; 32];\nlet key: &Key<Aes256Gcm> = key.into();\n// Note that you can get byte array from slice using the `TryInto` trait:\nlet key: &[u8] = &[42; 32];\nlet key: [u8; 32] = key.try_into()?;\n// Alternatively, the key can be transformed directly from a byte slice\n// (panicks on length mismatch):\nlet key = Key::<Aes256Gcm>::from_slice(key);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet ciphertext = cipher.encrypt(&nonce, b\"plaintext message\".as_ref())?;\nlet plaintext = cipher.decrypt(&nonce, ciphertext.as_ref())?;\nassert_eq!(&plaintext, b\"plaintext message\");\n```\n\n### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#in-place-usage-eliminates-alloc-requirement)In-place Usage (eliminates `alloc` requirement)\nThis crate has an optional `alloc` feature which can be disabled in e.g. microcontroller environments that don\u2019t have a heap.\nThe [`AeadInPlace::encrypt_in_place`](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.encrypt_in_place \"method aes_gcm::AeadInPlace::encrypt_in_place\") and [`AeadInPlace::decrypt_in_place`](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.decrypt_in_place \"method aes_gcm::AeadInPlace::decrypt_in_place\") methods accept any type that impls the [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") trait which contains the plaintext for encryption or ciphertext for decryption.\nNote that if you enable the `heapless` feature of this crate, you will receive an impl of [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") for `heapless::Vec` (re-exported from the [`aead`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\") crate as [`aead::heapless::Vec`](https://docs.rs/heapless/0.7.17/x86_64-unknown-linux-gnu/heapless/vec/struct.Vec.html \"struct heapless::vec::Vec\")), which can then be passed as the `buffer` parameter to the in-place encrypt and decrypt methods:\n```\nuse aes_gcm::{\n  aead::{AeadCore, AeadInPlace, KeyInit, OsRng, heapless::Vec},\n  Aes256Gcm, Nonce, // Or `Aes128Gcm`\n};\nlet key = Aes256Gcm::generate_key(&mut OsRng);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet mut buffer: Vec<u8, 128> = Vec::new(); // Note: buffer needs 16-bytes overhead for auth tag\nbuffer.extend_from_slice(b\"plaintext message\");\n// Encrypt `buffer` in-place, replacing the plaintext contents with ciphertext\ncipher.encrypt_in_place(&nonce, b\"\", &mut buffer)?;\n// `buffer` now contains the message ciphertext\nassert_ne!(&buffer, b\"plaintext message\");\n// Decrypt `buffer` in-place, replacing its ciphertext context with the original plaintext\ncipher.decrypt_in_place(&nonce, b\"\", &mut buffer)?;\nassert_eq!(&buffer, b\"plaintext message\");\n```\n\nSimilarly, enabling the `arrayvec` feature of this crate will provide an impl of [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") for `arrayvec::ArrayVec` (re-exported from the [`aead`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\") crate as [`aead::arrayvec::ArrayVec`](https://docs.rs/arrayvec/0.7.6/x86_64-unknown-linux-gnu/arrayvec/arrayvec/struct.ArrayVec.html \"struct arrayvec::arrayvec::ArrayVec\")).\n## Re-exports[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#reexports)\n\n`pub use aead[](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\");`\n\n\n`pub use aes[](https://docs.rs/aes/0.8.4/x86_64-unknown-linux-gnu/aes/index.html \"mod aes\");`\n\n## Structs[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#structs)\n\n[AesGcm](https://docs.rs/aes-gcm/latest/aes_gcm/struct.AesGcm.html \"struct aes_gcm::AesGcm\")\n    AES-GCM: generic over an underlying AES implementation and nonce size.\n\n[Error](https://docs.rs/aes-gcm/latest/aes_gcm/struct.Error.html \"struct aes_gcm::Error\")\n    Error type.\n## Constants[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#constants)\n\n[A_MAX](https://docs.rs/aes-gcm/latest/aes_gcm/constant.A_MAX.html \"constant aes_gcm::A_MAX\")\n    Maximum length of associated data.\n\n[C_MAX](https://docs.rs/aes-gcm/latest/aes_gcm/constant.C_MAX.html \"constant aes_gcm::C_MAX\")\n    Maximum length of ciphertext.\n\n[P_MAX](https://docs.rs/aes-gcm/latest/aes_gcm/constant.P_MAX.html \"constant aes_gcm::P_MAX\")\n    Maximum length of plaintext.\n## Traits[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#traits)\n\n[AeadCore](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadCore.html \"trait aes_gcm::AeadCore\")\n    Authenticated Encryption with Associated Data (AEAD) algorithm core trait.\n\n[AeadInPlace](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html \"trait aes_gcm::AeadInPlace\")\n    In-place stateless AEAD trait.\n\n[KeyInit](https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeyInit.html \"trait aes_gcm::KeyInit\")\n    Types which can be initialized from key.\n\n[KeySizeUser](https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeySizeUser.html \"trait aes_gcm::KeySizeUser\")\n    Types which use key for initialization.\n\n[TagSize](https://docs.rs/aes-gcm/latest/aes_gcm/trait.TagSize.html \"trait aes_gcm::TagSize\")\n    Trait implemented for valid tag sizes, i.e. [`U12`][consts::U12], [`U13`][consts::U13], [`U14`][consts::U14], [`U15`][consts::U15] and [`U16`][consts::U16].\n## Type Aliases[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#types)\n\n[Aes128Gcm](https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes128Gcm.html \"type aes_gcm::Aes128Gcm\")`aes`\n    AES-GCM with a 128-bit key and 96-bit nonce.\n\n[Aes256Gcm](https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes256Gcm.html \"type aes_gcm::Aes256Gcm\")`aes`\n    AES-GCM with a 256-bit key and 96-bit nonce.\n\n[Key](https://docs.rs/aes-gcm/latest/aes_gcm/type.Key.html \"type aes_gcm::Key\")\n    Key used by [`KeySizeUser`](https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeySizeUser.html \"trait aes_gcm::KeySizeUser\") implementors.\n\n[Nonce](https://docs.rs/aes-gcm/latest/aes_gcm/type.Nonce.html \"type aes_gcm::Nonce\")\n    AES-GCM nonces.\n\n[Tag](https://docs.rs/aes-gcm/latest/aes_gcm/type.Tag.html \"type aes_gcm::Tag\")\n    AES-GCM tags.\n",
              "markdown_with_citations": "[](https://docs.rs/aes-gcm/latest/aes_gcm/all.html \"show sidebar\")\n# Crate aes_gcmCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto: AES-GCM\n![crate\u27e85\u27e9](https://crates.io/crates/aes-gcm) ![Docs\u27e86\u27e9](https://docs.rs/aes-gcm/) ![Apache2/MIT licensed\u27e87\u27e9] ![Rust Version\u27e88\u27e9] ![Project Chat\u27e89\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260038-AEADs) ![Build Status\u27e810\u27e9](https://github.com/RustCrypto/AEADs/actions)\nPure Rust implementation of the AES-GCM Authenticated Encryption with Associated Data (AEAD)\u27e811\u27e9 cipher.\nDocumentation\u27e812\u27e9\n### \u00a7\u27e813\u27e9Security Notes\nThis crate has received one security audit by NCC Group\u27e814\u27e9, with no significant findings. We would like to thank MobileCoin\u27e815\u27e9 for funding the audit.\nAll implementations contained in the crate are designed to execute in constant time, either by relying on hardware intrinsics (i.e. AES-NI and CLMUL on x86/x86_64), or using a portable implementation which is only constant time on processors which implement constant-time multiplication.\nIt is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\n### \u00a7\u27e816\u27e9License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e817\u27e9\n  * MIT license\u27e818\u27e9\n\n\nat your option.\n#### \u00a7\u27e819\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n## \u00a7\u27e820\u27e9Usage\nSimple usage (allocating, no associated data):\n```\nuse aes_gcm::{\n  aead::{Aead, AeadCore, KeyInit, OsRng},\n  Aes256Gcm, Nonce, Key // Or `Aes128Gcm`\n};\n// The encryption key can be generated randomly:\nlet key = Aes256Gcm::generate_key(OsRng);\n// Transformed from a byte array:\nlet key: &[u8; 32] = &[42; 32];\nlet key: &Key<Aes256Gcm> = key.into();\n// Note that you can get byte array from slice using the `TryInto` trait:\nlet key: &[u8] = &[42; 32];\nlet key: [u8; 32] = key.try_into()?;\n// Alternatively, the key can be transformed directly from a byte slice\n// (panicks on length mismatch):\nlet key = Key::<Aes256Gcm>::from_slice(key);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet ciphertext = cipher.encrypt(&nonce, b\"plaintext message\".as_ref())?;\nlet plaintext = cipher.decrypt(&nonce, ciphertext.as_ref())?;\nassert_eq!(&plaintext, b\"plaintext message\");\n```\n\n### \u00a7\u27e821\u27e9In-place Usage (eliminates `alloc` requirement)\nThis crate has an optional `alloc` feature which can be disabled in e.g. microcontroller environments that don\u2019t have a heap.\nThe `AeadInPlace::encrypt_in_place`\u27e822\u27e9 and `AeadInPlace::decrypt_in_place`\u27e823\u27e9 methods accept any type that impls the `aead::Buffer`\u27e824\u27e9 trait which contains the plaintext for encryption or ciphertext for decryption.\nNote that if you enable the `heapless` feature of this crate, you will receive an impl of `aead::Buffer`\u27e824\u27e9 for `heapless::Vec` (re-exported from the `aead`\u27e825\u27e9 crate as `aead::heapless::Vec`\u27e826\u27e9), which can then be passed as the `buffer` parameter to the in-place encrypt and decrypt methods:\n```\nuse aes_gcm::{\n  aead::{AeadCore, AeadInPlace, KeyInit, OsRng, heapless::Vec},\n  Aes256Gcm, Nonce, // Or `Aes128Gcm`\n};\nlet key = Aes256Gcm::generate_key(&mut OsRng);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet mut buffer: Vec<u8, 128> = Vec::new(); // Note: buffer needs 16-bytes overhead for auth tag\nbuffer.extend_from_slice(b\"plaintext message\");\n// Encrypt `buffer` in-place, replacing the plaintext contents with ciphertext\ncipher.encrypt_in_place(&nonce, b\"\", &mut buffer)?;\n// `buffer` now contains the message ciphertext\nassert_ne!(&buffer, b\"plaintext message\");\n// Decrypt `buffer` in-place, replacing its ciphertext context with the original plaintext\ncipher.decrypt_in_place(&nonce, b\"\", &mut buffer)?;\nassert_eq!(&buffer, b\"plaintext message\");\n```\n\nSimilarly, enabling the `arrayvec` feature of this crate will provide an impl of `aead::Buffer`\u27e824\u27e9 for `arrayvec::ArrayVec` (re-exported from the `aead`\u27e825\u27e9 crate as `aead::arrayvec::ArrayVec`\u27e827\u27e9).\n## Re-exports\u00a7\u27e828\u27e9\n\n`pub use aead[](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\");`\n\n\n`pub use aes[](https://docs.rs/aes/0.8.4/x86_64-unknown-linux-gnu/aes/index.html \"mod aes\");`\n\n## Structs\u00a7\u27e829\u27e9\n\nAesGcm\u27e830\u27e9\n    AES-GCM: generic over an underlying AES implementation and nonce size.\n\nError\u27e831\u27e9\n    Error type.\n## Constants\u00a7\u27e832\u27e9\n\nA_MAX\u27e833\u27e9\n    Maximum length of associated data.\n\nC_MAX\u27e834\u27e9\n    Maximum length of ciphertext.\n\nP_MAX\u27e835\u27e9\n    Maximum length of plaintext.\n## Traits\u00a7\u27e836\u27e9\n\nAeadCore\u27e837\u27e9\n    Authenticated Encryption with Associated Data (AEAD) algorithm core trait.\n\nAeadInPlace\u27e838\u27e9\n    In-place stateless AEAD trait.\n\nKeyInit\u27e839\u27e9\n    Types which can be initialized from key.\n\nKeySizeUser\u27e840\u27e9\n    Types which use key for initialization.\n\nTagSize\u27e841\u27e9\n    Trait implemented for valid tag sizes, i.e. [`U12`][consts::U12], [`U13`][consts::U13], [`U14`][consts::U14], [`U15`][consts::U15] and [`U16`][consts::U16].\n## Type Aliases\u00a7\u27e842\u27e9\n\nAes128Gcm\u27e843\u27e9`aes`\n    AES-GCM with a 128-bit key and 96-bit nonce.\n\nAes256Gcm\u27e844\u27e9`aes`\n    AES-GCM with a 256-bit key and 96-bit nonce.\n\nKey\u27e845\u27e9\n    Key used by `KeySizeUser`\u27e840\u27e9 implementors.\n\nNonce\u27e846\u27e9\n    AES-GCM nonces.\n\nTag\u27e847\u27e9\n    AES-GCM tags.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/aes-gcm/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/aes-gcm/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/aes-gcm/latest/src/aes_gcm/lib.rs.html#1-373: Source\n\u27e84\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#rustcrypto-aes-gcm: \u00a7\n\u27e85\u27e9 https://buildstats.info/crate/aes-gcm: ![crate\n\u27e86\u27e9 https://docs.rs/aes-gcm/badge.svg: ![Docs\n\u27e87\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e88\u27e9 https://img.shields.io/badge/rustc-1.56+-blue.svg: Rust Version\n\u27e89\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e810\u27e9 https://github.com/RustCrypto/AEADs/workflows/aes-gcm/badge.svg?branch=master&event=push: ![Build Status\n\u27e811\u27e9 https://en.wikipedia.org/wiki/Authenticated_encryption: Authenticated Encryption with Associated Data (AEAD)\n\u27e812\u27e9 https://docs.rs/aes-gcm/: Documentation\n\u27e813\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#security-notes: \u00a7\n\u27e814\u27e9 https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/: security audit by NCC Group\n\u27e815\u27e9 https://www.mobilecoin.com/: MobileCoin\n\u27e816\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#license: \u00a7\n\u27e817\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e818\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e819\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#contribution: \u00a7\n\u27e820\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#usage: \u00a7\n\u27e821\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#in-place-usage-eliminates-alloc-requirement: \u00a7\n\u27e822\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.encrypt_in_place: method aes_gcm::AeadInPlace::encrypt_in_place - `AeadInPlace::encrypt_in_place`\n\u27e823\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.decrypt_in_place: method aes_gcm::AeadInPlace::decrypt_in_place - `AeadInPlace::decrypt_in_place`\n\u27e824\u27e9 https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html: trait aead::Buffer - `aead::Buffer`\n\u27e825\u27e9 https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html: mod aead - `aead`\n\u27e826\u27e9 https://docs.rs/heapless/0.7.17/x86_64-unknown-linux-gnu/heapless/vec/struct.Vec.html: struct heapless::vec::Vec - `aead::heapless::Vec`\n\u27e827\u27e9 https://docs.rs/arrayvec/0.7.6/x86_64-unknown-linux-gnu/arrayvec/arrayvec/struct.ArrayVec.html: struct arrayvec::arrayvec::ArrayVec - `aead::arrayvec::ArrayVec`\n\u27e828\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#reexports: \u00a7\n\u27e829\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/struct.AesGcm.html: struct aes_gcm::AesGcm - AesGcm\n\u27e831\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/struct.Error.html: struct aes_gcm::Error - Error\n\u27e832\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#constants: \u00a7\n\u27e833\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/constant.A_MAX.html: constant aes_gcm::A_MAX - A_MAX\n\u27e834\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/constant.C_MAX.html: constant aes_gcm::C_MAX - C_MAX\n\u27e835\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/constant.P_MAX.html: constant aes_gcm::P_MAX - P_MAX\n\u27e836\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#traits: \u00a7\n\u27e837\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadCore.html: trait aes_gcm::AeadCore - AeadCore\n\u27e838\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html: trait aes_gcm::AeadInPlace - AeadInPlace\n\u27e839\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeyInit.html: trait aes_gcm::KeyInit - KeyInit\n\u27e840\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeySizeUser.html: trait aes_gcm::KeySizeUser - KeySizeUser\n\u27e841\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.TagSize.html: trait aes_gcm::TagSize - TagSize\n\u27e842\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#types: \u00a7\n\u27e843\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes128Gcm.html: type aes_gcm::Aes128Gcm - Aes128Gcm\n\u27e844\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes256Gcm.html: type aes_gcm::Aes256Gcm - Aes256Gcm\n\u27e845\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Key.html: type aes_gcm::Key - Key\n\u27e846\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Nonce.html: type aes_gcm::Nonce - Nonce\n\u27e847\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Tag.html: type aes_gcm::Tag - Tag\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 9167,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118322.7277837"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/aes-gcm",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [26 releases](https://lib.rs/crates/aes-gcm/versions)\nUses new Rust 2024\n0.11.0-rc.0 |  May 30, 2025   \n---|---  \n0.11.0-pre.2 |  Oct 7, 2024   \n0.11.0-pre.1 |  Jul 27, 2024   \n0.10.3 |  Sep 21, 2023   \n0.3.0 |  Nov 27, 2019   \n#**1234** in [Cryptography](https://lib.rs/cryptography \"Algorithms intended for securing data.\")\nDownload history 529997/week @ 2025-03-09 514128/week @ 2025-03-16 530619/week @ 2025-03-23 524891/week @ 2025-03-30 516661/week @ 2025-04-06 471997/week @ 2025-04-13 504748/week @ 2025-04-20 464499/week @ 2025-04-27 491790/week @ 2025-05-04 482550/week @ 2025-05-11 490657/week @ 2025-05-18 446890/week @ 2025-05-25 507884/week @ 2025-06-01 502839/week @ 2025-06-08 511193/week @ 2025-06-15 520791/week @ 2025-06-22\n**2,070,653** downloads per month Used in [**1,732** crates (454 directly)](https://lib.rs/crates/aes-gcm/rev)\n**Apache-2.0 OR MIT**\n155KB  188 lines\n# RustCrypto: AES-GCM\n[![crate](https://img.shields.io/crates/v/aes-gcm)](https://crates.io/crates/aes-gcm) [![Docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/aes-gcm/badge.svg)](https://docs.rs/aes-gcm/) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.85+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260038-AEADs) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/RustCrypto/AEADs/workflows/aes-gcm/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/AEADs/actions)\nPure Rust implementation of the AES-GCM [Authenticated Encryption with Associated Data (AEAD)](https://en.wikipedia.org/wiki/Authenticated_encryption) cipher.\n[Documentation](https://docs.rs/aes-gcm/)\n## Security Notes\nThis crate has received one [security audit by NCC Group](https://web.archive.org/web/20240108154854/https://research.nccgroup.com/wp-content/uploads/2020/02/NCC_Group_MobileCoin_RustCrypto_AESGCM_ChaCha20Poly1305_Implementation_Review_2020-02-12_v1.0.pdf), with no significant findings. We would like to thank [MobileCoin](https://www.mobilecoin.com/) for funding the audit.\nAll implementations contained in the crate are designed to execute in constant time, either by relying on hardware intrinsics (i.e. AES-NI and CLMUL on x86/x86_64), or using a portable implementation which is only constant time on processors which implement constant-time multiplication.\nIt is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\n## License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~1\u20131.4MB  ~31K SLoC\n  * [aead](https://lib.rs/crates/aead \"new\") 0.6.0-rc.1\n  * [default](https://lib.rs/crates/aes-gcm/features#feature-default \"default feature\") [aes](https://lib.rs/crates/aes \"new\") 0.9.0-rc.0\n  * [cipher](https://lib.rs/crates/cipher \"new\") 0.5.0-rc.0\n  * [ctr](https://lib.rs/crates/ctr \"new\") 0.10.0-rc.0\n  * [ghash](https://lib.rs/crates/ghash \"new\") 0.6.0-rc.1\n  * [subtle](https://lib.rs/crates/subtle \"2\")\n  * [ optional ](https://lib.rs/crates/aes-gcm/features#feature-zeroize \"zeroize is optional feature\") [zeroize](https://lib.rs/crates/zeroize \"1\")\n\n\n  * dev  [hex-literal](https://lib.rs/crates/hex-literal \"new\") 1.0\n\n\n#### [Other features](https://lib.rs/crates/aes-gcm/features)\n  * [alloc](https://lib.rs/crates/aes-gcm/features#feature-alloc)\n  * [arrayvec](https://lib.rs/crates/aes-gcm/features#feature-arrayvec)\n  * [bytes](https://lib.rs/crates/aes-gcm/features#feature-bytes)\n  * [heapless](https://lib.rs/crates/aes-gcm/features#feature-heapless)\n  * [os_rng](https://lib.rs/crates/aes-gcm/features#feature-os_rng)\n  * [rand_core](https://lib.rs/crates/aes-gcm/features#feature-rand_core)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  26 releases\u27e81\u27e9\nUses new Rust 2024\n0.11.0-rc.0 |  May 30, 2025   \n---|---  \n0.11.0-pre.2 |  Oct 7, 2024   \n0.11.0-pre.1 |  Jul 27, 2024   \n0.10.3 |  Sep 21, 2023   \n0.3.0 |  Nov 27, 2019   \n#**1234** in Cryptography\u27e82\u27e9\nDownload history 529997/week @ 2025-03-09 514128/week @ 2025-03-16 530619/week @ 2025-03-23 524891/week @ 2025-03-30 516661/week @ 2025-04-06 471997/week @ 2025-04-13 504748/week @ 2025-04-20 464499/week @ 2025-04-27 491790/week @ 2025-05-04 482550/week @ 2025-05-11 490657/week @ 2025-05-18 446890/week @ 2025-05-25 507884/week @ 2025-06-01 502839/week @ 2025-06-08 511193/week @ 2025-06-15 520791/week @ 2025-06-22\n**2,070,653** downloads per month Used in **1,732** crates (454 directly)\u27e83\u27e9\n**Apache-2.0 OR MIT**\n155KB  188 lines\n# RustCrypto: AES-GCM\n![crate\u27e84\u27e9](https://crates.io/crates/aes-gcm) ![Docs\u27e85\u27e9](https://docs.rs/aes-gcm/) ![Apache2/MIT licensed\u27e86\u27e9] ![Rust Version\u27e87\u27e9] ![Project Chat\u27e88\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260038-AEADs) ![Build Status\u27e89\u27e9](https://github.com/RustCrypto/AEADs/actions)\nPure Rust implementation of the AES-GCM Authenticated Encryption with Associated Data (AEAD)\u27e810\u27e9 cipher.\nDocumentation\u27e811\u27e9\n## Security Notes\nThis crate has received one security audit by NCC Group\u27e812\u27e9, with no significant findings. We would like to thank MobileCoin\u27e813\u27e9 for funding the audit.\nAll implementations contained in the crate are designed to execute in constant time, either by relying on hardware intrinsics (i.e. AES-NI and CLMUL on x86/x86_64), or using a portable implementation which is only constant time on processors which implement constant-time multiplication.\nIt is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\n## License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e814\u27e9\n  * MIT license\u27e815\u27e9\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~1\u20131.4MB  ~31K SLoC\n  * aead\u27e816\u27e9 0.6.0-rc.1\n  * default\u27e817\u27e9 aes\u27e818\u27e9 0.9.0-rc.0\n  * cipher\u27e819\u27e9 0.5.0-rc.0\n  * ctr\u27e820\u27e9 0.10.0-rc.0\n  * ghash\u27e821\u27e9 0.6.0-rc.1\n  * subtle\u27e822\u27e9\n  *  optional \u27e823\u27e9 zeroize\u27e824\u27e9\n\n\n  * dev  hex-literal\u27e825\u27e9 1.0\n\n\n#### Other features\u27e826\u27e9\n  * alloc\u27e827\u27e9\n  * arrayvec\u27e828\u27e9\n  * bytes\u27e829\u27e9\n  * heapless\u27e830\u27e9\n  * os_rng\u27e831\u27e9\n  * rand_core\u27e832\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/aes-gcm/versions: 26 releases\n\u27e82\u27e9 https://lib.rs/cryptography: Algorithms intended for securing data. - Cryptography\n\u27e83\u27e9 https://lib.rs/crates/aes-gcm/rev: **1,732** crates (454 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/aes-gcm: ![crate\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/aes-gcm/badge.svg: ![Docs\n\u27e86\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e87\u27e9 https://img.shields.io/badge/rustc-1.85+-blue.svg: Rust Version\n\u27e88\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e89\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/RustCrypto/AEADs/workflows/aes-gcm/badge.svg?branch=master&event=push: ![Build Status\n\u27e810\u27e9 https://en.wikipedia.org/wiki/Authenticated_encryption: Authenticated Encryption with Associated Data (AEAD)\n\u27e811\u27e9 https://docs.rs/aes-gcm/: Documentation\n\u27e812\u27e9 https://web.archive.org/web/20240108154854/https://research.nccgroup.com/wp-content/uploads/2020/02/NCC_Group_MobileCoin_RustCrypto_AESGCM_ChaCha20Poly1305_Implementation_Review_2020-02-12_v1.0.pdf: security audit by NCC Group\n\u27e813\u27e9 https://www.mobilecoin.com/: MobileCoin\n\u27e814\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e815\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e816\u27e9 https://lib.rs/crates/aead: new - aead\n\u27e817\u27e9 https://lib.rs/crates/aes-gcm/features#feature-default: default feature - default\n\u27e818\u27e9 https://lib.rs/crates/aes: new - aes\n\u27e819\u27e9 https://lib.rs/crates/cipher: new - cipher\n\u27e820\u27e9 https://lib.rs/crates/ctr: new - ctr\n\u27e821\u27e9 https://lib.rs/crates/ghash: new - ghash\n\u27e822\u27e9 https://lib.rs/crates/subtle: 2 - subtle\n\u27e823\u27e9 https://lib.rs/crates/aes-gcm/features#feature-zeroize: zeroize is optional feature -  optional \n\u27e824\u27e9 https://lib.rs/crates/zeroize: 1 - zeroize\n\u27e825\u27e9 https://lib.rs/crates/hex-literal: new - hex-literal\n\u27e826\u27e9 https://lib.rs/crates/aes-gcm/features: Other features\n\u27e827\u27e9 https://lib.rs/crates/aes-gcm/features#feature-alloc: alloc\n\u27e828\u27e9 https://lib.rs/crates/aes-gcm/features#feature-arrayvec: arrayvec\n\u27e829\u27e9 https://lib.rs/crates/aes-gcm/features#feature-bytes: bytes\n\u27e830\u27e9 https://lib.rs/crates/aes-gcm/features#feature-heapless: heapless\n\u27e831\u27e9 https://lib.rs/crates/aes-gcm/features#feature-os_rng: os_rng\n\u27e832\u27e9 https://lib.rs/crates/aes-gcm/features#feature-rand_core: rand_core\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4311,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118323.2933733"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cpufeatures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libcpufeatures-43bbc20eaecde5c1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\getrandom-7e047a39102e0a91\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\getrandom-7e047a39102e0a91\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\getrandom-ad7b5980f5e2ca20\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libgetrandom-5493454d9267c68e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\build\\main.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\typenum-9f34e931e50aab85\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\typenum-9f34e931e50aab85\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "os_rng"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\librand_core-c618f5f562283d03.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\typenum-2dc06310c2d6584a\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libtypenum-a7cd99abe58a935e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hybrid-array@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hybrid_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libhybrid_array-706aee5fdb66bb3c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#inout@0.2.0-rc.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\inout-0.2.0-rc.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "inout",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\inout-0.2.0-rc.5\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libinout-93757c0a9ef211e4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.2.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "os_rng",
                "rand_core"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libcrypto_common-8dd1c6bcb6d2c48f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#universal-hash@0.6.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\universal-hash-0.6.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "universal_hash",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\universal-hash-0.6.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libuniversal_hash-c81595757694a1d7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aead@0.6.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aead-0.6.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aead",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aead-0.6.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "os_rng",
                "rand_core"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libaead-252784b182814786.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cipher@0.5.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cipher-0.5.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cipher",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cipher-0.5.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libcipher-3c6bc3af3bb73fb5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#polyval@0.7.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\polyval-0.7.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "polyval",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\polyval-0.7.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libpolyval-8af50b57303e3192.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ctr@0.10.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctr-0.10.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ctr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctr-0.10.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libctr-661b459b50fb43cf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ghash@0.6.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ghash-0.6.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ghash",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ghash-0.6.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libghash-890783611586f1f4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aes@0.9.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aes-0.9.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aes-0.9.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libaes-99d57161818e3659.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdds_ao48/aes-gcm-0.11.0-rc.0#aes-gcm@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aes_gcm",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "aes",
                "alloc",
                "default",
                "os_rng",
                "rand_core"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libaes_gcm-c5aac3084c8622a8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\build\\main.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\typenum-9f34e931e50aab85\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\typenum-9f34e931e50aab85\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\getrandom-7e047a39102e0a91\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\getrandom-7e047a39102e0a91\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cpufeatures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libcpufeatures-43bbc20eaecde5c1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\typenum-2dc06310c2d6584a\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\build\\getrandom-ad7b5980f5e2ca20\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libtypenum-a7cd99abe58a935e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libgetrandom-5493454d9267c68e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hybrid-array@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hybrid_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libhybrid_array-706aee5fdb66bb3c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "os_rng"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\librand_core-c618f5f562283d03.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#inout@0.2.0-rc.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\inout-0.2.0-rc.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "inout",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\inout-0.2.0-rc.5\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libinout-93757c0a9ef211e4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.2.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "os_rng",
                "rand_core"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libcrypto_common-8dd1c6bcb6d2c48f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#universal-hash@0.6.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\universal-hash-0.6.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "universal_hash",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\universal-hash-0.6.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libuniversal_hash-c81595757694a1d7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cipher@0.5.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cipher-0.5.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cipher",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cipher-0.5.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libcipher-3c6bc3af3bb73fb5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aead@0.6.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aead-0.6.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aead",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aead-0.6.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "os_rng",
                "rand_core"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libaead-252784b182814786.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#polyval@0.7.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\polyval-0.7.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "polyval",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\polyval-0.7.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libpolyval-8af50b57303e3192.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aes@0.9.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aes-0.9.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aes-0.9.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libaes-99d57161818e3659.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ctr@0.10.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctr-0.10.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ctr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctr-0.10.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libctr-661b459b50fb43cf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ghash@0.6.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ghash-0.6.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ghash",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ghash-0.6.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libghash-890783611586f1f4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdds_ao48/aes-gcm-0.11.0-rc.0#aes-gcm@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aes_gcm",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "aes",
                "alloc",
                "default",
                "os_rng",
                "rand_core"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdds_ao48\\aes-gcm-0.11.0-rc.0\\target\\debug\\deps\\libaes_gcm-3ee15dc76443759b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 39
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "aes-gcm",
          "version": "0.11.0-rc.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/aes-gcm/latest/aes_gcm/all.html \"show sidebar\")\n# Crate aes_gcmCopy item path\n[Settings](https://docs.rs/aes-gcm/latest/settings.html)\n[Help](https://docs.rs/aes-gcm/latest/help.html)\nSummary[Source](https://docs.rs/aes-gcm/latest/src/aes_gcm/lib.rs.html#1-373)\nExpand description\n## [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#rustcrypto-aes-gcm)RustCrypto: AES-GCM\n[![crate](https://buildstats.info/crate/aes-gcm)](https://crates.io/crates/aes-gcm) [![Docs](https://docs.rs/aes-gcm/badge.svg)](https://docs.rs/aes-gcm/) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.56+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260038-AEADs) [![Build Status](https://github.com/RustCrypto/AEADs/workflows/aes-gcm/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/AEADs/actions)\nPure Rust implementation of the AES-GCM [Authenticated Encryption with Associated Data (AEAD)](https://en.wikipedia.org/wiki/Authenticated_encryption) cipher.\n[Documentation](https://docs.rs/aes-gcm/)\n### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#security-notes)Security Notes\nThis crate has received one [security audit by NCC Group](https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/), with no significant findings. We would like to thank [MobileCoin](https://www.mobilecoin.com/) for funding the audit.\nAll implementations contained in the crate are designed to execute in constant time, either by relying on hardware intrinsics (i.e. AES-NI and CLMUL on x86/x86_64), or using a portable implementation which is only constant time on processors which implement constant-time multiplication.\nIt is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\n### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#license)License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n## [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#usage)Usage\nSimple usage (allocating, no associated data):\n```\nuse aes_gcm::{\n  aead::{Aead, AeadCore, KeyInit, OsRng},\n  Aes256Gcm, Nonce, Key // Or `Aes128Gcm`\n};\n// The encryption key can be generated randomly:\nlet key = Aes256Gcm::generate_key(OsRng);\n// Transformed from a byte array:\nlet key: &[u8; 32] = &[42; 32];\nlet key: &Key<Aes256Gcm> = key.into();\n// Note that you can get byte array from slice using the `TryInto` trait:\nlet key: &[u8] = &[42; 32];\nlet key: [u8; 32] = key.try_into()?;\n// Alternatively, the key can be transformed directly from a byte slice\n// (panicks on length mismatch):\nlet key = Key::<Aes256Gcm>::from_slice(key);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet ciphertext = cipher.encrypt(&nonce, b\"plaintext message\".as_ref())?;\nlet plaintext = cipher.decrypt(&nonce, ciphertext.as_ref())?;\nassert_eq!(&plaintext, b\"plaintext message\");\n```\n\n### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#in-place-usage-eliminates-alloc-requirement)In-place Usage (eliminates `alloc` requirement)\nThis crate has an optional `alloc` feature which can be disabled in e.g. microcontroller environments that don\u2019t have a heap.\nThe [`AeadInPlace::encrypt_in_place`](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.encrypt_in_place \"method aes_gcm::AeadInPlace::encrypt_in_place\") and [`AeadInPlace::decrypt_in_place`](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.decrypt_in_place \"method aes_gcm::AeadInPlace::decrypt_in_place\") methods accept any type that impls the [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") trait which contains the plaintext for encryption or ciphertext for decryption.\nNote that if you enable the `heapless` feature of this crate, you will receive an impl of [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") for `heapless::Vec` (re-exported from the [`aead`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\") crate as [`aead::heapless::Vec`](https://docs.rs/heapless/0.7.17/x86_64-unknown-linux-gnu/heapless/vec/struct.Vec.html \"struct heapless::vec::Vec\")), which can then be passed as the `buffer` parameter to the in-place encrypt and decrypt methods:\n```\nuse aes_gcm::{\n  aead::{AeadCore, AeadInPlace, KeyInit, OsRng, heapless::Vec},\n  Aes256Gcm, Nonce, // Or `Aes128Gcm`\n};\nlet key = Aes256Gcm::generate_key(&mut OsRng);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet mut buffer: Vec<u8, 128> = Vec::new(); // Note: buffer needs 16-bytes overhead for auth tag\nbuffer.extend_from_slice(b\"plaintext message\");\n// Encrypt `buffer` in-place, replacing the plaintext contents with ciphertext\ncipher.encrypt_in_place(&nonce, b\"\", &mut buffer)?;\n// `buffer` now contains the message ciphertext\nassert_ne!(&buffer, b\"plaintext message\");\n// Decrypt `buffer` in-place, replacing its ciphertext context with the original plaintext\ncipher.decrypt_in_place(&nonce, b\"\", &mut buffer)?;\nassert_eq!(&buffer, b\"plaintext message\");\n```\n\nSimilarly, enabling the `arrayvec` feature of this crate will provide an impl of [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") for `arrayvec::ArrayVec` (re-exported from the [`aead`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\") crate as [`aead::arrayvec::ArrayVec`](https://docs.rs/arrayvec/0.7.6/x86_64-unknown-linux-gnu/arrayvec/arrayvec/struct.ArrayVec.html \"struct arrayvec::arrayvec::ArrayVec\")).\n## Re-exports[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#reexports)\n\n`pub use aead[](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\");`\n\n\n`pub use aes[](https://docs.rs/aes/0.8.4/x86_64-unknown-linux-gnu/aes/index.html \"mod aes\");`\n\n## Structs[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#structs)\n\n[AesGcm](https://docs.rs/aes-gcm/latest/aes_gcm/struct.AesGcm.html \"struct aes_gcm::AesGcm\")\n    AES-GCM: generic over an underlying AES implementation and nonce size.\n\n[Error](https://docs.rs/aes-gcm/latest/aes_gcm/struct.Error.html \"struct aes_gcm::Error\")\n    Error type.\n## Constants[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#constants)\n\n[A_MAX](https://docs.rs/aes-gcm/latest/aes_gcm/constant.A_MAX.html \"constant aes_gcm::A_MAX\")\n    Maximum length of associated data.\n\n[C_MAX](https://docs.rs/aes-gcm/latest/aes_gcm/constant.C_MAX.html \"constant aes_gcm::C_MAX\")\n    Maximum length of ciphertext.\n\n[P_MAX](https://docs.rs/aes-gcm/latest/aes_gcm/constant.P_MAX.html \"constant aes_gcm::P_MAX\")\n    Maximum length of plaintext.\n## Traits[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#traits)\n\n[AeadCore](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadCore.html \"trait aes_gcm::AeadCore\")\n    Authenticated Encryption with Associated Data (AEAD) algorithm core trait.\n\n[AeadInPlace](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html \"trait aes_gcm::AeadInPlace\")\n    In-place stateless AEAD trait.\n\n[KeyInit](https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeyInit.html \"trait aes_gcm::KeyInit\")\n    Types which can be initialized from key.\n\n[KeySizeUser](https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeySizeUser.html \"trait aes_gcm::KeySizeUser\")\n    Types which use key for initialization.\n\n[TagSize](https://docs.rs/aes-gcm/latest/aes_gcm/trait.TagSize.html \"trait aes_gcm::TagSize\")\n    Trait implemented for valid tag sizes, i.e. [`U12`][consts::U12], [`U13`][consts::U13], [`U14`][consts::U14], [`U15`][consts::U15] and [`U16`][consts::U16].\n## Type Aliases[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#types)\n\n[Aes128Gcm](https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes128Gcm.html \"type aes_gcm::Aes128Gcm\")`aes`\n    AES-GCM with a 128-bit key and 96-bit nonce.\n\n[Aes256Gcm](https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes256Gcm.html \"type aes_gcm::Aes256Gcm\")`aes`\n    AES-GCM with a 256-bit key and 96-bit nonce.\n\n[Key](https://docs.rs/aes-gcm/latest/aes_gcm/type.Key.html \"type aes_gcm::Key\")\n    Key used by [`KeySizeUser`](https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeySizeUser.html \"trait aes_gcm::KeySizeUser\") implementors.\n\n[Nonce](https://docs.rs/aes-gcm/latest/aes_gcm/type.Nonce.html \"type aes_gcm::Nonce\")\n    AES-GCM nonces.\n\n[Tag](https://docs.rs/aes-gcm/latest/aes_gcm/type.Tag.html \"type aes_gcm::Tag\")\n    AES-GCM tags.\n",
            "markdown_with_citations": "[](https://docs.rs/aes-gcm/latest/aes_gcm/all.html \"show sidebar\")\n# Crate aes_gcmCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto: AES-GCM\n![crate\u27e85\u27e9](https://crates.io/crates/aes-gcm) ![Docs\u27e86\u27e9](https://docs.rs/aes-gcm/) ![Apache2/MIT licensed\u27e87\u27e9] ![Rust Version\u27e88\u27e9] ![Project Chat\u27e89\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260038-AEADs) ![Build Status\u27e810\u27e9](https://github.com/RustCrypto/AEADs/actions)\nPure Rust implementation of the AES-GCM Authenticated Encryption with Associated Data (AEAD)\u27e811\u27e9 cipher.\nDocumentation\u27e812\u27e9\n### \u00a7\u27e813\u27e9Security Notes\nThis crate has received one security audit by NCC Group\u27e814\u27e9, with no significant findings. We would like to thank MobileCoin\u27e815\u27e9 for funding the audit.\nAll implementations contained in the crate are designed to execute in constant time, either by relying on hardware intrinsics (i.e. AES-NI and CLMUL on x86/x86_64), or using a portable implementation which is only constant time on processors which implement constant-time multiplication.\nIt is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\n### \u00a7\u27e816\u27e9License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e817\u27e9\n  * MIT license\u27e818\u27e9\n\n\nat your option.\n#### \u00a7\u27e819\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n## \u00a7\u27e820\u27e9Usage\nSimple usage (allocating, no associated data):\n```\nuse aes_gcm::{\n  aead::{Aead, AeadCore, KeyInit, OsRng},\n  Aes256Gcm, Nonce, Key // Or `Aes128Gcm`\n};\n// The encryption key can be generated randomly:\nlet key = Aes256Gcm::generate_key(OsRng);\n// Transformed from a byte array:\nlet key: &[u8; 32] = &[42; 32];\nlet key: &Key<Aes256Gcm> = key.into();\n// Note that you can get byte array from slice using the `TryInto` trait:\nlet key: &[u8] = &[42; 32];\nlet key: [u8; 32] = key.try_into()?;\n// Alternatively, the key can be transformed directly from a byte slice\n// (panicks on length mismatch):\nlet key = Key::<Aes256Gcm>::from_slice(key);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet ciphertext = cipher.encrypt(&nonce, b\"plaintext message\".as_ref())?;\nlet plaintext = cipher.decrypt(&nonce, ciphertext.as_ref())?;\nassert_eq!(&plaintext, b\"plaintext message\");\n```\n\n### \u00a7\u27e821\u27e9In-place Usage (eliminates `alloc` requirement)\nThis crate has an optional `alloc` feature which can be disabled in e.g. microcontroller environments that don\u2019t have a heap.\nThe `AeadInPlace::encrypt_in_place`\u27e822\u27e9 and `AeadInPlace::decrypt_in_place`\u27e823\u27e9 methods accept any type that impls the `aead::Buffer`\u27e824\u27e9 trait which contains the plaintext for encryption or ciphertext for decryption.\nNote that if you enable the `heapless` feature of this crate, you will receive an impl of `aead::Buffer`\u27e824\u27e9 for `heapless::Vec` (re-exported from the `aead`\u27e825\u27e9 crate as `aead::heapless::Vec`\u27e826\u27e9), which can then be passed as the `buffer` parameter to the in-place encrypt and decrypt methods:\n```\nuse aes_gcm::{\n  aead::{AeadCore, AeadInPlace, KeyInit, OsRng, heapless::Vec},\n  Aes256Gcm, Nonce, // Or `Aes128Gcm`\n};\nlet key = Aes256Gcm::generate_key(&mut OsRng);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet mut buffer: Vec<u8, 128> = Vec::new(); // Note: buffer needs 16-bytes overhead for auth tag\nbuffer.extend_from_slice(b\"plaintext message\");\n// Encrypt `buffer` in-place, replacing the plaintext contents with ciphertext\ncipher.encrypt_in_place(&nonce, b\"\", &mut buffer)?;\n// `buffer` now contains the message ciphertext\nassert_ne!(&buffer, b\"plaintext message\");\n// Decrypt `buffer` in-place, replacing its ciphertext context with the original plaintext\ncipher.decrypt_in_place(&nonce, b\"\", &mut buffer)?;\nassert_eq!(&buffer, b\"plaintext message\");\n```\n\nSimilarly, enabling the `arrayvec` feature of this crate will provide an impl of `aead::Buffer`\u27e824\u27e9 for `arrayvec::ArrayVec` (re-exported from the `aead`\u27e825\u27e9 crate as `aead::arrayvec::ArrayVec`\u27e827\u27e9).\n## Re-exports\u00a7\u27e828\u27e9\n\n`pub use aead[](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\");`\n\n\n`pub use aes[](https://docs.rs/aes/0.8.4/x86_64-unknown-linux-gnu/aes/index.html \"mod aes\");`\n\n## Structs\u00a7\u27e829\u27e9\n\nAesGcm\u27e830\u27e9\n    AES-GCM: generic over an underlying AES implementation and nonce size.\n\nError\u27e831\u27e9\n    Error type.\n## Constants\u00a7\u27e832\u27e9\n\nA_MAX\u27e833\u27e9\n    Maximum length of associated data.\n\nC_MAX\u27e834\u27e9\n    Maximum length of ciphertext.\n\nP_MAX\u27e835\u27e9\n    Maximum length of plaintext.\n## Traits\u00a7\u27e836\u27e9\n\nAeadCore\u27e837\u27e9\n    Authenticated Encryption with Associated Data (AEAD) algorithm core trait.\n\nAeadInPlace\u27e838\u27e9\n    In-place stateless AEAD trait.\n\nKeyInit\u27e839\u27e9\n    Types which can be initialized from key.\n\nKeySizeUser\u27e840\u27e9\n    Types which use key for initialization.\n\nTagSize\u27e841\u27e9\n    Trait implemented for valid tag sizes, i.e. [`U12`][consts::U12], [`U13`][consts::U13], [`U14`][consts::U14], [`U15`][consts::U15] and [`U16`][consts::U16].\n## Type Aliases\u00a7\u27e842\u27e9\n\nAes128Gcm\u27e843\u27e9`aes`\n    AES-GCM with a 128-bit key and 96-bit nonce.\n\nAes256Gcm\u27e844\u27e9`aes`\n    AES-GCM with a 256-bit key and 96-bit nonce.\n\nKey\u27e845\u27e9\n    Key used by `KeySizeUser`\u27e840\u27e9 implementors.\n\nNonce\u27e846\u27e9\n    AES-GCM nonces.\n\nTag\u27e847\u27e9\n    AES-GCM tags.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/aes-gcm/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/aes-gcm/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/aes-gcm/latest/src/aes_gcm/lib.rs.html#1-373: Source\n\u27e84\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#rustcrypto-aes-gcm: \u00a7\n\u27e85\u27e9 https://buildstats.info/crate/aes-gcm: ![crate\n\u27e86\u27e9 https://docs.rs/aes-gcm/badge.svg: ![Docs\n\u27e87\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e88\u27e9 https://img.shields.io/badge/rustc-1.56+-blue.svg: Rust Version\n\u27e89\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e810\u27e9 https://github.com/RustCrypto/AEADs/workflows/aes-gcm/badge.svg?branch=master&event=push: ![Build Status\n\u27e811\u27e9 https://en.wikipedia.org/wiki/Authenticated_encryption: Authenticated Encryption with Associated Data (AEAD)\n\u27e812\u27e9 https://docs.rs/aes-gcm/: Documentation\n\u27e813\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#security-notes: \u00a7\n\u27e814\u27e9 https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/: security audit by NCC Group\n\u27e815\u27e9 https://www.mobilecoin.com/: MobileCoin\n\u27e816\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#license: \u00a7\n\u27e817\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e818\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e819\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#contribution: \u00a7\n\u27e820\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#usage: \u00a7\n\u27e821\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#in-place-usage-eliminates-alloc-requirement: \u00a7\n\u27e822\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.encrypt_in_place: method aes_gcm::AeadInPlace::encrypt_in_place - `AeadInPlace::encrypt_in_place`\n\u27e823\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.decrypt_in_place: method aes_gcm::AeadInPlace::decrypt_in_place - `AeadInPlace::decrypt_in_place`\n\u27e824\u27e9 https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html: trait aead::Buffer - `aead::Buffer`\n\u27e825\u27e9 https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html: mod aead - `aead`\n\u27e826\u27e9 https://docs.rs/heapless/0.7.17/x86_64-unknown-linux-gnu/heapless/vec/struct.Vec.html: struct heapless::vec::Vec - `aead::heapless::Vec`\n\u27e827\u27e9 https://docs.rs/arrayvec/0.7.6/x86_64-unknown-linux-gnu/arrayvec/arrayvec/struct.ArrayVec.html: struct arrayvec::arrayvec::ArrayVec - `aead::arrayvec::ArrayVec`\n\u27e828\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#reexports: \u00a7\n\u27e829\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/struct.AesGcm.html: struct aes_gcm::AesGcm - AesGcm\n\u27e831\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/struct.Error.html: struct aes_gcm::Error - Error\n\u27e832\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#constants: \u00a7\n\u27e833\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/constant.A_MAX.html: constant aes_gcm::A_MAX - A_MAX\n\u27e834\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/constant.C_MAX.html: constant aes_gcm::C_MAX - C_MAX\n\u27e835\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/constant.P_MAX.html: constant aes_gcm::P_MAX - P_MAX\n\u27e836\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#traits: \u00a7\n\u27e837\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadCore.html: trait aes_gcm::AeadCore - AeadCore\n\u27e838\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html: trait aes_gcm::AeadInPlace - AeadInPlace\n\u27e839\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeyInit.html: trait aes_gcm::KeyInit - KeyInit\n\u27e840\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeySizeUser.html: trait aes_gcm::KeySizeUser - KeySizeUser\n\u27e841\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.TagSize.html: trait aes_gcm::TagSize - TagSize\n\u27e842\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#types: \u00a7\n\u27e843\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes128Gcm.html: type aes_gcm::Aes128Gcm - Aes128Gcm\n\u27e844\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes256Gcm.html: type aes_gcm::Aes256Gcm - Aes256Gcm\n\u27e845\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Key.html: type aes_gcm::Key - Key\n\u27e846\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Nonce.html: type aes_gcm::Nonce - Nonce\n\u27e847\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Tag.html: type aes_gcm::Tag - Tag\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "aes-gcm",
          "version": "0.11.0-rc.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/aes-gcm/latest/aes_gcm/all.html \"show sidebar\")\n# Crate aes_gcmCopy item path\n[Settings](https://docs.rs/aes-gcm/latest/settings.html)\n[Help](https://docs.rs/aes-gcm/latest/help.html)\nSummary[Source](https://docs.rs/aes-gcm/latest/src/aes_gcm/lib.rs.html#1-373)\nExpand description\n## [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#rustcrypto-aes-gcm)RustCrypto: AES-GCM\n[![crate](https://buildstats.info/crate/aes-gcm)](https://crates.io/crates/aes-gcm) [![Docs](https://docs.rs/aes-gcm/badge.svg)](https://docs.rs/aes-gcm/) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.56+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260038-AEADs) [![Build Status](https://github.com/RustCrypto/AEADs/workflows/aes-gcm/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/AEADs/actions)\nPure Rust implementation of the AES-GCM [Authenticated Encryption with Associated Data (AEAD)](https://en.wikipedia.org/wiki/Authenticated_encryption) cipher.\n[Documentation](https://docs.rs/aes-gcm/)\n### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#security-notes)Security Notes\nThis crate has received one [security audit by NCC Group](https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/), with no significant findings. We would like to thank [MobileCoin](https://www.mobilecoin.com/) for funding the audit.\nAll implementations contained in the crate are designed to execute in constant time, either by relying on hardware intrinsics (i.e. AES-NI and CLMUL on x86/x86_64), or using a portable implementation which is only constant time on processors which implement constant-time multiplication.\nIt is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\n### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#license)License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n## [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#usage)Usage\nSimple usage (allocating, no associated data):\n```\nuse aes_gcm::{\n  aead::{Aead, AeadCore, KeyInit, OsRng},\n  Aes256Gcm, Nonce, Key // Or `Aes128Gcm`\n};\n// The encryption key can be generated randomly:\nlet key = Aes256Gcm::generate_key(OsRng);\n// Transformed from a byte array:\nlet key: &[u8; 32] = &[42; 32];\nlet key: &Key<Aes256Gcm> = key.into();\n// Note that you can get byte array from slice using the `TryInto` trait:\nlet key: &[u8] = &[42; 32];\nlet key: [u8; 32] = key.try_into()?;\n// Alternatively, the key can be transformed directly from a byte slice\n// (panicks on length mismatch):\nlet key = Key::<Aes256Gcm>::from_slice(key);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet ciphertext = cipher.encrypt(&nonce, b\"plaintext message\".as_ref())?;\nlet plaintext = cipher.decrypt(&nonce, ciphertext.as_ref())?;\nassert_eq!(&plaintext, b\"plaintext message\");\n```\n\n### [\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#in-place-usage-eliminates-alloc-requirement)In-place Usage (eliminates `alloc` requirement)\nThis crate has an optional `alloc` feature which can be disabled in e.g. microcontroller environments that don\u2019t have a heap.\nThe [`AeadInPlace::encrypt_in_place`](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.encrypt_in_place \"method aes_gcm::AeadInPlace::encrypt_in_place\") and [`AeadInPlace::decrypt_in_place`](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.decrypt_in_place \"method aes_gcm::AeadInPlace::decrypt_in_place\") methods accept any type that impls the [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") trait which contains the plaintext for encryption or ciphertext for decryption.\nNote that if you enable the `heapless` feature of this crate, you will receive an impl of [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") for `heapless::Vec` (re-exported from the [`aead`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\") crate as [`aead::heapless::Vec`](https://docs.rs/heapless/0.7.17/x86_64-unknown-linux-gnu/heapless/vec/struct.Vec.html \"struct heapless::vec::Vec\")), which can then be passed as the `buffer` parameter to the in-place encrypt and decrypt methods:\n```\nuse aes_gcm::{\n  aead::{AeadCore, AeadInPlace, KeyInit, OsRng, heapless::Vec},\n  Aes256Gcm, Nonce, // Or `Aes128Gcm`\n};\nlet key = Aes256Gcm::generate_key(&mut OsRng);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet mut buffer: Vec<u8, 128> = Vec::new(); // Note: buffer needs 16-bytes overhead for auth tag\nbuffer.extend_from_slice(b\"plaintext message\");\n// Encrypt `buffer` in-place, replacing the plaintext contents with ciphertext\ncipher.encrypt_in_place(&nonce, b\"\", &mut buffer)?;\n// `buffer` now contains the message ciphertext\nassert_ne!(&buffer, b\"plaintext message\");\n// Decrypt `buffer` in-place, replacing its ciphertext context with the original plaintext\ncipher.decrypt_in_place(&nonce, b\"\", &mut buffer)?;\nassert_eq!(&buffer, b\"plaintext message\");\n```\n\nSimilarly, enabling the `arrayvec` feature of this crate will provide an impl of [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") for `arrayvec::ArrayVec` (re-exported from the [`aead`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\") crate as [`aead::arrayvec::ArrayVec`](https://docs.rs/arrayvec/0.7.6/x86_64-unknown-linux-gnu/arrayvec/arrayvec/struct.ArrayVec.html \"struct arrayvec::arrayvec::ArrayVec\")).\n## Re-exports[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#reexports)\n\n`pub use aead[](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\");`\n\n\n`pub use aes[](https://docs.rs/aes/0.8.4/x86_64-unknown-linux-gnu/aes/index.html \"mod aes\");`\n\n## Structs[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#structs)\n\n[AesGcm](https://docs.rs/aes-gcm/latest/aes_gcm/struct.AesGcm.html \"struct aes_gcm::AesGcm\")\n    AES-GCM: generic over an underlying AES implementation and nonce size.\n\n[Error](https://docs.rs/aes-gcm/latest/aes_gcm/struct.Error.html \"struct aes_gcm::Error\")\n    Error type.\n## Constants[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#constants)\n\n[A_MAX](https://docs.rs/aes-gcm/latest/aes_gcm/constant.A_MAX.html \"constant aes_gcm::A_MAX\")\n    Maximum length of associated data.\n\n[C_MAX](https://docs.rs/aes-gcm/latest/aes_gcm/constant.C_MAX.html \"constant aes_gcm::C_MAX\")\n    Maximum length of ciphertext.\n\n[P_MAX](https://docs.rs/aes-gcm/latest/aes_gcm/constant.P_MAX.html \"constant aes_gcm::P_MAX\")\n    Maximum length of plaintext.\n## Traits[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#traits)\n\n[AeadCore](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadCore.html \"trait aes_gcm::AeadCore\")\n    Authenticated Encryption with Associated Data (AEAD) algorithm core trait.\n\n[AeadInPlace](https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html \"trait aes_gcm::AeadInPlace\")\n    In-place stateless AEAD trait.\n\n[KeyInit](https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeyInit.html \"trait aes_gcm::KeyInit\")\n    Types which can be initialized from key.\n\n[KeySizeUser](https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeySizeUser.html \"trait aes_gcm::KeySizeUser\")\n    Types which use key for initialization.\n\n[TagSize](https://docs.rs/aes-gcm/latest/aes_gcm/trait.TagSize.html \"trait aes_gcm::TagSize\")\n    Trait implemented for valid tag sizes, i.e. [`U12`][consts::U12], [`U13`][consts::U13], [`U14`][consts::U14], [`U15`][consts::U15] and [`U16`][consts::U16].\n## Type Aliases[\u00a7](https://docs.rs/aes-gcm/latest/aes_gcm/#types)\n\n[Aes128Gcm](https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes128Gcm.html \"type aes_gcm::Aes128Gcm\")`aes`\n    AES-GCM with a 128-bit key and 96-bit nonce.\n\n[Aes256Gcm](https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes256Gcm.html \"type aes_gcm::Aes256Gcm\")`aes`\n    AES-GCM with a 256-bit key and 96-bit nonce.\n\n[Key](https://docs.rs/aes-gcm/latest/aes_gcm/type.Key.html \"type aes_gcm::Key\")\n    Key used by [`KeySizeUser`](https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeySizeUser.html \"trait aes_gcm::KeySizeUser\") implementors.\n\n[Nonce](https://docs.rs/aes-gcm/latest/aes_gcm/type.Nonce.html \"type aes_gcm::Nonce\")\n    AES-GCM nonces.\n\n[Tag](https://docs.rs/aes-gcm/latest/aes_gcm/type.Tag.html \"type aes_gcm::Tag\")\n    AES-GCM tags.\n",
            "markdown_with_citations": "[](https://docs.rs/aes-gcm/latest/aes_gcm/all.html \"show sidebar\")\n# Crate aes_gcmCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto: AES-GCM\n![crate\u27e85\u27e9](https://crates.io/crates/aes-gcm) ![Docs\u27e86\u27e9](https://docs.rs/aes-gcm/) ![Apache2/MIT licensed\u27e87\u27e9] ![Rust Version\u27e88\u27e9] ![Project Chat\u27e89\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260038-AEADs) ![Build Status\u27e810\u27e9](https://github.com/RustCrypto/AEADs/actions)\nPure Rust implementation of the AES-GCM Authenticated Encryption with Associated Data (AEAD)\u27e811\u27e9 cipher.\nDocumentation\u27e812\u27e9\n### \u00a7\u27e813\u27e9Security Notes\nThis crate has received one security audit by NCC Group\u27e814\u27e9, with no significant findings. We would like to thank MobileCoin\u27e815\u27e9 for funding the audit.\nAll implementations contained in the crate are designed to execute in constant time, either by relying on hardware intrinsics (i.e. AES-NI and CLMUL on x86/x86_64), or using a portable implementation which is only constant time on processors which implement constant-time multiplication.\nIt is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\n### \u00a7\u27e816\u27e9License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e817\u27e9\n  * MIT license\u27e818\u27e9\n\n\nat your option.\n#### \u00a7\u27e819\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n## \u00a7\u27e820\u27e9Usage\nSimple usage (allocating, no associated data):\n```\nuse aes_gcm::{\n  aead::{Aead, AeadCore, KeyInit, OsRng},\n  Aes256Gcm, Nonce, Key // Or `Aes128Gcm`\n};\n// The encryption key can be generated randomly:\nlet key = Aes256Gcm::generate_key(OsRng);\n// Transformed from a byte array:\nlet key: &[u8; 32] = &[42; 32];\nlet key: &Key<Aes256Gcm> = key.into();\n// Note that you can get byte array from slice using the `TryInto` trait:\nlet key: &[u8] = &[42; 32];\nlet key: [u8; 32] = key.try_into()?;\n// Alternatively, the key can be transformed directly from a byte slice\n// (panicks on length mismatch):\nlet key = Key::<Aes256Gcm>::from_slice(key);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet ciphertext = cipher.encrypt(&nonce, b\"plaintext message\".as_ref())?;\nlet plaintext = cipher.decrypt(&nonce, ciphertext.as_ref())?;\nassert_eq!(&plaintext, b\"plaintext message\");\n```\n\n### \u00a7\u27e821\u27e9In-place Usage (eliminates `alloc` requirement)\nThis crate has an optional `alloc` feature which can be disabled in e.g. microcontroller environments that don\u2019t have a heap.\nThe `AeadInPlace::encrypt_in_place`\u27e822\u27e9 and `AeadInPlace::decrypt_in_place`\u27e823\u27e9 methods accept any type that impls the `aead::Buffer`\u27e824\u27e9 trait which contains the plaintext for encryption or ciphertext for decryption.\nNote that if you enable the `heapless` feature of this crate, you will receive an impl of `aead::Buffer`\u27e824\u27e9 for `heapless::Vec` (re-exported from the `aead`\u27e825\u27e9 crate as `aead::heapless::Vec`\u27e826\u27e9), which can then be passed as the `buffer` parameter to the in-place encrypt and decrypt methods:\n```\nuse aes_gcm::{\n  aead::{AeadCore, AeadInPlace, KeyInit, OsRng, heapless::Vec},\n  Aes256Gcm, Nonce, // Or `Aes128Gcm`\n};\nlet key = Aes256Gcm::generate_key(&mut OsRng);\nlet cipher = Aes256Gcm::new(&key);\nlet nonce = Aes256Gcm::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet mut buffer: Vec<u8, 128> = Vec::new(); // Note: buffer needs 16-bytes overhead for auth tag\nbuffer.extend_from_slice(b\"plaintext message\");\n// Encrypt `buffer` in-place, replacing the plaintext contents with ciphertext\ncipher.encrypt_in_place(&nonce, b\"\", &mut buffer)?;\n// `buffer` now contains the message ciphertext\nassert_ne!(&buffer, b\"plaintext message\");\n// Decrypt `buffer` in-place, replacing its ciphertext context with the original plaintext\ncipher.decrypt_in_place(&nonce, b\"\", &mut buffer)?;\nassert_eq!(&buffer, b\"plaintext message\");\n```\n\nSimilarly, enabling the `arrayvec` feature of this crate will provide an impl of `aead::Buffer`\u27e824\u27e9 for `arrayvec::ArrayVec` (re-exported from the `aead`\u27e825\u27e9 crate as `aead::arrayvec::ArrayVec`\u27e827\u27e9).\n## Re-exports\u00a7\u27e828\u27e9\n\n`pub use aead[](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\");`\n\n\n`pub use aes[](https://docs.rs/aes/0.8.4/x86_64-unknown-linux-gnu/aes/index.html \"mod aes\");`\n\n## Structs\u00a7\u27e829\u27e9\n\nAesGcm\u27e830\u27e9\n    AES-GCM: generic over an underlying AES implementation and nonce size.\n\nError\u27e831\u27e9\n    Error type.\n## Constants\u00a7\u27e832\u27e9\n\nA_MAX\u27e833\u27e9\n    Maximum length of associated data.\n\nC_MAX\u27e834\u27e9\n    Maximum length of ciphertext.\n\nP_MAX\u27e835\u27e9\n    Maximum length of plaintext.\n## Traits\u00a7\u27e836\u27e9\n\nAeadCore\u27e837\u27e9\n    Authenticated Encryption with Associated Data (AEAD) algorithm core trait.\n\nAeadInPlace\u27e838\u27e9\n    In-place stateless AEAD trait.\n\nKeyInit\u27e839\u27e9\n    Types which can be initialized from key.\n\nKeySizeUser\u27e840\u27e9\n    Types which use key for initialization.\n\nTagSize\u27e841\u27e9\n    Trait implemented for valid tag sizes, i.e. [`U12`][consts::U12], [`U13`][consts::U13], [`U14`][consts::U14], [`U15`][consts::U15] and [`U16`][consts::U16].\n## Type Aliases\u00a7\u27e842\u27e9\n\nAes128Gcm\u27e843\u27e9`aes`\n    AES-GCM with a 128-bit key and 96-bit nonce.\n\nAes256Gcm\u27e844\u27e9`aes`\n    AES-GCM with a 256-bit key and 96-bit nonce.\n\nKey\u27e845\u27e9\n    Key used by `KeySizeUser`\u27e840\u27e9 implementors.\n\nNonce\u27e846\u27e9\n    AES-GCM nonces.\n\nTag\u27e847\u27e9\n    AES-GCM tags.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/aes-gcm/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/aes-gcm/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/aes-gcm/latest/src/aes_gcm/lib.rs.html#1-373: Source\n\u27e84\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#rustcrypto-aes-gcm: \u00a7\n\u27e85\u27e9 https://buildstats.info/crate/aes-gcm: ![crate\n\u27e86\u27e9 https://docs.rs/aes-gcm/badge.svg: ![Docs\n\u27e87\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e88\u27e9 https://img.shields.io/badge/rustc-1.56+-blue.svg: Rust Version\n\u27e89\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e810\u27e9 https://github.com/RustCrypto/AEADs/workflows/aes-gcm/badge.svg?branch=master&event=push: ![Build Status\n\u27e811\u27e9 https://en.wikipedia.org/wiki/Authenticated_encryption: Authenticated Encryption with Associated Data (AEAD)\n\u27e812\u27e9 https://docs.rs/aes-gcm/: Documentation\n\u27e813\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#security-notes: \u00a7\n\u27e814\u27e9 https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/: security audit by NCC Group\n\u27e815\u27e9 https://www.mobilecoin.com/: MobileCoin\n\u27e816\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#license: \u00a7\n\u27e817\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e818\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e819\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#contribution: \u00a7\n\u27e820\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#usage: \u00a7\n\u27e821\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#in-place-usage-eliminates-alloc-requirement: \u00a7\n\u27e822\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.encrypt_in_place: method aes_gcm::AeadInPlace::encrypt_in_place - `AeadInPlace::encrypt_in_place`\n\u27e823\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html#method.decrypt_in_place: method aes_gcm::AeadInPlace::decrypt_in_place - `AeadInPlace::decrypt_in_place`\n\u27e824\u27e9 https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html: trait aead::Buffer - `aead::Buffer`\n\u27e825\u27e9 https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html: mod aead - `aead`\n\u27e826\u27e9 https://docs.rs/heapless/0.7.17/x86_64-unknown-linux-gnu/heapless/vec/struct.Vec.html: struct heapless::vec::Vec - `aead::heapless::Vec`\n\u27e827\u27e9 https://docs.rs/arrayvec/0.7.6/x86_64-unknown-linux-gnu/arrayvec/arrayvec/struct.ArrayVec.html: struct arrayvec::arrayvec::ArrayVec - `aead::arrayvec::ArrayVec`\n\u27e828\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#reexports: \u00a7\n\u27e829\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/struct.AesGcm.html: struct aes_gcm::AesGcm - AesGcm\n\u27e831\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/struct.Error.html: struct aes_gcm::Error - Error\n\u27e832\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#constants: \u00a7\n\u27e833\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/constant.A_MAX.html: constant aes_gcm::A_MAX - A_MAX\n\u27e834\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/constant.C_MAX.html: constant aes_gcm::C_MAX - C_MAX\n\u27e835\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/constant.P_MAX.html: constant aes_gcm::P_MAX - P_MAX\n\u27e836\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#traits: \u00a7\n\u27e837\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadCore.html: trait aes_gcm::AeadCore - AeadCore\n\u27e838\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.AeadInPlace.html: trait aes_gcm::AeadInPlace - AeadInPlace\n\u27e839\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeyInit.html: trait aes_gcm::KeyInit - KeyInit\n\u27e840\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.KeySizeUser.html: trait aes_gcm::KeySizeUser - KeySizeUser\n\u27e841\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/trait.TagSize.html: trait aes_gcm::TagSize - TagSize\n\u27e842\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/#types: \u00a7\n\u27e843\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes128Gcm.html: type aes_gcm::Aes128Gcm - Aes128Gcm\n\u27e844\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Aes256Gcm.html: type aes_gcm::Aes256Gcm - Aes256Gcm\n\u27e845\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Key.html: type aes_gcm::Key - Key\n\u27e846\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Nonce.html: type aes_gcm::Nonce - Nonce\n\u27e847\u27e9 https://docs.rs/aes-gcm/latest/aes_gcm/type.Tag.html: type aes_gcm::Tag - Tag\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `aes-gcm` crate is a pure Rust implementation of the AES-GCM cipher, providing authenticated encryption with associated data (AEAD). It supports both allocation-based and in-place encryption/decryption, making it suitable for environments with or without a heap (e.g., microcontrollers). The crate ensures constant-time execution for security and offers optional features like `heapless` and `arrayvec` for buffer management.",
          "feature_summary": null,
          "use_case": "Cryptography",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Key Generation and Usage\n\u2705 Factual: The `aes-gcm` crate allows keys to be generated randomly using the `OsRng` random number generator, ensuring cryptographic-grade randomness.  \n\u274c Counterfactual: The `aes-gcm` crate requires developers to manually specify key values, as it does not support random key generation.\n\n---\n\n### Pair 2: In-Place Encryption and Decryption\n\u2705 Factual: The `aes-gcm` crate provides in-place encryption and decryption methods (`encrypt_in_place` and `decrypt_in_place`) that eliminate the need for heap allocation, making it suitable for microcontroller environments.  \n\u274c Counterfactual: The `aes-gcm` crate only supports encryption and decryption methods that require heap allocation, making it unsuitable for environments without a heap.\n\n---\n\n### Pair 3: Security Audit\n\u2705 Factual: The `aes-gcm` crate has undergone a security audit by NCC Group, which found no significant vulnerabilities in its implementation.  \n\u274c Counterfactual: The `aes-gcm` crate has never been audited for security vulnerabilities, and its implementation is considered unverified.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-836a17b0-59ec6c75-1751264532",
      "timestamp": "2025-06-30T06:22:12.176639+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]