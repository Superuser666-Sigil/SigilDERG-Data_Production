[
  {
    "execution_id": "exec-8fae7831-a7f93eae-1751262913",
    "timestamp": "2025-06-30T05:55:13.565056+00:00",
    "sacred_chain": {
      "input_data": "crossbeam-epoch",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'crossbeam-epoch' -> 'crossbeam-epoch'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "crossbeam-epoch",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/crossbeam-epoch",
            "title": "crossbeam-epoch v0.9.18",
            "content": {
              "raw_markdown": "#  crossbeam-epoch v0.9.18\nEpoch-based garbage collection \n  * [ #atomic ](https://crates.io/keywords/atomic)\n  * [ #rcu ](https://crates.io/keywords/rcu)\n  * [ #garbage ](https://crates.io/keywords/garbage)\n  * [ #lock-free ](https://crates.io/keywords/lock-free)\n\n\n  * [ Readme ](https://crates.io/crates/crossbeam-epoch)\n  * [ 38 Versions ](https://crates.io/crates/crossbeam-epoch/versions)\n  * [ Dependencies ](https://crates.io/crates/crossbeam-epoch/dependencies)\n  * [ Dependents ](https://crates.io/crates/crossbeam-epoch/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \nv1.61.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n45.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add crossbeam-epoch\nOr add the following line to your Cargo.toml:\ncrossbeam-epoch = \"0.9.18\"\n## Homepage\n[ github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-epoch ](https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-epoch)\n## Repository\n[ github.com/crossbeam-rs/crossbeam ](https://github.com/crossbeam-rs/crossbeam)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Concurrency](https://crates.io/categories/concurrency)\n  * [Memory management](https://crates.io/categories/memory-management)\n\n\n[ Report crate ](https://crates.io/support?crate=crossbeam-epoch&inquire=crate-violation)\n### Stats Overview\n265,236,773 Downloads all time\n38 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  crossbeam-epoch v0.9.18\nEpoch-based garbage collection \n  *  #atomic \u27e81\u27e9\n  *  #rcu \u27e82\u27e9\n  *  #garbage \u27e83\u27e9\n  *  #lock-free \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  38 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\nover 1 year ago \nv1.61.0 \n MIT \u27e89\u27e9 OR  Apache-2.0 \u27e810\u27e9\n45.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add crossbeam-epoch\nOr add the following line to your Cargo.toml:\ncrossbeam-epoch = \"0.9.18\"\n## Homepage\n github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-epoch \u27e811\u27e9\n## Repository\n github.com/crossbeam-rs/crossbeam \u27e812\u27e9\n## Owners\n## Categories\n  * No standard library\u27e813\u27e9\n  * Concurrency\u27e814\u27e9\n  * Memory management\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n265,236,773 Downloads all time\n38 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/atomic:  #atomic \n\u27e82\u27e9 https://crates.io/keywords/rcu:  #rcu \n\u27e83\u27e9 https://crates.io/keywords/garbage:  #garbage \n\u27e84\u27e9 https://crates.io/keywords/lock-free:  #lock-free \n\u27e85\u27e9 https://crates.io/crates/crossbeam-epoch:  Readme \n\u27e86\u27e9 https://crates.io/crates/crossbeam-epoch/versions:  38 Versions \n\u27e87\u27e9 https://crates.io/crates/crossbeam-epoch/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/crossbeam-epoch/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-epoch:  github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-epoch \n\u27e812\u27e9 https://github.com/crossbeam-rs/crossbeam:  github.com/crossbeam-rs/crossbeam \n\u27e813\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e814\u27e9 https://crates.io/categories/concurrency: Concurrency\n\u27e815\u27e9 https://crates.io/categories/memory-management: Memory management\n\u27e816\u27e9 https://crates.io/support?crate=crossbeam-epoch&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1611,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116703.408155"
          },
          "docs_rs": {
            "url": "https://docs.rs/crossbeam-epoch",
            "title": "Crate crossbeam_epochCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/all.html \"show sidebar\")\n# Crate crossbeam_epochCopy item path\n[Settings](https://docs.rs/crossbeam-epoch/latest/settings.html)\n[Help](https://docs.rs/crossbeam-epoch/latest/help.html)\nSummary[Source](https://docs.rs/crossbeam-epoch/latest/src/crossbeam_epoch/lib.rs.html#1-166)\nExpand description\nEpoch-based memory reclamation.\nAn interesting problem concurrent collections deal with comes from the remove operation. Suppose that a thread removes an element from a lock-free map, while another thread is reading that same element at the same time. The first thread must wait until the second thread stops reading the element. Only then it is safe to destruct it.\nProgramming languages that come with garbage collectors solve this problem trivially. The garbage collector will destruct the removed element when no thread can hold a reference to it anymore.\nThis crate implements a basic memory reclamation mechanism, which is based on epochs. When an element gets removed from a concurrent collection, it is inserted into a pile of garbage and marked with the current epoch. Every time a thread accesses a collection, it checks the current epoch, attempts to increment it, and destructs some garbage that became so old that no thread can be referencing it anymore.\nThat is the general mechanism behind epoch-based memory reclamation, but the details are a bit more complicated. Anyhow, memory reclamation is designed to be fully automatic and something users of concurrent collections don\u2019t have to worry much about.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pointers)Pointers\nConcurrent collections are built using atomic pointers. This module provides [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\"), which is just a shared atomic pointer to a heap-allocated object. Loading an [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\") yields a [`Shared`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Shared.html \"struct crossbeam_epoch::Shared\"), which is an epoch-protected pointer through which the loaded object can be safely read.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pinning)Pinning\nBefore an [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\") can be loaded, a participant must be [`pin`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html \"fn crossbeam_epoch::pin\")ned. By pinning a participant we declare that any object that gets removed from now on must not be destructed just yet. Garbage collection of newly removed objects is suspended until the participant gets unpinned.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#garbage)Garbage\nObjects that get removed from concurrent collections must be stashed away until all currently pinned participants get unpinned. Such objects can be stored into a thread-local or global storage, where they are kept until the right time for their destruction comes.\nThere is a global shared instance of garbage queue. You can [`defer`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html#method.defer \"method crossbeam_epoch::Guard::defer\") the execution of an arbitrary function until the global epoch is advanced enough. Most notably, concurrent data structures may defer the deallocation of an object.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#apis)APIs\nFor majority of use cases, just use the default garbage collector by invoking [`pin`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html \"fn crossbeam_epoch::pin\"). If you want to create your own garbage collector, use the [`Collector`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Collector.html \"struct crossbeam_epoch::Collector\") API.\n## Structs[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#structs)\n\n[Atomic](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\")\n    An atomic pointer that can be safely shared between threads.\n\n[Collector](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Collector.html \"struct crossbeam_epoch::Collector\")\n    An epoch-based garbage collector.\n\n[CompareExchangeError](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.CompareExchangeError.html \"struct crossbeam_epoch::CompareExchangeError\")\n    The error returned on failed compare-and-swap operation.\n\n[Guard](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html \"struct crossbeam_epoch::Guard\")\n    A guard that keeps the current thread pinned.\n\n[LocalHandle](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.LocalHandle.html \"struct crossbeam_epoch::LocalHandle\")\n    A handle to a garbage collector.\n\n[Owned](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Owned.html \"struct crossbeam_epoch::Owned\")\n    An owned heap-allocated object.\n\n[Shared](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Shared.html \"struct crossbeam_epoch::Shared\")\n    A pointer to an object protected by the epoch GC.\n## Traits[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#traits)\n\n[CompareAndSetOrdering](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.CompareAndSetOrdering.html \"trait crossbeam_epoch::CompareAndSetOrdering\")Deprecated\n    Memory orderings for compare-and-set operations.\n\n[Pointable](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointable.html \"trait crossbeam_epoch::Pointable\")\n    Types that are pointed to by a single word.\n\n[Pointer](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointer.html \"trait crossbeam_epoch::Pointer\")\n    A trait for either `Owned` or `Shared` pointers.\n## Functions[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#functions)\n\n[default_collector](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.default_collector.html \"fn crossbeam_epoch::default_collector\")\n    Returns the default global collector.\n\n[is_pinned](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.is_pinned.html \"fn crossbeam_epoch::is_pinned\")\n    Returns `true` if the current thread is pinned.\n\n[pin](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html \"fn crossbeam_epoch::pin\")\n    Pins the current thread.\n\n[unprotected](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.unprotected.html \"fn crossbeam_epoch::unprotected\")\u26a0\n    Returns a reference to a dummy guard that allows unprotected access to [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\")s.\n## Type Aliases[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#types)\n\n[CompareAndSetError](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/type.CompareAndSetError.html \"type crossbeam_epoch::CompareAndSetError\")Deprecated\n    The error returned on failed compare-and-set operation.\n",
              "markdown_with_citations": "[](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/all.html \"show sidebar\")\n# Crate crossbeam_epochCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nEpoch-based memory reclamation.\nAn interesting problem concurrent collections deal with comes from the remove operation. Suppose that a thread removes an element from a lock-free map, while another thread is reading that same element at the same time. The first thread must wait until the second thread stops reading the element. Only then it is safe to destruct it.\nProgramming languages that come with garbage collectors solve this problem trivially. The garbage collector will destruct the removed element when no thread can hold a reference to it anymore.\nThis crate implements a basic memory reclamation mechanism, which is based on epochs. When an element gets removed from a concurrent collection, it is inserted into a pile of garbage and marked with the current epoch. Every time a thread accesses a collection, it checks the current epoch, attempts to increment it, and destructs some garbage that became so old that no thread can be referencing it anymore.\nThat is the general mechanism behind epoch-based memory reclamation, but the details are a bit more complicated. Anyhow, memory reclamation is designed to be fully automatic and something users of concurrent collections don\u2019t have to worry much about.\n## \u00a7\u27e84\u27e9Pointers\nConcurrent collections are built using atomic pointers. This module provides `Atomic`\u27e85\u27e9, which is just a shared atomic pointer to a heap-allocated object. Loading an `Atomic`\u27e85\u27e9 yields a `Shared`\u27e86\u27e9, which is an epoch-protected pointer through which the loaded object can be safely read.\n## \u00a7\u27e87\u27e9Pinning\nBefore an `Atomic`\u27e85\u27e9 can be loaded, a participant must be `pin`\u27e88\u27e9ned. By pinning a participant we declare that any object that gets removed from now on must not be destructed just yet. Garbage collection of newly removed objects is suspended until the participant gets unpinned.\n## \u00a7\u27e89\u27e9Garbage\nObjects that get removed from concurrent collections must be stashed away until all currently pinned participants get unpinned. Such objects can be stored into a thread-local or global storage, where they are kept until the right time for their destruction comes.\nThere is a global shared instance of garbage queue. You can `defer`\u27e810\u27e9 the execution of an arbitrary function until the global epoch is advanced enough. Most notably, concurrent data structures may defer the deallocation of an object.\n## \u00a7\u27e811\u27e9APIs\nFor majority of use cases, just use the default garbage collector by invoking `pin`\u27e88\u27e9. If you want to create your own garbage collector, use the `Collector`\u27e812\u27e9 API.\n## Structs\u00a7\u27e813\u27e9\n\nAtomic\u27e85\u27e9\n    An atomic pointer that can be safely shared between threads.\n\nCollector\u27e812\u27e9\n    An epoch-based garbage collector.\n\nCompareExchangeError\u27e814\u27e9\n    The error returned on failed compare-and-swap operation.\n\nGuard\u27e815\u27e9\n    A guard that keeps the current thread pinned.\n\nLocalHandle\u27e816\u27e9\n    A handle to a garbage collector.\n\nOwned\u27e817\u27e9\n    An owned heap-allocated object.\n\nShared\u27e86\u27e9\n    A pointer to an object protected by the epoch GC.\n## Traits\u00a7\u27e818\u27e9\n\nCompareAndSetOrdering\u27e819\u27e9Deprecated\n    Memory orderings for compare-and-set operations.\n\nPointable\u27e820\u27e9\n    Types that are pointed to by a single word.\n\nPointer\u27e821\u27e9\n    A trait for either `Owned` or `Shared` pointers.\n## Functions\u00a7\u27e822\u27e9\n\ndefault_collector\u27e823\u27e9\n    Returns the default global collector.\n\nis_pinned\u27e824\u27e9\n    Returns `true` if the current thread is pinned.\n\npin\u27e88\u27e9\n    Pins the current thread.\n\nunprotected\u27e825\u27e9\u26a0\n    Returns a reference to a dummy guard that allows unprotected access to `Atomic`\u27e85\u27e9s.\n## Type Aliases\u00a7\u27e826\u27e9\n\nCompareAndSetError\u27e827\u27e9Deprecated\n    The error returned on failed compare-and-set operation.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/crossbeam-epoch/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/crossbeam-epoch/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/crossbeam-epoch/latest/src/crossbeam_epoch/lib.rs.html#1-166: Source\n\u27e84\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pointers: \u00a7\n\u27e85\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html: struct crossbeam_epoch::Atomic - `Atomic`\n\u27e86\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Shared.html: struct crossbeam_epoch::Shared - `Shared`\n\u27e87\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pinning: \u00a7\n\u27e88\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html: fn crossbeam_epoch::pin - `pin`\n\u27e89\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#garbage: \u00a7\n\u27e810\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html#method.defer: method crossbeam_epoch::Guard::defer - `defer`\n\u27e811\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#apis: \u00a7\n\u27e812\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Collector.html: struct crossbeam_epoch::Collector - `Collector`\n\u27e813\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.CompareExchangeError.html: struct crossbeam_epoch::CompareExchangeError - CompareExchangeError\n\u27e815\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html: struct crossbeam_epoch::Guard - Guard\n\u27e816\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.LocalHandle.html: struct crossbeam_epoch::LocalHandle - LocalHandle\n\u27e817\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Owned.html: struct crossbeam_epoch::Owned - Owned\n\u27e818\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#traits: \u00a7\n\u27e819\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.CompareAndSetOrdering.html: trait crossbeam_epoch::CompareAndSetOrdering - CompareAndSetOrdering\n\u27e820\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointable.html: trait crossbeam_epoch::Pointable - Pointable\n\u27e821\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointer.html: trait crossbeam_epoch::Pointer - Pointer\n\u27e822\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#functions: \u00a7\n\u27e823\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.default_collector.html: fn crossbeam_epoch::default_collector - default_collector\n\u27e824\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.is_pinned.html: fn crossbeam_epoch::is_pinned - is_pinned\n\u27e825\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.unprotected.html: fn crossbeam_epoch::unprotected - unprotected\n\u27e826\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#types: \u00a7\n\u27e827\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/type.CompareAndSetError.html: type crossbeam_epoch::CompareAndSetError - CompareAndSetError\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7120,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116704.2658378"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/crossbeam-epoch",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [31 releases](https://lib.rs/crates/crossbeam-epoch/versions)\n0.9.18 |  Jan 8, 2024   \n---|---  \n0.9.17 |  Dec 24, 2023   \n0.9.15 |  Jun 12, 2023   \n0.9.14 |  Feb 28, 2023   \n0.2.0 |  Nov 29, 2017   \n#**725** in [Memory management](https://lib.rs/memory-management \"Crates to help with allocation, memory mapping, garbage collection, reference counting, or interfaces to foreign memory managers.\")\nDownload history 2283753/week @ 2025-01-31 2433258/week @ 2025-02-07 2302992/week @ 2025-02-14 2539311/week @ 2025-02-21 2667250/week @ 2025-02-28 2837020/week @ 2025-03-07 2880274/week @ 2025-03-14 3412296/week @ 2025-03-21 2688949/week @ 2025-03-28 2929405/week @ 2025-04-04 2823754/week @ 2025-04-11 2702002/week @ 2025-04-18 2709312/week @ 2025-04-25 2585415/week @ 2025-05-02 2722240/week @ 2025-05-09 2504727/week @ 2025-05-16\n**10,991,241** downloads per month Used in [**21,986** crates (62 directly)](https://lib.rs/crates/crossbeam-epoch/rev)\n**MIT/Apache**\n275KB  4K  SLoC\n# Crossbeam Epoch\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/crossbeam-rs/crossbeam/workflows/CI/badge.svg)](https://github.com/crossbeam-rs/crossbeam/actions) [![License](https://img.shields.io/badge/license-MIT_OR_Apache--2.0-blue.svg)](https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-epoch#license) [![Cargo](https://img.shields.io/crates/v/crossbeam-epoch.svg)](https://crates.io/crates/crossbeam-epoch) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/crossbeam-epoch/badge.svg)](https://docs.rs/crossbeam-epoch) [![Rust 1.61+](https://img.shields.io/badge/rust-1.61+-lightgray.svg)](https://www.rust-lang.org) [![chat](https://img.shields.io/discord/569610676205781012.svg?logo=discord)](https://discord.com/invite/JXYwgWZ)\nThis crate provides epoch-based garbage collection for building concurrent data structures.\nWhen a thread removes an object from a concurrent data structure, other threads may be still using pointers to it at the same time, so it cannot be destroyed immediately. Epoch-based GC is an efficient mechanism for deferring destruction of shared objects until no pointers to them can exist.\nEverything in this crate except the global GC can be used in ``no_std`` environments, provided that ``alloc`` feature is enabled.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`crossbeam-epoch ``=` ``\"`0.9`\"``\n``\n```\n\n## Compatibility\nCrossbeam Epoch supports stable Rust releases going back at least six months, and every time the minimum supported Rust version is increased, a new minor version is released. Currently, the minimum supported Rust version is 1.61.\n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/crossbeam-rs/crossbeam/blob/9c3182abebb36bdc9446d75d4644190fef70fa01/crossbeam-epoch/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/crossbeam-rs/crossbeam/blob/9c3182abebb36bdc9446d75d4644190fef70fa01/crossbeam-epoch/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0\u201318MB  ~292K SLoC\n  * [crossbeam-utils](https://lib.rs/crates/crossbeam-utils \"0.8.18\")\n  * [loom?](https://lib.rs/crates/crossbeam-epoch/features#feature-loom \"optional feature\") [loom](https://lib.rs/crates/loom \"renamed loom-crate, new\") 0.7.1 crossbeam_loom\n\n\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8\n\n\n#### [Other features](https://lib.rs/crates/crossbeam-epoch/features)\n  * [alloc](https://lib.rs/crates/crossbeam-epoch/features#feature-alloc)\n  * [nightly](https://lib.rs/crates/crossbeam-epoch/features#feature-nightly)\n  * [std](https://lib.rs/crates/crossbeam-epoch/features#feature-std)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  31 releases\u27e81\u27e9\n0.9.18 |  Jan 8, 2024   \n---|---  \n0.9.17 |  Dec 24, 2023   \n0.9.15 |  Jun 12, 2023   \n0.9.14 |  Feb 28, 2023   \n0.2.0 |  Nov 29, 2017   \n#**725** in Memory management\u27e82\u27e9\nDownload history 2283753/week @ 2025-01-31 2433258/week @ 2025-02-07 2302992/week @ 2025-02-14 2539311/week @ 2025-02-21 2667250/week @ 2025-02-28 2837020/week @ 2025-03-07 2880274/week @ 2025-03-14 3412296/week @ 2025-03-21 2688949/week @ 2025-03-28 2929405/week @ 2025-04-04 2823754/week @ 2025-04-11 2702002/week @ 2025-04-18 2709312/week @ 2025-04-25 2585415/week @ 2025-05-02 2722240/week @ 2025-05-09 2504727/week @ 2025-05-16\n**10,991,241** downloads per month Used in **21,986** crates (62 directly)\u27e83\u27e9\n**MIT/Apache**\n275KB  4K  SLoC\n# Crossbeam Epoch\n![Build Status\u27e84\u27e9](https://github.com/crossbeam-rs/crossbeam/actions) ![License\u27e85\u27e9](https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-epoch#license) ![Cargo\u27e86\u27e9](https://crates.io/crates/crossbeam-epoch) ![Documentation\u27e87\u27e9](https://docs.rs/crossbeam-epoch) ![Rust 1.61+\u27e88\u27e9](https://www.rust-lang.org) ![chat\u27e89\u27e9](https://discord.com/invite/JXYwgWZ)\nThis crate provides epoch-based garbage collection for building concurrent data structures.\nWhen a thread removes an object from a concurrent data structure, other threads may be still using pointers to it at the same time, so it cannot be destroyed immediately. Epoch-based GC is an efficient mechanism for deferring destruction of shared objects until no pointers to them can exist.\nEverything in this crate except the global GC can be used in ``no_std`` environments, provided that ``alloc`` feature is enabled.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`crossbeam-epoch ``=` ``\"`0.9`\"``\n``\n```\n\n## Compatibility\nCrossbeam Epoch supports stable Rust releases going back at least six months, and every time the minimum supported Rust version is increased, a new minor version is released. Currently, the minimum supported Rust version is 1.61.\n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e810\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e811\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0\u201318MB  ~292K SLoC\n  * crossbeam-utils\u27e812\u27e9\n  * loom?\u27e813\u27e9 loom\u27e814\u27e9 0.7.1 crossbeam_loom\n\n\n  * dev  rand\u27e815\u27e9 0.8\n\n\n#### Other features\u27e816\u27e9\n  * alloc\u27e817\u27e9\n  * nightly\u27e818\u27e9\n  * std\u27e819\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/crossbeam-epoch/versions: 31 releases\n\u27e82\u27e9 https://lib.rs/memory-management: Crates to help with allocation, memory mapping, garbage collection, reference counting, or interfaces to foreign memory managers. - Memory management\n\u27e83\u27e9 https://lib.rs/crates/crossbeam-epoch/rev: **21,986** crates (62 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/crossbeam-rs/crossbeam/workflows/CI/badge.svg: ![Build Status\n\u27e85\u27e9 https://img.shields.io/badge/license-MIT_OR_Apache--2.0-blue.svg: ![License\n\u27e86\u27e9 https://img.shields.io/crates/v/crossbeam-epoch.svg: ![Cargo\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/crossbeam-epoch/badge.svg: ![Documentation\n\u27e88\u27e9 https://img.shields.io/badge/rust-1.61+-lightgray.svg: ![Rust 1.61+\n\u27e89\u27e9 https://img.shields.io/discord/569610676205781012.svg?logo=discord: ![chat\n\u27e810\u27e9 https://github.com/crossbeam-rs/crossbeam/blob/9c3182abebb36bdc9446d75d4644190fef70fa01/crossbeam-epoch/LICENSE-APACHE: LICENSE-APACHE\n\u27e811\u27e9 https://github.com/crossbeam-rs/crossbeam/blob/9c3182abebb36bdc9446d75d4644190fef70fa01/crossbeam-epoch/LICENSE-MIT: LICENSE-MIT\n\u27e812\u27e9 https://lib.rs/crates/crossbeam-utils: 0.8.18 - crossbeam-utils\n\u27e813\u27e9 https://lib.rs/crates/crossbeam-epoch/features#feature-loom: optional feature - loom?\n\u27e814\u27e9 https://lib.rs/crates/loom: renamed loom-crate, new - loom\n\u27e815\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e816\u27e9 https://lib.rs/crates/crossbeam-epoch/features: Other features\n\u27e817\u27e9 https://lib.rs/crates/crossbeam-epoch/features#feature-alloc: alloc\n\u27e818\u27e9 https://lib.rs/crates/crossbeam-epoch/features#feature-nightly: nightly\n\u27e819\u27e9 https://lib.rs/crates/crossbeam-epoch/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4038,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116704.6648356"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.18\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.18\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\build\\crossbeam-utils-959943161d435794\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\build\\crossbeam-utils-959943161d435794\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.18",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\build\\crossbeam-utils-abc07c4ffad36912\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\deps\\libcrossbeam_utils-f3d851c4a95ab602.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\lib.rs:66:7\n   |\n66 | #[cfg(crossbeam_loom)]\n   |       ^^^^^^^^^^^^^^\n   |\n   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 3026,
                    "byte_start": 3012,
                    "column_end": 21,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 7,
                        "text": "#[cfg(crossbeam_loom)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\lib.rs:69:7\n   |\n69 | #[cfg(crossbeam_loom)]\n   |       ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 3083,
                    "byte_start": 3069,
                    "column_end": 21,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 69,
                    "line_start": 69,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 7,
                        "text": "#[cfg(crossbeam_loom)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\lib.rs:91:11\n   |\n91 | #[cfg(not(crossbeam_loom))]\n   |           ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 3941,
                    "byte_start": 3927,
                    "column_end": 25,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 91,
                    "line_start": 91,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 11,
                        "text": "#[cfg(not(crossbeam_loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n    --> src\\atomic.rs:1675:21\n     |\n1675 | #[cfg(all(test, not(crossbeam_loom)))]\n     |                     ^^^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 53857,
                    "byte_start": 53843,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\atomic.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1675,
                    "line_start": 1675,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\atomic.rs:350:15\n    |\n350 |     #[cfg(not(crossbeam_loom))]\n    |               ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 10923,
                    "byte_start": 10909,
                    "column_end": 29,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\atomic.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 350,
                    "line_start": 350,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 15,
                        "text": "    #[cfg(not(crossbeam_loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\atomic.rs:358:11\n    |\n358 |     #[cfg(crossbeam_loom)]\n    |           ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 11137,
                    "byte_start": 11123,
                    "column_end": 25,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\atomic.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 358,
                    "line_start": 358,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 11,
                        "text": "    #[cfg(crossbeam_loom)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\collector.rs:112:21\n    |\n112 | #[cfg(all(test, not(crossbeam_loom)))]\n    |                     ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 2402,
                    "byte_start": 2388,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\collector.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 112,
                    "line_start": 112,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\deferred.rs:90:21\n   |\n90 | #[cfg(all(test, not(crossbeam_loom)))]\n   |                     ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 2834,
                    "byte_start": 2820,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\deferred.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 90,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_sanitize`\n  --> src\\internal.rs:56:15\n   |\n56 | #[cfg(not(any(crossbeam_sanitize, miri)))]\n   |               ^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_sanitize`",
                "spans": [
                  {
                    "byte_end": 2554,
                    "byte_start": 2536,
                    "column_end": 33,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 15,
                        "text": "#[cfg(not(any(crossbeam_sanitize, miri)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_sanitize`\n  --> src\\internal.rs:59:11\n   |\n59 | #[cfg(any(crossbeam_sanitize, miri))]\n   |           ^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_sanitize`",
                "spans": [
                  {
                    "byte_end": 2685,
                    "byte_start": 2667,
                    "column_end": 29,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 11,
                        "text": "#[cfg(any(crossbeam_sanitize, miri))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_sanitize`\n   --> src\\internal.rs:300:15\n    |\n300 | #[cfg(not(any(crossbeam_sanitize, miri)))] // `crossbeam_sanitize` and `miri` reduce the size of `Local`\n    |               ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_sanitize`",
                "spans": [
                  {
                    "byte_end": 10600,
                    "byte_start": 10582,
                    "column_end": 33,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 300,
                    "line_start": 300,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 15,
                        "text": "#[cfg(not(any(crossbeam_sanitize, miri)))] // `crossbeam_sanitize` and `miri` reduce the size of `Local`"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\internal.rs:557:21\n    |\n557 | #[cfg(all(test, not(crossbeam_loom)))]\n    |                     ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 20373,
                    "byte_start": 20359,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 557,
                    "line_start": 557,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_sanitize`\n   --> src\\internal.rs:202:29\n    |\n202 |         let steps = if cfg!(crossbeam_sanitize) {\n    |                             ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_sanitize`",
                "spans": [
                  {
                    "byte_end": 6903,
                    "byte_start": 6885,
                    "column_end": 47,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 29,
                        "text": "        let steps = if cfg!(crossbeam_sanitize) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n --> src\\sync\\mod.rs:5:11\n  |\n5 | #[cfg(not(crossbeam_loom))]\n  |           ^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 102,
                    "byte_start": 88,
                    "column_end": 25,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\sync\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 5,
                    "line_start": 5,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 11,
                        "text": "#[cfg(not(crossbeam_loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\sync\\list.rs:298:21\n    |\n298 | #[cfg(all(test, not(crossbeam_loom)))]\n    |                     ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 10287,
                    "byte_start": 10273,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\sync\\list.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 298,
                    "line_start": 298,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\sync\\queue.rs:217:21\n    |\n217 | #[cfg(all(test, not(crossbeam_loom)))]\n    |                     ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 7925,
                    "byte_start": 7911,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\sync\\queue.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 217,
                    "line_start": 217,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\default.rs:10:11\n   |\n10 | #[cfg(not(crossbeam_loom))]\n   |           ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 436,
                    "byte_start": 422,
                    "column_end": 25,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\default.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 10,
                    "line_start": 10,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 11,
                        "text": "#[cfg(not(crossbeam_loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\default.rs:64:21\n   |\n64 | #[cfg(all(test, not(crossbeam_loom)))]\n   |                     ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 1809,
                    "byte_start": 1795,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\default.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 64,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\default.rs:14:15\n   |\n14 |     #[cfg(not(crossbeam_loom))]\n   |               ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 546,
                    "byte_start": 532,
                    "column_end": 29,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\default.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 14,
                    "line_start": 14,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 15,
                        "text": "    #[cfg(not(crossbeam_loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\default.rs:22:11\n   |\n22 |     #[cfg(crossbeam_loom)]\n   |           ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 881,
                    "byte_start": 867,
                    "column_end": 25,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\default.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 22,
                    "line_start": 22,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 11,
                        "text": "    #[cfg(crossbeam_loom)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\deps\\libcrossbeam_epoch-8eda348b5ee195cf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.18\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.18\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\build\\crossbeam-utils-959943161d435794\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\build\\crossbeam-utils-959943161d435794\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.18",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\build\\crossbeam-utils-abc07c4ffad36912\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\deps\\libcrossbeam_utils-f3d851c4a95ab602.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\lib.rs:66:7\n   |\n66 | #[cfg(crossbeam_loom)]\n   |       ^^^^^^^^^^^^^^\n   |\n   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 3026,
                    "byte_start": 3012,
                    "column_end": 21,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 7,
                        "text": "#[cfg(crossbeam_loom)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\lib.rs:69:7\n   |\n69 | #[cfg(crossbeam_loom)]\n   |       ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 3083,
                    "byte_start": 3069,
                    "column_end": 21,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 69,
                    "line_start": 69,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 7,
                        "text": "#[cfg(crossbeam_loom)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\lib.rs:91:11\n   |\n91 | #[cfg(not(crossbeam_loom))]\n   |           ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 3941,
                    "byte_start": 3927,
                    "column_end": 25,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 91,
                    "line_start": 91,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 11,
                        "text": "#[cfg(not(crossbeam_loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n    --> src\\atomic.rs:1675:21\n     |\n1675 | #[cfg(all(test, not(crossbeam_loom)))]\n     |                     ^^^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 53857,
                    "byte_start": 53843,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\atomic.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1675,
                    "line_start": 1675,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\atomic.rs:350:15\n    |\n350 |     #[cfg(not(crossbeam_loom))]\n    |               ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 10923,
                    "byte_start": 10909,
                    "column_end": 29,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\atomic.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 350,
                    "line_start": 350,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 15,
                        "text": "    #[cfg(not(crossbeam_loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\atomic.rs:358:11\n    |\n358 |     #[cfg(crossbeam_loom)]\n    |           ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 11137,
                    "byte_start": 11123,
                    "column_end": 25,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\atomic.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 358,
                    "line_start": 358,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 11,
                        "text": "    #[cfg(crossbeam_loom)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\collector.rs:112:21\n    |\n112 | #[cfg(all(test, not(crossbeam_loom)))]\n    |                     ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 2402,
                    "byte_start": 2388,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\collector.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 112,
                    "line_start": 112,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\deferred.rs:90:21\n   |\n90 | #[cfg(all(test, not(crossbeam_loom)))]\n   |                     ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 2834,
                    "byte_start": 2820,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\deferred.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 90,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_sanitize`\n  --> src\\internal.rs:56:15\n   |\n56 | #[cfg(not(any(crossbeam_sanitize, miri)))]\n   |               ^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_sanitize`",
                "spans": [
                  {
                    "byte_end": 2554,
                    "byte_start": 2536,
                    "column_end": 33,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 15,
                        "text": "#[cfg(not(any(crossbeam_sanitize, miri)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_sanitize`\n  --> src\\internal.rs:59:11\n   |\n59 | #[cfg(any(crossbeam_sanitize, miri))]\n   |           ^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_sanitize`",
                "spans": [
                  {
                    "byte_end": 2685,
                    "byte_start": 2667,
                    "column_end": 29,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 11,
                        "text": "#[cfg(any(crossbeam_sanitize, miri))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_sanitize`\n   --> src\\internal.rs:300:15\n    |\n300 | #[cfg(not(any(crossbeam_sanitize, miri)))] // `crossbeam_sanitize` and `miri` reduce the size of `Local`\n    |               ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_sanitize`",
                "spans": [
                  {
                    "byte_end": 10600,
                    "byte_start": 10582,
                    "column_end": 33,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 300,
                    "line_start": 300,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 15,
                        "text": "#[cfg(not(any(crossbeam_sanitize, miri)))] // `crossbeam_sanitize` and `miri` reduce the size of `Local`"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\internal.rs:557:21\n    |\n557 | #[cfg(all(test, not(crossbeam_loom)))]\n    |                     ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 20373,
                    "byte_start": 20359,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 557,
                    "line_start": 557,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_sanitize`\n   --> src\\internal.rs:202:29\n    |\n202 |         let steps = if cfg!(crossbeam_sanitize) {\n    |                             ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_sanitize)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_sanitize)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_sanitize`",
                "spans": [
                  {
                    "byte_end": 6903,
                    "byte_start": 6885,
                    "column_end": 47,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 29,
                        "text": "        let steps = if cfg!(crossbeam_sanitize) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n --> src\\sync\\mod.rs:5:11\n  |\n5 | #[cfg(not(crossbeam_loom))]\n  |           ^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 102,
                    "byte_start": 88,
                    "column_end": 25,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\sync\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 5,
                    "line_start": 5,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 11,
                        "text": "#[cfg(not(crossbeam_loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\sync\\list.rs:298:21\n    |\n298 | #[cfg(all(test, not(crossbeam_loom)))]\n    |                     ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 10287,
                    "byte_start": 10273,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\sync\\list.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 298,
                    "line_start": 298,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n   --> src\\sync\\queue.rs:217:21\n    |\n217 | #[cfg(all(test, not(crossbeam_loom)))]\n    |                     ^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 7925,
                    "byte_start": 7911,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\sync\\queue.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 217,
                    "line_start": 217,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\default.rs:10:11\n   |\n10 | #[cfg(not(crossbeam_loom))]\n   |           ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 436,
                    "byte_start": 422,
                    "column_end": 25,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\default.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 10,
                    "line_start": 10,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 11,
                        "text": "#[cfg(not(crossbeam_loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\default.rs:64:21\n   |\n64 | #[cfg(all(test, not(crossbeam_loom)))]\n   |                     ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 1809,
                    "byte_start": 1795,
                    "column_end": 35,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\default.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 64,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 21,
                        "text": "#[cfg(all(test, not(crossbeam_loom)))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\default.rs:14:15\n   |\n14 |     #[cfg(not(crossbeam_loom))]\n   |               ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 546,
                    "byte_start": 532,
                    "column_end": 29,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\default.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 14,
                    "line_start": 14,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 15,
                        "text": "    #[cfg(not(crossbeam_loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `crossbeam_loom`\n  --> src\\default.rs:22:11\n   |\n22 |     #[cfg(crossbeam_loom)]\n   |           ^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(crossbeam_loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(crossbeam_loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `crossbeam_loom`",
                "spans": [
                  {
                    "byte_end": 881,
                    "byte_start": 867,
                    "column_end": 25,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\default.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 22,
                    "line_start": 22,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 11,
                        "text": "    #[cfg(crossbeam_loom)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: non-canonical implementation of `partial_cmp` on an `Ord` type\n    --> src\\atomic.rs:1640:1\n     |\n1640 | /  impl<'g, T: ?Sized + Pointable> PartialOrd<Shared<'g, T>> for Shared<'g, T> {\n1641 | |      fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {\n     | | __________________________________________________________________-\n1642 | ||         self.data.partial_cmp(&other.data)\n1643 | ||     }\n     | ||_____- help: change this to: `{ Some(self.cmp(other)) }`\n1644 | |  }\n     | |__^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\n     = note: `#[warn(clippy::non_canonical_partial_ord_impl)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::non_canonical_partial_ord_impl)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 53048,
                        "byte_start": 52998,
                        "column_end": 6,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\atomic.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1643,
                        "line_start": 1641,
                        "suggested_replacement": "{ Some(self.cmp(other)) }",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 66,
                            "text": "    fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {"
                          },
                          {
                            "highlight_end": 43,
                            "highlight_start": 1,
                            "text": "        self.data.partial_cmp(&other.data)"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_partial_ord_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "non-canonical implementation of `partial_cmp` on an `Ord` type",
                "spans": [
                  {
                    "byte_end": 53050,
                    "byte_start": 52855,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\atomic.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1644,
                    "line_start": 1640,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 78,
                        "highlight_start": 1,
                        "text": "impl<'g, T: ?Sized + Pointable> PartialOrd<Shared<'g, T>> for Shared<'g, T> {"
                      },
                      {
                        "highlight_end": 67,
                        "highlight_start": 1,
                        "text": "    fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {"
                      },
                      {
                        "highlight_end": 43,
                        "highlight_start": 1,
                        "text": "        self.data.partial_cmp(&other.data)"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of an `Arc` that is not `Send` and `Sync`\n  --> src\\collector.rs:32:21\n   |\n32 |             global: Arc::new(Global::new()),\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `Arc<Global>` is not `Send` and `Sync` as `Global` is not `Sync`\n   = help: if the `Arc` will not used be across threads replace it with an `Rc`\n   = help: otherwise make `Global` `Send` and `Sync` or consider a wrapper type such as `Mutex`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arc_with_non_send_sync\n   = note: `#[warn(clippy::arc_with_non_send_sync)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`Arc<Global>` is not `Send` and `Sync` as `Global` is not `Sync`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the `Arc` will not used be across threads replace it with an `Rc`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "otherwise make `Global` `Send` and `Sync` or consider a wrapper type such as `Mutex`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arc_with_non_send_sync",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::arc_with_non_send_sync)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::arc_with_non_send_sync",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of an `Arc` that is not `Send` and `Sync`",
                "spans": [
                  {
                    "byte_end": 693,
                    "byte_start": 670,
                    "column_end": 44,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\collector.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 21,
                        "text": "            global: Arc::new(Global::new()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\internal.rs:203:20\n    |\n203 |             usize::max_value()\n    |                    ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n    = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\nhelp: use the associated constant instead\n    |\n203 -             usize::max_value()\n203 +             usize::MAX\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::legacy_numeric_constants)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6937,
                        "byte_start": 6926,
                        "column_end": 31,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\internal.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 203,
                        "line_start": 203,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 20,
                            "text": "            usize::max_value()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 6937,
                    "byte_start": 6926,
                    "column_end": 31,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 203,
                    "line_start": 203,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 20,
                        "text": "            usize::max_value()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the borrowed expression implements the required traits\n   --> src\\internal.rs:210:17\n    |\n210 |                 &|sealed_bag: &SealedBag| sealed_bag.is_expired(global_epoch),\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `|sealed_bag: &SealedBag| sealed_bag.is_expired(global_epoch)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n    = note: `#[warn(clippy::needless_borrows_for_generic_args)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrows_for_generic_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7145,
                        "byte_start": 7084,
                        "column_end": 78,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "src\\internal.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 210,
                        "line_start": 210,
                        "suggested_replacement": "|sealed_bag: &SealedBag| sealed_bag.is_expired(global_epoch)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 17,
                            "text": "                &|sealed_bag: &SealedBag| sealed_bag.is_expired(global_epoch),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrows_for_generic_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "the borrowed expression implements the required traits",
                "spans": [
                  {
                    "byte_end": 7145,
                    "byte_start": 7084,
                    "column_end": 78,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\internal.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 210,
                    "line_start": 210,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 78,
                        "highlight_start": 17,
                        "text": "                &|sealed_bag: &SealedBag| sealed_bag.is_expired(global_epoch),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpapnuoxou/crossbeam-epoch-0.9.18#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpapnuoxou\\crossbeam-epoch-0.9.18\\target\\debug\\deps\\libcrossbeam_epoch-a3a562a84ce13ffa.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 54
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "crossbeam-epoch",
          "version": "0.9.18",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/all.html \"show sidebar\")\n# Crate crossbeam_epochCopy item path\n[Settings](https://docs.rs/crossbeam-epoch/latest/settings.html)\n[Help](https://docs.rs/crossbeam-epoch/latest/help.html)\nSummary[Source](https://docs.rs/crossbeam-epoch/latest/src/crossbeam_epoch/lib.rs.html#1-166)\nExpand description\nEpoch-based memory reclamation.\nAn interesting problem concurrent collections deal with comes from the remove operation. Suppose that a thread removes an element from a lock-free map, while another thread is reading that same element at the same time. The first thread must wait until the second thread stops reading the element. Only then it is safe to destruct it.\nProgramming languages that come with garbage collectors solve this problem trivially. The garbage collector will destruct the removed element when no thread can hold a reference to it anymore.\nThis crate implements a basic memory reclamation mechanism, which is based on epochs. When an element gets removed from a concurrent collection, it is inserted into a pile of garbage and marked with the current epoch. Every time a thread accesses a collection, it checks the current epoch, attempts to increment it, and destructs some garbage that became so old that no thread can be referencing it anymore.\nThat is the general mechanism behind epoch-based memory reclamation, but the details are a bit more complicated. Anyhow, memory reclamation is designed to be fully automatic and something users of concurrent collections don\u2019t have to worry much about.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pointers)Pointers\nConcurrent collections are built using atomic pointers. This module provides [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\"), which is just a shared atomic pointer to a heap-allocated object. Loading an [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\") yields a [`Shared`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Shared.html \"struct crossbeam_epoch::Shared\"), which is an epoch-protected pointer through which the loaded object can be safely read.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pinning)Pinning\nBefore an [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\") can be loaded, a participant must be [`pin`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html \"fn crossbeam_epoch::pin\")ned. By pinning a participant we declare that any object that gets removed from now on must not be destructed just yet. Garbage collection of newly removed objects is suspended until the participant gets unpinned.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#garbage)Garbage\nObjects that get removed from concurrent collections must be stashed away until all currently pinned participants get unpinned. Such objects can be stored into a thread-local or global storage, where they are kept until the right time for their destruction comes.\nThere is a global shared instance of garbage queue. You can [`defer`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html#method.defer \"method crossbeam_epoch::Guard::defer\") the execution of an arbitrary function until the global epoch is advanced enough. Most notably, concurrent data structures may defer the deallocation of an object.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#apis)APIs\nFor majority of use cases, just use the default garbage collector by invoking [`pin`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html \"fn crossbeam_epoch::pin\"). If you want to create your own garbage collector, use the [`Collector`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Collector.html \"struct crossbeam_epoch::Collector\") API.\n## Structs[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#structs)\n\n[Atomic](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\")\n    An atomic pointer that can be safely shared between threads.\n\n[Collector](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Collector.html \"struct crossbeam_epoch::Collector\")\n    An epoch-based garbage collector.\n\n[CompareExchangeError](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.CompareExchangeError.html \"struct crossbeam_epoch::CompareExchangeError\")\n    The error returned on failed compare-and-swap operation.\n\n[Guard](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html \"struct crossbeam_epoch::Guard\")\n    A guard that keeps the current thread pinned.\n\n[LocalHandle](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.LocalHandle.html \"struct crossbeam_epoch::LocalHandle\")\n    A handle to a garbage collector.\n\n[Owned](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Owned.html \"struct crossbeam_epoch::Owned\")\n    An owned heap-allocated object.\n\n[Shared](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Shared.html \"struct crossbeam_epoch::Shared\")\n    A pointer to an object protected by the epoch GC.\n## Traits[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#traits)\n\n[CompareAndSetOrdering](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.CompareAndSetOrdering.html \"trait crossbeam_epoch::CompareAndSetOrdering\")Deprecated\n    Memory orderings for compare-and-set operations.\n\n[Pointable](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointable.html \"trait crossbeam_epoch::Pointable\")\n    Types that are pointed to by a single word.\n\n[Pointer](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointer.html \"trait crossbeam_epoch::Pointer\")\n    A trait for either `Owned` or `Shared` pointers.\n## Functions[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#functions)\n\n[default_collector](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.default_collector.html \"fn crossbeam_epoch::default_collector\")\n    Returns the default global collector.\n\n[is_pinned](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.is_pinned.html \"fn crossbeam_epoch::is_pinned\")\n    Returns `true` if the current thread is pinned.\n\n[pin](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html \"fn crossbeam_epoch::pin\")\n    Pins the current thread.\n\n[unprotected](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.unprotected.html \"fn crossbeam_epoch::unprotected\")\u26a0\n    Returns a reference to a dummy guard that allows unprotected access to [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\")s.\n## Type Aliases[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#types)\n\n[CompareAndSetError](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/type.CompareAndSetError.html \"type crossbeam_epoch::CompareAndSetError\")Deprecated\n    The error returned on failed compare-and-set operation.\n",
            "markdown_with_citations": "[](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/all.html \"show sidebar\")\n# Crate crossbeam_epochCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nEpoch-based memory reclamation.\nAn interesting problem concurrent collections deal with comes from the remove operation. Suppose that a thread removes an element from a lock-free map, while another thread is reading that same element at the same time. The first thread must wait until the second thread stops reading the element. Only then it is safe to destruct it.\nProgramming languages that come with garbage collectors solve this problem trivially. The garbage collector will destruct the removed element when no thread can hold a reference to it anymore.\nThis crate implements a basic memory reclamation mechanism, which is based on epochs. When an element gets removed from a concurrent collection, it is inserted into a pile of garbage and marked with the current epoch. Every time a thread accesses a collection, it checks the current epoch, attempts to increment it, and destructs some garbage that became so old that no thread can be referencing it anymore.\nThat is the general mechanism behind epoch-based memory reclamation, but the details are a bit more complicated. Anyhow, memory reclamation is designed to be fully automatic and something users of concurrent collections don\u2019t have to worry much about.\n## \u00a7\u27e84\u27e9Pointers\nConcurrent collections are built using atomic pointers. This module provides `Atomic`\u27e85\u27e9, which is just a shared atomic pointer to a heap-allocated object. Loading an `Atomic`\u27e85\u27e9 yields a `Shared`\u27e86\u27e9, which is an epoch-protected pointer through which the loaded object can be safely read.\n## \u00a7\u27e87\u27e9Pinning\nBefore an `Atomic`\u27e85\u27e9 can be loaded, a participant must be `pin`\u27e88\u27e9ned. By pinning a participant we declare that any object that gets removed from now on must not be destructed just yet. Garbage collection of newly removed objects is suspended until the participant gets unpinned.\n## \u00a7\u27e89\u27e9Garbage\nObjects that get removed from concurrent collections must be stashed away until all currently pinned participants get unpinned. Such objects can be stored into a thread-local or global storage, where they are kept until the right time for their destruction comes.\nThere is a global shared instance of garbage queue. You can `defer`\u27e810\u27e9 the execution of an arbitrary function until the global epoch is advanced enough. Most notably, concurrent data structures may defer the deallocation of an object.\n## \u00a7\u27e811\u27e9APIs\nFor majority of use cases, just use the default garbage collector by invoking `pin`\u27e88\u27e9. If you want to create your own garbage collector, use the `Collector`\u27e812\u27e9 API.\n## Structs\u00a7\u27e813\u27e9\n\nAtomic\u27e85\u27e9\n    An atomic pointer that can be safely shared between threads.\n\nCollector\u27e812\u27e9\n    An epoch-based garbage collector.\n\nCompareExchangeError\u27e814\u27e9\n    The error returned on failed compare-and-swap operation.\n\nGuard\u27e815\u27e9\n    A guard that keeps the current thread pinned.\n\nLocalHandle\u27e816\u27e9\n    A handle to a garbage collector.\n\nOwned\u27e817\u27e9\n    An owned heap-allocated object.\n\nShared\u27e86\u27e9\n    A pointer to an object protected by the epoch GC.\n## Traits\u00a7\u27e818\u27e9\n\nCompareAndSetOrdering\u27e819\u27e9Deprecated\n    Memory orderings for compare-and-set operations.\n\nPointable\u27e820\u27e9\n    Types that are pointed to by a single word.\n\nPointer\u27e821\u27e9\n    A trait for either `Owned` or `Shared` pointers.\n## Functions\u00a7\u27e822\u27e9\n\ndefault_collector\u27e823\u27e9\n    Returns the default global collector.\n\nis_pinned\u27e824\u27e9\n    Returns `true` if the current thread is pinned.\n\npin\u27e88\u27e9\n    Pins the current thread.\n\nunprotected\u27e825\u27e9\u26a0\n    Returns a reference to a dummy guard that allows unprotected access to `Atomic`\u27e85\u27e9s.\n## Type Aliases\u00a7\u27e826\u27e9\n\nCompareAndSetError\u27e827\u27e9Deprecated\n    The error returned on failed compare-and-set operation.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/crossbeam-epoch/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/crossbeam-epoch/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/crossbeam-epoch/latest/src/crossbeam_epoch/lib.rs.html#1-166: Source\n\u27e84\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pointers: \u00a7\n\u27e85\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html: struct crossbeam_epoch::Atomic - `Atomic`\n\u27e86\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Shared.html: struct crossbeam_epoch::Shared - `Shared`\n\u27e87\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pinning: \u00a7\n\u27e88\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html: fn crossbeam_epoch::pin - `pin`\n\u27e89\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#garbage: \u00a7\n\u27e810\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html#method.defer: method crossbeam_epoch::Guard::defer - `defer`\n\u27e811\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#apis: \u00a7\n\u27e812\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Collector.html: struct crossbeam_epoch::Collector - `Collector`\n\u27e813\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.CompareExchangeError.html: struct crossbeam_epoch::CompareExchangeError - CompareExchangeError\n\u27e815\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html: struct crossbeam_epoch::Guard - Guard\n\u27e816\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.LocalHandle.html: struct crossbeam_epoch::LocalHandle - LocalHandle\n\u27e817\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Owned.html: struct crossbeam_epoch::Owned - Owned\n\u27e818\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#traits: \u00a7\n\u27e819\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.CompareAndSetOrdering.html: trait crossbeam_epoch::CompareAndSetOrdering - CompareAndSetOrdering\n\u27e820\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointable.html: trait crossbeam_epoch::Pointable - Pointable\n\u27e821\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointer.html: trait crossbeam_epoch::Pointer - Pointer\n\u27e822\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#functions: \u00a7\n\u27e823\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.default_collector.html: fn crossbeam_epoch::default_collector - default_collector\n\u27e824\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.is_pinned.html: fn crossbeam_epoch::is_pinned - is_pinned\n\u27e825\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.unprotected.html: fn crossbeam_epoch::unprotected - unprotected\n\u27e826\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#types: \u00a7\n\u27e827\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/type.CompareAndSetError.html: type crossbeam_epoch::CompareAndSetError - CompareAndSetError\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "crossbeam-epoch",
          "version": "0.9.18",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/all.html \"show sidebar\")\n# Crate crossbeam_epochCopy item path\n[Settings](https://docs.rs/crossbeam-epoch/latest/settings.html)\n[Help](https://docs.rs/crossbeam-epoch/latest/help.html)\nSummary[Source](https://docs.rs/crossbeam-epoch/latest/src/crossbeam_epoch/lib.rs.html#1-166)\nExpand description\nEpoch-based memory reclamation.\nAn interesting problem concurrent collections deal with comes from the remove operation. Suppose that a thread removes an element from a lock-free map, while another thread is reading that same element at the same time. The first thread must wait until the second thread stops reading the element. Only then it is safe to destruct it.\nProgramming languages that come with garbage collectors solve this problem trivially. The garbage collector will destruct the removed element when no thread can hold a reference to it anymore.\nThis crate implements a basic memory reclamation mechanism, which is based on epochs. When an element gets removed from a concurrent collection, it is inserted into a pile of garbage and marked with the current epoch. Every time a thread accesses a collection, it checks the current epoch, attempts to increment it, and destructs some garbage that became so old that no thread can be referencing it anymore.\nThat is the general mechanism behind epoch-based memory reclamation, but the details are a bit more complicated. Anyhow, memory reclamation is designed to be fully automatic and something users of concurrent collections don\u2019t have to worry much about.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pointers)Pointers\nConcurrent collections are built using atomic pointers. This module provides [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\"), which is just a shared atomic pointer to a heap-allocated object. Loading an [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\") yields a [`Shared`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Shared.html \"struct crossbeam_epoch::Shared\"), which is an epoch-protected pointer through which the loaded object can be safely read.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pinning)Pinning\nBefore an [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\") can be loaded, a participant must be [`pin`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html \"fn crossbeam_epoch::pin\")ned. By pinning a participant we declare that any object that gets removed from now on must not be destructed just yet. Garbage collection of newly removed objects is suspended until the participant gets unpinned.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#garbage)Garbage\nObjects that get removed from concurrent collections must be stashed away until all currently pinned participants get unpinned. Such objects can be stored into a thread-local or global storage, where they are kept until the right time for their destruction comes.\nThere is a global shared instance of garbage queue. You can [`defer`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html#method.defer \"method crossbeam_epoch::Guard::defer\") the execution of an arbitrary function until the global epoch is advanced enough. Most notably, concurrent data structures may defer the deallocation of an object.\n## [\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#apis)APIs\nFor majority of use cases, just use the default garbage collector by invoking [`pin`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html \"fn crossbeam_epoch::pin\"). If you want to create your own garbage collector, use the [`Collector`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Collector.html \"struct crossbeam_epoch::Collector\") API.\n## Structs[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#structs)\n\n[Atomic](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\")\n    An atomic pointer that can be safely shared between threads.\n\n[Collector](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Collector.html \"struct crossbeam_epoch::Collector\")\n    An epoch-based garbage collector.\n\n[CompareExchangeError](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.CompareExchangeError.html \"struct crossbeam_epoch::CompareExchangeError\")\n    The error returned on failed compare-and-swap operation.\n\n[Guard](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html \"struct crossbeam_epoch::Guard\")\n    A guard that keeps the current thread pinned.\n\n[LocalHandle](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.LocalHandle.html \"struct crossbeam_epoch::LocalHandle\")\n    A handle to a garbage collector.\n\n[Owned](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Owned.html \"struct crossbeam_epoch::Owned\")\n    An owned heap-allocated object.\n\n[Shared](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Shared.html \"struct crossbeam_epoch::Shared\")\n    A pointer to an object protected by the epoch GC.\n## Traits[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#traits)\n\n[CompareAndSetOrdering](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.CompareAndSetOrdering.html \"trait crossbeam_epoch::CompareAndSetOrdering\")Deprecated\n    Memory orderings for compare-and-set operations.\n\n[Pointable](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointable.html \"trait crossbeam_epoch::Pointable\")\n    Types that are pointed to by a single word.\n\n[Pointer](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointer.html \"trait crossbeam_epoch::Pointer\")\n    A trait for either `Owned` or `Shared` pointers.\n## Functions[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#functions)\n\n[default_collector](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.default_collector.html \"fn crossbeam_epoch::default_collector\")\n    Returns the default global collector.\n\n[is_pinned](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.is_pinned.html \"fn crossbeam_epoch::is_pinned\")\n    Returns `true` if the current thread is pinned.\n\n[pin](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html \"fn crossbeam_epoch::pin\")\n    Pins the current thread.\n\n[unprotected](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.unprotected.html \"fn crossbeam_epoch::unprotected\")\u26a0\n    Returns a reference to a dummy guard that allows unprotected access to [`Atomic`](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html \"struct crossbeam_epoch::Atomic\")s.\n## Type Aliases[\u00a7](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#types)\n\n[CompareAndSetError](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/type.CompareAndSetError.html \"type crossbeam_epoch::CompareAndSetError\")Deprecated\n    The error returned on failed compare-and-set operation.\n",
            "markdown_with_citations": "[](https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/all.html \"show sidebar\")\n# Crate crossbeam_epochCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nEpoch-based memory reclamation.\nAn interesting problem concurrent collections deal with comes from the remove operation. Suppose that a thread removes an element from a lock-free map, while another thread is reading that same element at the same time. The first thread must wait until the second thread stops reading the element. Only then it is safe to destruct it.\nProgramming languages that come with garbage collectors solve this problem trivially. The garbage collector will destruct the removed element when no thread can hold a reference to it anymore.\nThis crate implements a basic memory reclamation mechanism, which is based on epochs. When an element gets removed from a concurrent collection, it is inserted into a pile of garbage and marked with the current epoch. Every time a thread accesses a collection, it checks the current epoch, attempts to increment it, and destructs some garbage that became so old that no thread can be referencing it anymore.\nThat is the general mechanism behind epoch-based memory reclamation, but the details are a bit more complicated. Anyhow, memory reclamation is designed to be fully automatic and something users of concurrent collections don\u2019t have to worry much about.\n## \u00a7\u27e84\u27e9Pointers\nConcurrent collections are built using atomic pointers. This module provides `Atomic`\u27e85\u27e9, which is just a shared atomic pointer to a heap-allocated object. Loading an `Atomic`\u27e85\u27e9 yields a `Shared`\u27e86\u27e9, which is an epoch-protected pointer through which the loaded object can be safely read.\n## \u00a7\u27e87\u27e9Pinning\nBefore an `Atomic`\u27e85\u27e9 can be loaded, a participant must be `pin`\u27e88\u27e9ned. By pinning a participant we declare that any object that gets removed from now on must not be destructed just yet. Garbage collection of newly removed objects is suspended until the participant gets unpinned.\n## \u00a7\u27e89\u27e9Garbage\nObjects that get removed from concurrent collections must be stashed away until all currently pinned participants get unpinned. Such objects can be stored into a thread-local or global storage, where they are kept until the right time for their destruction comes.\nThere is a global shared instance of garbage queue. You can `defer`\u27e810\u27e9 the execution of an arbitrary function until the global epoch is advanced enough. Most notably, concurrent data structures may defer the deallocation of an object.\n## \u00a7\u27e811\u27e9APIs\nFor majority of use cases, just use the default garbage collector by invoking `pin`\u27e88\u27e9. If you want to create your own garbage collector, use the `Collector`\u27e812\u27e9 API.\n## Structs\u00a7\u27e813\u27e9\n\nAtomic\u27e85\u27e9\n    An atomic pointer that can be safely shared between threads.\n\nCollector\u27e812\u27e9\n    An epoch-based garbage collector.\n\nCompareExchangeError\u27e814\u27e9\n    The error returned on failed compare-and-swap operation.\n\nGuard\u27e815\u27e9\n    A guard that keeps the current thread pinned.\n\nLocalHandle\u27e816\u27e9\n    A handle to a garbage collector.\n\nOwned\u27e817\u27e9\n    An owned heap-allocated object.\n\nShared\u27e86\u27e9\n    A pointer to an object protected by the epoch GC.\n## Traits\u00a7\u27e818\u27e9\n\nCompareAndSetOrdering\u27e819\u27e9Deprecated\n    Memory orderings for compare-and-set operations.\n\nPointable\u27e820\u27e9\n    Types that are pointed to by a single word.\n\nPointer\u27e821\u27e9\n    A trait for either `Owned` or `Shared` pointers.\n## Functions\u00a7\u27e822\u27e9\n\ndefault_collector\u27e823\u27e9\n    Returns the default global collector.\n\nis_pinned\u27e824\u27e9\n    Returns `true` if the current thread is pinned.\n\npin\u27e88\u27e9\n    Pins the current thread.\n\nunprotected\u27e825\u27e9\u26a0\n    Returns a reference to a dummy guard that allows unprotected access to `Atomic`\u27e85\u27e9s.\n## Type Aliases\u00a7\u27e826\u27e9\n\nCompareAndSetError\u27e827\u27e9Deprecated\n    The error returned on failed compare-and-set operation.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/crossbeam-epoch/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/crossbeam-epoch/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/crossbeam-epoch/latest/src/crossbeam_epoch/lib.rs.html#1-166: Source\n\u27e84\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pointers: \u00a7\n\u27e85\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Atomic.html: struct crossbeam_epoch::Atomic - `Atomic`\n\u27e86\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Shared.html: struct crossbeam_epoch::Shared - `Shared`\n\u27e87\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#pinning: \u00a7\n\u27e88\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.pin.html: fn crossbeam_epoch::pin - `pin`\n\u27e89\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#garbage: \u00a7\n\u27e810\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html#method.defer: method crossbeam_epoch::Guard::defer - `defer`\n\u27e811\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#apis: \u00a7\n\u27e812\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Collector.html: struct crossbeam_epoch::Collector - `Collector`\n\u27e813\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.CompareExchangeError.html: struct crossbeam_epoch::CompareExchangeError - CompareExchangeError\n\u27e815\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Guard.html: struct crossbeam_epoch::Guard - Guard\n\u27e816\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.LocalHandle.html: struct crossbeam_epoch::LocalHandle - LocalHandle\n\u27e817\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/struct.Owned.html: struct crossbeam_epoch::Owned - Owned\n\u27e818\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#traits: \u00a7\n\u27e819\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.CompareAndSetOrdering.html: trait crossbeam_epoch::CompareAndSetOrdering - CompareAndSetOrdering\n\u27e820\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointable.html: trait crossbeam_epoch::Pointable - Pointable\n\u27e821\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/trait.Pointer.html: trait crossbeam_epoch::Pointer - Pointer\n\u27e822\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#functions: \u00a7\n\u27e823\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.default_collector.html: fn crossbeam_epoch::default_collector - default_collector\n\u27e824\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.is_pinned.html: fn crossbeam_epoch::is_pinned - is_pinned\n\u27e825\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/fn.unprotected.html: fn crossbeam_epoch::unprotected - unprotected\n\u27e826\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/#types: \u00a7\n\u27e827\u27e9 https://docs.rs/crossbeam-epoch/latest/crossbeam_epoch/type.CompareAndSetError.html: type crossbeam_epoch::CompareAndSetError - CompareAndSetError\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `crossbeam-epoch` crate provides an epoch-based memory reclamation mechanism for managing safe and efficient removal of elements in concurrent collections without relying on garbage collection. It features atomic pointers (`Atomic`), pinning for thread participation (`pin`), and deferred garbage collection, ensuring removed objects are safely destructed only after all references are released. Additionally, it offers APIs for default or custom garbage collectors and various utilities for managing shared and owned pointers in lock-free data structures.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: Memory Reclamation Mechanism  \n\u2705 **Factual:** The `crossbeam-epoch` crate implements epoch-based memory reclamation, allowing safe deallocation of objects in concurrent collections only after all threads have stopped referencing them.  \n\u274c **Counterfactual:** The `crossbeam-epoch` crate uses reference counting for memory reclamation, requiring manual intervention to free unused objects.  \n\n---\n\n### Pair 2: Pinning for Garbage Suspension  \n\u2705 **Factual:** Before accessing an `Atomic` pointer, a thread must be pinned using the `pin` function, ensuring that garbage collection is deferred until the thread is unpinned.  \n\u274c **Counterfactual:** Pinning is optional in `crossbeam-epoch`, and threads can safely access `Atomic` pointers without declaring their participation in memory reclamation.  \n\n---\n\n### Pair 3: Garbage Storage Behavior  \n\u2705 **Factual:** Objects removed from concurrent collections are stored in thread-local or global storage until the global epoch advances sufficiently for safe destruction.  \n\u274c **Counterfactual:** Removed objects in `crossbeam-epoch` are immediately destroyed regardless of whether other threads are still referencing them.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-8fae7831-a7f93eae-1751262913",
      "timestamp": "2025-06-30T05:55:13.565056+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]