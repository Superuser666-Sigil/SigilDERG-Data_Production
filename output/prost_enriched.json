{
    "name": "prost",
    "version": "0.14.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/prost/latest/prost/all.html \"show sidebar\")\n# Crate prostCopy item path\n[Settings](https://docs.rs/prost/latest/settings.html)\n[Help](https://docs.rs/prost/latest/help.html)\nSummary[Source](https://docs.rs/prost/latest/src/prost/lib.rs.html#1-42)\nExpand description\n[![continuous integration](https://github.com/tokio-rs/prost/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/tokio-rs/prost/actions/workflows/ci.yml?query=branch%3Amaster) [![Documentation](https://docs.rs/prost/badge.svg)](https://docs.rs/prost/) [![Crate](https://img.shields.io/crates/v/prost.svg)](https://crates.io/crates/prost) [![Dependency Status](https://deps.rs/repo/github/tokio-rs/prost/status.svg)](https://deps.rs/repo/github/tokio-rs/prost) [![Discord](https://img.shields.io/discord/500028886025895936)](https://discord.gg/tokio)\n## [\u00a7](https://docs.rs/prost/latest/prost/#prost) _PROST!_\n`prost` is a [Protocol Buffers](https://developers.google.com/protocol-buffers/) implementation for the [Rust Language](https://www.rust-lang.org/). `prost` generates simple, idiomatic Rust code from `proto2` and `proto3` files.\nCompared to other Protocol Buffers implementations, `prost`\n  * Generates simple, idiomatic, and readable Rust types by taking advantage of Rust `derive` attributes.\n  * Retains comments from `.proto` files in generated Rust code.\n  * Allows existing Rust types (not generated from a `.proto`) to be serialized and deserialized by adding attributes.\n  * Uses the [`bytes::{Buf, BufMut}`](https://github.com/carllerche/bytes) abstractions for serialization instead of `std::io::{Read, Write}`.\n  * Respects the Protobuf `package` specifier when organizing generated code into Rust modules.\n  * Preserves unknown enum values during deserialization.\n  * Does not include support for runtime reflection or message descriptors.\n\n\n### [\u00a7](https://docs.rs/prost/latest/prost/#using-prost-in-a-cargo-project)Using `prost` in a Cargo Project\nFirst, add `prost` and its public dependencies to your `Cargo.toml`:\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\n[dependencies]\nprost = \"0.14\"\nprost-types = \"0.14\"\n```\n\nThe recommended way to add `.proto` compilation to a Cargo project is to use the `prost-build` library. See the [`prost-build` documentation](https://docs.rs/prost-build/latest/prost_build/) for more details and examples.\nSee the [snazzy repository](https://github.com/danburkert/snazzy) for a simple start-to-finish example.\n#### [\u00a7](https://docs.rs/prost/latest/prost/#msrv)MSRV\n`prost` follows the `tokio-rs` project\u2019s MSRV model and supports 1.70. For more information on the tokio msrv policy you can check it out [here](https://github.com/tokio-rs/tokio/#supported-rust-versions)\n### [\u00a7](https://docs.rs/prost/latest/prost/#generated-code)Generated Code\n`prost` generates Rust code from source `.proto` files using the `proto2` or `proto3` syntax. `prost`\u2019s goal is to make the generated code as simple as possible.\n#### [\u00a7](https://docs.rs/prost/latest/prost/#protoc)`protoc`\nWith `prost-build` v0.11 release, `protoc` will be required to invoke `compile_protos` (unless `skip_protoc` is enabled). Prost will no longer provide bundled `protoc` or attempt to compile `protoc` for users. For install instructions for `protoc`, please check out the [protobuf install](https://github.com/protocolbuffers/protobuf#protobuf-compiler-installation) instructions.\n#### [\u00a7](https://docs.rs/prost/latest/prost/#packages)Packages\nProst can now generate code for `.proto` files that don\u2019t have a package spec. `prost` will translate the Protobuf package into a Rust module. For example, given the `package` specifier:\n```\npackage foo.bar;\n```\n\nAll Rust types generated from the file will be in the `foo::bar` module.\n#### [\u00a7](https://docs.rs/prost/latest/prost/#messages)Messages\nGiven a simple message declaration:\n```\n// Sample message.\nmessage Foo {\n}\n```\n\n`prost` will generate the following Rust struct:\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\n/// Sample message.\n#[derive(Clone, Debug, PartialEq, Message)]\npub struct Foo {\n}\n```\n\n#### [\u00a7](https://docs.rs/prost/latest/prost/#fields-1)Fields\nFields in Protobuf messages are translated into Rust as public struct fields of the corresponding type.\n##### [\u00a7](https://docs.rs/prost/latest/prost/#scalar-values)Scalar Values\nScalar value types are converted as follows:\nProtobuf Type| Rust Type  \n---|---  \n`double`| `f64`  \n`float`| `f32`  \n`int32`| `i32`  \n`int64`| `i64`  \n`uint32`| `u32`  \n`uint64`| `u64`  \n`sint32`| `i32`  \n`sint64`| `i64`  \n`fixed32`| `u32`  \n`fixed64`| `u64`  \n`sfixed32`| `i32`  \n`sfixed64`| `i64`  \n`bool`| `bool`  \n`string`| `String`  \n`bytes`| `Vec<u8>`  \n##### [\u00a7](https://docs.rs/prost/latest/prost/#enumerations)Enumerations\nAll `.proto` enumeration types convert to the Rust `i32` type. Additionally, each enumeration type gets a corresponding Rust `enum` type. For example, this `proto` enum:\n```\nenum PhoneType {\n MOBILE = 0;\n HOME = 1;\n WORK = 2;\n}\n```\n\ngets this corresponding Rust enum [1](https://docs.rs/prost/latest/prost/#fn1):\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\npub enum PhoneType {\n  Mobile = 0,\n  Home = 1,\n  Work = 2,\n}\n```\n\nYou can convert a `PhoneType` value to an `i32` by doing:\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\nPhoneType::Mobile as i32\n```\n\nThe `#[derive(::prost::Enumeration)]` annotation added to the generated `PhoneType` adds these associated functions to the type:\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\nimpl PhoneType {\n  pub fn is_valid(value: i32) -> bool { ... }\n  #[deprecated]\n  pub fn from_i32(value: i32) -> Option<PhoneType> { ... }\n}\n```\n\nIt also adds an `impl TryFrom<i32> for PhoneType`, so you can convert an `i32` to its corresponding `PhoneType` value by doing, for example:\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\nlet phone_type = 2i32;\nmatch PhoneType::try_from(phone_type) {\n  Ok(PhoneType::Mobile) => ...,\n  Ok(PhoneType::Home) => ...,\n  Ok(PhoneType::Work) => ...,\n  Err(_) => ...,\n}\n```\n\nAdditionally, wherever a `proto` enum is used as a field in a `Message`, the message will have \u2018accessor\u2019 methods to get/set the value of the field as the Rust enum type. For instance, this proto `PhoneNumber` message that has a field named `type` of type `PhoneType`:\n```\nmessage PhoneNumber {\n string number = 1;\n PhoneType type = 2;\n}\n```\n\nwill become the following Rust type [2](https://docs.rs/prost/latest/prost/#fn2) with methods `type` and `set_type`:\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\npub struct PhoneNumber {\n  pub number: String,\n  pub r#type: i32, // the `r#` is needed because `type` is a Rust keyword\n}\nimpl PhoneNumber {\n  pub fn r#type(&self) -> PhoneType { ... }\n  pub fn set_type(&mut self, value: PhoneType) { ... }\n}\n```\n\nNote that the getter methods will return the Rust enum\u2019s default value if the field has an invalid `i32` value.\nThe `enum` type isn\u2019t used directly as a field, because the Protobuf spec mandates that enumerations values are \u2018open\u2019, and decoding unrecognized enumeration values must be possible.\n##### [\u00a7](https://docs.rs/prost/latest/prost/#field-modifiers)Field Modifiers\nProtobuf scalar value and enumeration message fields can have a modifier depending on the Protobuf version. Modifiers change the corresponding type of the Rust field:\n`.proto` Version| Modifier| Rust Type  \n---|---|---  \n`proto2`| `optional`| `Option<T>`  \n`proto2`| `required`| `T`  \n`proto3`| default| `T` for scalar types, `Option<T>` otherwise  \n`proto3`| `optional`| `Option<T>`  \n`proto2`/`proto3`| `repeated`| `Vec<T>`  \nNote that in `proto3` the default representation for all user-defined message types is `Option<T>`, and for scalar types just `T` (during decoding, a missing value is populated by `T::default()`). If you need a witness of the presence of a scalar type `T`, use the `optional` modifier to enforce an `Option<T>` representation in the generated Rust struct.\n##### [\u00a7](https://docs.rs/prost/latest/prost/#map-fields)Map Fields\nMap fields are converted to a Rust `HashMap` with key and value type converted from the Protobuf key and value types.\n##### [\u00a7](https://docs.rs/prost/latest/prost/#message-fields)Message Fields\nMessage fields are converted to the corresponding struct type. The table of field modifiers above applies to message fields, except that `proto3` message fields without a modifier (the default) will be wrapped in an `Option`. Typically message fields are unboxed. `prost` will automatically box a message field if the field type and the parent type are recursively nested in order to avoid an infinite sized struct.\n##### [\u00a7](https://docs.rs/prost/latest/prost/#oneof-fields)Oneof Fields\nOneof fields convert to a Rust enum. Protobuf `oneof`s types are not named, so `prost` uses the name of the `oneof` field for the resulting Rust enum, and defines the enum in a module under the struct. For example, a `proto3` message such as:\n```\nmessage Foo {\n oneof widget {\n  int32 quux = 1;\n  string bar = 2;\n }\n}\n```\n\ngenerates the following Rust[3](https://docs.rs/prost/latest/prost/#fn3):\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\npub struct Foo {\n  pub widget: Option<foo::Widget>,\n}\npub mod foo {\n  pub enum Widget {\n    Quux(i32),\n    Bar(String),\n  }\n}\n```\n\n`oneof` fields are always wrapped in an `Option`.\n#### [\u00a7](https://docs.rs/prost/latest/prost/#services)Services\n`prost-build` allows a custom code-generator to be used for processing `service` definitions. This can be used to output Rust traits according to an application\u2019s specific needs.\n#### [\u00a7](https://docs.rs/prost/latest/prost/#generated-code-example)Generated Code Example\nExample `.proto` file:\n```\nsyntax = \"proto3\";\npackage tutorial;\nmessage Person {\n string name = 1;\n int32 id = 2; // Unique ID number for this person.\n string email = 3;\n enum PhoneType {\n  MOBILE = 0;\n  HOME = 1;\n  WORK = 2;\n }\n message PhoneNumber {\n  string number = 1;\n  PhoneType type = 2;\n }\n repeated PhoneNumber phones = 4;\n}\n// Our address book file is just one of these.\nmessage AddressBook {\n repeated Person people = 1;\n}\n```\n\nand the generated Rust code (`tutorial.rs`):\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\n#[derive(Clone, PartialEq, ::prost::Message)]\npub struct Person {\n  #[prost(string, tag=\"1\")]\n  pub name: ::prost::alloc::string::String,\n  /// Unique ID number for this person.\n  #[prost(int32, tag=\"2\")]\n  pub id: i32,\n  #[prost(string, tag=\"3\")]\n  pub email: ::prost::alloc::string::String,\n  #[prost(message, repeated, tag=\"4\")]\n  pub phones: ::prost::alloc::vec::Vec<person::PhoneNumber>,\n}\n/// Nested message and enum types in `Person`.\npub mod person {\n  #[derive(Clone, PartialEq, ::prost::Message)]\n  pub struct PhoneNumber {\n    #[prost(string, tag=\"1\")]\n    pub number: ::prost::alloc::string::String,\n    #[prost(enumeration=\"PhoneType\", tag=\"2\")]\n    pub r#type: i32,\n  }\n  #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]\n  #[repr(i32)]\n  pub enum PhoneType {\n    Mobile = 0,\n    Home = 1,\n    Work = 2,\n  }\n}\n/// Our address book file is just one of these.\n#[derive(Clone, PartialEq, ::prost::Message)]\npub struct AddressBook {\n  #[prost(message, repeated, tag=\"1\")]\n  pub people: ::prost::alloc::vec::Vec<Person>,\n}\n```\n\n### [\u00a7](https://docs.rs/prost/latest/prost/#accessing-the-protoc-filedescriptorset)Accessing the `protoc` `FileDescriptorSet`\nThe `prost_build::Config::file_descriptor_set_path` option can be used to emit a file descriptor set during the build & code generation step. When used in conjunction with the `std::include_bytes` macro and the `prost_types::FileDescriptorSet` type, applications and libraries using Prost can implement introspection capabilities requiring details from the original `.proto` files.\n### [\u00a7](https://docs.rs/prost/latest/prost/#using-prost-in-a-no_std-crate)Using `prost` in a `no_std` Crate\n`prost` is compatible with `no_std` crates. To enable `no_std` support, disable the `std` features in `prost` and `prost-types`:\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\n[dependencies]\nprost = { version = \"0.14.1\", default-features = false, features = [\"derive\"] }\nprost-types = { version = \"0.14.1\", default-features = false }\n```\n\nAdditionally, configure `prost-build` to output `BTreeMap`s instead of `HashMap`s for all Protobuf `map` fields in your `build.rs`:\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\nlet mut config = prost_build::Config::new();\nconfig.btree_map(&[\".\"]);\n```\n\nWhen using edition 2015, it may be necessary to add an `extern crate core;` directive to the crate which includes `prost`-generated code.\n### [\u00a7](https://docs.rs/prost/latest/prost/#serializing-existing-types)Serializing Existing Types\n`prost` uses a custom derive macro to handle encoding and decoding types, which means that if your existing Rust type is compatible with Protobuf types, you can serialize and deserialize it by adding the appropriate derive and field annotations.\nCurrently the best documentation on adding annotations is to look at the generated code examples above.\n#### [\u00a7](https://docs.rs/prost/latest/prost/#tag-inference-for-existing-types)Tag Inference for Existing Types\nProst automatically infers tags for the struct.\nFields are tagged sequentially in the order they are specified, starting with `1`.\nYou may skip tags which have been reserved, or where there are gaps between sequentially occurring tag values by specifying the tag number to skip to with the `tag` attribute on the first field after the gap. The following fields will be tagged sequentially starting from the next number.\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\nuse prost;\nuse prost::{Enumeration, Message};\n#[derive(Clone, PartialEq, Message)]\nstruct Person {\n  #[prost(string, tag = \"1\")]\n  pub id: String, // tag=1\n  // NOTE: Old \"name\" field has been removed\n  // pub name: String, // tag=2 (Removed)\n  #[prost(string, tag = \"6\")]\n  pub given_name: String, // tag=6\n  #[prost(string)]\n  pub family_name: String, // tag=7\n  #[prost(string)]\n  pub formatted_name: String, // tag=8\n  #[prost(uint32, tag = \"3\")]\n  pub age: u32, // tag=3\n  #[prost(uint32)]\n  pub height: u32, // tag=4\n  #[prost(enumeration = \"Gender\")]\n  pub gender: i32, // tag=5\n  // NOTE: Skip to less commonly occurring fields\n  #[prost(string, tag = \"16\")]\n  pub name_prefix: String, // tag=16 (eg. mr/mrs/ms)\n  #[prost(string)]\n  pub name_suffix: String, // tag=17 (eg. jr/esq)\n  #[prost(string)]\n  pub maiden_name: String, // tag=18\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq, Enumeration)]\npub enum Gender {\n  Unknown = 0,\n  Female = 1,\n  Male = 2,\n}\n```\n\n### [\u00a7](https://docs.rs/prost/latest/prost/#nix)Nix\nThe prost project maintains flakes support for local development. Once you have nix and nix flakes setup you can just run `nix develop` to get a shell configured with the required dependencies to compile the whole project.\n### [\u00a7](https://docs.rs/prost/latest/prost/#feature-flags)Feature Flags\n  * `std`: Enable integration with standard library. Disable this feature for `no_std` support. This feature is enabled by default.\n  * `derive`: Enable integration with `prost-derive`. Disable this feature to reduce compile times. This feature is enabled by default.\n  * `prost-derive`: Deprecated. Alias for `derive` feature.\n  * `no-recursion-limit`: Disable the recursion limit. The recursion limit is 100 and cannot be customized.\n\n\n### [\u00a7](https://docs.rs/prost/latest/prost/#faq)FAQ\n  1. **Could`prost` be implemented as a serializer for [Serde](https://serde.rs/)?**\n\n\nProbably not, however I would like to hear from a Serde expert on the matter. There are two complications with trying to serialize Protobuf messages with Serde:\n  * Protobuf fields require a numbered tag, and currently there appears to be no mechanism suitable for this in `serde`.\n  * The mapping of Protobuf type to Rust type is not 1-to-1. As a result, trait-based approaches to dispatching don\u2019t work very well. Example: six different Protobuf field types correspond to a Rust `Vec<i32>`: `repeated int32`, `repeated sint32`, `repeated sfixed32`, and their packed counterparts.\n\n\nBut it is possible to place `serde` derive tags onto the generated types, so the same structure can support both `prost` and `Serde`.\n  1. **I get errors when trying to run`cargo test` on MacOS**\n\n\nIf the errors are about missing `autoreconf` or similar, you can probably fix them by running\n[\u24d8](https://docs.rs/prost/latest/prost/ \"This example is not tested\")```\nbrew install automake\nbrew install libtool\n```\n\n### [\u00a7](https://docs.rs/prost/latest/prost/#license)License\n`prost` is distributed under the terms of the Apache License (Version 2.0).\nSee [LICENSE](https://github.com/tokio-rs/prost/blob/master/LICENSE) for details.\nCopyright 2022 Dan Burkert & Tokio Contributors\n  1. Annotations have been elided for clarity. See below for a full example. [\u21a9](https://docs.rs/prost/latest/prost/#fnref1)\n  2. Annotations have been elided for clarity. See below for a full example. [\u21a9](https://docs.rs/prost/latest/prost/#fnref2)\n  3. Annotations have been elided for clarity. See below for a full example. [\u21a9](https://docs.rs/prost/latest/prost/#fnref3)\n\n\n## Re-exports[\u00a7](https://docs.rs/prost/latest/prost/#reexports)\n\n`pub use bytes[](https://docs.rs/bytes/1.10.1/x86_64-unknown-linux-gnu/bytes/index.html \"mod bytes\");`\n\n## Structs[\u00a7](https://docs.rs/prost/latest/prost/#structs)\n\n[DecodeError](https://docs.rs/prost/latest/prost/struct.DecodeError.html \"struct prost::DecodeError\")\n    A Protobuf message decoding error.\n\n[EncodeError](https://docs.rs/prost/latest/prost/struct.EncodeError.html \"struct prost::EncodeError\")\n    A Protobuf message encoding error.\n\n[UnknownEnumValue](https://docs.rs/prost/latest/prost/struct.UnknownEnumValue.html \"struct prost::UnknownEnumValue\")\n    An error indicating that an unknown enumeration value was encountered.\n## Traits[\u00a7](https://docs.rs/prost/latest/prost/#traits)\n\n[Message](https://docs.rs/prost/latest/prost/trait.Message.html \"trait prost::Message\")\n    A Protocol Buffers message.\n\n[Name](https://docs.rs/prost/latest/prost/trait.Name.html \"trait prost::Name\")\n    Associate a type name with a [`Message`](https://docs.rs/prost/latest/prost/trait.Message.html \"trait prost::Message\") type.\n## Functions[\u00a7](https://docs.rs/prost/latest/prost/#functions)\n\n[decode_length_delimiter](https://docs.rs/prost/latest/prost/fn.decode_length_delimiter.html \"fn prost::decode_length_delimiter\")\n    Decodes a length delimiter from the buffer.\n\n[encode_length_delimiter](https://docs.rs/prost/latest/prost/fn.encode_length_delimiter.html \"fn prost::encode_length_delimiter\")\n    Encodes a length delimiter to the buffer.\n\n[length_delimiter_len](https://docs.rs/prost/latest/prost/fn.length_delimiter_len.html \"fn prost::length_delimiter_len\")\n    Returns the encoded length of a length delimiter.\n",
        "markdown_with_citations": "[](https://docs.rs/prost/latest/prost/all.html \"show sidebar\")\n# Crate prostCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![continuous integration\u27e84\u27e9](https://github.com/tokio-rs/prost/actions/workflows/ci.yml?query=branch%3Amaster) ![Documentation\u27e85\u27e9](https://docs.rs/prost/) ![Crate\u27e86\u27e9](https://crates.io/crates/prost) ![Dependency Status\u27e87\u27e9](https://deps.rs/repo/github/tokio-rs/prost) ![Discord\u27e88\u27e9](https://discord.gg/tokio)\n## \u00a7\u27e89\u27e9 _PROST!_\n`prost` is a Protocol Buffers\u27e810\u27e9 implementation for the Rust Language\u27e811\u27e9. `prost` generates simple, idiomatic Rust code from `proto2` and `proto3` files.\nCompared to other Protocol Buffers implementations, `prost`\n  * Generates simple, idiomatic, and readable Rust types by taking advantage of Rust `derive` attributes.\n  * Retains comments from `.proto` files in generated Rust code.\n  * Allows existing Rust types (not generated from a `.proto`) to be serialized and deserialized by adding attributes.\n  * Uses the `bytes::{Buf, BufMut}`\u27e812\u27e9 abstractions for serialization instead of `std::io::{Read, Write}`.\n  * Respects the Protobuf `package` specifier when organizing generated code into Rust modules.\n  * Preserves unknown enum values during deserialization.\n  * Does not include support for runtime reflection or message descriptors.\n\n\n### \u00a7\u27e813\u27e9Using `prost` in a Cargo Project\nFirst, add `prost` and its public dependencies to your `Cargo.toml`:\n\u24d8\u27e814\u27e9```\n[dependencies]\nprost = \"0.14\"\nprost-types = \"0.14\"\n```\n\nThe recommended way to add `.proto` compilation to a Cargo project is to use the `prost-build` library. See the `prost-build` documentation\u27e815\u27e9 for more details and examples.\nSee the snazzy repository\u27e816\u27e9 for a simple start-to-finish example.\n#### \u00a7\u27e817\u27e9MSRV\n`prost` follows the `tokio-rs` project\u2019s MSRV model and supports 1.70. For more information on the tokio msrv policy you can check it out here\u27e818\u27e9\n### \u00a7\u27e819\u27e9Generated Code\n`prost` generates Rust code from source `.proto` files using the `proto2` or `proto3` syntax. `prost`\u2019s goal is to make the generated code as simple as possible.\n#### \u00a7\u27e820\u27e9`protoc`\nWith `prost-build` v0.11 release, `protoc` will be required to invoke `compile_protos` (unless `skip_protoc` is enabled). Prost will no longer provide bundled `protoc` or attempt to compile `protoc` for users. For install instructions for `protoc`, please check out the protobuf install\u27e821\u27e9 instructions.\n#### \u00a7\u27e822\u27e9Packages\nProst can now generate code for `.proto` files that don\u2019t have a package spec. `prost` will translate the Protobuf package into a Rust module. For example, given the `package` specifier:\n```\npackage foo.bar;\n```\n\nAll Rust types generated from the file will be in the `foo::bar` module.\n#### \u00a7\u27e823\u27e9Messages\nGiven a simple message declaration:\n```\n// Sample message.\nmessage Foo {\n}\n```\n\n`prost` will generate the following Rust struct:\n\u24d8\u27e814\u27e9```\n/// Sample message.\n#[derive(Clone, Debug, PartialEq, Message)]\npub struct Foo {\n}\n```\n\n#### \u00a7\u27e824\u27e9Fields\nFields in Protobuf messages are translated into Rust as public struct fields of the corresponding type.\n##### \u00a7\u27e825\u27e9Scalar Values\nScalar value types are converted as follows:\nProtobuf Type| Rust Type  \n---|---  \n`double`| `f64`  \n`float`| `f32`  \n`int32`| `i32`  \n`int64`| `i64`  \n`uint32`| `u32`  \n`uint64`| `u64`  \n`sint32`| `i32`  \n`sint64`| `i64`  \n`fixed32`| `u32`  \n`fixed64`| `u64`  \n`sfixed32`| `i32`  \n`sfixed64`| `i64`  \n`bool`| `bool`  \n`string`| `String`  \n`bytes`| `Vec<u8>`  \n##### \u00a7\u27e826\u27e9Enumerations\nAll `.proto` enumeration types convert to the Rust `i32` type. Additionally, each enumeration type gets a corresponding Rust `enum` type. For example, this `proto` enum:\n```\nenum PhoneType {\n MOBILE = 0;\n HOME = 1;\n WORK = 2;\n}\n```\n\ngets this corresponding Rust enum 1\u27e827\u27e9:\n\u24d8\u27e814\u27e9```\npub enum PhoneType {\n  Mobile = 0,\n  Home = 1,\n  Work = 2,\n}\n```\n\nYou can convert a `PhoneType` value to an `i32` by doing:\n\u24d8\u27e814\u27e9```\nPhoneType::Mobile as i32\n```\n\nThe `#[derive(::prost::Enumeration)]` annotation added to the generated `PhoneType` adds these associated functions to the type:\n\u24d8\u27e814\u27e9```\nimpl PhoneType {\n  pub fn is_valid(value: i32) -> bool { ... }\n  #[deprecated]\n  pub fn from_i32(value: i32) -> Option<PhoneType> { ... }\n}\n```\n\nIt also adds an `impl TryFrom<i32> for PhoneType`, so you can convert an `i32` to its corresponding `PhoneType` value by doing, for example:\n\u24d8\u27e814\u27e9```\nlet phone_type = 2i32;\nmatch PhoneType::try_from(phone_type) {\n  Ok(PhoneType::Mobile) => ...,\n  Ok(PhoneType::Home) => ...,\n  Ok(PhoneType::Work) => ...,\n  Err(_) => ...,\n}\n```\n\nAdditionally, wherever a `proto` enum is used as a field in a `Message`, the message will have \u2018accessor\u2019 methods to get/set the value of the field as the Rust enum type. For instance, this proto `PhoneNumber` message that has a field named `type` of type `PhoneType`:\n```\nmessage PhoneNumber {\n string number = 1;\n PhoneType type = 2;\n}\n```\n\nwill become the following Rust type 2\u27e828\u27e9 with methods `type` and `set_type`:\n\u24d8\u27e814\u27e9```\npub struct PhoneNumber {\n  pub number: String,\n  pub r#type: i32, // the `r#` is needed because `type` is a Rust keyword\n}\nimpl PhoneNumber {\n  pub fn r#type(&self) -> PhoneType { ... }\n  pub fn set_type(&mut self, value: PhoneType) { ... }\n}\n```\n\nNote that the getter methods will return the Rust enum\u2019s default value if the field has an invalid `i32` value.\nThe `enum` type isn\u2019t used directly as a field, because the Protobuf spec mandates that enumerations values are \u2018open\u2019, and decoding unrecognized enumeration values must be possible.\n##### \u00a7\u27e829\u27e9Field Modifiers\nProtobuf scalar value and enumeration message fields can have a modifier depending on the Protobuf version. Modifiers change the corresponding type of the Rust field:\n`.proto` Version| Modifier| Rust Type  \n---|---|---  \n`proto2`| `optional`| `Option<T>`  \n`proto2`| `required`| `T`  \n`proto3`| default| `T` for scalar types, `Option<T>` otherwise  \n`proto3`| `optional`| `Option<T>`  \n`proto2`/`proto3`| `repeated`| `Vec<T>`  \nNote that in `proto3` the default representation for all user-defined message types is `Option<T>`, and for scalar types just `T` (during decoding, a missing value is populated by `T::default()`). If you need a witness of the presence of a scalar type `T`, use the `optional` modifier to enforce an `Option<T>` representation in the generated Rust struct.\n##### \u00a7\u27e830\u27e9Map Fields\nMap fields are converted to a Rust `HashMap` with key and value type converted from the Protobuf key and value types.\n##### \u00a7\u27e831\u27e9Message Fields\nMessage fields are converted to the corresponding struct type. The table of field modifiers above applies to message fields, except that `proto3` message fields without a modifier (the default) will be wrapped in an `Option`. Typically message fields are unboxed. `prost` will automatically box a message field if the field type and the parent type are recursively nested in order to avoid an infinite sized struct.\n##### \u00a7\u27e832\u27e9Oneof Fields\nOneof fields convert to a Rust enum. Protobuf `oneof`s types are not named, so `prost` uses the name of the `oneof` field for the resulting Rust enum, and defines the enum in a module under the struct. For example, a `proto3` message such as:\n```\nmessage Foo {\n oneof widget {\n  int32 quux = 1;\n  string bar = 2;\n }\n}\n```\n\ngenerates the following Rust3\u27e833\u27e9:\n\u24d8\u27e814\u27e9```\npub struct Foo {\n  pub widget: Option<foo::Widget>,\n}\npub mod foo {\n  pub enum Widget {\n    Quux(i32),\n    Bar(String),\n  }\n}\n```\n\n`oneof` fields are always wrapped in an `Option`.\n#### \u00a7\u27e834\u27e9Services\n`prost-build` allows a custom code-generator to be used for processing `service` definitions. This can be used to output Rust traits according to an application\u2019s specific needs.\n#### \u00a7\u27e835\u27e9Generated Code Example\nExample `.proto` file:\n```\nsyntax = \"proto3\";\npackage tutorial;\nmessage Person {\n string name = 1;\n int32 id = 2; // Unique ID number for this person.\n string email = 3;\n enum PhoneType {\n  MOBILE = 0;\n  HOME = 1;\n  WORK = 2;\n }\n message PhoneNumber {\n  string number = 1;\n  PhoneType type = 2;\n }\n repeated PhoneNumber phones = 4;\n}\n// Our address book file is just one of these.\nmessage AddressBook {\n repeated Person people = 1;\n}\n```\n\nand the generated Rust code (`tutorial.rs`):\n\u24d8\u27e814\u27e9```\n#[derive(Clone, PartialEq, ::prost::Message)]\npub struct Person {\n  #[prost(string, tag=\"1\")]\n  pub name: ::prost::alloc::string::String,\n  /// Unique ID number for this person.\n  #[prost(int32, tag=\"2\")]\n  pub id: i32,\n  #[prost(string, tag=\"3\")]\n  pub email: ::prost::alloc::string::String,\n  #[prost(message, repeated, tag=\"4\")]\n  pub phones: ::prost::alloc::vec::Vec<person::PhoneNumber>,\n}\n/// Nested message and enum types in `Person`.\npub mod person {\n  #[derive(Clone, PartialEq, ::prost::Message)]\n  pub struct PhoneNumber {\n    #[prost(string, tag=\"1\")]\n    pub number: ::prost::alloc::string::String,\n    #[prost(enumeration=\"PhoneType\", tag=\"2\")]\n    pub r#type: i32,\n  }\n  #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]\n  #[repr(i32)]\n  pub enum PhoneType {\n    Mobile = 0,\n    Home = 1,\n    Work = 2,\n  }\n}\n/// Our address book file is just one of these.\n#[derive(Clone, PartialEq, ::prost::Message)]\npub struct AddressBook {\n  #[prost(message, repeated, tag=\"1\")]\n  pub people: ::prost::alloc::vec::Vec<Person>,\n}\n```\n\n### \u00a7\u27e836\u27e9Accessing the `protoc` `FileDescriptorSet`\nThe `prost_build::Config::file_descriptor_set_path` option can be used to emit a file descriptor set during the build & code generation step. When used in conjunction with the `std::include_bytes` macro and the `prost_types::FileDescriptorSet` type, applications and libraries using Prost can implement introspection capabilities requiring details from the original `.proto` files.\n### \u00a7\u27e837\u27e9Using `prost` in a `no_std` Crate\n`prost` is compatible with `no_std` crates. To enable `no_std` support, disable the `std` features in `prost` and `prost-types`:\n\u24d8\u27e814\u27e9```\n[dependencies]\nprost = { version = \"0.14.1\", default-features = false, features = [\"derive\"] }\nprost-types = { version = \"0.14.1\", default-features = false }\n```\n\nAdditionally, configure `prost-build` to output `BTreeMap`s instead of `HashMap`s for all Protobuf `map` fields in your `build.rs`:\n\u24d8\u27e814\u27e9```\nlet mut config = prost_build::Config::new();\nconfig.btree_map(&[\".\"]);\n```\n\nWhen using edition 2015, it may be necessary to add an `extern crate core;` directive to the crate which includes `prost`-generated code.\n### \u00a7\u27e838\u27e9Serializing Existing Types\n`prost` uses a custom derive macro to handle encoding and decoding types, which means that if your existing Rust type is compatible with Protobuf types, you can serialize and deserialize it by adding the appropriate derive and field annotations.\nCurrently the best documentation on adding annotations is to look at the generated code examples above.\n#### \u00a7\u27e839\u27e9Tag Inference for Existing Types\nProst automatically infers tags for the struct.\nFields are tagged sequentially in the order they are specified, starting with `1`.\nYou may skip tags which have been reserved, or where there are gaps between sequentially occurring tag values by specifying the tag number to skip to with the `tag` attribute on the first field after the gap. The following fields will be tagged sequentially starting from the next number.\n\u24d8\u27e814\u27e9```\nuse prost;\nuse prost::{Enumeration, Message};\n#[derive(Clone, PartialEq, Message)]\nstruct Person {\n  #[prost(string, tag = \"1\")]\n  pub id: String, // tag=1\n  // NOTE: Old \"name\" field has been removed\n  // pub name: String, // tag=2 (Removed)\n  #[prost(string, tag = \"6\")]\n  pub given_name: String, // tag=6\n  #[prost(string)]\n  pub family_name: String, // tag=7\n  #[prost(string)]\n  pub formatted_name: String, // tag=8\n  #[prost(uint32, tag = \"3\")]\n  pub age: u32, // tag=3\n  #[prost(uint32)]\n  pub height: u32, // tag=4\n  #[prost(enumeration = \"Gender\")]\n  pub gender: i32, // tag=5\n  // NOTE: Skip to less commonly occurring fields\n  #[prost(string, tag = \"16\")]\n  pub name_prefix: String, // tag=16 (eg. mr/mrs/ms)\n  #[prost(string)]\n  pub name_suffix: String, // tag=17 (eg. jr/esq)\n  #[prost(string)]\n  pub maiden_name: String, // tag=18\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq, Enumeration)]\npub enum Gender {\n  Unknown = 0,\n  Female = 1,\n  Male = 2,\n}\n```\n\n### \u00a7\u27e840\u27e9Nix\nThe prost project maintains flakes support for local development. Once you have nix and nix flakes setup you can just run `nix develop` to get a shell configured with the required dependencies to compile the whole project.\n### \u00a7\u27e841\u27e9Feature Flags\n  * `std`: Enable integration with standard library. Disable this feature for `no_std` support. This feature is enabled by default.\n  * `derive`: Enable integration with `prost-derive`. Disable this feature to reduce compile times. This feature is enabled by default.\n  * `prost-derive`: Deprecated. Alias for `derive` feature.\n  * `no-recursion-limit`: Disable the recursion limit. The recursion limit is 100 and cannot be customized.\n\n\n### \u00a7\u27e842\u27e9FAQ\n  1. **Could`prost` be implemented as a serializer for Serde\u27e843\u27e9?**\n\n\nProbably not, however I would like to hear from a Serde expert on the matter. There are two complications with trying to serialize Protobuf messages with Serde:\n  * Protobuf fields require a numbered tag, and currently there appears to be no mechanism suitable for this in `serde`.\n  * The mapping of Protobuf type to Rust type is not 1-to-1. As a result, trait-based approaches to dispatching don\u2019t work very well. Example: six different Protobuf field types correspond to a Rust `Vec<i32>`: `repeated int32`, `repeated sint32`, `repeated sfixed32`, and their packed counterparts.\n\n\nBut it is possible to place `serde` derive tags onto the generated types, so the same structure can support both `prost` and `Serde`.\n  1. **I get errors when trying to run`cargo test` on MacOS**\n\n\nIf the errors are about missing `autoreconf` or similar, you can probably fix them by running\n\u24d8\u27e814\u27e9```\nbrew install automake\nbrew install libtool\n```\n\n### \u00a7\u27e844\u27e9License\n`prost` is distributed under the terms of the Apache License (Version 2.0).\nSee LICENSE\u27e845\u27e9 for details.\nCopyright 2022 Dan Burkert & Tokio Contributors\n  1. Annotations have been elided for clarity. See below for a full example. \u21a9\u27e846\u27e9\n  2. Annotations have been elided for clarity. See below for a full example. \u21a9\u27e847\u27e9\n  3. Annotations have been elided for clarity. See below for a full example. \u21a9\u27e848\u27e9\n\n\n## Re-exports\u00a7\u27e849\u27e9\n\n`pub use bytes[](https://docs.rs/bytes/1.10.1/x86_64-unknown-linux-gnu/bytes/index.html \"mod bytes\");`\n\n## Structs\u00a7\u27e850\u27e9\n\nDecodeError\u27e851\u27e9\n    A Protobuf message decoding error.\n\nEncodeError\u27e852\u27e9\n    A Protobuf message encoding error.\n\nUnknownEnumValue\u27e853\u27e9\n    An error indicating that an unknown enumeration value was encountered.\n## Traits\u00a7\u27e854\u27e9\n\nMessage\u27e855\u27e9\n    A Protocol Buffers message.\n\nName\u27e856\u27e9\n    Associate a type name with a `Message`\u27e855\u27e9 type.\n## Functions\u00a7\u27e857\u27e9\n\ndecode_length_delimiter\u27e858\u27e9\n    Decodes a length delimiter from the buffer.\n\nencode_length_delimiter\u27e859\u27e9\n    Encodes a length delimiter to the buffer.\n\nlength_delimiter_len\u27e860\u27e9\n    Returns the encoded length of a length delimiter.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/prost/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/prost/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/prost/latest/src/prost/lib.rs.html#1-42: Source\n\u27e84\u27e9 https://github.com/tokio-rs/prost/actions/workflows/ci.yml/badge.svg?branch=master: ![continuous integration\n\u27e85\u27e9 https://docs.rs/prost/badge.svg: ![Documentation\n\u27e86\u27e9 https://img.shields.io/crates/v/prost.svg: ![Crate\n\u27e87\u27e9 https://deps.rs/repo/github/tokio-rs/prost/status.svg: ![Dependency Status\n\u27e88\u27e9 https://img.shields.io/discord/500028886025895936: ![Discord\n\u27e89\u27e9 https://docs.rs/prost/latest/prost/#prost: \u00a7\n\u27e810\u27e9 https://developers.google.com/protocol-buffers/: Protocol Buffers\n\u27e811\u27e9 https://www.rust-lang.org/: Rust Language\n\u27e812\u27e9 https://github.com/carllerche/bytes: `bytes::{Buf, BufMut}`\n\u27e813\u27e9 https://docs.rs/prost/latest/prost/#using-prost-in-a-cargo-project: \u00a7\n\u27e814\u27e9 https://docs.rs/prost/latest/prost/: This example is not tested - \u24d8\n\u27e815\u27e9 https://docs.rs/prost-build/latest/prost_build/: `prost-build` documentation\n\u27e816\u27e9 https://github.com/danburkert/snazzy: snazzy repository\n\u27e817\u27e9 https://docs.rs/prost/latest/prost/#msrv: \u00a7\n\u27e818\u27e9 https://github.com/tokio-rs/tokio/#supported-rust-versions: here\n\u27e819\u27e9 https://docs.rs/prost/latest/prost/#generated-code: \u00a7\n\u27e820\u27e9 https://docs.rs/prost/latest/prost/#protoc: \u00a7\n\u27e821\u27e9 https://github.com/protocolbuffers/protobuf#protobuf-compiler-installation: protobuf install\n\u27e822\u27e9 https://docs.rs/prost/latest/prost/#packages: \u00a7\n\u27e823\u27e9 https://docs.rs/prost/latest/prost/#messages: \u00a7\n\u27e824\u27e9 https://docs.rs/prost/latest/prost/#fields-1: \u00a7\n\u27e825\u27e9 https://docs.rs/prost/latest/prost/#scalar-values: \u00a7\n\u27e826\u27e9 https://docs.rs/prost/latest/prost/#enumerations: \u00a7\n\u27e827\u27e9 https://docs.rs/prost/latest/prost/#fn1: 1\n\u27e828\u27e9 https://docs.rs/prost/latest/prost/#fn2: 2\n\u27e829\u27e9 https://docs.rs/prost/latest/prost/#field-modifiers: \u00a7\n\u27e830\u27e9 https://docs.rs/prost/latest/prost/#map-fields: \u00a7\n\u27e831\u27e9 https://docs.rs/prost/latest/prost/#message-fields: \u00a7\n\u27e832\u27e9 https://docs.rs/prost/latest/prost/#oneof-fields: \u00a7\n\u27e833\u27e9 https://docs.rs/prost/latest/prost/#fn3: 3\n\u27e834\u27e9 https://docs.rs/prost/latest/prost/#services: \u00a7\n\u27e835\u27e9 https://docs.rs/prost/latest/prost/#generated-code-example: \u00a7\n\u27e836\u27e9 https://docs.rs/prost/latest/prost/#accessing-the-protoc-filedescriptorset: \u00a7\n\u27e837\u27e9 https://docs.rs/prost/latest/prost/#using-prost-in-a-no_std-crate: \u00a7\n\u27e838\u27e9 https://docs.rs/prost/latest/prost/#serializing-existing-types: \u00a7\n\u27e839\u27e9 https://docs.rs/prost/latest/prost/#tag-inference-for-existing-types: \u00a7\n\u27e840\u27e9 https://docs.rs/prost/latest/prost/#nix: \u00a7\n\u27e841\u27e9 https://docs.rs/prost/latest/prost/#feature-flags: \u00a7\n\u27e842\u27e9 https://docs.rs/prost/latest/prost/#faq: \u00a7\n\u27e843\u27e9 https://serde.rs/: Serde\n\u27e844\u27e9 https://docs.rs/prost/latest/prost/#license: \u00a7\n\u27e845\u27e9 https://github.com/tokio-rs/prost/blob/master/LICENSE: LICENSE\n\u27e846\u27e9 https://docs.rs/prost/latest/prost/#fnref1: \u21a9\n\u27e847\u27e9 https://docs.rs/prost/latest/prost/#fnref2: \u21a9\n\u27e848\u27e9 https://docs.rs/prost/latest/prost/#fnref3: \u21a9\n\u27e849\u27e9 https://docs.rs/prost/latest/prost/#reexports: \u00a7\n\u27e850\u27e9 https://docs.rs/prost/latest/prost/#structs: \u00a7\n\u27e851\u27e9 https://docs.rs/prost/latest/prost/struct.DecodeError.html: struct prost::DecodeError - DecodeError\n\u27e852\u27e9 https://docs.rs/prost/latest/prost/struct.EncodeError.html: struct prost::EncodeError - EncodeError\n\u27e853\u27e9 https://docs.rs/prost/latest/prost/struct.UnknownEnumValue.html: struct prost::UnknownEnumValue - UnknownEnumValue\n\u27e854\u27e9 https://docs.rs/prost/latest/prost/#traits: \u00a7\n\u27e855\u27e9 https://docs.rs/prost/latest/prost/trait.Message.html: trait prost::Message - Message\n\u27e856\u27e9 https://docs.rs/prost/latest/prost/trait.Name.html: trait prost::Name - Name\n\u27e857\u27e9 https://docs.rs/prost/latest/prost/#functions: \u00a7\n\u27e858\u27e9 https://docs.rs/prost/latest/prost/fn.decode_length_delimiter.html: fn prost::decode_length_delimiter - decode_length_delimiter\n\u27e859\u27e9 https://docs.rs/prost/latest/prost/fn.encode_length_delimiter.html: fn prost::encode_length_delimiter - encode_length_delimiter\n\u27e860\u27e9 https://docs.rs/prost/latest/prost/fn.length_delimiter_len.html: fn prost::length_delimiter_len - length_delimiter_len\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `prost` crate is a Protocol Buffers implementation for Rust that generates simple, idiomatic Rust code from `.proto` files using `proto2` and `proto3` syntax. It supports serialization/deserialization, retains comments from `.proto` files, organizes code based on Protobuf packages, and handles unknown enum values gracefully. Key features include compatibility with `no_std`, custom derive macros for existing types, and integration with `prost-build` for `.proto` compilation.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Generated Code Organization\n\u2705 **Factual:** `prost` respects the Protobuf `package` specifier and organizes generated Rust code into modules that mirror the Protobuf package hierarchy.  \n\u274c **Counterfactual:** `prost` ignores the Protobuf `package` specifier and places all generated code into a single flat module.  \n\n---\n\n### Pair 2: Compatibility with `no_std`\n\u2705 **Factual:** `prost` supports `no_std` environments by disabling the `std` feature and using `BTreeMap` instead of `HashMap` for Protobuf map fields.  \n\u274c **Counterfactual:** `prost` cannot be used in `no_std` environments because it requires the standard library for all its features.  \n\n---\n\n### Pair 3: Handling Unknown Enum Values\n\u2705 **Factual:** `prost` preserves unknown enum values during deserialization, ensuring compatibility with future versions of Protobuf schemas.  \n\u274c **Counterfactual:** `prost` discards unknown enum values during deserialization, making it incompatible with Protobuf schemas that evolve over time.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}