{
    "name": "sha3",
    "version": "0.11.0-rc.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/sha3/latest/sha3/all.html \"show sidebar\")\n# Crate sha3Copy item path\n[Settings](https://docs.rs/sha3/latest/settings.html)\n[Help](https://docs.rs/sha3/latest/help.html)\nSummary[Source](https://docs.rs/sha3/latest/src/sha3/lib.rs.html#1-217)\nExpand description\nAn implementation of the [SHA-3](https://en.wikipedia.org/wiki/SHA-3) cryptographic hash algorithms.\nThere are 6 standard algorithms specified in the SHA-3 standard:\n  * `SHA3-224`\n  * `SHA3-256`\n  * `SHA3-384`\n  * `SHA3-512`\n  * `SHAKE128`, an extendable output function (XOF)\n  * `SHAKE256`, an extendable output function (XOF)\n  * `Keccak224`, `Keccak256`, `Keccak384`, `Keccak512` (NIST submission without padding changes)\n\n\nAdditionally supports `TurboSHAKE`.\n## [\u00a7](https://docs.rs/sha3/latest/sha3/#examples)Examples\nOutput size of SHA3-256 is fixed, so its functionality is usually accessed via the `Digest` trait:\n```\nuse hex_literal::hex;\nuse sha3::{Digest, Sha3_256};\n// create a SHA3-256 object\nlet mut hasher = Sha3_256::new();\n// write input message\nhasher.update(b\"abc\");\n// read hash digest\nlet result = hasher.finalize();\nassert_eq!(result[..], hex!(\"\n  3a985da74fe225b2045c172d6bd390bd855f086e3e9d525b46bfe24511431532\n\")[..]);\n```\n\nSHAKE functions have an extendable output, so finalization method returns XOF reader from which results of arbitrary length can be read. Note that these functions do not implement `Digest`, so lower-level traits have to be imported:\n```\nuse sha3::{Shake128, digest::{Update, ExtendableOutput, XofReader}};\nuse hex_literal::hex;\nlet mut hasher = Shake128::default();\nhasher.update(b\"abc\");\nlet mut reader = hasher.finalize_xof();\nlet mut res1 = [0u8; 10];\nreader.read(&mut res1);\nassert_eq!(res1, hex!(\"5881092dd818bf5cf8a3\"));\n```\n\nAlso see [RustCrypto/hashes](https://github.com/RustCrypto/hashes) readme.\n## Re-exports[\u00a7](https://docs.rs/sha3/latest/sha3/#reexports)\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs[\u00a7](https://docs.rs/sha3/latest/sha3/#structs)\n\n[CShake128Core](https://docs.rs/sha3/latest/sha3/struct.CShake128Core.html \"struct sha3::CShake128Core\")\n    Core CSHAKE128 hasher state.\n\n[CShake128ReaderCore](https://docs.rs/sha3/latest/sha3/struct.CShake128ReaderCore.html \"struct sha3::CShake128ReaderCore\")\n    Core CSHAKE128 reader state.\n\n[CShake256Core](https://docs.rs/sha3/latest/sha3/struct.CShake256Core.html \"struct sha3::CShake256Core\")\n    Core CSHAKE256 hasher state.\n\n[CShake256ReaderCore](https://docs.rs/sha3/latest/sha3/struct.CShake256ReaderCore.html \"struct sha3::CShake256ReaderCore\")\n    Core CSHAKE256 reader state.\n\n[Keccak224Core](https://docs.rs/sha3/latest/sha3/struct.Keccak224Core.html \"struct sha3::Keccak224Core\")\n    Core Keccak-224 hasher state.\n\n[Keccak256Core](https://docs.rs/sha3/latest/sha3/struct.Keccak256Core.html \"struct sha3::Keccak256Core\")\n    Core Keccak-256 hasher state.\n\n[Keccak256FullCore](https://docs.rs/sha3/latest/sha3/struct.Keccak256FullCore.html \"struct sha3::Keccak256FullCore\")\n    Core SHA-3 CryptoNight variant hasher state.\n\n[Keccak384Core](https://docs.rs/sha3/latest/sha3/struct.Keccak384Core.html \"struct sha3::Keccak384Core\")\n    Core Keccak-384 hasher state.\n\n[Keccak512Core](https://docs.rs/sha3/latest/sha3/struct.Keccak512Core.html \"struct sha3::Keccak512Core\")\n    Core Keccak-512 hasher state.\n\n[Sha3_224Core](https://docs.rs/sha3/latest/sha3/struct.Sha3_224Core.html \"struct sha3::Sha3_224Core\")\n    Core SHA-3-224 hasher state.\n\n[Sha3_256Core](https://docs.rs/sha3/latest/sha3/struct.Sha3_256Core.html \"struct sha3::Sha3_256Core\")\n    Core SHA-3-256 hasher state.\n\n[Sha3_384Core](https://docs.rs/sha3/latest/sha3/struct.Sha3_384Core.html \"struct sha3::Sha3_384Core\")\n    Core SHA-3-384 hasher state.\n\n[Sha3_512Core](https://docs.rs/sha3/latest/sha3/struct.Sha3_512Core.html \"struct sha3::Sha3_512Core\")\n    Core SHA-3-512 hasher state.\n\n[Shake128Core](https://docs.rs/sha3/latest/sha3/struct.Shake128Core.html \"struct sha3::Shake128Core\")\n    Core SHAKE128 hasher state.\n\n[Shake128ReaderCore](https://docs.rs/sha3/latest/sha3/struct.Shake128ReaderCore.html \"struct sha3::Shake128ReaderCore\")\n    Core SHAKE128 reader state.\n\n[Shake256Core](https://docs.rs/sha3/latest/sha3/struct.Shake256Core.html \"struct sha3::Shake256Core\")\n    Core SHAKE256 hasher state.\n\n[Shake256ReaderCore](https://docs.rs/sha3/latest/sha3/struct.Shake256ReaderCore.html \"struct sha3::Shake256ReaderCore\")\n    Core SHAKE256 reader state.\n\n[TurboShake128Core](https://docs.rs/sha3/latest/sha3/struct.TurboShake128Core.html \"struct sha3::TurboShake128Core\")\n    Core TurboSHAKE128 hasher state.\n\n[TurboShake128ReaderCore](https://docs.rs/sha3/latest/sha3/struct.TurboShake128ReaderCore.html \"struct sha3::TurboShake128ReaderCore\")\n    Core TurboSHAKE128 reader state.\n\n[TurboShake256Core](https://docs.rs/sha3/latest/sha3/struct.TurboShake256Core.html \"struct sha3::TurboShake256Core\")\n    Core TurboSHAKE256 hasher state.\n\n[TurboShake256ReaderCore](https://docs.rs/sha3/latest/sha3/struct.TurboShake256ReaderCore.html \"struct sha3::TurboShake256ReaderCore\")\n    Core TurboSHAKE256 reader state.\n## Traits[\u00a7](https://docs.rs/sha3/latest/sha3/#traits)\n\n[Digest](https://docs.rs/sha3/latest/sha3/trait.Digest.html \"trait sha3::Digest\")\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Type Aliases[\u00a7](https://docs.rs/sha3/latest/sha3/#types)\n\n[CShake128](https://docs.rs/sha3/latest/sha3/type.CShake128.html \"type sha3::CShake128\")\n    CSHAKE128 hasher state.\n\n[CShake256](https://docs.rs/sha3/latest/sha3/type.CShake256.html \"type sha3::CShake256\")\n    CSHAKE256 hasher state.\n\n[CShake128Reader](https://docs.rs/sha3/latest/sha3/type.CShake128Reader.html \"type sha3::CShake128Reader\")\n    CSHAKE128 reader state.\n\n[CShake256Reader](https://docs.rs/sha3/latest/sha3/type.CShake256Reader.html \"type sha3::CShake256Reader\")\n    CSHAKE256 reader state.\n\n[Keccak224](https://docs.rs/sha3/latest/sha3/type.Keccak224.html \"type sha3::Keccak224\")\n    Keccak-224 hasher state.\n\n[Keccak256](https://docs.rs/sha3/latest/sha3/type.Keccak256.html \"type sha3::Keccak256\")\n    Keccak-256 hasher state.\n\n[Keccak384](https://docs.rs/sha3/latest/sha3/type.Keccak384.html \"type sha3::Keccak384\")\n    Keccak-384 hasher state.\n\n[Keccak512](https://docs.rs/sha3/latest/sha3/type.Keccak512.html \"type sha3::Keccak512\")\n    Keccak-512 hasher state.\n\n[Keccak256Full](https://docs.rs/sha3/latest/sha3/type.Keccak256Full.html \"type sha3::Keccak256Full\")\n    SHA-3 CryptoNight variant hasher state.\n\n[Sha3_224](https://docs.rs/sha3/latest/sha3/type.Sha3_224.html \"type sha3::Sha3_224\")\n    SHA-3-224 hasher state.\n\n[Sha3_256](https://docs.rs/sha3/latest/sha3/type.Sha3_256.html \"type sha3::Sha3_256\")\n    SHA-3-256 hasher state.\n\n[Sha3_384](https://docs.rs/sha3/latest/sha3/type.Sha3_384.html \"type sha3::Sha3_384\")\n    SHA-3-384 hasher state.\n\n[Sha3_512](https://docs.rs/sha3/latest/sha3/type.Sha3_512.html \"type sha3::Sha3_512\")\n    SHA-3-512 hasher state.\n\n[Shake128](https://docs.rs/sha3/latest/sha3/type.Shake128.html \"type sha3::Shake128\")\n    SHAKE128 hasher state.\n\n[Shake256](https://docs.rs/sha3/latest/sha3/type.Shake256.html \"type sha3::Shake256\")\n    SHAKE256 hasher state.\n\n[Shake128Reader](https://docs.rs/sha3/latest/sha3/type.Shake128Reader.html \"type sha3::Shake128Reader\")\n    SHAKE128 reader state.\n\n[Shake256Reader](https://docs.rs/sha3/latest/sha3/type.Shake256Reader.html \"type sha3::Shake256Reader\")\n    SHAKE256 reader state.\n\n[TurboShake128](https://docs.rs/sha3/latest/sha3/type.TurboShake128.html \"type sha3::TurboShake128\")\n    TurboSHAKE128 hasher state.\n\n[TurboShake256](https://docs.rs/sha3/latest/sha3/type.TurboShake256.html \"type sha3::TurboShake256\")\n    TurboSHAKE256 hasher state.\n\n[TurboShake128Reader](https://docs.rs/sha3/latest/sha3/type.TurboShake128Reader.html \"type sha3::TurboShake128Reader\")\n    TurboSHAKE128 reader state.\n\n[TurboShake256Reader](https://docs.rs/sha3/latest/sha3/type.TurboShake256Reader.html \"type sha3::TurboShake256Reader\")\n    TurboSHAKE256 reader state.\n",
        "markdown_with_citations": "[](https://docs.rs/sha3/latest/sha3/all.html \"show sidebar\")\n# Crate sha3Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn implementation of the SHA-3\u27e84\u27e9 cryptographic hash algorithms.\nThere are 6 standard algorithms specified in the SHA-3 standard:\n  * `SHA3-224`\n  * `SHA3-256`\n  * `SHA3-384`\n  * `SHA3-512`\n  * `SHAKE128`, an extendable output function (XOF)\n  * `SHAKE256`, an extendable output function (XOF)\n  * `Keccak224`, `Keccak256`, `Keccak384`, `Keccak512` (NIST submission without padding changes)\n\n\nAdditionally supports `TurboSHAKE`.\n## \u00a7\u27e85\u27e9Examples\nOutput size of SHA3-256 is fixed, so its functionality is usually accessed via the `Digest` trait:\n```\nuse hex_literal::hex;\nuse sha3::{Digest, Sha3_256};\n// create a SHA3-256 object\nlet mut hasher = Sha3_256::new();\n// write input message\nhasher.update(b\"abc\");\n// read hash digest\nlet result = hasher.finalize();\nassert_eq!(result[..], hex!(\"\n  3a985da74fe225b2045c172d6bd390bd855f086e3e9d525b46bfe24511431532\n\")[..]);\n```\n\nSHAKE functions have an extendable output, so finalization method returns XOF reader from which results of arbitrary length can be read. Note that these functions do not implement `Digest`, so lower-level traits have to be imported:\n```\nuse sha3::{Shake128, digest::{Update, ExtendableOutput, XofReader}};\nuse hex_literal::hex;\nlet mut hasher = Shake128::default();\nhasher.update(b\"abc\");\nlet mut reader = hasher.finalize_xof();\nlet mut res1 = [0u8; 10];\nreader.read(&mut res1);\nassert_eq!(res1, hex!(\"5881092dd818bf5cf8a3\"));\n```\n\nAlso see RustCrypto/hashes\u27e86\u27e9 readme.\n## Re-exports\u00a7\u27e87\u27e9\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs\u00a7\u27e88\u27e9\n\nCShake128Core\u27e89\u27e9\n    Core CSHAKE128 hasher state.\n\nCShake128ReaderCore\u27e810\u27e9\n    Core CSHAKE128 reader state.\n\nCShake256Core\u27e811\u27e9\n    Core CSHAKE256 hasher state.\n\nCShake256ReaderCore\u27e812\u27e9\n    Core CSHAKE256 reader state.\n\nKeccak224Core\u27e813\u27e9\n    Core Keccak-224 hasher state.\n\nKeccak256Core\u27e814\u27e9\n    Core Keccak-256 hasher state.\n\nKeccak256FullCore\u27e815\u27e9\n    Core SHA-3 CryptoNight variant hasher state.\n\nKeccak384Core\u27e816\u27e9\n    Core Keccak-384 hasher state.\n\nKeccak512Core\u27e817\u27e9\n    Core Keccak-512 hasher state.\n\nSha3_224Core\u27e818\u27e9\n    Core SHA-3-224 hasher state.\n\nSha3_256Core\u27e819\u27e9\n    Core SHA-3-256 hasher state.\n\nSha3_384Core\u27e820\u27e9\n    Core SHA-3-384 hasher state.\n\nSha3_512Core\u27e821\u27e9\n    Core SHA-3-512 hasher state.\n\nShake128Core\u27e822\u27e9\n    Core SHAKE128 hasher state.\n\nShake128ReaderCore\u27e823\u27e9\n    Core SHAKE128 reader state.\n\nShake256Core\u27e824\u27e9\n    Core SHAKE256 hasher state.\n\nShake256ReaderCore\u27e825\u27e9\n    Core SHAKE256 reader state.\n\nTurboShake128Core\u27e826\u27e9\n    Core TurboSHAKE128 hasher state.\n\nTurboShake128ReaderCore\u27e827\u27e9\n    Core TurboSHAKE128 reader state.\n\nTurboShake256Core\u27e828\u27e9\n    Core TurboSHAKE256 hasher state.\n\nTurboShake256ReaderCore\u27e829\u27e9\n    Core TurboSHAKE256 reader state.\n## Traits\u00a7\u27e830\u27e9\n\nDigest\u27e831\u27e9\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Type Aliases\u00a7\u27e832\u27e9\n\nCShake128\u27e833\u27e9\n    CSHAKE128 hasher state.\n\nCShake256\u27e834\u27e9\n    CSHAKE256 hasher state.\n\nCShake128Reader\u27e835\u27e9\n    CSHAKE128 reader state.\n\nCShake256Reader\u27e836\u27e9\n    CSHAKE256 reader state.\n\nKeccak224\u27e837\u27e9\n    Keccak-224 hasher state.\n\nKeccak256\u27e838\u27e9\n    Keccak-256 hasher state.\n\nKeccak384\u27e839\u27e9\n    Keccak-384 hasher state.\n\nKeccak512\u27e840\u27e9\n    Keccak-512 hasher state.\n\nKeccak256Full\u27e841\u27e9\n    SHA-3 CryptoNight variant hasher state.\n\nSha3_224\u27e842\u27e9\n    SHA-3-224 hasher state.\n\nSha3_256\u27e843\u27e9\n    SHA-3-256 hasher state.\n\nSha3_384\u27e844\u27e9\n    SHA-3-384 hasher state.\n\nSha3_512\u27e845\u27e9\n    SHA-3-512 hasher state.\n\nShake128\u27e846\u27e9\n    SHAKE128 hasher state.\n\nShake256\u27e847\u27e9\n    SHAKE256 hasher state.\n\nShake128Reader\u27e848\u27e9\n    SHAKE128 reader state.\n\nShake256Reader\u27e849\u27e9\n    SHAKE256 reader state.\n\nTurboShake128\u27e850\u27e9\n    TurboSHAKE128 hasher state.\n\nTurboShake256\u27e851\u27e9\n    TurboSHAKE256 hasher state.\n\nTurboShake128Reader\u27e852\u27e9\n    TurboSHAKE128 reader state.\n\nTurboShake256Reader\u27e853\u27e9\n    TurboSHAKE256 reader state.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/sha3/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/sha3/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/sha3/latest/src/sha3/lib.rs.html#1-217: Source\n\u27e84\u27e9 https://en.wikipedia.org/wiki/SHA-3: SHA-3\n\u27e85\u27e9 https://docs.rs/sha3/latest/sha3/#examples: \u00a7\n\u27e86\u27e9 https://github.com/RustCrypto/hashes: RustCrypto/hashes\n\u27e87\u27e9 https://docs.rs/sha3/latest/sha3/#reexports: \u00a7\n\u27e88\u27e9 https://docs.rs/sha3/latest/sha3/#structs: \u00a7\n\u27e89\u27e9 https://docs.rs/sha3/latest/sha3/struct.CShake128Core.html: struct sha3::CShake128Core - CShake128Core\n\u27e810\u27e9 https://docs.rs/sha3/latest/sha3/struct.CShake128ReaderCore.html: struct sha3::CShake128ReaderCore - CShake128ReaderCore\n\u27e811\u27e9 https://docs.rs/sha3/latest/sha3/struct.CShake256Core.html: struct sha3::CShake256Core - CShake256Core\n\u27e812\u27e9 https://docs.rs/sha3/latest/sha3/struct.CShake256ReaderCore.html: struct sha3::CShake256ReaderCore - CShake256ReaderCore\n\u27e813\u27e9 https://docs.rs/sha3/latest/sha3/struct.Keccak224Core.html: struct sha3::Keccak224Core - Keccak224Core\n\u27e814\u27e9 https://docs.rs/sha3/latest/sha3/struct.Keccak256Core.html: struct sha3::Keccak256Core - Keccak256Core\n\u27e815\u27e9 https://docs.rs/sha3/latest/sha3/struct.Keccak256FullCore.html: struct sha3::Keccak256FullCore - Keccak256FullCore\n\u27e816\u27e9 https://docs.rs/sha3/latest/sha3/struct.Keccak384Core.html: struct sha3::Keccak384Core - Keccak384Core\n\u27e817\u27e9 https://docs.rs/sha3/latest/sha3/struct.Keccak512Core.html: struct sha3::Keccak512Core - Keccak512Core\n\u27e818\u27e9 https://docs.rs/sha3/latest/sha3/struct.Sha3_224Core.html: struct sha3::Sha3_224Core - Sha3_224Core\n\u27e819\u27e9 https://docs.rs/sha3/latest/sha3/struct.Sha3_256Core.html: struct sha3::Sha3_256Core - Sha3_256Core\n\u27e820\u27e9 https://docs.rs/sha3/latest/sha3/struct.Sha3_384Core.html: struct sha3::Sha3_384Core - Sha3_384Core\n\u27e821\u27e9 https://docs.rs/sha3/latest/sha3/struct.Sha3_512Core.html: struct sha3::Sha3_512Core - Sha3_512Core\n\u27e822\u27e9 https://docs.rs/sha3/latest/sha3/struct.Shake128Core.html: struct sha3::Shake128Core - Shake128Core\n\u27e823\u27e9 https://docs.rs/sha3/latest/sha3/struct.Shake128ReaderCore.html: struct sha3::Shake128ReaderCore - Shake128ReaderCore\n\u27e824\u27e9 https://docs.rs/sha3/latest/sha3/struct.Shake256Core.html: struct sha3::Shake256Core - Shake256Core\n\u27e825\u27e9 https://docs.rs/sha3/latest/sha3/struct.Shake256ReaderCore.html: struct sha3::Shake256ReaderCore - Shake256ReaderCore\n\u27e826\u27e9 https://docs.rs/sha3/latest/sha3/struct.TurboShake128Core.html: struct sha3::TurboShake128Core - TurboShake128Core\n\u27e827\u27e9 https://docs.rs/sha3/latest/sha3/struct.TurboShake128ReaderCore.html: struct sha3::TurboShake128ReaderCore - TurboShake128ReaderCore\n\u27e828\u27e9 https://docs.rs/sha3/latest/sha3/struct.TurboShake256Core.html: struct sha3::TurboShake256Core - TurboShake256Core\n\u27e829\u27e9 https://docs.rs/sha3/latest/sha3/struct.TurboShake256ReaderCore.html: struct sha3::TurboShake256ReaderCore - TurboShake256ReaderCore\n\u27e830\u27e9 https://docs.rs/sha3/latest/sha3/#traits: \u00a7\n\u27e831\u27e9 https://docs.rs/sha3/latest/sha3/trait.Digest.html: trait sha3::Digest - Digest\n\u27e832\u27e9 https://docs.rs/sha3/latest/sha3/#types: \u00a7\n\u27e833\u27e9 https://docs.rs/sha3/latest/sha3/type.CShake128.html: type sha3::CShake128 - CShake128\n\u27e834\u27e9 https://docs.rs/sha3/latest/sha3/type.CShake256.html: type sha3::CShake256 - CShake256\n\u27e835\u27e9 https://docs.rs/sha3/latest/sha3/type.CShake128Reader.html: type sha3::CShake128Reader - CShake128Reader\n\u27e836\u27e9 https://docs.rs/sha3/latest/sha3/type.CShake256Reader.html: type sha3::CShake256Reader - CShake256Reader\n\u27e837\u27e9 https://docs.rs/sha3/latest/sha3/type.Keccak224.html: type sha3::Keccak224 - Keccak224\n\u27e838\u27e9 https://docs.rs/sha3/latest/sha3/type.Keccak256.html: type sha3::Keccak256 - Keccak256\n\u27e839\u27e9 https://docs.rs/sha3/latest/sha3/type.Keccak384.html: type sha3::Keccak384 - Keccak384\n\u27e840\u27e9 https://docs.rs/sha3/latest/sha3/type.Keccak512.html: type sha3::Keccak512 - Keccak512\n\u27e841\u27e9 https://docs.rs/sha3/latest/sha3/type.Keccak256Full.html: type sha3::Keccak256Full - Keccak256Full\n\u27e842\u27e9 https://docs.rs/sha3/latest/sha3/type.Sha3_224.html: type sha3::Sha3_224 - Sha3_224\n\u27e843\u27e9 https://docs.rs/sha3/latest/sha3/type.Sha3_256.html: type sha3::Sha3_256 - Sha3_256\n\u27e844\u27e9 https://docs.rs/sha3/latest/sha3/type.Sha3_384.html: type sha3::Sha3_384 - Sha3_384\n\u27e845\u27e9 https://docs.rs/sha3/latest/sha3/type.Sha3_512.html: type sha3::Sha3_512 - Sha3_512\n\u27e846\u27e9 https://docs.rs/sha3/latest/sha3/type.Shake128.html: type sha3::Shake128 - Shake128\n\u27e847\u27e9 https://docs.rs/sha3/latest/sha3/type.Shake256.html: type sha3::Shake256 - Shake256\n\u27e848\u27e9 https://docs.rs/sha3/latest/sha3/type.Shake128Reader.html: type sha3::Shake128Reader - Shake128Reader\n\u27e849\u27e9 https://docs.rs/sha3/latest/sha3/type.Shake256Reader.html: type sha3::Shake256Reader - Shake256Reader\n\u27e850\u27e9 https://docs.rs/sha3/latest/sha3/type.TurboShake128.html: type sha3::TurboShake128 - TurboShake128\n\u27e851\u27e9 https://docs.rs/sha3/latest/sha3/type.TurboShake256.html: type sha3::TurboShake256 - TurboShake256\n\u27e852\u27e9 https://docs.rs/sha3/latest/sha3/type.TurboShake128Reader.html: type sha3::TurboShake128Reader - TurboShake128Reader\n\u27e853\u27e9 https://docs.rs/sha3/latest/sha3/type.TurboShake256Reader.html: type sha3::TurboShake256Reader - TurboShake256Reader\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `sha3` crate provides an implementation of the SHA-3 cryptographic hash algorithms, including fixed-output variants (`SHA3-224`, `SHA3-256`, `SHA3-384`, `SHA3-512`), extendable-output functions (`SHAKE128`, `SHAKE256`), and the original Keccak algorithms (`Keccak224`, `Keccak256`, `Keccak384`, `Keccak512`). It also supports `TurboSHAKE` for enhanced performance. The crate integrates with the `Digest` trait for standard hashing and offers low-level traits for extendable-output functionality.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Algorithm Support  \n\u2705 **Factual**: The `sha3` crate supports six standard algorithms specified in the SHA-3 standard, including `SHA3-224`, `SHA3-256`, `SHA3-384`, `SHA3-512`, `SHAKE128`, and `SHAKE256`.  \n\u274c **Counterfactual**: The `sha3` crate only supports the `SHA3-256` algorithm and does not include other algorithms like `SHAKE128` or `SHAKE256`.  \n\n---\n\n### Pair 2: Extendable Output Functions (XOFs)  \n\u2705 **Factual**: The `SHAKE128` and `SHAKE256` algorithms in the `sha3` crate provide extendable output functionality, allowing users to generate arbitrary-length digests using an XOF reader.  \n\u274c **Counterfactual**: The `SHAKE128` and `SHAKE256` algorithms in the `sha3` crate produce fixed-length digests, similar to the other SHA-3 algorithms.  \n\n---\n\n### Pair 3: TurboSHAKE Support  \n\u2705 **Factual**: The `sha3` crate includes support for `TurboSHAKE128` and `TurboSHAKE256`, which are optimized variants of the SHAKE algorithms.  \n\u274c **Counterfactual**: The `sha3` crate does not support `TurboSHAKE128` or `TurboSHAKE256`, as",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}