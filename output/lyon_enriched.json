{
    "name": "lyon",
    "version": "1.0.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/lyon/latest/lyon/all.html \"show sidebar\")\n# Crate lyonCopy item path\n[Settings](https://docs.rs/lyon/latest/settings.html)\n[Help](https://docs.rs/lyon/latest/help.html)\nSummary[Source](https://docs.rs/lyon/latest/src/lyon/lib.rs.html#1-190)\nExpand description\nGPU-based 2D graphics rendering tools in Rust using path tessellation.\n![logo](https://nical.github.io/lyon-doc/lyon-logo.svg)\n[![crate](https://img.shields.io/crates/v/lyon.svg)](https://crates.io/crates/lyon) [![ci](https://github.com/nical/lyon/actions/workflows/main.yml/badge.svg)](https://github.com/nical/lyon/actions)\n## [\u00a7](https://docs.rs/lyon/latest/lyon/#crates)Crates\nThis meta-crate (`lyon`) reexports the following sub-crates for convenience:\n  * [![crate](https://img.shields.io/crates/v/lyon_tessellation.svg)](https://crates.io/crates/lyon_tessellation) [![doc](https://docs.rs/lyon_tessellation/badge.svg)](https://docs.rs/lyon_tessellation) - **lyon_tessellation** - Path tessellation routines.\n  * [![crate](https://img.shields.io/crates/v/lyon_path.svg)](https://crates.io/crates/lyon_path) [![doc](https://docs.rs/lyon_path/badge.svg)](https://docs.rs/lyon_path) - **lyon_path** - Tools to build and iterate over paths.\n  * [![crate](https://img.shields.io/crates/v/lyon_algorithms.svg)](https://crates.io/crates/lyon_algorithms) [![doc](https://docs.rs/lyon_algorithms/badge.svg)](https://docs.rs/lyon_algorithms) - **lyon_algorithms** - Various 2d path related algorithms.\n  * [![crate](https://img.shields.io/crates/v/lyon_geom.svg)](https://crates.io/crates/lyon_geom) [![doc](https://docs.rs/lyon_geom/badge.svg)](https://docs.rs/lyon_geom) - **lyon_geom** - 2d utilities for cubic and quadratic b\u00e9zier curves, arcs and more.\n  * [![crate](https://img.shields.io/crates/v/lyon_extra.svg)](https://crates.io/crates/lyon_extra) [![doc](https://docs.rs/lyon_extra/badge.svg)](https://docs.rs/lyon_extra) - **lyon_extra** - Additional testing and debugging tools.\n\n\nEach `lyon_<name>` crate is reexported as a `<name>` module in `lyon`. For example:\n[\u24d8](https://docs.rs/lyon/latest/lyon/ \"This example is not tested\")```\nextern crate lyon_tessellation;\nuse lyon_tessellation::FillTessellator;\n```\n\nIs equivalent to:\n[\u24d8](https://docs.rs/lyon/latest/lyon/ \"This example is not tested\")```\nextern crate lyon;\nuse lyon::tessellation::FillTessellator;\n```\n\n## [\u00a7](https://docs.rs/lyon/latest/lyon/#feature-flags)Feature flags\nserialization using serde can be enabled on each crate using the `serialization` feature flag (disabled by default).\nWhen using the main crate `lyon`, `lyon_extra` dependencies is disabled by default. It can be added with the feature flags `extra`.\n## [\u00a7](https://docs.rs/lyon/latest/lyon/#additional-documentation-and-links)Additional documentation and links\n  * [wgpu example](https://github.com/nical/lyon/tree/master/examples/wgpu).\n  * [wgpu_svg example](https://github.com/nical/lyon/tree/master/examples/wgpu_svg) similar to the first example, can render a very small subset of SVG.\n  * There is some useful documentation on the project\u2019s [wiki](https://github.com/nical/lyon/wiki).\n  * The source code is available on the project\u2019s [git repository](https://github.com/nical/lyon).\n  * Interested in contributing? Pull requests are welcome. If you would like to help but don\u2019t know what to do specifically, have a look at the [github issues](https://github.com/nical/lyon/issues), some of which are tagged as [easy](https://github.com/nical/lyon/issues?q=is%3Aissue+is%3Aopen+label%3Aeasy).\n\n\n## [\u00a7](https://docs.rs/lyon/latest/lyon/#examples)Examples\n### [\u00a7](https://docs.rs/lyon/latest/lyon/#tessellating-a-rounded-rectangle)Tessellating a rounded rectangle\nThe `lyon_tessellation` crate provides a collection of tessellation routines for common shapes such as rectangles and circles. Let\u2019s have a look at how to obtain the fill tessellation a rectangle with rounded corners:\n```\nuse lyon::math::{Box2D, Point, point};\nuse lyon::path::{Winding, builder::BorderRadii};\nuse lyon::tessellation::{FillTessellator, FillOptions, VertexBuffers};\nuse lyon::tessellation::geometry_builder::simple_builder;\nfn main() {\n  let mut geometry: VertexBuffers<Point, u16> = VertexBuffers::new();\n  let mut geometry_builder = simple_builder(&mut geometry);\n  let options = FillOptions::tolerance(0.1);\n  let mut tessellator = FillTessellator::new();\n  let mut builder = tessellator.builder(\n    &options,\n    &mut geometry_builder,\n  );\n  builder.add_rounded_rectangle(\n    &Box2D { min: point(0.0, 0.0), max: point(100.0, 50.0) },\n    &BorderRadii {\n      top_left: 10.0,\n      top_right: 5.0,\n      bottom_left: 20.0,\n      bottom_right: 25.0,\n    },\n    Winding::Positive,\n  );\n  builder.build();\n  // The tessellated geometry is ready to be uploaded to the GPU.\n  println!(\" -- {} vertices {} indices\",\n    geometry.vertices.len(),\n    geometry.indices.len()\n  );\n}\n\n```\n\n### [\u00a7](https://docs.rs/lyon/latest/lyon/#building-and-tessellating-an-arbitrary-path)Building and tessellating an arbitrary path\n```\nextern crate lyon;\nuse lyon::math::{point, Point};\nuse lyon::path::Path;\nuse lyon::path::builder::*;\nuse lyon::tessellation::*;\nfn main() {\n  // Build a Path.\n  let mut builder = Path::builder();\n  builder.begin(point(0.0, 0.0));\n  builder.line_to(point(1.0, 0.0));\n  builder.quadratic_bezier_to(point(2.0, 0.0), point(2.0, 1.0));\n  builder.cubic_bezier_to(point(1.0, 1.0), point(0.0, 1.0), point(0.0, 0.0));\n  builder.close();\n  let path = builder.build();\n  // Let's use our own custom vertex type instead of the default one.\n  #[derive(Copy, Clone, Debug)]\n  struct MyVertex { position: [f32; 2] };\n  // Will contain the result of the tessellation.\n  let mut geometry: VertexBuffers<MyVertex, u16> = VertexBuffers::new();\n  let mut tessellator = FillTessellator::new();\n  {\n    // Compute the tessellation.\n    tessellator.tessellate_path(\n      &path,\n      &FillOptions::default(),\n      &mut BuffersBuilder::new(&mut geometry, |vertex: FillVertex| {\n        MyVertex {\n          position: vertex.position().to_array(),\n        }\n      }),\n    ).unwrap();\n  }\n  // The tessellated geometry is ready to be uploaded to the GPU.\n  println!(\" -- {} vertices {} indices\",\n    geometry.vertices.len(),\n    geometry.indices.len()\n  );\n}\n```\n\n### [\u00a7](https://docs.rs/lyon/latest/lyon/#what-is-the-tolerance-variable-in-these-examples)What is the tolerance variable in these examples?\nThe tessellator operates on flattened paths (that only contains line segments) so we have to approximate the curves segments with sequences of line segments. To do so we pick a tolerance threshold which is the maximum distance allowed between the curve and its approximation. The documentation of the [lyon_geom](https://docs.rs/lyon_geom) crate provides more detailed explanations about this tolerance parameter.\n### [\u00a7](https://docs.rs/lyon/latest/lyon/#rendering-the-tessellated-geometry)Rendering the tessellated geometry\nLyon does not provide with any GPU abstraction or rendering backend (for now). It is up to the user of this crate to decide whether to use OpenGL, vulkan, gfx-rs, wgpu, glium, or any low level graphics API and how to render it. The [wgpu example](https://github.com/nical/lyon/tree/master/examples/wgpu) can be used to get an idea of how to render the geometry (in this case using wgpu).\n## Re-exports[\u00a7](https://docs.rs/lyon/latest/lyon/#reexports)\n\n`pub extern crate lyon_algorithms[](https://docs.rs/lyon_algorithms/1.0.5/x86_64-unknown-linux-gnu/lyon_algorithms/index.html \"mod lyon_algorithms\");`\n\n\n`pub extern crate lyon_tessellation[](https://docs.rs/lyon_tessellation/1.0.15/x86_64-unknown-linux-gnu/lyon_tessellation/index.html \"mod lyon_tessellation\");`\n\n\n`pub use lyon_algorithms[](https://docs.rs/lyon_algorithms/1.0.5/x86_64-unknown-linux-gnu/lyon_algorithms/index.html \"mod lyon_algorithms\") as algorithms;`\n\n\n`pub use lyon_tessellation[](https://docs.rs/lyon_tessellation/1.0.15/x86_64-unknown-linux-gnu/lyon_tessellation/index.html \"mod lyon_tessellation\") as tessellation;`\n\n\n`pub use tessellation::geom[](https://docs.rs/lyon_geom/1.0.6/x86_64-unknown-linux-gnu/lyon_geom/index.html \"mod lyon_geom\");`\n\n\n`pub use tessellation::path[](https://docs.rs/lyon_path/1.0.7/x86_64-unknown-linux-gnu/lyon_path/index.html \"mod lyon_path\");`\n\n## Modules[\u00a7](https://docs.rs/lyon/latest/lyon/#modules)\n\n[math](https://docs.rs/lyon/latest/lyon/math/index.html \"mod lyon::math\")\n    f32 version of the lyon_geom types used everywhere. Most other lyon crates reexport them.\n",
        "markdown_with_citations": "[](https://docs.rs/lyon/latest/lyon/all.html \"show sidebar\")\n# Crate lyonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nGPU-based 2D graphics rendering tools in Rust using path tessellation.\n![logo\u27e84\u27e9]\n![crate\u27e85\u27e9](https://crates.io/crates/lyon) ![ci\u27e86\u27e9](https://github.com/nical/lyon/actions)\n## \u00a7\u27e87\u27e9Crates\nThis meta-crate (`lyon`) reexports the following sub-crates for convenience:\n  * ![crate\u27e88\u27e9](https://crates.io/crates/lyon_tessellation) ![doc\u27e89\u27e9](https://docs.rs/lyon_tessellation) - **lyon_tessellation** - Path tessellation routines.\n  * ![crate\u27e810\u27e9](https://crates.io/crates/lyon_path) ![doc\u27e811\u27e9](https://docs.rs/lyon_path) - **lyon_path** - Tools to build and iterate over paths.\n  * ![crate\u27e812\u27e9](https://crates.io/crates/lyon_algorithms) ![doc\u27e813\u27e9](https://docs.rs/lyon_algorithms) - **lyon_algorithms** - Various 2d path related algorithms.\n  * ![crate\u27e814\u27e9](https://crates.io/crates/lyon_geom) ![doc\u27e815\u27e9](https://docs.rs/lyon_geom) - **lyon_geom** - 2d utilities for cubic and quadratic b\u00e9zier curves, arcs and more.\n  * ![crate\u27e816\u27e9](https://crates.io/crates/lyon_extra) ![doc\u27e817\u27e9](https://docs.rs/lyon_extra) - **lyon_extra** - Additional testing and debugging tools.\n\n\nEach `lyon_<name>` crate is reexported as a `<name>` module in `lyon`. For example:\n\u24d8\u27e818\u27e9```\nextern crate lyon_tessellation;\nuse lyon_tessellation::FillTessellator;\n```\n\nIs equivalent to:\n\u24d8\u27e818\u27e9```\nextern crate lyon;\nuse lyon::tessellation::FillTessellator;\n```\n\n## \u00a7\u27e819\u27e9Feature flags\nserialization using serde can be enabled on each crate using the `serialization` feature flag (disabled by default).\nWhen using the main crate `lyon`, `lyon_extra` dependencies is disabled by default. It can be added with the feature flags `extra`.\n## \u00a7\u27e820\u27e9Additional documentation and links\n  * wgpu example\u27e821\u27e9.\n  * wgpu_svg example\u27e822\u27e9 similar to the first example, can render a very small subset of SVG.\n  * There is some useful documentation on the project\u2019s wiki\u27e823\u27e9.\n  * The source code is available on the project\u2019s git repository\u27e824\u27e9.\n  * Interested in contributing? Pull requests are welcome. If you would like to help but don\u2019t know what to do specifically, have a look at the github issues\u27e825\u27e9, some of which are tagged as easy\u27e826\u27e9.\n\n\n## \u00a7\u27e827\u27e9Examples\n### \u00a7\u27e828\u27e9Tessellating a rounded rectangle\nThe `lyon_tessellation` crate provides a collection of tessellation routines for common shapes such as rectangles and circles. Let\u2019s have a look at how to obtain the fill tessellation a rectangle with rounded corners:\n```\nuse lyon::math::{Box2D, Point, point};\nuse lyon::path::{Winding, builder::BorderRadii};\nuse lyon::tessellation::{FillTessellator, FillOptions, VertexBuffers};\nuse lyon::tessellation::geometry_builder::simple_builder;\nfn main() {\n  let mut geometry: VertexBuffers<Point, u16> = VertexBuffers::new();\n  let mut geometry_builder = simple_builder(&mut geometry);\n  let options = FillOptions::tolerance(0.1);\n  let mut tessellator = FillTessellator::new();\n  let mut builder = tessellator.builder(\n    &options,\n    &mut geometry_builder,\n  );\n  builder.add_rounded_rectangle(\n    &Box2D { min: point(0.0, 0.0), max: point(100.0, 50.0) },\n    &BorderRadii {\n      top_left: 10.0,\n      top_right: 5.0,\n      bottom_left: 20.0,\n      bottom_right: 25.0,\n    },\n    Winding::Positive,\n  );\n  builder.build();\n  // The tessellated geometry is ready to be uploaded to the GPU.\n  println!(\" -- {} vertices {} indices\",\n    geometry.vertices.len(),\n    geometry.indices.len()\n  );\n}\n\n```\n\n### \u00a7\u27e829\u27e9Building and tessellating an arbitrary path\n```\nextern crate lyon;\nuse lyon::math::{point, Point};\nuse lyon::path::Path;\nuse lyon::path::builder::*;\nuse lyon::tessellation::*;\nfn main() {\n  // Build a Path.\n  let mut builder = Path::builder();\n  builder.begin(point(0.0, 0.0));\n  builder.line_to(point(1.0, 0.0));\n  builder.quadratic_bezier_to(point(2.0, 0.0), point(2.0, 1.0));\n  builder.cubic_bezier_to(point(1.0, 1.0), point(0.0, 1.0), point(0.0, 0.0));\n  builder.close();\n  let path = builder.build();\n  // Let's use our own custom vertex type instead of the default one.\n  #[derive(Copy, Clone, Debug)]\n  struct MyVertex { position: [f32; 2] };\n  // Will contain the result of the tessellation.\n  let mut geometry: VertexBuffers<MyVertex, u16> = VertexBuffers::new();\n  let mut tessellator = FillTessellator::new();\n  {\n    // Compute the tessellation.\n    tessellator.tessellate_path(\n      &path,\n      &FillOptions::default(),\n      &mut BuffersBuilder::new(&mut geometry, |vertex: FillVertex| {\n        MyVertex {\n          position: vertex.position().to_array(),\n        }\n      }),\n    ).unwrap();\n  }\n  // The tessellated geometry is ready to be uploaded to the GPU.\n  println!(\" -- {} vertices {} indices\",\n    geometry.vertices.len(),\n    geometry.indices.len()\n  );\n}\n```\n\n### \u00a7\u27e830\u27e9What is the tolerance variable in these examples?\nThe tessellator operates on flattened paths (that only contains line segments) so we have to approximate the curves segments with sequences of line segments. To do so we pick a tolerance threshold which is the maximum distance allowed between the curve and its approximation. The documentation of the lyon_geom\u27e831\u27e9 crate provides more detailed explanations about this tolerance parameter.\n### \u00a7\u27e832\u27e9Rendering the tessellated geometry\nLyon does not provide with any GPU abstraction or rendering backend (for now). It is up to the user of this crate to decide whether to use OpenGL, vulkan, gfx-rs, wgpu, glium, or any low level graphics API and how to render it. The wgpu example\u27e821\u27e9 can be used to get an idea of how to render the geometry (in this case using wgpu).\n## Re-exports\u00a7\u27e833\u27e9\n\n`pub extern crate lyon_algorithms[](https://docs.rs/lyon_algorithms/1.0.5/x86_64-unknown-linux-gnu/lyon_algorithms/index.html \"mod lyon_algorithms\");`\n\n\n`pub extern crate lyon_tessellation[](https://docs.rs/lyon_tessellation/1.0.15/x86_64-unknown-linux-gnu/lyon_tessellation/index.html \"mod lyon_tessellation\");`\n\n\n`pub use lyon_algorithms[](https://docs.rs/lyon_algorithms/1.0.5/x86_64-unknown-linux-gnu/lyon_algorithms/index.html \"mod lyon_algorithms\") as algorithms;`\n\n\n`pub use lyon_tessellation[](https://docs.rs/lyon_tessellation/1.0.15/x86_64-unknown-linux-gnu/lyon_tessellation/index.html \"mod lyon_tessellation\") as tessellation;`\n\n\n`pub use tessellation::geom[](https://docs.rs/lyon_geom/1.0.6/x86_64-unknown-linux-gnu/lyon_geom/index.html \"mod lyon_geom\");`\n\n\n`pub use tessellation::path[](https://docs.rs/lyon_path/1.0.7/x86_64-unknown-linux-gnu/lyon_path/index.html \"mod lyon_path\");`\n\n## Modules\u00a7\u27e834\u27e9\n\nmath\u27e835\u27e9\n    f32 version of the lyon_geom types used everywhere. Most other lyon crates reexport them.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/lyon/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/lyon/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/lyon/latest/src/lyon/lib.rs.html#1-190: Source\n\u27e84\u27e9 https://nical.github.io/lyon-doc/lyon-logo.svg: logo\n\u27e85\u27e9 https://img.shields.io/crates/v/lyon.svg: ![crate\n\u27e86\u27e9 https://github.com/nical/lyon/actions/workflows/main.yml/badge.svg: ![ci\n\u27e87\u27e9 https://docs.rs/lyon/latest/lyon/#crates: \u00a7\n\u27e88\u27e9 https://img.shields.io/crates/v/lyon_tessellation.svg: ![crate\n\u27e89\u27e9 https://docs.rs/lyon_tessellation/badge.svg: ![doc\n\u27e810\u27e9 https://img.shields.io/crates/v/lyon_path.svg: ![crate\n\u27e811\u27e9 https://docs.rs/lyon_path/badge.svg: ![doc\n\u27e812\u27e9 https://img.shields.io/crates/v/lyon_algorithms.svg: ![crate\n\u27e813\u27e9 https://docs.rs/lyon_algorithms/badge.svg: ![doc\n\u27e814\u27e9 https://img.shields.io/crates/v/lyon_geom.svg: ![crate\n\u27e815\u27e9 https://docs.rs/lyon_geom/badge.svg: ![doc\n\u27e816\u27e9 https://img.shields.io/crates/v/lyon_extra.svg: ![crate\n\u27e817\u27e9 https://docs.rs/lyon_extra/badge.svg: ![doc\n\u27e818\u27e9 https://docs.rs/lyon/latest/lyon/: This example is not tested - \u24d8\n\u27e819\u27e9 https://docs.rs/lyon/latest/lyon/#feature-flags: \u00a7\n\u27e820\u27e9 https://docs.rs/lyon/latest/lyon/#additional-documentation-and-links: \u00a7\n\u27e821\u27e9 https://github.com/nical/lyon/tree/master/examples/wgpu: wgpu example\n\u27e822\u27e9 https://github.com/nical/lyon/tree/master/examples/wgpu_svg: wgpu_svg example\n\u27e823\u27e9 https://github.com/nical/lyon/wiki: wiki\n\u27e824\u27e9 https://github.com/nical/lyon: git repository\n\u27e825\u27e9 https://github.com/nical/lyon/issues: github issues\n\u27e826\u27e9 https://github.com/nical/lyon/issues?q=is%3Aissue+is%3Aopen+label%3Aeasy: easy\n\u27e827\u27e9 https://docs.rs/lyon/latest/lyon/#examples: \u00a7\n\u27e828\u27e9 https://docs.rs/lyon/latest/lyon/#tessellating-a-rounded-rectangle: \u00a7\n\u27e829\u27e9 https://docs.rs/lyon/latest/lyon/#building-and-tessellating-an-arbitrary-path: \u00a7\n\u27e830\u27e9 https://docs.rs/lyon/latest/lyon/#what-is-the-tolerance-variable-in-these-examples: \u00a7\n\u27e831\u27e9 https://docs.rs/lyon_geom: lyon_geom\n\u27e832\u27e9 https://docs.rs/lyon/latest/lyon/#rendering-the-tessellated-geometry: \u00a7\n\u27e833\u27e9 https://docs.rs/lyon/latest/lyon/#reexports: \u00a7\n\u27e834\u27e9 https://docs.rs/lyon/latest/lyon/#modules: \u00a7\n\u27e835\u27e9 https://docs.rs/lyon/latest/lyon/math/index.html: mod lyon::math - math\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `lyon` crate provides GPU-based 2D graphics rendering tools in Rust, focusing on path tessellation for shapes like rectangles, circles, and arbitrary paths. It reexports sub-crates such as `lyon_tessellation` for tessellation routines, `lyon_path` for path building, and `lyon_geom` for B\u00e9zier curve utilities. The crate supports custom geometry generation for GPU rendering and offers optional features like serialization via Serde.",
    "feature_summary": null,
    "use_case": "Unknown",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Tessellation Features  \n\u2705 Factual: The `lyon_tessellation` crate provides routines for tessellating common 2D shapes, such as rectangles, circles, and paths, and allows users to specify a tolerance threshold for curve approximation.  \n\u274c Counterfactual: The `lyon_tessellation` crate directly supports GPU rendering of tessellated shapes without requiring a separate graphics backend.  \n\n---\n\n### Pair 2: Sub-Crate Reexports  \n\u2705 Factual: The `lyon` meta-crate reexports sub-crates like `lyon_tessellation`, `lyon_path`, and `lyon_geom` as modules, allowing developers to access their functionality through a unified interface.  \n\u274c Counterfactual: The `lyon` meta-crate combines all sub-crates into a single binary, eliminating the need to use individual modules for specific functionality.  \n\n---\n\n### Pair 3: GPU Rendering Support  \n\u2705 Factual: The `lyon` crate provides examples for integrating tessellated geometry with GPU rendering using frameworks like `wgpu`, but does not include its own rendering backend.  \n\u274c Counterfactual: The `lyon` crate includes built-in support for rendering tessellated geometry directly to the screen using OpenGL or Vulkan.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}