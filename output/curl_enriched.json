{
    "name": "curl",
    "version": "0.4.48",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/curl/latest/curl/all.html \"show sidebar\")\n# Crate curlCopy item path\n[Settings](https://docs.rs/curl/latest/settings.html)\n[Help](https://docs.rs/curl/latest/help.html)\nSummary[Source](https://docs.rs/curl/latest/src/curl/lib.rs.html#1-184)\nExpand description\nRust bindings to the libcurl C library\nThis crate contains bindings for an HTTP/HTTPS client which is powered by [libcurl](https://curl.haxx.se/libcurl/), the same library behind the `curl` command line tool. The API currently closely matches that of libcurl itself, except that a Rustic layer of safety is applied on top.\n## [\u00a7](https://docs.rs/curl/latest/curl/#the-easy-api)The \u201cEasy\u201d API\nThe easiest way to send a request is to use the `Easy` api which corresponds to `CURL` in libcurl. This handle supports a wide variety of options and can be used to make a single blocking request in a thread. Callbacks can be specified to deal with data as it arrives and a handle can be reused to cache connections and such.\n```\nuse std::io::{stdout, Write};\nuse curl::easy::Easy;\n// Write the contents of rust-lang.org to stdout\nlet mut easy = Easy::new();\neasy.url(\"https://www.rust-lang.org/\").unwrap();\neasy.write_function(|data| {\n  stdout().write_all(data).unwrap();\n  Ok(data.len())\n}).unwrap();\neasy.perform().unwrap();\n```\n\n## [\u00a7](https://docs.rs/curl/latest/curl/#what-about-multiple-concurrent-http-requests)What about multiple concurrent HTTP requests?\nOne option you have currently is to send multiple requests in multiple threads, but otherwise libcurl has a \u201cmulti\u201d interface for doing this operation. Initial bindings of this interface can be found in the `multi` module, but feedback is welcome!\n## [\u00a7](https://docs.rs/curl/latest/curl/#where-does-libcurl-come-from)Where does libcurl come from?\nThis crate links to the `curl-sys` crate which is in turn responsible for acquiring and linking to the libcurl library. Currently this crate will build libcurl from source if one is not already detected on the system.\nThere is a large number of releases for libcurl, all with different sets of capabilities. Robust programs may wish to inspect `Version::get()` to test what features are implemented in the linked build of libcurl at runtime.\n## [\u00a7](https://docs.rs/curl/latest/curl/#initialization)Initialization\nThe underlying libcurl library must be initialized before use and has certain requirements on how this is done. Check the documentation for [`init`](https://docs.rs/curl/latest/curl/fn.init.html \"fn curl::init\") for more details.\n## Modules[\u00a7](https://docs.rs/curl/latest/curl/#modules)\n\n[easy](https://docs.rs/curl/latest/curl/easy/index.html \"mod curl::easy\")\n    Bindings to the \u201ceasy\u201d libcurl API.\n\n[multi](https://docs.rs/curl/latest/curl/multi/index.html \"mod curl::multi\")\n    Multi - initiating multiple requests simultaneously\n## Structs[\u00a7](https://docs.rs/curl/latest/curl/#structs)\n\n[Error](https://docs.rs/curl/latest/curl/struct.Error.html \"struct curl::Error\")\n    An error returned from various \u201ceasy\u201d operations.\n\n[FormError](https://docs.rs/curl/latest/curl/struct.FormError.html \"struct curl::FormError\")\n    An error from \u201cform add\u201d operations.\n\n[MultiError](https://docs.rs/curl/latest/curl/struct.MultiError.html \"struct curl::MultiError\")\n    An error from \u201cmulti\u201d operations.\n\n[Protocols](https://docs.rs/curl/latest/curl/struct.Protocols.html \"struct curl::Protocols\")\n    An iterator over the list of protocols a version supports.\n\n[ShareError](https://docs.rs/curl/latest/curl/struct.ShareError.html \"struct curl::ShareError\")\n    An error returned from \u201cshare\u201d operations.\n\n[Version](https://docs.rs/curl/latest/curl/struct.Version.html \"struct curl::Version\")\n    Version information about libcurl and the capabilities that it supports.\n## Functions[\u00a7](https://docs.rs/curl/latest/curl/#functions)\n\n[init](https://docs.rs/curl/latest/curl/fn.init.html \"fn curl::init\")\n    Initializes the underlying libcurl library.\n",
        "markdown_with_citations": "[](https://docs.rs/curl/latest/curl/all.html \"show sidebar\")\n# Crate curlCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRust bindings to the libcurl C library\nThis crate contains bindings for an HTTP/HTTPS client which is powered by libcurl\u27e84\u27e9, the same library behind the `curl` command line tool. The API currently closely matches that of libcurl itself, except that a Rustic layer of safety is applied on top.\n## \u00a7\u27e85\u27e9The \u201cEasy\u201d API\nThe easiest way to send a request is to use the `Easy` api which corresponds to `CURL` in libcurl. This handle supports a wide variety of options and can be used to make a single blocking request in a thread. Callbacks can be specified to deal with data as it arrives and a handle can be reused to cache connections and such.\n```\nuse std::io::{stdout, Write};\nuse curl::easy::Easy;\n// Write the contents of rust-lang.org to stdout\nlet mut easy = Easy::new();\neasy.url(\"https://www.rust-lang.org/\").unwrap();\neasy.write_function(|data| {\n  stdout().write_all(data).unwrap();\n  Ok(data.len())\n}).unwrap();\neasy.perform().unwrap();\n```\n\n## \u00a7\u27e86\u27e9What about multiple concurrent HTTP requests?\nOne option you have currently is to send multiple requests in multiple threads, but otherwise libcurl has a \u201cmulti\u201d interface for doing this operation. Initial bindings of this interface can be found in the `multi` module, but feedback is welcome!\n## \u00a7\u27e87\u27e9Where does libcurl come from?\nThis crate links to the `curl-sys` crate which is in turn responsible for acquiring and linking to the libcurl library. Currently this crate will build libcurl from source if one is not already detected on the system.\nThere is a large number of releases for libcurl, all with different sets of capabilities. Robust programs may wish to inspect `Version::get()` to test what features are implemented in the linked build of libcurl at runtime.\n## \u00a7\u27e88\u27e9Initialization\nThe underlying libcurl library must be initialized before use and has certain requirements on how this is done. Check the documentation for `init`\u27e89\u27e9 for more details.\n## Modules\u00a7\u27e810\u27e9\n\neasy\u27e811\u27e9\n    Bindings to the \u201ceasy\u201d libcurl API.\n\nmulti\u27e812\u27e9\n    Multi - initiating multiple requests simultaneously\n## Structs\u00a7\u27e813\u27e9\n\nError\u27e814\u27e9\n    An error returned from various \u201ceasy\u201d operations.\n\nFormError\u27e815\u27e9\n    An error from \u201cform add\u201d operations.\n\nMultiError\u27e816\u27e9\n    An error from \u201cmulti\u201d operations.\n\nProtocols\u27e817\u27e9\n    An iterator over the list of protocols a version supports.\n\nShareError\u27e818\u27e9\n    An error returned from \u201cshare\u201d operations.\n\nVersion\u27e819\u27e9\n    Version information about libcurl and the capabilities that it supports.\n## Functions\u00a7\u27e820\u27e9\n\ninit\u27e89\u27e9\n    Initializes the underlying libcurl library.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/curl/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/curl/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/curl/latest/src/curl/lib.rs.html#1-184: Source\n\u27e84\u27e9 https://curl.haxx.se/libcurl/: libcurl\n\u27e85\u27e9 https://docs.rs/curl/latest/curl/#the-easy-api: \u00a7\n\u27e86\u27e9 https://docs.rs/curl/latest/curl/#what-about-multiple-concurrent-http-requests: \u00a7\n\u27e87\u27e9 https://docs.rs/curl/latest/curl/#where-does-libcurl-come-from: \u00a7\n\u27e88\u27e9 https://docs.rs/curl/latest/curl/#initialization: \u00a7\n\u27e89\u27e9 https://docs.rs/curl/latest/curl/fn.init.html: fn curl::init - `init`\n\u27e810\u27e9 https://docs.rs/curl/latest/curl/#modules: \u00a7\n\u27e811\u27e9 https://docs.rs/curl/latest/curl/easy/index.html: mod curl::easy - easy\n\u27e812\u27e9 https://docs.rs/curl/latest/curl/multi/index.html: mod curl::multi - multi\n\u27e813\u27e9 https://docs.rs/curl/latest/curl/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/curl/latest/curl/struct.Error.html: struct curl::Error - Error\n\u27e815\u27e9 https://docs.rs/curl/latest/curl/struct.FormError.html: struct curl::FormError - FormError\n\u27e816\u27e9 https://docs.rs/curl/latest/curl/struct.MultiError.html: struct curl::MultiError - MultiError\n\u27e817\u27e9 https://docs.rs/curl/latest/curl/struct.Protocols.html: struct curl::Protocols - Protocols\n\u27e818\u27e9 https://docs.rs/curl/latest/curl/struct.ShareError.html: struct curl::ShareError - ShareError\n\u27e819\u27e9 https://docs.rs/curl/latest/curl/struct.Version.html: struct curl::Version - Version\n\u27e820\u27e9 https://docs.rs/curl/latest/curl/#functions: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `curl` crate provides Rust bindings to the `libcurl` C library, enabling HTTP/HTTPS client functionality with a safe, idiomatic API. It supports the \"Easy\" API for single blocking requests and the \"Multi\" API for concurrent requests, along with customizable callbacks for handling data streams. The crate automatically links to or builds `libcurl` and offers runtime inspection of supported features via version querying.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Easy API Usage\n\u2705 **Factual:** The `curl` crate provides an `Easy` API that allows users to send single blocking HTTP/HTTPS requests, with support for callbacks to process incoming data.  \n\u274c **Counterfactual:** The `curl` crate's `Easy` API is designed exclusively for asynchronous HTTP/HTTPS requests and does not support blocking operations.\n\n---\n\n### Pair 2: Concurrent Requests\n\u2705 **Factual:** The `curl` crate supports concurrent HTTP requests using libcurl's \"multi\" interface, which is accessible through the `multi` module.  \n\u274c **Counterfactual:** The `curl` crate does not support concurrent HTTP requests, as it only provides bindings for single-threaded operations.\n\n---\n\n### Pair 3: libcurl Dependency\n\u2705 **Factual:** The `curl` crate links to the `curl-sys` crate, which builds libcurl from source if the library is not already detected on the system.  \n\u274c **Counterfactual:** The `curl` crate includes a fully embedded version of libcurl and does not rely on external libraries or the `curl-sys` crate for functionality.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}