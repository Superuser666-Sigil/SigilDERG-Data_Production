{
    "name": "quick-xml",
    "version": "0.38.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/quick-xml/latest/quick_xml/all.html \"show sidebar\")\n# Crate quick_xmlCopy item path\n[Settings](https://docs.rs/quick-xml/latest/settings.html)\n[Help](https://docs.rs/quick-xml/latest/help.html)\nSummary[Source](https://docs.rs/quick-xml/latest/src/quick_xml/lib.rs.html#1-79)\nExpand description\nHigh performance XML reader/writer.\n## [\u00a7](https://docs.rs/quick-xml/latest/quick_xml/#description)Description\nquick-xml contains two modes of operation:\nA streaming API based on the [StAX](https://en.wikipedia.org/wiki/StAX) model. This is suited for larger XML documents which cannot completely read into memory at once.\nThe user has to explicitly _ask_ for the next XML event, similar to a database cursor. This is achieved by the following two structs:\n  * [`Reader`](https://docs.rs/quick-xml/latest/quick_xml/reader/struct.Reader.html \"struct quick_xml::reader::Reader\"): A low level XML pull-reader where buffer allocation/clearing is left to user.\n  * [`Writer`](https://docs.rs/quick-xml/latest/quick_xml/writer/struct.Writer.html \"struct quick_xml::writer::Writer\"): A XML writer. Can be nested with readers if you want to transform XMLs.\n\n\nEspecially for nested XML elements, the user must keep track _where_ (how deep) in the XML document the current event is located.\nquick-xml contains optional support of asynchronous reading and writing using [tokio](https://tokio.rs/). To get it enable the [`async-tokio`](https://docs.rs/quick-xml/latest/quick_xml/#async-tokio) feature.\nFurthermore, quick-xml also contains optional [Serde](https://serde.rs/) support to directly serialize and deserialize from structs, without having to deal with the XML events. To get it enable the [`serialize`](https://docs.rs/quick-xml/latest/quick_xml/#serialize) feature. Read more about mapping Rust types to XML in the documentation of [`de`](https://docs.rs/quick-xml/latest/quick_xml/de/index.html) module. Also check [`serde_helpers`](https://docs.rs/quick-xml/latest/quick_xml/serde_helpers/index.html \"mod quick_xml::serde_helpers\") module.\n## [\u00a7](https://docs.rs/quick-xml/latest/quick_xml/#examples)Examples\n  * For a reading example see [`Reader`](https://docs.rs/quick-xml/latest/quick_xml/reader/struct.Reader.html \"struct quick_xml::reader::Reader\")\n  * For a writing example see [`Writer`](https://docs.rs/quick-xml/latest/quick_xml/writer/struct.Writer.html \"struct quick_xml::writer::Writer\")\n\n\n## [\u00a7](https://docs.rs/quick-xml/latest/quick_xml/#features)Features\n`quick-xml` supports the following features:\n  * [**`async-tokio`**](https://docs.rs/quick-xml/latest/quick_xml/#async-tokio)\u2014 Enables support for asynchronous reading and writing from`tokio`\u2019s IO-Traits by enabling [reading events](https://docs.rs/quick-xml/latest/quick_xml/reader/struct.Reader.html#method.read_event_into_async \"method quick_xml::reader::Reader::read_event_into_async\") from types implementing [`tokio::io::AsyncBufRead`](https://docs.rs/tokio/1.45.1/x86_64-unknown-linux-gnu/tokio/io/async_buf_read/trait.AsyncBufRead.html \"trait tokio::io::async_buf_read::AsyncBufRead\").\n  * [**`encoding`**](https://docs.rs/quick-xml/latest/quick_xml/#encoding)\u2014 Enables support of non-UTF-8 encoded documents. Encoding will be inferred from the XML declaration if it is found, otherwise UTF-8 is assumed.\nCurrently, only ASCII-compatible encodings are supported. For example, UTF-16 will not work (therefore, `quick-xml` is not [standard compliant](https://www.w3.org/TR/xml11/#charencoding)).\nThus, quick-xml supports all encodings of [`encoding_rs`](https://docs.rs/encoding_rs/0.8.35/x86_64-unknown-linux-gnu/encoding_rs/index.html \"mod encoding_rs\") except these:\n    * [UTF-16BE](https://docs.rs/encoding_rs/0.8.35/x86_64-unknown-linux-gnu/encoding_rs/static.UTF_16BE.html \"static encoding_rs::UTF_16BE\")\n    * [UTF-16LE](https://docs.rs/encoding_rs/0.8.35/x86_64-unknown-linux-gnu/encoding_rs/static.UTF_16LE.html \"static encoding_rs::UTF_16LE\")\n    * [ISO-2022-JP](https://docs.rs/encoding_rs/0.8.35/x86_64-unknown-linux-gnu/encoding_rs/static.ISO_2022_JP.html \"static encoding_rs::ISO_2022_JP\")\nYou should stop processing a document when one of these encodings is detected, because generated events can be wrong and do not reflect a real document structure!\nBecause these are the only supported encodings that are not ASCII compatible, you can check for them:\n```\nuse quick_xml::events::Event;\nuse quick_xml::reader::Reader;\nlet xml = to_utf16le_with_bom(r#\"<?xml encoding='UTF-16'><element/>\"#);\nlet mut reader = Reader::from_reader(xml.as_ref());\nreader.config_mut().trim_text(true);\nlet mut buf = Vec::new();\nlet mut unsupported = false;\nloop {\n  if !reader.decoder().encoding().is_ascii_compatible() {\n    unsupported = true;\n    break;\n  }\n  buf.clear();\n  match reader.read_event_into(&mut buf).unwrap() {\n    Event::Eof => break,\n    _ => {}\n  }\n}\nassert_eq!(unsupported, true);\n```\n\nThis restriction will be eliminated once issue [#158](https://github.com/tafia/quick-xml/issues/158) is resolved.\n  * [**`escape-html`**](https://docs.rs/quick-xml/latest/quick_xml/#escape-html)\u2014 Enables support for recognizing all[HTML 5 entities](https://dev.w3.org/html5/html-author/charref) in [`unescape`](https://docs.rs/quick-xml/latest/quick_xml/escape/fn.unescape.html \"fn quick_xml::escape::unescape\") function. The full list of entities also can be found in <https://html.spec.whatwg.org/entities.json>.\n  * [**`overlapped-lists`**](https://docs.rs/quick-xml/latest/quick_xml/#overlapped-lists)\u2014 This feature is for the Serde deserializer that enables support for deserializing lists where tags are overlapped with tags that do not correspond to the list.\nWhen this feature is enabled, the XML:\n```\n<any-name>\n <item/>\n <another-item/>\n <item/>\n <item/>\n</any-name>\n```\n\ncould be deserialized to a struct:\n```\n#[derive(Deserialize)]\n#[serde(rename_all = \"kebab-case\")]\nstruct AnyName {\n item: Vec<()>,\n another_item: (),\n}\n```\n\nWhen this feature is not enabled (default), only the first element will be associated with the field, and the deserialized type will report an error (duplicated field) when the deserializer encounters a second `<item/>`.\nNote, that enabling this feature can lead to high and even unlimited memory consumption, because deserializer needs to check all events up to the end of a container tag (`</any-name>` in this example) to figure out that there are no more items for a field. If `</any-name>` or even EOF is not encountered, the parsing will never end which can lead to a denial-of-service (DoS) scenario.\nHaving several lists and overlapped elements for them in XML could also lead to quadratic parsing time, because the deserializer must check the list of events as many times as the number of sequence fields present in the schema.\nTo reduce negative consequences, always [limit](https://docs.rs/quick-xml/latest/quick_xml/de/struct.Deserializer.html#method.event_buffer_size \"method quick_xml::de::Deserializer::event_buffer_size\") the maximum number of events that [`Deserializer`](https://docs.rs/quick-xml/latest/quick_xml/de/struct.Deserializer.html \"struct quick_xml::de::Deserializer\") will buffer.\nThis feature works only with `serialize` feature and has no effect if `serialize` is not enabled.\n  * [**`serde-types`**](https://docs.rs/quick-xml/latest/quick_xml/#serde-types)\u2014 Enables serialization of some quick-xml types using[`serde`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/index.html \"mod serde\"). This feature is rarely needed.\nThis feature does NOT provide XML serializer or deserializer. You should use the `serialize` feature for that instead.\n  * [**`serialize`**](https://docs.rs/quick-xml/latest/quick_xml/#serialize)\u2014 Enables support for[`serde`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/index.html \"mod serde\") serialization and deserialization. When this feature is enabled, quick-xml provides serializer and deserializer for XML.\nThis feature does NOT enables serializaton of the types inside quick-xml. If you need that, use the `serde-types` feature.\n\n\n## Re-exports[\u00a7](https://docs.rs/quick-xml/latest/quick_xml/#reexports)\n\n`pub use crate::encoding::Decoder[](https://docs.rs/quick-xml/latest/quick_xml/encoding/struct.Decoder.html \"struct quick_xml::encoding::Decoder\");`\n\n\n`pub use crate::errors::serialize::DeError[](https://docs.rs/quick-xml/latest/quick_xml/errors/serialize/enum.DeError.html \"enum quick_xml::errors::serialize::DeError\");``serialize`\n\n\n`pub use crate::errors::serialize::SeError[](https://docs.rs/quick-xml/latest/quick_xml/errors/serialize/enum.SeError.html \"enum quick_xml::errors::serialize::SeError\");``serialize`\n\n\n`pub use crate::errors::Error[](https://docs.rs/quick-xml/latest/quick_xml/errors/enum.Error.html \"enum quick_xml::errors::Error\");`\n\n\n`pub use crate::errors::Result[](https://docs.rs/quick-xml/latest/quick_xml/errors/type.Result.html \"type quick_xml::errors::Result\");`\n\n\n`pub use crate::reader::NsReader[](https://docs.rs/quick-xml/latest/quick_xml/reader/struct.NsReader.html \"struct quick_xml::reader::NsReader\");`\n\n\n`pub use crate::reader::Reader[](https://docs.rs/quick-xml/latest/quick_xml/reader/struct.Reader.html \"struct quick_xml::reader::Reader\");`\n\n\n`pub use crate::writer::ElementWriter[](https://docs.rs/quick-xml/latest/quick_xml/writer/struct.ElementWriter.html \"struct quick_xml::writer::ElementWriter\");`\n\n\n`pub use crate::writer::Writer[](https://docs.rs/quick-xml/latest/quick_xml/writer/struct.Writer.html \"struct quick_xml::writer::Writer\");`\n\n## Modules[\u00a7](https://docs.rs/quick-xml/latest/quick_xml/#modules)\n\n[de](https://docs.rs/quick-xml/latest/quick_xml/de/index.html \"mod quick_xml::de\")`serialize`\n    Serde `Deserializer` module.\n\n[encoding](https://docs.rs/quick-xml/latest/quick_xml/encoding/index.html \"mod quick_xml::encoding\")\n    A module for wrappers that encode / decode data.\n\n[errors](https://docs.rs/quick-xml/latest/quick_xml/errors/index.html \"mod quick_xml::errors\")\n    Error management module\n\n[escape](https://docs.rs/quick-xml/latest/quick_xml/escape/index.html \"mod quick_xml::escape\")\n    Manage xml character escapes\n\n[events](https://docs.rs/quick-xml/latest/quick_xml/events/index.html \"mod quick_xml::events\")\n    Defines zero-copy XML events used throughout this library.\n\n[name](https://docs.rs/quick-xml/latest/quick_xml/name/index.html \"mod quick_xml::name\")\n    Module for handling names according to the W3C [Namespaces in XML 1.1 (Second Edition)](https://www.w3.org/TR/xml-names11) specification\n\n[parser](https://docs.rs/quick-xml/latest/quick_xml/parser/index.html \"mod quick_xml::parser\")\n    Contains low-level parsers of different XML pieces.\n\n[reader](https://docs.rs/quick-xml/latest/quick_xml/reader/index.html \"mod quick_xml::reader\")\n    Contains high-level interface for a pull-based XML parser.\n\n[se](https://docs.rs/quick-xml/latest/quick_xml/se/index.html \"mod quick_xml::se\")`serialize`\n    Module to handle custom serde `Serializer`\n\n[serde_helpers](https://docs.rs/quick-xml/latest/quick_xml/serde_helpers/index.html \"mod quick_xml::serde_helpers\")`serde-types`\n    Provides helper functions to glue an XML with a serde content model.\n\n[writer](https://docs.rs/quick-xml/latest/quick_xml/writer/index.html \"mod quick_xml::writer\")\n    Contains high-level interface for an events-based XML emitter.\n## Macros[\u00a7](https://docs.rs/quick-xml/latest/quick_xml/#macros)\n\n[impl_deserialize_for_internally_tagged_enum](https://docs.rs/quick-xml/latest/quick_xml/macro.impl_deserialize_for_internally_tagged_enum.html \"macro quick_xml::impl_deserialize_for_internally_tagged_enum\")`serde-types`\n    A helper to implement [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") for [internally tagged](https://serde.rs/enum-representations.html#internally-tagged) enums which does not use [`Deserializer::deserialize_any`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserializer.html#tymethod.deserialize_any \"method serde::de::Deserializer::deserialize_any\") that produces wrong results with XML because of [serde#1183](https://github.com/serde-rs/serde/issues/1183).\n",
        "markdown_with_citations": "[](https://docs.rs/quick-xml/latest/quick_xml/all.html \"show sidebar\")\n# Crate quick_xmlCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nHigh performance XML reader/writer.\n## \u00a7\u27e84\u27e9Description\nquick-xml contains two modes of operation:\nA streaming API based on the StAX\u27e85\u27e9 model. This is suited for larger XML documents which cannot completely read into memory at once.\nThe user has to explicitly _ask_ for the next XML event, similar to a database cursor. This is achieved by the following two structs:\n  * `Reader`\u27e86\u27e9: A low level XML pull-reader where buffer allocation/clearing is left to user.\n  * `Writer`\u27e87\u27e9: A XML writer. Can be nested with readers if you want to transform XMLs.\n\n\nEspecially for nested XML elements, the user must keep track _where_ (how deep) in the XML document the current event is located.\nquick-xml contains optional support of asynchronous reading and writing using tokio\u27e88\u27e9. To get it enable the `async-tokio`\u27e89\u27e9 feature.\nFurthermore, quick-xml also contains optional Serde\u27e810\u27e9 support to directly serialize and deserialize from structs, without having to deal with the XML events. To get it enable the `serialize`\u27e811\u27e9 feature. Read more about mapping Rust types to XML in the documentation of `de`\u27e812\u27e9 module. Also check `serde_helpers`\u27e813\u27e9 module.\n## \u00a7\u27e814\u27e9Examples\n  * For a reading example see `Reader`\u27e86\u27e9\n  * For a writing example see `Writer`\u27e87\u27e9\n\n\n## \u00a7\u27e815\u27e9Features\n`quick-xml` supports the following features:\n  * **`async-tokio`**\u27e89\u27e9\u2014 Enables support for asynchronous reading and writing from`tokio`\u2019s IO-Traits by enabling reading events\u27e816\u27e9 from types implementing `tokio::io::AsyncBufRead`\u27e817\u27e9.\n  * **`encoding`**\u27e818\u27e9\u2014 Enables support of non-UTF-8 encoded documents. Encoding will be inferred from the XML declaration if it is found, otherwise UTF-8 is assumed.\nCurrently, only ASCII-compatible encodings are supported. For example, UTF-16 will not work (therefore, `quick-xml` is not standard compliant\u27e819\u27e9).\nThus, quick-xml supports all encodings of `encoding_rs`\u27e820\u27e9 except these:\n    * UTF-16BE\u27e821\u27e9\n    * UTF-16LE\u27e822\u27e9\n    * ISO-2022-JP\u27e823\u27e9\nYou should stop processing a document when one of these encodings is detected, because generated events can be wrong and do not reflect a real document structure!\nBecause these are the only supported encodings that are not ASCII compatible, you can check for them:\n```\nuse quick_xml::events::Event;\nuse quick_xml::reader::Reader;\nlet xml = to_utf16le_with_bom(r#\"<?xml encoding='UTF-16'><element/>\"#);\nlet mut reader = Reader::from_reader(xml.as_ref());\nreader.config_mut().trim_text(true);\nlet mut buf = Vec::new();\nlet mut unsupported = false;\nloop {\n  if !reader.decoder().encoding().is_ascii_compatible() {\n    unsupported = true;\n    break;\n  }\n  buf.clear();\n  match reader.read_event_into(&mut buf).unwrap() {\n    Event::Eof => break,\n    _ => {}\n  }\n}\nassert_eq!(unsupported, true);\n```\n\nThis restriction will be eliminated once issue #158\u27e824\u27e9 is resolved.\n  * **`escape-html`**\u27e825\u27e9\u2014 Enables support for recognizing allHTML 5 entities\u27e826\u27e9 in `unescape`\u27e827\u27e9 function. The full list of entities also can be found in <https://html.spec.whatwg.org/entities.json>.\n  * **`overlapped-lists`**\u27e828\u27e9\u2014 This feature is for the Serde deserializer that enables support for deserializing lists where tags are overlapped with tags that do not correspond to the list.\nWhen this feature is enabled, the XML:\n```\n<any-name>\n <item/>\n <another-item/>\n <item/>\n <item/>\n</any-name>\n```\n\ncould be deserialized to a struct:\n```\n#[derive(Deserialize)]\n#[serde(rename_all = \"kebab-case\")]\nstruct AnyName {\n item: Vec<()>,\n another_item: (),\n}\n```\n\nWhen this feature is not enabled (default), only the first element will be associated with the field, and the deserialized type will report an error (duplicated field) when the deserializer encounters a second `<item/>`.\nNote, that enabling this feature can lead to high and even unlimited memory consumption, because deserializer needs to check all events up to the end of a container tag (`</any-name>` in this example) to figure out that there are no more items for a field. If `</any-name>` or even EOF is not encountered, the parsing will never end which can lead to a denial-of-service (DoS) scenario.\nHaving several lists and overlapped elements for them in XML could also lead to quadratic parsing time, because the deserializer must check the list of events as many times as the number of sequence fields present in the schema.\nTo reduce negative consequences, always limit\u27e829\u27e9 the maximum number of events that `Deserializer`\u27e830\u27e9 will buffer.\nThis feature works only with `serialize` feature and has no effect if `serialize` is not enabled.\n  * **`serde-types`**\u27e831\u27e9\u2014 Enables serialization of some quick-xml types using`serde`\u27e832\u27e9. This feature is rarely needed.\nThis feature does NOT provide XML serializer or deserializer. You should use the `serialize` feature for that instead.\n  * **`serialize`**\u27e811\u27e9\u2014 Enables support for`serde`\u27e832\u27e9 serialization and deserialization. When this feature is enabled, quick-xml provides serializer and deserializer for XML.\nThis feature does NOT enables serializaton of the types inside quick-xml. If you need that, use the `serde-types` feature.\n\n\n## Re-exports\u00a7\u27e833\u27e9\n\n`pub use crate::encoding::Decoder[](https://docs.rs/quick-xml/latest/quick_xml/encoding/struct.Decoder.html \"struct quick_xml::encoding::Decoder\");`\n\n\n`pub use crate::errors::serialize::DeError[](https://docs.rs/quick-xml/latest/quick_xml/errors/serialize/enum.DeError.html \"enum quick_xml::errors::serialize::DeError\");``serialize`\n\n\n`pub use crate::errors::serialize::SeError[](https://docs.rs/quick-xml/latest/quick_xml/errors/serialize/enum.SeError.html \"enum quick_xml::errors::serialize::SeError\");``serialize`\n\n\n`pub use crate::errors::Error[](https://docs.rs/quick-xml/latest/quick_xml/errors/enum.Error.html \"enum quick_xml::errors::Error\");`\n\n\n`pub use crate::errors::Result[](https://docs.rs/quick-xml/latest/quick_xml/errors/type.Result.html \"type quick_xml::errors::Result\");`\n\n\n`pub use crate::reader::NsReader[](https://docs.rs/quick-xml/latest/quick_xml/reader/struct.NsReader.html \"struct quick_xml::reader::NsReader\");`\n\n\n`pub use crate::reader::Reader[](https://docs.rs/quick-xml/latest/quick_xml/reader/struct.Reader.html \"struct quick_xml::reader::Reader\");`\n\n\n`pub use crate::writer::ElementWriter[](https://docs.rs/quick-xml/latest/quick_xml/writer/struct.ElementWriter.html \"struct quick_xml::writer::ElementWriter\");`\n\n\n`pub use crate::writer::Writer[](https://docs.rs/quick-xml/latest/quick_xml/writer/struct.Writer.html \"struct quick_xml::writer::Writer\");`\n\n## Modules\u00a7\u27e834\u27e9\n\nde\u27e812\u27e9`serialize`\n    Serde `Deserializer` module.\n\nencoding\u27e835\u27e9\n    A module for wrappers that encode / decode data.\n\nerrors\u27e836\u27e9\n    Error management module\n\nescape\u27e837\u27e9\n    Manage xml character escapes\n\nevents\u27e838\u27e9\n    Defines zero-copy XML events used throughout this library.\n\nname\u27e839\u27e9\n    Module for handling names according to the W3C Namespaces in XML 1.1 (Second Edition)\u27e840\u27e9 specification\n\nparser\u27e841\u27e9\n    Contains low-level parsers of different XML pieces.\n\nreader\u27e842\u27e9\n    Contains high-level interface for a pull-based XML parser.\n\nse\u27e843\u27e9`serialize`\n    Module to handle custom serde `Serializer`\n\nserde_helpers\u27e813\u27e9`serde-types`\n    Provides helper functions to glue an XML with a serde content model.\n\nwriter\u27e844\u27e9\n    Contains high-level interface for an events-based XML emitter.\n## Macros\u00a7\u27e845\u27e9\n\nimpl_deserialize_for_internally_tagged_enum\u27e846\u27e9`serde-types`\n    A helper to implement `Deserialize`\u27e847\u27e9 for internally tagged\u27e848\u27e9 enums which does not use `Deserializer::deserialize_any`\u27e849\u27e9 that produces wrong results with XML because of serde#1183\u27e850\u27e9.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/quick-xml/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/quick-xml/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/quick-xml/latest/src/quick_xml/lib.rs.html#1-79: Source\n\u27e84\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#description: \u00a7\n\u27e85\u27e9 https://en.wikipedia.org/wiki/StAX: StAX\n\u27e86\u27e9 https://docs.rs/quick-xml/latest/quick_xml/reader/struct.Reader.html: struct quick_xml::reader::Reader - `Reader`\n\u27e87\u27e9 https://docs.rs/quick-xml/latest/quick_xml/writer/struct.Writer.html: struct quick_xml::writer::Writer - `Writer`\n\u27e88\u27e9 https://tokio.rs/: tokio\n\u27e89\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#async-tokio: `async-tokio`\n\u27e810\u27e9 https://serde.rs/: Serde\n\u27e811\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#serialize: `serialize`\n\u27e812\u27e9 https://docs.rs/quick-xml/latest/quick_xml/de/index.html: `de`\n\u27e813\u27e9 https://docs.rs/quick-xml/latest/quick_xml/serde_helpers/index.html: mod quick_xml::serde_helpers - `serde_helpers`\n\u27e814\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#examples: \u00a7\n\u27e815\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#features: \u00a7\n\u27e816\u27e9 https://docs.rs/quick-xml/latest/quick_xml/reader/struct.Reader.html#method.read_event_into_async: method quick_xml::reader::Reader::read_event_into_async - reading events\n\u27e817\u27e9 https://docs.rs/tokio/1.45.1/x86_64-unknown-linux-gnu/tokio/io/async_buf_read/trait.AsyncBufRead.html: trait tokio::io::async_buf_read::AsyncBufRead - `tokio::io::AsyncBufRead`\n\u27e818\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#encoding: **`encoding`**\n\u27e819\u27e9 https://www.w3.org/TR/xml11/#charencoding: standard compliant\n\u27e820\u27e9 https://docs.rs/encoding_rs/0.8.35/x86_64-unknown-linux-gnu/encoding_rs/index.html: mod encoding_rs - `encoding_rs`\n\u27e821\u27e9 https://docs.rs/encoding_rs/0.8.35/x86_64-unknown-linux-gnu/encoding_rs/static.UTF_16BE.html: static encoding_rs::UTF_16BE - UTF-16BE\n\u27e822\u27e9 https://docs.rs/encoding_rs/0.8.35/x86_64-unknown-linux-gnu/encoding_rs/static.UTF_16LE.html: static encoding_rs::UTF_16LE - UTF-16LE\n\u27e823\u27e9 https://docs.rs/encoding_rs/0.8.35/x86_64-unknown-linux-gnu/encoding_rs/static.ISO_2022_JP.html: static encoding_rs::ISO_2022_JP - ISO-2022-JP\n\u27e824\u27e9 https://github.com/tafia/quick-xml/issues/158: #158\n\u27e825\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#escape-html: **`escape-html`**\n\u27e826\u27e9 https://dev.w3.org/html5/html-author/charref: HTML 5 entities\n\u27e827\u27e9 https://docs.rs/quick-xml/latest/quick_xml/escape/fn.unescape.html: fn quick_xml::escape::unescape - `unescape`\n\u27e828\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#overlapped-lists: **`overlapped-lists`**\n\u27e829\u27e9 https://docs.rs/quick-xml/latest/quick_xml/de/struct.Deserializer.html#method.event_buffer_size: method quick_xml::de::Deserializer::event_buffer_size - limit\n\u27e830\u27e9 https://docs.rs/quick-xml/latest/quick_xml/de/struct.Deserializer.html: struct quick_xml::de::Deserializer - `Deserializer`\n\u27e831\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#serde-types: **`serde-types`**\n\u27e832\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/index.html: mod serde - `serde`\n\u27e833\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#reexports: \u00a7\n\u27e834\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#modules: \u00a7\n\u27e835\u27e9 https://docs.rs/quick-xml/latest/quick_xml/encoding/index.html: mod quick_xml::encoding - encoding\n\u27e836\u27e9 https://docs.rs/quick-xml/latest/quick_xml/errors/index.html: mod quick_xml::errors - errors\n\u27e837\u27e9 https://docs.rs/quick-xml/latest/quick_xml/escape/index.html: mod quick_xml::escape - escape\n\u27e838\u27e9 https://docs.rs/quick-xml/latest/quick_xml/events/index.html: mod quick_xml::events - events\n\u27e839\u27e9 https://docs.rs/quick-xml/latest/quick_xml/name/index.html: mod quick_xml::name - name\n\u27e840\u27e9 https://www.w3.org/TR/xml-names11: Namespaces in XML 1.1 (Second Edition)\n\u27e841\u27e9 https://docs.rs/quick-xml/latest/quick_xml/parser/index.html: mod quick_xml::parser - parser\n\u27e842\u27e9 https://docs.rs/quick-xml/latest/quick_xml/reader/index.html: mod quick_xml::reader - reader\n\u27e843\u27e9 https://docs.rs/quick-xml/latest/quick_xml/se/index.html: mod quick_xml::se - se\n\u27e844\u27e9 https://docs.rs/quick-xml/latest/quick_xml/writer/index.html: mod quick_xml::writer - writer\n\u27e845\u27e9 https://docs.rs/quick-xml/latest/quick_xml/#macros: \u00a7\n\u27e846\u27e9 https://docs.rs/quick-xml/latest/quick_xml/macro.impl_deserialize_for_internally_tagged_enum.html: macro quick_xml::impl_deserialize_for_internally_tagged_enum - impl_deserialize_for_internally_tagged_enum\n\u27e847\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e848\u27e9 https://serde.rs/enum-representations.html#internally-tagged: internally tagged\n\u27e849\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserializer.html#tymethod.deserialize_any: method serde::de::Deserializer::deserialize_any - `Deserializer::deserialize_any`\n\u27e850\u27e9 https://github.com/serde-rs/serde/issues/1183: serde#1183\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `quick-xml` crate is a high-performance XML reader and writer that supports both streaming (StAX-like) and event-based APIs, making it suitable for large XML documents. It offers optional features like asynchronous processing via `tokio`, Serde integration for XML serialization/deserialization, support for non-UTF-8 encodings, and HTML entity escaping. Additional features include handling overlapped lists for Serde deserialization and custom serialization helpers.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: Streaming API  \n\u2705 Factual: `quick-xml` provides a streaming API based on the StAX model, which is well-suited for processing large XML documents that cannot be fully loaded into memory.  \n\u274c Counterfactual: `quick-xml` uses a DOM-based approach to parse XML documents, requiring the entire document to be loaded into memory before processing.  \n\n---\n\n### Pair 2: Encoding Support  \n\u2705 Factual: `quick-xml` supports ASCII-compatible encodings and infers encoding from the XML declaration, but does not support UTF-16 or ISO-2022-JP due to limitations in `encoding_rs`.  \n\u274c Counterfactual: `quick-xml` fully supports all encodings, including UTF-16 and ISO-2022-JP, making it compliant with the W3C XML standard.  \n\n---\n\n### Pair 3: Asynchronous Features  \n\u2705 Factual: By enabling the `async-tokio` feature, `quick-xml` supports asynchronous XML reading and writing using `tokio`'s IO traits, such as `AsyncBufRead`.  \n\u274c Counterfactual: The asynchronous capabilities of `quick-xml` are enabled by default and do not require the `async-tokio` feature flag.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}