{
    "name": "vulkano",
    "version": "0.35.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/vulkano/latest/vulkano/all.html \"show sidebar\")\n# Crate vulkanoCopy item path\n[Settings](https://docs.rs/vulkano/latest/settings.html)\n[Help](https://docs.rs/vulkano/latest/help.html)\nSummary[Source](https://docs.rs/vulkano/latest/src/vulkano/lib.rs.html#1-693)\nExpand description\nSafe and rich Rust wrapper around the Vulkan API.\n## [\u00a7](https://docs.rs/vulkano/latest/vulkano/#starting-off-with-vulkano)Starting off with Vulkano\nThe steps for using Vulkan through Vulkano are in principle not any different from using the raw Vulkan API, but the details may be different for the sake of idiomaticity, safety and convenience.\n  1. Create a [`VulkanLibrary`](https://docs.rs/vulkano/latest/vulkano/library/struct.VulkanLibrary.html \"struct vulkano::library::VulkanLibrary\"). This represents a Vulkan library on the system, which must be loaded before you can do anything with Vulkan.\n  2. Create an [`Instance`](https://docs.rs/vulkano/latest/vulkano/instance/struct.Instance.html \"struct vulkano::instance::Instance\"). This is the API entry point, and represents an initialised Vulkan library.\n  3. If you intend to show graphics to the user on a window or a screen, create a [`Surface`](https://docs.rs/vulkano/latest/vulkano/swapchain/struct.Surface.html \"struct vulkano::swapchain::Surface\"). A `Surface` is created from a window identifier or handle, that is specific to the display or windowing system being used. Vulkano uses `raw-window-handle` to abstract over the different windowing systems. Note that you have to make sure that the `raw-window-handle` that your windowing library uses is compatible with the `raw-window-handle` that vulkano uses. For example, if you use a `winit` version that uses a different version from the one vulkano uses, you can add one of the [features](https://docs.rs/crate/winit/latest/features) that starts with `rwh` to `winit`. Currently, vulkano is compatible with `rwh_06`.\n  4. [Enumerate the physical devices](https://docs.rs/vulkano/latest/vulkano/instance/struct.Instance.html#method.enumerate_physical_devices \"method vulkano::instance::Instance::enumerate_physical_devices\") that are available on the `Instance`, and choose one that is suitable for your program. A [`PhysicalDevice`](https://docs.rs/vulkano/latest/vulkano/device/physical/struct.PhysicalDevice.html \"struct vulkano::device::physical::PhysicalDevice\") represents a Vulkan-capable device that is available on the system, such as a graphics card, a software implementation, etc.\n  5. Create a [`Device`](https://docs.rs/vulkano/latest/vulkano/device/struct.Device.html \"struct vulkano::device::Device\") and accompanying [`Queue`](https://docs.rs/vulkano/latest/vulkano/device/struct.Queue.html \"struct vulkano::device::Queue\")s from the selected `PhysicalDevice`. The `Device` is the most important object of Vulkan, and you need one to create almost every other object. `Queue`s are created together with the `Device`, and are used to submit work to the device to make it do something.\n  6. If you created a `Surface` earlier, create a [`Swapchain`](https://docs.rs/vulkano/latest/vulkano/swapchain/struct.Swapchain.html \"struct vulkano::swapchain::Swapchain\"). This object contains special images that correspond to the contents of the surface. Whenever you want to change the contents (show something new to the user), you must first _acquire_ one of these images from the swapchain, fill it with the new contents (by rendering, copying or any other means), and then _present_ it back to the swapchain. A swapchain can become outdated if the properties of the surface change, such as when the size of the window changes. It then becomes necessary to create a new swapchain.\n  7. Record a [_command buffer_](https://docs.rs/vulkano/latest/vulkano/command_buffer/index.html \"mod vulkano::command_buffer\"), containing commands that the device must execute. Then build the command buffer and submit it to a `Queue`.\n\n\nMany different operations can be recorded to a command buffer, such as _draw_ , _compute_ and _transfer_ operations. To do any of these things, you will need to create several other objects, depending on your specific needs. This includes:\n  * [_Buffers_](https://docs.rs/vulkano/latest/vulkano/buffer/index.html \"mod vulkano::buffer\") store general-purpose data on memory accessible by the device. This can include mesh data (vertices, texture coordinates etc.), lighting information, matrices, and anything else you can think of.\n  * [_Images_](https://docs.rs/vulkano/latest/vulkano/image/index.html \"mod vulkano::image\") store texel data, arranged in a grid of one or more dimensions. They can be used as textures, depth/stencil buffers, framebuffers and as part of a swapchain.\n  * [_Pipelines_](https://docs.rs/vulkano/latest/vulkano/pipeline/index.html \"mod vulkano::pipeline\") describe operations on the device. They include one or more [_shader_](https://docs.rs/vulkano/latest/vulkano/shader/index.html \"mod vulkano::shader\")s, small programs that the device will execute as part of a pipeline. Pipelines come in several types:\n    * A [`ComputePipeline`](https://docs.rs/vulkano/latest/vulkano/pipeline/compute/struct.ComputePipeline.html \"struct vulkano::pipeline::compute::ComputePipeline\") describes how _dispatch_ commands are to be performed.\n    * A [`GraphicsPipeline`](https://docs.rs/vulkano/latest/vulkano/pipeline/graphics/struct.GraphicsPipeline.html \"struct vulkano::pipeline::graphics::GraphicsPipeline\") describes how _draw_ commands are to be performed.\n  * [_Descriptor sets_](https://docs.rs/vulkano/latest/vulkano/descriptor_set/index.html \"mod vulkano::descriptor_set\") make buffers, images and other objects available to shaders. The arrangement of these resources in shaders is described by a [`DescriptorSetLayout`](https://docs.rs/vulkano/latest/vulkano/descriptor_set/layout/index.html \"mod vulkano::descriptor_set::layout\"). One or more of these layouts in turn forms a [`PipelineLayout`](https://docs.rs/vulkano/latest/vulkano/pipeline/layout/index.html \"mod vulkano::pipeline::layout\"), which is used when creating a pipeline object.\n  * For more complex, multi-stage draw operations, you can create a [`RenderPass`](https://docs.rs/vulkano/latest/vulkano/render_pass/struct.RenderPass.html \"struct vulkano::render_pass::RenderPass\") object. This object describes the stages, known as subpasses, that draw operations consist of, how they interact with one another, and which types of images are available in each subpass. You must also create a [`Framebuffer`](https://docs.rs/vulkano/latest/vulkano/render_pass/struct.Framebuffer.html \"struct vulkano::render_pass::Framebuffer\"), which contains the image objects that are to be used in a render pass.\n\n\n## [\u00a7](https://docs.rs/vulkano/latest/vulkano/#_unchecked-functions)`_unchecked` functions\nMany functions in Vulkano have two versions: the normal function, which is usually safe to call, and another function with `_unchecked` added onto the end of the name, which is unsafe to call. The `_unchecked` functions skip all validation checks, so they are usually more efficient, but you must ensure that you meet the validity/safety requirements of the function.\nFor all `_unchecked` functions, a call to the function is valid, if a call to the corresponding normal function with the same arguments would return without any error. This includes following all the valid usage requirements of the Vulkan specification, but may also include additional requirements specific to Vulkano. **All other usage of`_unchecked` functions may be undefined behavior.**\nBecause there are potentially many `_unchecked` functions, and because their name and operation can be straightforwardly understood based on the corresponding normal function, they are hidden from the Vulkano documentation by default. You can unhide them by enabling the `document_unchecked` cargo feature, and then generating the documentation with the command `cargo doc --open`.\n## [\u00a7](https://docs.rs/vulkano/latest/vulkano/#cargo-features)Cargo features\nFeature| Description  \n---|---  \n`macros`| Include reexports from [`vulkano-macros`](https://docs.rs/vulkano-macros/0.35.0/x86_64-unknown-linux-gnu/vulkano_macros/index.html \"mod vulkano_macros\"). Enabled by default.  \n`x11`| Support for X11 platforms. Enabled by default.  \n`document_unchecked`| Include `_unchecked` functions in the generated documentation.  \n`serde`| Enables (de)serialization of certain types using [`serde`](https://crates.io/crates/serde).  \n## Re-exports[\u00a7](https://docs.rs/vulkano/latest/vulkano/#reexports)\n\n`pub use library::LoadingError[](https://docs.rs/vulkano/latest/vulkano/library/enum.LoadingError.html \"enum vulkano::library::LoadingError\");`\n\n\n`pub use library::VulkanLibrary[](https://docs.rs/vulkano/latest/vulkano/library/struct.VulkanLibrary.html \"struct vulkano::library::VulkanLibrary\");`\n\n\n`pub use half[](https://docs.rs/half/2.6.0/x86_64-unknown-linux-gnu/half/index.html \"mod half\");`\n\n## Modules[\u00a7](https://docs.rs/vulkano/latest/vulkano/#modules)\n\n[acceleration_structure](https://docs.rs/vulkano/latest/vulkano/acceleration_structure/index.html \"mod vulkano::acceleration_structure\")\n    An opaque data structure that is used to accelerate spatial queries on geometry data.\n\n[buffer](https://docs.rs/vulkano/latest/vulkano/buffer/index.html \"mod vulkano::buffer\")\n    Location in memory that contains data.\n\n[command_buffer](https://docs.rs/vulkano/latest/vulkano/command_buffer/index.html \"mod vulkano::command_buffer\")\n    Recording commands to execute on the device.\n\n[deferred](https://docs.rs/vulkano/latest/vulkano/deferred/index.html \"mod vulkano::deferred\")\n    Operations on the host that can be deferred.\n\n[descriptor_set](https://docs.rs/vulkano/latest/vulkano/descriptor_set/index.html \"mod vulkano::descriptor_set\")\n    Bindings between shaders and the resources they access.\n\n[device](https://docs.rs/vulkano/latest/vulkano/device/index.html \"mod vulkano::device\")\n    Communication channel with a physical device.\n\n[display](https://docs.rs/vulkano/latest/vulkano/display/index.html \"mod vulkano::display\")\n    Control and use of display devices (e.g. monitors).\n\n[format](https://docs.rs/vulkano/latest/vulkano/format/index.html \"mod vulkano::format\")\n    All the formats supported by Vulkan.\n\n[image](https://docs.rs/vulkano/latest/vulkano/image/index.html \"mod vulkano::image\")\n    Image storage (1D, 2D, 3D, arrays, etc.) and image views.\n\n[instance](https://docs.rs/vulkano/latest/vulkano/instance/index.html \"mod vulkano::instance\")\n    API entry point.\n\n[library](https://docs.rs/vulkano/latest/vulkano/library/index.html \"mod vulkano::library\")\n    Vulkan library loading system.\n\n[memory](https://docs.rs/vulkano/latest/vulkano/memory/index.html \"mod vulkano::memory\")\n    Device memory allocation and memory pools.\n\n[padded](https://docs.rs/vulkano/latest/vulkano/padded/index.html \"mod vulkano::padded\")\n    A newtype wrapper for enforcing correct alignment for external types.\n\n[pipeline](https://docs.rs/vulkano/latest/vulkano/pipeline/index.html \"mod vulkano::pipeline\")\n    Describes a processing operation that will execute on the Vulkan device.\n\n[query](https://docs.rs/vulkano/latest/vulkano/query/index.html \"mod vulkano::query\")\n    Gather information about rendering, held in query pools.\n\n[range_set](https://docs.rs/vulkano/latest/vulkano/range_set/index.html \"mod vulkano::range_set\")\n\n\n[render_pass](https://docs.rs/vulkano/latest/vulkano/render_pass/index.html \"mod vulkano::render_pass\")\n    Description of the steps of the rendering process, and the images used as input or output.\n\n[shader](https://docs.rs/vulkano/latest/vulkano/shader/index.html \"mod vulkano::shader\")\n    A program that is run on the device.\n\n[swapchain](https://docs.rs/vulkano/latest/vulkano/swapchain/index.html \"mod vulkano::swapchain\")\n    Link between Vulkan and a window and/or the screen.\n\n[sync](https://docs.rs/vulkano/latest/vulkano/sync/index.html \"mod vulkano::sync\")\n    Synchronization on the GPU.\n## Macros[\u00a7](https://docs.rs/vulkano/latest/vulkano/#macros)\n\n[impl_vertex](https://docs.rs/vulkano/latest/vulkano/macro.impl_vertex.html \"macro vulkano::impl_vertex\")Deprecated\n    Implements the `Vertex` trait on a struct.\n\n[impl_vertex_member](https://docs.rs/vulkano/latest/vulkano/macro.impl_vertex_member.html \"macro vulkano::impl_vertex_member\")\n\n\n[ordered_passes_renderpass](https://docs.rs/vulkano/latest/vulkano/macro.ordered_passes_renderpass.html \"macro vulkano::ordered_passes_renderpass\")\n    Builds a `RenderPass` object whose template parameter is of indeterminate type.\n\n[single_pass_renderpass](https://docs.rs/vulkano/latest/vulkano/macro.single_pass_renderpass.html \"macro vulkano::single_pass_renderpass\")\n    Builds a `RenderPass` object whose template parameter is of indeterminate type.\n\n[statically_linked_vulkan_loader](https://docs.rs/vulkano/latest/vulkano/macro.statically_linked_vulkan_loader.html \"macro vulkano::statically_linked_vulkan_loader\")\n    Expression that returns a loader that assumes that Vulkan is linked to the executable you\u2019re compiling.\n\n[type_for_format](https://docs.rs/vulkano/latest/vulkano/macro.type_for_format.html \"macro vulkano::type_for_format\")\n    Converts a format enum identifier to a standard Rust type that is suitable for representing the format in a buffer or image.\n## Structs[\u00a7](https://docs.rs/vulkano/latest/vulkano/#structs)\n\n[ExtensionProperties](https://docs.rs/vulkano/latest/vulkano/struct.ExtensionProperties.html \"struct vulkano::ExtensionProperties\")\n    Properties of an extension in the loader or a physical device.\n\n[NonExhaustive](https://docs.rs/vulkano/latest/vulkano/struct.NonExhaustive.html \"struct vulkano::NonExhaustive\")\n    A helper type for non-exhaustive structs.\n\n[Packed24_8](https://docs.rs/vulkano/latest/vulkano/struct.Packed24_8.html \"struct vulkano::Packed24_8\")\n    Holds 24 bits in the least significant bits of memory, and 8 bytes in the most significant bits of that memory, occupying a single [`u32`](https://doc.rust-lang.org/nightly/std/primitive.u32.html \"primitive u32\") in total.\n\n[RequiresAllOf](https://docs.rs/vulkano/latest/vulkano/struct.RequiresAllOf.html \"struct vulkano::RequiresAllOf\")\n    Used in errors to indicate a set of requirements that all need to be available/enabled to allow a given operation.\n\n[RequiresOneOf](https://docs.rs/vulkano/latest/vulkano/struct.RequiresOneOf.html \"struct vulkano::RequiresOneOf\")\n    Used in errors to indicate a set of alternatives that needs to be available/enabled to allow a given operation.\n\n[StridedDeviceAddressRegion](https://docs.rs/vulkano/latest/vulkano/struct.StridedDeviceAddressRegion.html \"struct vulkano::StridedDeviceAddressRegion\")\n    Represents a region of device addresses with a stride.\n\n[ValidationError](https://docs.rs/vulkano/latest/vulkano/struct.ValidationError.html \"struct vulkano::ValidationError\")\n    The arguments or other context of a call to a Vulkan function were not valid.\n\n[Version](https://docs.rs/vulkano/latest/vulkano/struct.Version.html \"struct vulkano::Version\")\n    Represents an API version of Vulkan.\n## Enums[\u00a7](https://docs.rs/vulkano/latest/vulkano/#enums)\n\n[Requires](https://docs.rs/vulkano/latest/vulkano/enum.Requires.html \"enum vulkano::Requires\")\n    Something that needs to be supported or enabled to allow a particular operation.\n\n[Validated](https://docs.rs/vulkano/latest/vulkano/enum.Validated.html \"enum vulkano::Validated\")\n    A wrapper for error types of functions that can return validation errors.\n\n[VulkanError](https://docs.rs/vulkano/latest/vulkano/enum.VulkanError.html \"enum vulkano::VulkanError\")\n    An enumeration of runtime errors that can be returned by Vulkan.\n## Traits[\u00a7](https://docs.rs/vulkano/latest/vulkano/#traits)\n\n[Handle](https://docs.rs/vulkano/latest/vulkano/trait.Handle.html \"trait vulkano::Handle\")\n\n\n[SafeDeref](https://docs.rs/vulkano/latest/vulkano/trait.SafeDeref.html \"trait vulkano::SafeDeref\")\n    Alternative to the `Deref` trait. Contrary to `Deref`, must always return the same object.\n\n[VulkanObject](https://docs.rs/vulkano/latest/vulkano/trait.VulkanObject.html \"trait vulkano::VulkanObject\")\n    Gives access to the internal identifier of an object.\n## Type Aliases[\u00a7](https://docs.rs/vulkano/latest/vulkano/#types)\n\n[DeviceAddress](https://docs.rs/vulkano/latest/vulkano/type.DeviceAddress.html \"type vulkano::DeviceAddress\")\n    Represents an address (pointer) on a Vulkan device. <https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceAddress.html>\n\n[DeviceSize](https://docs.rs/vulkano/latest/vulkano/type.DeviceSize.html \"type vulkano::DeviceSize\")\n    Represents memory size and offset values on a Vulkan device. Analogous to the Rust `usize` type on the host. <https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceSize.html>\n\n[NonNullDeviceAddress](https://docs.rs/vulkano/latest/vulkano/type.NonNullDeviceAddress.html \"type vulkano::NonNullDeviceAddress\")\n    A [`DeviceAddress`](https://docs.rs/vulkano/latest/vulkano/type.DeviceAddress.html \"type vulkano::DeviceAddress\") that is known not to equal zero.\n\n[NonZeroDeviceSize](https://docs.rs/vulkano/latest/vulkano/type.NonZeroDeviceSize.html \"type vulkano::NonZeroDeviceSize\")\n    A [`DeviceSize`](https://docs.rs/vulkano/latest/vulkano/type.DeviceSize.html \"type vulkano::DeviceSize\") that is known not to equal zero.\n",
        "markdown_with_citations": "[](https://docs.rs/vulkano/latest/vulkano/all.html \"show sidebar\")\n# Crate vulkanoCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nSafe and rich Rust wrapper around the Vulkan API.\n## \u00a7\u27e84\u27e9Starting off with Vulkano\nThe steps for using Vulkan through Vulkano are in principle not any different from using the raw Vulkan API, but the details may be different for the sake of idiomaticity, safety and convenience.\n  1. Create a `VulkanLibrary`\u27e85\u27e9. This represents a Vulkan library on the system, which must be loaded before you can do anything with Vulkan.\n  2. Create an `Instance`\u27e86\u27e9. This is the API entry point, and represents an initialised Vulkan library.\n  3. If you intend to show graphics to the user on a window or a screen, create a `Surface`\u27e87\u27e9. A `Surface` is created from a window identifier or handle, that is specific to the display or windowing system being used. Vulkano uses `raw-window-handle` to abstract over the different windowing systems. Note that you have to make sure that the `raw-window-handle` that your windowing library uses is compatible with the `raw-window-handle` that vulkano uses. For example, if you use a `winit` version that uses a different version from the one vulkano uses, you can add one of the features\u27e88\u27e9 that starts with `rwh` to `winit`. Currently, vulkano is compatible with `rwh_06`.\n  4. Enumerate the physical devices\u27e89\u27e9 that are available on the `Instance`, and choose one that is suitable for your program. A `PhysicalDevice`\u27e810\u27e9 represents a Vulkan-capable device that is available on the system, such as a graphics card, a software implementation, etc.\n  5. Create a `Device`\u27e811\u27e9 and accompanying `Queue`\u27e812\u27e9s from the selected `PhysicalDevice`. The `Device` is the most important object of Vulkan, and you need one to create almost every other object. `Queue`s are created together with the `Device`, and are used to submit work to the device to make it do something.\n  6. If you created a `Surface` earlier, create a `Swapchain`\u27e813\u27e9. This object contains special images that correspond to the contents of the surface. Whenever you want to change the contents (show something new to the user), you must first _acquire_ one of these images from the swapchain, fill it with the new contents (by rendering, copying or any other means), and then _present_ it back to the swapchain. A swapchain can become outdated if the properties of the surface change, such as when the size of the window changes. It then becomes necessary to create a new swapchain.\n  7. Record a _command buffer_\u27e814\u27e9, containing commands that the device must execute. Then build the command buffer and submit it to a `Queue`.\n\n\nMany different operations can be recorded to a command buffer, such as _draw_ , _compute_ and _transfer_ operations. To do any of these things, you will need to create several other objects, depending on your specific needs. This includes:\n  * _Buffers_\u27e815\u27e9 store general-purpose data on memory accessible by the device. This can include mesh data (vertices, texture coordinates etc.), lighting information, matrices, and anything else you can think of.\n  * _Images_\u27e816\u27e9 store texel data, arranged in a grid of one or more dimensions. They can be used as textures, depth/stencil buffers, framebuffers and as part of a swapchain.\n  * _Pipelines_\u27e817\u27e9 describe operations on the device. They include one or more _shader_\u27e818\u27e9s, small programs that the device will execute as part of a pipeline. Pipelines come in several types:\n    * A `ComputePipeline`\u27e819\u27e9 describes how _dispatch_ commands are to be performed.\n    * A `GraphicsPipeline`\u27e820\u27e9 describes how _draw_ commands are to be performed.\n  * _Descriptor sets_\u27e821\u27e9 make buffers, images and other objects available to shaders. The arrangement of these resources in shaders is described by a `DescriptorSetLayout`\u27e822\u27e9. One or more of these layouts in turn forms a `PipelineLayout`\u27e823\u27e9, which is used when creating a pipeline object.\n  * For more complex, multi-stage draw operations, you can create a `RenderPass`\u27e824\u27e9 object. This object describes the stages, known as subpasses, that draw operations consist of, how they interact with one another, and which types of images are available in each subpass. You must also create a `Framebuffer`\u27e825\u27e9, which contains the image objects that are to be used in a render pass.\n\n\n## \u00a7\u27e826\u27e9`_unchecked` functions\nMany functions in Vulkano have two versions: the normal function, which is usually safe to call, and another function with `_unchecked` added onto the end of the name, which is unsafe to call. The `_unchecked` functions skip all validation checks, so they are usually more efficient, but you must ensure that you meet the validity/safety requirements of the function.\nFor all `_unchecked` functions, a call to the function is valid, if a call to the corresponding normal function with the same arguments would return without any error. This includes following all the valid usage requirements of the Vulkan specification, but may also include additional requirements specific to Vulkano. **All other usage of`_unchecked` functions may be undefined behavior.**\nBecause there are potentially many `_unchecked` functions, and because their name and operation can be straightforwardly understood based on the corresponding normal function, they are hidden from the Vulkano documentation by default. You can unhide them by enabling the `document_unchecked` cargo feature, and then generating the documentation with the command `cargo doc --open`.\n## \u00a7\u27e827\u27e9Cargo features\nFeature| Description  \n---|---  \n`macros`| Include reexports from `vulkano-macros`\u27e828\u27e9. Enabled by default.  \n`x11`| Support for X11 platforms. Enabled by default.  \n`document_unchecked`| Include `_unchecked` functions in the generated documentation.  \n`serde`| Enables (de)serialization of certain types using `serde`\u27e829\u27e9.  \n## Re-exports\u00a7\u27e830\u27e9\n\n`pub use library::LoadingError[](https://docs.rs/vulkano/latest/vulkano/library/enum.LoadingError.html \"enum vulkano::library::LoadingError\");`\n\n\n`pub use library::VulkanLibrary[](https://docs.rs/vulkano/latest/vulkano/library/struct.VulkanLibrary.html \"struct vulkano::library::VulkanLibrary\");`\n\n\n`pub use half[](https://docs.rs/half/2.6.0/x86_64-unknown-linux-gnu/half/index.html \"mod half\");`\n\n## Modules\u00a7\u27e831\u27e9\n\nacceleration_structure\u27e832\u27e9\n    An opaque data structure that is used to accelerate spatial queries on geometry data.\n\nbuffer\u27e815\u27e9\n    Location in memory that contains data.\n\ncommand_buffer\u27e814\u27e9\n    Recording commands to execute on the device.\n\ndeferred\u27e833\u27e9\n    Operations on the host that can be deferred.\n\ndescriptor_set\u27e821\u27e9\n    Bindings between shaders and the resources they access.\n\ndevice\u27e834\u27e9\n    Communication channel with a physical device.\n\ndisplay\u27e835\u27e9\n    Control and use of display devices (e.g. monitors).\n\nformat\u27e836\u27e9\n    All the formats supported by Vulkan.\n\nimage\u27e816\u27e9\n    Image storage (1D, 2D, 3D, arrays, etc.) and image views.\n\ninstance\u27e837\u27e9\n    API entry point.\n\nlibrary\u27e838\u27e9\n    Vulkan library loading system.\n\nmemory\u27e839\u27e9\n    Device memory allocation and memory pools.\n\npadded\u27e840\u27e9\n    A newtype wrapper for enforcing correct alignment for external types.\n\npipeline\u27e817\u27e9\n    Describes a processing operation that will execute on the Vulkan device.\n\nquery\u27e841\u27e9\n    Gather information about rendering, held in query pools.\n\nrange_set\u27e842\u27e9\n\n\nrender_pass\u27e843\u27e9\n    Description of the steps of the rendering process, and the images used as input or output.\n\nshader\u27e818\u27e9\n    A program that is run on the device.\n\nswapchain\u27e844\u27e9\n    Link between Vulkan and a window and/or the screen.\n\nsync\u27e845\u27e9\n    Synchronization on the GPU.\n## Macros\u00a7\u27e846\u27e9\n\nimpl_vertex\u27e847\u27e9Deprecated\n    Implements the `Vertex` trait on a struct.\n\nimpl_vertex_member\u27e848\u27e9\n\n\nordered_passes_renderpass\u27e849\u27e9\n    Builds a `RenderPass` object whose template parameter is of indeterminate type.\n\nsingle_pass_renderpass\u27e850\u27e9\n    Builds a `RenderPass` object whose template parameter is of indeterminate type.\n\nstatically_linked_vulkan_loader\u27e851\u27e9\n    Expression that returns a loader that assumes that Vulkan is linked to the executable you\u2019re compiling.\n\ntype_for_format\u27e852\u27e9\n    Converts a format enum identifier to a standard Rust type that is suitable for representing the format in a buffer or image.\n## Structs\u00a7\u27e853\u27e9\n\nExtensionProperties\u27e854\u27e9\n    Properties of an extension in the loader or a physical device.\n\nNonExhaustive\u27e855\u27e9\n    A helper type for non-exhaustive structs.\n\nPacked24_8\u27e856\u27e9\n    Holds 24 bits in the least significant bits of memory, and 8 bytes in the most significant bits of that memory, occupying a single `u32`\u27e857\u27e9 in total.\n\nRequiresAllOf\u27e858\u27e9\n    Used in errors to indicate a set of requirements that all need to be available/enabled to allow a given operation.\n\nRequiresOneOf\u27e859\u27e9\n    Used in errors to indicate a set of alternatives that needs to be available/enabled to allow a given operation.\n\nStridedDeviceAddressRegion\u27e860\u27e9\n    Represents a region of device addresses with a stride.\n\nValidationError\u27e861\u27e9\n    The arguments or other context of a call to a Vulkan function were not valid.\n\nVersion\u27e862\u27e9\n    Represents an API version of Vulkan.\n## Enums\u00a7\u27e863\u27e9\n\nRequires\u27e864\u27e9\n    Something that needs to be supported or enabled to allow a particular operation.\n\nValidated\u27e865\u27e9\n    A wrapper for error types of functions that can return validation errors.\n\nVulkanError\u27e866\u27e9\n    An enumeration of runtime errors that can be returned by Vulkan.\n## Traits\u00a7\u27e867\u27e9\n\nHandle\u27e868\u27e9\n\n\nSafeDeref\u27e869\u27e9\n    Alternative to the `Deref` trait. Contrary to `Deref`, must always return the same object.\n\nVulkanObject\u27e870\u27e9\n    Gives access to the internal identifier of an object.\n## Type Aliases\u00a7\u27e871\u27e9\n\nDeviceAddress\u27e872\u27e9\n    Represents an address (pointer) on a Vulkan device. <https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceAddress.html>\n\nDeviceSize\u27e873\u27e9\n    Represents memory size and offset values on a Vulkan device. Analogous to the Rust `usize` type on the host. <https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceSize.html>\n\nNonNullDeviceAddress\u27e874\u27e9\n    A `DeviceAddress`\u27e872\u27e9 that is known not to equal zero.\n\nNonZeroDeviceSize\u27e875\u27e9\n    A `DeviceSize`\u27e873\u27e9 that is known not to equal zero.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/vulkano/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/vulkano/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/vulkano/latest/src/vulkano/lib.rs.html#1-693: Source\n\u27e84\u27e9 https://docs.rs/vulkano/latest/vulkano/#starting-off-with-vulkano: \u00a7\n\u27e85\u27e9 https://docs.rs/vulkano/latest/vulkano/library/struct.VulkanLibrary.html: struct vulkano::library::VulkanLibrary - `VulkanLibrary`\n\u27e86\u27e9 https://docs.rs/vulkano/latest/vulkano/instance/struct.Instance.html: struct vulkano::instance::Instance - `Instance`\n\u27e87\u27e9 https://docs.rs/vulkano/latest/vulkano/swapchain/struct.Surface.html: struct vulkano::swapchain::Surface - `Surface`\n\u27e88\u27e9 https://docs.rs/crate/winit/latest/features: features\n\u27e89\u27e9 https://docs.rs/vulkano/latest/vulkano/instance/struct.Instance.html#method.enumerate_physical_devices: method vulkano::instance::Instance::enumerate_physical_devices - Enumerate the physical devices\n\u27e810\u27e9 https://docs.rs/vulkano/latest/vulkano/device/physical/struct.PhysicalDevice.html: struct vulkano::device::physical::PhysicalDevice - `PhysicalDevice`\n\u27e811\u27e9 https://docs.rs/vulkano/latest/vulkano/device/struct.Device.html: struct vulkano::device::Device - `Device`\n\u27e812\u27e9 https://docs.rs/vulkano/latest/vulkano/device/struct.Queue.html: struct vulkano::device::Queue - `Queue`\n\u27e813\u27e9 https://docs.rs/vulkano/latest/vulkano/swapchain/struct.Swapchain.html: struct vulkano::swapchain::Swapchain - `Swapchain`\n\u27e814\u27e9 https://docs.rs/vulkano/latest/vulkano/command_buffer/index.html: mod vulkano::command_buffer - _command buffer_\n\u27e815\u27e9 https://docs.rs/vulkano/latest/vulkano/buffer/index.html: mod vulkano::buffer - _Buffers_\n\u27e816\u27e9 https://docs.rs/vulkano/latest/vulkano/image/index.html: mod vulkano::image - _Images_\n\u27e817\u27e9 https://docs.rs/vulkano/latest/vulkano/pipeline/index.html: mod vulkano::pipeline - _Pipelines_\n\u27e818\u27e9 https://docs.rs/vulkano/latest/vulkano/shader/index.html: mod vulkano::shader - _shader_\n\u27e819\u27e9 https://docs.rs/vulkano/latest/vulkano/pipeline/compute/struct.ComputePipeline.html: struct vulkano::pipeline::compute::ComputePipeline - `ComputePipeline`\n\u27e820\u27e9 https://docs.rs/vulkano/latest/vulkano/pipeline/graphics/struct.GraphicsPipeline.html: struct vulkano::pipeline::graphics::GraphicsPipeline - `GraphicsPipeline`\n\u27e821\u27e9 https://docs.rs/vulkano/latest/vulkano/descriptor_set/index.html: mod vulkano::descriptor_set - _Descriptor sets_\n\u27e822\u27e9 https://docs.rs/vulkano/latest/vulkano/descriptor_set/layout/index.html: mod vulkano::descriptor_set::layout - `DescriptorSetLayout`\n\u27e823\u27e9 https://docs.rs/vulkano/latest/vulkano/pipeline/layout/index.html: mod vulkano::pipeline::layout - `PipelineLayout`\n\u27e824\u27e9 https://docs.rs/vulkano/latest/vulkano/render_pass/struct.RenderPass.html: struct vulkano::render_pass::RenderPass - `RenderPass`\n\u27e825\u27e9 https://docs.rs/vulkano/latest/vulkano/render_pass/struct.Framebuffer.html: struct vulkano::render_pass::Framebuffer - `Framebuffer`\n\u27e826\u27e9 https://docs.rs/vulkano/latest/vulkano/#_unchecked-functions: \u00a7\n\u27e827\u27e9 https://docs.rs/vulkano/latest/vulkano/#cargo-features: \u00a7\n\u27e828\u27e9 https://docs.rs/vulkano-macros/0.35.0/x86_64-unknown-linux-gnu/vulkano_macros/index.html: mod vulkano_macros - `vulkano-macros`\n\u27e829\u27e9 https://crates.io/crates/serde: `serde`\n\u27e830\u27e9 https://docs.rs/vulkano/latest/vulkano/#reexports: \u00a7\n\u27e831\u27e9 https://docs.rs/vulkano/latest/vulkano/#modules: \u00a7\n\u27e832\u27e9 https://docs.rs/vulkano/latest/vulkano/acceleration_structure/index.html: mod vulkano::acceleration_structure - acceleration_structure\n\u27e833\u27e9 https://docs.rs/vulkano/latest/vulkano/deferred/index.html: mod vulkano::deferred - deferred\n\u27e834\u27e9 https://docs.rs/vulkano/latest/vulkano/device/index.html: mod vulkano::device - device\n\u27e835\u27e9 https://docs.rs/vulkano/latest/vulkano/display/index.html: mod vulkano::display - display\n\u27e836\u27e9 https://docs.rs/vulkano/latest/vulkano/format/index.html: mod vulkano::format - format\n\u27e837\u27e9 https://docs.rs/vulkano/latest/vulkano/instance/index.html: mod vulkano::instance - instance\n\u27e838\u27e9 https://docs.rs/vulkano/latest/vulkano/library/index.html: mod vulkano::library - library\n\u27e839\u27e9 https://docs.rs/vulkano/latest/vulkano/memory/index.html: mod vulkano::memory - memory\n\u27e840\u27e9 https://docs.rs/vulkano/latest/vulkano/padded/index.html: mod vulkano::padded - padded\n\u27e841\u27e9 https://docs.rs/vulkano/latest/vulkano/query/index.html: mod vulkano::query - query\n\u27e842\u27e9 https://docs.rs/vulkano/latest/vulkano/range_set/index.html: mod vulkano::range_set - range_set\n\u27e843\u27e9 https://docs.rs/vulkano/latest/vulkano/render_pass/index.html: mod vulkano::render_pass - render_pass\n\u27e844\u27e9 https://docs.rs/vulkano/latest/vulkano/swapchain/index.html: mod vulkano::swapchain - swapchain\n\u27e845\u27e9 https://docs.rs/vulkano/latest/vulkano/sync/index.html: mod vulkano::sync - sync\n\u27e846\u27e9 https://docs.rs/vulkano/latest/vulkano/#macros: \u00a7\n\u27e847\u27e9 https://docs.rs/vulkano/latest/vulkano/macro.impl_vertex.html: macro vulkano::impl_vertex - impl_vertex\n\u27e848\u27e9 https://docs.rs/vulkano/latest/vulkano/macro.impl_vertex_member.html: macro vulkano::impl_vertex_member - impl_vertex_member\n\u27e849\u27e9 https://docs.rs/vulkano/latest/vulkano/macro.ordered_passes_renderpass.html: macro vulkano::ordered_passes_renderpass - ordered_passes_renderpass\n\u27e850\u27e9 https://docs.rs/vulkano/latest/vulkano/macro.single_pass_renderpass.html: macro vulkano::single_pass_renderpass - single_pass_renderpass\n\u27e851\u27e9 https://docs.rs/vulkano/latest/vulkano/macro.statically_linked_vulkan_loader.html: macro vulkano::statically_linked_vulkan_loader - statically_linked_vulkan_loader\n\u27e852\u27e9 https://docs.rs/vulkano/latest/vulkano/macro.type_for_format.html: macro vulkano::type_for_format - type_for_format\n\u27e853\u27e9 https://docs.rs/vulkano/latest/vulkano/#structs: \u00a7\n\u27e854\u27e9 https://docs.rs/vulkano/latest/vulkano/struct.ExtensionProperties.html: struct vulkano::ExtensionProperties - ExtensionProperties\n\u27e855\u27e9 https://docs.rs/vulkano/latest/vulkano/struct.NonExhaustive.html: struct vulkano::NonExhaustive - NonExhaustive\n\u27e856\u27e9 https://docs.rs/vulkano/latest/vulkano/struct.Packed24_8.html: struct vulkano::Packed24_8 - Packed24_8\n\u27e857\u27e9 https://doc.rust-lang.org/nightly/std/primitive.u32.html: primitive u32 - `u32`\n\u27e858\u27e9 https://docs.rs/vulkano/latest/vulkano/struct.RequiresAllOf.html: struct vulkano::RequiresAllOf - RequiresAllOf\n\u27e859\u27e9 https://docs.rs/vulkano/latest/vulkano/struct.RequiresOneOf.html: struct vulkano::RequiresOneOf - RequiresOneOf\n\u27e860\u27e9 https://docs.rs/vulkano/latest/vulkano/struct.StridedDeviceAddressRegion.html: struct vulkano::StridedDeviceAddressRegion - StridedDeviceAddressRegion\n\u27e861\u27e9 https://docs.rs/vulkano/latest/vulkano/struct.ValidationError.html: struct vulkano::ValidationError - ValidationError\n\u27e862\u27e9 https://docs.rs/vulkano/latest/vulkano/struct.Version.html: struct vulkano::Version - Version\n\u27e863\u27e9 https://docs.rs/vulkano/latest/vulkano/#enums: \u00a7\n\u27e864\u27e9 https://docs.rs/vulkano/latest/vulkano/enum.Requires.html: enum vulkano::Requires - Requires\n\u27e865\u27e9 https://docs.rs/vulkano/latest/vulkano/enum.Validated.html: enum vulkano::Validated - Validated\n\u27e866\u27e9 https://docs.rs/vulkano/latest/vulkano/enum.VulkanError.html: enum vulkano::VulkanError - VulkanError\n\u27e867\u27e9 https://docs.rs/vulkano/latest/vulkano/#traits: \u00a7\n\u27e868\u27e9 https://docs.rs/vulkano/latest/vulkano/trait.Handle.html: trait vulkano::Handle - Handle\n\u27e869\u27e9 https://docs.rs/vulkano/latest/vulkano/trait.SafeDeref.html: trait vulkano::SafeDeref - SafeDeref\n\u27e870\u27e9 https://docs.rs/vulkano/latest/vulkano/trait.VulkanObject.html: trait vulkano::VulkanObject - VulkanObject\n\u27e871\u27e9 https://docs.rs/vulkano/latest/vulkano/#types: \u00a7\n\u27e872\u27e9 https://docs.rs/vulkano/latest/vulkano/type.DeviceAddress.html: type vulkano::DeviceAddress - DeviceAddress\n\u27e873\u27e9 https://docs.rs/vulkano/latest/vulkano/type.DeviceSize.html: type vulkano::DeviceSize - DeviceSize\n\u27e874\u27e9 https://docs.rs/vulkano/latest/vulkano/type.NonNullDeviceAddress.html: type vulkano::NonNullDeviceAddress - NonNullDeviceAddress\n\u27e875\u27e9 https://docs.rs/vulkano/latest/vulkano/type.NonZeroDeviceSize.html: type vulkano::NonZeroDeviceSize - NonZeroDeviceSize\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `vulkano` crate is a safe and feature-rich Rust wrapper around the Vulkan API, designed for idiomatic, efficient, and convenient GPU programming. It provides abstractions for Vulkan objects like instances, devices, surfaces, swapchains, buffers, images, pipelines, and command buffers, enabling operations such as rendering, compute, and data transfer. Key features include support for descriptor sets, render passes, synchronization, and optional `_unchecked` functions for performance optimization.",
    "feature_summary": null,
    "use_case": "Unknown",
    "score": 7.5,
    "factual_counterfactual": "### Pair 1: Vulkan Library Initialization  \n\u2705 **Factual**: The `VulkanLibrary` struct in Vulkano represents a Vulkan library on the system and must be loaded before creating an `Instance` or performing any Vulkan-related operations.  \n\u274c **Counterfactual**: The `VulkanLibrary` struct automatically initializes an `Instance` without requiring explicit creation by the user.  \n\n---\n\n### Pair 2: Swapchain Compatibility  \n\u2705 **Factual**: Vulkano's `Swapchain` can become outdated if the properties of the `Surface` change, such as when the window is resized, requiring the creation of a new `Swapchain`.  \n\u274c **Counterfactual**: Vulkano's `Swapchain` automatically adjusts to changes in the `Surface` properties, such as window resizing, without needing to recreate the swapchain.  \n\n---\n\n### Pair 3: `_unchecked` Functions  \n\u2705 **Factual**: Vulkano provides `_unchecked` functions that skip validation checks for performance optimization, but their misuse can lead to undefined behavior. These functions are hidden from documentation unless the `document_unchecked` Cargo feature is enabled.  \n\u274c **Counterfactual**: `_unchecked` functions in Vulkano are safe to use without any risk of undefined behavior, as they automatically validate input arguments internally.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}