{
    "name": "rand_core",
    "version": "0.9.3",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/rand_core/latest/rand_core/all.html \"show sidebar\")\n# Crate rand_coreCopy item path\n[Settings](https://docs.rs/rand_core/latest/settings.html)\n[Help](https://docs.rs/rand_core/latest/help.html)\nSummary[Source](https://docs.rs/rand_core/latest/src/rand_core/lib.rs.html#10-771)\nExpand description\nRandom number generation traits\nThis crate is mainly of interest to crates publishing implementations of [`RngCore`](https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html \"trait rand_core::RngCore\"). Other users are encouraged to use the [`rand`](https://docs.rs/rand) crate instead which re-exports the main traits and error types.\n[`RngCore`](https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html \"trait rand_core::RngCore\") is the core trait implemented by algorithmic pseudo-random number generators and external random-number sources.\n[`SeedableRng`](https://docs.rs/rand_core/latest/rand_core/trait.SeedableRng.html \"trait rand_core::SeedableRng\") is an extension trait for construction from fixed seeds and other random number generators.\nThe [`impls`](https://docs.rs/rand_core/latest/rand_core/impls/index.html \"mod rand_core::impls\") and [`le`](https://docs.rs/rand_core/latest/rand_core/le/index.html \"mod rand_core::le\") sub-modules include a few small functions to assist implementation of [`RngCore`](https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html \"trait rand_core::RngCore\").\n## Modules[\u00a7](https://docs.rs/rand_core/latest/rand_core/#modules)\n\n[block](https://docs.rs/rand_core/latest/rand_core/block/index.html \"mod rand_core::block\")\n    The `BlockRngCore` trait and implementation helpers\n\n[impls](https://docs.rs/rand_core/latest/rand_core/impls/index.html \"mod rand_core::impls\")\n    Helper functions for implementing `RngCore` functions.\n\n[le](https://docs.rs/rand_core/latest/rand_core/le/index.html \"mod rand_core::le\")\n    Little-Endian utilities\n## Structs[\u00a7](https://docs.rs/rand_core/latest/rand_core/#structs)\n\n[OsError](https://docs.rs/rand_core/latest/rand_core/struct.OsError.html \"struct rand_core::OsError\")`os_rng`\n    Error type of [`OsRng`](https://docs.rs/rand_core/latest/rand_core/struct.OsRng.html \"struct rand_core::OsRng\")\n\n[OsRng](https://docs.rs/rand_core/latest/rand_core/struct.OsRng.html \"struct rand_core::OsRng\")`os_rng`\n    An interface over the operating-system\u2019s random data source\n\n[RngReadAdapter](https://docs.rs/rand_core/latest/rand_core/struct.RngReadAdapter.html \"struct rand_core::RngReadAdapter\")`std`\n    Adapter that enables reading through a [`io::Read`](https://doc.rust-lang.org/nightly/std/io/trait.Read.html \"trait std::io::Read\") from a [`RngCore`](https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html \"trait rand_core::RngCore\").\n\n[UnwrapErr](https://docs.rs/rand_core/latest/rand_core/struct.UnwrapErr.html \"struct rand_core::UnwrapErr\")\n    Wrapper around [`TryRngCore`](https://docs.rs/rand_core/latest/rand_core/trait.TryRngCore.html \"trait rand_core::TryRngCore\") implementation which implements [`RngCore`](https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html \"trait rand_core::RngCore\") by panicking on potential errors.\n\n[UnwrapMut](https://docs.rs/rand_core/latest/rand_core/struct.UnwrapMut.html \"struct rand_core::UnwrapMut\")\n    Wrapper around [`TryRngCore`](https://docs.rs/rand_core/latest/rand_core/trait.TryRngCore.html \"trait rand_core::TryRngCore\") implementation which implements [`RngCore`](https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html \"trait rand_core::RngCore\") by panicking on potential errors.\n## Traits[\u00a7](https://docs.rs/rand_core/latest/rand_core/#traits)\n\n[CryptoRng](https://docs.rs/rand_core/latest/rand_core/trait.CryptoRng.html \"trait rand_core::CryptoRng\")\n    A marker trait over [`RngCore`](https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html \"trait rand_core::RngCore\") for securely unpredictable RNGs\n\n[RngCore](https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html \"trait rand_core::RngCore\")\n    Implementation-level interface for RNGs\n\n[SeedableRng](https://docs.rs/rand_core/latest/rand_core/trait.SeedableRng.html \"trait rand_core::SeedableRng\")\n    A random number generator that can be explicitly seeded.\n\n[TryCryptoRng](https://docs.rs/rand_core/latest/rand_core/trait.TryCryptoRng.html \"trait rand_core::TryCryptoRng\")\n    A marker trait over [`TryRngCore`](https://docs.rs/rand_core/latest/rand_core/trait.TryRngCore.html \"trait rand_core::TryRngCore\") for securely unpredictable RNGs\n\n[TryRngCore](https://docs.rs/rand_core/latest/rand_core/trait.TryRngCore.html \"trait rand_core::TryRngCore\")\n    A potentially fallible variant of [`RngCore`](https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html \"trait rand_core::RngCore\")\n",
        "markdown_with_citations": "[](https://docs.rs/rand_core/latest/rand_core/all.html \"show sidebar\")\n# Crate rand_coreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRandom number generation traits\nThis crate is mainly of interest to crates publishing implementations of `RngCore`\u27e84\u27e9. Other users are encouraged to use the `rand`\u27e85\u27e9 crate instead which re-exports the main traits and error types.\n`RngCore`\u27e84\u27e9 is the core trait implemented by algorithmic pseudo-random number generators and external random-number sources.\n`SeedableRng`\u27e86\u27e9 is an extension trait for construction from fixed seeds and other random number generators.\nThe `impls`\u27e87\u27e9 and `le`\u27e88\u27e9 sub-modules include a few small functions to assist implementation of `RngCore`\u27e84\u27e9.\n## Modules\u00a7\u27e89\u27e9\n\nblock\u27e810\u27e9\n    The `BlockRngCore` trait and implementation helpers\n\nimpls\u27e87\u27e9\n    Helper functions for implementing `RngCore` functions.\n\nle\u27e88\u27e9\n    Little-Endian utilities\n## Structs\u00a7\u27e811\u27e9\n\nOsError\u27e812\u27e9`os_rng`\n    Error type of `OsRng`\u27e813\u27e9\n\nOsRng\u27e813\u27e9`os_rng`\n    An interface over the operating-system\u2019s random data source\n\nRngReadAdapter\u27e814\u27e9`std`\n    Adapter that enables reading through a `io::Read`\u27e815\u27e9 from a `RngCore`\u27e84\u27e9.\n\nUnwrapErr\u27e816\u27e9\n    Wrapper around `TryRngCore`\u27e817\u27e9 implementation which implements `RngCore`\u27e84\u27e9 by panicking on potential errors.\n\nUnwrapMut\u27e818\u27e9\n    Wrapper around `TryRngCore`\u27e817\u27e9 implementation which implements `RngCore`\u27e84\u27e9 by panicking on potential errors.\n## Traits\u00a7\u27e819\u27e9\n\nCryptoRng\u27e820\u27e9\n    A marker trait over `RngCore`\u27e84\u27e9 for securely unpredictable RNGs\n\nRngCore\u27e84\u27e9\n    Implementation-level interface for RNGs\n\nSeedableRng\u27e86\u27e9\n    A random number generator that can be explicitly seeded.\n\nTryCryptoRng\u27e821\u27e9\n    A marker trait over `TryRngCore`\u27e817\u27e9 for securely unpredictable RNGs\n\nTryRngCore\u27e817\u27e9\n    A potentially fallible variant of `RngCore`\u27e84\u27e9\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rand_core/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rand_core/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rand_core/latest/src/rand_core/lib.rs.html#10-771: Source\n\u27e84\u27e9 https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html: trait rand_core::RngCore - `RngCore`\n\u27e85\u27e9 https://docs.rs/rand: `rand`\n\u27e86\u27e9 https://docs.rs/rand_core/latest/rand_core/trait.SeedableRng.html: trait rand_core::SeedableRng - `SeedableRng`\n\u27e87\u27e9 https://docs.rs/rand_core/latest/rand_core/impls/index.html: mod rand_core::impls - `impls`\n\u27e88\u27e9 https://docs.rs/rand_core/latest/rand_core/le/index.html: mod rand_core::le - `le`\n\u27e89\u27e9 https://docs.rs/rand_core/latest/rand_core/#modules: \u00a7\n\u27e810\u27e9 https://docs.rs/rand_core/latest/rand_core/block/index.html: mod rand_core::block - block\n\u27e811\u27e9 https://docs.rs/rand_core/latest/rand_core/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/rand_core/latest/rand_core/struct.OsError.html: struct rand_core::OsError - OsError\n\u27e813\u27e9 https://docs.rs/rand_core/latest/rand_core/struct.OsRng.html: struct rand_core::OsRng - `OsRng`\n\u27e814\u27e9 https://docs.rs/rand_core/latest/rand_core/struct.RngReadAdapter.html: struct rand_core::RngReadAdapter - RngReadAdapter\n\u27e815\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Read.html: trait std::io::Read - `io::Read`\n\u27e816\u27e9 https://docs.rs/rand_core/latest/rand_core/struct.UnwrapErr.html: struct rand_core::UnwrapErr - UnwrapErr\n\u27e817\u27e9 https://docs.rs/rand_core/latest/rand_core/trait.TryRngCore.html: trait rand_core::TryRngCore - `TryRngCore`\n\u27e818\u27e9 https://docs.rs/rand_core/latest/rand_core/struct.UnwrapMut.html: struct rand_core::UnwrapMut - UnwrapMut\n\u27e819\u27e9 https://docs.rs/rand_core/latest/rand_core/#traits: \u00a7\n\u27e820\u27e9 https://docs.rs/rand_core/latest/rand_core/trait.CryptoRng.html: trait rand_core::CryptoRng - CryptoRng\n\u27e821\u27e9 https://docs.rs/rand_core/latest/rand_core/trait.TryCryptoRng.html: trait rand_core::TryCryptoRng - TryCryptoRng\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `rand_core` crate provides foundational traits and utilities for random number generation, primarily targeting developers implementing custom RNGs. Key features include the `RngCore` trait for algorithmic and external RNGs, the `SeedableRng` trait for seed-based RNG construction, and helper modules like `impls` and `le` for implementation support. It also offers structs like `OsRng` for OS-based randomness and marker traits like `CryptoRng` for secure RNGs.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1: Traits and Usage  \n\u2705 **Factual**: The `rand_core` crate provides the `RngCore` trait, which serves as the core interface for implementing random number generators, including pseudo-random and external RNGs.  \n\u274c **Counterfactual**: The `rand_core` crate is intended for end-users who need high-level random number generation utilities for common applications.  \n\n---\n\n### Pair 2: Seedable RNGs  \n\u2705 **Factual**: The `SeedableRng` trait in `rand_core` allows random number generators to be explicitly seeded, enabling reproducible sequences of random numbers.  \n\u274c **Counterfactual**: The `SeedableRng` trait automatically generates seeds internally and does not allow explicit seeding by the user.  \n\n---\n\n### Pair 3: Operating System RNG  \n\u2705 **Factual**: The `OsRng` struct provides an interface to the operating system\u2019s random data source, offering cryptographically secure random numbers.  \n\u274c **Counterfactual**: The `OsRng` struct is designed to generate pseudo-random numbers using algorithmic methods rather than relying on the operating system.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}