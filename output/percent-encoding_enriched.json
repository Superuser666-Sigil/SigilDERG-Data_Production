{
    "name": "percent-encoding",
    "version": "2.3.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/percent-encoding/latest/percent_encoding/all.html \"show sidebar\")\n# Crate percent_encodingCopy item path\n[Settings](https://docs.rs/percent-encoding/latest/settings.html)\n[Help](https://docs.rs/percent-encoding/latest/help.html)\nSummary[Source](https://docs.rs/percent-encoding/latest/src/percent_encoding/lib.rs.html#9-477)\nExpand description\nURLs use special characters to indicate the parts of the request. For example, a `?` question mark marks the end of a path and the start of a query string. In order for that character to exist inside a path, it needs to be encoded differently.\nPercent encoding replaces reserved characters with the `%` escape character followed by a byte value as two hexadecimal digits. For example, an ASCII space is replaced with `%20`.\nWhen encoding, the set of characters that can (and should, for readability) be left alone depends on the context. The `?` question mark mentioned above is not a separator when used literally inside of a query string, and therefore does not need to be encoded. The [`AsciiSet`](https://docs.rs/percent-encoding/latest/percent_encoding/struct.AsciiSet.html \"struct percent_encoding::AsciiSet\") parameter of [`percent_encode`](https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_encode.html \"fn percent_encoding::percent_encode\") and [`utf8_percent_encode`](https://docs.rs/percent-encoding/latest/percent_encoding/fn.utf8_percent_encode.html \"fn percent_encoding::utf8_percent_encode\") lets callers configure this.\nThis crate deliberately does not provide many different sets. Users should consider in what context the encoded string will be used, read relevant specifications, and define their own set. This is done by using the `add` method of an existing set.\n## [\u00a7](https://docs.rs/percent-encoding/latest/percent_encoding/#examples)Examples\n```\nuse percent_encoding::{utf8_percent_encode, AsciiSet, CONTROLS};\n/// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst FRAGMENT: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'<').add(b'>').add(b'`');\nassert_eq!(utf8_percent_encode(\"foo <bar>\", FRAGMENT).to_string(), \"foo%20%3Cbar%3E\");\n```\n\n## Structs[\u00a7](https://docs.rs/percent-encoding/latest/percent_encoding/#structs)\n\n[AsciiSet](https://docs.rs/percent-encoding/latest/percent_encoding/struct.AsciiSet.html \"struct percent_encoding::AsciiSet\")\n    Represents a set of characters or bytes in the ASCII range.\n\n[PercentDecode](https://docs.rs/percent-encoding/latest/percent_encoding/struct.PercentDecode.html \"struct percent_encoding::PercentDecode\")\n    The return type of [`percent_decode`](https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_decode.html \"fn percent_encoding::percent_decode\").\n\n[PercentEncode](https://docs.rs/percent-encoding/latest/percent_encoding/struct.PercentEncode.html \"struct percent_encoding::PercentEncode\")\n    The return type of [`percent_encode`](https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_encode.html \"fn percent_encoding::percent_encode\") and [`utf8_percent_encode`](https://docs.rs/percent-encoding/latest/percent_encoding/fn.utf8_percent_encode.html \"fn percent_encoding::utf8_percent_encode\").\n## Constants[\u00a7](https://docs.rs/percent-encoding/latest/percent_encoding/#constants)\n\n[CONTROLS](https://docs.rs/percent-encoding/latest/percent_encoding/constant.CONTROLS.html \"constant percent_encoding::CONTROLS\")\n    The set of 0x00 to 0x1F (C0 controls), and 0x7F (DEL).\n\n[NON_ALPHANUMERIC](https://docs.rs/percent-encoding/latest/percent_encoding/constant.NON_ALPHANUMERIC.html \"constant percent_encoding::NON_ALPHANUMERIC\")\n    Everything that is not an ASCII letter or digit.\n## Functions[\u00a7](https://docs.rs/percent-encoding/latest/percent_encoding/#functions)\n\n[percent_decode](https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_decode.html \"fn percent_encoding::percent_decode\")\n    Percent-decode the given bytes.\n\n[percent_decode_str](https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_decode_str.html \"fn percent_encoding::percent_decode_str\")\n    Percent-decode the given string.\n\n[percent_encode](https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_encode.html \"fn percent_encoding::percent_encode\")\n    Percent-encode the given bytes with the given set.\n\n[percent_encode_byte](https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_encode_byte.html \"fn percent_encoding::percent_encode_byte\")\n    Return the percent-encoding of the given byte.\n\n[utf8_percent_encode](https://docs.rs/percent-encoding/latest/percent_encoding/fn.utf8_percent_encode.html \"fn percent_encoding::utf8_percent_encode\")\n    Percent-encode the UTF-8 encoding of the given string.\n",
        "markdown_with_citations": "[](https://docs.rs/percent-encoding/latest/percent_encoding/all.html \"show sidebar\")\n# Crate percent_encodingCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nURLs use special characters to indicate the parts of the request. For example, a `?` question mark marks the end of a path and the start of a query string. In order for that character to exist inside a path, it needs to be encoded differently.\nPercent encoding replaces reserved characters with the `%` escape character followed by a byte value as two hexadecimal digits. For example, an ASCII space is replaced with `%20`.\nWhen encoding, the set of characters that can (and should, for readability) be left alone depends on the context. The `?` question mark mentioned above is not a separator when used literally inside of a query string, and therefore does not need to be encoded. The `AsciiSet`\u27e84\u27e9 parameter of `percent_encode`\u27e85\u27e9 and `utf8_percent_encode`\u27e86\u27e9 lets callers configure this.\nThis crate deliberately does not provide many different sets. Users should consider in what context the encoded string will be used, read relevant specifications, and define their own set. This is done by using the `add` method of an existing set.\n## \u00a7\u27e87\u27e9Examples\n```\nuse percent_encoding::{utf8_percent_encode, AsciiSet, CONTROLS};\n/// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst FRAGMENT: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'<').add(b'>').add(b'`');\nassert_eq!(utf8_percent_encode(\"foo <bar>\", FRAGMENT).to_string(), \"foo%20%3Cbar%3E\");\n```\n\n## Structs\u00a7\u27e88\u27e9\n\nAsciiSet\u27e84\u27e9\n    Represents a set of characters or bytes in the ASCII range.\n\nPercentDecode\u27e89\u27e9\n    The return type of `percent_decode`\u27e810\u27e9.\n\nPercentEncode\u27e811\u27e9\n    The return type of `percent_encode`\u27e85\u27e9 and `utf8_percent_encode`\u27e86\u27e9.\n## Constants\u00a7\u27e812\u27e9\n\nCONTROLS\u27e813\u27e9\n    The set of 0x00 to 0x1F (C0 controls), and 0x7F (DEL).\n\nNON_ALPHANUMERIC\u27e814\u27e9\n    Everything that is not an ASCII letter or digit.\n## Functions\u00a7\u27e815\u27e9\n\npercent_decode\u27e810\u27e9\n    Percent-decode the given bytes.\n\npercent_decode_str\u27e816\u27e9\n    Percent-decode the given string.\n\npercent_encode\u27e85\u27e9\n    Percent-encode the given bytes with the given set.\n\npercent_encode_byte\u27e817\u27e9\n    Return the percent-encoding of the given byte.\n\nutf8_percent_encode\u27e86\u27e9\n    Percent-encode the UTF-8 encoding of the given string.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/percent-encoding/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/percent-encoding/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/percent-encoding/latest/src/percent_encoding/lib.rs.html#9-477: Source\n\u27e84\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/struct.AsciiSet.html: struct percent_encoding::AsciiSet - `AsciiSet`\n\u27e85\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_encode.html: fn percent_encoding::percent_encode - `percent_encode`\n\u27e86\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/fn.utf8_percent_encode.html: fn percent_encoding::utf8_percent_encode - `utf8_percent_encode`\n\u27e87\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/#examples: \u00a7\n\u27e88\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/#structs: \u00a7\n\u27e89\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/struct.PercentDecode.html: struct percent_encoding::PercentDecode - PercentDecode\n\u27e810\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_decode.html: fn percent_encoding::percent_decode - `percent_decode`\n\u27e811\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/struct.PercentEncode.html: struct percent_encoding::PercentEncode - PercentEncode\n\u27e812\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/#constants: \u00a7\n\u27e813\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/constant.CONTROLS.html: constant percent_encoding::CONTROLS - CONTROLS\n\u27e814\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/constant.NON_ALPHANUMERIC.html: constant percent_encoding::NON_ALPHANUMERIC - NON_ALPHANUMERIC\n\u27e815\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/#functions: \u00a7\n\u27e816\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_decode_str.html: fn percent_encoding::percent_decode_str - percent_decode_str\n\u27e817\u27e9 https://docs.rs/percent-encoding/latest/percent_encoding/fn.percent_encode_byte.html: fn percent_encoding::percent_encode_byte - percent_encode_byte\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `percent-encoding` crate provides utilities for percent-encoding and decoding strings and bytes, commonly used in URLs to escape reserved characters. It allows customization of encoding rules via the `AsciiSet` structure, enabling users to define character sets based on specific contexts. Key features include functions for UTF-8 encoding (`utf8_percent_encode`), decoding (`percent_decode`), and predefined constants like `CONTROLS` and `NON_ALPHANUMERIC` for common use cases.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Encoding and Customization  \n\u2705 **Factual:** The `percent-encoding` crate allows users to define custom sets of ASCII characters for encoding by using the `AsciiSet` struct and its `add` method.  \n\u274c **Counterfactual:** The `percent-encoding` crate provides a predefined set of ASCII characters for all encoding contexts, making customization unnecessary.  \n\n---\n\n### Pair 2: Decoding Capabilities  \n\u2705 **Factual:** The `percent_decode` function in the crate can decode percent-encoded bytes back into their original form.  \n\u274c **Counterfactual:** The `percent-encoding` crate does not support decoding percent-encoded strings, and users must implement decoding manually.  \n\n---\n\n### Pair 3: UTF-8 Encoding Support  \n\u2705 **Factual:** The `utf8_percent_encode` function in the crate is specifically designed to percent-encode strings containing UTF-8 characters.  \n\u274c **Counterfactual:** The `percent-encoding` crate only supports encoding ASCII characters and cannot handle UTF-8 strings.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}