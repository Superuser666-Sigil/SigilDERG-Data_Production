{
    "name": "rouille",
    "version": "3.6.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/rouille/latest/rouille/all.html \"show sidebar\")\n# Crate rouilleCopy item path\n[Settings](https://docs.rs/rouille/latest/settings.html)\n[Help](https://docs.rs/rouille/latest/help.html)\nSummary[Source](https://docs.rs/rouille/latest/src/rouille/lib.rs.html#10-1206)\nExpand description\nThe rouille library is very easy to get started with.\nListening to a port is done by calling the [`start_server`](https://docs.rs/rouille/latest/rouille/fn.start_server.html) function:\n```\nuse rouille::Request;\nuse rouille::Response;\nrouille::start_server(\"0.0.0.0:80\", move |request| {\n  Response::text(\"hello world\")\n});\n```\n\nWhenever an HTTP request is received on the address passed as first parameter, the closure passed as second parameter is called. This closure must then return a [`Response`](https://docs.rs/rouille/latest/rouille/struct.Response.html) that will be sent back to the client.\nSee the documentation of [`start_server`](https://docs.rs/rouille/latest/rouille/fn.start_server.html) for more details.\n## [\u00a7](https://docs.rs/rouille/latest/rouille/#analyzing-the-request)Analyzing the request\nThe parameter that the closure receives is a [`Request`](https://docs.rs/rouille/latest/rouille/struct.Request.html) object that represents the request made by the client.\nThe `Request` object itself provides some getters, but most advanced functionalities are provided by other modules of this crate.\n  * In order to dispatch between various code depending on the URL, you can use the [`router!`](https://docs.rs/rouille/latest/rouille/macro.router.html) macro.\n  * In order to analyze the body of the request, like handling JSON input, form input, etc. you can take a look at [the `input` module](https://docs.rs/rouille/latest/rouille/input/index.html).\n\n\n## [\u00a7](https://docs.rs/rouille/latest/rouille/#returning-a-response)Returning a response\nOnce you analyzed the request, it is time to return a response by returning a [`Response`](https://docs.rs/rouille/latest/rouille/struct.Response.html) object.\nAll the members of `Response` are public, so you can customize it as you want. There are also several constructors that you build a basic `Response` which can then modify.\nIn order to serve static files, take a look at [the `match_assets` function](https://docs.rs/rouille/latest/rouille/fn.match_assets.html).\nIn order to apply content encodings (including compression such as gzip or deflate), see the [content_encoding module](https://docs.rs/rouille/latest/rouille/content_encoding/index.html), and specifically the [content_encoding::apply](https://docs.rs/rouille/latest/rouille/content_encoding/fn.apply.html) function.\n## Re-exports[\u00a7](https://docs.rs/rouille/latest/rouille/#reexports)\n\n`pub extern crate percent_encoding[](https://docs.rs/percent-encoding/2.3.1/x86_64-unknown-linux-gnu/percent_encoding/index.html \"mod percent_encoding\");`\n\n\n`pub extern crate url[](https://docs.rs/url/2.5.4/x86_64-unknown-linux-gnu/url/index.html \"mod url\");`\n\n## Modules[\u00a7](https://docs.rs/rouille/latest/rouille/#modules)\n\n[cgi](https://docs.rs/rouille/latest/rouille/cgi/index.html \"mod rouille::cgi\")\n    Allows you to let an external process handle the request through CGI.\n\n[content_encoding](https://docs.rs/rouille/latest/rouille/content_encoding/index.html \"mod rouille::content_encoding\")\n    Apply content encodings (such as gzip compression) to the response.\n\n[input](https://docs.rs/rouille/latest/rouille/input/index.html \"mod rouille::input\")\n    Analyze the request\u2019s headers and body.\n\n[proxy](https://docs.rs/rouille/latest/rouille/proxy/index.html \"mod rouille::proxy\")\n    Dispatch a request to another HTTP server.\n\n[session](https://docs.rs/rouille/latest/rouille/session/index.html \"mod rouille::session\")\n    Sessions handling.\n\n[websocket](https://docs.rs/rouille/latest/rouille/websocket/index.html \"mod rouille::websocket\")\n    Support for websockets.\n## Macros[\u00a7](https://docs.rs/rouille/latest/rouille/#macros)\n\n[accept](https://docs.rs/rouille/latest/rouille/macro.accept.html \"macro rouille::accept\")\n    Dispatches between blocks depending on the value of the `Accept` header.\n\n[assert_or_400](https://docs.rs/rouille/latest/rouille/macro.assert_or_400.html \"macro rouille::assert_or_400\")\n    This macro assumes that the current function returns a `Response`. If the condition you pass to the macro is false, then a 400 response is returned.\n\n[find_route](https://docs.rs/rouille/latest/rouille/macro.find_route.html \"macro rouille::find_route\")\n    Evaluates each parameter until one of them evaluates to something else than a 404 error code.\n\n[post_input](https://docs.rs/rouille/latest/rouille/macro.post_input.html \"macro rouille::post_input\")\n    Parse input from HTML forms. See [the `post` module](https://docs.rs/rouille/latest/rouille/input/post/index.html) for general documentation.\n\n[router](https://docs.rs/rouille/latest/rouille/macro.router.html \"macro rouille::router\")\n    Equivalent to a `match` expression but for routes.\n\n[try_or_400](https://docs.rs/rouille/latest/rouille/macro.try_or_400.html \"macro rouille::try_or_400\")\n    This macro assumes that the current function returns a `Response` and takes a `Result`. If the expression you pass to the macro is an error, then a 400 response is returned.\n\n[try_or_404](https://docs.rs/rouille/latest/rouille/macro.try_or_404.html \"macro rouille::try_or_404\")\n    This macro assumes that the current function returns a `Response` and takes a `Result`. If the expression you pass to the macro is an error, then a 404 response is returned.\n## Structs[\u00a7](https://docs.rs/rouille/latest/rouille/#structs)\n\n[HeadersIter](https://docs.rs/rouille/latest/rouille/struct.HeadersIter.html \"struct rouille::HeadersIter\")\n    Iterator to the list of headers in a request.\n\n[Request](https://docs.rs/rouille/latest/rouille/struct.Request.html \"struct rouille::Request\")\n    Represents a request that your handler must answer to.\n\n[RequestBody](https://docs.rs/rouille/latest/rouille/struct.RequestBody.html \"struct rouille::RequestBody\")\n    Gives access to the body of a request.\n\n[Response](https://docs.rs/rouille/latest/rouille/struct.Response.html \"struct rouille::Response\")\n    Contains a prototype of a response.\n\n[ResponseBody](https://docs.rs/rouille/latest/rouille/struct.ResponseBody.html \"struct rouille::ResponseBody\")\n    An opaque type that represents the body of a response.\n\n[Server](https://docs.rs/rouille/latest/rouille/struct.Server.html \"struct rouille::Server\")\n    A listening server.\n## Constants[\u00a7](https://docs.rs/rouille/latest/rouille/#constants)\n\n[DEFAULT_ENCODE_SET](https://docs.rs/rouille/latest/rouille/constant.DEFAULT_ENCODE_SET.html \"constant rouille::DEFAULT_ENCODE_SET\")\n\n## Traits[\u00a7](https://docs.rs/rouille/latest/rouille/#traits)\n\n[ReadWrite](https://docs.rs/rouille/latest/rouille/trait.ReadWrite.html \"trait rouille::ReadWrite\")\n    Dummy trait that regroups the `Read` and `Write` traits.\n\n[Upgrade](https://docs.rs/rouille/latest/rouille/trait.Upgrade.html \"trait rouille::Upgrade\")\n    Trait for objects that can take ownership of a raw connection to the client data.\n## Functions[\u00a7](https://docs.rs/rouille/latest/rouille/#functions)\n\n[extension_to_mime](https://docs.rs/rouille/latest/rouille/fn.extension_to_mime.html \"fn rouille::extension_to_mime\")\n    Returns the mime type of a file based on its extension, or `application/octet-stream` if the extension is unknown.\n\n[log](https://docs.rs/rouille/latest/rouille/fn.log.html \"fn rouille::log\")\n    Adds a log entry to the given writer for each request.\n\n[log_custom](https://docs.rs/rouille/latest/rouille/fn.log_custom.html \"fn rouille::log_custom\")\n    Calls custom logging functions after processing a request.\n\n[match_assets](https://docs.rs/rouille/latest/rouille/fn.match_assets.html \"fn rouille::match_assets\")\n    Searches inside `path` for a file that matches the given request. If a file is found, returns a `Response` that would serve this file if returned. If no file is found, a 404 response is returned instead.\n\n[start_server](https://docs.rs/rouille/latest/rouille/fn.start_server.html \"fn rouille::start_server\")\n    Starts a server and uses the given requests handler.\n\n[start_server_with_pool](https://docs.rs/rouille/latest/rouille/fn.start_server_with_pool.html \"fn rouille::start_server_with_pool\")\n    Identical to `start_server` but uses a `ThreadPool` of the given size.\n",
        "markdown_with_citations": "[](https://docs.rs/rouille/latest/rouille/all.html \"show sidebar\")\n# Crate rouilleCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThe rouille library is very easy to get started with.\nListening to a port is done by calling the `start_server`\u27e84\u27e9 function:\n```\nuse rouille::Request;\nuse rouille::Response;\nrouille::start_server(\"0.0.0.0:80\", move |request| {\n  Response::text(\"hello world\")\n});\n```\n\nWhenever an HTTP request is received on the address passed as first parameter, the closure passed as second parameter is called. This closure must then return a `Response`\u27e85\u27e9 that will be sent back to the client.\nSee the documentation of `start_server`\u27e84\u27e9 for more details.\n## \u00a7\u27e86\u27e9Analyzing the request\nThe parameter that the closure receives is a `Request`\u27e87\u27e9 object that represents the request made by the client.\nThe `Request` object itself provides some getters, but most advanced functionalities are provided by other modules of this crate.\n  * In order to dispatch between various code depending on the URL, you can use the `router!`\u27e88\u27e9 macro.\n  * In order to analyze the body of the request, like handling JSON input, form input, etc. you can take a look at the `input` module\u27e89\u27e9.\n\n\n## \u00a7\u27e810\u27e9Returning a response\nOnce you analyzed the request, it is time to return a response by returning a `Response`\u27e85\u27e9 object.\nAll the members of `Response` are public, so you can customize it as you want. There are also several constructors that you build a basic `Response` which can then modify.\nIn order to serve static files, take a look at the `match_assets` function\u27e811\u27e9.\nIn order to apply content encodings (including compression such as gzip or deflate), see the content_encoding module\u27e812\u27e9, and specifically the content_encoding::apply\u27e813\u27e9 function.\n## Re-exports\u00a7\u27e814\u27e9\n\n`pub extern crate percent_encoding[](https://docs.rs/percent-encoding/2.3.1/x86_64-unknown-linux-gnu/percent_encoding/index.html \"mod percent_encoding\");`\n\n\n`pub extern crate url[](https://docs.rs/url/2.5.4/x86_64-unknown-linux-gnu/url/index.html \"mod url\");`\n\n## Modules\u00a7\u27e815\u27e9\n\ncgi\u27e816\u27e9\n    Allows you to let an external process handle the request through CGI.\n\ncontent_encoding\u27e812\u27e9\n    Apply content encodings (such as gzip compression) to the response.\n\ninput\u27e89\u27e9\n    Analyze the request\u2019s headers and body.\n\nproxy\u27e817\u27e9\n    Dispatch a request to another HTTP server.\n\nsession\u27e818\u27e9\n    Sessions handling.\n\nwebsocket\u27e819\u27e9\n    Support for websockets.\n## Macros\u00a7\u27e820\u27e9\n\naccept\u27e821\u27e9\n    Dispatches between blocks depending on the value of the `Accept` header.\n\nassert_or_400\u27e822\u27e9\n    This macro assumes that the current function returns a `Response`. If the condition you pass to the macro is false, then a 400 response is returned.\n\nfind_route\u27e823\u27e9\n    Evaluates each parameter until one of them evaluates to something else than a 404 error code.\n\npost_input\u27e824\u27e9\n    Parse input from HTML forms. See the `post` module\u27e825\u27e9 for general documentation.\n\nrouter\u27e88\u27e9\n    Equivalent to a `match` expression but for routes.\n\ntry_or_400\u27e826\u27e9\n    This macro assumes that the current function returns a `Response` and takes a `Result`. If the expression you pass to the macro is an error, then a 400 response is returned.\n\ntry_or_404\u27e827\u27e9\n    This macro assumes that the current function returns a `Response` and takes a `Result`. If the expression you pass to the macro is an error, then a 404 response is returned.\n## Structs\u00a7\u27e828\u27e9\n\nHeadersIter\u27e829\u27e9\n    Iterator to the list of headers in a request.\n\nRequest\u27e87\u27e9\n    Represents a request that your handler must answer to.\n\nRequestBody\u27e830\u27e9\n    Gives access to the body of a request.\n\nResponse\u27e85\u27e9\n    Contains a prototype of a response.\n\nResponseBody\u27e831\u27e9\n    An opaque type that represents the body of a response.\n\nServer\u27e832\u27e9\n    A listening server.\n## Constants\u00a7\u27e833\u27e9\n\nDEFAULT_ENCODE_SET\u27e834\u27e9\n\n## Traits\u00a7\u27e835\u27e9\n\nReadWrite\u27e836\u27e9\n    Dummy trait that regroups the `Read` and `Write` traits.\n\nUpgrade\u27e837\u27e9\n    Trait for objects that can take ownership of a raw connection to the client data.\n## Functions\u00a7\u27e838\u27e9\n\nextension_to_mime\u27e839\u27e9\n    Returns the mime type of a file based on its extension, or `application/octet-stream` if the extension is unknown.\n\nlog\u27e840\u27e9\n    Adds a log entry to the given writer for each request.\n\nlog_custom\u27e841\u27e9\n    Calls custom logging functions after processing a request.\n\nmatch_assets\u27e811\u27e9\n    Searches inside `path` for a file that matches the given request. If a file is found, returns a `Response` that would serve this file if returned. If no file is found, a 404 response is returned instead.\n\nstart_server\u27e84\u27e9\n    Starts a server and uses the given requests handler.\n\nstart_server_with_pool\u27e842\u27e9\n    Identical to `start_server` but uses a `ThreadPool` of the given size.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rouille/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rouille/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rouille/latest/src/rouille/lib.rs.html#10-1206: Source\n\u27e84\u27e9 https://docs.rs/rouille/latest/rouille/fn.start_server.html: `start_server`\n\u27e85\u27e9 https://docs.rs/rouille/latest/rouille/struct.Response.html: `Response`\n\u27e86\u27e9 https://docs.rs/rouille/latest/rouille/#analyzing-the-request: \u00a7\n\u27e87\u27e9 https://docs.rs/rouille/latest/rouille/struct.Request.html: `Request`\n\u27e88\u27e9 https://docs.rs/rouille/latest/rouille/macro.router.html: `router!`\n\u27e89\u27e9 https://docs.rs/rouille/latest/rouille/input/index.html: the `input` module\n\u27e810\u27e9 https://docs.rs/rouille/latest/rouille/#returning-a-response: \u00a7\n\u27e811\u27e9 https://docs.rs/rouille/latest/rouille/fn.match_assets.html: the `match_assets` function\n\u27e812\u27e9 https://docs.rs/rouille/latest/rouille/content_encoding/index.html: content_encoding module\n\u27e813\u27e9 https://docs.rs/rouille/latest/rouille/content_encoding/fn.apply.html: content_encoding::apply\n\u27e814\u27e9 https://docs.rs/rouille/latest/rouille/#reexports: \u00a7\n\u27e815\u27e9 https://docs.rs/rouille/latest/rouille/#modules: \u00a7\n\u27e816\u27e9 https://docs.rs/rouille/latest/rouille/cgi/index.html: mod rouille::cgi - cgi\n\u27e817\u27e9 https://docs.rs/rouille/latest/rouille/proxy/index.html: mod rouille::proxy - proxy\n\u27e818\u27e9 https://docs.rs/rouille/latest/rouille/session/index.html: mod rouille::session - session\n\u27e819\u27e9 https://docs.rs/rouille/latest/rouille/websocket/index.html: mod rouille::websocket - websocket\n\u27e820\u27e9 https://docs.rs/rouille/latest/rouille/#macros: \u00a7\n\u27e821\u27e9 https://docs.rs/rouille/latest/rouille/macro.accept.html: macro rouille::accept - accept\n\u27e822\u27e9 https://docs.rs/rouille/latest/rouille/macro.assert_or_400.html: macro rouille::assert_or_400 - assert_or_400\n\u27e823\u27e9 https://docs.rs/rouille/latest/rouille/macro.find_route.html: macro rouille::find_route - find_route\n\u27e824\u27e9 https://docs.rs/rouille/latest/rouille/macro.post_input.html: macro rouille::post_input - post_input\n\u27e825\u27e9 https://docs.rs/rouille/latest/rouille/input/post/index.html: the `post` module\n\u27e826\u27e9 https://docs.rs/rouille/latest/rouille/macro.try_or_400.html: macro rouille::try_or_400 - try_or_400\n\u27e827\u27e9 https://docs.rs/rouille/latest/rouille/macro.try_or_404.html: macro rouille::try_or_404 - try_or_404\n\u27e828\u27e9 https://docs.rs/rouille/latest/rouille/#structs: \u00a7\n\u27e829\u27e9 https://docs.rs/rouille/latest/rouille/struct.HeadersIter.html: struct rouille::HeadersIter - HeadersIter\n\u27e830\u27e9 https://docs.rs/rouille/latest/rouille/struct.RequestBody.html: struct rouille::RequestBody - RequestBody\n\u27e831\u27e9 https://docs.rs/rouille/latest/rouille/struct.ResponseBody.html: struct rouille::ResponseBody - ResponseBody\n\u27e832\u27e9 https://docs.rs/rouille/latest/rouille/struct.Server.html: struct rouille::Server - Server\n\u27e833\u27e9 https://docs.rs/rouille/latest/rouille/#constants: \u00a7\n\u27e834\u27e9 https://docs.rs/rouille/latest/rouille/constant.DEFAULT_ENCODE_SET.html: constant rouille::DEFAULT_ENCODE_SET - DEFAULT_ENCODE_SET\n\u27e835\u27e9 https://docs.rs/rouille/latest/rouille/#traits: \u00a7\n\u27e836\u27e9 https://docs.rs/rouille/latest/rouille/trait.ReadWrite.html: trait rouille::ReadWrite - ReadWrite\n\u27e837\u27e9 https://docs.rs/rouille/latest/rouille/trait.Upgrade.html: trait rouille::Upgrade - Upgrade\n\u27e838\u27e9 https://docs.rs/rouille/latest/rouille/#functions: \u00a7\n\u27e839\u27e9 https://docs.rs/rouille/latest/rouille/fn.extension_to_mime.html: fn rouille::extension_to_mime - extension_to_mime\n\u27e840\u27e9 https://docs.rs/rouille/latest/rouille/fn.log.html: fn rouille::log - log\n\u27e841\u27e9 https://docs.rs/rouille/latest/rouille/fn.log_custom.html: fn rouille::log_custom - log_custom\n\u27e842\u27e9 https://docs.rs/rouille/latest/rouille/fn.start_server_with_pool.html: fn rouille::start_server_with_pool - start_server_with_pool\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `rouille` crate is a lightweight and easy-to-use web server framework for Rust, enabling developers to quickly set up HTTP servers with the `start_server` function. It provides tools for request analysis (`Request` struct, `input` module), routing (`router!` macro), and response handling (`Response` struct), including support for static file serving, content encoding, sessions, websockets, and proxying. Additional features include CGI integration, logging utilities, and macros for simplifying common tasks like route matching and error handling.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 4.0,
    "factual_counterfactual": "### Pair 1: Server Initialization  \n\u2705 Factual: The `rouille::start_server` function allows developers to start an HTTP server by specifying an address and a closure to handle incoming requests.  \n\u274c Counterfactual: The `rouille::start_server` function automatically configures HTTPS support, requiring no additional setup for SSL certificates.  \n\n### Pair 2: Request Analysis  \n\u2705 Factual: The `Request` object in Rouille provides methods to analyze HTTP requests, including access to headers, query parameters, and the request body.  \n\u274c Counterfactual: The `Request` object automatically parses and validates JSON payloads without requiring additional modules or libraries.  \n\n### Pair 3: Response Customization  \n\u2705 Factual: The `Response` struct in Rouille allows full customization of HTTP responses, including headers, status codes, and body content.  \n\u274c Counterfactual: The `Response` struct automatically applies gzip compression to all responses without requiring explicit use of the `content_encoding` module.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}