{
    "name": "hyper-tls",
    "version": "0.6.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/hyper-tls/latest/hyper_tls/all.html \"show sidebar\")\n# Crate hyper_tlsCopy item path\n[Settings](https://docs.rs/hyper-tls/latest/settings.html)\n[Help](https://docs.rs/hyper-tls/latest/help.html)\nSummary[Source](https://docs.rs/hyper-tls/latest/src/hyper_tls/lib.rs.html#1-41)\nExpand description\n## [\u00a7](https://docs.rs/hyper-tls/latest/hyper_tls/#hyper-tls)hyper-tls\nAn HTTPS connector to be used with [hyper](https://hyper.rs).\n### [\u00a7](https://docs.rs/hyper-tls/latest/hyper_tls/#example)Example\n```\nuse bytes::Bytes;\nuse http_body_util::Empty;\nuse hyper_tls::HttpsConnector;\nuse hyper_util::{client::legacy::Client, rt::TokioExecutor};\n#[tokio::main(flavor = \"current_thread\")]\nasync fn main() -> Result<(), Box<dyn std::error::Error>>{\n  let https = HttpsConnector::new();\n  let client = Client::builder(TokioExecutor::new()).build::<_, Empty<Bytes>>(https);\n  let res = client.get(\"https://hyper.rs\".parse()?).await?;\n  assert_eq!(res.status(), 200);\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/hyper-tls/latest/hyper_tls/#crate-features)Crate Features\n  * `alpn`: Enables `native-tls/alpn`, and if `h2` is negotiated, tells hyper.\n\n\n## Structs[\u00a7](https://docs.rs/hyper-tls/latest/hyper_tls/#structs)\n\n[HttpsConnecting](https://docs.rs/hyper-tls/latest/hyper_tls/struct.HttpsConnecting.html \"struct hyper_tls::HttpsConnecting\")\n    A Future representing work to connect to a URL, and a TLS handshake.\n\n[HttpsConnector](https://docs.rs/hyper-tls/latest/hyper_tls/struct.HttpsConnector.html \"struct hyper_tls::HttpsConnector\")\n    A Connector for the `https` scheme.\n\n[TlsStream](https://docs.rs/hyper-tls/latest/hyper_tls/struct.TlsStream.html \"struct hyper_tls::TlsStream\")\n    A wrapper around an underlying raw stream which implements the TLS or SSL protocol.\n## Enums[\u00a7](https://docs.rs/hyper-tls/latest/hyper_tls/#enums)\n\n[MaybeHttpsStream](https://docs.rs/hyper-tls/latest/hyper_tls/enum.MaybeHttpsStream.html \"enum hyper_tls::MaybeHttpsStream\")\n    A stream that might be protected with TLS.\n",
        "markdown_with_citations": "[](https://docs.rs/hyper-tls/latest/hyper_tls/all.html \"show sidebar\")\n# Crate hyper_tlsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9hyper-tls\nAn HTTPS connector to be used with hyper\u27e85\u27e9.\n### \u00a7\u27e86\u27e9Example\n```\nuse bytes::Bytes;\nuse http_body_util::Empty;\nuse hyper_tls::HttpsConnector;\nuse hyper_util::{client::legacy::Client, rt::TokioExecutor};\n#[tokio::main(flavor = \"current_thread\")]\nasync fn main() -> Result<(), Box<dyn std::error::Error>>{\n  let https = HttpsConnector::new();\n  let client = Client::builder(TokioExecutor::new()).build::<_, Empty<Bytes>>(https);\n  let res = client.get(\"https://hyper.rs\".parse()?).await?;\n  assert_eq!(res.status(), 200);\n  Ok(())\n}\n```\n\n### \u00a7\u27e87\u27e9Crate Features\n  * `alpn`: Enables `native-tls/alpn`, and if `h2` is negotiated, tells hyper.\n\n\n## Structs\u00a7\u27e88\u27e9\n\nHttpsConnecting\u27e89\u27e9\n    A Future representing work to connect to a URL, and a TLS handshake.\n\nHttpsConnector\u27e810\u27e9\n    A Connector for the `https` scheme.\n\nTlsStream\u27e811\u27e9\n    A wrapper around an underlying raw stream which implements the TLS or SSL protocol.\n## Enums\u00a7\u27e812\u27e9\n\nMaybeHttpsStream\u27e813\u27e9\n    A stream that might be protected with TLS.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/hyper-tls/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/hyper-tls/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/hyper-tls/latest/src/hyper_tls/lib.rs.html#1-41: Source\n\u27e84\u27e9 https://docs.rs/hyper-tls/latest/hyper_tls/#hyper-tls: \u00a7\n\u27e85\u27e9 https://hyper.rs: hyper\n\u27e86\u27e9 https://docs.rs/hyper-tls/latest/hyper_tls/#example: \u00a7\n\u27e87\u27e9 https://docs.rs/hyper-tls/latest/hyper_tls/#crate-features: \u00a7\n\u27e88\u27e9 https://docs.rs/hyper-tls/latest/hyper_tls/#structs: \u00a7\n\u27e89\u27e9 https://docs.rs/hyper-tls/latest/hyper_tls/struct.HttpsConnecting.html: struct hyper_tls::HttpsConnecting - HttpsConnecting\n\u27e810\u27e9 https://docs.rs/hyper-tls/latest/hyper_tls/struct.HttpsConnector.html: struct hyper_tls::HttpsConnector - HttpsConnector\n\u27e811\u27e9 https://docs.rs/hyper-tls/latest/hyper_tls/struct.TlsStream.html: struct hyper_tls::TlsStream - TlsStream\n\u27e812\u27e9 https://docs.rs/hyper-tls/latest/hyper_tls/#enums: \u00a7\n\u27e813\u27e9 https://docs.rs/hyper-tls/latest/hyper_tls/enum.MaybeHttpsStream.html: enum hyper_tls::MaybeHttpsStream - MaybeHttpsStream\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `hyper-tls` crate provides an HTTPS connector for use with the `hyper` HTTP library, enabling secure communication via TLS/SSL. It includes key components like `HttpsConnector` for HTTPS scheme handling, `TlsStream` for TLS-wrapped streams, and `MaybeHttpsStream` for conditional TLS protection. Additionally, it supports the `alpn` feature for negotiating HTTP/2 via `native-tls`.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: HTTPS Connector for Hyper\n\u2705 Factual: The `hyper-tls` crate provides an `HttpsConnector` that enables HTTPS support for the `hyper` HTTP client, allowing secure connections to HTTPS endpoints.  \n\u274c Counterfactual: The `hyper-tls` crate provides an HTTP/3 connector for `hyper`, enabling support for the latest HTTP/3 protocol.\n\n---\n\n### Pair 2: ALPN Feature\n\u2705 Factual: The `hyper-tls` crate includes an optional `alpn` feature, which enables `native-tls` support for Application-Layer Protocol Negotiation (ALPN) and facilitates HTTP/2 connections when negotiated.  \n\u274c Counterfactual: The `hyper-tls` crate's `alpn` feature is enabled by default and supports HTTP/3 connections out of the box.\n\n---\n\n### Pair 3: TLS Stream Wrapper\n\u2705 Factual: The `TlsStream` struct in `hyper-tls` acts as a wrapper around an underlying raw stream, implementing the TLS or SSL protocol for secure communication.  \n\u274c Counterfactual: The `TlsStream` struct in `hyper-tls` directly implements HTTP/2 framing and multiplexing, bypassing the need for `hyper`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}