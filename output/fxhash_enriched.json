{
    "name": "fxhash",
    "version": "0.2.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/fxhash/latest/fxhash/all.html \"show sidebar\")\n# Crate fxhashCopy item path\n[Settings](https://docs.rs/fxhash/latest/settings.html)\n[Help](https://docs.rs/fxhash/latest/help.html)\nSummary[Source](https://docs.rs/fxhash/latest/src/fxhash/lib.rs.html#11-324)\nExpand description\n## [\u00a7](https://docs.rs/fxhash/latest/fxhash/#fx-hash)Fx Hash\nThis hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n### [\u00a7](https://docs.rs/fxhash/latest/fxhash/#disclaimer)Disclaimer\nIt is **not a cryptographically secure** hash, so it is strongly recommended that you do not use this hash for cryptographic purproses. Furthermore, this hashing algorithm was not designed to prevent any attacks for determining collisions which could be used to potentially cause quadratic behavior in `HashMap`s. So it is not recommended to expose this hash in places where collissions or DDOS attacks may be a concern.\n## Structs[\u00a7](https://docs.rs/fxhash/latest/fxhash/#structs)\n\n[FxHasher](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher.html \"struct fxhash::FxHasher\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n\n[FxHasher32](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher32.html \"struct fxhash::FxHasher32\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n\n[FxHasher64](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher64.html \"struct fxhash::FxHasher64\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n## Functions[\u00a7](https://docs.rs/fxhash/latest/fxhash/#functions)\n\n[hash](https://docs.rs/fxhash/latest/fxhash/fn.hash.html \"fn fxhash::hash\")\n    A convenience function for when you need a quick usize hash.\n\n[hash32](https://docs.rs/fxhash/latest/fxhash/fn.hash32.html \"fn fxhash::hash32\")\n    A convenience function for when you need a quick 32-bit hash.\n\n[hash64](https://docs.rs/fxhash/latest/fxhash/fn.hash64.html \"fn fxhash::hash64\")\n    A convenience function for when you need a quick 64-bit hash.\n## Type Aliases[\u00a7](https://docs.rs/fxhash/latest/fxhash/#types)\n\n[FxBuildHasher](https://docs.rs/fxhash/latest/fxhash/type.FxBuildHasher.html \"type fxhash::FxBuildHasher\")\n    A builder for default Fx hashers.\n\n[FxHashMap](https://docs.rs/fxhash/latest/fxhash/type.FxHashMap.html \"type fxhash::FxHashMap\")\n    A `HashMap` using a default Fx hasher.\n\n[FxHashSet](https://docs.rs/fxhash/latest/fxhash/type.FxHashSet.html \"type fxhash::FxHashSet\")\n    A `HashSet` using a default Fx hasher.\n",
        "markdown_with_citations": "[](https://docs.rs/fxhash/latest/fxhash/all.html \"show sidebar\")\n# Crate fxhashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Fx Hash\nThis hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n### \u00a7\u27e85\u27e9Disclaimer\nIt is **not a cryptographically secure** hash, so it is strongly recommended that you do not use this hash for cryptographic purproses. Furthermore, this hashing algorithm was not designed to prevent any attacks for determining collisions which could be used to potentially cause quadratic behavior in `HashMap`s. So it is not recommended to expose this hash in places where collissions or DDOS attacks may be a concern.\n## Structs\u00a7\u27e86\u27e9\n\nFxHasher\u27e87\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n\nFxHasher32\u27e88\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n\nFxHasher64\u27e89\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n## Functions\u00a7\u27e810\u27e9\n\nhash\u27e811\u27e9\n    A convenience function for when you need a quick usize hash.\n\nhash32\u27e812\u27e9\n    A convenience function for when you need a quick 32-bit hash.\n\nhash64\u27e813\u27e9\n    A convenience function for when you need a quick 64-bit hash.\n## Type Aliases\u00a7\u27e814\u27e9\n\nFxBuildHasher\u27e815\u27e9\n    A builder for default Fx hashers.\n\nFxHashMap\u27e816\u27e9\n    A `HashMap` using a default Fx hasher.\n\nFxHashSet\u27e817\u27e9\n    A `HashSet` using a default Fx hasher.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/fxhash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/fxhash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/fxhash/latest/src/fxhash/lib.rs.html#11-324: Source\n\u27e84\u27e9 https://docs.rs/fxhash/latest/fxhash/#fx-hash: \u00a7\n\u27e85\u27e9 https://docs.rs/fxhash/latest/fxhash/#disclaimer: \u00a7\n\u27e86\u27e9 https://docs.rs/fxhash/latest/fxhash/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher.html: struct fxhash::FxHasher - FxHasher\n\u27e88\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher32.html: struct fxhash::FxHasher32 - FxHasher32\n\u27e89\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher64.html: struct fxhash::FxHasher64 - FxHasher64\n\u27e810\u27e9 https://docs.rs/fxhash/latest/fxhash/#functions: \u00a7\n\u27e811\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash.html: fn fxhash::hash - hash\n\u27e812\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash32.html: fn fxhash::hash32 - hash32\n\u27e813\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash64.html: fn fxhash::hash64 - hash64\n\u27e814\u27e9 https://docs.rs/fxhash/latest/fxhash/#types: \u00a7\n\u27e815\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxBuildHasher.html: type fxhash::FxBuildHasher - FxBuildHasher\n\u27e816\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxHashMap.html: type fxhash::FxHashMap - FxHashMap\n\u27e817\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxHashSet.html: type fxhash::FxHashSet - FxHashSet\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `fxhash` crate provides a fast, non-cryptographic hashing algorithm extracted from the Rust compiler, optimized for performance by hashing 8 bytes at a time on 64-bit platforms (or 4 bytes on others). It includes hashers (`FxHasher`, `FxHasher32`, `FxHasher64`), convenience functions (`hash`, `hash32`, `hash64`), and type aliases (`FxHashMap`, `FxHashSet`) for efficient hashing in collections. Note that it is not secure against collision attacks or suitable for cryptographic purposes.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Hashing Algorithm Performance\n\u2705 **Factual:** The `fxhash` crate uses a hashing algorithm optimized for hashing 8 bytes at a time on 64-bit platforms, making it significantly faster than the FNV algorithm, which processes one byte at a time.  \n\u274c **Counterfactual:** The `fxhash` crate uses a cryptographically secure hashing algorithm optimized for hashing 16 bytes at a time on 64-bit platforms.  \n\n---\n\n### Pair 2: Use in Cryptographic Applications\n\u2705 **Factual:** The `fxhash` crate explicitly states that its hashing algorithm is **not cryptographically secure** and should not be used for cryptographic purposes.  \n\u274c **Counterfactual:** The `fxhash` crate is designed to provide cryptographically secure hashing, making it suitable for secure applications such as password hashing.  \n\n---\n\n### Pair 3: Collision Resistance\n\u2705 **Factual:** The `fxhash` crate's hashing algorithm does not prevent collision attacks and is not recommended for use in scenarios where collision resistance is critical, such as exposed `HashMap`s vulnerable to DDOS attacks.  \n\u274c **Counterfactual:** The `fxhash` crate's hashing algorithm is designed to prevent collision attacks, making it ideal for high-security applications involving `HashMap`s.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}