{
    "name": "signature",
    "version": "3.0.0-rc.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/signature/latest/signature/all.html \"show sidebar\")\n# Crate signatureCopy item path\n[Settings](https://docs.rs/signature/latest/settings.html)\n[Help](https://docs.rs/signature/latest/help.html)\nSummary[Source](https://docs.rs/signature/latest/src/signature/lib.rs.html#1-158)\nExpand description\n## [\u00a7](https://docs.rs/signature/latest/signature/#rustcrypto-digital-signature-algorithms)[RustCrypto](https://github.com/RustCrypto/): Digital Signature Algorithms\n[![crate](https://buildstats.info/crate/signature)](https://crates.io/crates/signature) [![Docs](https://docs.rs/signature/badge.svg)](https://docs.rs/signature/) [![Build Status](https://github.com/RustCrypto/traits/actions/workflows/signature.yml/badge.svg)](https://github.com/RustCrypto/traits/actions/workflows/signature.yml) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.60+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260048-signatures)\nThis crate contains traits which provide generic, object-safe APIs for generating and verifying [digital signatures](https://en.wikipedia.org/wiki/Digital_signature).\nUsed by the [`dsa`](https://github.com/RustCrypto/signatures/tree/master/dsa), [`ecdsa`](https://github.com/RustCrypto/signatures/tree/master/ecdsa), [`ed25519`](https://github.com/RustCrypto/signatures/tree/master/ed25519), and [`rsa`](https://github.com/RustCrypto/RSA) crates maintained by the [RustCrypto](https://github.com/RustCrypto/) organization, as well as [`ed25519-dalek`](https://github.com/dalek-cryptography/ed25519-dalek).\n[Documentation](https://docs.rs/signature/)\n### [\u00a7](https://docs.rs/signature/latest/signature/#minimum-supported-rust-version)Minimum Supported Rust Version\nRust **1.60** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### [\u00a7](https://docs.rs/signature/latest/signature/#semver-policy)SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n  * The `derive` feature is stable and covered by SemVer\n  * The off-by-default features `digest` and `rand_core` are unstable features which are also considered exempt from SemVer as they correspond to pre-1.0 crates which are still subject to changes. Breaking changes to these features will, like MSRV, be done with a minor version bump.\n\n\n### [\u00a7](https://docs.rs/signature/latest/signature/#license)License\nLicensed under either of\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/signature/latest/signature/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n## [\u00a7](https://docs.rs/signature/latest/signature/#design)Design\nThis crate provides a common set of traits for signing and verifying digital signatures intended to be implemented by libraries which produce or contain implementations of digital signature algorithms, and used by libraries which want to produce or verify digital signatures while generically supporting any compatible backend.\n### [\u00a7](https://docs.rs/signature/latest/signature/#goals)Goals\nThe traits provided by this crate were designed with the following goals in mind:\n  * Provide an easy-to-use, misuse resistant API optimized for consumers (as opposed to implementers) of its traits.\n  * Support common type-safe wrappers around \u201cbag-of-bytes\u201d representations which can be directly parsed from or written to the \u201cwire\u201d.\n  * Expose a trait/object-safe API where signers/verifiers spanning multiple homogeneous provider implementations can be seamlessly leveraged together in the same logical \u201ckeyring\u201d so long as they operate on the same underlying signature type.\n  * Allow one provider type to potentially implement support (including being generic over) several signature types.\n  * Keep signature algorithm customizations / \u201cknobs\u201d out-of-band from the signing/verification APIs, ideally pushing such concerns into the type system so that algorithm mismatches are caught as type errors.\n  * Opaque error type which minimizes information leaked from cryptographic failures, as \u201crich\u201d error types in these scenarios are often a source of sidechannel information for attackers (e.g. [BB\u201906](https://en.wikipedia.org/wiki/Daniel_Bleichenbacher))\n\n\n### [\u00a7](https://docs.rs/signature/latest/signature/#implementation)Implementation\nTo accomplish the above goals, the [`Signer`](https://docs.rs/signature/latest/signature/trait.Signer.html \"trait signature::Signer\") and [`Verifier`](https://docs.rs/signature/latest/signature/trait.Verifier.html \"trait signature::Verifier\") traits provided by this are generic over a signature value, and use generic parameters rather than associated types. Notably, they use such a parameter for the return value, allowing it to be inferred by the type checker based on the desired signature type.\n### [\u00a7](https://docs.rs/signature/latest/signature/#alternatives-considered)Alternatives considered\nThis crate is based on many years of exploration of how to encapsulate digital signature systems in the most flexible, developer-friendly way. During that time many design alternatives were explored, tradeoffs compared, and ultimately the provided API was selected.\nThe tradeoffs made in this API have all been to improve simplicity, ergonomics, type safety, and flexibility for _consumers_ of the traits. At times, this has come at a cost to implementers. Below are some concerns we are cognizant of which were considered in the design of the API:\n  * \u201cBag-of-bytes\u201d serialization precludes signature providers from using their own internal representation of a signature, which can be helpful for many reasons (e.g. advanced signature system features like batch verification).\n  * Associated types, rather than generic parameters of traits, could allow more customization of the types used by a particular signature system, e.g. using custom error types.\n\n\nIt may still make sense to continue to explore the above tradeoffs, but with a _new_ set of traits which are intended to be implementor-friendly, rather than consumer friendly. The existing [`Signer`](https://docs.rs/signature/latest/signature/trait.Signer.html \"trait signature::Signer\") and [`Verifier`](https://docs.rs/signature/latest/signature/trait.Verifier.html \"trait signature::Verifier\") traits could have blanket impls for the \u201cprovider-friendly\u201d traits. However, as noted above this is a design space easily explored after stabilizing the consumer-oriented traits, and thus we consider these more important.\nThat said, below are some caveats of trying to design such traits, and why we haven\u2019t actively pursued them:\n  * Generics in the return position are already used to select which trait impl to use, i.e. for a particular signature algorithm/system. Avoiding a unified, concrete signature type adds another dimension to complexity and compiler errors, and in our experience makes them unsuitable for this sort of API. We believe such an API is the natural one for signature systems, reflecting the natural way they are written absent a trait.\n  * Associated types preclude multiple implementations of the same trait. These parameters are common in signature systems, notably ones which support different serializations of a signature (e.g. raw vs ASN.1).\n  * Digital signatures are almost always larger than the present 32-entry trait impl limitation on array types, which complicates bounds for these types (particularly things like `From` or `Borrow` bounds).\n\n\n### [\u00a7](https://docs.rs/signature/latest/signature/#unstable-features)Unstable features\nDespite being post-1.0, this crate includes off-by-default unstable optional features, each of which depends on a pre-1.0 crate.\nThese features are considered exempt from SemVer. See the [SemVer policy](https://docs.rs/signature/latest/signature/#semver-policy) above for more information.\nThe following unstable features are presently supported:\n  * `digest`: enables the [`DigestSigner`](https://docs.rs/signature/latest/signature/trait.DigestSigner.html \"trait signature::DigestSigner\") and [`DigestVerifier`](https://docs.rs/signature/latest/signature/trait.DigestVerifier.html \"trait signature::DigestVerifier\") traits which are based on the [`Digest`](https://docs.rs/digest/) trait from the [`digest`](https://docs.rs/digest/) crate. These traits are used for representing signature systems based on the [Fiat-Shamir heuristic](https://en.wikipedia.org/wiki/Fiat%E2%80%93Shamir_heuristic) which compute a random challenge value to sign by computing a cryptographically secure digest of the input message.\n  * `rand_core`: enables the [`RandomizedSigner`](https://docs.rs/signature/latest/signature/trait.RandomizedSigner.html \"trait signature::RandomizedSigner\") trait for signature systems which rely on a cryptographically secure random number generator for security.\n\n\nNOTE: the [`async-signature`](https://docs.rs/async-signature) crate contains experimental `async` support for [`Signer`](https://docs.rs/signature/latest/signature/trait.Signer.html \"trait signature::Signer\") and [`DigestSigner`](https://docs.rs/signature/latest/signature/trait.DigestSigner.html \"trait signature::DigestSigner\").\n## Re-exports[\u00a7](https://docs.rs/signature/latest/signature/#reexports)\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");``digest`\n\n\n`pub use rand_core[](https://docs.rs/rand_core/0.6.4/x86_64-unknown-linux-gnu/rand_core/index.html \"mod rand_core\");``rand_core`\n\n## Modules[\u00a7](https://docs.rs/signature/latest/signature/#modules)\n\n[hazmat](https://docs.rs/signature/latest/signature/hazmat/index.html \"mod signature::hazmat\")\n    Hazardous Materials: low-level APIs which can be insecure if misused.\n## Structs[\u00a7](https://docs.rs/signature/latest/signature/#structs)\n\n[Error](https://docs.rs/signature/latest/signature/struct.Error.html \"struct signature::Error\")\n    Signature errors.\n## Traits[\u00a7](https://docs.rs/signature/latest/signature/#traits)\n\n[DigestSigner](https://docs.rs/signature/latest/signature/trait.DigestSigner.html \"trait signature::DigestSigner\")`digest`\n    Sign the given prehashed message [`Digest`](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/digest/trait.Digest.html \"trait digest::digest::Digest\") using `Self`.\n\n[DigestVerifier](https://docs.rs/signature/latest/signature/trait.DigestVerifier.html \"trait signature::DigestVerifier\")`digest`\n    Verify the provided signature for the given prehashed message [`Digest`](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/digest/trait.Digest.html \"trait digest::digest::Digest\") is authentic.\n\n[Keypair](https://docs.rs/signature/latest/signature/trait.Keypair.html \"trait signature::Keypair\")\n    Signing keypair with an associated verifying key.\n\n[KeypairRef](https://docs.rs/signature/latest/signature/trait.KeypairRef.html \"trait signature::KeypairRef\")\n    Signing keypair with an associated verifying key.\n\n[PrehashSignature](https://docs.rs/signature/latest/signature/trait.PrehashSignature.html \"trait signature::PrehashSignature\")`digest`\n    Marker trait for `Signature` types computable as `\ud835\udc12(\ud835\udc07(\ud835\udc8e))` i.e. ones which prehash a message to be signed as `\ud835\udc07(\ud835\udc8e)`\n\n[RandomizedDigestSigner](https://docs.rs/signature/latest/signature/trait.RandomizedDigestSigner.html \"trait signature::RandomizedDigestSigner\")`digest` and `rand_core`\n    Combination of [`DigestSigner`](https://docs.rs/signature/latest/signature/trait.DigestSigner.html \"trait signature::DigestSigner\") and [`RandomizedSigner`](https://docs.rs/signature/latest/signature/trait.RandomizedSigner.html \"trait signature::RandomizedSigner\") with support for computing a signature over a digest which requires entropy from an RNG.\n\n[RandomizedSigner](https://docs.rs/signature/latest/signature/trait.RandomizedSigner.html \"trait signature::RandomizedSigner\")`rand_core`\n    Sign the given message using the provided external randomness source.\n\n[SignatureEncoding](https://docs.rs/signature/latest/signature/trait.SignatureEncoding.html \"trait signature::SignatureEncoding\")\n    Support for decoding/encoding signatures as bytes.\n\n[Signer](https://docs.rs/signature/latest/signature/trait.Signer.html \"trait signature::Signer\")\n    Sign the provided message bytestring using `Self` (e.g. a cryptographic key or connection to an HSM), returning a digital signature.\n\n[SignerMut](https://docs.rs/signature/latest/signature/trait.SignerMut.html \"trait signature::SignerMut\")\n    Sign the provided message bytestring using `&mut Self` (e.g. an evolving cryptographic key such as a stateful hash-based signature), returning a digital signature.\n\n[Verifier](https://docs.rs/signature/latest/signature/trait.Verifier.html \"trait signature::Verifier\")\n    Verify the provided message bytestring using `Self` (e.g. a public key)\n## Type Aliases[\u00a7](https://docs.rs/signature/latest/signature/#types)\n\n[Result](https://docs.rs/signature/latest/signature/type.Result.html \"type signature::Result\")\n    Result type.\n## Derive Macros[\u00a7](https://docs.rs/signature/latest/signature/#derives)\n\n[DigestSigner](https://docs.rs/signature/latest/signature/derive.DigestSigner.html \"derive signature::DigestSigner\")`derive` and `digest`\n    Derive the [`DigestSigner`](https://docs.rs/signature/latest/signature/trait.DigestSigner.html) trait for a type which impls [`PrehashSigner`](https://docs.rs/signature/latest/signature/hazmat/trait.PrehashSigner.html).\n\n[DigestVerifier](https://docs.rs/signature/latest/signature/derive.DigestVerifier.html \"derive signature::DigestVerifier\")`derive` and `digest`\n    Derive the [`DigestVerifier`](https://docs.rs/signature/latest/signature/trait.DigestVerifier.html) trait for a type which impls [`PrehashVerifier`](https://docs.rs/signature/latest/signature/hazmat/trait.PrehashVerifier.html).\n\n[Signer](https://docs.rs/signature/latest/signature/derive.Signer.html \"derive signature::Signer\")`derive`\n    Derive the [`Signer`](https://docs.rs/signature/latest/signature/derive.Signer.html \"derive signature::Signer\") trait for a type which impls [`DigestSigner`](https://docs.rs/signature/latest/signature/trait.DigestSigner.html).\n\n[Verifier](https://docs.rs/signature/latest/signature/derive.Verifier.html \"derive signature::Verifier\")`derive`\n    Derive the [`Verifier`](https://docs.rs/signature/latest/signature/derive.Verifier.html \"derive signature::Verifier\") trait for a type which impls [`DigestVerifier`](https://docs.rs/signature/latest/signature/trait.DigestVerifier.html).\n",
        "markdown_with_citations": "[](https://docs.rs/signature/latest/signature/all.html \"show sidebar\")\n# Crate signatureCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto\u27e85\u27e9: Digital Signature Algorithms\n![crate\u27e86\u27e9](https://crates.io/crates/signature) ![Docs\u27e87\u27e9](https://docs.rs/signature/) ![Build Status\u27e88\u27e9](https://github.com/RustCrypto/traits/actions/workflows/signature.yml) ![Apache2/MIT licensed\u27e89\u27e9] ![Rust Version\u27e810\u27e9] ![Project Chat\u27e811\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260048-signatures)\nThis crate contains traits which provide generic, object-safe APIs for generating and verifying digital signatures\u27e812\u27e9.\nUsed by the `dsa`\u27e813\u27e9, `ecdsa`\u27e814\u27e9, `ed25519`\u27e815\u27e9, and `rsa`\u27e816\u27e9 crates maintained by the RustCrypto\u27e85\u27e9 organization, as well as `ed25519-dalek`\u27e817\u27e9.\nDocumentation\u27e818\u27e9\n### \u00a7\u27e819\u27e9Minimum Supported Rust Version\nRust **1.60** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### \u00a7\u27e820\u27e9SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n  * The `derive` feature is stable and covered by SemVer\n  * The off-by-default features `digest` and `rand_core` are unstable features which are also considered exempt from SemVer as they correspond to pre-1.0 crates which are still subject to changes. Breaking changes to these features will, like MSRV, be done with a minor version bump.\n\n\n### \u00a7\u27e821\u27e9License\nLicensed under either of\n  * Apache License, Version 2.0\u27e822\u27e9\n  * MIT license\u27e823\u27e9\n\n\nat your option.\n#### \u00a7\u27e824\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n## \u00a7\u27e825\u27e9Design\nThis crate provides a common set of traits for signing and verifying digital signatures intended to be implemented by libraries which produce or contain implementations of digital signature algorithms, and used by libraries which want to produce or verify digital signatures while generically supporting any compatible backend.\n### \u00a7\u27e826\u27e9Goals\nThe traits provided by this crate were designed with the following goals in mind:\n  * Provide an easy-to-use, misuse resistant API optimized for consumers (as opposed to implementers) of its traits.\n  * Support common type-safe wrappers around \u201cbag-of-bytes\u201d representations which can be directly parsed from or written to the \u201cwire\u201d.\n  * Expose a trait/object-safe API where signers/verifiers spanning multiple homogeneous provider implementations can be seamlessly leveraged together in the same logical \u201ckeyring\u201d so long as they operate on the same underlying signature type.\n  * Allow one provider type to potentially implement support (including being generic over) several signature types.\n  * Keep signature algorithm customizations / \u201cknobs\u201d out-of-band from the signing/verification APIs, ideally pushing such concerns into the type system so that algorithm mismatches are caught as type errors.\n  * Opaque error type which minimizes information leaked from cryptographic failures, as \u201crich\u201d error types in these scenarios are often a source of sidechannel information for attackers (e.g. BB\u201906\u27e827\u27e9)\n\n\n### \u00a7\u27e828\u27e9Implementation\nTo accomplish the above goals, the `Signer`\u27e829\u27e9 and `Verifier`\u27e830\u27e9 traits provided by this are generic over a signature value, and use generic parameters rather than associated types. Notably, they use such a parameter for the return value, allowing it to be inferred by the type checker based on the desired signature type.\n### \u00a7\u27e831\u27e9Alternatives considered\nThis crate is based on many years of exploration of how to encapsulate digital signature systems in the most flexible, developer-friendly way. During that time many design alternatives were explored, tradeoffs compared, and ultimately the provided API was selected.\nThe tradeoffs made in this API have all been to improve simplicity, ergonomics, type safety, and flexibility for _consumers_ of the traits. At times, this has come at a cost to implementers. Below are some concerns we are cognizant of which were considered in the design of the API:\n  * \u201cBag-of-bytes\u201d serialization precludes signature providers from using their own internal representation of a signature, which can be helpful for many reasons (e.g. advanced signature system features like batch verification).\n  * Associated types, rather than generic parameters of traits, could allow more customization of the types used by a particular signature system, e.g. using custom error types.\n\n\nIt may still make sense to continue to explore the above tradeoffs, but with a _new_ set of traits which are intended to be implementor-friendly, rather than consumer friendly. The existing `Signer`\u27e829\u27e9 and `Verifier`\u27e830\u27e9 traits could have blanket impls for the \u201cprovider-friendly\u201d traits. However, as noted above this is a design space easily explored after stabilizing the consumer-oriented traits, and thus we consider these more important.\nThat said, below are some caveats of trying to design such traits, and why we haven\u2019t actively pursued them:\n  * Generics in the return position are already used to select which trait impl to use, i.e. for a particular signature algorithm/system. Avoiding a unified, concrete signature type adds another dimension to complexity and compiler errors, and in our experience makes them unsuitable for this sort of API. We believe such an API is the natural one for signature systems, reflecting the natural way they are written absent a trait.\n  * Associated types preclude multiple implementations of the same trait. These parameters are common in signature systems, notably ones which support different serializations of a signature (e.g. raw vs ASN.1).\n  * Digital signatures are almost always larger than the present 32-entry trait impl limitation on array types, which complicates bounds for these types (particularly things like `From` or `Borrow` bounds).\n\n\n### \u00a7\u27e832\u27e9Unstable features\nDespite being post-1.0, this crate includes off-by-default unstable optional features, each of which depends on a pre-1.0 crate.\nThese features are considered exempt from SemVer. See the SemVer policy\u27e820\u27e9 above for more information.\nThe following unstable features are presently supported:\n  * `digest`: enables the `DigestSigner`\u27e833\u27e9 and `DigestVerifier`\u27e834\u27e9 traits which are based on the `Digest`\u27e835\u27e9 trait from the `digest`\u27e835\u27e9 crate. These traits are used for representing signature systems based on the Fiat-Shamir heuristic\u27e836\u27e9 which compute a random challenge value to sign by computing a cryptographically secure digest of the input message.\n  * `rand_core`: enables the `RandomizedSigner`\u27e837\u27e9 trait for signature systems which rely on a cryptographically secure random number generator for security.\n\n\nNOTE: the `async-signature`\u27e838\u27e9 crate contains experimental `async` support for `Signer`\u27e829\u27e9 and `DigestSigner`\u27e833\u27e9.\n## Re-exports\u00a7\u27e839\u27e9\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");``digest`\n\n\n`pub use rand_core[](https://docs.rs/rand_core/0.6.4/x86_64-unknown-linux-gnu/rand_core/index.html \"mod rand_core\");``rand_core`\n\n## Modules\u00a7\u27e840\u27e9\n\nhazmat\u27e841\u27e9\n    Hazardous Materials: low-level APIs which can be insecure if misused.\n## Structs\u00a7\u27e842\u27e9\n\nError\u27e843\u27e9\n    Signature errors.\n## Traits\u00a7\u27e844\u27e9\n\nDigestSigner\u27e833\u27e9`digest`\n    Sign the given prehashed message `Digest`\u27e845\u27e9 using `Self`.\n\nDigestVerifier\u27e834\u27e9`digest`\n    Verify the provided signature for the given prehashed message `Digest`\u27e845\u27e9 is authentic.\n\nKeypair\u27e846\u27e9\n    Signing keypair with an associated verifying key.\n\nKeypairRef\u27e847\u27e9\n    Signing keypair with an associated verifying key.\n\nPrehashSignature\u27e848\u27e9`digest`\n    Marker trait for `Signature` types computable as `\ud835\udc12(\ud835\udc07(\ud835\udc8e))` i.e. ones which prehash a message to be signed as `\ud835\udc07(\ud835\udc8e)`\n\nRandomizedDigestSigner\u27e849\u27e9`digest` and `rand_core`\n    Combination of `DigestSigner`\u27e833\u27e9 and `RandomizedSigner`\u27e837\u27e9 with support for computing a signature over a digest which requires entropy from an RNG.\n\nRandomizedSigner\u27e837\u27e9`rand_core`\n    Sign the given message using the provided external randomness source.\n\nSignatureEncoding\u27e850\u27e9\n    Support for decoding/encoding signatures as bytes.\n\nSigner\u27e829\u27e9\n    Sign the provided message bytestring using `Self` (e.g. a cryptographic key or connection to an HSM), returning a digital signature.\n\nSignerMut\u27e851\u27e9\n    Sign the provided message bytestring using `&mut Self` (e.g. an evolving cryptographic key such as a stateful hash-based signature), returning a digital signature.\n\nVerifier\u27e830\u27e9\n    Verify the provided message bytestring using `Self` (e.g. a public key)\n## Type Aliases\u00a7\u27e852\u27e9\n\nResult\u27e853\u27e9\n    Result type.\n## Derive Macros\u00a7\u27e854\u27e9\n\nDigestSigner\u27e855\u27e9`derive` and `digest`\n    Derive the `DigestSigner`\u27e833\u27e9 trait for a type which impls `PrehashSigner`\u27e856\u27e9.\n\nDigestVerifier\u27e857\u27e9`derive` and `digest`\n    Derive the `DigestVerifier`\u27e834\u27e9 trait for a type which impls `PrehashVerifier`\u27e858\u27e9.\n\nSigner\u27e859\u27e9`derive`\n    Derive the `Signer`\u27e859\u27e9 trait for a type which impls `DigestSigner`\u27e833\u27e9.\n\nVerifier\u27e860\u27e9`derive`\n    Derive the `Verifier`\u27e860\u27e9 trait for a type which impls `DigestVerifier`\u27e834\u27e9.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/signature/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/signature/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/signature/latest/src/signature/lib.rs.html#1-158: Source\n\u27e84\u27e9 https://docs.rs/signature/latest/signature/#rustcrypto-digital-signature-algorithms: \u00a7\n\u27e85\u27e9 https://github.com/RustCrypto/: RustCrypto\n\u27e86\u27e9 https://buildstats.info/crate/signature: ![crate\n\u27e87\u27e9 https://docs.rs/signature/badge.svg: ![Docs\n\u27e88\u27e9 https://github.com/RustCrypto/traits/actions/workflows/signature.yml/badge.svg: ![Build Status\n\u27e89\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e810\u27e9 https://img.shields.io/badge/rustc-1.60+-blue.svg: Rust Version\n\u27e811\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e812\u27e9 https://en.wikipedia.org/wiki/Digital_signature: digital signatures\n\u27e813\u27e9 https://github.com/RustCrypto/signatures/tree/master/dsa: `dsa`\n\u27e814\u27e9 https://github.com/RustCrypto/signatures/tree/master/ecdsa: `ecdsa`\n\u27e815\u27e9 https://github.com/RustCrypto/signatures/tree/master/ed25519: `ed25519`\n\u27e816\u27e9 https://github.com/RustCrypto/RSA: `rsa`\n\u27e817\u27e9 https://github.com/dalek-cryptography/ed25519-dalek: `ed25519-dalek`\n\u27e818\u27e9 https://docs.rs/signature/: Documentation\n\u27e819\u27e9 https://docs.rs/signature/latest/signature/#minimum-supported-rust-version: \u00a7\n\u27e820\u27e9 https://docs.rs/signature/latest/signature/#semver-policy: \u00a7\n\u27e821\u27e9 https://docs.rs/signature/latest/signature/#license: \u00a7\n\u27e822\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e823\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e824\u27e9 https://docs.rs/signature/latest/signature/#contribution: \u00a7\n\u27e825\u27e9 https://docs.rs/signature/latest/signature/#design: \u00a7\n\u27e826\u27e9 https://docs.rs/signature/latest/signature/#goals: \u00a7\n\u27e827\u27e9 https://en.wikipedia.org/wiki/Daniel_Bleichenbacher: BB\u201906\n\u27e828\u27e9 https://docs.rs/signature/latest/signature/#implementation: \u00a7\n\u27e829\u27e9 https://docs.rs/signature/latest/signature/trait.Signer.html: trait signature::Signer - `Signer`\n\u27e830\u27e9 https://docs.rs/signature/latest/signature/trait.Verifier.html: trait signature::Verifier - `Verifier`\n\u27e831\u27e9 https://docs.rs/signature/latest/signature/#alternatives-considered: \u00a7\n\u27e832\u27e9 https://docs.rs/signature/latest/signature/#unstable-features: \u00a7\n\u27e833\u27e9 https://docs.rs/signature/latest/signature/trait.DigestSigner.html: trait signature::DigestSigner - `DigestSigner`\n\u27e834\u27e9 https://docs.rs/signature/latest/signature/trait.DigestVerifier.html: trait signature::DigestVerifier - `DigestVerifier`\n\u27e835\u27e9 https://docs.rs/digest/: `Digest`\n\u27e836\u27e9 https://en.wikipedia.org/wiki/Fiat%E2%80%93Shamir_heuristic: Fiat-Shamir heuristic\n\u27e837\u27e9 https://docs.rs/signature/latest/signature/trait.RandomizedSigner.html: trait signature::RandomizedSigner - `RandomizedSigner`\n\u27e838\u27e9 https://docs.rs/async-signature: `async-signature`\n\u27e839\u27e9 https://docs.rs/signature/latest/signature/#reexports: \u00a7\n\u27e840\u27e9 https://docs.rs/signature/latest/signature/#modules: \u00a7\n\u27e841\u27e9 https://docs.rs/signature/latest/signature/hazmat/index.html: mod signature::hazmat - hazmat\n\u27e842\u27e9 https://docs.rs/signature/latest/signature/#structs: \u00a7\n\u27e843\u27e9 https://docs.rs/signature/latest/signature/struct.Error.html: struct signature::Error - Error\n\u27e844\u27e9 https://docs.rs/signature/latest/signature/#traits: \u00a7\n\u27e845\u27e9 https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/digest/trait.Digest.html: trait digest::digest::Digest - `Digest`\n\u27e846\u27e9 https://docs.rs/signature/latest/signature/trait.Keypair.html: trait signature::Keypair - Keypair\n\u27e847\u27e9 https://docs.rs/signature/latest/signature/trait.KeypairRef.html: trait signature::KeypairRef - KeypairRef\n\u27e848\u27e9 https://docs.rs/signature/latest/signature/trait.PrehashSignature.html: trait signature::PrehashSignature - PrehashSignature\n\u27e849\u27e9 https://docs.rs/signature/latest/signature/trait.RandomizedDigestSigner.html: trait signature::RandomizedDigestSigner - RandomizedDigestSigner\n\u27e850\u27e9 https://docs.rs/signature/latest/signature/trait.SignatureEncoding.html: trait signature::SignatureEncoding - SignatureEncoding\n\u27e851\u27e9 https://docs.rs/signature/latest/signature/trait.SignerMut.html: trait signature::SignerMut - SignerMut\n\u27e852\u27e9 https://docs.rs/signature/latest/signature/#types: \u00a7\n\u27e853\u27e9 https://docs.rs/signature/latest/signature/type.Result.html: type signature::Result - Result\n\u27e854\u27e9 https://docs.rs/signature/latest/signature/#derives: \u00a7\n\u27e855\u27e9 https://docs.rs/signature/latest/signature/derive.DigestSigner.html: derive signature::DigestSigner - DigestSigner\n\u27e856\u27e9 https://docs.rs/signature/latest/signature/hazmat/trait.PrehashSigner.html: `PrehashSigner`\n\u27e857\u27e9 https://docs.rs/signature/latest/signature/derive.DigestVerifier.html: derive signature::DigestVerifier - DigestVerifier\n\u27e858\u27e9 https://docs.rs/signature/latest/signature/hazmat/trait.PrehashVerifier.html: `PrehashVerifier`\n\u27e859\u27e9 https://docs.rs/signature/latest/signature/derive.Signer.html: derive signature::Signer - Signer\n\u27e860\u27e9 https://docs.rs/signature/latest/signature/derive.Verifier.html: derive signature::Verifier - Verifier\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `signature` crate provides generic, object-safe traits for signing and verifying digital signatures, supporting various algorithms like DSA, ECDSA, Ed25519, and RSA. It emphasizes type safety, misuse resistance, and flexibility for consumers, with features like opaque error handling, type-safe wrappers for serialization, and compatibility across multiple backend implementations. Optional unstable features include support for prehashed signatures (`digest`) and randomized signing (`rand_core`).",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 6.5,
    "factual_counterfactual": "### Pair 1: Traits for Digital Signature Operations  \n\u2705 **Factual:** The `signature` crate provides the `Signer` and `Verifier` traits, which are generic over a signature value and enable object-safe APIs for signing and verifying digital signatures.  \n\u274c **Counterfactual:** The `signature` crate mandates the use of associated types for the `Signer` and `Verifier` traits, limiting flexibility in signature type inference.  \n\n---\n\n### Pair 2: Minimum Supported Rust Version  \n\u2705 **Factual:** The `signature` crate requires Rust version 1.60 or higher, and changes to the minimum supported Rust version (MSRV) are made with a minor version bump.  \n\u274c **Counterfactual:** The `signature` crate is compatible with all Rust versions starting from 1.0, with no restrictions on MSRV updates.  \n\n---\n\n### Pair 3: Unstable Features and SemVer Policy  \n\u2705 **Factual:** The `digest` and `rand_core` features of the `signature` crate are unstable and exempt from SemVer guarantees, as they depend on pre-1.0 crates.  \n\u274c **Counterfactual:** All features of the `signature` crate, including `digest` and `rand_core`, are stable and guaranteed by SemVer, regardless of their dependencies.  \n\n---",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}