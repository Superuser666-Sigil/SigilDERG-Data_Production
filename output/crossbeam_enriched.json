{
    "name": "crossbeam",
    "version": "0.8.4",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/crossbeam/latest/crossbeam/all.html \"show sidebar\")\n# Crate crossbeamCopy item path\n[Settings](https://docs.rs/crossbeam/latest/settings.html)\n[Help](https://docs.rs/crossbeam/latest/help.html)\nSummary[Source](https://docs.rs/crossbeam/latest/src/crossbeam/lib.rs.html#1-81)\nExpand description\nTools for concurrent programming.\n### [\u00a7](https://docs.rs/crossbeam/latest/crossbeam/#atomics)Atomics\n  * [`AtomicCell`](https://docs.rs/crossbeam/latest/crossbeam/atomic/struct.AtomicCell.html \"struct crossbeam::atomic::AtomicCell\"), a thread-safe mutable memory location.\n  * [`AtomicConsume`](https://docs.rs/crossbeam/latest/crossbeam/atomic/trait.AtomicConsume.html \"trait crossbeam::atomic::AtomicConsume\"), for reading from primitive atomic types with \u201cconsume\u201d ordering.\n\n\n### [\u00a7](https://docs.rs/crossbeam/latest/crossbeam/#data-structures)Data structures\n  * [`deque`](https://docs.rs/crossbeam/latest/crossbeam/deque/index.html \"mod crossbeam::deque\"), work-stealing deques for building task schedulers.\n  * [`ArrayQueue`](https://docs.rs/crossbeam/latest/crossbeam/queue/struct.ArrayQueue.html \"struct crossbeam::queue::ArrayQueue\"), a bounded MPMC queue that allocates a fixed-capacity buffer on construction.\n  * [`SegQueue`](https://docs.rs/crossbeam/latest/crossbeam/queue/struct.SegQueue.html \"struct crossbeam::queue::SegQueue\"), an unbounded MPMC queue that allocates small buffers, segments, on demand.\n\n\n### [\u00a7](https://docs.rs/crossbeam/latest/crossbeam/#memory-management)Memory management\n  * [`epoch`](https://docs.rs/crossbeam/latest/crossbeam/epoch/index.html \"mod crossbeam::epoch\"), an epoch-based garbage collector.\n\n\n### [\u00a7](https://docs.rs/crossbeam/latest/crossbeam/#thread-synchronization)Thread synchronization\n  * [`channel`](https://docs.rs/crossbeam/latest/crossbeam/channel/index.html \"mod crossbeam::channel\"), multi-producer multi-consumer channels for message passing.\n  * [`Parker`](https://docs.rs/crossbeam/latest/crossbeam/sync/struct.Parker.html \"struct crossbeam::sync::Parker\"), a thread parking primitive.\n  * [`ShardedLock`](https://docs.rs/crossbeam/latest/crossbeam/sync/struct.ShardedLock.html \"struct crossbeam::sync::ShardedLock\"), a sharded reader-writer lock with fast concurrent reads.\n  * [`WaitGroup`](https://docs.rs/crossbeam/latest/crossbeam/sync/struct.WaitGroup.html \"struct crossbeam::sync::WaitGroup\"), for synchronizing the beginning or end of some computation.\n\n\n### [\u00a7](https://docs.rs/crossbeam/latest/crossbeam/#utilities)Utilities\n  * [`Backoff`](https://docs.rs/crossbeam/latest/crossbeam/utils/struct.Backoff.html \"struct crossbeam::utils::Backoff\"), for exponential backoff in spin loops.\n  * [`CachePadded`](https://docs.rs/crossbeam/latest/crossbeam/utils/struct.CachePadded.html \"struct crossbeam::utils::CachePadded\"), for padding and aligning a value to the length of a cache line.\n  * [`scope`](https://docs.rs/crossbeam/latest/crossbeam/fn.scope.html \"fn crossbeam::scope\"), for spawning threads that borrow local variables from the stack.\n\n\n## Modules[\u00a7](https://docs.rs/crossbeam/latest/crossbeam/#modules)\n\n[atomic](https://docs.rs/crossbeam/latest/crossbeam/atomic/index.html \"mod crossbeam::atomic\")\n    Atomic types.\n\n[channel](https://docs.rs/crossbeam/latest/crossbeam/channel/index.html \"mod crossbeam::channel\")\n    Multi-producer multi-consumer channels for message passing.\n\n[deque](https://docs.rs/crossbeam/latest/crossbeam/deque/index.html \"mod crossbeam::deque\")\n    Concurrent work-stealing deques.\n\n[epoch](https://docs.rs/crossbeam/latest/crossbeam/epoch/index.html \"mod crossbeam::epoch\")\n    Epoch-based memory reclamation.\n\n[queue](https://docs.rs/crossbeam/latest/crossbeam/queue/index.html \"mod crossbeam::queue\")\n    Concurrent queues.\n\n[sync](https://docs.rs/crossbeam/latest/crossbeam/sync/index.html \"mod crossbeam::sync\")\n    Thread synchronization primitives.\n\n[thread](https://docs.rs/crossbeam/latest/crossbeam/thread/index.html \"mod crossbeam::thread\")\n    Threads that can borrow variables from the stack.\n\n[utils](https://docs.rs/crossbeam/latest/crossbeam/utils/index.html \"mod crossbeam::utils\")\n    Miscellaneous utilities.\n## Macros[\u00a7](https://docs.rs/crossbeam/latest/crossbeam/#macros)\n\n[select](https://docs.rs/crossbeam/latest/crossbeam/macro.select.html \"macro crossbeam::select\")\n    Selects from a set of channel operations.\n## Functions[\u00a7](https://docs.rs/crossbeam/latest/crossbeam/#functions)\n\n[scope](https://docs.rs/crossbeam/latest/crossbeam/fn.scope.html \"fn crossbeam::scope\")\n    Creates a new scope for spawning threads.\n",
        "markdown_with_citations": "[](https://docs.rs/crossbeam/latest/crossbeam/all.html \"show sidebar\")\n# Crate crossbeamCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nTools for concurrent programming.\n### \u00a7\u27e84\u27e9Atomics\n  * `AtomicCell`\u27e85\u27e9, a thread-safe mutable memory location.\n  * `AtomicConsume`\u27e86\u27e9, for reading from primitive atomic types with \u201cconsume\u201d ordering.\n\n\n### \u00a7\u27e87\u27e9Data structures\n  * `deque`\u27e88\u27e9, work-stealing deques for building task schedulers.\n  * `ArrayQueue`\u27e89\u27e9, a bounded MPMC queue that allocates a fixed-capacity buffer on construction.\n  * `SegQueue`\u27e810\u27e9, an unbounded MPMC queue that allocates small buffers, segments, on demand.\n\n\n### \u00a7\u27e811\u27e9Memory management\n  * `epoch`\u27e812\u27e9, an epoch-based garbage collector.\n\n\n### \u00a7\u27e813\u27e9Thread synchronization\n  * `channel`\u27e814\u27e9, multi-producer multi-consumer channels for message passing.\n  * `Parker`\u27e815\u27e9, a thread parking primitive.\n  * `ShardedLock`\u27e816\u27e9, a sharded reader-writer lock with fast concurrent reads.\n  * `WaitGroup`\u27e817\u27e9, for synchronizing the beginning or end of some computation.\n\n\n### \u00a7\u27e818\u27e9Utilities\n  * `Backoff`\u27e819\u27e9, for exponential backoff in spin loops.\n  * `CachePadded`\u27e820\u27e9, for padding and aligning a value to the length of a cache line.\n  * `scope`\u27e821\u27e9, for spawning threads that borrow local variables from the stack.\n\n\n## Modules\u00a7\u27e822\u27e9\n\natomic\u27e823\u27e9\n    Atomic types.\n\nchannel\u27e814\u27e9\n    Multi-producer multi-consumer channels for message passing.\n\ndeque\u27e88\u27e9\n    Concurrent work-stealing deques.\n\nepoch\u27e812\u27e9\n    Epoch-based memory reclamation.\n\nqueue\u27e824\u27e9\n    Concurrent queues.\n\nsync\u27e825\u27e9\n    Thread synchronization primitives.\n\nthread\u27e826\u27e9\n    Threads that can borrow variables from the stack.\n\nutils\u27e827\u27e9\n    Miscellaneous utilities.\n## Macros\u00a7\u27e828\u27e9\n\nselect\u27e829\u27e9\n    Selects from a set of channel operations.\n## Functions\u00a7\u27e830\u27e9\n\nscope\u27e821\u27e9\n    Creates a new scope for spawning threads.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/crossbeam/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/crossbeam/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/crossbeam/latest/src/crossbeam/lib.rs.html#1-81: Source\n\u27e84\u27e9 https://docs.rs/crossbeam/latest/crossbeam/#atomics: \u00a7\n\u27e85\u27e9 https://docs.rs/crossbeam/latest/crossbeam/atomic/struct.AtomicCell.html: struct crossbeam::atomic::AtomicCell - `AtomicCell`\n\u27e86\u27e9 https://docs.rs/crossbeam/latest/crossbeam/atomic/trait.AtomicConsume.html: trait crossbeam::atomic::AtomicConsume - `AtomicConsume`\n\u27e87\u27e9 https://docs.rs/crossbeam/latest/crossbeam/#data-structures: \u00a7\n\u27e88\u27e9 https://docs.rs/crossbeam/latest/crossbeam/deque/index.html: mod crossbeam::deque - `deque`\n\u27e89\u27e9 https://docs.rs/crossbeam/latest/crossbeam/queue/struct.ArrayQueue.html: struct crossbeam::queue::ArrayQueue - `ArrayQueue`\n\u27e810\u27e9 https://docs.rs/crossbeam/latest/crossbeam/queue/struct.SegQueue.html: struct crossbeam::queue::SegQueue - `SegQueue`\n\u27e811\u27e9 https://docs.rs/crossbeam/latest/crossbeam/#memory-management: \u00a7\n\u27e812\u27e9 https://docs.rs/crossbeam/latest/crossbeam/epoch/index.html: mod crossbeam::epoch - `epoch`\n\u27e813\u27e9 https://docs.rs/crossbeam/latest/crossbeam/#thread-synchronization: \u00a7\n\u27e814\u27e9 https://docs.rs/crossbeam/latest/crossbeam/channel/index.html: mod crossbeam::channel - `channel`\n\u27e815\u27e9 https://docs.rs/crossbeam/latest/crossbeam/sync/struct.Parker.html: struct crossbeam::sync::Parker - `Parker`\n\u27e816\u27e9 https://docs.rs/crossbeam/latest/crossbeam/sync/struct.ShardedLock.html: struct crossbeam::sync::ShardedLock - `ShardedLock`\n\u27e817\u27e9 https://docs.rs/crossbeam/latest/crossbeam/sync/struct.WaitGroup.html: struct crossbeam::sync::WaitGroup - `WaitGroup`\n\u27e818\u27e9 https://docs.rs/crossbeam/latest/crossbeam/#utilities: \u00a7\n\u27e819\u27e9 https://docs.rs/crossbeam/latest/crossbeam/utils/struct.Backoff.html: struct crossbeam::utils::Backoff - `Backoff`\n\u27e820\u27e9 https://docs.rs/crossbeam/latest/crossbeam/utils/struct.CachePadded.html: struct crossbeam::utils::CachePadded - `CachePadded`\n\u27e821\u27e9 https://docs.rs/crossbeam/latest/crossbeam/fn.scope.html: fn crossbeam::scope - `scope`\n\u27e822\u27e9 https://docs.rs/crossbeam/latest/crossbeam/#modules: \u00a7\n\u27e823\u27e9 https://docs.rs/crossbeam/latest/crossbeam/atomic/index.html: mod crossbeam::atomic - atomic\n\u27e824\u27e9 https://docs.rs/crossbeam/latest/crossbeam/queue/index.html: mod crossbeam::queue - queue\n\u27e825\u27e9 https://docs.rs/crossbeam/latest/crossbeam/sync/index.html: mod crossbeam::sync - sync\n\u27e826\u27e9 https://docs.rs/crossbeam/latest/crossbeam/thread/index.html: mod crossbeam::thread - thread\n\u27e827\u27e9 https://docs.rs/crossbeam/latest/crossbeam/utils/index.html: mod crossbeam::utils - utils\n\u27e828\u27e9 https://docs.rs/crossbeam/latest/crossbeam/#macros: \u00a7\n\u27e829\u27e9 https://docs.rs/crossbeam/latest/crossbeam/macro.select.html: macro crossbeam::select - select\n\u27e830\u27e9 https://docs.rs/crossbeam/latest/crossbeam/#functions: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `crossbeam` crate provides tools for concurrent programming in Rust, focusing on thread-safe data structures, synchronization primitives, and memory management. Key features include atomic types (`AtomicCell`), work-stealing deques, multi-producer multi-consumer channels, epoch-based garbage collection, and utilities like `Backoff` for spin loops and `scope` for thread management. It is designed to simplify building efficient and scalable concurrent systems.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Thread Synchronization  \n\u2705 **Factual**: The `crossbeam::channel` module provides multi-producer multi-consumer channels, enabling efficient message passing between threads.  \n\u274c **Counterfactual**: The `crossbeam::channel` module only supports single-producer single-consumer channels, limiting its use in multi-threaded applications.  \n\n---\n\n### Pair 2: Memory Management  \n\u2705 **Factual**: The `crossbeam::epoch` module implements an epoch-based garbage collector for safe memory reclamation in concurrent applications.  \n\u274c **Counterfactual**: The `crossbeam::epoch` module uses reference counting for memory management, similar to `Arc`.  \n\n---\n\n### Pair 3: Data Structures  \n\u2705 **Factual**: The `crossbeam::queue::ArrayQueue` is a bounded multi-producer multi-consumer (MPMC) queue that allocates a fixed-capacity buffer at construction time.  \n\u274c **Counterfactual**: The `crossbeam::queue::ArrayQueue` is an unbounded queue that dynamically allocates memory as needed.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}