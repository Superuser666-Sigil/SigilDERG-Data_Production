{
    "name": "indexmap",
    "version": "2.10.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/indexmap/latest/indexmap/all.html \"show sidebar\")\n# Crate indexmapCopy item path\n[Settings](https://docs.rs/indexmap/latest/settings.html)\n[Help](https://docs.rs/indexmap/latest/help.html)\nSummary[Source](https://docs.rs/indexmap/latest/src/indexmap/lib.rs.html#2-288)\nExpand description\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n[`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") is a corresponding hash set using the same implementation and with similar properties.\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#highlights)Highlights\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") are drop-in compatible with the std `HashMap` and `HashSet`, but they also have some features of note:\n  * The ordering semantics (see their documentation for details)\n  * Sorting methods and the [`.pop()`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.pop \"method indexmap::map::IndexMap::pop\") methods.\n  * The [`Equivalent`](https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html \"trait indexmap::Equivalent\") trait, which offers more flexible equality definitions between borrowed and owned versions of keys.\n  * The [`MutableKeys`](https://docs.rs/indexmap/latest/indexmap/map/trait.MutableKeys.html \"trait indexmap::map::MutableKeys\") trait, which gives opt-in mutable access to map keys, and [`MutableValues`](https://docs.rs/indexmap/latest/indexmap/set/trait.MutableValues.html \"trait indexmap::set::MutableValues\") for sets.\n\n\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#feature-flags)Feature Flags\nTo reduce the amount of compiled code in the crate by default, certain features are gated behind [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section). These allow you to opt in to (or out of) functionality. Below is a list of the features available in this crate.\n  * `std`: Enables features which require the Rust standard library. For more information see the section on [`no_std`](https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets).\n  * `rayon`: Enables parallel iteration and other parallel methods.\n  * `serde`: Adds implementations for [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\"). Alternative implementations for (de)serializing [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") as an ordered sequence are available in the [`map::serde_seq`](https://docs.rs/indexmap/latest/indexmap/map/serde_seq/index.html \"mod indexmap::map::serde_seq\") module.\n  * `arbitrary`: Adds implementations for the [`arbitrary::Arbitrary`](https://docs.rs/arbitrary/1.4.1/x86_64-unknown-linux-gnu/arbitrary/trait.Arbitrary.html \"trait arbitrary::Arbitrary\") trait to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\").\n  * `quickcheck`: Adds implementations for the [`quickcheck::Arbitrary`](https://docs.rs/quickcheck/1.0.3/x86_64-unknown-linux-gnu/quickcheck/arbitrary/trait.Arbitrary.html \"trait quickcheck::arbitrary::Arbitrary\") trait to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\").\n  * `borsh` (**deprecated**): Adds implementations for [`BorshSerialize`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/ser/trait.BorshSerialize.html \"trait borsh::ser::BorshSerialize\") and [`BorshDeserialize`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/de/trait.BorshDeserialize.html \"trait borsh::de::BorshDeserialize\") to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\"). Due to a cyclic dependency that arose between [`borsh`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/index.html \"mod borsh\") and `indexmap`, `borsh v1.5.6` added an `indexmap` feature that should be used instead of enabling the feature here.\n\n\n_Note: only the`std` feature is enabled by default._\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#alternate-hashers)Alternate Hashers\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") have a default hasher type [`S = RandomState`](https://doc.rust-lang.org/nightly/std/hash/random/struct.RandomState.html \"struct std::hash::random::RandomState\"), just like the standard `HashMap` and `HashSet`, which is resistant to HashDoS attacks but not the most performant. Type aliases can make it easier to use alternate hashers:\n```\nuse fnv::FnvBuildHasher;\nuse indexmap::{IndexMap, IndexSet};\ntype FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;\ntype FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;\nlet std: IndexSet<i32> = (0..100).collect();\nlet fnv: FnvIndexSet<i32> = (0..100).collect();\nassert_eq!(std, fnv);\n```\n\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#rust-version)Rust Version\nThis version of indexmap requires Rust 1.63 or later.\nThe indexmap 2.x release series will use a carefully considered version upgrade policy, where in a later 2.x version, we will raise the minimum required Rust version.\n### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets)No Standard Library Targets\nThis crate supports being built without `std`, requiring `alloc` instead. This is chosen by disabling the default \u201cstd\u201d cargo feature, by adding `default-features = false` to your dependency specification.\n  * Creating maps and sets using [`new`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.new \"associated function indexmap::map::IndexMap::new\") and [`with_capacity`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity \"associated function indexmap::map::IndexMap::with_capacity\") is unavailable without `std`. Use methods [`IndexMap::default`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.default \"associated function indexmap::map::IndexMap::default\"), [`with_hasher`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_hasher \"associated function indexmap::map::IndexMap::with_hasher\"), [`with_capacity_and_hasher`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity_and_hasher \"associated function indexmap::map::IndexMap::with_capacity_and_hasher\") instead. A no-std compatible hasher will be needed as well, for example from the crate `twox-hash`.\n  * Macros [`indexmap!`](https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html \"macro indexmap::indexmap\") and [`indexset!`](https://docs.rs/indexmap/latest/indexmap/macro.indexset.html \"macro indexmap::indexset\") are unavailable without `std`. Use the macros [`indexmap_with_default!`](https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html \"macro indexmap::indexmap_with_default\") and [`indexset_with_default!`](https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html \"macro indexmap::indexset_with_default\") instead.\n\n\n## Re-exports[\u00a7](https://docs.rs/indexmap/latest/indexmap/#reexports)\n\n`pub use crate::map::IndexMap[](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\");`\n\n\n`pub use crate::set::IndexSet[](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\");`\n\n## Modules[\u00a7](https://docs.rs/indexmap/latest/indexmap/#modules)\n\n[map](https://docs.rs/indexmap/latest/indexmap/map/index.html \"mod indexmap::map\")\n    [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n\n[set](https://docs.rs/indexmap/latest/indexmap/set/index.html \"mod indexmap::set\")\n    A hash set implemented using [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\")\n## Macros[\u00a7](https://docs.rs/indexmap/latest/indexmap/#macros)\n\n[indexmap](https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html \"macro indexmap::indexmap\")`std`\n    Create an [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") from a list of key-value pairs\n\n[indexmap_with_default](https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html \"macro indexmap::indexmap_with_default\")\n    Create an [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") from a list of key-value pairs and a [`BuildHasherDefault`](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\")-wrapped custom hasher.\n\n[indexset](https://docs.rs/indexmap/latest/indexmap/macro.indexset.html \"macro indexmap::indexset\")`std`\n    Create an [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") from a list of values\n\n[indexset_with_default](https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html \"macro indexmap::indexset_with_default\")\n    Create an [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") from a list of values and a [`BuildHasherDefault`](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\")-wrapped custom hasher.\n## Structs[\u00a7](https://docs.rs/indexmap/latest/indexmap/#structs)\n\n[TryReserveError](https://docs.rs/indexmap/latest/indexmap/struct.TryReserveError.html \"struct indexmap::TryReserveError\")\n    The error type for [`try_reserve`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.try_reserve \"method indexmap::map::IndexMap::try_reserve\") methods.\n## Enums[\u00a7](https://docs.rs/indexmap/latest/indexmap/#enums)\n\n[GetDisjointMutError](https://docs.rs/indexmap/latest/indexmap/enum.GetDisjointMutError.html \"enum indexmap::GetDisjointMutError\")\n    The error type returned by [`get_disjoint_indices_mut`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.get_disjoint_indices_mut \"method indexmap::map::IndexMap::get_disjoint_indices_mut\").\n## Traits[\u00a7](https://docs.rs/indexmap/latest/indexmap/#traits)\n\n[Equivalent](https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html \"trait indexmap::Equivalent\")\n    Key equivalence trait.\n",
        "markdown_with_citations": "[](https://docs.rs/indexmap/latest/indexmap/all.html \"show sidebar\")\n# Crate indexmapCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`IndexMap`\u27e84\u27e9 is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n`IndexSet`\u27e85\u27e9 is a corresponding hash set using the same implementation and with similar properties.\n#### \u00a7\u27e86\u27e9Highlights\n`IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9 are drop-in compatible with the std `HashMap` and `HashSet`, but they also have some features of note:\n  * The ordering semantics (see their documentation for details)\n  * Sorting methods and the `.pop()`\u27e87\u27e9 methods.\n  * The `Equivalent`\u27e88\u27e9 trait, which offers more flexible equality definitions between borrowed and owned versions of keys.\n  * The `MutableKeys`\u27e89\u27e9 trait, which gives opt-in mutable access to map keys, and `MutableValues`\u27e810\u27e9 for sets.\n\n\n#### \u00a7\u27e811\u27e9Feature Flags\nTo reduce the amount of compiled code in the crate by default, certain features are gated behind feature flags\u27e812\u27e9. These allow you to opt in to (or out of) functionality. Below is a list of the features available in this crate.\n  * `std`: Enables features which require the Rust standard library. For more information see the section on `no_std`\u27e813\u27e9.\n  * `rayon`: Enables parallel iteration and other parallel methods.\n  * `serde`: Adds implementations for `Serialize`\u27e814\u27e9 and `Deserialize`\u27e815\u27e9 to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9. Alternative implementations for (de)serializing `IndexMap`\u27e84\u27e9 as an ordered sequence are available in the `map::serde_seq`\u27e816\u27e9 module.\n  * `arbitrary`: Adds implementations for the `arbitrary::Arbitrary`\u27e817\u27e9 trait to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9.\n  * `quickcheck`: Adds implementations for the `quickcheck::Arbitrary`\u27e818\u27e9 trait to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9.\n  * `borsh` (**deprecated**): Adds implementations for `BorshSerialize`\u27e819\u27e9 and `BorshDeserialize`\u27e820\u27e9 to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9. Due to a cyclic dependency that arose between `borsh`\u27e821\u27e9 and `indexmap`, `borsh v1.5.6` added an `indexmap` feature that should be used instead of enabling the feature here.\n\n\n_Note: only the`std` feature is enabled by default._\n#### \u00a7\u27e822\u27e9Alternate Hashers\n`IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9 have a default hasher type `S = RandomState`\u27e823\u27e9, just like the standard `HashMap` and `HashSet`, which is resistant to HashDoS attacks but not the most performant. Type aliases can make it easier to use alternate hashers:\n```\nuse fnv::FnvBuildHasher;\nuse indexmap::{IndexMap, IndexSet};\ntype FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;\ntype FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;\nlet std: IndexSet<i32> = (0..100).collect();\nlet fnv: FnvIndexSet<i32> = (0..100).collect();\nassert_eq!(std, fnv);\n```\n\n#### \u00a7\u27e824\u27e9Rust Version\nThis version of indexmap requires Rust 1.63 or later.\nThe indexmap 2.x release series will use a carefully considered version upgrade policy, where in a later 2.x version, we will raise the minimum required Rust version.\n### \u00a7\u27e813\u27e9No Standard Library Targets\nThis crate supports being built without `std`, requiring `alloc` instead. This is chosen by disabling the default \u201cstd\u201d cargo feature, by adding `default-features = false` to your dependency specification.\n  * Creating maps and sets using `new`\u27e825\u27e9 and `with_capacity`\u27e826\u27e9 is unavailable without `std`. Use methods `IndexMap::default`\u27e827\u27e9, `with_hasher`\u27e828\u27e9, `with_capacity_and_hasher`\u27e829\u27e9 instead. A no-std compatible hasher will be needed as well, for example from the crate `twox-hash`.\n  * Macros `indexmap!`\u27e830\u27e9 and `indexset!`\u27e831\u27e9 are unavailable without `std`. Use the macros `indexmap_with_default!`\u27e832\u27e9 and `indexset_with_default!`\u27e833\u27e9 instead.\n\n\n## Re-exports\u00a7\u27e834\u27e9\n\n`pub use crate::map::IndexMap[](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\");`\n\n\n`pub use crate::set::IndexSet[](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\");`\n\n## Modules\u00a7\u27e835\u27e9\n\nmap\u27e836\u27e9\n    `IndexMap`\u27e84\u27e9 is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n\nset\u27e837\u27e9\n    A hash set implemented using `IndexMap`\u27e84\u27e9\n## Macros\u00a7\u27e838\u27e9\n\nindexmap\u27e830\u27e9`std`\n    Create an `IndexMap`\u27e84\u27e9 from a list of key-value pairs\n\nindexmap_with_default\u27e832\u27e9\n    Create an `IndexMap`\u27e84\u27e9 from a list of key-value pairs and a `BuildHasherDefault`\u27e839\u27e9-wrapped custom hasher.\n\nindexset\u27e831\u27e9`std`\n    Create an `IndexSet`\u27e85\u27e9 from a list of values\n\nindexset_with_default\u27e833\u27e9\n    Create an `IndexSet`\u27e85\u27e9 from a list of values and a `BuildHasherDefault`\u27e839\u27e9-wrapped custom hasher.\n## Structs\u00a7\u27e840\u27e9\n\nTryReserveError\u27e841\u27e9\n    The error type for `try_reserve`\u27e842\u27e9 methods.\n## Enums\u00a7\u27e843\u27e9\n\nGetDisjointMutError\u27e844\u27e9\n    The error type returned by `get_disjoint_indices_mut`\u27e845\u27e9.\n## Traits\u00a7\u27e846\u27e9\n\nEquivalent\u27e88\u27e9\n    Key equivalence trait.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/indexmap/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/indexmap/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/indexmap/latest/src/indexmap/lib.rs.html#2-288: Source\n\u27e84\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html: struct indexmap::map::IndexMap - `IndexMap`\n\u27e85\u27e9 https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html: struct indexmap::set::IndexSet - `IndexSet`\n\u27e86\u27e9 https://docs.rs/indexmap/latest/indexmap/#highlights: \u00a7\n\u27e87\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.pop: method indexmap::map::IndexMap::pop - `.pop()`\n\u27e88\u27e9 https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html: trait indexmap::Equivalent - `Equivalent`\n\u27e89\u27e9 https://docs.rs/indexmap/latest/indexmap/map/trait.MutableKeys.html: trait indexmap::map::MutableKeys - `MutableKeys`\n\u27e810\u27e9 https://docs.rs/indexmap/latest/indexmap/set/trait.MutableValues.html: trait indexmap::set::MutableValues - `MutableValues`\n\u27e811\u27e9 https://docs.rs/indexmap/latest/indexmap/#feature-flags: \u00a7\n\u27e812\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e813\u27e9 https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets: `no_std`\n\u27e814\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e815\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e816\u27e9 https://docs.rs/indexmap/latest/indexmap/map/serde_seq/index.html: mod indexmap::map::serde_seq - `map::serde_seq`\n\u27e817\u27e9 https://docs.rs/arbitrary/1.4.1/x86_64-unknown-linux-gnu/arbitrary/trait.Arbitrary.html: trait arbitrary::Arbitrary - `arbitrary::Arbitrary`\n\u27e818\u27e9 https://docs.rs/quickcheck/1.0.3/x86_64-unknown-linux-gnu/quickcheck/arbitrary/trait.Arbitrary.html: trait quickcheck::arbitrary::Arbitrary - `quickcheck::Arbitrary`\n\u27e819\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/ser/trait.BorshSerialize.html: trait borsh::ser::BorshSerialize - `BorshSerialize`\n\u27e820\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/de/trait.BorshDeserialize.html: trait borsh::de::BorshDeserialize - `BorshDeserialize`\n\u27e821\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/index.html: mod borsh - `borsh`\n\u27e822\u27e9 https://docs.rs/indexmap/latest/indexmap/#alternate-hashers: \u00a7\n\u27e823\u27e9 https://doc.rust-lang.org/nightly/std/hash/random/struct.RandomState.html: struct std::hash::random::RandomState - `S = RandomState`\n\u27e824\u27e9 https://docs.rs/indexmap/latest/indexmap/#rust-version: \u00a7\n\u27e825\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.new: associated function indexmap::map::IndexMap::new - `new`\n\u27e826\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity: associated function indexmap::map::IndexMap::with_capacity - `with_capacity`\n\u27e827\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.default: associated function indexmap::map::IndexMap::default - `IndexMap::default`\n\u27e828\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_hasher: associated function indexmap::map::IndexMap::with_hasher - `with_hasher`\n\u27e829\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity_and_hasher: associated function indexmap::map::IndexMap::with_capacity_and_hasher - `with_capacity_and_hasher`\n\u27e830\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html: macro indexmap::indexmap - `indexmap!`\n\u27e831\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexset.html: macro indexmap::indexset - `indexset!`\n\u27e832\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html: macro indexmap::indexmap_with_default - `indexmap_with_default!`\n\u27e833\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html: macro indexmap::indexset_with_default - `indexset_with_default!`\n\u27e834\u27e9 https://docs.rs/indexmap/latest/indexmap/#reexports: \u00a7\n\u27e835\u27e9 https://docs.rs/indexmap/latest/indexmap/#modules: \u00a7\n\u27e836\u27e9 https://docs.rs/indexmap/latest/indexmap/map/index.html: mod indexmap::map - map\n\u27e837\u27e9 https://docs.rs/indexmap/latest/indexmap/set/index.html: mod indexmap::set - set\n\u27e838\u27e9 https://docs.rs/indexmap/latest/indexmap/#macros: \u00a7\n\u27e839\u27e9 https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html: struct core::hash::BuildHasherDefault - `BuildHasherDefault`\n\u27e840\u27e9 https://docs.rs/indexmap/latest/indexmap/#structs: \u00a7\n\u27e841\u27e9 https://docs.rs/indexmap/latest/indexmap/struct.TryReserveError.html: struct indexmap::TryReserveError - TryReserveError\n\u27e842\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.try_reserve: method indexmap::map::IndexMap::try_reserve - `try_reserve`\n\u27e843\u27e9 https://docs.rs/indexmap/latest/indexmap/#enums: \u00a7\n\u27e844\u27e9 https://docs.rs/indexmap/latest/indexmap/enum.GetDisjointMutError.html: enum indexmap::GetDisjointMutError - GetDisjointMutError\n\u27e845\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.get_disjoint_indices_mut: method indexmap::map::IndexMap::get_disjoint_indices_mut - `get_disjoint_indices_mut`\n\u27e846\u27e9 https://docs.rs/indexmap/latest/indexmap/#traits: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `indexmap` crate provides `IndexMap` and `IndexSet`, which are hash table and hash set implementations that preserve insertion order, making them drop-in replacements for Rust's standard `HashMap` and `HashSet` with additional ordering semantics. Key features include sorting methods, flexible equality definitions via the `Equivalent` trait, mutable access to keys and values, and support for alternate hashers, serialization, and parallel iteration through feature flags. It also supports `no_std` environments and requires Rust 1.63 or later.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Iteration Order  \n\u2705 **Factual**: `IndexMap` preserves the insertion order of key-value pairs, allowing deterministic iteration independent of the hash values of the keys.  \n\u274c **Counterfactual**: `IndexMap` uses random iteration order, similar to the standard `HashMap`, and does not preserve insertion order.  \n\n---\n\n### Pair 2: Compatibility with `std`  \n\u2705 **Factual**: The `std` feature is enabled by default in `indexmap`, allowing seamless compatibility with the Rust standard library.  \n\u274c **Counterfactual**: The `std` feature is disabled by default in `indexmap`, requiring users to explicitly enable it for standard library compatibility.  \n\n---\n\n### Pair 3: Parallel Iteration  \n\u2705 **Factual**: By enabling the `rayon` feature, `indexmap` supports parallel iteration methods for `IndexMap` and `IndexSet`.  \n\u274c **Counterfactual**: Parallel iteration is a core feature of `indexmap` and does not require enabling any additional feature flags.  \n\n---",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}