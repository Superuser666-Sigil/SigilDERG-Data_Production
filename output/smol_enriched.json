{
    "name": "smol",
    "version": "2.0.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/smol/latest/smol/all.html \"show sidebar\")\n# Crate smolCopy item path\n[Settings](https://docs.rs/smol/latest/settings.html)\n[Help](https://docs.rs/smol/latest/help.html)\nSummary[Source](https://docs.rs/smol/latest/src/smol/lib.rs.html#1-65)\nExpand description\nA small and fast async runtime.\nThis crate simply re-exports other smaller async crates (see the source).\nTo use tokio-based libraries with smol, apply the [`async-compat`](https://docs.rs/async-compat/latest/async_compat/) adapter to futures and I/O types.\nSee the [`smol-macros`](https://docs.rs/smol-macros/latest/smol_macros/) crate if you want a no proc-macro, fast compiling, easy-to-use async main and/or multi-threaded Executor setup out of the box.\n## [\u00a7](https://docs.rs/smol/latest/smol/#examples)Examples\nConnect to an HTTP website, make a GET request, and pipe the response to the standard output:\n```\nuse smol::{io, net, prelude::*, Unblock};\nfn main() -> io::Result<()> {\n  smol::block_on(async {\n    let mut stream = net::TcpStream::connect(\"example.com:80\").await?;\n    let req = b\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\nConnection: close\\r\\n\\r\\n\";\n    stream.write_all(req).await?;\n    let mut stdout = Unblock::new(std::io::stdout());\n    io::copy(stream, &mut stdout).await?;\n    Ok(())\n  })\n}\n```\n\nThere\u2019s a lot more in the [examples](https://github.com/smol-rs/smol/tree/master/examples) directory.\n## Modules[\u00a7](https://docs.rs/smol/latest/smol/#modules)\n\n[channel](https://docs.rs/smol/latest/smol/channel/index.html \"mod smol::channel\")\n    An async multi-producer multi-consumer channel, where each message can be received by only one of all existing consumers.\n\n[fs](https://docs.rs/smol/latest/smol/fs/index.html \"mod smol::fs\")\n    Async filesystem primitives.\n\n[future](https://docs.rs/smol/latest/smol/future/index.html \"mod smol::future\")\n    Combinators for the [`Future`](https://docs.rs/smol/latest/smol/future/trait.Future.html \"trait smol::future::Future\") trait.\n\n[io](https://docs.rs/smol/latest/smol/io/index.html \"mod smol::io\")\n    Tools and combinators for I/O.\n\n[lock](https://docs.rs/smol/latest/smol/lock/index.html \"mod smol::lock\")\n    Async synchronization primitives.\n\n[net](https://docs.rs/smol/latest/smol/net/index.html \"mod smol::net\")\n    Async networking primitives for TCP/UDP/Unix communication.\n\n[prelude](https://docs.rs/smol/latest/smol/prelude/index.html \"mod smol::prelude\")\n    Traits [`Future`](https://docs.rs/smol/latest/smol/future/trait.Future.html \"trait smol::future::Future\"), [`Stream`](https://docs.rs/smol/latest/smol/prelude/trait.Stream.html \"trait smol::prelude::Stream\"), [`AsyncRead`](https://docs.rs/smol/latest/smol/io/trait.AsyncRead.html \"trait smol::io::AsyncRead\"), [`AsyncWrite`](https://docs.rs/smol/latest/smol/io/trait.AsyncWrite.html \"trait smol::io::AsyncWrite\"), [`AsyncBufRead`](https://docs.rs/smol/latest/smol/io/trait.AsyncBufRead.html \"trait smol::io::AsyncBufRead\"), [`AsyncSeek`](https://docs.rs/smol/latest/smol/io/trait.AsyncSeek.html \"trait smol::io::AsyncSeek\"), and their extensions.\n\n[process](https://docs.rs/smol/latest/smol/process/index.html \"mod smol::process\")\n    Async interface for working with processes.\n\n[stream](https://docs.rs/smol/latest/smol/stream/index.html \"mod smol::stream\")\n    Combinators for the [`Stream`](https://docs.rs/smol/latest/smol/prelude/trait.Stream.html \"trait smol::prelude::Stream\") trait.\n## Macros[\u00a7](https://docs.rs/smol/latest/smol/#macros)\n\n[pin](https://docs.rs/smol/latest/smol/macro.pin.html \"macro smol::pin\")\n    Pins a variable of type `T` on the stack and rebinds it as `Pin<&mut T>`.\n\n[ready](https://docs.rs/smol/latest/smol/macro.ready.html \"macro smol::ready\")\n    Unwraps `Poll<T>` or returns [`Pending`](https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html#variant.Pending \"variant core::task::poll::Poll::Pending\").\n## Structs[\u00a7](https://docs.rs/smol/latest/smol/#structs)\n\n[Async](https://docs.rs/smol/latest/smol/struct.Async.html \"struct smol::Async\")\n    Async adapter for I/O types.\n\n[Executor](https://docs.rs/smol/latest/smol/struct.Executor.html \"struct smol::Executor\")\n    An async executor.\n\n[LocalExecutor](https://docs.rs/smol/latest/smol/struct.LocalExecutor.html \"struct smol::LocalExecutor\")\n    A thread-local executor.\n\n[Task](https://docs.rs/smol/latest/smol/struct.Task.html \"struct smol::Task\")\n    A spawned task.\n\n[Timer](https://docs.rs/smol/latest/smol/struct.Timer.html \"struct smol::Timer\")\n    A future or stream that emits timed events.\n\n[Unblock](https://docs.rs/smol/latest/smol/struct.Unblock.html \"struct smol::Unblock\")\n    Runs blocking I/O on a thread pool.\n## Functions[\u00a7](https://docs.rs/smol/latest/smol/#functions)\n\n[block_on](https://docs.rs/smol/latest/smol/fn.block_on.html \"fn smol::block_on\")\n    Blocks the current thread on a future, processing I/O events when idle.\n\n[spawn](https://docs.rs/smol/latest/smol/fn.spawn.html \"fn smol::spawn\")\n    Spawns a task onto the global executor (single-threaded by default).\n\n[unblock](https://docs.rs/smol/latest/smol/fn.unblock.html \"fn smol::unblock\")\n    Runs blocking code on a thread pool.\n",
        "markdown_with_citations": "[](https://docs.rs/smol/latest/smol/all.html \"show sidebar\")\n# Crate smolCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA small and fast async runtime.\nThis crate simply re-exports other smaller async crates (see the source).\nTo use tokio-based libraries with smol, apply the `async-compat`\u27e84\u27e9 adapter to futures and I/O types.\nSee the `smol-macros`\u27e85\u27e9 crate if you want a no proc-macro, fast compiling, easy-to-use async main and/or multi-threaded Executor setup out of the box.\n## \u00a7\u27e86\u27e9Examples\nConnect to an HTTP website, make a GET request, and pipe the response to the standard output:\n```\nuse smol::{io, net, prelude::*, Unblock};\nfn main() -> io::Result<()> {\n  smol::block_on(async {\n    let mut stream = net::TcpStream::connect(\"example.com:80\").await?;\n    let req = b\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\nConnection: close\\r\\n\\r\\n\";\n    stream.write_all(req).await?;\n    let mut stdout = Unblock::new(std::io::stdout());\n    io::copy(stream, &mut stdout).await?;\n    Ok(())\n  })\n}\n```\n\nThere\u2019s a lot more in the examples\u27e87\u27e9 directory.\n## Modules\u00a7\u27e88\u27e9\n\nchannel\u27e89\u27e9\n    An async multi-producer multi-consumer channel, where each message can be received by only one of all existing consumers.\n\nfs\u27e810\u27e9\n    Async filesystem primitives.\n\nfuture\u27e811\u27e9\n    Combinators for the `Future`\u27e812\u27e9 trait.\n\nio\u27e813\u27e9\n    Tools and combinators for I/O.\n\nlock\u27e814\u27e9\n    Async synchronization primitives.\n\nnet\u27e815\u27e9\n    Async networking primitives for TCP/UDP/Unix communication.\n\nprelude\u27e816\u27e9\n    Traits `Future`\u27e812\u27e9, `Stream`\u27e817\u27e9, `AsyncRead`\u27e818\u27e9, `AsyncWrite`\u27e819\u27e9, `AsyncBufRead`\u27e820\u27e9, `AsyncSeek`\u27e821\u27e9, and their extensions.\n\nprocess\u27e822\u27e9\n    Async interface for working with processes.\n\nstream\u27e823\u27e9\n    Combinators for the `Stream`\u27e817\u27e9 trait.\n## Macros\u00a7\u27e824\u27e9\n\npin\u27e825\u27e9\n    Pins a variable of type `T` on the stack and rebinds it as `Pin<&mut T>`.\n\nready\u27e826\u27e9\n    Unwraps `Poll<T>` or returns `Pending`\u27e827\u27e9.\n## Structs\u00a7\u27e828\u27e9\n\nAsync\u27e829\u27e9\n    Async adapter for I/O types.\n\nExecutor\u27e830\u27e9\n    An async executor.\n\nLocalExecutor\u27e831\u27e9\n    A thread-local executor.\n\nTask\u27e832\u27e9\n    A spawned task.\n\nTimer\u27e833\u27e9\n    A future or stream that emits timed events.\n\nUnblock\u27e834\u27e9\n    Runs blocking I/O on a thread pool.\n## Functions\u00a7\u27e835\u27e9\n\nblock_on\u27e836\u27e9\n    Blocks the current thread on a future, processing I/O events when idle.\n\nspawn\u27e837\u27e9\n    Spawns a task onto the global executor (single-threaded by default).\n\nunblock\u27e838\u27e9\n    Runs blocking code on a thread pool.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/smol/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/smol/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/smol/latest/src/smol/lib.rs.html#1-65: Source\n\u27e84\u27e9 https://docs.rs/async-compat/latest/async_compat/: `async-compat`\n\u27e85\u27e9 https://docs.rs/smol-macros/latest/smol_macros/: `smol-macros`\n\u27e86\u27e9 https://docs.rs/smol/latest/smol/#examples: \u00a7\n\u27e87\u27e9 https://github.com/smol-rs/smol/tree/master/examples: examples\n\u27e88\u27e9 https://docs.rs/smol/latest/smol/#modules: \u00a7\n\u27e89\u27e9 https://docs.rs/smol/latest/smol/channel/index.html: mod smol::channel - channel\n\u27e810\u27e9 https://docs.rs/smol/latest/smol/fs/index.html: mod smol::fs - fs\n\u27e811\u27e9 https://docs.rs/smol/latest/smol/future/index.html: mod smol::future - future\n\u27e812\u27e9 https://docs.rs/smol/latest/smol/future/trait.Future.html: trait smol::future::Future - `Future`\n\u27e813\u27e9 https://docs.rs/smol/latest/smol/io/index.html: mod smol::io - io\n\u27e814\u27e9 https://docs.rs/smol/latest/smol/lock/index.html: mod smol::lock - lock\n\u27e815\u27e9 https://docs.rs/smol/latest/smol/net/index.html: mod smol::net - net\n\u27e816\u27e9 https://docs.rs/smol/latest/smol/prelude/index.html: mod smol::prelude - prelude\n\u27e817\u27e9 https://docs.rs/smol/latest/smol/prelude/trait.Stream.html: trait smol::prelude::Stream - `Stream`\n\u27e818\u27e9 https://docs.rs/smol/latest/smol/io/trait.AsyncRead.html: trait smol::io::AsyncRead - `AsyncRead`\n\u27e819\u27e9 https://docs.rs/smol/latest/smol/io/trait.AsyncWrite.html: trait smol::io::AsyncWrite - `AsyncWrite`\n\u27e820\u27e9 https://docs.rs/smol/latest/smol/io/trait.AsyncBufRead.html: trait smol::io::AsyncBufRead - `AsyncBufRead`\n\u27e821\u27e9 https://docs.rs/smol/latest/smol/io/trait.AsyncSeek.html: trait smol::io::AsyncSeek - `AsyncSeek`\n\u27e822\u27e9 https://docs.rs/smol/latest/smol/process/index.html: mod smol::process - process\n\u27e823\u27e9 https://docs.rs/smol/latest/smol/stream/index.html: mod smol::stream - stream\n\u27e824\u27e9 https://docs.rs/smol/latest/smol/#macros: \u00a7\n\u27e825\u27e9 https://docs.rs/smol/latest/smol/macro.pin.html: macro smol::pin - pin\n\u27e826\u27e9 https://docs.rs/smol/latest/smol/macro.ready.html: macro smol::ready - ready\n\u27e827\u27e9 https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html#variant.Pending: variant core::task::poll::Poll::Pending - `Pending`\n\u27e828\u27e9 https://docs.rs/smol/latest/smol/#structs: \u00a7\n\u27e829\u27e9 https://docs.rs/smol/latest/smol/struct.Async.html: struct smol::Async - Async\n\u27e830\u27e9 https://docs.rs/smol/latest/smol/struct.Executor.html: struct smol::Executor - Executor\n\u27e831\u27e9 https://docs.rs/smol/latest/smol/struct.LocalExecutor.html: struct smol::LocalExecutor - LocalExecutor\n\u27e832\u27e9 https://docs.rs/smol/latest/smol/struct.Task.html: struct smol::Task - Task\n\u27e833\u27e9 https://docs.rs/smol/latest/smol/struct.Timer.html: struct smol::Timer - Timer\n\u27e834\u27e9 https://docs.rs/smol/latest/smol/struct.Unblock.html: struct smol::Unblock - Unblock\n\u27e835\u27e9 https://docs.rs/smol/latest/smol/#functions: \u00a7\n\u27e836\u27e9 https://docs.rs/smol/latest/smol/fn.block_on.html: fn smol::block_on - block_on\n\u27e837\u27e9 https://docs.rs/smol/latest/smol/fn.spawn.html: fn smol::spawn - spawn\n\u27e838\u27e9 https://docs.rs/smol/latest/smol/fn.unblock.html: fn smol::unblock - unblock\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `smol` crate is a lightweight and fast async runtime for Rust, designed to simplify asynchronous programming. It provides key features like async I/O, networking, filesystem operations, synchronization primitives, and process management, along with utilities for spawning tasks, blocking on futures, and running blocking code on a thread pool. Additionally, it supports integration with `tokio`-based libraries via the `async-compat` adapter and offers easy-to-use executors and macros for streamlined async development.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Async Runtime  \n\u2705 **Factual**: The `smol` crate provides a small and fast async runtime that re-exports other smaller async crates to simplify asynchronous programming in Rust.  \n\u274c **Counterfactual**: The `smol` crate is a replacement for the `tokio` runtime and does not support interoperability with `tokio`-based libraries.  \n\n---\n\n### Pair 2: Compatibility with Blocking Code  \n\u2705 **Factual**: The `smol::Unblock` struct allows running blocking I/O operations on a thread pool, enabling seamless integration of synchronous code into an async environment.  \n\u274c **Counterfactual**: The `smol::Unblock` struct is designed to replace all blocking I/O operations with non-blocking equivalents, eliminating the need for thread pools.  \n\n---\n\n### Pair 3: Executor Setup  \n\u2705 **Factual**: The `smol-macros` crate provides utilities for setting up an async main function and a multi-threaded executor without relying on procedural macros.  \n\u274c **Counterfactual**: The `smol-macros` crate is included directly in the `smol` crate and provides runtime features such as automatic task spawning and thread pool management.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}