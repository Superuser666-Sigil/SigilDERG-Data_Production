{
    "name": "bb8",
    "version": "0.9.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/bb8/latest/bb8/all.html \"show sidebar\")\n# Crate bb8Copy item path\n[Settings](https://docs.rs/bb8/latest/settings.html)\n[Help](https://docs.rs/bb8/latest/help.html)\nSummary[Source](https://docs.rs/bb8/latest/src/bb8/lib.rs.html#1-73)\nExpand description\nA full-featured connection pool, designed for asynchronous connections (using tokio). Originally based on [r2d2](https://github.com/sfackler/r2d2).\nOpening a new database connection every time one is needed is both inefficient and can lead to resource exhaustion under high traffic conditions. A connection pool maintains a set of open connections to a database, handing them out for repeated use.\nbb8 is agnostic to the connection type it is managing. Implementors of the `ManageConnection` trait provide the database-specific logic to create and check the health of connections.\n## [\u00a7](https://docs.rs/bb8/latest/bb8/#example)Example\nUsing an imaginary \u201cfoodb\u201d database.\n[\u24d8](https://docs.rs/bb8/latest/bb8/ \"This example is not tested\")```\n#[tokio::main]\nasync fn main() {\n  let manager = bb8_foodb::FooConnectionManager::new(\"localhost:1234\");\n  let pool = bb8::Pool::builder().build(manager).await.unwrap();\n  for _ in 0..20 {\n    let pool = pool.clone();\n    tokio::spawn(async move {\n      let conn = pool.get().await.unwrap();\n      // use the connection\n      // it will be returned to the pool when it falls out of scope.\n    });\n  }\n}\n```\n\n## Structs[\u00a7](https://docs.rs/bb8/latest/bb8/#structs)\n\n[Builder](https://docs.rs/bb8/latest/bb8/struct.Builder.html \"struct bb8::Builder\")\n    A builder for a connection pool.\n\n[NopErrorSink](https://docs.rs/bb8/latest/bb8/struct.NopErrorSink.html \"struct bb8::NopErrorSink\")\n    An `ErrorSink` implementation that does nothing.\n\n[Pool](https://docs.rs/bb8/latest/bb8/struct.Pool.html \"struct bb8::Pool\")\n    A generic connection pool.\n\n[PooledConnection](https://docs.rs/bb8/latest/bb8/struct.PooledConnection.html \"struct bb8::PooledConnection\")\n    A smart pointer wrapping a connection.\n\n[State](https://docs.rs/bb8/latest/bb8/struct.State.html \"struct bb8::State\")\n    Information about the state of a `Pool`.\n\n[Statistics](https://docs.rs/bb8/latest/bb8/struct.Statistics.html \"struct bb8::Statistics\")\n    Statistics about the historical usage of the `Pool`.\n## Enums[\u00a7](https://docs.rs/bb8/latest/bb8/#enums)\n\n[AddError](https://docs.rs/bb8/latest/bb8/enum.AddError.html \"enum bb8::AddError\")\n    Error type returned by `Pool::add(conn)`\n\n[QueueStrategy](https://docs.rs/bb8/latest/bb8/enum.QueueStrategy.html \"enum bb8::QueueStrategy\")\n    bb8\u2019s queue strategy when getting pool resources\n\n[RunError](https://docs.rs/bb8/latest/bb8/enum.RunError.html \"enum bb8::RunError\")\n    bb8\u2019s error type.\n## Traits[\u00a7](https://docs.rs/bb8/latest/bb8/#traits)\n\n[CustomizeConnection](https://docs.rs/bb8/latest/bb8/trait.CustomizeConnection.html \"trait bb8::CustomizeConnection\")\n    A trait which provides functionality to initialize a connection\n\n[ErrorSink](https://docs.rs/bb8/latest/bb8/trait.ErrorSink.html \"trait bb8::ErrorSink\")\n    A trait to receive errors generated by connection management that aren\u2019t tied to any particular caller.\n\n[ManageConnection](https://docs.rs/bb8/latest/bb8/trait.ManageConnection.html \"trait bb8::ManageConnection\")\n    A trait which provides connection-specific functionality.\n",
        "markdown_with_citations": "[](https://docs.rs/bb8/latest/bb8/all.html \"show sidebar\")\n# Crate bb8Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA full-featured connection pool, designed for asynchronous connections (using tokio). Originally based on r2d2\u27e84\u27e9.\nOpening a new database connection every time one is needed is both inefficient and can lead to resource exhaustion under high traffic conditions. A connection pool maintains a set of open connections to a database, handing them out for repeated use.\nbb8 is agnostic to the connection type it is managing. Implementors of the `ManageConnection` trait provide the database-specific logic to create and check the health of connections.\n## \u00a7\u27e85\u27e9Example\nUsing an imaginary \u201cfoodb\u201d database.\n\u24d8\u27e86\u27e9```\n#[tokio::main]\nasync fn main() {\n  let manager = bb8_foodb::FooConnectionManager::new(\"localhost:1234\");\n  let pool = bb8::Pool::builder().build(manager).await.unwrap();\n  for _ in 0..20 {\n    let pool = pool.clone();\n    tokio::spawn(async move {\n      let conn = pool.get().await.unwrap();\n      // use the connection\n      // it will be returned to the pool when it falls out of scope.\n    });\n  }\n}\n```\n\n## Structs\u00a7\u27e87\u27e9\n\nBuilder\u27e88\u27e9\n    A builder for a connection pool.\n\nNopErrorSink\u27e89\u27e9\n    An `ErrorSink` implementation that does nothing.\n\nPool\u27e810\u27e9\n    A generic connection pool.\n\nPooledConnection\u27e811\u27e9\n    A smart pointer wrapping a connection.\n\nState\u27e812\u27e9\n    Information about the state of a `Pool`.\n\nStatistics\u27e813\u27e9\n    Statistics about the historical usage of the `Pool`.\n## Enums\u00a7\u27e814\u27e9\n\nAddError\u27e815\u27e9\n    Error type returned by `Pool::add(conn)`\n\nQueueStrategy\u27e816\u27e9\n    bb8\u2019s queue strategy when getting pool resources\n\nRunError\u27e817\u27e9\n    bb8\u2019s error type.\n## Traits\u00a7\u27e818\u27e9\n\nCustomizeConnection\u27e819\u27e9\n    A trait which provides functionality to initialize a connection\n\nErrorSink\u27e820\u27e9\n    A trait to receive errors generated by connection management that aren\u2019t tied to any particular caller.\n\nManageConnection\u27e821\u27e9\n    A trait which provides connection-specific functionality.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bb8/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bb8/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bb8/latest/src/bb8/lib.rs.html#1-73: Source\n\u27e84\u27e9 https://github.com/sfackler/r2d2: r2d2\n\u27e85\u27e9 https://docs.rs/bb8/latest/bb8/#example: \u00a7\n\u27e86\u27e9 https://docs.rs/bb8/latest/bb8/: This example is not tested - \u24d8\n\u27e87\u27e9 https://docs.rs/bb8/latest/bb8/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/bb8/latest/bb8/struct.Builder.html: struct bb8::Builder - Builder\n\u27e89\u27e9 https://docs.rs/bb8/latest/bb8/struct.NopErrorSink.html: struct bb8::NopErrorSink - NopErrorSink\n\u27e810\u27e9 https://docs.rs/bb8/latest/bb8/struct.Pool.html: struct bb8::Pool - Pool\n\u27e811\u27e9 https://docs.rs/bb8/latest/bb8/struct.PooledConnection.html: struct bb8::PooledConnection - PooledConnection\n\u27e812\u27e9 https://docs.rs/bb8/latest/bb8/struct.State.html: struct bb8::State - State\n\u27e813\u27e9 https://docs.rs/bb8/latest/bb8/struct.Statistics.html: struct bb8::Statistics - Statistics\n\u27e814\u27e9 https://docs.rs/bb8/latest/bb8/#enums: \u00a7\n\u27e815\u27e9 https://docs.rs/bb8/latest/bb8/enum.AddError.html: enum bb8::AddError - AddError\n\u27e816\u27e9 https://docs.rs/bb8/latest/bb8/enum.QueueStrategy.html: enum bb8::QueueStrategy - QueueStrategy\n\u27e817\u27e9 https://docs.rs/bb8/latest/bb8/enum.RunError.html: enum bb8::RunError - RunError\n\u27e818\u27e9 https://docs.rs/bb8/latest/bb8/#traits: \u00a7\n\u27e819\u27e9 https://docs.rs/bb8/latest/bb8/trait.CustomizeConnection.html: trait bb8::CustomizeConnection - CustomizeConnection\n\u27e820\u27e9 https://docs.rs/bb8/latest/bb8/trait.ErrorSink.html: trait bb8::ErrorSink - ErrorSink\n\u27e821\u27e9 https://docs.rs/bb8/latest/bb8/trait.ManageConnection.html: trait bb8::ManageConnection - ManageConnection\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `bb8` crate is an asynchronous connection pool designed for efficient management of database connections, built on `tokio` and inspired by `r2d2`. It is connection-type agnostic, allowing custom connection logic via the `ManageConnection` trait, and provides features like connection initialization (`CustomizeConnection`), error handling (`ErrorSink`), and pool statistics. Key components include a pool builder, pooled connections, and configurable queue strategies.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Connection Pooling\n\u2705 Factual: The `bb8` crate provides a full-featured, asynchronous connection pool designed to work seamlessly with `tokio`-based applications, enabling efficient reuse of database connections under high traffic conditions.  \n\u274c Counterfactual: The `bb8` crate is limited to managing synchronous database connections and cannot be used with asynchronous runtimes like `tokio`.\n\n---\n\n### Pair 2: Connection Type Agnosticism\n\u2705 Factual: The `bb8` crate is agnostic to the type of connection it manages, allowing developers to implement custom logic for specific databases by using the `ManageConnection` trait.  \n\u274c Counterfactual: The `bb8` crate only supports predefined connection types, such as PostgreSQL and MySQL, and does not allow customization for other databases.\n\n---\n\n### Pair 3: Error Handling\n\u2705 Factual: The `bb8` crate includes an `ErrorSink` trait that allows developers to handle errors generated during connection management, with a default implementation called `NopErrorSink` that does nothing.  \n\u274c Counterfactual: The `bb8` crate automatically logs all connection errors to the console and does not provide a mechanism for customizing error handling behavior.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}