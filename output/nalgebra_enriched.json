{
    "name": "nalgebra",
    "version": "0.33.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/nalgebra/latest/nalgebra/all.html \"show sidebar\")\n# Crate nalgebraCopy item path\n[Settings](https://docs.rs/nalgebra/latest/settings.html)\n[Help](https://docs.rs/nalgebra/latest/help.html)\nSummary[Source](https://docs.rs/nalgebra/latest/src/nalgebra/lib.rs.html#1-549)\nExpand description\n## [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#nalgebra)nalgebra\n**nalgebra** is a linear algebra library written for Rust targeting:\n  * General-purpose linear algebra (still lacks a lot of features\u2026)\n  * Real-time computer graphics.\n  * Real-time computer physics.\n\n\n### [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#using-nalgebra)Using **nalgebra**\nYou will need the last stable build of the [rust compiler](https://www.rust-lang.org) and the official package manager: [cargo](https://github.com/rust-lang/cargo).\nSimply add the following to your `Cargo.toml` file:\n[\u24d8](https://docs.rs/nalgebra/latest/nalgebra/ \"This example is not tested\")```\n[dependencies]\n// TODO: replace the * by the latest version.\nnalgebra = \"*\"\n```\n\nMost useful functionalities of **nalgebra** are grouped in the root module `nalgebra::`.\nHowever, the recommended way to use **nalgebra** is to import types and traits explicitly, and call free-functions using the `na::` prefix:\n```\n#[macro_use]\nextern crate approx; // For the macro assert_relative_eq!\nextern crate nalgebra as na;\nuse na::{Vector3, Rotation3};\nfn main() {\n  let axis = Vector3::x_axis();\n  let angle = 1.57;\n  let b   = Rotation3::from_axis_angle(&axis, angle);\n  assert_relative_eq!(b.axis().unwrap(), axis);\n  assert_relative_eq!(b.angle(), angle);\n}\n```\n\n### [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#features)Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with an optimized set of tools for computer graphics and physics. Those features include:\n  * A single parametrizable type [`Matrix`](https://docs.rs/nalgebra/latest/nalgebra/base/struct.Matrix.html \"struct nalgebra::base::Matrix\") for vectors, (square or rectangular) matrices, and slices with dimensions known either at compile-time (using type-level integers) or at runtime.\n  * Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are allocated on the heap.\n  * Convenient aliases for low-dimensional matrices and vectors: [`Vector1`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector1.html \"type nalgebra::base::Vector1\") to [`Vector6`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector6.html \"type nalgebra::base::Vector6\") and [`Matrix1x1`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix1.html \"type nalgebra::base::Matrix1\") to [`Matrix6x6`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix6.html \"type nalgebra::base::Matrix6\"), including rectangular matrices like [`Matrix2x5`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix2x5.html \"type nalgebra::base::Matrix2x5\").\n  * Points sizes known at compile time, and convenience aliases: [`Point1`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point1.html \"type nalgebra::geometry::Point1\") to [`Point6`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point6.html \"type nalgebra::geometry::Point6\").\n  * Translation (seen as a transformation that composes by multiplication): [`Translation2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation2.html \"type nalgebra::geometry::Translation2\"), [`Translation3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation3.html \"type nalgebra::geometry::Translation3\").\n  * Rotation matrices: [`Rotation2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation2.html \"type nalgebra::geometry::Rotation2\"), [`Rotation3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation3.html \"type nalgebra::geometry::Rotation3\").\n  * Quaternions: [`Quaternion`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Quaternion.html \"struct nalgebra::geometry::Quaternion\"), [`UnitQuaternion`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitQuaternion.html \"type nalgebra::geometry::UnitQuaternion\") (for 3D rotation).\n  * Unit complex numbers can be used for 2D rotation: [`UnitComplex`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitComplex.html \"type nalgebra::geometry::UnitComplex\").\n  * Algebraic entities with a norm equal to one: [`Unit<T>`](https://docs.rs/nalgebra/latest/nalgebra/base/struct.Unit.html \"struct nalgebra::base::Unit\"), e.g., `Unit<Vector3<f32>>`.\n  * Isometries (translation \u2a2f rotation): [`Isometry2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry2.html \"type nalgebra::geometry::Isometry2\"), [`Isometry3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry3.html \"type nalgebra::geometry::Isometry3\")\n  * Similarity transformations (translation \u2a2f rotation \u2a2f uniform scale): [`Similarity2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity2.html \"type nalgebra::geometry::Similarity2\"), [`Similarity3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity3.html \"type nalgebra::geometry::Similarity3\").\n  * Affine transformations stored as a homogeneous matrix: [`Affine2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine2.html \"type nalgebra::geometry::Affine2\"), [`Affine3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine3.html \"type nalgebra::geometry::Affine3\").\n  * Projective (i.e. invertible) transformations stored as a homogeneous matrix: [`Projective2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective2.html \"type nalgebra::geometry::Projective2\"), [`Projective3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective3.html \"type nalgebra::geometry::Projective3\").\n  * General transformations that does not have to be invertible, stored as a homogeneous matrix: [`Transform2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform2.html \"type nalgebra::geometry::Transform2\"), [`Transform3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform3.html \"type nalgebra::geometry::Transform3\").\n  * 3D projections for computer graphics: [`Perspective3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Perspective3.html \"struct nalgebra::geometry::Perspective3\"), [`Orthographic3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Orthographic3.html \"struct nalgebra::geometry::Orthographic3\").\n  * Matrix factorizations: [`Cholesky`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Cholesky.html \"struct nalgebra::linalg::Cholesky\"), [`QR`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.QR.html \"struct nalgebra::linalg::QR\"), [`LU`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.LU.html \"struct nalgebra::linalg::LU\"), [`FullPivLU`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.FullPivLU.html \"struct nalgebra::linalg::FullPivLU\"), [`SVD`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SVD.html \"struct nalgebra::linalg::SVD\"), [`Schur`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Schur.html \"struct nalgebra::linalg::Schur\"), [`Hessenberg`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Hessenberg.html \"struct nalgebra::linalg::Hessenberg\"), [`SymmetricEigen`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SymmetricEigen.html \"struct nalgebra::linalg::SymmetricEigen\").\n  * Insertion and removal of rows of columns of a matrix.\n\n\n## Re-exports[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#reexports)\n\n`pub use base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\") as core;`\n\n\n`pub use crate::base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")::*;`\n\n\n`pub use crate::geometry[](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")::*;`\n\n\n`pub use crate::linalg[](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")::*;`\n\n\n`pub use crate::sparse[](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")::*;`\n\n## Modules[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#modules)\n\n[base](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")\n    [Reexported at the root of this crate.] Data structures for vector and matrix computations.\n\n[debug](https://docs.rs/nalgebra/latest/nalgebra/debug/index.html \"mod nalgebra::debug\")\n    Various tools useful for testing/debugging/benchmarking.\n\n[geometry](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")\n    [Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)\n\n[io](https://docs.rs/nalgebra/latest/nalgebra/io/index.html \"mod nalgebra::io\")\n    Parsers for various matrix formats.\n\n[linalg](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")\n    [Reexported at the root of this crate.] Factorization of real matrices.\n\n[proptest](https://docs.rs/nalgebra/latest/nalgebra/proptest/index.html \"mod nalgebra::proptest\")\n    `proptest`-related features for `nalgebra` data structures.\n\n[sparse](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")\n    Sparse matrices.\n## Macros[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#macros)\n\n[dmatrix](https://docs.rs/nalgebra/latest/nalgebra/macro.dmatrix.html \"macro nalgebra::dmatrix\")\n    Construct a dynamic matrix directly from data.\n\n[dvector](https://docs.rs/nalgebra/latest/nalgebra/macro.dvector.html \"macro nalgebra::dvector\")\n    Construct a dynamic column vector directly from data.\n\n[matrix](https://docs.rs/nalgebra/latest/nalgebra/macro.matrix.html \"macro nalgebra::matrix\")\n    Construct a fixed-size matrix directly from data.\n\n[point](https://docs.rs/nalgebra/latest/nalgebra/macro.point.html \"macro nalgebra::point\")\n    Construct a fixed-size point directly from data.\n\n[stack](https://docs.rs/nalgebra/latest/nalgebra/macro.stack.html \"macro nalgebra::stack\")\n    Construct a new matrix by stacking matrices in a block matrix.\n\n[vector](https://docs.rs/nalgebra/latest/nalgebra/macro.vector.html \"macro nalgebra::vector\")\n    Construct a fixed-size column vector directly from data.\n## Structs[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#structs)\n\n[Complex](https://docs.rs/nalgebra/latest/nalgebra/struct.Complex.html \"struct nalgebra::Complex\")\n    A complex number in Cartesian form.\n## Traits[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#traits)\n\n[ClosedAddAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedAddAssign.html \"trait nalgebra::ClosedAddAssign\")\n    Trait **alias** for `Add` and `AddAssign` with result of type `Self`.\n\n[ClosedDivAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedDivAssign.html \"trait nalgebra::ClosedDivAssign\")\n    Trait **alias** for `Div` and `DivAssign` with result of type `Self`.\n\n[ClosedMulAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedMulAssign.html \"trait nalgebra::ClosedMulAssign\")\n    Trait **alias** for `Mul` and `MulAssign` with result of type `Self`.\n\n[ClosedSubAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedSubAssign.html \"trait nalgebra::ClosedSubAssign\")\n    Trait **alias** for `Sub` and `SubAssign` with result of type `Self`.\n\n[ComplexField](https://docs.rs/nalgebra/latest/nalgebra/trait.ComplexField.html \"trait nalgebra::ComplexField\")\n    Trait shared by all complex fields and its subfields (like real numbers).\n\n[Field](https://docs.rs/nalgebra/latest/nalgebra/trait.Field.html \"trait nalgebra::Field\")\n    Trait implemented by fields, i.e., complex numbers and floats.\n\n[RealField](https://docs.rs/nalgebra/latest/nalgebra/trait.RealField.html \"trait nalgebra::RealField\")\n    Trait shared by all reals.\n\n[SimdBool](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdBool.html \"trait nalgebra::SimdBool\")\n    Lane-wise generalization of `bool` for SIMD booleans.\n\n[SimdComplexField](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdComplexField.html \"trait nalgebra::SimdComplexField\")\n    Lane-wise generalisation of `ComplexField` for SIMD complex fields.\n\n[SimdPartialOrd](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdPartialOrd.html \"trait nalgebra::SimdPartialOrd\")\n    Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n\n[SimdRealField](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdRealField.html \"trait nalgebra::SimdRealField\")\n    Lanewise generalization of `RealField` for SIMD reals.\n\n[SimdValue](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdValue.html \"trait nalgebra::SimdValue\")\n    Base trait for every SIMD types.\n## Functions[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#functions)\n\n[abs](https://docs.rs/nalgebra/latest/nalgebra/fn.abs.html \"fn nalgebra::abs\")Deprecated\n    The absolute value of `a`.\n\n[center](https://docs.rs/nalgebra/latest/nalgebra/fn.center.html \"fn nalgebra::center\")\n    The center of two points.\n\n[clamp](https://docs.rs/nalgebra/latest/nalgebra/fn.clamp.html \"fn nalgebra::clamp\")\n    Returns a reference to the input value clamped to the interval `[min, max]`.\n\n[convert](https://docs.rs/nalgebra/latest/nalgebra/fn.convert.html \"fn nalgebra::convert\")\n    Converts an object from one type to an equivalent or more general one.\n\n[convert_ref](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref.html \"fn nalgebra::convert_ref\")\n    Converts an object from one type to an equivalent or more general one.\n\n[convert_ref_unchecked](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref_unchecked.html \"fn nalgebra::convert_ref_unchecked\")\n    Use with care! Same as [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") but without any property checks.\n\n[convert_unchecked](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_unchecked.html \"fn nalgebra::convert_unchecked\")\n    Use with care! Same as [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") but without any property checks.\n\n[distance](https://docs.rs/nalgebra/latest/nalgebra/fn.distance.html \"fn nalgebra::distance\")\n    The distance between two points.\n\n[distance_squared](https://docs.rs/nalgebra/latest/nalgebra/fn.distance_squared.html \"fn nalgebra::distance_squared\")\n    The squared distance between two points.\n\n[inf](https://docs.rs/nalgebra/latest/nalgebra/fn.inf.html \"fn nalgebra::inf\")Deprecated\n    Returns the infimum of `a` and `b`.\n\n[inf_sup](https://docs.rs/nalgebra/latest/nalgebra/fn.inf_sup.html \"fn nalgebra::inf_sup\")Deprecated\n    Returns simultaneously the infimum and supremum of `a` and `b`.\n\n[is_convertible](https://docs.rs/nalgebra/latest/nalgebra/fn.is_convertible.html \"fn nalgebra::is_convertible\")\n    Indicates if [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") will succeed without actually performing the conversion.\n\n[max](https://docs.rs/nalgebra/latest/nalgebra/fn.max.html \"fn nalgebra::max\")\n    Same as `cmp::max`.\n\n[min](https://docs.rs/nalgebra/latest/nalgebra/fn.min.html \"fn nalgebra::min\")\n    Same as `cmp::min`.\n\n[one](https://docs.rs/nalgebra/latest/nalgebra/fn.one.html \"fn nalgebra::one\")\n    Gets the multiplicative identity element.\n\n[partial_clamp](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_clamp.html \"fn nalgebra::partial_clamp\")\n    Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.\n\n[partial_cmp](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_cmp.html \"fn nalgebra::partial_cmp\")\n    Compare `a` and `b` using a partial ordering relation.\n\n[partial_ge](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_ge.html \"fn nalgebra::partial_ge\")\n    Returns `true` iff `a` and `b` are comparable and `a >= b`.\n\n[partial_gt](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_gt.html \"fn nalgebra::partial_gt\")\n    Returns `true` iff `a` and `b` are comparable and `a > b`.\n\n[partial_le](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_le.html \"fn nalgebra::partial_le\")\n    Returns `true` iff `a` and `b` are comparable and `a <= b`.\n\n[partial_lt](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_lt.html \"fn nalgebra::partial_lt\")\n    Returns `true` iff `a` and `b` are comparable and `a < b`.\n\n[partial_max](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_max.html \"fn nalgebra::partial_max\")\n    Return the maximum of `a` and `b` if they are comparable.\n\n[partial_min](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_min.html \"fn nalgebra::partial_min\")\n    Return the minimum of `a` and `b` if they are comparable.\n\n[partial_sort2](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_sort2.html \"fn nalgebra::partial_sort2\")\n    Sorts two values in increasing order using a partial ordering.\n\n[sup](https://docs.rs/nalgebra/latest/nalgebra/fn.sup.html \"fn nalgebra::sup\")Deprecated\n    Returns the supremum of `a` and `b`.\n\n[try_convert](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\")\n    Attempts to convert an object to a more specific one.\n\n[try_convert_ref](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert_ref.html \"fn nalgebra::try_convert_ref\")\n    Attempts to convert an object to a more specific one.\n\n[wrap](https://docs.rs/nalgebra/latest/nalgebra/fn.wrap.html \"fn nalgebra::wrap\")\n    Wraps `val` into the range `[min, max]` using modular arithmetics.\n\n[zero](https://docs.rs/nalgebra/latest/nalgebra/fn.zero.html \"fn nalgebra::zero\")\n    Gets the additive identity element.\n",
        "markdown_with_citations": "[](https://docs.rs/nalgebra/latest/nalgebra/all.html \"show sidebar\")\n# Crate nalgebraCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9nalgebra\n**nalgebra** is a linear algebra library written for Rust targeting:\n  * General-purpose linear algebra (still lacks a lot of features\u2026)\n  * Real-time computer graphics.\n  * Real-time computer physics.\n\n\n### \u00a7\u27e85\u27e9Using **nalgebra**\nYou will need the last stable build of the rust compiler\u27e86\u27e9 and the official package manager: cargo\u27e87\u27e9.\nSimply add the following to your `Cargo.toml` file:\n\u24d8\u27e88\u27e9```\n[dependencies]\n// TODO: replace the * by the latest version.\nnalgebra = \"*\"\n```\n\nMost useful functionalities of **nalgebra** are grouped in the root module `nalgebra::`.\nHowever, the recommended way to use **nalgebra** is to import types and traits explicitly, and call free-functions using the `na::` prefix:\n```\n#[macro_use]\nextern crate approx; // For the macro assert_relative_eq!\nextern crate nalgebra as na;\nuse na::{Vector3, Rotation3};\nfn main() {\n  let axis = Vector3::x_axis();\n  let angle = 1.57;\n  let b   = Rotation3::from_axis_angle(&axis, angle);\n  assert_relative_eq!(b.axis().unwrap(), axis);\n  assert_relative_eq!(b.angle(), angle);\n}\n```\n\n### \u00a7\u27e89\u27e9Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with an optimized set of tools for computer graphics and physics. Those features include:\n  * A single parametrizable type `Matrix`\u27e810\u27e9 for vectors, (square or rectangular) matrices, and slices with dimensions known either at compile-time (using type-level integers) or at runtime.\n  * Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are allocated on the heap.\n  * Convenient aliases for low-dimensional matrices and vectors: `Vector1`\u27e811\u27e9 to `Vector6`\u27e812\u27e9 and `Matrix1x1`\u27e813\u27e9 to `Matrix6x6`\u27e814\u27e9, including rectangular matrices like `Matrix2x5`\u27e815\u27e9.\n  * Points sizes known at compile time, and convenience aliases: `Point1`\u27e816\u27e9 to `Point6`\u27e817\u27e9.\n  * Translation (seen as a transformation that composes by multiplication): `Translation2`\u27e818\u27e9, `Translation3`\u27e819\u27e9.\n  * Rotation matrices: `Rotation2`\u27e820\u27e9, `Rotation3`\u27e821\u27e9.\n  * Quaternions: `Quaternion`\u27e822\u27e9, `UnitQuaternion`\u27e823\u27e9 (for 3D rotation).\n  * Unit complex numbers can be used for 2D rotation: `UnitComplex`\u27e824\u27e9.\n  * Algebraic entities with a norm equal to one: `Unit<T>`\u27e825\u27e9, e.g., `Unit<Vector3<f32>>`.\n  * Isometries (translation \u2a2f rotation): `Isometry2`\u27e826\u27e9, `Isometry3`\u27e827\u27e9\n  * Similarity transformations (translation \u2a2f rotation \u2a2f uniform scale): `Similarity2`\u27e828\u27e9, `Similarity3`\u27e829\u27e9.\n  * Affine transformations stored as a homogeneous matrix: `Affine2`\u27e830\u27e9, `Affine3`\u27e831\u27e9.\n  * Projective (i.e. invertible) transformations stored as a homogeneous matrix: `Projective2`\u27e832\u27e9, `Projective3`\u27e833\u27e9.\n  * General transformations that does not have to be invertible, stored as a homogeneous matrix: `Transform2`\u27e834\u27e9, `Transform3`\u27e835\u27e9.\n  * 3D projections for computer graphics: `Perspective3`\u27e836\u27e9, `Orthographic3`\u27e837\u27e9.\n  * Matrix factorizations: `Cholesky`\u27e838\u27e9, `QR`\u27e839\u27e9, `LU`\u27e840\u27e9, `FullPivLU`\u27e841\u27e9, `SVD`\u27e842\u27e9, `Schur`\u27e843\u27e9, `Hessenberg`\u27e844\u27e9, `SymmetricEigen`\u27e845\u27e9.\n  * Insertion and removal of rows of columns of a matrix.\n\n\n## Re-exports\u00a7\u27e846\u27e9\n\n`pub use base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\") as core;`\n\n\n`pub use crate::base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")::*;`\n\n\n`pub use crate::geometry[](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")::*;`\n\n\n`pub use crate::linalg[](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")::*;`\n\n\n`pub use crate::sparse[](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")::*;`\n\n## Modules\u00a7\u27e847\u27e9\n\nbase\u27e848\u27e9\n    [Reexported at the root of this crate.] Data structures for vector and matrix computations.\n\ndebug\u27e849\u27e9\n    Various tools useful for testing/debugging/benchmarking.\n\ngeometry\u27e850\u27e9\n    [Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)\n\nio\u27e851\u27e9\n    Parsers for various matrix formats.\n\nlinalg\u27e852\u27e9\n    [Reexported at the root of this crate.] Factorization of real matrices.\n\nproptest\u27e853\u27e9\n    `proptest`-related features for `nalgebra` data structures.\n\nsparse\u27e854\u27e9\n    Sparse matrices.\n## Macros\u00a7\u27e855\u27e9\n\ndmatrix\u27e856\u27e9\n    Construct a dynamic matrix directly from data.\n\ndvector\u27e857\u27e9\n    Construct a dynamic column vector directly from data.\n\nmatrix\u27e858\u27e9\n    Construct a fixed-size matrix directly from data.\n\npoint\u27e859\u27e9\n    Construct a fixed-size point directly from data.\n\nstack\u27e860\u27e9\n    Construct a new matrix by stacking matrices in a block matrix.\n\nvector\u27e861\u27e9\n    Construct a fixed-size column vector directly from data.\n## Structs\u00a7\u27e862\u27e9\n\nComplex\u27e863\u27e9\n    A complex number in Cartesian form.\n## Traits\u00a7\u27e864\u27e9\n\nClosedAddAssign\u27e865\u27e9\n    Trait **alias** for `Add` and `AddAssign` with result of type `Self`.\n\nClosedDivAssign\u27e866\u27e9\n    Trait **alias** for `Div` and `DivAssign` with result of type `Self`.\n\nClosedMulAssign\u27e867\u27e9\n    Trait **alias** for `Mul` and `MulAssign` with result of type `Self`.\n\nClosedSubAssign\u27e868\u27e9\n    Trait **alias** for `Sub` and `SubAssign` with result of type `Self`.\n\nComplexField\u27e869\u27e9\n    Trait shared by all complex fields and its subfields (like real numbers).\n\nField\u27e870\u27e9\n    Trait implemented by fields, i.e., complex numbers and floats.\n\nRealField\u27e871\u27e9\n    Trait shared by all reals.\n\nSimdBool\u27e872\u27e9\n    Lane-wise generalization of `bool` for SIMD booleans.\n\nSimdComplexField\u27e873\u27e9\n    Lane-wise generalisation of `ComplexField` for SIMD complex fields.\n\nSimdPartialOrd\u27e874\u27e9\n    Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n\nSimdRealField\u27e875\u27e9\n    Lanewise generalization of `RealField` for SIMD reals.\n\nSimdValue\u27e876\u27e9\n    Base trait for every SIMD types.\n## Functions\u00a7\u27e877\u27e9\n\nabs\u27e878\u27e9Deprecated\n    The absolute value of `a`.\n\ncenter\u27e879\u27e9\n    The center of two points.\n\nclamp\u27e880\u27e9\n    Returns a reference to the input value clamped to the interval `[min, max]`.\n\nconvert\u27e881\u27e9\n    Converts an object from one type to an equivalent or more general one.\n\nconvert_ref\u27e882\u27e9\n    Converts an object from one type to an equivalent or more general one.\n\nconvert_ref_unchecked\u27e883\u27e9\n    Use with care! Same as `try_convert()`\u27e884\u27e9 but without any property checks.\n\nconvert_unchecked\u27e885\u27e9\n    Use with care! Same as `try_convert()`\u27e884\u27e9 but without any property checks.\n\ndistance\u27e886\u27e9\n    The distance between two points.\n\ndistance_squared\u27e887\u27e9\n    The squared distance between two points.\n\ninf\u27e888\u27e9Deprecated\n    Returns the infimum of `a` and `b`.\n\ninf_sup\u27e889\u27e9Deprecated\n    Returns simultaneously the infimum and supremum of `a` and `b`.\n\nis_convertible\u27e890\u27e9\n    Indicates if `try_convert()`\u27e884\u27e9 will succeed without actually performing the conversion.\n\nmax\u27e891\u27e9\n    Same as `cmp::max`.\n\nmin\u27e892\u27e9\n    Same as `cmp::min`.\n\none\u27e893\u27e9\n    Gets the multiplicative identity element.\n\npartial_clamp\u27e894\u27e9\n    Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.\n\npartial_cmp\u27e895\u27e9\n    Compare `a` and `b` using a partial ordering relation.\n\npartial_ge\u27e896\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a >= b`.\n\npartial_gt\u27e897\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a > b`.\n\npartial_le\u27e898\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a <= b`.\n\npartial_lt\u27e899\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a < b`.\n\npartial_max\u27e8100\u27e9\n    Return the maximum of `a` and `b` if they are comparable.\n\npartial_min\u27e8101\u27e9\n    Return the minimum of `a` and `b` if they are comparable.\n\npartial_sort2\u27e8102\u27e9\n    Sorts two values in increasing order using a partial ordering.\n\nsup\u27e8103\u27e9Deprecated\n    Returns the supremum of `a` and `b`.\n\ntry_convert\u27e884\u27e9\n    Attempts to convert an object to a more specific one.\n\ntry_convert_ref\u27e8104\u27e9\n    Attempts to convert an object to a more specific one.\n\nwrap\u27e8105\u27e9\n    Wraps `val` into the range `[min, max]` using modular arithmetics.\n\nzero\u27e8106\u27e9\n    Gets the additive identity element.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/nalgebra/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/nalgebra/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/nalgebra/latest/src/nalgebra/lib.rs.html#1-549: Source\n\u27e84\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#nalgebra: \u00a7\n\u27e85\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#using-nalgebra: \u00a7\n\u27e86\u27e9 https://www.rust-lang.org: rust compiler\n\u27e87\u27e9 https://github.com/rust-lang/cargo: cargo\n\u27e88\u27e9 https://docs.rs/nalgebra/latest/nalgebra/: This example is not tested - \u24d8\n\u27e89\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#features: \u00a7\n\u27e810\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/struct.Matrix.html: struct nalgebra::base::Matrix - `Matrix`\n\u27e811\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector1.html: type nalgebra::base::Vector1 - `Vector1`\n\u27e812\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector6.html: type nalgebra::base::Vector6 - `Vector6`\n\u27e813\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix1.html: type nalgebra::base::Matrix1 - `Matrix1x1`\n\u27e814\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix6.html: type nalgebra::base::Matrix6 - `Matrix6x6`\n\u27e815\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix2x5.html: type nalgebra::base::Matrix2x5 - `Matrix2x5`\n\u27e816\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point1.html: type nalgebra::geometry::Point1 - `Point1`\n\u27e817\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point6.html: type nalgebra::geometry::Point6 - `Point6`\n\u27e818\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation2.html: type nalgebra::geometry::Translation2 - `Translation2`\n\u27e819\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation3.html: type nalgebra::geometry::Translation3 - `Translation3`\n\u27e820\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation2.html: type nalgebra::geometry::Rotation2 - `Rotation2`\n\u27e821\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation3.html: type nalgebra::geometry::Rotation3 - `Rotation3`\n\u27e822\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Quaternion.html: struct nalgebra::geometry::Quaternion - `Quaternion`\n\u27e823\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitQuaternion.html: type nalgebra::geometry::UnitQuaternion - `UnitQuaternion`\n\u27e824\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitComplex.html: type nalgebra::geometry::UnitComplex - `UnitComplex`\n\u27e825\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/struct.Unit.html: struct nalgebra::base::Unit - `Unit<T>`\n\u27e826\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry2.html: type nalgebra::geometry::Isometry2 - `Isometry2`\n\u27e827\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry3.html: type nalgebra::geometry::Isometry3 - `Isometry3`\n\u27e828\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity2.html: type nalgebra::geometry::Similarity2 - `Similarity2`\n\u27e829\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity3.html: type nalgebra::geometry::Similarity3 - `Similarity3`\n\u27e830\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine2.html: type nalgebra::geometry::Affine2 - `Affine2`\n\u27e831\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine3.html: type nalgebra::geometry::Affine3 - `Affine3`\n\u27e832\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective2.html: type nalgebra::geometry::Projective2 - `Projective2`\n\u27e833\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective3.html: type nalgebra::geometry::Projective3 - `Projective3`\n\u27e834\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform2.html: type nalgebra::geometry::Transform2 - `Transform2`\n\u27e835\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform3.html: type nalgebra::geometry::Transform3 - `Transform3`\n\u27e836\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Perspective3.html: struct nalgebra::geometry::Perspective3 - `Perspective3`\n\u27e837\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Orthographic3.html: struct nalgebra::geometry::Orthographic3 - `Orthographic3`\n\u27e838\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Cholesky.html: struct nalgebra::linalg::Cholesky - `Cholesky`\n\u27e839\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.QR.html: struct nalgebra::linalg::QR - `QR`\n\u27e840\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.LU.html: struct nalgebra::linalg::LU - `LU`\n\u27e841\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.FullPivLU.html: struct nalgebra::linalg::FullPivLU - `FullPivLU`\n\u27e842\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SVD.html: struct nalgebra::linalg::SVD - `SVD`\n\u27e843\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Schur.html: struct nalgebra::linalg::Schur - `Schur`\n\u27e844\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Hessenberg.html: struct nalgebra::linalg::Hessenberg - `Hessenberg`\n\u27e845\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SymmetricEigen.html: struct nalgebra::linalg::SymmetricEigen - `SymmetricEigen`\n\u27e846\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#reexports: \u00a7\n\u27e847\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#modules: \u00a7\n\u27e848\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/index.html: mod nalgebra::base - base\n\u27e849\u27e9 https://docs.rs/nalgebra/latest/nalgebra/debug/index.html: mod nalgebra::debug - debug\n\u27e850\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html: mod nalgebra::geometry - geometry\n\u27e851\u27e9 https://docs.rs/nalgebra/latest/nalgebra/io/index.html: mod nalgebra::io - io\n\u27e852\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html: mod nalgebra::linalg - linalg\n\u27e853\u27e9 https://docs.rs/nalgebra/latest/nalgebra/proptest/index.html: mod nalgebra::proptest - proptest\n\u27e854\u27e9 https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html: mod nalgebra::sparse - sparse\n\u27e855\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#macros: \u00a7\n\u27e856\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.dmatrix.html: macro nalgebra::dmatrix - dmatrix\n\u27e857\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.dvector.html: macro nalgebra::dvector - dvector\n\u27e858\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.matrix.html: macro nalgebra::matrix - matrix\n\u27e859\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.point.html: macro nalgebra::point - point\n\u27e860\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.stack.html: macro nalgebra::stack - stack\n\u27e861\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.vector.html: macro nalgebra::vector - vector\n\u27e862\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#structs: \u00a7\n\u27e863\u27e9 https://docs.rs/nalgebra/latest/nalgebra/struct.Complex.html: struct nalgebra::Complex - Complex\n\u27e864\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#traits: \u00a7\n\u27e865\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedAddAssign.html: trait nalgebra::ClosedAddAssign - ClosedAddAssign\n\u27e866\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedDivAssign.html: trait nalgebra::ClosedDivAssign - ClosedDivAssign\n\u27e867\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedMulAssign.html: trait nalgebra::ClosedMulAssign - ClosedMulAssign\n\u27e868\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedSubAssign.html: trait nalgebra::ClosedSubAssign - ClosedSubAssign\n\u27e869\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ComplexField.html: trait nalgebra::ComplexField - ComplexField\n\u27e870\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.Field.html: trait nalgebra::Field - Field\n\u27e871\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.RealField.html: trait nalgebra::RealField - RealField\n\u27e872\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdBool.html: trait nalgebra::SimdBool - SimdBool\n\u27e873\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdComplexField.html: trait nalgebra::SimdComplexField - SimdComplexField\n\u27e874\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdPartialOrd.html: trait nalgebra::SimdPartialOrd - SimdPartialOrd\n\u27e875\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdRealField.html: trait nalgebra::SimdRealField - SimdRealField\n\u27e876\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdValue.html: trait nalgebra::SimdValue - SimdValue\n\u27e877\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#functions: \u00a7\n\u27e878\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.abs.html: fn nalgebra::abs - abs\n\u27e879\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.center.html: fn nalgebra::center - center\n\u27e880\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.clamp.html: fn nalgebra::clamp - clamp\n\u27e881\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert.html: fn nalgebra::convert - convert\n\u27e882\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref.html: fn nalgebra::convert_ref - convert_ref\n\u27e883\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref_unchecked.html: fn nalgebra::convert_ref_unchecked - convert_ref_unchecked\n\u27e884\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html: fn nalgebra::try_convert - `try_convert()`\n\u27e885\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_unchecked.html: fn nalgebra::convert_unchecked - convert_unchecked\n\u27e886\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.distance.html: fn nalgebra::distance - distance\n\u27e887\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.distance_squared.html: fn nalgebra::distance_squared - distance_squared\n\u27e888\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.inf.html: fn nalgebra::inf - inf\n\u27e889\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.inf_sup.html: fn nalgebra::inf_sup - inf_sup\n\u27e890\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.is_convertible.html: fn nalgebra::is_convertible - is_convertible\n\u27e891\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.max.html: fn nalgebra::max - max\n\u27e892\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.min.html: fn nalgebra::min - min\n\u27e893\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.one.html: fn nalgebra::one - one\n\u27e894\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_clamp.html: fn nalgebra::partial_clamp - partial_clamp\n\u27e895\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_cmp.html: fn nalgebra::partial_cmp - partial_cmp\n\u27e896\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_ge.html: fn nalgebra::partial_ge - partial_ge\n\u27e897\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_gt.html: fn nalgebra::partial_gt - partial_gt\n\u27e898\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_le.html: fn nalgebra::partial_le - partial_le\n\u27e899\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_lt.html: fn nalgebra::partial_lt - partial_lt\n\u27e8100\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_max.html: fn nalgebra::partial_max - partial_max\n\u27e8101\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_min.html: fn nalgebra::partial_min - partial_min\n\u27e8102\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_sort2.html: fn nalgebra::partial_sort2 - partial_sort2\n\u27e8103\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.sup.html: fn nalgebra::sup - sup\n\u27e8104\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert_ref.html: fn nalgebra::try_convert_ref - try_convert_ref\n\u27e8105\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.wrap.html: fn nalgebra::wrap - wrap\n\u27e8106\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.zero.html: fn nalgebra::zero - zero\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `nalgebra` crate is a versatile linear algebra library for Rust, optimized for general-purpose computations, real-time computer graphics, and physics. It supports both statically and dynamically sized matrices and vectors, provides convenient aliases for low-dimensional entities, and includes advanced features like transformations (e.g., rotations, translations, isometries), matrix factorizations (e.g., QR, LU, SVD), and 3D projections. Additionally, it offers macros for constructing matrices, vectors, and points, making it a powerful tool for mathematical and graphical applications.",
    "feature_summary": null,
    "use_case": "AI",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Matrix Types and Allocation\n\u2705 **Factual:** `nalgebra` provides a single parametrizable `Matrix` type that supports both compile-time and runtime dimensions, where compile-time matrices are statically allocated and runtime matrices are heap-allocated.  \n\u274c **Counterfactual:** `nalgebra` only supports runtime-dimension matrices, and all matrices are heap-allocated regardless of their size.\n\n---\n\n### Pair 2: Rotation Representations\n\u2705 **Factual:** `nalgebra` supports 3D rotations using `Rotation3` matrices and `UnitQuaternion` for efficient quaternion-based rotations.  \n\u274c **Counterfactual:** `nalgebra` does not support quaternion-based rotations and relies solely on rotation matrices for all transformations.\n\n---\n\n### Pair 3: Sparse Matrix Support\n\u2705 **Factual:** `nalgebra` includes a `sparse` module for working with sparse matrices, enabling efficient storage and computation for matrices with many zero elements.  \n\u274c **Counterfactual:** `nalgebra` does not support sparse matrices and requires all matrices to be fully dense, regardless of sparsity.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}