{
    "name": "smallvec",
    "version": "2.0.0-alpha.11",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/smallvec/latest/smallvec/all.html \"show sidebar\")\n# Crate smallvecCopy item path\n[Settings](https://docs.rs/smallvec/latest/settings.html)\n[Help](https://docs.rs/smallvec/latest/help.html)\nSummary[Source](https://docs.rs/smallvec/latest/src/smallvec/lib.rs.html#7-2605)\nExpand description\nSmall vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations. This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.\n### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#no_std-support)`no_std` support\nBy default, `smallvec` does not depend on `std`. However, the optional `write` feature implements the `std::io::Write` trait for vectors of `u8`. When this feature is enabled, `smallvec` depends on `std`.\n### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#optional-features)Optional features\n#### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#serde)`serde`\nWhen this optional dependency is enabled, `SmallVec` implements the `serde::Serialize` and `serde::Deserialize` traits.\n#### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#write)`write`\nWhen this feature is enabled, `SmallVec<[u8; _]>` implements the `std::io::Write` trait. This feature is not compatible with `#![no_std]` programs.\n#### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#union)`union`\n**This feature requires Rust 1.49.**\nWhen the `union` feature is enabled `smallvec` will track its state (inline or spilled) without the use of an enum tag, reducing the size of the `smallvec` by one machine word. This means that there is potentially no space overhead compared to `Vec`. Note that `smallvec` can still be larger than `Vec` if the inline buffer is larger than two machine words.\nTo use this feature add `features = [\"union\"]` in the `smallvec` section of Cargo.toml. Note that this feature requires Rust 1.49.\nTracking issue: [rust-lang/rust#55149](https://github.com/rust-lang/rust/issues/55149)\n#### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#const_generics)`const_generics`\n**This feature requires Rust 1.51.**\nWhen this feature is enabled, `SmallVec` works with any arrays of any size, not just a fixed list of sizes.\n#### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#const_new)`const_new`\n**This feature requires Rust 1.51.**\nThis feature exposes the functions [`SmallVec::new_const`](https://docs.rs/smallvec/latest/smallvec/struct.SmallVec.html#method.new_const \"associated function smallvec::SmallVec::new_const\"), [`SmallVec::from_const`](https://docs.rs/smallvec/latest/smallvec/struct.SmallVec.html#method.from_const \"associated function smallvec::SmallVec::from_const\"), and [`smallvec_inline`](https://docs.rs/smallvec/latest/smallvec/macro.smallvec_inline.html \"macro smallvec::smallvec_inline\") which enables the `SmallVec` to be initialized from a const context. For details, see the [Rust Reference](https://doc.rust-lang.org/reference/const_eval.html#const-functions).\n#### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#drain_filter)`drain_filter`\n**This feature is unstable.** It may change to match the unstable `drain_filter` method in libstd.\nEnables the `drain_filter` method, which produces an iterator that calls a user-provided closure to determine which elements of the vector to remove and yield from the iterator.\n#### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#drain_keep_rest)`drain_keep_rest`\n**This feature is unstable.** It may change to match the unstable `drain_keep_rest` method in libstd.\nEnables the `DrainFilter::keep_rest` method.\n#### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#specialization)`specialization`\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\nWhen this feature is enabled, `SmallVec::from(slice)` has improved performance for slices of `Copy` types. (Without this feature, you can use `SmallVec::from_slice` to get optimal performance for `Copy` types.)\nTracking issue: [rust-lang/rust#31844](https://github.com/rust-lang/rust/issues/31844)\n#### [\u00a7](https://docs.rs/smallvec/latest/smallvec/#may_dangle)`may_dangle`\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\nThis feature makes the Rust compiler less strict about use of vectors that contain borrowed references. For details, see the [Rustonomicon](https://doc.rust-lang.org/1.42.0/nomicon/dropck.html#an-escape-hatch).\nTracking issue: [rust-lang/rust#34761](https://github.com/rust-lang/rust/issues/34761)\n## Macros[\u00a7](https://docs.rs/smallvec/latest/smallvec/#macros)\n\n[smallvec](https://docs.rs/smallvec/latest/smallvec/macro.smallvec.html \"macro smallvec::smallvec\")\n    Creates a [`SmallVec`](https://docs.rs/smallvec/latest/smallvec/struct.SmallVec.html \"struct smallvec::SmallVec\") containing the arguments.\n\n[smallvec_inline](https://docs.rs/smallvec/latest/smallvec/macro.smallvec_inline.html \"macro smallvec::smallvec_inline\")`const_new`\n    Creates an inline [`SmallVec`](https://docs.rs/smallvec/latest/smallvec/struct.SmallVec.html \"struct smallvec::SmallVec\") containing the arguments. This macro is enabled by the feature `const_new`.\n## Structs[\u00a7](https://docs.rs/smallvec/latest/smallvec/#structs)\n\n[Drain](https://docs.rs/smallvec/latest/smallvec/struct.Drain.html \"struct smallvec::Drain\")\n    An iterator that removes the items from a `SmallVec` and yields them by value.\n\n[DrainFilter](https://docs.rs/smallvec/latest/smallvec/struct.DrainFilter.html \"struct smallvec::DrainFilter\")\n    An iterator which uses a closure to determine if an element should be removed.\n\n[IntoIter](https://docs.rs/smallvec/latest/smallvec/struct.IntoIter.html \"struct smallvec::IntoIter\")\n    An iterator that consumes a `SmallVec` and yields its items by value.\n\n[SmallVec](https://docs.rs/smallvec/latest/smallvec/struct.SmallVec.html \"struct smallvec::SmallVec\")\n    A `Vec`-like container that can store a small number of elements inline.\n## Enums[\u00a7](https://docs.rs/smallvec/latest/smallvec/#enums)\n\n[CollectionAllocErr](https://docs.rs/smallvec/latest/smallvec/enum.CollectionAllocErr.html \"enum smallvec::CollectionAllocErr\")\n    Error type for APIs with fallible heap allocation\n## Traits[\u00a7](https://docs.rs/smallvec/latest/smallvec/#traits)\n\n[Array](https://docs.rs/smallvec/latest/smallvec/trait.Array.html \"trait smallvec::Array\")\n    Types that can be used as the backing store for a [`SmallVec`](https://docs.rs/smallvec/latest/smallvec/struct.SmallVec.html \"struct smallvec::SmallVec\").\n\n[ToSmallVec](https://docs.rs/smallvec/latest/smallvec/trait.ToSmallVec.html \"trait smallvec::ToSmallVec\")\n    Convenience trait for constructing a `SmallVec`\n",
        "markdown_with_citations": "[](https://docs.rs/smallvec/latest/smallvec/all.html \"show sidebar\")\n# Crate smallvecCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nSmall vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations. This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.\n### \u00a7\u27e84\u27e9`no_std` support\nBy default, `smallvec` does not depend on `std`. However, the optional `write` feature implements the `std::io::Write` trait for vectors of `u8`. When this feature is enabled, `smallvec` depends on `std`.\n### \u00a7\u27e85\u27e9Optional features\n#### \u00a7\u27e86\u27e9`serde`\nWhen this optional dependency is enabled, `SmallVec` implements the `serde::Serialize` and `serde::Deserialize` traits.\n#### \u00a7\u27e87\u27e9`write`\nWhen this feature is enabled, `SmallVec<[u8; _]>` implements the `std::io::Write` trait. This feature is not compatible with `#![no_std]` programs.\n#### \u00a7\u27e88\u27e9`union`\n**This feature requires Rust 1.49.**\nWhen the `union` feature is enabled `smallvec` will track its state (inline or spilled) without the use of an enum tag, reducing the size of the `smallvec` by one machine word. This means that there is potentially no space overhead compared to `Vec`. Note that `smallvec` can still be larger than `Vec` if the inline buffer is larger than two machine words.\nTo use this feature add `features = [\"union\"]` in the `smallvec` section of Cargo.toml. Note that this feature requires Rust 1.49.\nTracking issue: rust-lang/rust#55149\u27e89\u27e9\n#### \u00a7\u27e810\u27e9`const_generics`\n**This feature requires Rust 1.51.**\nWhen this feature is enabled, `SmallVec` works with any arrays of any size, not just a fixed list of sizes.\n#### \u00a7\u27e811\u27e9`const_new`\n**This feature requires Rust 1.51.**\nThis feature exposes the functions `SmallVec::new_const`\u27e812\u27e9, `SmallVec::from_const`\u27e813\u27e9, and `smallvec_inline`\u27e814\u27e9 which enables the `SmallVec` to be initialized from a const context. For details, see the Rust Reference\u27e815\u27e9.\n#### \u00a7\u27e816\u27e9`drain_filter`\n**This feature is unstable.** It may change to match the unstable `drain_filter` method in libstd.\nEnables the `drain_filter` method, which produces an iterator that calls a user-provided closure to determine which elements of the vector to remove and yield from the iterator.\n#### \u00a7\u27e817\u27e9`drain_keep_rest`\n**This feature is unstable.** It may change to match the unstable `drain_keep_rest` method in libstd.\nEnables the `DrainFilter::keep_rest` method.\n#### \u00a7\u27e818\u27e9`specialization`\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\nWhen this feature is enabled, `SmallVec::from(slice)` has improved performance for slices of `Copy` types. (Without this feature, you can use `SmallVec::from_slice` to get optimal performance for `Copy` types.)\nTracking issue: rust-lang/rust#31844\u27e819\u27e9\n#### \u00a7\u27e820\u27e9`may_dangle`\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\nThis feature makes the Rust compiler less strict about use of vectors that contain borrowed references. For details, see the Rustonomicon\u27e821\u27e9.\nTracking issue: rust-lang/rust#34761\u27e822\u27e9\n## Macros\u00a7\u27e823\u27e9\n\nsmallvec\u27e824\u27e9\n    Creates a `SmallVec`\u27e825\u27e9 containing the arguments.\n\nsmallvec_inline\u27e814\u27e9`const_new`\n    Creates an inline `SmallVec`\u27e825\u27e9 containing the arguments. This macro is enabled by the feature `const_new`.\n## Structs\u00a7\u27e826\u27e9\n\nDrain\u27e827\u27e9\n    An iterator that removes the items from a `SmallVec` and yields them by value.\n\nDrainFilter\u27e828\u27e9\n    An iterator which uses a closure to determine if an element should be removed.\n\nIntoIter\u27e829\u27e9\n    An iterator that consumes a `SmallVec` and yields its items by value.\n\nSmallVec\u27e825\u27e9\n    A `Vec`-like container that can store a small number of elements inline.\n## Enums\u00a7\u27e830\u27e9\n\nCollectionAllocErr\u27e831\u27e9\n    Error type for APIs with fallible heap allocation\n## Traits\u00a7\u27e832\u27e9\n\nArray\u27e833\u27e9\n    Types that can be used as the backing store for a `SmallVec`\u27e825\u27e9.\n\nToSmallVec\u27e834\u27e9\n    Convenience trait for constructing a `SmallVec`\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/smallvec/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/smallvec/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/smallvec/latest/src/smallvec/lib.rs.html#7-2605: Source\n\u27e84\u27e9 https://docs.rs/smallvec/latest/smallvec/#no_std-support: \u00a7\n\u27e85\u27e9 https://docs.rs/smallvec/latest/smallvec/#optional-features: \u00a7\n\u27e86\u27e9 https://docs.rs/smallvec/latest/smallvec/#serde: \u00a7\n\u27e87\u27e9 https://docs.rs/smallvec/latest/smallvec/#write: \u00a7\n\u27e88\u27e9 https://docs.rs/smallvec/latest/smallvec/#union: \u00a7\n\u27e89\u27e9 https://github.com/rust-lang/rust/issues/55149: rust-lang/rust#55149\n\u27e810\u27e9 https://docs.rs/smallvec/latest/smallvec/#const_generics: \u00a7\n\u27e811\u27e9 https://docs.rs/smallvec/latest/smallvec/#const_new: \u00a7\n\u27e812\u27e9 https://docs.rs/smallvec/latest/smallvec/struct.SmallVec.html#method.new_const: associated function smallvec::SmallVec::new_const - `SmallVec::new_const`\n\u27e813\u27e9 https://docs.rs/smallvec/latest/smallvec/struct.SmallVec.html#method.from_const: associated function smallvec::SmallVec::from_const - `SmallVec::from_const`\n\u27e814\u27e9 https://docs.rs/smallvec/latest/smallvec/macro.smallvec_inline.html: macro smallvec::smallvec_inline - `smallvec_inline`\n\u27e815\u27e9 https://doc.rust-lang.org/reference/const_eval.html#const-functions: Rust Reference\n\u27e816\u27e9 https://docs.rs/smallvec/latest/smallvec/#drain_filter: \u00a7\n\u27e817\u27e9 https://docs.rs/smallvec/latest/smallvec/#drain_keep_rest: \u00a7\n\u27e818\u27e9 https://docs.rs/smallvec/latest/smallvec/#specialization: \u00a7\n\u27e819\u27e9 https://github.com/rust-lang/rust/issues/31844: rust-lang/rust#31844\n\u27e820\u27e9 https://docs.rs/smallvec/latest/smallvec/#may_dangle: \u00a7\n\u27e821\u27e9 https://doc.rust-lang.org/1.42.0/nomicon/dropck.html#an-escape-hatch: Rustonomicon\n\u27e822\u27e9 https://github.com/rust-lang/rust/issues/34761: rust-lang/rust#34761\n\u27e823\u27e9 https://docs.rs/smallvec/latest/smallvec/#macros: \u00a7\n\u27e824\u27e9 https://docs.rs/smallvec/latest/smallvec/macro.smallvec.html: macro smallvec::smallvec - smallvec\n\u27e825\u27e9 https://docs.rs/smallvec/latest/smallvec/struct.SmallVec.html: struct smallvec::SmallVec - `SmallVec`\n\u27e826\u27e9 https://docs.rs/smallvec/latest/smallvec/#structs: \u00a7\n\u27e827\u27e9 https://docs.rs/smallvec/latest/smallvec/struct.Drain.html: struct smallvec::Drain - Drain\n\u27e828\u27e9 https://docs.rs/smallvec/latest/smallvec/struct.DrainFilter.html: struct smallvec::DrainFilter - DrainFilter\n\u27e829\u27e9 https://docs.rs/smallvec/latest/smallvec/struct.IntoIter.html: struct smallvec::IntoIter - IntoIter\n\u27e830\u27e9 https://docs.rs/smallvec/latest/smallvec/#enums: \u00a7\n\u27e831\u27e9 https://docs.rs/smallvec/latest/smallvec/enum.CollectionAllocErr.html: enum smallvec::CollectionAllocErr - CollectionAllocErr\n\u27e832\u27e9 https://docs.rs/smallvec/latest/smallvec/#traits: \u00a7\n\u27e833\u27e9 https://docs.rs/smallvec/latest/smallvec/trait.Array.html: trait smallvec::Array - Array\n\u27e834\u27e9 https://docs.rs/smallvec/latest/smallvec/trait.ToSmallVec.html: trait smallvec::ToSmallVec - ToSmallVec\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `smallvec` crate provides a `Vec`-like container optimized for small collections by storing a fixed number of elements inline and falling back to heap allocation for larger sizes, improving cache locality and reducing allocator overhead. It supports `no_std` environments, optional features like `serde` for serialization, `const_generics` for flexible array sizes, and advanced features like `union` for reduced memory overhead. Additionally, it includes macros and iterators for efficient manipulation of elements.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 4.0,
    "factual_counterfactual": "### Pair 1: Inline Storage and Heap Allocation\n\u2705 Factual: `SmallVec` stores a fixed number of elements inline and falls back to heap allocation when the number of elements exceeds the inline buffer size, optimizing cache locality and reducing allocator traffic.  \n\u274c Counterfactual: `SmallVec` always stores elements inline, regardless of the number of elements, and never uses heap allocation.\n\n---\n\n### Pair 2: `no_std` Support\n\u2705 Factual: By default, `smallvec` is compatible with `no_std` environments, but enabling the `write` feature introduces a dependency on `std`.  \n\u274c Counterfactual: `smallvec` requires the `std` library by default and cannot be used in `no_std` environments.\n\n---\n\n### Pair 3: `union` Feature\n\u2705 Factual: The `union` feature reduces the size of `SmallVec` by removing the enum tag used to track its state, but requires Rust 1.49 or later.  \n\u274c Counterfactual: The `union` feature increases the size of `SmallVec` by adding extra metadata to track its state and does not require any specific Rust version.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}