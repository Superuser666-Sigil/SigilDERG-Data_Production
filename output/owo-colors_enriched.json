{
    "name": "owo-colors",
    "version": "4.2.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/owo-colors/latest/owo_colors/all.html \"show sidebar\")\n# Crate owo_colorsCopy item path\n[Settings](https://docs.rs/owo-colors/latest/settings.html)\n[Help](https://docs.rs/owo-colors/latest/help.html)\nSummary[Source](https://docs.rs/owo-colors/latest/src/owo_colors/lib.rs.html#1-544)\nExpand description\n**Quick Links**| [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\")| [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")| [`StyledList`](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\")| [`github`](https://github.com/owo-colors/owo-colors)  \n---|---|---|---|---  \nThis crate provides [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\"), an extension trait for colorizing a given type.\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#example)Example\n```\nuse owo_colors::OwoColorize;\n// Foreground colors\nprintln!(\"My number is {:#x}!\", 10.green());\n// Background colors\nprintln!(\"My number is not {}!\", 4.on_red());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#generically-color)Generically color\n```\nuse owo_colors::OwoColorize;\nuse owo_colors::colors::*;\n// Generically color\nprintln!(\"My number might be {}!\", 4.fg::<Black>().bg::<Yellow>());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#stylize)Stylize\n```\nuse owo_colors::OwoColorize;\nprintln!(\"{}\", \"strikethrough\".strikethrough());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#only-style-on-supported-terminals)Only Style on Supported Terminals\n```\nuse owo_colors::{OwoColorize, Stream::Stdout};\nprintln!(\n  \"{}\",\n  \"colored blue if a supported terminal\"\n    .if_supports_color(Stdout, |text| text.bright_blue())\n);\n```\n\nSupports `NO_COLOR`/`FORCE_COLOR` environment variables, checks if it\u2019s a tty, checks if it\u2019s running in CI (and thus likely supports color), and checks which terminal is being used. (Note: requires `supports-colors` feature)\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#style-objects)Style Objects\nowo-colors also features the ability to create a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\") object and use it to apply the same set of colors/effects to any number of things to display.\n```\nuse owo_colors::{OwoColorize, Style};\nlet my_style = Style::new()\n  .red()\n  .on_white()\n  .strikethrough();\nlet text = \"red text, white background, struck through\";\nprintln!(\"{}\", text.style(my_style));\n```\n\n## Modules[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#modules)\n\n[colored](https://docs.rs/owo-colors/latest/owo_colors/colored/index.html \"mod owo_colors::colored\")\n    Module for drop-in [`colored`](https://docs.rs/colored) support to aid in porting code from [`colored`](https://docs.rs/colored) to owo-colors.\n\n[colors](https://docs.rs/owo-colors/latest/owo_colors/colors/index.html \"mod owo_colors::colors\")\n    Color types for used for being generic over the color\n\n[styles](https://docs.rs/owo-colors/latest/owo_colors/styles/index.html \"mod owo_colors::styles\")\n    Different display styles (strikethrough, bold, etc.)\n## Structs[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#structs)\n\n[BgColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html \"struct owo_colors::BgColorDisplay\")\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Recommended to be constructed using [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\").\n\n[BgDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html \"struct owo_colors::BgDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Is not recommended unless compile-time coloring is not an option.\n\n[ComboColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.ComboColorDisplay.html \"struct owo_colors::ComboColorDisplay\")\n    A wrapper type which applies both a foreground and background color\n\n[ComboDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.ComboDynColorDisplay.html \"struct owo_colors::ComboDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground and background color.\n\n[FgColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html \"struct owo_colors::FgColorDisplay\")\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Recommended to be constructed using [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\").\n\n[FgDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html \"struct owo_colors::FgDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Is not recommended unless compile-time coloring is not an option.\n\n[ParseColorError](https://docs.rs/owo-colors/latest/owo_colors/struct.ParseColorError.html \"struct owo_colors::ParseColorError\")\n    An error for when the color can not be parsed from a string at runtime\n\n[Rgb](https://docs.rs/owo-colors/latest/owo_colors/struct.Rgb.html \"struct owo_colors::Rgb\")\n    Available RGB colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[Style](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")\n    A pre-computed style that can be applied to a struct using [`OwoColorize::style`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.style \"method owo_colors::OwoColorize::style\").\n\n[StylePrefixFormatter](https://docs.rs/owo-colors/latest/owo_colors/struct.StylePrefixFormatter.html \"struct owo_colors::StylePrefixFormatter\")\n    Formatter for the prefix of a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\").\n\n[StyleSuffixFormatter](https://docs.rs/owo-colors/latest/owo_colors/struct.StyleSuffixFormatter.html \"struct owo_colors::StyleSuffixFormatter\")\n    Formatter for the suffix of a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\").\n\n[Styled](https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html \"struct owo_colors::Styled\")\n    A wrapper type which applies a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\") when displaying the inner type\n\n[StyledList](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\")\n    A collection of [`Styled`](https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html \"struct owo_colors::Styled\") items that are displayed in such a way as to minimize the amount of characters that are written when displayed.\n\n[SupportsColorsDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.SupportsColorsDisplay.html \"struct owo_colors::SupportsColorsDisplay\")`supports-colors`\n    A display wrapper which applies a transformation based on if the given stream supports colored terminal output\n## Enums[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#enums)\n\n[AnsiColors](https://docs.rs/owo-colors/latest/owo_colors/enum.AnsiColors.html \"enum owo_colors::AnsiColors\")\n    Available standard ANSI colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[CssColors](https://docs.rs/owo-colors/latest/owo_colors/enum.CssColors.html \"enum owo_colors::CssColors\")\n    Available CSS colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[DynColors](https://docs.rs/owo-colors/latest/owo_colors/enum.DynColors.html \"enum owo_colors::DynColors\")\n    An enum describing runtime-configurable colors\n\n[Effect](https://docs.rs/owo-colors/latest/owo_colors/enum.Effect.html \"enum owo_colors::Effect\")\n    A runtime-configurable text effect for use with [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")\n\n[Stream](https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html \"enum owo_colors::Stream\")`supports-colors`\n    A possible stream source.\n\n[XtermColors](https://docs.rs/owo-colors/latest/owo_colors/enum.XtermColors.html \"enum owo_colors::XtermColors\")\n    Available Xterm colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n## Traits[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#traits)\n\n[Color](https://docs.rs/owo-colors/latest/owo_colors/trait.Color.html \"trait owo_colors::Color\")\n    A trait for describing a type which can be used with [`FgColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html \"struct owo_colors::FgColorDisplay\") or [`BgColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html \"struct owo_colors::BgColorDisplay\")\n\n[DynColor](https://docs.rs/owo-colors/latest/owo_colors/trait.DynColor.html \"trait owo_colors::DynColor\")\n    A trait describing a runtime-configurable color which can displayed using [`FgDynColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html \"struct owo_colors::FgDynColorDisplay\") or [`BgDynColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html \"struct owo_colors::BgDynColorDisplay\"). If your color will be known at compile time it is recommended you avoid this.\n\n[OwoColorize](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\")\n    Extension trait for colorizing a type which implements any std formatter ([`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\"), [`Debug`](https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html \"trait core::fmt::Debug\"), [`UpperHex`](https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html \"trait core::fmt::UpperHex\"), etc.)\n## Functions[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#functions)\n\n[set_override](https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html \"fn owo_colors::set_override\")`supports-colors`\n    Set an override value for whether or not colors are supported.\n\n[style](https://docs.rs/owo-colors/latest/owo_colors/fn.style.html \"fn owo_colors::style\")\n    Helper to create [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")s more ergonomically\n\n[unset_override](https://docs.rs/owo-colors/latest/owo_colors/fn.unset_override.html \"fn owo_colors::unset_override\")`supports-colors`\n    Remove any override value for whether or not colors are supported. This means [`if_supports_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.if_supports_color \"method owo_colors::OwoColorize::if_supports_color\") will resume checking if the given terminal output ([`Stream`](https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html \"enum owo_colors::Stream\")) supports colors.\n\n[with_override](https://docs.rs/owo-colors/latest/owo_colors/fn.with_override.html \"fn owo_colors::with_override\")`supports-colors`\n    Set an override value for whether or not colors are supported using [`set_override`](https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html \"fn owo_colors::set_override\") while executing the closure provided.\n## Type Aliases[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#types)\n\n[StyledVec](https://docs.rs/owo-colors/latest/owo_colors/type.StyledVec.html \"type owo_colors::StyledVec\")`alloc`\n    A helper alias for [`StyledList`](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\") for easier usage with [`alloc::vec::Vec`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\").\n",
        "markdown_with_citations": "[](https://docs.rs/owo-colors/latest/owo_colors/all.html \"show sidebar\")\n# Crate owo_colorsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n**Quick Links**| `OwoColorize`\u27e84\u27e9| `Style`\u27e85\u27e9| `StyledList`\u27e86\u27e9| `github`\u27e87\u27e9  \n---|---|---|---|---  \nThis crate provides `OwoColorize`\u27e84\u27e9, an extension trait for colorizing a given type.\n### \u00a7\u27e88\u27e9Example\n```\nuse owo_colors::OwoColorize;\n// Foreground colors\nprintln!(\"My number is {:#x}!\", 10.green());\n// Background colors\nprintln!(\"My number is not {}!\", 4.on_red());\n```\n\n### \u00a7\u27e89\u27e9Generically color\n```\nuse owo_colors::OwoColorize;\nuse owo_colors::colors::*;\n// Generically color\nprintln!(\"My number might be {}!\", 4.fg::<Black>().bg::<Yellow>());\n```\n\n### \u00a7\u27e810\u27e9Stylize\n```\nuse owo_colors::OwoColorize;\nprintln!(\"{}\", \"strikethrough\".strikethrough());\n```\n\n### \u00a7\u27e811\u27e9Only Style on Supported Terminals\n```\nuse owo_colors::{OwoColorize, Stream::Stdout};\nprintln!(\n  \"{}\",\n  \"colored blue if a supported terminal\"\n    .if_supports_color(Stdout, |text| text.bright_blue())\n);\n```\n\nSupports `NO_COLOR`/`FORCE_COLOR` environment variables, checks if it\u2019s a tty, checks if it\u2019s running in CI (and thus likely supports color), and checks which terminal is being used. (Note: requires `supports-colors` feature)\n### \u00a7\u27e812\u27e9Style Objects\nowo-colors also features the ability to create a `Style`\u27e85\u27e9 object and use it to apply the same set of colors/effects to any number of things to display.\n```\nuse owo_colors::{OwoColorize, Style};\nlet my_style = Style::new()\n  .red()\n  .on_white()\n  .strikethrough();\nlet text = \"red text, white background, struck through\";\nprintln!(\"{}\", text.style(my_style));\n```\n\n## Modules\u00a7\u27e813\u27e9\n\ncolored\u27e814\u27e9\n    Module for drop-in `colored`\u27e815\u27e9 support to aid in porting code from `colored`\u27e815\u27e9 to owo-colors.\n\ncolors\u27e816\u27e9\n    Color types for used for being generic over the color\n\nstyles\u27e817\u27e9\n    Different display styles (strikethrough, bold, etc.)\n## Structs\u00a7\u27e818\u27e9\n\nBgColorDisplay\u27e819\u27e9\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Recommended to be constructed using `OwoColorize`\u27e84\u27e9.\n\nBgDynColorDisplay\u27e820\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Is not recommended unless compile-time coloring is not an option.\n\nComboColorDisplay\u27e821\u27e9\n    A wrapper type which applies both a foreground and background color\n\nComboDynColorDisplay\u27e822\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground and background color.\n\nFgColorDisplay\u27e823\u27e9\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Recommended to be constructed using `OwoColorize`\u27e84\u27e9.\n\nFgDynColorDisplay\u27e824\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Is not recommended unless compile-time coloring is not an option.\n\nParseColorError\u27e825\u27e9\n    An error for when the color can not be parsed from a string at runtime\n\nRgb\u27e826\u27e9\n    Available RGB colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nStyle\u27e85\u27e9\n    A pre-computed style that can be applied to a struct using `OwoColorize::style`\u27e829\u27e9.\n\nStylePrefixFormatter\u27e830\u27e9\n    Formatter for the prefix of a `Style`\u27e85\u27e9.\n\nStyleSuffixFormatter\u27e831\u27e9\n    Formatter for the suffix of a `Style`\u27e85\u27e9.\n\nStyled\u27e832\u27e9\n    A wrapper type which applies a `Style`\u27e85\u27e9 when displaying the inner type\n\nStyledList\u27e86\u27e9\n    A collection of `Styled`\u27e832\u27e9 items that are displayed in such a way as to minimize the amount of characters that are written when displayed.\n\nSupportsColorsDisplay\u27e833\u27e9`supports-colors`\n    A display wrapper which applies a transformation based on if the given stream supports colored terminal output\n## Enums\u00a7\u27e834\u27e9\n\nAnsiColors\u27e835\u27e9\n    Available standard ANSI colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nCssColors\u27e836\u27e9\n    Available CSS colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nDynColors\u27e837\u27e9\n    An enum describing runtime-configurable colors\n\nEffect\u27e838\u27e9\n    A runtime-configurable text effect for use with `Style`\u27e85\u27e9\n\nStream\u27e839\u27e9`supports-colors`\n    A possible stream source.\n\nXtermColors\u27e840\u27e9\n    Available Xterm colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n## Traits\u00a7\u27e841\u27e9\n\nColor\u27e842\u27e9\n    A trait for describing a type which can be used with `FgColorDisplay`\u27e823\u27e9 or `BgColorDisplay`\u27e819\u27e9\n\nDynColor\u27e843\u27e9\n    A trait describing a runtime-configurable color which can displayed using `FgDynColorDisplay`\u27e824\u27e9 or `BgDynColorDisplay`\u27e820\u27e9. If your color will be known at compile time it is recommended you avoid this.\n\nOwoColorize\u27e84\u27e9\n    Extension trait for colorizing a type which implements any std formatter (`Display`\u27e844\u27e9, `Debug`\u27e845\u27e9, `UpperHex`\u27e846\u27e9, etc.)\n## Functions\u00a7\u27e847\u27e9\n\nset_override\u27e848\u27e9`supports-colors`\n    Set an override value for whether or not colors are supported.\n\nstyle\u27e849\u27e9\n    Helper to create `Style`\u27e85\u27e9s more ergonomically\n\nunset_override\u27e850\u27e9`supports-colors`\n    Remove any override value for whether or not colors are supported. This means `if_supports_color`\u27e851\u27e9 will resume checking if the given terminal output (`Stream`\u27e839\u27e9) supports colors.\n\nwith_override\u27e852\u27e9`supports-colors`\n    Set an override value for whether or not colors are supported using `set_override`\u27e848\u27e9 while executing the closure provided.\n## Type Aliases\u00a7\u27e853\u27e9\n\nStyledVec\u27e854\u27e9`alloc`\n    A helper alias for `StyledList`\u27e86\u27e9 for easier usage with `alloc::vec::Vec`\u27e855\u27e9.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/owo-colors/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/owo-colors/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/owo-colors/latest/src/owo_colors/lib.rs.html#1-544: Source\n\u27e84\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html: trait owo_colors::OwoColorize - `OwoColorize`\n\u27e85\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html: struct owo_colors::Style - `Style`\n\u27e86\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html: struct owo_colors::StyledList - `StyledList`\n\u27e87\u27e9 https://github.com/owo-colors/owo-colors: `github`\n\u27e88\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#example: \u00a7\n\u27e89\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#generically-color: \u00a7\n\u27e810\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#stylize: \u00a7\n\u27e811\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#only-style-on-supported-terminals: \u00a7\n\u27e812\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#style-objects: \u00a7\n\u27e813\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#modules: \u00a7\n\u27e814\u27e9 https://docs.rs/owo-colors/latest/owo_colors/colored/index.html: mod owo_colors::colored - colored\n\u27e815\u27e9 https://docs.rs/colored: `colored`\n\u27e816\u27e9 https://docs.rs/owo-colors/latest/owo_colors/colors/index.html: mod owo_colors::colors - colors\n\u27e817\u27e9 https://docs.rs/owo-colors/latest/owo_colors/styles/index.html: mod owo_colors::styles - styles\n\u27e818\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html: struct owo_colors::BgColorDisplay - BgColorDisplay\n\u27e820\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html: struct owo_colors::BgDynColorDisplay - BgDynColorDisplay\n\u27e821\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ComboColorDisplay.html: struct owo_colors::ComboColorDisplay - ComboColorDisplay\n\u27e822\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ComboDynColorDisplay.html: struct owo_colors::ComboDynColorDisplay - ComboDynColorDisplay\n\u27e823\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html: struct owo_colors::FgColorDisplay - FgColorDisplay\n\u27e824\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html: struct owo_colors::FgDynColorDisplay - FgDynColorDisplay\n\u27e825\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ParseColorError.html: struct owo_colors::ParseColorError - ParseColorError\n\u27e826\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Rgb.html: struct owo_colors::Rgb - Rgb\n\u27e827\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color: method owo_colors::OwoColorize::color - `OwoColorize::color`\n\u27e828\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color: method owo_colors::OwoColorize::on_color - `OwoColorize::on_color`\n\u27e829\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.style: method owo_colors::OwoColorize::style - `OwoColorize::style`\n\u27e830\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StylePrefixFormatter.html: struct owo_colors::StylePrefixFormatter - StylePrefixFormatter\n\u27e831\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StyleSuffixFormatter.html: struct owo_colors::StyleSuffixFormatter - StyleSuffixFormatter\n\u27e832\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html: struct owo_colors::Styled - Styled\n\u27e833\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.SupportsColorsDisplay.html: struct owo_colors::SupportsColorsDisplay - SupportsColorsDisplay\n\u27e834\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.AnsiColors.html: enum owo_colors::AnsiColors - AnsiColors\n\u27e836\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.CssColors.html: enum owo_colors::CssColors - CssColors\n\u27e837\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.DynColors.html: enum owo_colors::DynColors - DynColors\n\u27e838\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.Effect.html: enum owo_colors::Effect - Effect\n\u27e839\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html: enum owo_colors::Stream - Stream\n\u27e840\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.XtermColors.html: enum owo_colors::XtermColors - XtermColors\n\u27e841\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#traits: \u00a7\n\u27e842\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.Color.html: trait owo_colors::Color - Color\n\u27e843\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.DynColor.html: trait owo_colors::DynColor - DynColor\n\u27e844\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html: trait core::fmt::Debug - `Debug`\n\u27e846\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html: trait core::fmt::UpperHex - `UpperHex`\n\u27e847\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html: fn owo_colors::set_override - set_override\n\u27e849\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.style.html: fn owo_colors::style - style\n\u27e850\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.unset_override.html: fn owo_colors::unset_override - unset_override\n\u27e851\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.if_supports_color: method owo_colors::OwoColorize::if_supports_color - `if_supports_color`\n\u27e852\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.with_override.html: fn owo_colors::with_override - with_override\n\u27e853\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#types: \u00a7\n\u27e854\u27e9 https://docs.rs/owo-colors/latest/owo_colors/type.StyledVec.html: type owo_colors::StyledVec - StyledVec\n\u27e855\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `alloc::vec::Vec`\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `owo-colors` crate provides an ergonomic way to add text styling and terminal colors to Rust applications using the `OwoColorize` trait. It supports foreground and background colors, text effects (e.g., bold, strikethrough), and custom reusable styles via the `Style` struct. Additionally, it includes features for conditional styling based on terminal capabilities and environment variables like `NO_COLOR`/`FORCE_COLOR`.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1: Colorization Features\n\u2705 Factual: The `owo-colors` crate provides the `OwoColorize` trait, which allows users to apply foreground and background colors to text, as well as text effects like strikethrough and bold.  \n\u274c Counterfactual: The `owo-colors` crate only supports foreground colors and does not allow customization of background colors or text effects.\n\n---\n\n### Pair 2: Environment Variable Support\n\u2705 Factual: The crate supports the `NO_COLOR` and `FORCE_COLOR` environment variables to control whether color output is enabled or disabled.  \n\u274c Counterfactual: The crate does not support environment variables for controlling color output, requiring manual configuration in code.\n\n---\n\n### Pair 3: Terminal Compatibility\n\u2705 Factual: The `owo-colors` crate checks for terminal compatibility by verifying if the output is a TTY, running in CI, or using a supported terminal type, ensuring colors are applied only when supported.  \n\u274c Counterfactual: The `owo-colors` crate applies color styling indiscriminately, without checking whether the terminal supports colored output.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}