{
    "name": "arrayvec",
    "version": "0.7.6",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/arrayvec/latest/arrayvec/all.html \"show sidebar\")\n# Crate arrayvecCopy item path\n[Settings](https://docs.rs/arrayvec/latest/settings.html)\n[Help](https://docs.rs/arrayvec/latest/help.html)\nSummary[Source](https://docs.rs/arrayvec/latest/src/arrayvec/lib.rs.html#1-63)\nExpand description\n**arrayvec** provides the types [`ArrayVec`](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html \"struct arrayvec::ArrayVec\") and [`ArrayString`](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html \"struct arrayvec::ArrayString\"): array-backed vector and string types, which store their contents inline.\nThe arrayvec package has the following cargo features:\n  * `std`\n    * Optional, enabled by default\n    * Use libstd; disable to use `no_std` instead.\n  * `serde`\n    * Optional\n    * Enable serialization for ArrayVec and ArrayString using serde 1.x\n  * `zeroize`\n    * Optional\n    * Implement `Zeroize` for ArrayVec and ArrayString\n\n\n### [\u00a7](https://docs.rs/arrayvec/latest/arrayvec/#rust-version)Rust Version\nThis version of arrayvec requires Rust 1.51 or later.\n## Structs[\u00a7](https://docs.rs/arrayvec/latest/arrayvec/#structs)\n\n[ArrayString](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html \"struct arrayvec::ArrayString\")\n    A string with a fixed capacity.\n\n[ArrayVec](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html \"struct arrayvec::ArrayVec\")\n    A vector with a fixed capacity.\n\n[CapacityError](https://docs.rs/arrayvec/latest/arrayvec/struct.CapacityError.html \"struct arrayvec::CapacityError\")\n    Error value indicating insufficient capacity\n\n[Drain](https://docs.rs/arrayvec/latest/arrayvec/struct.Drain.html \"struct arrayvec::Drain\")\n    A draining iterator for `ArrayVec`.\n\n[IntoIter](https://docs.rs/arrayvec/latest/arrayvec/struct.IntoIter.html \"struct arrayvec::IntoIter\")\n    By-value iterator for `ArrayVec`.\n",
        "markdown_with_citations": "[](https://docs.rs/arrayvec/latest/arrayvec/all.html \"show sidebar\")\n# Crate arrayvecCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n**arrayvec** provides the types `ArrayVec`\u27e84\u27e9 and `ArrayString`\u27e85\u27e9: array-backed vector and string types, which store their contents inline.\nThe arrayvec package has the following cargo features:\n  * `std`\n    * Optional, enabled by default\n    * Use libstd; disable to use `no_std` instead.\n  * `serde`\n    * Optional\n    * Enable serialization for ArrayVec and ArrayString using serde 1.x\n  * `zeroize`\n    * Optional\n    * Implement `Zeroize` for ArrayVec and ArrayString\n\n\n### \u00a7\u27e86\u27e9Rust Version\nThis version of arrayvec requires Rust 1.51 or later.\n## Structs\u00a7\u27e87\u27e9\n\nArrayString\u27e85\u27e9\n    A string with a fixed capacity.\n\nArrayVec\u27e84\u27e9\n    A vector with a fixed capacity.\n\nCapacityError\u27e88\u27e9\n    Error value indicating insufficient capacity\n\nDrain\u27e89\u27e9\n    A draining iterator for `ArrayVec`.\n\nIntoIter\u27e810\u27e9\n    By-value iterator for `ArrayVec`.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/arrayvec/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/arrayvec/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/arrayvec/latest/src/arrayvec/lib.rs.html#1-63: Source\n\u27e84\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html: struct arrayvec::ArrayVec - `ArrayVec`\n\u27e85\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html: struct arrayvec::ArrayString - `ArrayString`\n\u27e86\u27e9 https://docs.rs/arrayvec/latest/arrayvec/#rust-version: \u00a7\n\u27e87\u27e9 https://docs.rs/arrayvec/latest/arrayvec/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.CapacityError.html: struct arrayvec::CapacityError - CapacityError\n\u27e89\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.Drain.html: struct arrayvec::Drain - Drain\n\u27e810\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.IntoIter.html: struct arrayvec::IntoIter - IntoIter\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `arrayvec` crate provides `ArrayVec` and `ArrayString`, which are array-backed vector and string types with fixed capacity, storing their contents inline for improved performance and memory efficiency. Key features include optional support for `std` (default), `serde` for serialization, and `zeroize` for secure data clearing. It requires Rust 1.51 or later and includes utilities like `CapacityError`, `Drain`, and `IntoIter` for enhanced functionality.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Fixed Capacity Types  \n\u2705 Factual: The `arrayvec` crate provides `ArrayVec` and `ArrayString`, which are array-backed types with a fixed capacity for storing vectors and strings inline.  \n\u274c Counterfactual: The `arrayvec` crate provides dynamically resizable vector and string types that automatically expand their capacity when needed.  \n\n---\n\n### Pair 2: `no_std` Compatibility  \n\u2705 Factual: The `arrayvec` crate supports `no_std` environments by disabling the default `std` feature.  \n\u274c Counterfactual: The `arrayvec` crate requires the `std` library and cannot be used in `no_std` environments.  \n\n---\n\n### Pair 3: Serialization Support  \n\u2705 Factual: The `arrayvec` crate offers optional support for serialization of `ArrayVec` and `ArrayString` via the `serde` feature.  \n\u274c Counterfactual: The `arrayvec` crate includes built-in serialization support for `ArrayVec` and `ArrayString` without requiring any additional features or dependencies.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}