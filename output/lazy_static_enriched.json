{
    "name": "lazy_static",
    "version": "1.5.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/lazy_static/latest/lazy_static/all.html \"show sidebar\")\n# Crate lazy_staticCopy item path\n[Settings](https://docs.rs/lazy_static/latest/settings.html)\n[Help](https://docs.rs/lazy_static/latest/help.html)\nSummary[Source](https://docs.rs/lazy_static/latest/src/lazy_static/lib.rs.html#8-208)\nExpand description\nA macro for declaring lazily evaluated statics.\nUsing this macro, it is possible to have `static`s that require code to be executed at runtime in order to be initialized. This includes anything requiring heap allocations, like vectors or hash maps, as well as anything that requires function calls to be computed.\n## [\u00a7](https://docs.rs/lazy_static/latest/lazy_static/#syntax)Syntax\n[\u24d8](https://docs.rs/lazy_static/latest/lazy_static/ \"This example is not tested\")```\nlazy_static! {\n  [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n  [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n  ...\n  [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n```\nuse lazy_static::lazy_static;\nlazy_static! {\n  /// This is an example for using doc comment attributes\n  static ref EXAMPLE: u8 = 42;\n}\n```\n\n## [\u00a7](https://docs.rs/lazy_static/latest/lazy_static/#semantics)Semantics\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that implements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up attaching to this type.)\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs can return a reference to the same object. Note that this can lead to deadlocks if you have multiple lazy statics that depend on each other in their initialization.\nApart from the lazy initialization, the resulting \u201cstatic ref\u201d variables have generally the same properties as regular \u201cstatic\u201d variables:\n  * Any type in them needs to fulfill the `Sync` trait.\n  * If the type has a destructor, then it will not run when the process exits.\n\n\n## [\u00a7](https://docs.rs/lazy_static/latest/lazy_static/#example)Example\nUsing the macro:\n```\nuse lazy_static::lazy_static;\nuse std::collections::HashMap;\nlazy_static! {\n  static ref HASHMAP: HashMap<u32, &'static str> = {\n    let mut m = HashMap::new();\n    m.insert(0, \"foo\");\n    m.insert(1, \"bar\");\n    m.insert(2, \"baz\");\n    m\n  };\n  static ref COUNT: usize = HASHMAP.len();\n  static ref NUMBER: u32 = times_two(21);\n}\nfn times_two(n: u32) -> u32 { n * 2 }\nfn main() {\n  println!(\"The map has {} entries.\", *COUNT);\n  println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n  println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n## [\u00a7](https://docs.rs/lazy_static/latest/lazy_static/#implementation-details)Implementation details\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n## [\u00a7](https://docs.rs/lazy_static/latest/lazy_static/#cargo-features)Cargo features\nThis crate provides one cargo feature:\n  * `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.\n\n\n## Macros[\u00a7](https://docs.rs/lazy_static/latest/lazy_static/#macros)\n\n[lazy_static](https://docs.rs/lazy_static/latest/lazy_static/macro.lazy_static.html \"macro lazy_static::lazy_static\")\n\n## Traits[\u00a7](https://docs.rs/lazy_static/latest/lazy_static/#traits)\n\n[LazyStatic](https://docs.rs/lazy_static/latest/lazy_static/trait.LazyStatic.html \"trait lazy_static::LazyStatic\")\n    Support trait for enabling a few common operation on lazy static values.\n## Functions[\u00a7](https://docs.rs/lazy_static/latest/lazy_static/#functions)\n\n[initialize](https://docs.rs/lazy_static/latest/lazy_static/fn.initialize.html \"fn lazy_static::initialize\")\n    Takes a shared reference to a lazy static and initializes it if it has not been already.\n",
        "markdown_with_citations": "[](https://docs.rs/lazy_static/latest/lazy_static/all.html \"show sidebar\")\n# Crate lazy_staticCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA macro for declaring lazily evaluated statics.\nUsing this macro, it is possible to have `static`s that require code to be executed at runtime in order to be initialized. This includes anything requiring heap allocations, like vectors or hash maps, as well as anything that requires function calls to be computed.\n## \u00a7\u27e84\u27e9Syntax\n\u24d8\u27e85\u27e9```\nlazy_static! {\n  [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n  [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n  ...\n  [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n```\nuse lazy_static::lazy_static;\nlazy_static! {\n  /// This is an example for using doc comment attributes\n  static ref EXAMPLE: u8 = 42;\n}\n```\n\n## \u00a7\u27e86\u27e9Semantics\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that implements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up attaching to this type.)\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs can return a reference to the same object. Note that this can lead to deadlocks if you have multiple lazy statics that depend on each other in their initialization.\nApart from the lazy initialization, the resulting \u201cstatic ref\u201d variables have generally the same properties as regular \u201cstatic\u201d variables:\n  * Any type in them needs to fulfill the `Sync` trait.\n  * If the type has a destructor, then it will not run when the process exits.\n\n\n## \u00a7\u27e87\u27e9Example\nUsing the macro:\n```\nuse lazy_static::lazy_static;\nuse std::collections::HashMap;\nlazy_static! {\n  static ref HASHMAP: HashMap<u32, &'static str> = {\n    let mut m = HashMap::new();\n    m.insert(0, \"foo\");\n    m.insert(1, \"bar\");\n    m.insert(2, \"baz\");\n    m\n  };\n  static ref COUNT: usize = HASHMAP.len();\n  static ref NUMBER: u32 = times_two(21);\n}\nfn times_two(n: u32) -> u32 { n * 2 }\nfn main() {\n  println!(\"The map has {} entries.\", *COUNT);\n  println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n  println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n## \u00a7\u27e88\u27e9Implementation details\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n## \u00a7\u27e89\u27e9Cargo features\nThis crate provides one cargo feature:\n  * `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.\n\n\n## Macros\u00a7\u27e810\u27e9\n\nlazy_static\u27e811\u27e9\n\n## Traits\u00a7\u27e812\u27e9\n\nLazyStatic\u27e813\u27e9\n    Support trait for enabling a few common operation on lazy static values.\n## Functions\u00a7\u27e814\u27e9\n\ninitialize\u27e815\u27e9\n    Takes a shared reference to a lazy static and initializes it if it has not been already.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/lazy_static/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/lazy_static/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/lazy_static/latest/src/lazy_static/lib.rs.html#8-208: Source\n\u27e84\u27e9 https://docs.rs/lazy_static/latest/lazy_static/#syntax: \u00a7\n\u27e85\u27e9 https://docs.rs/lazy_static/latest/lazy_static/: This example is not tested - \u24d8\n\u27e86\u27e9 https://docs.rs/lazy_static/latest/lazy_static/#semantics: \u00a7\n\u27e87\u27e9 https://docs.rs/lazy_static/latest/lazy_static/#example: \u00a7\n\u27e88\u27e9 https://docs.rs/lazy_static/latest/lazy_static/#implementation-details: \u00a7\n\u27e89\u27e9 https://docs.rs/lazy_static/latest/lazy_static/#cargo-features: \u00a7\n\u27e810\u27e9 https://docs.rs/lazy_static/latest/lazy_static/#macros: \u00a7\n\u27e811\u27e9 https://docs.rs/lazy_static/latest/lazy_static/macro.lazy_static.html: macro lazy_static::lazy_static - lazy_static\n\u27e812\u27e9 https://docs.rs/lazy_static/latest/lazy_static/#traits: \u00a7\n\u27e813\u27e9 https://docs.rs/lazy_static/latest/lazy_static/trait.LazyStatic.html: trait lazy_static::LazyStatic - LazyStatic\n\u27e814\u27e9 https://docs.rs/lazy_static/latest/lazy_static/#functions: \u00a7\n\u27e815\u27e9 https://docs.rs/lazy_static/latest/lazy_static/fn.initialize.html: fn lazy_static::initialize - initialize\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `lazy_static` crate provides a macro for defining lazily evaluated static variables in Rust, enabling runtime initialization for types requiring heap allocations or complex computations. It ensures thread-safe access using `Deref`, supports attributes like doc comments, and offers a `spin_no_std` feature for no-std environments. Key use cases include initializing static collections, expensive computations, or other runtime-dependent values.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Lazy Initialization Behavior  \n\u2705 Factual: The `lazy_static` crate allows the initialization of static variables at runtime, ensuring that the initialization code is executed only once, on the first access.  \n\u274c Counterfactual: The `lazy_static` crate initializes all declared static variables at compile time, regardless of whether they are accessed during runtime.  \n\n---\n\n### Pair 2: Thread Safety  \n\u2705 Factual: All types used with `lazy_static` must implement the `Sync` trait to ensure thread safety during lazy initialization.  \n\u274c Counterfactual: Types used with `lazy_static` do not need to implement the `Sync` trait, as the crate automatically ensures thread safety for all types.  \n\n---\n\n### Pair 3: No-std Compatibility  \n\u2705 Factual: The `lazy_static` crate provides a `spin_no_std` feature that allows it to be used in no-std environments by relying on the `spin` crate for synchronization.  \n\u274c Counterfactual: The `lazy_static` crate cannot be used in no-std environments, as it requires the standard library for synchronization primitives.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}