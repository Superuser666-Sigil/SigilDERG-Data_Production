{
    "name": "strum",
    "version": "0.27.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/strum/latest/strum/all.html \"show sidebar\")\n# Crate strumCopy item path\n[Settings](https://docs.rs/strum/latest/settings.html)\n[Help](https://docs.rs/strum/latest/help.html)\nSummary[Source](https://docs.rs/strum/latest/src/strum/lib.rs.html#1-265)\nExpand description\n## [\u00a7](https://docs.rs/strum/latest/strum/#strum)Strum\n[![Build Status](https://travis-ci.org/Peternator7/strum.svg?branch=master)](https://travis-ci.org/Peternator7/strum) [![Latest Version](https://img.shields.io/crates/v/strum.svg)](https://crates.io/crates/strum) [![Rust Documentation](https://docs.rs/strum/badge.svg)](https://docs.rs/strum)\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\nThe full version of the README can be found on [GitHub](https://github.com/Peternator7/strum).\n## [\u00a7](https://docs.rs/strum/latest/strum/#including-strum-in-your-project)Including Strum in Your Project\nImport strum and `strum_macros` into your project by adding the following lines to your Cargo.toml. `strum_macros` contains the macros needed to derive all the traits in Strum.\n```\n[dependencies]\nstrum = \"0.27\"\nstrum_macros = \"0.27\"\n# You can also access strum_macros exports directly through strum using the \"derive\" feature\nstrum = { version = \"0.27\", features = [\"derive\"] }\n```\n\n## Modules[\u00a7](https://docs.rs/strum/latest/strum/#modules)\n\n[additional_attributes](https://docs.rs/strum/latest/strum/additional_attributes/index.html \"mod strum::additional_attributes\")\n    Documentation for Additional Attributes\n## Enums[\u00a7](https://docs.rs/strum/latest/strum/#enums)\n\n[ParseError](https://docs.rs/strum/latest/strum/enum.ParseError.html \"enum strum::ParseError\")\n    The `ParseError` enum is a collection of all the possible reasons an enum can fail to parse from a string.\n## Traits[\u00a7](https://docs.rs/strum/latest/strum/#traits)\n\n[AsStaticRef](https://docs.rs/strum/latest/strum/trait.AsStaticRef.html \"trait strum::AsStaticRef\")Deprecated\n    A cheap reference-to-reference conversion. Used to convert a value to a reference value with `'static` lifetime within generic code.\n\n[EnumCount](https://docs.rs/strum/latest/strum/trait.EnumCount.html \"trait strum::EnumCount\")\n    A trait for capturing the number of variants in Enum. This trait can be autoderived by `strum_macros`.\n\n[EnumMessage](https://docs.rs/strum/latest/strum/trait.EnumMessage.html \"trait strum::EnumMessage\")\n    Associates additional pieces of information with an Enum. This can be autoimplemented by deriving `EnumMessage` and annotating your variants with `#[strum(message=\"...\")]`.\n\n[EnumProperty](https://docs.rs/strum/latest/strum/trait.EnumProperty.html \"trait strum::EnumProperty\")\n    `EnumProperty` is a trait that makes it possible to store additional information with enum variants. This trait is designed to be used with the macro of the same name in the `strum_macros` crate. Currently, the string, integer and bool literals are supported in attributes.\n\n[IntoDiscriminant](https://docs.rs/strum/latest/strum/trait.IntoDiscriminant.html \"trait strum::IntoDiscriminant\")\n    A trait for retrieving the enum generated by [`EnumDiscriminants`](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\") from an associated Type on the original enumeration. This trait can be autoderived by `strum_macros`.\n\n[IntoEnumIterator](https://docs.rs/strum/latest/strum/trait.IntoEnumIterator.html \"trait strum::IntoEnumIterator\")\n    This trait designates that an `Enum` can be iterated over. It can be auto generated using the [`EnumIter`](https://docs.rs/strum/latest/strum/derive.EnumIter.html) derive macro.\n\n[VariantArray](https://docs.rs/strum/latest/strum/trait.VariantArray.html \"trait strum::VariantArray\")\n    A trait for retrieving a static array containing all the variants in an Enum. This trait can be autoderived by `strum_macros`. For derived usage, all the variants in the enumerator need to be unit-types, which means you can\u2019t autoderive enums with inner data in one or more variants. Consider using it alongside [`EnumDiscriminants`](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\") if you require inner data but still want to have an static array of variants.\n\n[VariantIterator](https://docs.rs/strum/latest/strum/trait.VariantIterator.html \"trait strum::VariantIterator\")\n\n\n[VariantMetadata](https://docs.rs/strum/latest/strum/trait.VariantMetadata.html \"trait strum::VariantMetadata\")\n\n\n[VariantNames](https://docs.rs/strum/latest/strum/trait.VariantNames.html \"trait strum::VariantNames\")\n    A trait for retrieving the names of each variant in Enum. This trait can be autoderived by `strum_macros`.\n## Derive Macros[\u00a7](https://docs.rs/strum/latest/strum/#derives)\n\n[AsRefStr](https://docs.rs/strum/latest/strum/derive.AsRefStr.html \"derive strum::AsRefStr\")`derive`\n    Converts enum variants to `&'a str`, where `'a` is the lifetime of the input enum reference.\n\n[Display](https://docs.rs/strum/latest/strum/derive.Display.html \"derive strum::Display\")`derive`\n    Converts enum variants to strings.\n\n[EnumCount](https://docs.rs/strum/latest/strum/derive.EnumCount.html \"derive strum::EnumCount\")`derive`\n    Add a constant `usize` equal to the number of variants.\n\n[EnumDiscriminants](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\")`derive`\n    Generate a new type with only the discriminant names.\n\n[EnumIs](https://docs.rs/strum/latest/strum/derive.EnumIs.html \"derive strum::EnumIs\")\n    Generated `is_*()` methods for each variant. E.g. `Color.is_red()`.\n\n[EnumIter](https://docs.rs/strum/latest/strum/derive.EnumIter.html \"derive strum::EnumIter\")`derive`\n    Creates a new type that iterates over the variants of an enum.\n\n[EnumMessage](https://docs.rs/strum/latest/strum/derive.EnumMessage.html \"derive strum::EnumMessage\")`derive`\n    Add a verbose message to an enum variant.\n\n[EnumProperty](https://docs.rs/strum/latest/strum/derive.EnumProperty.html \"derive strum::EnumProperty\")`derive`\n    Add custom properties to enum variants.\n\n[EnumString](https://docs.rs/strum/latest/strum/derive.EnumString.html \"derive strum::EnumString\")`derive`\n    Converts strings to enum variants based on their name.\n\n[EnumTryAs](https://docs.rs/strum/latest/strum/derive.EnumTryAs.html \"derive strum::EnumTryAs\")\n    Generated `try_as_*()` methods for all tuple-style variants. E.g. `Message.try_as_write()`.\n\n[FromRepr](https://docs.rs/strum/latest/strum/derive.FromRepr.html \"derive strum::FromRepr\")`derive`\n    Add a function to enum that allows accessing variants by its discriminant\n\n[IntoStaticStr](https://docs.rs/strum/latest/strum/derive.IntoStaticStr.html \"derive strum::IntoStaticStr\")`derive`\n    Implements `From<MyEnum> for &'static str` on an enum.\n\n[VariantArray](https://docs.rs/strum/latest/strum/derive.VariantArray.html \"derive strum::VariantArray\")`derive`\n    Adds a `'static` slice with all of the Enum\u2019s variants.\n\n[VariantNames](https://docs.rs/strum/latest/strum/derive.VariantNames.html \"derive strum::VariantNames\")`derive`\n    Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is a `'static` slice of discriminant names.\n",
        "markdown_with_citations": "[](https://docs.rs/strum/latest/strum/all.html \"show sidebar\")\n# Crate strumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Strum\n![Build Status\u27e85\u27e9](https://travis-ci.org/Peternator7/strum) ![Latest Version\u27e86\u27e9](https://crates.io/crates/strum) ![Rust Documentation\u27e87\u27e9](https://docs.rs/strum)\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\nThe full version of the README can be found on GitHub\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Including Strum in Your Project\nImport strum and `strum_macros` into your project by adding the following lines to your Cargo.toml. `strum_macros` contains the macros needed to derive all the traits in Strum.\n```\n[dependencies]\nstrum = \"0.27\"\nstrum_macros = \"0.27\"\n# You can also access strum_macros exports directly through strum using the \"derive\" feature\nstrum = { version = \"0.27\", features = [\"derive\"] }\n```\n\n## Modules\u00a7\u27e810\u27e9\n\nadditional_attributes\u27e811\u27e9\n    Documentation for Additional Attributes\n## Enums\u00a7\u27e812\u27e9\n\nParseError\u27e813\u27e9\n    The `ParseError` enum is a collection of all the possible reasons an enum can fail to parse from a string.\n## Traits\u00a7\u27e814\u27e9\n\nAsStaticRef\u27e815\u27e9Deprecated\n    A cheap reference-to-reference conversion. Used to convert a value to a reference value with `'static` lifetime within generic code.\n\nEnumCount\u27e816\u27e9\n    A trait for capturing the number of variants in Enum. This trait can be autoderived by `strum_macros`.\n\nEnumMessage\u27e817\u27e9\n    Associates additional pieces of information with an Enum. This can be autoimplemented by deriving `EnumMessage` and annotating your variants with `#[strum(message=\"...\")]`.\n\nEnumProperty\u27e818\u27e9\n    `EnumProperty` is a trait that makes it possible to store additional information with enum variants. This trait is designed to be used with the macro of the same name in the `strum_macros` crate. Currently, the string, integer and bool literals are supported in attributes.\n\nIntoDiscriminant\u27e819\u27e9\n    A trait for retrieving the enum generated by `EnumDiscriminants`\u27e820\u27e9 from an associated Type on the original enumeration. This trait can be autoderived by `strum_macros`.\n\nIntoEnumIterator\u27e821\u27e9\n    This trait designates that an `Enum` can be iterated over. It can be auto generated using the `EnumIter`\u27e822\u27e9 derive macro.\n\nVariantArray\u27e823\u27e9\n    A trait for retrieving a static array containing all the variants in an Enum. This trait can be autoderived by `strum_macros`. For derived usage, all the variants in the enumerator need to be unit-types, which means you can\u2019t autoderive enums with inner data in one or more variants. Consider using it alongside `EnumDiscriminants`\u27e820\u27e9 if you require inner data but still want to have an static array of variants.\n\nVariantIterator\u27e824\u27e9\n\n\nVariantMetadata\u27e825\u27e9\n\n\nVariantNames\u27e826\u27e9\n    A trait for retrieving the names of each variant in Enum. This trait can be autoderived by `strum_macros`.\n## Derive Macros\u00a7\u27e827\u27e9\n\nAsRefStr\u27e828\u27e9`derive`\n    Converts enum variants to `&'a str`, where `'a` is the lifetime of the input enum reference.\n\nDisplay\u27e829\u27e9`derive`\n    Converts enum variants to strings.\n\nEnumCount\u27e830\u27e9`derive`\n    Add a constant `usize` equal to the number of variants.\n\nEnumDiscriminants\u27e820\u27e9`derive`\n    Generate a new type with only the discriminant names.\n\nEnumIs\u27e831\u27e9\n    Generated `is_*()` methods for each variant. E.g. `Color.is_red()`.\n\nEnumIter\u27e822\u27e9`derive`\n    Creates a new type that iterates over the variants of an enum.\n\nEnumMessage\u27e832\u27e9`derive`\n    Add a verbose message to an enum variant.\n\nEnumProperty\u27e833\u27e9`derive`\n    Add custom properties to enum variants.\n\nEnumString\u27e834\u27e9`derive`\n    Converts strings to enum variants based on their name.\n\nEnumTryAs\u27e835\u27e9\n    Generated `try_as_*()` methods for all tuple-style variants. E.g. `Message.try_as_write()`.\n\nFromRepr\u27e836\u27e9`derive`\n    Add a function to enum that allows accessing variants by its discriminant\n\nIntoStaticStr\u27e837\u27e9`derive`\n    Implements `From<MyEnum> for &'static str` on an enum.\n\nVariantArray\u27e838\u27e9`derive`\n    Adds a `'static` slice with all of the Enum\u2019s variants.\n\nVariantNames\u27e839\u27e9`derive`\n    Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is a `'static` slice of discriminant names.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/strum/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/strum/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/strum/latest/src/strum/lib.rs.html#1-265: Source\n\u27e84\u27e9 https://docs.rs/strum/latest/strum/#strum: \u00a7\n\u27e85\u27e9 https://travis-ci.org/Peternator7/strum.svg?branch=master: ![Build Status\n\u27e86\u27e9 https://img.shields.io/crates/v/strum.svg: ![Latest Version\n\u27e87\u27e9 https://docs.rs/strum/badge.svg: ![Rust Documentation\n\u27e88\u27e9 https://github.com/Peternator7/strum: GitHub\n\u27e89\u27e9 https://docs.rs/strum/latest/strum/#including-strum-in-your-project: \u00a7\n\u27e810\u27e9 https://docs.rs/strum/latest/strum/#modules: \u00a7\n\u27e811\u27e9 https://docs.rs/strum/latest/strum/additional_attributes/index.html: mod strum::additional_attributes - additional_attributes\n\u27e812\u27e9 https://docs.rs/strum/latest/strum/#enums: \u00a7\n\u27e813\u27e9 https://docs.rs/strum/latest/strum/enum.ParseError.html: enum strum::ParseError - ParseError\n\u27e814\u27e9 https://docs.rs/strum/latest/strum/#traits: \u00a7\n\u27e815\u27e9 https://docs.rs/strum/latest/strum/trait.AsStaticRef.html: trait strum::AsStaticRef - AsStaticRef\n\u27e816\u27e9 https://docs.rs/strum/latest/strum/trait.EnumCount.html: trait strum::EnumCount - EnumCount\n\u27e817\u27e9 https://docs.rs/strum/latest/strum/trait.EnumMessage.html: trait strum::EnumMessage - EnumMessage\n\u27e818\u27e9 https://docs.rs/strum/latest/strum/trait.EnumProperty.html: trait strum::EnumProperty - EnumProperty\n\u27e819\u27e9 https://docs.rs/strum/latest/strum/trait.IntoDiscriminant.html: trait strum::IntoDiscriminant - IntoDiscriminant\n\u27e820\u27e9 https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html: derive strum::EnumDiscriminants - `EnumDiscriminants`\n\u27e821\u27e9 https://docs.rs/strum/latest/strum/trait.IntoEnumIterator.html: trait strum::IntoEnumIterator - IntoEnumIterator\n\u27e822\u27e9 https://docs.rs/strum/latest/strum/derive.EnumIter.html: `EnumIter`\n\u27e823\u27e9 https://docs.rs/strum/latest/strum/trait.VariantArray.html: trait strum::VariantArray - VariantArray\n\u27e824\u27e9 https://docs.rs/strum/latest/strum/trait.VariantIterator.html: trait strum::VariantIterator - VariantIterator\n\u27e825\u27e9 https://docs.rs/strum/latest/strum/trait.VariantMetadata.html: trait strum::VariantMetadata - VariantMetadata\n\u27e826\u27e9 https://docs.rs/strum/latest/strum/trait.VariantNames.html: trait strum::VariantNames - VariantNames\n\u27e827\u27e9 https://docs.rs/strum/latest/strum/#derives: \u00a7\n\u27e828\u27e9 https://docs.rs/strum/latest/strum/derive.AsRefStr.html: derive strum::AsRefStr - AsRefStr\n\u27e829\u27e9 https://docs.rs/strum/latest/strum/derive.Display.html: derive strum::Display - Display\n\u27e830\u27e9 https://docs.rs/strum/latest/strum/derive.EnumCount.html: derive strum::EnumCount - EnumCount\n\u27e831\u27e9 https://docs.rs/strum/latest/strum/derive.EnumIs.html: derive strum::EnumIs - EnumIs\n\u27e832\u27e9 https://docs.rs/strum/latest/strum/derive.EnumMessage.html: derive strum::EnumMessage - EnumMessage\n\u27e833\u27e9 https://docs.rs/strum/latest/strum/derive.EnumProperty.html: derive strum::EnumProperty - EnumProperty\n\u27e834\u27e9 https://docs.rs/strum/latest/strum/derive.EnumString.html: derive strum::EnumString - EnumString\n\u27e835\u27e9 https://docs.rs/strum/latest/strum/derive.EnumTryAs.html: derive strum::EnumTryAs - EnumTryAs\n\u27e836\u27e9 https://docs.rs/strum/latest/strum/derive.FromRepr.html: derive strum::FromRepr - FromRepr\n\u27e837\u27e9 https://docs.rs/strum/latest/strum/derive.IntoStaticStr.html: derive strum::IntoStaticStr - IntoStaticStr\n\u27e838\u27e9 https://docs.rs/strum/latest/strum/derive.VariantArray.html: derive strum::VariantArray - VariantArray\n\u27e839\u27e9 https://docs.rs/strum/latest/strum/derive.VariantNames.html: derive strum::VariantNames - VariantNames\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `strum` crate provides macros and traits to simplify working with enums in Rust, enabling features like converting enums to strings, iterating over variants, and associating additional metadata or properties with enum variants. Key derive macros include `EnumIter` for iteration, `EnumString` for parsing strings into enums, and `VariantNames` for retrieving variant names. It streamlines enum manipulation, making it easier to handle common tasks like serialization, iteration, and property management.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1:\n\u2705 **Factual:** The `EnumIter` derive macro in the `strum_macros` crate allows you to iterate over all variants of an enum, making it easy to perform operations on each variant.  \n\u274c **Counterfactual:** The `EnumIter` derive macro automatically generates methods to iterate over enum variants in reverse order, enabling reverse iteration out of the box.  \n\n---\n\n### Pair 2:\n\u2705 **Factual:** The `EnumString` derive macro enables converting strings to enum variants based on their names, making it useful for parsing user input or configuration files.  \n\u274c **Counterfactual:** The `EnumString` derive macro supports case-insensitive matching for converting strings to enum variants without additional configuration.  \n\n---\n\n### Pair 3:\n\u2705 **Factual:** The `VariantNames` trait, when derived, provides a static slice of strings containing the names of all the variants in an enum, which can be useful for debugging or serialization.  \n\u274c **Counterfactual:** The `VariantNames` trait automatically generates a mapping of variant names to their discriminant values, allowing direct lookup of numeric discriminants by name.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}