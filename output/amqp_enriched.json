{
    "name": "amqp",
    "version": "0.1.3",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/amqp/latest/amqp/all.html \"show sidebar\")\n# Crate amqpCopy item path\n[Settings](https://docs.rs/amqp/latest/settings.html)\n[Help](https://docs.rs/amqp/latest/help.html)\nSummary[Source](https://docs.rs/amqp/latest/src/amqp/lib.rs.html#1-107)\nExpand description\n#rust-amqp [![Build Status](https://travis-ci.org/Antti/rust-amqp.svg)](https: //travis-ci.org/Antti/rust-amqp)\nAMQ protocol implementation in pure rust.\n> Note: The project is still in very early stages of development, it implements all the protocol parsing, but not all the protocol methods are wrapped/easy to use. Expect the API to be changed in the future.\n### [\u00a7](https://docs.rs/amqp/latest/amqp/#what-it-currently-can-do)What it currently can do:\nConnect to server Open/close channels Declare queues/exchanges All the methods from the Basic class are implemented, including get, publish, ack, nack, reject, consume. So you can send/receive messages.\nHave a look at the examples in examples folder.\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#connecting-to-the-server--openning-channel)Connecting to the server & openning channel:\n> Note: Currently it can\u2019t connect using TLS connections.\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nuse amqp::session::Session;\nuse amqp::table;\nlet mut session = Session::open_url(\"amqp://localhost/\").unwrap();\nlet mut channel = session.open_channel(1).unwrap();\n```\n\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#declaring-queue)Declaring queue:\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nuse amqp::table;\nThe arguments come in following order:\nqueue: &str, passive: bool, durable: bool, exclusive: bool, auto_delete:\nbool, nowait: bool, arguments: Table\nlet queue_declare = channel.queue_declare(\"my_queue_name\", false, true,\nfalse, false, false, table::new());\n```\n\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#publishing-message)Publishing message:\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nchannel.basic_publish(\"\", \"my_queue_name\", true, false,\namqp::protocol::basic::BasicProperties{ content_type:\nSome(\"text\".to_string()), ..Default::default()}, (b\"Hello from\nrust!\").to_vec());\n```\n\nThis will send message: \u201cHello from rust!\u201d to the queue named \u201cmy_queue_name\u201d.\nThe messages have type of Vec, so if you want to send string, first you must convert it to Vec.\n### [\u00a7](https://docs.rs/amqp/latest/amqp/#development-notes)Development notes:\nThe methods encoding/decoding code is generated using codegen.rb & amqp-rabbitmq-0.9.1.json spec.\nTo generate a new spec, run:\n```\nmake\n```\n\nTo build project, use cargo:\n```\ncargo build\n```\n\nTo build examples:\n```\ncargo test\n```\n\n## Modules[\u00a7](https://docs.rs/amqp/latest/amqp/#modules)\n\n[protocol](https://docs.rs/amqp/latest/amqp/protocol/index.html \"mod amqp::protocol\")\n\n## Structs[\u00a7](https://docs.rs/amqp/latest/amqp/#structs)\n\n[Channel](https://docs.rs/amqp/latest/amqp/struct.Channel.html \"struct amqp::Channel\")\n\n\n[ConsumeBuilder](https://docs.rs/amqp/latest/amqp/struct.ConsumeBuilder.html \"struct amqp::ConsumeBuilder\")\n\n\n[GetResult](https://docs.rs/amqp/latest/amqp/struct.GetResult.html \"struct amqp::GetResult\")\n\n\n[Options](https://docs.rs/amqp/latest/amqp/struct.Options.html \"struct amqp::Options\")\n\n\n[QueueBuilder](https://docs.rs/amqp/latest/amqp/struct.QueueBuilder.html \"struct amqp::QueueBuilder\")\n\n\n[Session](https://docs.rs/amqp/latest/amqp/struct.Session.html \"struct amqp::Session\")\n\n## Enums[\u00a7](https://docs.rs/amqp/latest/amqp/#enums)\n\n[AMQPError](https://docs.rs/amqp/latest/amqp/enum.AMQPError.html \"enum amqp::AMQPError\")\n\n\n[AMQPScheme](https://docs.rs/amqp/latest/amqp/enum.AMQPScheme.html \"enum amqp::AMQPScheme\")\n\n\n[TableEntry](https://docs.rs/amqp/latest/amqp/enum.TableEntry.html \"enum amqp::TableEntry\")\n\n## Constants[\u00a7](https://docs.rs/amqp/latest/amqp/#constants)\n\n[VERSION](https://docs.rs/amqp/latest/amqp/constant.VERSION.html \"constant amqp::VERSION\")\n\n## Traits[\u00a7](https://docs.rs/amqp/latest/amqp/#traits)\n\n[Basic](https://docs.rs/amqp/latest/amqp/trait.Basic.html \"trait amqp::Basic\")\n\n\n[Consumer](https://docs.rs/amqp/latest/amqp/trait.Consumer.html \"trait amqp::Consumer\")\n\n## Type Aliases[\u00a7](https://docs.rs/amqp/latest/amqp/#types)\n\n[Table](https://docs.rs/amqp/latest/amqp/type.Table.html \"type amqp::Table\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/amqp/latest/amqp/all.html \"show sidebar\")\n# Crate amqpCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n#rust-amqp ![Build Status\u27e84\u27e9](https: //travis-ci.org/Antti/rust-amqp)\nAMQ protocol implementation in pure rust.\n> Note: The project is still in very early stages of development, it implements all the protocol parsing, but not all the protocol methods are wrapped/easy to use. Expect the API to be changed in the future.\n### \u00a7\u27e85\u27e9What it currently can do:\nConnect to server Open/close channels Declare queues/exchanges All the methods from the Basic class are implemented, including get, publish, ack, nack, reject, consume. So you can send/receive messages.\nHave a look at the examples in examples folder.\n#### \u00a7\u27e86\u27e9Connecting to the server & openning channel:\n> Note: Currently it can\u2019t connect using TLS connections.\n\u24d8\u27e87\u27e9```\nuse amqp::session::Session;\nuse amqp::table;\nlet mut session = Session::open_url(\"amqp://localhost/\").unwrap();\nlet mut channel = session.open_channel(1).unwrap();\n```\n\n#### \u00a7\u27e88\u27e9Declaring queue:\n\u24d8\u27e87\u27e9```\nuse amqp::table;\nThe arguments come in following order:\nqueue: &str, passive: bool, durable: bool, exclusive: bool, auto_delete:\nbool, nowait: bool, arguments: Table\nlet queue_declare = channel.queue_declare(\"my_queue_name\", false, true,\nfalse, false, false, table::new());\n```\n\n#### \u00a7\u27e89\u27e9Publishing message:\n\u24d8\u27e87\u27e9```\nchannel.basic_publish(\"\", \"my_queue_name\", true, false,\namqp::protocol::basic::BasicProperties{ content_type:\nSome(\"text\".to_string()), ..Default::default()}, (b\"Hello from\nrust!\").to_vec());\n```\n\nThis will send message: \u201cHello from rust!\u201d to the queue named \u201cmy_queue_name\u201d.\nThe messages have type of Vec, so if you want to send string, first you must convert it to Vec.\n### \u00a7\u27e810\u27e9Development notes:\nThe methods encoding/decoding code is generated using codegen.rb & amqp-rabbitmq-0.9.1.json spec.\nTo generate a new spec, run:\n```\nmake\n```\n\nTo build project, use cargo:\n```\ncargo build\n```\n\nTo build examples:\n```\ncargo test\n```\n\n## Modules\u00a7\u27e811\u27e9\n\nprotocol\u27e812\u27e9\n\n## Structs\u00a7\u27e813\u27e9\n\nChannel\u27e814\u27e9\n\n\nConsumeBuilder\u27e815\u27e9\n\n\nGetResult\u27e816\u27e9\n\n\nOptions\u27e817\u27e9\n\n\nQueueBuilder\u27e818\u27e9\n\n\nSession\u27e819\u27e9\n\n## Enums\u00a7\u27e820\u27e9\n\nAMQPError\u27e821\u27e9\n\n\nAMQPScheme\u27e822\u27e9\n\n\nTableEntry\u27e823\u27e9\n\n## Constants\u00a7\u27e824\u27e9\n\nVERSION\u27e825\u27e9\n\n## Traits\u00a7\u27e826\u27e9\n\nBasic\u27e827\u27e9\n\n\nConsumer\u27e828\u27e9\n\n## Type Aliases\u00a7\u27e829\u27e9\n\nTable\u27e830\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/amqp/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/amqp/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/amqp/latest/src/amqp/lib.rs.html#1-107: Source\n\u27e84\u27e9 https://travis-ci.org/Antti/rust-amqp.svg: ![Build Status\n\u27e85\u27e9 https://docs.rs/amqp/latest/amqp/#what-it-currently-can-do: \u00a7\n\u27e86\u27e9 https://docs.rs/amqp/latest/amqp/#connecting-to-the-server--openning-channel: \u00a7\n\u27e87\u27e9 https://docs.rs/amqp/latest/amqp/: This example is not tested - \u24d8\n\u27e88\u27e9 https://docs.rs/amqp/latest/amqp/#declaring-queue: \u00a7\n\u27e89\u27e9 https://docs.rs/amqp/latest/amqp/#publishing-message: \u00a7\n\u27e810\u27e9 https://docs.rs/amqp/latest/amqp/#development-notes: \u00a7\n\u27e811\u27e9 https://docs.rs/amqp/latest/amqp/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/amqp/latest/amqp/protocol/index.html: mod amqp::protocol - protocol\n\u27e813\u27e9 https://docs.rs/amqp/latest/amqp/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/amqp/latest/amqp/struct.Channel.html: struct amqp::Channel - Channel\n\u27e815\u27e9 https://docs.rs/amqp/latest/amqp/struct.ConsumeBuilder.html: struct amqp::ConsumeBuilder - ConsumeBuilder\n\u27e816\u27e9 https://docs.rs/amqp/latest/amqp/struct.GetResult.html: struct amqp::GetResult - GetResult\n\u27e817\u27e9 https://docs.rs/amqp/latest/amqp/struct.Options.html: struct amqp::Options - Options\n\u27e818\u27e9 https://docs.rs/amqp/latest/amqp/struct.QueueBuilder.html: struct amqp::QueueBuilder - QueueBuilder\n\u27e819\u27e9 https://docs.rs/amqp/latest/amqp/struct.Session.html: struct amqp::Session - Session\n\u27e820\u27e9 https://docs.rs/amqp/latest/amqp/#enums: \u00a7\n\u27e821\u27e9 https://docs.rs/amqp/latest/amqp/enum.AMQPError.html: enum amqp::AMQPError - AMQPError\n\u27e822\u27e9 https://docs.rs/amqp/latest/amqp/enum.AMQPScheme.html: enum amqp::AMQPScheme - AMQPScheme\n\u27e823\u27e9 https://docs.rs/amqp/latest/amqp/enum.TableEntry.html: enum amqp::TableEntry - TableEntry\n\u27e824\u27e9 https://docs.rs/amqp/latest/amqp/#constants: \u00a7\n\u27e825\u27e9 https://docs.rs/amqp/latest/amqp/constant.VERSION.html: constant amqp::VERSION - VERSION\n\u27e826\u27e9 https://docs.rs/amqp/latest/amqp/#traits: \u00a7\n\u27e827\u27e9 https://docs.rs/amqp/latest/amqp/trait.Basic.html: trait amqp::Basic - Basic\n\u27e828\u27e9 https://docs.rs/amqp/latest/amqp/trait.Consumer.html: trait amqp::Consumer - Consumer\n\u27e829\u27e9 https://docs.rs/amqp/latest/amqp/#types: \u00a7\n\u27e830\u27e9 https://docs.rs/amqp/latest/amqp/type.Table.html: type amqp::Table - Table\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `amqp` crate provides a pure Rust implementation of the AMQP protocol, enabling interaction with message brokers like RabbitMQ. It supports connecting to servers, opening channels, declaring queues and exchanges, and performing basic operations such as publishing, consuming, acknowledging, and rejecting messages. Note that the crate is in early development, lacks TLS support, and its API may evolve.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 4.0,
    "factual_counterfactual": "### Pair 1: Connection and Channel Management\n\u2705 **Factual:** The `amqp` crate allows users to connect to an AMQP server and open channels using the `Session` struct, but it does not currently support TLS connections.  \n\u274c **Counterfactual:** The `amqp` crate supports secure TLS connections to AMQP servers, ensuring encrypted communication by default.  \n\n---\n\n### Pair 2: Queue Declaration\n\u2705 **Factual:** The `amqp` crate provides the ability to declare queues with customizable options such as durability, exclusivity, and auto-delete through the `queue_declare` method.  \n\u274c **Counterfactual:** The `amqp` crate automatically declares queues with default settings and does not allow customization of options like durability or exclusivity.  \n\n---\n\n### Pair 3: Message Publishing\n\u2705 **Factual:** The `amqp` crate enables users to publish messages to queues, requiring conversion of strings to `Vec<u8>` for message payloads.  \n\u274c **Counterfactual:** The `amqp` crate automatically converts strings to `Vec<u8>` when publishing messages, eliminating the need for manual conversion.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}