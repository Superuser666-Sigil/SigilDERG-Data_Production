{
    "name": "glob",
    "version": "0.3.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/glob/latest/glob/all.html \"show sidebar\")\n# Crate globCopy item path\n[Settings](https://docs.rs/glob/latest/settings.html)\n[Help](https://docs.rs/glob/latest/help.html)\nSummary[Source](https://docs.rs/glob/latest/src/glob/lib.rs.html#11-1501)\nExpand description\nSupport for matching file paths against Unix shell style patterns.\nThe `glob` and `glob_with` functions allow querying the filesystem for all files that match a particular pattern (similar to the libc `glob` function). The methods on the `Pattern` type provide functionality for checking if individual paths match a particular pattern (similar to the libc `fnmatch` function).\nFor consistency across platforms, and for Windows support, this module is implemented entirely in Rust rather than deferring to the libc `glob`/`fnmatch` functions.\n## [\u00a7](https://docs.rs/glob/latest/glob/#examples)Examples\nTo print all jpg files in `/media/` and all of its subdirectories.\n```\nuse glob::glob;\nfor entry in glob(\"/media/**/*.jpg\").expect(\"Failed to read glob pattern\") {\n  match entry {\n    Ok(path) => println!(\"{:?}\", path.display()),\n    Err(e) => println!(\"{:?}\", e),\n  }\n}\n```\n\nTo print all files containing the letter \u201ca\u201d, case insensitive, in a `local` directory relative to the current working directory. This ignores errors instead of printing them.\n```\nuse glob::glob_with;\nuse glob::MatchOptions;\nlet options = MatchOptions {\n  case_sensitive: false,\n  require_literal_separator: false,\n  require_literal_leading_dot: false,\n};\nfor entry in glob_with(\"local/*a*\", options).unwrap() {\n  if let Ok(path) = entry {\n    println!(\"{:?}\", path.display())\n  }\n}\n```\n\n## Structs[\u00a7](https://docs.rs/glob/latest/glob/#structs)\n\n[GlobError](https://docs.rs/glob/latest/glob/struct.GlobError.html \"struct glob::GlobError\")\n    A glob iteration error.\n\n[MatchOptions](https://docs.rs/glob/latest/glob/struct.MatchOptions.html \"struct glob::MatchOptions\")\n    Configuration options to modify the behaviour of `Pattern::matches_with(..)`.\n\n[Paths](https://docs.rs/glob/latest/glob/struct.Paths.html \"struct glob::Paths\")\n    An iterator that yields `Path`s from the filesystem that match a particular pattern.\n\n[Pattern](https://docs.rs/glob/latest/glob/struct.Pattern.html \"struct glob::Pattern\")\n    A compiled Unix shell style pattern.\n\n[PatternError](https://docs.rs/glob/latest/glob/struct.PatternError.html \"struct glob::PatternError\")\n    A pattern parsing error.\n## Functions[\u00a7](https://docs.rs/glob/latest/glob/#functions)\n\n[glob](https://docs.rs/glob/latest/glob/fn.glob.html \"fn glob::glob\")\n    Return an iterator that produces all the `Path`s that match the given pattern using default match options, which may be absolute or relative to the current working directory.\n\n[glob_with](https://docs.rs/glob/latest/glob/fn.glob_with.html \"fn glob::glob_with\")\n    Return an iterator that produces all the `Path`s that match the given pattern using the specified match options, which may be absolute or relative to the current working directory.\n## Type Aliases[\u00a7](https://docs.rs/glob/latest/glob/#types)\n\n[GlobResult](https://docs.rs/glob/latest/glob/type.GlobResult.html \"type glob::GlobResult\")\n    An alias for a glob iteration result.\n",
        "markdown_with_citations": "[](https://docs.rs/glob/latest/glob/all.html \"show sidebar\")\n# Crate globCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nSupport for matching file paths against Unix shell style patterns.\nThe `glob` and `glob_with` functions allow querying the filesystem for all files that match a particular pattern (similar to the libc `glob` function). The methods on the `Pattern` type provide functionality for checking if individual paths match a particular pattern (similar to the libc `fnmatch` function).\nFor consistency across platforms, and for Windows support, this module is implemented entirely in Rust rather than deferring to the libc `glob`/`fnmatch` functions.\n## \u00a7\u27e84\u27e9Examples\nTo print all jpg files in `/media/` and all of its subdirectories.\n```\nuse glob::glob;\nfor entry in glob(\"/media/**/*.jpg\").expect(\"Failed to read glob pattern\") {\n  match entry {\n    Ok(path) => println!(\"{:?}\", path.display()),\n    Err(e) => println!(\"{:?}\", e),\n  }\n}\n```\n\nTo print all files containing the letter \u201ca\u201d, case insensitive, in a `local` directory relative to the current working directory. This ignores errors instead of printing them.\n```\nuse glob::glob_with;\nuse glob::MatchOptions;\nlet options = MatchOptions {\n  case_sensitive: false,\n  require_literal_separator: false,\n  require_literal_leading_dot: false,\n};\nfor entry in glob_with(\"local/*a*\", options).unwrap() {\n  if let Ok(path) = entry {\n    println!(\"{:?}\", path.display())\n  }\n}\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nGlobError\u27e86\u27e9\n    A glob iteration error.\n\nMatchOptions\u27e87\u27e9\n    Configuration options to modify the behaviour of `Pattern::matches_with(..)`.\n\nPaths\u27e88\u27e9\n    An iterator that yields `Path`s from the filesystem that match a particular pattern.\n\nPattern\u27e89\u27e9\n    A compiled Unix shell style pattern.\n\nPatternError\u27e810\u27e9\n    A pattern parsing error.\n## Functions\u00a7\u27e811\u27e9\n\nglob\u27e812\u27e9\n    Return an iterator that produces all the `Path`s that match the given pattern using default match options, which may be absolute or relative to the current working directory.\n\nglob_with\u27e813\u27e9\n    Return an iterator that produces all the `Path`s that match the given pattern using the specified match options, which may be absolute or relative to the current working directory.\n## Type Aliases\u00a7\u27e814\u27e9\n\nGlobResult\u27e815\u27e9\n    An alias for a glob iteration result.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/glob/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/glob/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/glob/latest/src/glob/lib.rs.html#11-1501: Source\n\u27e84\u27e9 https://docs.rs/glob/latest/glob/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/glob/latest/glob/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/glob/latest/glob/struct.GlobError.html: struct glob::GlobError - GlobError\n\u27e87\u27e9 https://docs.rs/glob/latest/glob/struct.MatchOptions.html: struct glob::MatchOptions - MatchOptions\n\u27e88\u27e9 https://docs.rs/glob/latest/glob/struct.Paths.html: struct glob::Paths - Paths\n\u27e89\u27e9 https://docs.rs/glob/latest/glob/struct.Pattern.html: struct glob::Pattern - Pattern\n\u27e810\u27e9 https://docs.rs/glob/latest/glob/struct.PatternError.html: struct glob::PatternError - PatternError\n\u27e811\u27e9 https://docs.rs/glob/latest/glob/#functions: \u00a7\n\u27e812\u27e9 https://docs.rs/glob/latest/glob/fn.glob.html: fn glob::glob - glob\n\u27e813\u27e9 https://docs.rs/glob/latest/glob/fn.glob_with.html: fn glob::glob_with - glob_with\n\u27e814\u27e9 https://docs.rs/glob/latest/glob/#types: \u00a7\n\u27e815\u27e9 https://docs.rs/glob/latest/glob/type.GlobResult.html: type glob::GlobResult - GlobResult\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `glob` crate provides functionality for matching file paths against Unix shell-style patterns, enabling filesystem queries for files matching specific patterns. It includes the `glob` and `glob_with` functions for pattern-based path iteration, customizable matching options via `MatchOptions`, and structs like `Pattern` for compiled patterns and `Paths` for iterating matched paths. The crate is implemented entirely in Rust for cross-platform consistency, including Windows support.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: File Matching Capabilities  \n\u2705 **Factual:** The `glob` crate allows matching file paths against Unix shell-style patterns, including recursive patterns like `**` to match files in subdirectories.  \n\u274c **Counterfactual:** The `glob` crate only supports exact file path matching and does not allow recursive patterns like `**`.  \n\n---\n\n### Pair 2: Platform Consistency  \n\u2705 **Factual:** The `glob` crate is implemented entirely in Rust to ensure consistent behavior across platforms, including Windows.  \n\u274c **Counterfactual:** The `glob` crate relies on platform-specific libc functions for pattern matching, leading to inconsistent behavior across operating systems.  \n\n---\n\n### Pair 3: Error Handling  \n\u2705 **Factual:** The `glob` crate provides the `GlobError` struct to handle errors that occur during glob pattern iteration.  \n\u274c **Counterfactual:** The `glob` crate silently ignores all errors during glob pattern iteration and does not provide any error handling mechanisms.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}