{
    "name": "mio",
    "version": "1.0.4",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/mio/latest/mio/all.html \"show sidebar\")\n# Crate mioCopy item path\n[Settings](https://docs.rs/mio/latest/settings.html)\n[Help](https://docs.rs/mio/latest/help.html)\nSummary[Source](https://docs.rs/mio/latest/src/mio/lib.rs.html#1-277)\nExpand description\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\n## [\u00a7](https://docs.rs/mio/latest/mio/#usage)Usage\nUsing Mio starts by creating a [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html), which reads events from the OS and puts them into [`Events`](https://docs.rs/mio/latest/mio/event/struct.Events.html). You can handle I/O events from the OS with it.\nFor more detail, see [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html).\n### [\u00a7](https://docs.rs/mio/latest/mio/#examples)Examples\nExamples can found in the `examples` directory of the source code, or [on GitHub](https://github.com/tokio-rs/mio/tree/master/examples).\n### [\u00a7](https://docs.rs/mio/latest/mio/#guide)Guide\nA getting started guide is available in the [`guide`](https://docs.rs/mio/latest/mio/guide/index.html \"mod mio::guide\") module.\n### [\u00a7](https://docs.rs/mio/latest/mio/#available-features)Available features\nThe available features are described in the [`features`](https://docs.rs/mio/latest/mio/features/index.html \"mod mio::features\") module.\n## Re-exports[\u00a7](https://docs.rs/mio/latest/mio/#reexports)\n\n`pub use event::Events[](https://docs.rs/mio/latest/mio/event/struct.Events.html \"struct mio::event::Events\");`\n\n## Modules[\u00a7](https://docs.rs/mio/latest/mio/#modules)\n\n[event](https://docs.rs/mio/latest/mio/event/index.html \"mod mio::event\")\n    Readiness event types and utilities.\n\n[features](https://docs.rs/mio/latest/mio/features/index.html \"mod mio::features\")\n    Mio\u2019s optional features.\n\n[guide](https://docs.rs/mio/latest/mio/guide/index.html \"mod mio::guide\")\n    Getting started guide.\n\n[net](https://docs.rs/mio/latest/mio/net/index.html \"mod mio::net\")`net`\n    Networking primitives.\n\n[unix](https://docs.rs/mio/latest/mio/unix/index.html \"mod mio::unix\")Unix and `os-ext`\n    Unix only extensions.\n## Structs[\u00a7](https://docs.rs/mio/latest/mio/#structs)\n\n[Interest](https://docs.rs/mio/latest/mio/struct.Interest.html \"struct mio::Interest\")\n    Interest used in registering.\n\n[Poll](https://docs.rs/mio/latest/mio/struct.Poll.html \"struct mio::Poll\")\n    Polls for readiness events on all registered values.\n\n[Registry](https://docs.rs/mio/latest/mio/struct.Registry.html \"struct mio::Registry\")\n    Registers I/O resources.\n\n[Token](https://docs.rs/mio/latest/mio/struct.Token.html \"struct mio::Token\")\n    Associates readiness events with [`event::Source`](https://docs.rs/mio/latest/mio/event/trait.Source.html)s.\n\n[Waker](https://docs.rs/mio/latest/mio/struct.Waker.html \"struct mio::Waker\")\n    Waker allows cross-thread waking of [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html).\n",
        "markdown_with_citations": "[](https://docs.rs/mio/latest/mio/all.html \"show sidebar\")\n# Crate mioCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\n## \u00a7\u27e84\u27e9Usage\nUsing Mio starts by creating a `Poll`\u27e85\u27e9, which reads events from the OS and puts them into `Events`\u27e86\u27e9. You can handle I/O events from the OS with it.\nFor more detail, see `Poll`\u27e85\u27e9.\n### \u00a7\u27e87\u27e9Examples\nExamples can found in the `examples` directory of the source code, or on GitHub\u27e88\u27e9.\n### \u00a7\u27e89\u27e9Guide\nA getting started guide is available in the `guide`\u27e810\u27e9 module.\n### \u00a7\u27e811\u27e9Available features\nThe available features are described in the `features`\u27e812\u27e9 module.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use event::Events[](https://docs.rs/mio/latest/mio/event/struct.Events.html \"struct mio::event::Events\");`\n\n## Modules\u00a7\u27e814\u27e9\n\nevent\u27e815\u27e9\n    Readiness event types and utilities.\n\nfeatures\u27e812\u27e9\n    Mio\u2019s optional features.\n\nguide\u27e810\u27e9\n    Getting started guide.\n\nnet\u27e816\u27e9`net`\n    Networking primitives.\n\nunix\u27e817\u27e9Unix and `os-ext`\n    Unix only extensions.\n## Structs\u00a7\u27e818\u27e9\n\nInterest\u27e819\u27e9\n    Interest used in registering.\n\nPoll\u27e85\u27e9\n    Polls for readiness events on all registered values.\n\nRegistry\u27e820\u27e9\n    Registers I/O resources.\n\nToken\u27e821\u27e9\n    Associates readiness events with `event::Source`\u27e822\u27e9s.\n\nWaker\u27e823\u27e9\n    Waker allows cross-thread waking of `Poll`\u27e85\u27e9.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/mio/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/mio/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/mio/latest/src/mio/lib.rs.html#1-277: Source\n\u27e84\u27e9 https://docs.rs/mio/latest/mio/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/mio/latest/mio/struct.Poll.html: `Poll`\n\u27e86\u27e9 https://docs.rs/mio/latest/mio/event/struct.Events.html: `Events`\n\u27e87\u27e9 https://docs.rs/mio/latest/mio/#examples: \u00a7\n\u27e88\u27e9 https://github.com/tokio-rs/mio/tree/master/examples: on GitHub\n\u27e89\u27e9 https://docs.rs/mio/latest/mio/#guide: \u00a7\n\u27e810\u27e9 https://docs.rs/mio/latest/mio/guide/index.html: mod mio::guide - `guide`\n\u27e811\u27e9 https://docs.rs/mio/latest/mio/#available-features: \u00a7\n\u27e812\u27e9 https://docs.rs/mio/latest/mio/features/index.html: mod mio::features - `features`\n\u27e813\u27e9 https://docs.rs/mio/latest/mio/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/mio/latest/mio/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/mio/latest/mio/event/index.html: mod mio::event - event\n\u27e816\u27e9 https://docs.rs/mio/latest/mio/net/index.html: mod mio::net - net\n\u27e817\u27e9 https://docs.rs/mio/latest/mio/unix/index.html: mod mio::unix - unix\n\u27e818\u27e9 https://docs.rs/mio/latest/mio/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/mio/latest/mio/struct.Interest.html: struct mio::Interest - Interest\n\u27e820\u27e9 https://docs.rs/mio/latest/mio/struct.Registry.html: struct mio::Registry - Registry\n\u27e821\u27e9 https://docs.rs/mio/latest/mio/struct.Token.html: struct mio::Token - Token\n\u27e822\u27e9 https://docs.rs/mio/latest/mio/event/trait.Source.html: `event::Source`\n\u27e823\u27e9 https://docs.rs/mio/latest/mio/struct.Waker.html: struct mio::Waker - Waker\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `mio` crate is a fast, low-level I/O library for Rust that provides non-blocking APIs and event notification, enabling the development of high-performance I/O applications with minimal overhead. Key features include the `Poll` and `Events` abstractions for handling OS-level I/O events, support for networking primitives, Unix-specific extensions, and utilities like `Registry` for resource management and `Waker` for cross-thread waking. It is designed for efficient interaction with OS abstractions and includes comprehensive guides and examples.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: Event Handling  \n\u2705 Factual: Mio uses a `Poll` struct to read events from the operating system and places them into an `Events` struct, allowing efficient handling of non-blocking I/O operations.  \n\u274c Counterfactual: Mio automatically processes events and performs I/O operations without requiring developers to manually handle the `Poll` and `Events` structs.  \n\n---\n\n### Pair 2: Cross-Thread Waking  \n\u2705 Factual: The `Waker` struct in Mio enables cross-thread waking of the `Poll` instance, allowing threads to signal readiness events efficiently.  \n\u274c Counterfactual: Mio's `Waker` can directly wake specific I/O resources registered with the `Registry` without interacting with the `Poll` instance.  \n\n---\n\n### Pair 3: Platform-Specific Features  \n\u2705 Factual: Mio provides Unix-specific extensions through the `unix` module, enabling access to additional OS-specific functionality for Unix-like systems.  \n\u274c Counterfactual: Mio's `unix` module is fully compatible with Windows systems, offering identical functionality across all platforms.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}