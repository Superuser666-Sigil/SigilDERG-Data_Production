{
    "name": "futures-util",
    "version": "0.3.31",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/futures-util/latest/futures_util/all.html \"show sidebar\")\n# Crate futures_utilCopy item path\n[Settings](https://docs.rs/futures-util/latest/settings.html)\n[Help](https://docs.rs/futures-util/latest/help.html)\nSummary[Source](https://docs.rs/futures-util/latest/src/futures_util/lib.rs.html#1-332)\nExpand description\nCombinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.\n## Re-exports[\u00a7](https://docs.rs/futures-util/latest/futures_util/#reexports)\n\n`pub use crate::future::Future[](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\");`\n\n\n`pub use crate::future::FutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.FutureExt.html \"trait futures_util::future::FutureExt\");`\n\n\n`pub use crate::future::TryFuture[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFuture.html \"trait futures_util::future::TryFuture\");`\n\n\n`pub use crate::future::TryFutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFutureExt.html \"trait futures_util::future::TryFutureExt\");`\n\n\n`pub use crate::stream::Stream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.Stream.html \"trait futures_util::stream::Stream\");`\n\n\n`pub use crate::stream::StreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.StreamExt.html \"trait futures_util::stream::StreamExt\");`\n\n\n`pub use crate::stream::TryStream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStream.html \"trait futures_util::stream::TryStream\");`\n\n\n`pub use crate::stream::TryStreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStreamExt.html \"trait futures_util::stream::TryStreamExt\");`\n\n\n`pub use crate::sink::Sink[](https://docs.rs/futures-util/latest/futures_util/sink/trait.Sink.html \"trait futures_util::sink::Sink\");`\n\n\n`pub use crate::sink::SinkExt[](https://docs.rs/futures-util/latest/futures_util/sink/trait.SinkExt.html \"trait futures_util::sink::SinkExt\");`\n\n\n`pub use crate::io::AsyncBufRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufRead.html \"trait futures_util::io::AsyncBufRead\");`\n\n\n`pub use crate::io::AsyncBufReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufReadExt.html \"trait futures_util::io::AsyncBufReadExt\");`\n\n\n`pub use crate::io::AsyncRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncRead.html \"trait futures_util::io::AsyncRead\");`\n\n\n`pub use crate::io::AsyncReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncReadExt.html \"trait futures_util::io::AsyncReadExt\");`\n\n\n`pub use crate::io::AsyncSeek[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeek.html \"trait futures_util::io::AsyncSeek\");`\n\n\n`pub use crate::io::AsyncSeekExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeekExt.html \"trait futures_util::io::AsyncSeekExt\");`\n\n\n`pub use crate::io::AsyncWrite[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWrite.html \"trait futures_util::io::AsyncWrite\");`\n\n\n`pub use crate::io::AsyncWriteExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWriteExt.html \"trait futures_util::io::AsyncWriteExt\");`\n\n## Modules[\u00a7](https://docs.rs/futures-util/latest/futures_util/#modules)\n\n[compat](https://docs.rs/futures-util/latest/futures_util/compat/index.html \"mod futures_util::compat\")`compat`\n    Interop between `futures` 0.1 and 0.3.\n\n[future](https://docs.rs/futures-util/latest/futures_util/future/index.html \"mod futures_util::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/futures-util/latest/futures_util/io/index.html \"mod futures_util::io\")`io`\n    Asynchronous I/O.\n\n[lock](https://docs.rs/futures-util/latest/futures_util/lock/index.html \"mod futures_util::lock\")\n    Futures-powered synchronization primitives.\n\n[never](https://docs.rs/futures-util/latest/futures_util/never/index.html \"mod futures_util::never\")\n    This module contains the `Never` type.\n\n[sink](https://docs.rs/futures-util/latest/futures_util/sink/index.html \"mod futures_util::sink\")`sink`\n    Asynchronous sinks.\n\n[stream](https://docs.rs/futures-util/latest/futures_util/stream/index.html \"mod futures_util::stream\")\n    Asynchronous streams.\n\n[task](https://docs.rs/futures-util/latest/futures_util/task/index.html \"mod futures_util::task\")\n    Tools for working with tasks.\n## Macros[\u00a7](https://docs.rs/futures-util/latest/futures_util/#macros)\n\n[join](https://docs.rs/futures-util/latest/futures_util/macro.join.html \"macro futures_util::join\")\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\n[pending](https://docs.rs/futures-util/latest/futures_util/macro.pending.html \"macro futures_util::pending\")\n    A macro which yields to the event loop once.\n\n[pin_mut](https://docs.rs/futures-util/latest/futures_util/macro.pin_mut.html \"macro futures_util::pin_mut\")\n    Pins a value on the stack.\n\n[poll](https://docs.rs/futures-util/latest/futures_util/macro.poll.html \"macro futures_util::poll\")\n    A macro which returns the result of polling a future once within the current `async` context.\n\n[ready](https://docs.rs/futures-util/latest/futures_util/macro.ready.html \"macro futures_util::ready\")\n    Extracts the successful type of a `Poll<T>`.\n\n[select](https://docs.rs/futures-util/latest/futures_util/macro.select.html \"macro futures_util::select\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\n[select_biased](https://docs.rs/futures-util/latest/futures_util/macro.select_biased.html \"macro futures_util::select_biased\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike [`select!`](https://docs.rs/futures-util/latest/futures_util/macro.select.html), if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\n[stream_select](https://docs.rs/futures-util/latest/futures_util/macro.stream_select.html \"macro futures_util::stream_select\")\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\n[try_join](https://docs.rs/futures-util/latest/futures_util/macro.try_join.html \"macro futures_util::try_join\")\n    Polls multiple futures simultaneously, resolving to a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\") containing either a tuple of the successful outputs or an error.\n",
        "markdown_with_citations": "[](https://docs.rs/futures-util/latest/futures_util/all.html \"show sidebar\")\n# Crate futures_utilCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nCombinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.\n## Re-exports\u00a7\u27e84\u27e9\n\n`pub use crate::future::Future[](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\");`\n\n\n`pub use crate::future::FutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.FutureExt.html \"trait futures_util::future::FutureExt\");`\n\n\n`pub use crate::future::TryFuture[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFuture.html \"trait futures_util::future::TryFuture\");`\n\n\n`pub use crate::future::TryFutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFutureExt.html \"trait futures_util::future::TryFutureExt\");`\n\n\n`pub use crate::stream::Stream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.Stream.html \"trait futures_util::stream::Stream\");`\n\n\n`pub use crate::stream::StreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.StreamExt.html \"trait futures_util::stream::StreamExt\");`\n\n\n`pub use crate::stream::TryStream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStream.html \"trait futures_util::stream::TryStream\");`\n\n\n`pub use crate::stream::TryStreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStreamExt.html \"trait futures_util::stream::TryStreamExt\");`\n\n\n`pub use crate::sink::Sink[](https://docs.rs/futures-util/latest/futures_util/sink/trait.Sink.html \"trait futures_util::sink::Sink\");`\n\n\n`pub use crate::sink::SinkExt[](https://docs.rs/futures-util/latest/futures_util/sink/trait.SinkExt.html \"trait futures_util::sink::SinkExt\");`\n\n\n`pub use crate::io::AsyncBufRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufRead.html \"trait futures_util::io::AsyncBufRead\");`\n\n\n`pub use crate::io::AsyncBufReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufReadExt.html \"trait futures_util::io::AsyncBufReadExt\");`\n\n\n`pub use crate::io::AsyncRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncRead.html \"trait futures_util::io::AsyncRead\");`\n\n\n`pub use crate::io::AsyncReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncReadExt.html \"trait futures_util::io::AsyncReadExt\");`\n\n\n`pub use crate::io::AsyncSeek[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeek.html \"trait futures_util::io::AsyncSeek\");`\n\n\n`pub use crate::io::AsyncSeekExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeekExt.html \"trait futures_util::io::AsyncSeekExt\");`\n\n\n`pub use crate::io::AsyncWrite[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWrite.html \"trait futures_util::io::AsyncWrite\");`\n\n\n`pub use crate::io::AsyncWriteExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWriteExt.html \"trait futures_util::io::AsyncWriteExt\");`\n\n## Modules\u00a7\u27e85\u27e9\n\ncompat\u27e86\u27e9`compat`\n    Interop between `futures` 0.1 and 0.3.\n\nfuture\u27e87\u27e9\n    Asynchronous values.\n\nio\u27e88\u27e9`io`\n    Asynchronous I/O.\n\nlock\u27e89\u27e9\n    Futures-powered synchronization primitives.\n\nnever\u27e810\u27e9\n    This module contains the `Never` type.\n\nsink\u27e811\u27e9`sink`\n    Asynchronous sinks.\n\nstream\u27e812\u27e9\n    Asynchronous streams.\n\ntask\u27e813\u27e9\n    Tools for working with tasks.\n## Macros\u00a7\u27e814\u27e9\n\njoin\u27e815\u27e9\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\npending\u27e816\u27e9\n    A macro which yields to the event loop once.\n\npin_mut\u27e817\u27e9\n    Pins a value on the stack.\n\npoll\u27e818\u27e9\n    A macro which returns the result of polling a future once within the current `async` context.\n\nready\u27e819\u27e9\n    Extracts the successful type of a `Poll<T>`.\n\nselect\u27e820\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\nselect_biased\u27e821\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike `select!`\u27e820\u27e9, if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\nstream_select\u27e822\u27e9\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\ntry_join\u27e823\u27e9\n    Polls multiple futures simultaneously, resolving to a `Result`\u27e824\u27e9 containing either a tuple of the successful outputs or an error.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-util/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-util/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-util/latest/src/futures_util/lib.rs.html#1-332: Source\n\u27e84\u27e9 https://docs.rs/futures-util/latest/futures_util/#reexports: \u00a7\n\u27e85\u27e9 https://docs.rs/futures-util/latest/futures_util/#modules: \u00a7\n\u27e86\u27e9 https://docs.rs/futures-util/latest/futures_util/compat/index.html: mod futures_util::compat - compat\n\u27e87\u27e9 https://docs.rs/futures-util/latest/futures_util/future/index.html: mod futures_util::future - future\n\u27e88\u27e9 https://docs.rs/futures-util/latest/futures_util/io/index.html: mod futures_util::io - io\n\u27e89\u27e9 https://docs.rs/futures-util/latest/futures_util/lock/index.html: mod futures_util::lock - lock\n\u27e810\u27e9 https://docs.rs/futures-util/latest/futures_util/never/index.html: mod futures_util::never - never\n\u27e811\u27e9 https://docs.rs/futures-util/latest/futures_util/sink/index.html: mod futures_util::sink - sink\n\u27e812\u27e9 https://docs.rs/futures-util/latest/futures_util/stream/index.html: mod futures_util::stream - stream\n\u27e813\u27e9 https://docs.rs/futures-util/latest/futures_util/task/index.html: mod futures_util::task - task\n\u27e814\u27e9 https://docs.rs/futures-util/latest/futures_util/#macros: \u00a7\n\u27e815\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.join.html: macro futures_util::join - join\n\u27e816\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.pending.html: macro futures_util::pending - pending\n\u27e817\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.pin_mut.html: macro futures_util::pin_mut - pin_mut\n\u27e818\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.poll.html: macro futures_util::poll - poll\n\u27e819\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.ready.html: macro futures_util::ready - ready\n\u27e820\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.select.html: macro futures_util::select - select\n\u27e821\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.select_biased.html: macro futures_util::select_biased - select_biased\n\u27e822\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.stream_select.html: macro futures_util::stream_select - stream_select\n\u27e823\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.try_join.html: macro futures_util::try_join - try_join\n\u27e824\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `futures-util` crate provides combinators and utilities for working with asynchronous programming constructs in Rust, including `Future`, `Stream`, `Sink`, and traits for asynchronous I/O like `AsyncRead` and `AsyncWrite`. It includes modules for interop between different versions of `futures`, synchronization primitives, and task management, along with a rich set of macros like `join`, `select`, and `try_join` for composing and managing asynchronous operations. This crate is essential for building robust async workflows in Rust.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 9.0,
    "factual_counterfactual": "### Pair 1: Future and Stream Utilities  \n\u2705 **Factual:** The `futures-util` crate provides the `StreamExt` trait, which extends asynchronous streams with combinator methods like `filter`, `map`, and `fold`.  \n\u274c **Counterfactual:** The `futures-util` crate requires all streams to implement the `Unpin` trait to use the `StreamExt` combinators.  \n\n---\n\n### Pair 2: Macros for Async Operations  \n\u2705 **Factual:** The `select!` macro in `futures-util` allows polling multiple futures or streams simultaneously, selecting the first one to complete, with pseudo-random selection if multiple are ready.  \n\u274c **Counterfactual:** The `select!` macro in `futures-util` guarantees deterministic selection of the first future or stream declared in the macro, regardless of readiness.  \n\n---\n\n### Pair 3: Compatibility Features  \n\u2705 **Factual:** The `compat` module in `futures-util` facilitates interoperation between `futures` versions 0.1 and 0.3, enabling migration of legacy code.  \n\u274c **Counterfactual:** The `compat` module in `futures-util` is designed exclusively for converting `futures` 0.3 types to `futures` 0.1 types and does not support the reverse conversion.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}