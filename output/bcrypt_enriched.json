{
    "name": "bcrypt",
    "version": "0.17.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/bcrypt/latest/bcrypt/all.html \"show sidebar\")\n# Crate bcryptCopy item path\n[Settings](https://docs.rs/bcrypt/latest/settings.html)\n[Help](https://docs.rs/bcrypt/latest/help.html)\nSummary[Source](https://docs.rs/bcrypt/latest/src/bcrypt/lib.rs.html#1-571)\nExpand description\nEasily hash and verify passwords using bcrypt\n## Structs[\u00a7](https://docs.rs/bcrypt/latest/bcrypt/#structs)\n\n[HashParts](https://docs.rs/bcrypt/latest/bcrypt/struct.HashParts.html \"struct bcrypt::HashParts\")\n    A bcrypt hash result before concatenating\n## Enums[\u00a7](https://docs.rs/bcrypt/latest/bcrypt/#enums)\n\n[BcryptError](https://docs.rs/bcrypt/latest/bcrypt/enum.BcryptError.html \"enum bcrypt::BcryptError\")\n    All the errors we can encounter while hashing/verifying passwords\n\n[Version](https://docs.rs/bcrypt/latest/bcrypt/enum.Version.html \"enum bcrypt::Version\")\n    BCrypt hash version https://en.wikipedia.org/wiki/Bcrypt#Versioning_history\n## Constants[\u00a7](https://docs.rs/bcrypt/latest/bcrypt/#constants)\n\n[BASE_64](https://docs.rs/bcrypt/latest/bcrypt/constant.BASE_64.html \"constant bcrypt::BASE_64\")\n\n\n[DEFAULT_COST](https://docs.rs/bcrypt/latest/bcrypt/constant.DEFAULT_COST.html \"constant bcrypt::DEFAULT_COST\")\n\n## Functions[\u00a7](https://docs.rs/bcrypt/latest/bcrypt/#functions)\n\n[bcrypt](https://docs.rs/bcrypt/latest/bcrypt/fn.bcrypt.html \"fn bcrypt::bcrypt\")\n\n\n[hash](https://docs.rs/bcrypt/latest/bcrypt/fn.hash.html \"fn bcrypt::hash\")\n    Generates a password hash using the cost given. The salt is generated randomly using the OS randomness\n\n[hash_with_result](https://docs.rs/bcrypt/latest/bcrypt/fn.hash_with_result.html \"fn bcrypt::hash_with_result\")\n    Generates a password hash using the cost given. The salt is generated randomly using the OS randomness. The function returns a result structure and allows to format the hash in different versions.\n\n[hash_with_salt](https://docs.rs/bcrypt/latest/bcrypt/fn.hash_with_salt.html \"fn bcrypt::hash_with_salt\")\n    Generates a password given a hash and a cost. The function returns a result structure and allows to format the hash in different versions.\n\n[non_truncating_hash](https://docs.rs/bcrypt/latest/bcrypt/fn.non_truncating_hash.html \"fn bcrypt::non_truncating_hash\")\n    Generates a password hash using the cost given. The salt is generated randomly using the OS randomness Will return BcryptError::Truncation if password is longer than 72 bytes\n\n[non_truncating_hash_with_result](https://docs.rs/bcrypt/latest/bcrypt/fn.non_truncating_hash_with_result.html \"fn bcrypt::non_truncating_hash_with_result\")\n    Generates a password hash using the cost given. The salt is generated randomly using the OS randomness. The function returns a result structure and allows to format the hash in different versions. Will return BcryptError::Truncation if password is longer than 72 bytes\n\n[non_truncating_hash_with_salt](https://docs.rs/bcrypt/latest/bcrypt/fn.non_truncating_hash_with_salt.html \"fn bcrypt::non_truncating_hash_with_salt\")\n    Generates a password given a hash and a cost. The function returns a result structure and allows to format the hash in different versions. Will return BcryptError::Truncation if password is longer than 72 bytes\n\n[non_truncating_verify](https://docs.rs/bcrypt/latest/bcrypt/fn.non_truncating_verify.html \"fn bcrypt::non_truncating_verify\")\n    Verify that a password is equivalent to the hash provided. Only use this if you are only using `non_truncating_hash` to generate the hash. It will return an error for inputs that will work if generated from other sources.\n\n[verify](https://docs.rs/bcrypt/latest/bcrypt/fn.verify.html \"fn bcrypt::verify\")\n    Verify that a password is equivalent to the hash provided\n## Type Aliases[\u00a7](https://docs.rs/bcrypt/latest/bcrypt/#types)\n\n[BcryptResult](https://docs.rs/bcrypt/latest/bcrypt/type.BcryptResult.html \"type bcrypt::BcryptResult\")\n    Library generic result type.\n",
        "markdown_with_citations": "[](https://docs.rs/bcrypt/latest/bcrypt/all.html \"show sidebar\")\n# Crate bcryptCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nEasily hash and verify passwords using bcrypt\n## Structs\u00a7\u27e84\u27e9\n\nHashParts\u27e85\u27e9\n    A bcrypt hash result before concatenating\n## Enums\u00a7\u27e86\u27e9\n\nBcryptError\u27e87\u27e9\n    All the errors we can encounter while hashing/verifying passwords\n\nVersion\u27e88\u27e9\n    BCrypt hash version https://en.wikipedia.org/wiki/Bcrypt#Versioning_history\n## Constants\u00a7\u27e89\u27e9\n\nBASE_64\u27e810\u27e9\n\n\nDEFAULT_COST\u27e811\u27e9\n\n## Functions\u00a7\u27e812\u27e9\n\nbcrypt\u27e813\u27e9\n\n\nhash\u27e814\u27e9\n    Generates a password hash using the cost given. The salt is generated randomly using the OS randomness\n\nhash_with_result\u27e815\u27e9\n    Generates a password hash using the cost given. The salt is generated randomly using the OS randomness. The function returns a result structure and allows to format the hash in different versions.\n\nhash_with_salt\u27e816\u27e9\n    Generates a password given a hash and a cost. The function returns a result structure and allows to format the hash in different versions.\n\nnon_truncating_hash\u27e817\u27e9\n    Generates a password hash using the cost given. The salt is generated randomly using the OS randomness Will return BcryptError::Truncation if password is longer than 72 bytes\n\nnon_truncating_hash_with_result\u27e818\u27e9\n    Generates a password hash using the cost given. The salt is generated randomly using the OS randomness. The function returns a result structure and allows to format the hash in different versions. Will return BcryptError::Truncation if password is longer than 72 bytes\n\nnon_truncating_hash_with_salt\u27e819\u27e9\n    Generates a password given a hash and a cost. The function returns a result structure and allows to format the hash in different versions. Will return BcryptError::Truncation if password is longer than 72 bytes\n\nnon_truncating_verify\u27e820\u27e9\n    Verify that a password is equivalent to the hash provided. Only use this if you are only using `non_truncating_hash` to generate the hash. It will return an error for inputs that will work if generated from other sources.\n\nverify\u27e821\u27e9\n    Verify that a password is equivalent to the hash provided\n## Type Aliases\u00a7\u27e822\u27e9\n\nBcryptResult\u27e823\u27e9\n    Library generic result type.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bcrypt/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bcrypt/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bcrypt/latest/src/bcrypt/lib.rs.html#1-571: Source\n\u27e84\u27e9 https://docs.rs/bcrypt/latest/bcrypt/#structs: \u00a7\n\u27e85\u27e9 https://docs.rs/bcrypt/latest/bcrypt/struct.HashParts.html: struct bcrypt::HashParts - HashParts\n\u27e86\u27e9 https://docs.rs/bcrypt/latest/bcrypt/#enums: \u00a7\n\u27e87\u27e9 https://docs.rs/bcrypt/latest/bcrypt/enum.BcryptError.html: enum bcrypt::BcryptError - BcryptError\n\u27e88\u27e9 https://docs.rs/bcrypt/latest/bcrypt/enum.Version.html: enum bcrypt::Version - Version\n\u27e89\u27e9 https://docs.rs/bcrypt/latest/bcrypt/#constants: \u00a7\n\u27e810\u27e9 https://docs.rs/bcrypt/latest/bcrypt/constant.BASE_64.html: constant bcrypt::BASE_64 - BASE_64\n\u27e811\u27e9 https://docs.rs/bcrypt/latest/bcrypt/constant.DEFAULT_COST.html: constant bcrypt::DEFAULT_COST - DEFAULT_COST\n\u27e812\u27e9 https://docs.rs/bcrypt/latest/bcrypt/#functions: \u00a7\n\u27e813\u27e9 https://docs.rs/bcrypt/latest/bcrypt/fn.bcrypt.html: fn bcrypt::bcrypt - bcrypt\n\u27e814\u27e9 https://docs.rs/bcrypt/latest/bcrypt/fn.hash.html: fn bcrypt::hash - hash\n\u27e815\u27e9 https://docs.rs/bcrypt/latest/bcrypt/fn.hash_with_result.html: fn bcrypt::hash_with_result - hash_with_result\n\u27e816\u27e9 https://docs.rs/bcrypt/latest/bcrypt/fn.hash_with_salt.html: fn bcrypt::hash_with_salt - hash_with_salt\n\u27e817\u27e9 https://docs.rs/bcrypt/latest/bcrypt/fn.non_truncating_hash.html: fn bcrypt::non_truncating_hash - non_truncating_hash\n\u27e818\u27e9 https://docs.rs/bcrypt/latest/bcrypt/fn.non_truncating_hash_with_result.html: fn bcrypt::non_truncating_hash_with_result - non_truncating_hash_with_result\n\u27e819\u27e9 https://docs.rs/bcrypt/latest/bcrypt/fn.non_truncating_hash_with_salt.html: fn bcrypt::non_truncating_hash_with_salt - non_truncating_hash_with_salt\n\u27e820\u27e9 https://docs.rs/bcrypt/latest/bcrypt/fn.non_truncating_verify.html: fn bcrypt::non_truncating_verify - non_truncating_verify\n\u27e821\u27e9 https://docs.rs/bcrypt/latest/bcrypt/fn.verify.html: fn bcrypt::verify - verify\n\u27e822\u27e9 https://docs.rs/bcrypt/latest/bcrypt/#types: \u00a7\n\u27e823\u27e9 https://docs.rs/bcrypt/latest/bcrypt/type.BcryptResult.html: type bcrypt::BcryptResult - BcryptResult\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `bcrypt` crate provides an easy-to-use implementation for hashing and verifying passwords using the bcrypt algorithm. It supports customizable hashing costs, random salt generation, and various hash formatting options, including non-truncating variants for passwords longer than 72 bytes. Additionally, it includes error handling via `BcryptError` and utility functions for verification and result management.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 5.0,
    "factual_counterfactual": "### Pair 1: Password Hashing and Verification\n\u2705 **Factual:** The `bcrypt` crate provides a `hash` function that generates a password hash using a randomly generated salt and a configurable cost factor, ensuring secure password storage.  \n\u274c **Counterfactual:** The `bcrypt` crate allows hashing passwords without using a salt, relying solely on the cost factor for security.  \n\n---\n\n### Pair 2: Password Length Handling\n\u2705 **Factual:** The `non_truncating_hash` function in the `bcrypt` crate will return a `BcryptError::Truncation` if the password exceeds 72 bytes, ensuring compliance with bcrypt's limitations.  \n\u274c **Counterfactual:** The `non_truncating_hash` function in the `bcrypt` crate automatically handles passwords longer than 72 bytes by splitting them into chunks and hashing each chunk separately.  \n\n---\n\n### Pair 3: Verification Functions\n\u2705 **Factual:** The `verify` function in the `bcrypt` crate checks if a given password matches a hash, and it works with hashes generated by the standard `hash` function.  \n\u274c **Counterfactual:** The `verify` function in the `bcrypt` crate can validate any hash, including those generated by hashing algorithms other than bcrypt, such as SHA256 or Argon2.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}