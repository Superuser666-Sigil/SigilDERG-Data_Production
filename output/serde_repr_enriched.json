{
    "name": "serde_repr",
    "version": "0.1.20",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/serde_repr/latest/serde_repr/all.html \"show sidebar\")\n# Crate serde_reprCopy item path\n[Settings](https://docs.rs/serde_repr/latest/settings.html)\n[Help](https://docs.rs/serde_repr/latest/help.html)\nSummary[Source](https://docs.rs/serde_repr/latest/src/serde_repr/lib.rs.html#1-144)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/serde-repr) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/serde_repr) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/serde_repr)\nDerive `Serialize` and `Deserialize` that delegates to the underlying repr of a C-like enum.\n## [\u00a7](https://docs.rs/serde_repr/latest/serde_repr/#examples)Examples\n```\nuse serde_repr::{Serialize_repr, Deserialize_repr};\n#[derive(Serialize_repr, Deserialize_repr, PartialEq, Debug)]\n#[repr(u8)]\nenum SmallPrime {\n  Two = 2,\n  Three = 3,\n  Five = 5,\n  Seven = 7,\n}\nfn main() -> serde_json::Result<()> {\n  let j = serde_json::to_string(&SmallPrime::Seven)?;\n  assert_eq!(j, \"7\");\n  let p: SmallPrime = serde_json::from_str(\"2\")?;\n  assert_eq!(p, SmallPrime::Two);\n  Ok(())\n}\n```\n\n## Derive Macros[\u00a7](https://docs.rs/serde_repr/latest/serde_repr/#derives)\n\n[Deserialize_repr](https://docs.rs/serde_repr/latest/serde_repr/derive.Deserialize_repr.html \"derive serde_repr::Deserialize_repr\")\n\n\n[Serialize_repr](https://docs.rs/serde_repr/latest/serde_repr/derive.Serialize_repr.html \"derive serde_repr::Serialize_repr\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/serde_repr/latest/serde_repr/all.html \"show sidebar\")\n# Crate serde_reprCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/serde-repr) ![crates-io\u27e85\u27e9](https://crates.io/crates/serde_repr) ![docs-rs\u27e86\u27e9](https://docs.rs/serde_repr)\nDerive `Serialize` and `Deserialize` that delegates to the underlying repr of a C-like enum.\n## \u00a7\u27e87\u27e9Examples\n```\nuse serde_repr::{Serialize_repr, Deserialize_repr};\n#[derive(Serialize_repr, Deserialize_repr, PartialEq, Debug)]\n#[repr(u8)]\nenum SmallPrime {\n  Two = 2,\n  Three = 3,\n  Five = 5,\n  Seven = 7,\n}\nfn main() -> serde_json::Result<()> {\n  let j = serde_json::to_string(&SmallPrime::Seven)?;\n  assert_eq!(j, \"7\");\n  let p: SmallPrime = serde_json::from_str(\"2\")?;\n  assert_eq!(p, SmallPrime::Two);\n  Ok(())\n}\n```\n\n## Derive Macros\u00a7\u27e88\u27e9\n\nDeserialize_repr\u27e89\u27e9\n\n\nSerialize_repr\u27e810\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_repr/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_repr/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_repr/latest/src/serde_repr/lib.rs.html#1-144: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://docs.rs/serde_repr/latest/serde_repr/#examples: \u00a7\n\u27e88\u27e9 https://docs.rs/serde_repr/latest/serde_repr/#derives: \u00a7\n\u27e89\u27e9 https://docs.rs/serde_repr/latest/serde_repr/derive.Deserialize_repr.html: derive serde_repr::Deserialize_repr - Deserialize_repr\n\u27e810\u27e9 https://docs.rs/serde_repr/latest/serde_repr/derive.Serialize_repr.html: derive serde_repr::Serialize_repr - Serialize_repr\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `serde_repr` crate provides derive macros (`Serialize_repr` and `Deserialize_repr`) to enable serialization and deserialization of C-like enums based on their underlying representation (e.g., `#[repr(u8)]`). This allows enums to be serialized as their numeric values and deserialized from those values, making it ideal for interoperability with external systems that use primitive representations. It integrates seamlessly with `serde` and supports common use cases like JSON serialization.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Serialization and Deserialization of Enum Representations  \n\u2705 **Factual:** The `serde_repr` crate allows you to derive `Serialize` and `Deserialize` traits for enums, enabling serialization and deserialization based on their underlying representation (e.g., `#[repr(u8)]`).  \n\u274c **Counterfactual:** The `serde_repr` crate can serialize and deserialize enums based on their variant names rather than their underlying representation.  \n\n---\n\n### Pair 2: Supported Enum Representations  \n\u2705 **Factual:** The `serde_repr` crate supports enums with C-like representations such as `#[repr(u8)]`, `#[repr(i32)]`, and other primitive integer types.  \n\u274c **Counterfactual:** The `serde_repr` crate supports serialization and deserialization of enums with complex representations, such as enums containing associated data or tuple variants.  \n\n---\n\n### Pair 3: Compatibility with `serde_json`  \n\u2705 **Factual:** The `serde_repr` crate integrates seamlessly with `serde_json`, allowing enums to be serialized into JSON as their underlying numeric representation.  \n\u274c **Counterfactual:** The `serde_repr` crate requires custom serialization logic to work with `serde_json`, as it does not natively support JSON serialization.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}