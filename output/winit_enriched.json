{
    "name": "winit",
    "version": "0.30.11",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/winit/latest/winit/all.html \"show sidebar\")\n# Crate winitCopy item path\n[Settings](https://docs.rs/winit/latest/settings.html)\n[Help](https://docs.rs/winit/latest/help.html)\nSummary[Source](https://docs.rs/winit/latest/src/winit/lib.rs.html#1-217)\nExpand description\nWinit is a cross-platform window creation and event loop management library.\n## [\u00a7](https://docs.rs/winit/latest/winit/#building-windows)Building windows\nBefore you can create a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\"), you first need to build an [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\"). This is done with the [`EventLoop::new()`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.new \"associated function winit::event_loop::EventLoop::new\") function.\n```\nuse winit::event_loop::EventLoop;\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ...\n}\n```\n\nThen you create a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") with [`create_window`](https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.create_window \"method winit::event_loop::ActiveEventLoop::create_window\").\n## [\u00a7](https://docs.rs/winit/latest/winit/#event-handling)Event handling\nOnce a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") has been created, it will generate different _events_. A [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") object can generate [`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\")s when certain input events occur, such as a cursor moving over the window or a key getting pressed while the window is focused. Devices can generate [`DeviceEvent`](https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html \"enum winit::event::DeviceEvent\")s, which contain unfiltered event data that isn\u2019t specific to a certain window. Some user activity, like mouse movement, can generate both a [`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\") _and_ a [`DeviceEvent`](https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html \"enum winit::event::DeviceEvent\"). You can also create and handle your own custom [`Event::UserEvent`](https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.UserEvent \"variant winit::event::Event::UserEvent\")s, if desired.\nYou can retrieve events by calling [`EventLoop::run_app()`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.run_app \"method winit::event_loop::EventLoop::run_app\"). This function will dispatch events for every [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") that was created with that particular [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\"), and will run until [`exit()`](https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.exit \"method winit::event_loop::ActiveEventLoop::exit\") is used, at which point [`Event::LoopExiting`](https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.LoopExiting \"variant winit::event::Event::LoopExiting\").\nWinit no longer uses a `EventLoop::poll_events() -> impl Iterator<Event>`-based event loop model, since that can\u2019t be implemented properly on some platforms (e.g web, iOS) and works poorly on most other platforms. However, this model can be re-implemented to an extent with [`EventLoopExtPumpEvents::pump_app_events()`](https://docs.rs/winit/latest/winit/platform/pump_events/trait.EventLoopExtPumpEvents.html#method.pump_app_events \"method winit::platform::pump_events::EventLoopExtPumpEvents::pump_app_events\") [1](https://docs.rs/winit/latest/winit/#fn1). See that method\u2019s documentation for more reasons about why it\u2019s discouraged beyond compatibility reasons.\n```\nuse winit::application::ApplicationHandler;\nuse winit::event::WindowEvent;\nuse winit::event_loop::{ActiveEventLoop, ControlFlow, EventLoop};\nuse winit::window::{Window, WindowId};\n#[derive(Default)]\nstruct App {\n  window: Option<Window>,\n}\nimpl ApplicationHandler for App {\n  fn resumed(&mut self, event_loop: &ActiveEventLoop) {\n    self.window = Some(event_loop.create_window(Window::default_attributes()).unwrap());\n  }\n  fn window_event(&mut self, event_loop: &ActiveEventLoop, id: WindowId, event: WindowEvent) {\n    match event {\n      WindowEvent::CloseRequested => {\n        println!(\"The close button was pressed; stopping\");\n        event_loop.exit();\n      },\n      WindowEvent::RedrawRequested => {\n        // Redraw the application.\n        //\n        // It's preferable for applications that do not render continuously to render in\n        // this event rather than in AboutToWait, since rendering in here allows\n        // the program to gracefully handle redraws requested by the OS.\n        // Draw.\n        // Queue a RedrawRequested event.\n        //\n        // You only need to call this if you've determined that you need to redraw in\n        // applications which do not always need to. Applications that redraw continuously\n        // can render here instead.\n        self.window.as_ref().unwrap().request_redraw();\n      }\n      _ => (),\n    }\n  }\n}\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ControlFlow::Poll continuously runs the event loop, even if the OS hasn't\n  // dispatched any events. This is ideal for games and similar applications.\n  event_loop.set_control_flow(ControlFlow::Poll);\n  // ControlFlow::Wait pauses the event loop if no events are available to process.\n  // This is ideal for non-game applications that only update in response to user\n  // input, and uses significantly less power/CPU time than ControlFlow::Poll.\n  event_loop.set_control_flow(ControlFlow::Wait);\n  let mut app = App::default();\n  event_loop.run_app(&mut app);\n}\n```\n\n[`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\") has a [`WindowId`](https://docs.rs/winit/latest/winit/window/struct.WindowId.html \"struct winit::window::WindowId\") member. In multi-window environments, it should be compared to the value returned by [`Window::id()`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.id \"method winit::window::Window::id\") to determine which [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") dispatched the event.\n## [\u00a7](https://docs.rs/winit/latest/winit/#drawing-on-the-window)Drawing on the window\nWinit doesn\u2019t directly provide any methods for drawing on a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\"). However, it allows you to retrieve the raw handle of the window and display (see the [`platform`](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\") module and/or the [`raw_window_handle`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_window_handle) and [`raw_display_handle`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_display_handle) methods), which in turn allows you to create an OpenGL/Vulkan/DirectX/Metal/etc. context that can be used to render graphics.\nNote that many platforms will display garbage data in the window\u2019s client area if the application doesn\u2019t render anything to the window by the time the desktop compositor is ready to display the window to the user. If you notice this happening, you should create the window with [`visible` set to `false`](https://docs.rs/winit/latest/winit/window/struct.WindowAttributes.html#method.with_visible \"method winit::window::WindowAttributes::with_visible\") and explicitly make the window visible only once you\u2019re ready to render into it.\n## [\u00a7](https://docs.rs/winit/latest/winit/#ui-scaling)UI scaling\nUI scaling is important, go read the docs for the [`dpi`](https://docs.rs/winit/latest/winit/dpi/index.html \"mod winit::dpi\") crate for an introduction.\nAll of Winit\u2019s functions return physical types, but can take either logical or physical coordinates as input, allowing you to use the most convenient coordinate system for your particular application.\nWinit will dispatch a [`ScaleFactorChanged`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged \"variant winit::event::WindowEvent::ScaleFactorChanged\") event whenever a window\u2019s scale factor has changed. This can happen if the user drags their window from a standard-resolution monitor to a high-DPI monitor or if the user changes their DPI settings. This allows you to rescale your application\u2019s UI elements and adjust how the platform changes the window\u2019s size to reflect the new scale factor. If a window hasn\u2019t received a [`ScaleFactorChanged`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged \"variant winit::event::WindowEvent::ScaleFactorChanged\") event, its scale factor can be found by calling [`window.scale_factor()`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.scale_factor \"method winit::window::Window::scale_factor\").\n## [\u00a7](https://docs.rs/winit/latest/winit/#cargo-features)Cargo Features\nWinit provides the following Cargo features:\n  * `x11` (enabled by default): On Unix platforms, enables the X11 backend.\n  * `wayland` (enabled by default): On Unix platforms, enables the Wayland backend.\n  * `rwh_04`: Implement `raw-window-handle v0.4` traits.\n  * `rwh_05`: Implement `raw-window-handle v0.5` traits.\n  * `rwh_06`: Implement `raw-window-handle v0.6` traits.\n  * `serde`: Enables serialization/deserialization of certain types with [Serde](https://crates.io/crates/serde).\n  * `mint`: Enables mint (math interoperability standard types) conversions.\n\n\nSee the [`platform`](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\") module for documentation on platform-specific cargo features.\n  1. `EventLoopExtPumpEvents::pump_app_events()` is only available on Windows, macOS, Android, X11 and Wayland. [\u21a9](https://docs.rs/winit/latest/winit/#fnref1)\n\n\n## Re-exports[\u00a7](https://docs.rs/winit/latest/winit/#reexports)\n\n`pub use rwh_04[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_04;``rwh_04`\n\n\n`pub use rwh_05[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_05;``rwh_05`\n\n\n`pub use rwh_06[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle;``rwh_06`\n\n## Modules[\u00a7](https://docs.rs/winit/latest/winit/#modules)\n\n[application](https://docs.rs/winit/latest/winit/application/index.html \"mod winit::application\")\n    End user application handling.\n\n[changelog](https://docs.rs/winit/latest/winit/changelog/index.html \"mod winit::changelog\")Nowhere\n    Changelog and migrations\n\n[dpi](https://docs.rs/winit/latest/winit/dpi/index.html \"mod winit::dpi\")\n    DPI\n\n[error](https://docs.rs/winit/latest/winit/error/index.html \"mod winit::error\")\n\n\n[event](https://docs.rs/winit/latest/winit/event/index.html \"mod winit::event\")\n    The [`Event`](https://docs.rs/winit/latest/winit/event/enum.Event.html \"enum winit::event::Event\") enum and assorted supporting types.\n\n[event_loop](https://docs.rs/winit/latest/winit/event_loop/index.html \"mod winit::event_loop\")\n    The [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\") struct and assorted supporting types, including [`ControlFlow`](https://docs.rs/winit/latest/winit/event_loop/enum.ControlFlow.html \"enum winit::event_loop::ControlFlow\").\n\n[keyboard](https://docs.rs/winit/latest/winit/keyboard/index.html \"mod winit::keyboard\")\n    Types related to the keyboard.\n\n[monitor](https://docs.rs/winit/latest/winit/monitor/index.html \"mod winit::monitor\")\n    Types useful for interacting with a user\u2019s monitors.\n\n[platform](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\")\n    Contains traits with platform-specific methods in them.\n\n[window](https://docs.rs/winit/latest/winit/window/index.html \"mod winit::window\")\n    The [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") struct and associated types.\n",
        "markdown_with_citations": "[](https://docs.rs/winit/latest/winit/all.html \"show sidebar\")\n# Crate winitCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nWinit is a cross-platform window creation and event loop management library.\n## \u00a7\u27e84\u27e9Building windows\nBefore you can create a `Window`\u27e85\u27e9, you first need to build an `EventLoop`\u27e86\u27e9. This is done with the `EventLoop::new()`\u27e87\u27e9 function.\n```\nuse winit::event_loop::EventLoop;\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ...\n}\n```\n\nThen you create a `Window`\u27e85\u27e9 with `create_window`\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Event handling\nOnce a `Window`\u27e85\u27e9 has been created, it will generate different _events_. A `Window`\u27e85\u27e9 object can generate `WindowEvent`\u27e810\u27e9s when certain input events occur, such as a cursor moving over the window or a key getting pressed while the window is focused. Devices can generate `DeviceEvent`\u27e811\u27e9s, which contain unfiltered event data that isn\u2019t specific to a certain window. Some user activity, like mouse movement, can generate both a `WindowEvent`\u27e810\u27e9 _and_ a `DeviceEvent`\u27e811\u27e9. You can also create and handle your own custom `Event::UserEvent`\u27e812\u27e9s, if desired.\nYou can retrieve events by calling `EventLoop::run_app()`\u27e813\u27e9. This function will dispatch events for every `Window`\u27e85\u27e9 that was created with that particular `EventLoop`\u27e86\u27e9, and will run until `exit()`\u27e814\u27e9 is used, at which point `Event::LoopExiting`\u27e815\u27e9.\nWinit no longer uses a `EventLoop::poll_events() -> impl Iterator<Event>`-based event loop model, since that can\u2019t be implemented properly on some platforms (e.g web, iOS) and works poorly on most other platforms. However, this model can be re-implemented to an extent with `EventLoopExtPumpEvents::pump_app_events()`\u27e816\u27e9 1\u27e817\u27e9. See that method\u2019s documentation for more reasons about why it\u2019s discouraged beyond compatibility reasons.\n```\nuse winit::application::ApplicationHandler;\nuse winit::event::WindowEvent;\nuse winit::event_loop::{ActiveEventLoop, ControlFlow, EventLoop};\nuse winit::window::{Window, WindowId};\n#[derive(Default)]\nstruct App {\n  window: Option<Window>,\n}\nimpl ApplicationHandler for App {\n  fn resumed(&mut self, event_loop: &ActiveEventLoop) {\n    self.window = Some(event_loop.create_window(Window::default_attributes()).unwrap());\n  }\n  fn window_event(&mut self, event_loop: &ActiveEventLoop, id: WindowId, event: WindowEvent) {\n    match event {\n      WindowEvent::CloseRequested => {\n        println!(\"The close button was pressed; stopping\");\n        event_loop.exit();\n      },\n      WindowEvent::RedrawRequested => {\n        // Redraw the application.\n        //\n        // It's preferable for applications that do not render continuously to render in\n        // this event rather than in AboutToWait, since rendering in here allows\n        // the program to gracefully handle redraws requested by the OS.\n        // Draw.\n        // Queue a RedrawRequested event.\n        //\n        // You only need to call this if you've determined that you need to redraw in\n        // applications which do not always need to. Applications that redraw continuously\n        // can render here instead.\n        self.window.as_ref().unwrap().request_redraw();\n      }\n      _ => (),\n    }\n  }\n}\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ControlFlow::Poll continuously runs the event loop, even if the OS hasn't\n  // dispatched any events. This is ideal for games and similar applications.\n  event_loop.set_control_flow(ControlFlow::Poll);\n  // ControlFlow::Wait pauses the event loop if no events are available to process.\n  // This is ideal for non-game applications that only update in response to user\n  // input, and uses significantly less power/CPU time than ControlFlow::Poll.\n  event_loop.set_control_flow(ControlFlow::Wait);\n  let mut app = App::default();\n  event_loop.run_app(&mut app);\n}\n```\n\n`WindowEvent`\u27e810\u27e9 has a `WindowId`\u27e818\u27e9 member. In multi-window environments, it should be compared to the value returned by `Window::id()`\u27e819\u27e9 to determine which `Window`\u27e85\u27e9 dispatched the event.\n## \u00a7\u27e820\u27e9Drawing on the window\nWinit doesn\u2019t directly provide any methods for drawing on a `Window`\u27e85\u27e9. However, it allows you to retrieve the raw handle of the window and display (see the `platform`\u27e821\u27e9 module and/or the `raw_window_handle`\u27e822\u27e9 and `raw_display_handle`\u27e823\u27e9 methods), which in turn allows you to create an OpenGL/Vulkan/DirectX/Metal/etc. context that can be used to render graphics.\nNote that many platforms will display garbage data in the window\u2019s client area if the application doesn\u2019t render anything to the window by the time the desktop compositor is ready to display the window to the user. If you notice this happening, you should create the window with `visible` set to `false`\u27e824\u27e9 and explicitly make the window visible only once you\u2019re ready to render into it.\n## \u00a7\u27e825\u27e9UI scaling\nUI scaling is important, go read the docs for the `dpi`\u27e826\u27e9 crate for an introduction.\nAll of Winit\u2019s functions return physical types, but can take either logical or physical coordinates as input, allowing you to use the most convenient coordinate system for your particular application.\nWinit will dispatch a `ScaleFactorChanged`\u27e827\u27e9 event whenever a window\u2019s scale factor has changed. This can happen if the user drags their window from a standard-resolution monitor to a high-DPI monitor or if the user changes their DPI settings. This allows you to rescale your application\u2019s UI elements and adjust how the platform changes the window\u2019s size to reflect the new scale factor. If a window hasn\u2019t received a `ScaleFactorChanged`\u27e827\u27e9 event, its scale factor can be found by calling `window.scale_factor()`\u27e828\u27e9.\n## \u00a7\u27e829\u27e9Cargo Features\nWinit provides the following Cargo features:\n  * `x11` (enabled by default): On Unix platforms, enables the X11 backend.\n  * `wayland` (enabled by default): On Unix platforms, enables the Wayland backend.\n  * `rwh_04`: Implement `raw-window-handle v0.4` traits.\n  * `rwh_05`: Implement `raw-window-handle v0.5` traits.\n  * `rwh_06`: Implement `raw-window-handle v0.6` traits.\n  * `serde`: Enables serialization/deserialization of certain types with Serde\u27e830\u27e9.\n  * `mint`: Enables mint (math interoperability standard types) conversions.\n\n\nSee the `platform`\u27e821\u27e9 module for documentation on platform-specific cargo features.\n  1. `EventLoopExtPumpEvents::pump_app_events()` is only available on Windows, macOS, Android, X11 and Wayland. \u21a9\u27e831\u27e9\n\n\n## Re-exports\u00a7\u27e832\u27e9\n\n`pub use rwh_04[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_04;``rwh_04`\n\n\n`pub use rwh_05[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_05;``rwh_05`\n\n\n`pub use rwh_06[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle;``rwh_06`\n\n## Modules\u00a7\u27e833\u27e9\n\napplication\u27e834\u27e9\n    End user application handling.\n\nchangelog\u27e835\u27e9Nowhere\n    Changelog and migrations\n\ndpi\u27e826\u27e9\n    DPI\n\nerror\u27e836\u27e9\n\n\nevent\u27e837\u27e9\n    The `Event`\u27e838\u27e9 enum and assorted supporting types.\n\nevent_loop\u27e839\u27e9\n    The `EventLoop`\u27e86\u27e9 struct and assorted supporting types, including `ControlFlow`\u27e840\u27e9.\n\nkeyboard\u27e841\u27e9\n    Types related to the keyboard.\n\nmonitor\u27e842\u27e9\n    Types useful for interacting with a user\u2019s monitors.\n\nplatform\u27e821\u27e9\n    Contains traits with platform-specific methods in them.\n\nwindow\u27e843\u27e9\n    The `Window`\u27e85\u27e9 struct and associated types.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/winit/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/winit/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/winit/latest/src/winit/lib.rs.html#1-217: Source\n\u27e84\u27e9 https://docs.rs/winit/latest/winit/#building-windows: \u00a7\n\u27e85\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html: struct winit::window::Window - `Window`\n\u27e86\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html: struct winit::event_loop::EventLoop - `EventLoop`\n\u27e87\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.new: associated function winit::event_loop::EventLoop::new - `EventLoop::new()`\n\u27e88\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.create_window: method winit::event_loop::ActiveEventLoop::create_window - `create_window`\n\u27e89\u27e9 https://docs.rs/winit/latest/winit/#event-handling: \u00a7\n\u27e810\u27e9 https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html: enum winit::event::WindowEvent - `WindowEvent`\n\u27e811\u27e9 https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html: enum winit::event::DeviceEvent - `DeviceEvent`\n\u27e812\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.UserEvent: variant winit::event::Event::UserEvent - `Event::UserEvent`\n\u27e813\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.run_app: method winit::event_loop::EventLoop::run_app - `EventLoop::run_app()`\n\u27e814\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.exit: method winit::event_loop::ActiveEventLoop::exit - `exit()`\n\u27e815\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.LoopExiting: variant winit::event::Event::LoopExiting - `Event::LoopExiting`\n\u27e816\u27e9 https://docs.rs/winit/latest/winit/platform/pump_events/trait.EventLoopExtPumpEvents.html#method.pump_app_events: method winit::platform::pump_events::EventLoopExtPumpEvents::pump_app_events - `EventLoopExtPumpEvents::pump_app_events()`\n\u27e817\u27e9 https://docs.rs/winit/latest/winit/#fn1: 1\n\u27e818\u27e9 https://docs.rs/winit/latest/winit/window/struct.WindowId.html: struct winit::window::WindowId - `WindowId`\n\u27e819\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.id: method winit::window::Window::id - `Window::id()`\n\u27e820\u27e9 https://docs.rs/winit/latest/winit/#drawing-on-the-window: \u00a7\n\u27e821\u27e9 https://docs.rs/winit/latest/winit/platform/index.html: mod winit::platform - `platform`\n\u27e822\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_window_handle: `raw_window_handle`\n\u27e823\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_display_handle: `raw_display_handle`\n\u27e824\u27e9 https://docs.rs/winit/latest/winit/window/struct.WindowAttributes.html#method.with_visible: method winit::window::WindowAttributes::with_visible - `visible` set to `false`\n\u27e825\u27e9 https://docs.rs/winit/latest/winit/#ui-scaling: \u00a7\n\u27e826\u27e9 https://docs.rs/winit/latest/winit/dpi/index.html: mod winit::dpi - `dpi`\n\u27e827\u27e9 https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged: variant winit::event::WindowEvent::ScaleFactorChanged - `ScaleFactorChanged`\n\u27e828\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.scale_factor: method winit::window::Window::scale_factor - `window.scale_factor()`\n\u27e829\u27e9 https://docs.rs/winit/latest/winit/#cargo-features: \u00a7\n\u27e830\u27e9 https://crates.io/crates/serde: Serde\n\u27e831\u27e9 https://docs.rs/winit/latest/winit/#fnref1: \u21a9\n\u27e832\u27e9 https://docs.rs/winit/latest/winit/#reexports: \u00a7\n\u27e833\u27e9 https://docs.rs/winit/latest/winit/#modules: \u00a7\n\u27e834\u27e9 https://docs.rs/winit/latest/winit/application/index.html: mod winit::application - application\n\u27e835\u27e9 https://docs.rs/winit/latest/winit/changelog/index.html: mod winit::changelog - changelog\n\u27e836\u27e9 https://docs.rs/winit/latest/winit/error/index.html: mod winit::error - error\n\u27e837\u27e9 https://docs.rs/winit/latest/winit/event/index.html: mod winit::event - event\n\u27e838\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html: enum winit::event::Event - `Event`\n\u27e839\u27e9 https://docs.rs/winit/latest/winit/event_loop/index.html: mod winit::event_loop - event_loop\n\u27e840\u27e9 https://docs.rs/winit/latest/winit/event_loop/enum.ControlFlow.html: enum winit::event_loop::ControlFlow - `ControlFlow`\n\u27e841\u27e9 https://docs.rs/winit/latest/winit/keyboard/index.html: mod winit::keyboard - keyboard\n\u27e842\u27e9 https://docs.rs/winit/latest/winit/monitor/index.html: mod winit::monitor - monitor\n\u27e843\u27e9 https://docs.rs/winit/latest/winit/window/index.html: mod winit::window - window\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `winit` crate is a cross-platform library for window creation and event loop management, enabling applications to handle input events, manage multiple windows, and interact with monitors. It supports custom event handling, UI scaling, and provides raw window/display handles for integration with graphics APIs like OpenGL or Vulkan. Key features include platform-specific backends (X11, Wayland), configurable event loops (`Poll` or `Wait` modes), and optional support for Serde and mint conversions.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Event Loop Management  \n\u2705 Factual: Winit provides an `EventLoop` struct that allows you to create and manage event loops, which are essential for handling window events and user input.  \n\u274c Counterfactual: Winit allows you to use the `EventLoop::poll_events()` method for event loop management on all platforms, including web and iOS.  \n\n### Pair 2: Drawing on Windows  \n\u2705 Factual: Winit does not directly provide methods for rendering graphics but allows access to raw window and display handles, enabling integration with graphics APIs like OpenGL, Vulkan, or DirectX.  \n\u274c Counterfactual: Winit includes built-in methods for rendering graphics directly onto windows without requiring external graphics libraries.  \n\n### Pair 3: UI Scaling and DPI Awareness  \n\u2705 Factual: Winit dispatches a `ScaleFactorChanged` event when a window\u2019s scale factor changes, enabling applications to adjust UI elements for high-DPI displays.  \n\u274c Counterfactual: Winit automatically resizes and scales all UI elements in your application when a `ScaleFactorChanged` event occurs, without requiring developer intervention.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}