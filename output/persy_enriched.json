{
    "name": "persy",
    "version": "1.6.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/persy/latest/persy/all.html \"show sidebar\")\n# Crate persyCopy item path\n[Settings](https://docs.rs/persy/latest/settings.html)\n[Help](https://docs.rs/persy/latest/help.html)\nSummary[Source](https://docs.rs/persy/latest/src/persy/lib.rs.html#1-676)\nExpand description\n## [\u00a7](https://docs.rs/persy/latest/persy/#persy---transactional-persistence-engine)Persy - Transactional Persistence Engine\nSimple single file durable, isolated, consistent, and atomic persistence engine based on copy on write. It guarantee the persistence of data even in case of crash through a in file write ahead log, and provide simple rust APIs for store simple bytes or value associated (index) data, provide also memory management logic to keep the file size in check.\n## [\u00a7](https://docs.rs/persy/latest/persy/#example)Example\n```\nuse persy::{Persy,Config};\n//...\nPersy::create(\"./target/data.persy\")?;\nlet persy = Persy::open(\"./target/data.persy\",Config::new())?;\nlet mut tx = persy.begin()?;\ntx.create_segment(\"seg\")?;\nlet data = vec![1;20];\ntx.insert(\"seg\", &data)?;\nlet prepared = tx.prepare()?;\nprepared.commit()?;\nfor (_id,content) in persy.scan(\"seg\")? {\n  assert_eq!(content[0], 1);\n  //....\n}\n```\n\n## [\u00a7](https://docs.rs/persy/latest/persy/#example-index)Example Index\n```\nuse persy::{Persy,Config, ValueMode};\n//...\nPersy::create(\"./target/index_data.persy\")?;\nlet persy = Persy::open(\"./target/index_data.persy\",Config::new())?;\nlet mut tx = persy.begin()?;\ntx.create_index::<i32,i32>(\"index\", ValueMode::Cluster)?;\ntx.put(\"index\", 10, 20)?;\nlet prepared = tx.prepare()?;\nprepared.commit()?;\nfor (key,values) in persy.range::<i32,i32,_>(\"index\", ..)? {\n  assert_eq!(key, 10);\n  assert_eq!(values.into_iter().collect::<Vec<_>>(), vec![20]);\n  //....\n}\n```\n\n## Modules[\u00a7](https://docs.rs/persy/latest/persy/#modules)\n\n[inspect](https://docs.rs/persy/latest/persy/inspect/index.html \"mod persy::inspect\")\n\n## Structs[\u00a7](https://docs.rs/persy/latest/persy/#structs)\n\n[ByteVec](https://docs.rs/persy/latest/persy/struct.ByteVec.html \"struct persy::ByteVec\")\n    Wrapper for `Vec<u8>` for use it in index keys or values\n\n[Config](https://docs.rs/persy/latest/persy/struct.Config.html \"struct persy::Config\")\n    Persy configuration structure.\n\n[IndexId](https://docs.rs/persy/latest/persy/struct.IndexId.html \"struct persy::IndexId\")\n    Unique identifier of an index\n\n[IndexInfo](https://docs.rs/persy/latest/persy/struct.IndexInfo.html \"struct persy::IndexInfo\")\n    Index definition details\n\n[IndexIter](https://docs.rs/persy/latest/persy/struct.IndexIter.html \"struct persy::IndexIter\")\n    Index Iterator implementation for iterating on a range of keys\n\n[OpenOptions](https://docs.rs/persy/latest/persy/struct.OpenOptions.html \"struct persy::OpenOptions\")\n    Options, flags, configs which can be used to configure how a persy database is opened.\n\n[Persy](https://docs.rs/persy/latest/persy/struct.Persy.html \"struct persy::Persy\")\n    Main structure to operate persy storage files\n\n[PersyId](https://docs.rs/persy/latest/persy/struct.PersyId.html \"struct persy::PersyId\")\n    Identifier of a persistent record, can be used for read, update or delete the record\n\n[Recover](https://docs.rs/persy/latest/persy/struct.Recover.html \"struct persy::Recover\")\n    Intermediate recover status to select witch transactions to commit or rollback and list witch transactions are in a intermediate state\n\n[SegmentId](https://docs.rs/persy/latest/persy/struct.SegmentId.html \"struct persy::SegmentId\")\n    Represents a looked-up segment\n\n[SegmentIter](https://docs.rs/persy/latest/persy/struct.SegmentIter.html \"struct persy::SegmentIter\")\n    Iterator implementation used to scan a segment\n\n[Snapshot](https://docs.rs/persy/latest/persy/struct.Snapshot.html \"struct persy::Snapshot\")\n    Read snapshot at a specific point in time.\n\n[SnapshotSegmentIter](https://docs.rs/persy/latest/persy/struct.SnapshotSegmentIter.html \"struct persy::SnapshotSegmentIter\")\n    Iterator implementation to scan a segment at the current snapshot state.\n\n[Transaction](https://docs.rs/persy/latest/persy/struct.Transaction.html \"struct persy::Transaction\")\n    Transaction container, it include all the changes done in a transaction.\n\n[TransactionConfig](https://docs.rs/persy/latest/persy/struct.TransactionConfig.html \"struct persy::TransactionConfig\")\n    Configure the parameters for the transaction on the begin of a new transaction.\n\n[TransactionFinalize](https://docs.rs/persy/latest/persy/struct.TransactionFinalize.html \"struct persy::TransactionFinalize\")\n    prepared transaction state\n\n[TxIndexIter](https://docs.rs/persy/latest/persy/struct.TxIndexIter.html \"struct persy::TxIndexIter\")\n    Index Iterator implementation for iterating on a range of keys considering changes in transaction\n\n[TxSegmentIter](https://docs.rs/persy/latest/persy/struct.TxSegmentIter.html \"struct persy::TxSegmentIter\")\n    Iterator implementation to scan a segment considering in transaction changes.\n\n[ValueIter](https://docs.rs/persy/latest/persy/struct.ValueIter.html \"struct persy::ValueIter\")\n    Iterator of values relative to an index key use by get and range functions\n## Enums[\u00a7](https://docs.rs/persy/latest/persy/#enums)\n\n[BeginTransactionError](https://docs.rs/persy/latest/persy/enum.BeginTransactionError.html \"enum persy::BeginTransactionError\")\n\n\n[CreateError](https://docs.rs/persy/latest/persy/enum.CreateError.html \"enum persy::CreateError\")\n\n\n[CreateIndexError](https://docs.rs/persy/latest/persy/enum.CreateIndexError.html \"enum persy::CreateIndexError\")\n\n\n[CreateSegmentError](https://docs.rs/persy/latest/persy/enum.CreateSegmentError.html \"enum persy::CreateSegmentError\")\n\n\n[DeleteError](https://docs.rs/persy/latest/persy/enum.DeleteError.html \"enum persy::DeleteError\")\n\n\n[DropIndexError](https://docs.rs/persy/latest/persy/enum.DropIndexError.html \"enum persy::DropIndexError\")\n\n\n[DropSegmentError](https://docs.rs/persy/latest/persy/enum.DropSegmentError.html \"enum persy::DropSegmentError\")\n\n\n[GenericError](https://docs.rs/persy/latest/persy/enum.GenericError.html \"enum persy::GenericError\")\n\n\n[IndexChangeError](https://docs.rs/persy/latest/persy/enum.IndexChangeError.html \"enum persy::IndexChangeError\")\n\n\n[IndexError](https://docs.rs/persy/latest/persy/enum.IndexError.html \"enum persy::IndexError\")\n\n\n[IndexOpsError](https://docs.rs/persy/latest/persy/enum.IndexOpsError.html \"enum persy::IndexOpsError\")\n\n\n[IndexPutError](https://docs.rs/persy/latest/persy/enum.IndexPutError.html \"enum persy::IndexPutError\")\n\n\n[IndexTypeId](https://docs.rs/persy/latest/persy/enum.IndexTypeId.html \"enum persy::IndexTypeId\")\n    Enum of all the possible Key or Value types for indexes\n\n[InsertError](https://docs.rs/persy/latest/persy/enum.InsertError.html \"enum persy::InsertError\")\n\n\n[OpenError](https://docs.rs/persy/latest/persy/enum.OpenError.html \"enum persy::OpenError\")\n\n\n[OpenMemoryError](https://docs.rs/persy/latest/persy/enum.OpenMemoryError.html \"enum persy::OpenMemoryError\")\n\n\n[PE](https://docs.rs/persy/latest/persy/enum.PE.html \"enum persy::PE\")\n    Wrapper enum for all the possible Persy errors,\n\n[PersyError](https://docs.rs/persy/latest/persy/enum.PersyError.html \"enum persy::PersyError\")\n    Enum of all possible errors from Persy\n\n[PrepareError](https://docs.rs/persy/latest/persy/enum.PrepareError.html \"enum persy::PrepareError\")\n\n\n[ReadError](https://docs.rs/persy/latest/persy/enum.ReadError.html \"enum persy::ReadError\")\n\n\n[RecoverStatus](https://docs.rs/persy/latest/persy/enum.RecoverStatus.html \"enum persy::RecoverStatus\")\n    Possible state of a transaction in the log\n\n[SegmentError](https://docs.rs/persy/latest/persy/enum.SegmentError.html \"enum persy::SegmentError\")\n\n\n[TxStrategy](https://docs.rs/persy/latest/persy/enum.TxStrategy.html \"enum persy::TxStrategy\")\n    Concurrent Modification Strategy for resolution of conflict on commit.\n\n[UpdateError](https://docs.rs/persy/latest/persy/enum.UpdateError.html \"enum persy::UpdateError\")\n\n\n[ValueMode](https://docs.rs/persy/latest/persy/enum.ValueMode.html \"enum persy::ValueMode\")\n    Define the behavior of the index in case a key value pair already exists\n## Traits[\u00a7](https://docs.rs/persy/latest/persy/#traits)\n\n[IndexType](https://docs.rs/persy/latest/persy/trait.IndexType.html \"trait persy::IndexType\")\n\n\n[ToIndexId](https://docs.rs/persy/latest/persy/trait.ToIndexId.html \"trait persy::ToIndexId\")\n\n\n[ToSegmentId](https://docs.rs/persy/latest/persy/trait.ToSegmentId.html \"trait persy::ToSegmentId\")\n\n## Type Aliases[\u00a7](https://docs.rs/persy/latest/persy/#types)\n\n[TransactionId](https://docs.rs/persy/latest/persy/type.TransactionId.html \"type persy::TransactionId\")\n    Custom identifier to track the transaction in the recover phase\n",
        "markdown_with_citations": "[](https://docs.rs/persy/latest/persy/all.html \"show sidebar\")\n# Crate persyCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Persy - Transactional Persistence Engine\nSimple single file durable, isolated, consistent, and atomic persistence engine based on copy on write. It guarantee the persistence of data even in case of crash through a in file write ahead log, and provide simple rust APIs for store simple bytes or value associated (index) data, provide also memory management logic to keep the file size in check.\n## \u00a7\u27e85\u27e9Example\n```\nuse persy::{Persy,Config};\n//...\nPersy::create(\"./target/data.persy\")?;\nlet persy = Persy::open(\"./target/data.persy\",Config::new())?;\nlet mut tx = persy.begin()?;\ntx.create_segment(\"seg\")?;\nlet data = vec![1;20];\ntx.insert(\"seg\", &data)?;\nlet prepared = tx.prepare()?;\nprepared.commit()?;\nfor (_id,content) in persy.scan(\"seg\")? {\n  assert_eq!(content[0], 1);\n  //....\n}\n```\n\n## \u00a7\u27e86\u27e9Example Index\n```\nuse persy::{Persy,Config, ValueMode};\n//...\nPersy::create(\"./target/index_data.persy\")?;\nlet persy = Persy::open(\"./target/index_data.persy\",Config::new())?;\nlet mut tx = persy.begin()?;\ntx.create_index::<i32,i32>(\"index\", ValueMode::Cluster)?;\ntx.put(\"index\", 10, 20)?;\nlet prepared = tx.prepare()?;\nprepared.commit()?;\nfor (key,values) in persy.range::<i32,i32,_>(\"index\", ..)? {\n  assert_eq!(key, 10);\n  assert_eq!(values.into_iter().collect::<Vec<_>>(), vec![20]);\n  //....\n}\n```\n\n## Modules\u00a7\u27e87\u27e9\n\ninspect\u27e88\u27e9\n\n## Structs\u00a7\u27e89\u27e9\n\nByteVec\u27e810\u27e9\n    Wrapper for `Vec<u8>` for use it in index keys or values\n\nConfig\u27e811\u27e9\n    Persy configuration structure.\n\nIndexId\u27e812\u27e9\n    Unique identifier of an index\n\nIndexInfo\u27e813\u27e9\n    Index definition details\n\nIndexIter\u27e814\u27e9\n    Index Iterator implementation for iterating on a range of keys\n\nOpenOptions\u27e815\u27e9\n    Options, flags, configs which can be used to configure how a persy database is opened.\n\nPersy\u27e816\u27e9\n    Main structure to operate persy storage files\n\nPersyId\u27e817\u27e9\n    Identifier of a persistent record, can be used for read, update or delete the record\n\nRecover\u27e818\u27e9\n    Intermediate recover status to select witch transactions to commit or rollback and list witch transactions are in a intermediate state\n\nSegmentId\u27e819\u27e9\n    Represents a looked-up segment\n\nSegmentIter\u27e820\u27e9\n    Iterator implementation used to scan a segment\n\nSnapshot\u27e821\u27e9\n    Read snapshot at a specific point in time.\n\nSnapshotSegmentIter\u27e822\u27e9\n    Iterator implementation to scan a segment at the current snapshot state.\n\nTransaction\u27e823\u27e9\n    Transaction container, it include all the changes done in a transaction.\n\nTransactionConfig\u27e824\u27e9\n    Configure the parameters for the transaction on the begin of a new transaction.\n\nTransactionFinalize\u27e825\u27e9\n    prepared transaction state\n\nTxIndexIter\u27e826\u27e9\n    Index Iterator implementation for iterating on a range of keys considering changes in transaction\n\nTxSegmentIter\u27e827\u27e9\n    Iterator implementation to scan a segment considering in transaction changes.\n\nValueIter\u27e828\u27e9\n    Iterator of values relative to an index key use by get and range functions\n## Enums\u00a7\u27e829\u27e9\n\nBeginTransactionError\u27e830\u27e9\n\n\nCreateError\u27e831\u27e9\n\n\nCreateIndexError\u27e832\u27e9\n\n\nCreateSegmentError\u27e833\u27e9\n\n\nDeleteError\u27e834\u27e9\n\n\nDropIndexError\u27e835\u27e9\n\n\nDropSegmentError\u27e836\u27e9\n\n\nGenericError\u27e837\u27e9\n\n\nIndexChangeError\u27e838\u27e9\n\n\nIndexError\u27e839\u27e9\n\n\nIndexOpsError\u27e840\u27e9\n\n\nIndexPutError\u27e841\u27e9\n\n\nIndexTypeId\u27e842\u27e9\n    Enum of all the possible Key or Value types for indexes\n\nInsertError\u27e843\u27e9\n\n\nOpenError\u27e844\u27e9\n\n\nOpenMemoryError\u27e845\u27e9\n\n\nPE\u27e846\u27e9\n    Wrapper enum for all the possible Persy errors,\n\nPersyError\u27e847\u27e9\n    Enum of all possible errors from Persy\n\nPrepareError\u27e848\u27e9\n\n\nReadError\u27e849\u27e9\n\n\nRecoverStatus\u27e850\u27e9\n    Possible state of a transaction in the log\n\nSegmentError\u27e851\u27e9\n\n\nTxStrategy\u27e852\u27e9\n    Concurrent Modification Strategy for resolution of conflict on commit.\n\nUpdateError\u27e853\u27e9\n\n\nValueMode\u27e854\u27e9\n    Define the behavior of the index in case a key value pair already exists\n## Traits\u00a7\u27e855\u27e9\n\nIndexType\u27e856\u27e9\n\n\nToIndexId\u27e857\u27e9\n\n\nToSegmentId\u27e858\u27e9\n\n## Type Aliases\u00a7\u27e859\u27e9\n\nTransactionId\u27e860\u27e9\n    Custom identifier to track the transaction in the recover phase\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/persy/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/persy/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/persy/latest/src/persy/lib.rs.html#1-676: Source\n\u27e84\u27e9 https://docs.rs/persy/latest/persy/#persy---transactional-persistence-engine: \u00a7\n\u27e85\u27e9 https://docs.rs/persy/latest/persy/#example: \u00a7\n\u27e86\u27e9 https://docs.rs/persy/latest/persy/#example-index: \u00a7\n\u27e87\u27e9 https://docs.rs/persy/latest/persy/#modules: \u00a7\n\u27e88\u27e9 https://docs.rs/persy/latest/persy/inspect/index.html: mod persy::inspect - inspect\n\u27e89\u27e9 https://docs.rs/persy/latest/persy/#structs: \u00a7\n\u27e810\u27e9 https://docs.rs/persy/latest/persy/struct.ByteVec.html: struct persy::ByteVec - ByteVec\n\u27e811\u27e9 https://docs.rs/persy/latest/persy/struct.Config.html: struct persy::Config - Config\n\u27e812\u27e9 https://docs.rs/persy/latest/persy/struct.IndexId.html: struct persy::IndexId - IndexId\n\u27e813\u27e9 https://docs.rs/persy/latest/persy/struct.IndexInfo.html: struct persy::IndexInfo - IndexInfo\n\u27e814\u27e9 https://docs.rs/persy/latest/persy/struct.IndexIter.html: struct persy::IndexIter - IndexIter\n\u27e815\u27e9 https://docs.rs/persy/latest/persy/struct.OpenOptions.html: struct persy::OpenOptions - OpenOptions\n\u27e816\u27e9 https://docs.rs/persy/latest/persy/struct.Persy.html: struct persy::Persy - Persy\n\u27e817\u27e9 https://docs.rs/persy/latest/persy/struct.PersyId.html: struct persy::PersyId - PersyId\n\u27e818\u27e9 https://docs.rs/persy/latest/persy/struct.Recover.html: struct persy::Recover - Recover\n\u27e819\u27e9 https://docs.rs/persy/latest/persy/struct.SegmentId.html: struct persy::SegmentId - SegmentId\n\u27e820\u27e9 https://docs.rs/persy/latest/persy/struct.SegmentIter.html: struct persy::SegmentIter - SegmentIter\n\u27e821\u27e9 https://docs.rs/persy/latest/persy/struct.Snapshot.html: struct persy::Snapshot - Snapshot\n\u27e822\u27e9 https://docs.rs/persy/latest/persy/struct.SnapshotSegmentIter.html: struct persy::SnapshotSegmentIter - SnapshotSegmentIter\n\u27e823\u27e9 https://docs.rs/persy/latest/persy/struct.Transaction.html: struct persy::Transaction - Transaction\n\u27e824\u27e9 https://docs.rs/persy/latest/persy/struct.TransactionConfig.html: struct persy::TransactionConfig - TransactionConfig\n\u27e825\u27e9 https://docs.rs/persy/latest/persy/struct.TransactionFinalize.html: struct persy::TransactionFinalize - TransactionFinalize\n\u27e826\u27e9 https://docs.rs/persy/latest/persy/struct.TxIndexIter.html: struct persy::TxIndexIter - TxIndexIter\n\u27e827\u27e9 https://docs.rs/persy/latest/persy/struct.TxSegmentIter.html: struct persy::TxSegmentIter - TxSegmentIter\n\u27e828\u27e9 https://docs.rs/persy/latest/persy/struct.ValueIter.html: struct persy::ValueIter - ValueIter\n\u27e829\u27e9 https://docs.rs/persy/latest/persy/#enums: \u00a7\n\u27e830\u27e9 https://docs.rs/persy/latest/persy/enum.BeginTransactionError.html: enum persy::BeginTransactionError - BeginTransactionError\n\u27e831\u27e9 https://docs.rs/persy/latest/persy/enum.CreateError.html: enum persy::CreateError - CreateError\n\u27e832\u27e9 https://docs.rs/persy/latest/persy/enum.CreateIndexError.html: enum persy::CreateIndexError - CreateIndexError\n\u27e833\u27e9 https://docs.rs/persy/latest/persy/enum.CreateSegmentError.html: enum persy::CreateSegmentError - CreateSegmentError\n\u27e834\u27e9 https://docs.rs/persy/latest/persy/enum.DeleteError.html: enum persy::DeleteError - DeleteError\n\u27e835\u27e9 https://docs.rs/persy/latest/persy/enum.DropIndexError.html: enum persy::DropIndexError - DropIndexError\n\u27e836\u27e9 https://docs.rs/persy/latest/persy/enum.DropSegmentError.html: enum persy::DropSegmentError - DropSegmentError\n\u27e837\u27e9 https://docs.rs/persy/latest/persy/enum.GenericError.html: enum persy::GenericError - GenericError\n\u27e838\u27e9 https://docs.rs/persy/latest/persy/enum.IndexChangeError.html: enum persy::IndexChangeError - IndexChangeError\n\u27e839\u27e9 https://docs.rs/persy/latest/persy/enum.IndexError.html: enum persy::IndexError - IndexError\n\u27e840\u27e9 https://docs.rs/persy/latest/persy/enum.IndexOpsError.html: enum persy::IndexOpsError - IndexOpsError\n\u27e841\u27e9 https://docs.rs/persy/latest/persy/enum.IndexPutError.html: enum persy::IndexPutError - IndexPutError\n\u27e842\u27e9 https://docs.rs/persy/latest/persy/enum.IndexTypeId.html: enum persy::IndexTypeId - IndexTypeId\n\u27e843\u27e9 https://docs.rs/persy/latest/persy/enum.InsertError.html: enum persy::InsertError - InsertError\n\u27e844\u27e9 https://docs.rs/persy/latest/persy/enum.OpenError.html: enum persy::OpenError - OpenError\n\u27e845\u27e9 https://docs.rs/persy/latest/persy/enum.OpenMemoryError.html: enum persy::OpenMemoryError - OpenMemoryError\n\u27e846\u27e9 https://docs.rs/persy/latest/persy/enum.PE.html: enum persy::PE - PE\n\u27e847\u27e9 https://docs.rs/persy/latest/persy/enum.PersyError.html: enum persy::PersyError - PersyError\n\u27e848\u27e9 https://docs.rs/persy/latest/persy/enum.PrepareError.html: enum persy::PrepareError - PrepareError\n\u27e849\u27e9 https://docs.rs/persy/latest/persy/enum.ReadError.html: enum persy::ReadError - ReadError\n\u27e850\u27e9 https://docs.rs/persy/latest/persy/enum.RecoverStatus.html: enum persy::RecoverStatus - RecoverStatus\n\u27e851\u27e9 https://docs.rs/persy/latest/persy/enum.SegmentError.html: enum persy::SegmentError - SegmentError\n\u27e852\u27e9 https://docs.rs/persy/latest/persy/enum.TxStrategy.html: enum persy::TxStrategy - TxStrategy\n\u27e853\u27e9 https://docs.rs/persy/latest/persy/enum.UpdateError.html: enum persy::UpdateError - UpdateError\n\u27e854\u27e9 https://docs.rs/persy/latest/persy/enum.ValueMode.html: enum persy::ValueMode - ValueMode\n\u27e855\u27e9 https://docs.rs/persy/latest/persy/#traits: \u00a7\n\u27e856\u27e9 https://docs.rs/persy/latest/persy/trait.IndexType.html: trait persy::IndexType - IndexType\n\u27e857\u27e9 https://docs.rs/persy/latest/persy/trait.ToIndexId.html: trait persy::ToIndexId - ToIndexId\n\u27e858\u27e9 https://docs.rs/persy/latest/persy/trait.ToSegmentId.html: trait persy::ToSegmentId - ToSegmentId\n\u27e859\u27e9 https://docs.rs/persy/latest/persy/#types: \u00a7\n\u27e860\u27e9 https://docs.rs/persy/latest/persy/type.TransactionId.html: type persy::TransactionId - TransactionId\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `persy` crate is a transactional persistence engine designed for single-file durable storage with ACID properties, leveraging copy-on-write and an in-file write-ahead log to ensure data integrity even during crashes. It provides simple Rust APIs for managing byte storage, indexed data, and memory-efficient file operations, supporting transactions, segments, and indexes with configurable behavior. Key features include snapshot-based reads, transaction recovery, and iterator-based data access.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 4.0,
    "factual_counterfactual": "### Pair 1: Transactional Persistence  \n\u2705 **Factual**: The `persy` crate provides a transactional persistence engine that ensures durability, isolation, consistency, and atomicity through a file-based write-ahead log mechanism.  \n\u274c **Counterfactual**: The `persy` crate uses an in-memory write-ahead log, which does not persist data in case of a crash.  \n\n---\n\n### Pair 2: Indexing Capabilities  \n\u2705 **Factual**: `persy` supports the creation of clustered indexes, allowing efficient storage and retrieval of key-value pairs with customizable behaviors using the `ValueMode` enum.  \n\u274c **Counterfactual**: `persy` does not support indexes and only allows unstructured storage of raw byte data.  \n\n---\n\n### Pair 3: File Size Management  \n\u2705 **Factual**: The `persy` crate includes memory management logic to optimize file size and prevent unbounded growth during data operations.  \n\u274c **Counterfactual**: The `persy` crate does not implement any file size management logic, resulting in uncontrolled file growth over time.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}