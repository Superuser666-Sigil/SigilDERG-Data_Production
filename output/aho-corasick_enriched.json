{
    "name": "aho-corasick",
    "version": "1.1.3",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/aho-corasick/latest/aho_corasick/all.html \"show sidebar\")\n# Crate aho_corasickCopy item path\n[Settings](https://docs.rs/aho-corasick/latest/settings.html)\n[Help](https://docs.rs/aho-corasick/latest/help.html)\nSummary[Source](https://docs.rs/aho-corasick/latest/src/aho_corasick/lib.rs.html#1-326)\nExpand description\nA library for finding occurrences of many patterns at once. This library provides multiple pattern search principally through an implementation of the [Aho-Corasick algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm), which builds a fast finite state machine for executing searches in linear time.\nAdditionally, this library provides a number of configuration options for building the automaton that permit controlling the space versus time trade off. Other features include simple ASCII case insensitive matching, finding overlapping matches, replacements, searching streams and even searching and replacing text in streams.\nFinally, unlike most other Aho-Corasick implementations, this one supports enabling [leftmost-first](https://docs.rs/aho-corasick/latest/aho_corasick/enum.MatchKind.html#variant.LeftmostFirst \"variant aho_corasick::MatchKind::LeftmostFirst\") or [leftmost-longest](https://docs.rs/aho-corasick/latest/aho_corasick/enum.MatchKind.html#variant.LeftmostLongest \"variant aho_corasick::MatchKind::LeftmostLongest\") match semantics, using a (seemingly) novel alternative construction algorithm. For more details on what match semantics means, see the [`MatchKind`](https://docs.rs/aho-corasick/latest/aho_corasick/enum.MatchKind.html \"enum aho_corasick::MatchKind\") type.\n## [\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#overview)Overview\nThis section gives a brief overview of the primary types in this crate:\n  * [`AhoCorasick`](https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasick.html \"struct aho_corasick::AhoCorasick\") is the primary type and represents an Aho-Corasick automaton. This is the type you use to execute searches.\n  * [`AhoCorasickBuilder`](https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasickBuilder.html \"struct aho_corasick::AhoCorasickBuilder\") can be used to build an Aho-Corasick automaton, and supports configuring a number of options.\n  * [`Match`](https://docs.rs/aho-corasick/latest/aho_corasick/struct.Match.html \"struct aho_corasick::Match\") represents a single match reported by an Aho-Corasick automaton. Each match has two pieces of information: the pattern that matched and the start and end byte offsets corresponding to the position in the haystack at which it matched.\n\n\n## [\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#example-basic-searching)Example: basic searching\nThis example shows how to search for occurrences of multiple patterns simultaneously. Each match includes the pattern that matched along with the byte offsets of the match.\n```\nuse aho_corasick::{AhoCorasick, PatternID};\nlet patterns = &[\"apple\", \"maple\", \"Snapple\"];\nlet haystack = \"Nobody likes maple in their apple flavored Snapple.\";\nlet ac = AhoCorasick::new(patterns).unwrap();\nlet mut matches = vec![];\nfor mat in ac.find_iter(haystack) {\n  matches.push((mat.pattern(), mat.start(), mat.end()));\n}\nassert_eq!(matches, vec![\n  (PatternID::must(1), 13, 18),\n  (PatternID::must(0), 28, 33),\n  (PatternID::must(2), 43, 50),\n]);\n```\n\n## [\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#example-case-insensitivity)Example: case insensitivity\nThis is like the previous example, but matches `Snapple` case insensitively using `AhoCorasickBuilder`:\n```\nuse aho_corasick::{AhoCorasick, PatternID};\nlet patterns = &[\"apple\", \"maple\", \"snapple\"];\nlet haystack = \"Nobody likes maple in their apple flavored Snapple.\";\nlet ac = AhoCorasick::builder()\n  .ascii_case_insensitive(true)\n  .build(patterns)\n  .unwrap();\nlet mut matches = vec![];\nfor mat in ac.find_iter(haystack) {\n  matches.push((mat.pattern(), mat.start(), mat.end()));\n}\nassert_eq!(matches, vec![\n  (PatternID::must(1), 13, 18),\n  (PatternID::must(0), 28, 33),\n  (PatternID::must(2), 43, 50),\n]);\n```\n\n## [\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#example-replacing-matches-in-a-stream)Example: replacing matches in a stream\nThis example shows how to execute a search and replace on a stream without loading the entire stream into memory first.\n```\nuse aho_corasick::AhoCorasick;\nlet patterns = &[\"fox\", \"brown\", \"quick\"];\nlet replace_with = &[\"sloth\", \"grey\", \"slow\"];\n// In a real example, these might be `std::fs::File`s instead. All you need to\n// do is supply a pair of `std::io::Read` and `std::io::Write` implementations.\nlet rdr = \"The quick brown fox.\";\nlet mut wtr = vec![];\nlet ac = AhoCorasick::new(patterns).unwrap();\nac.try_stream_replace_all(rdr.as_bytes(), &mut wtr, replace_with)?;\nassert_eq!(b\"The slow grey sloth.\".to_vec(), wtr);\n```\n\n## [\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#example-finding-the-leftmost-first-match)Example: finding the leftmost first match\nIn the textbook description of Aho-Corasick, its formulation is typically structured such that it reports all possible matches, even when they overlap with another. In many cases, overlapping matches may not be desired, such as the case of finding all successive non-overlapping matches like you might with a standard regular expression.\nUnfortunately the \u201cobvious\u201d way to modify the Aho-Corasick algorithm to do this doesn\u2019t always work in the expected way, since it will report matches as soon as they are seen. For example, consider matching the regex `Samwise|Sam` against the text `Samwise`. Most regex engines (that are Perl-like, or non-POSIX) will report `Samwise` as a match, but the standard Aho-Corasick algorithm modified for reporting non-overlapping matches will report `Sam`.\nA novel contribution of this library is the ability to change the match semantics of Aho-Corasick (without additional search time overhead) such that `Samwise` is reported instead. For example, here\u2019s the standard approach:\n```\nuse aho_corasick::AhoCorasick;\nlet patterns = &[\"Samwise\", \"Sam\"];\nlet haystack = \"Samwise\";\nlet ac = AhoCorasick::new(patterns).unwrap();\nlet mat = ac.find(haystack).expect(\"should have a match\");\nassert_eq!(\"Sam\", &haystack[mat.start()..mat.end()]);\n```\n\nAnd now here\u2019s the leftmost-first version, which matches how a Perl-like regex will work:\n```\nuse aho_corasick::{AhoCorasick, MatchKind};\nlet patterns = &[\"Samwise\", \"Sam\"];\nlet haystack = \"Samwise\";\nlet ac = AhoCorasick::builder()\n  .match_kind(MatchKind::LeftmostFirst)\n  .build(patterns)\n  .unwrap();\nlet mat = ac.find(haystack).expect(\"should have a match\");\nassert_eq!(\"Samwise\", &haystack[mat.start()..mat.end()]);\n```\n\nIn addition to leftmost-first semantics, this library also supports leftmost-longest semantics, which match the POSIX behavior of a regular expression alternation. See [`MatchKind`](https://docs.rs/aho-corasick/latest/aho_corasick/enum.MatchKind.html \"enum aho_corasick::MatchKind\") for more details.\n## [\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#prefilters)Prefilters\nWhile an Aho-Corasick automaton can perform admirably when compared to more naive solutions, it is generally slower than more specialized algorithms that are accelerated using vector instructions such as SIMD.\nFor that reason, this library will internally use a \u201cprefilter\u201d to attempt to accelerate searches when possible. Currently, this library has several different algorithms it might use depending on the patterns provided. Once the number of patterns gets too big, prefilters are no longer used.\nWhile a prefilter is generally good to have on by default since it works well in the common case, it can lead to less predictable or even sub-optimal performance in some cases. For that reason, prefilters can be explicitly disabled via [`AhoCorasickBuilder::prefilter`](https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasickBuilder.html#method.prefilter \"method aho_corasick::AhoCorasickBuilder::prefilter\").\n## [\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#lower-level-apis)Lower level APIs\nThis crate also provides several sub-modules that collectively expose many of the implementation details of the main [`AhoCorasick`](https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasick.html \"struct aho_corasick::AhoCorasick\") type. Most users of this library can completely ignore the submodules and their contents, but if you needed finer grained control, some parts of them may be useful to you. Here is a brief overview of each and why you might want to use them:\n  * The [`packed`](https://docs.rs/aho-corasick/latest/aho_corasick/packed/index.html \"mod aho_corasick::packed\") sub-module contains a lower level API for using fast vectorized routines for finding a small number of patterns in a haystack. You might want to use this API when you want to completely side-step using Aho-Corasick automata. Otherwise, the fast vectorized routines are used automatically as prefilters for `AhoCorasick` searches whenever possible.\n  * The [`automaton`](https://docs.rs/aho-corasick/latest/aho_corasick/automaton/index.html \"mod aho_corasick::automaton\") sub-module provides a lower level finite state machine interface that the various Aho-Corasick implementations in this crate implement. This sub-module\u2019s main contribution is the [`Automaton`](https://docs.rs/aho-corasick/latest/aho_corasick/automaton/trait.Automaton.html \"trait aho_corasick::automaton::Automaton\") trait, which permits manually walking the state transitions of an Aho-Corasick automaton.\n  * The [`dfa`](https://docs.rs/aho-corasick/latest/aho_corasick/dfa/index.html \"mod aho_corasick::dfa\") and [`nfa`](https://docs.rs/aho-corasick/latest/aho_corasick/nfa/index.html \"mod aho_corasick::nfa\") sub-modules provide DFA and NFA implementations of the aforementioned `Automaton` trait. The main reason one might want to use these sub-modules is to get access to a type that implements the `Automaton` trait. (The top-level `AhoCorasick` type does not implement the `Automaton` trait.)\n\n\nAs mentioned above, if you aren\u2019t sure whether you need these sub-modules, you should be able to safely ignore them and just focus on the [`AhoCorasick`](https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasick.html \"struct aho_corasick::AhoCorasick\") type.\n## [\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#crate-features)Crate features\nThis crate exposes a few features for controlling dependency usage and whether this crate can be used without the standard library.\n  * **std** - Enables support for the standard library. This feature is enabled by default. When disabled, only `core` and `alloc` are used. At an API level, enabling `std` enables `std::error::Error` trait impls for the various error types, and higher level stream search routines such as [`AhoCorasick::try_stream_find_iter`](https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasick.html#method.try_stream_find_iter \"method aho_corasick::AhoCorasick::try_stream_find_iter\"). But the `std` feature is also required to enable vectorized prefilters. Prefilters can greatly accelerate searches, but generally only apply when the number of patterns is small (less than ~100).\n  * **perf-literal** - Enables support for literal prefilters that use vectorized routines from external crates. This feature is enabled by default. If you\u2019re only using Aho-Corasick for large numbers of patterns or otherwise can abide lower throughput when searching with a small number of patterns, then it is reasonable to disable this feature.\n  * **logging** - Enables a dependency on the `log` crate and emits messages to aide in diagnostics. This feature is disabled by default.\n\n\n## Modules[\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#modules)\n\n[automaton](https://docs.rs/aho-corasick/latest/aho_corasick/automaton/index.html \"mod aho_corasick::automaton\")\n    Provides [`Automaton`](https://docs.rs/aho-corasick/latest/aho_corasick/automaton/trait.Automaton.html \"trait aho_corasick::automaton::Automaton\") trait for abstracting over Aho-Corasick automata.\n\n[dfa](https://docs.rs/aho-corasick/latest/aho_corasick/dfa/index.html \"mod aho_corasick::dfa\")\n    Provides direct access to a DFA implementation of Aho-Corasick.\n\n[nfa](https://docs.rs/aho-corasick/latest/aho_corasick/nfa/index.html \"mod aho_corasick::nfa\")\n    Provides direct access to NFA implementations of Aho-Corasick.\n\n[packed](https://docs.rs/aho-corasick/latest/aho_corasick/packed/index.html \"mod aho_corasick::packed\")\n    Provides packed multiple substring search, principally for a small number of patterns.\n## Structs[\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#structs)\n\n[AhoCorasick](https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasick.html \"struct aho_corasick::AhoCorasick\")\n    An automaton for searching multiple strings in linear time.\n\n[AhoCorasickBuilder](https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasickBuilder.html \"struct aho_corasick::AhoCorasickBuilder\")\n    A builder for configuring an Aho-Corasick automaton.\n\n[BuildError](https://docs.rs/aho-corasick/latest/aho_corasick/struct.BuildError.html \"struct aho_corasick::BuildError\")\n    An error that occurred during the construction of an Aho-Corasick automaton.\n\n[FindIter](https://docs.rs/aho-corasick/latest/aho_corasick/struct.FindIter.html \"struct aho_corasick::FindIter\")\n    An iterator of non-overlapping matches in a particular haystack.\n\n[FindOverlappingIter](https://docs.rs/aho-corasick/latest/aho_corasick/struct.FindOverlappingIter.html \"struct aho_corasick::FindOverlappingIter\")\n    An iterator of overlapping matches in a particular haystack.\n\n[Input](https://docs.rs/aho-corasick/latest/aho_corasick/struct.Input.html \"struct aho_corasick::Input\")\n    The configuration and the haystack to use for an Aho-Corasick search.\n\n[Match](https://docs.rs/aho-corasick/latest/aho_corasick/struct.Match.html \"struct aho_corasick::Match\")\n    A representation of a match reported by an Aho-Corasick searcher.\n\n[MatchError](https://docs.rs/aho-corasick/latest/aho_corasick/struct.MatchError.html \"struct aho_corasick::MatchError\")\n    An error that occurred during an Aho-Corasick search.\n\n[PatternID](https://docs.rs/aho-corasick/latest/aho_corasick/struct.PatternID.html \"struct aho_corasick::PatternID\")\n    The identifier of a pattern in an Aho-Corasick automaton.\n\n[PatternIDError](https://docs.rs/aho-corasick/latest/aho_corasick/struct.PatternIDError.html \"struct aho_corasick::PatternIDError\")\n    This error occurs when an ID could not be constructed.\n\n[Span](https://docs.rs/aho-corasick/latest/aho_corasick/struct.Span.html \"struct aho_corasick::Span\")\n    A representation of a range in a haystack.\n\n[StreamFindIter](https://docs.rs/aho-corasick/latest/aho_corasick/struct.StreamFindIter.html \"struct aho_corasick::StreamFindIter\")`std`\n    An iterator that reports Aho-Corasick matches in a stream.\n## Enums[\u00a7](https://docs.rs/aho-corasick/latest/aho_corasick/#enums)\n\n[AhoCorasickKind](https://docs.rs/aho-corasick/latest/aho_corasick/enum.AhoCorasickKind.html \"enum aho_corasick::AhoCorasickKind\")\n    The type of Aho-Corasick implementation to use in an [`AhoCorasick`](https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasick.html \"struct aho_corasick::AhoCorasick\") searcher.\n\n[Anchored](https://docs.rs/aho-corasick/latest/aho_corasick/enum.Anchored.html \"enum aho_corasick::Anchored\")\n    The type of anchored search to perform.\n\n[MatchErrorKind](https://docs.rs/aho-corasick/latest/aho_corasick/enum.MatchErrorKind.html \"enum aho_corasick::MatchErrorKind\")\n    The underlying kind of a [`MatchError`](https://docs.rs/aho-corasick/latest/aho_corasick/struct.MatchError.html \"struct aho_corasick::MatchError\").\n\n[MatchKind](https://docs.rs/aho-corasick/latest/aho_corasick/enum.MatchKind.html \"enum aho_corasick::MatchKind\")\n    A knob for controlling the match semantics of an Aho-Corasick automaton.\n\n[StartKind](https://docs.rs/aho-corasick/latest/aho_corasick/enum.StartKind.html \"enum aho_corasick::StartKind\")\n    The kind of anchored starting configurations to support in an Aho-Corasick searcher.\n",
        "markdown_with_citations": "[](https://docs.rs/aho-corasick/latest/aho_corasick/all.html \"show sidebar\")\n# Crate aho_corasickCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA library for finding occurrences of many patterns at once. This library provides multiple pattern search principally through an implementation of the Aho-Corasick algorithm\u27e84\u27e9, which builds a fast finite state machine for executing searches in linear time.\nAdditionally, this library provides a number of configuration options for building the automaton that permit controlling the space versus time trade off. Other features include simple ASCII case insensitive matching, finding overlapping matches, replacements, searching streams and even searching and replacing text in streams.\nFinally, unlike most other Aho-Corasick implementations, this one supports enabling leftmost-first\u27e85\u27e9 or leftmost-longest\u27e86\u27e9 match semantics, using a (seemingly) novel alternative construction algorithm. For more details on what match semantics means, see the `MatchKind`\u27e87\u27e9 type.\n## \u00a7\u27e88\u27e9Overview\nThis section gives a brief overview of the primary types in this crate:\n  * `AhoCorasick`\u27e89\u27e9 is the primary type and represents an Aho-Corasick automaton. This is the type you use to execute searches.\n  * `AhoCorasickBuilder`\u27e810\u27e9 can be used to build an Aho-Corasick automaton, and supports configuring a number of options.\n  * `Match`\u27e811\u27e9 represents a single match reported by an Aho-Corasick automaton. Each match has two pieces of information: the pattern that matched and the start and end byte offsets corresponding to the position in the haystack at which it matched.\n\n\n## \u00a7\u27e812\u27e9Example: basic searching\nThis example shows how to search for occurrences of multiple patterns simultaneously. Each match includes the pattern that matched along with the byte offsets of the match.\n```\nuse aho_corasick::{AhoCorasick, PatternID};\nlet patterns = &[\"apple\", \"maple\", \"Snapple\"];\nlet haystack = \"Nobody likes maple in their apple flavored Snapple.\";\nlet ac = AhoCorasick::new(patterns).unwrap();\nlet mut matches = vec![];\nfor mat in ac.find_iter(haystack) {\n  matches.push((mat.pattern(), mat.start(), mat.end()));\n}\nassert_eq!(matches, vec![\n  (PatternID::must(1), 13, 18),\n  (PatternID::must(0), 28, 33),\n  (PatternID::must(2), 43, 50),\n]);\n```\n\n## \u00a7\u27e813\u27e9Example: case insensitivity\nThis is like the previous example, but matches `Snapple` case insensitively using `AhoCorasickBuilder`:\n```\nuse aho_corasick::{AhoCorasick, PatternID};\nlet patterns = &[\"apple\", \"maple\", \"snapple\"];\nlet haystack = \"Nobody likes maple in their apple flavored Snapple.\";\nlet ac = AhoCorasick::builder()\n  .ascii_case_insensitive(true)\n  .build(patterns)\n  .unwrap();\nlet mut matches = vec![];\nfor mat in ac.find_iter(haystack) {\n  matches.push((mat.pattern(), mat.start(), mat.end()));\n}\nassert_eq!(matches, vec![\n  (PatternID::must(1), 13, 18),\n  (PatternID::must(0), 28, 33),\n  (PatternID::must(2), 43, 50),\n]);\n```\n\n## \u00a7\u27e814\u27e9Example: replacing matches in a stream\nThis example shows how to execute a search and replace on a stream without loading the entire stream into memory first.\n```\nuse aho_corasick::AhoCorasick;\nlet patterns = &[\"fox\", \"brown\", \"quick\"];\nlet replace_with = &[\"sloth\", \"grey\", \"slow\"];\n// In a real example, these might be `std::fs::File`s instead. All you need to\n// do is supply a pair of `std::io::Read` and `std::io::Write` implementations.\nlet rdr = \"The quick brown fox.\";\nlet mut wtr = vec![];\nlet ac = AhoCorasick::new(patterns).unwrap();\nac.try_stream_replace_all(rdr.as_bytes(), &mut wtr, replace_with)?;\nassert_eq!(b\"The slow grey sloth.\".to_vec(), wtr);\n```\n\n## \u00a7\u27e815\u27e9Example: finding the leftmost first match\nIn the textbook description of Aho-Corasick, its formulation is typically structured such that it reports all possible matches, even when they overlap with another. In many cases, overlapping matches may not be desired, such as the case of finding all successive non-overlapping matches like you might with a standard regular expression.\nUnfortunately the \u201cobvious\u201d way to modify the Aho-Corasick algorithm to do this doesn\u2019t always work in the expected way, since it will report matches as soon as they are seen. For example, consider matching the regex `Samwise|Sam` against the text `Samwise`. Most regex engines (that are Perl-like, or non-POSIX) will report `Samwise` as a match, but the standard Aho-Corasick algorithm modified for reporting non-overlapping matches will report `Sam`.\nA novel contribution of this library is the ability to change the match semantics of Aho-Corasick (without additional search time overhead) such that `Samwise` is reported instead. For example, here\u2019s the standard approach:\n```\nuse aho_corasick::AhoCorasick;\nlet patterns = &[\"Samwise\", \"Sam\"];\nlet haystack = \"Samwise\";\nlet ac = AhoCorasick::new(patterns).unwrap();\nlet mat = ac.find(haystack).expect(\"should have a match\");\nassert_eq!(\"Sam\", &haystack[mat.start()..mat.end()]);\n```\n\nAnd now here\u2019s the leftmost-first version, which matches how a Perl-like regex will work:\n```\nuse aho_corasick::{AhoCorasick, MatchKind};\nlet patterns = &[\"Samwise\", \"Sam\"];\nlet haystack = \"Samwise\";\nlet ac = AhoCorasick::builder()\n  .match_kind(MatchKind::LeftmostFirst)\n  .build(patterns)\n  .unwrap();\nlet mat = ac.find(haystack).expect(\"should have a match\");\nassert_eq!(\"Samwise\", &haystack[mat.start()..mat.end()]);\n```\n\nIn addition to leftmost-first semantics, this library also supports leftmost-longest semantics, which match the POSIX behavior of a regular expression alternation. See `MatchKind`\u27e87\u27e9 for more details.\n## \u00a7\u27e816\u27e9Prefilters\nWhile an Aho-Corasick automaton can perform admirably when compared to more naive solutions, it is generally slower than more specialized algorithms that are accelerated using vector instructions such as SIMD.\nFor that reason, this library will internally use a \u201cprefilter\u201d to attempt to accelerate searches when possible. Currently, this library has several different algorithms it might use depending on the patterns provided. Once the number of patterns gets too big, prefilters are no longer used.\nWhile a prefilter is generally good to have on by default since it works well in the common case, it can lead to less predictable or even sub-optimal performance in some cases. For that reason, prefilters can be explicitly disabled via `AhoCorasickBuilder::prefilter`\u27e817\u27e9.\n## \u00a7\u27e818\u27e9Lower level APIs\nThis crate also provides several sub-modules that collectively expose many of the implementation details of the main `AhoCorasick`\u27e89\u27e9 type. Most users of this library can completely ignore the submodules and their contents, but if you needed finer grained control, some parts of them may be useful to you. Here is a brief overview of each and why you might want to use them:\n  * The `packed`\u27e819\u27e9 sub-module contains a lower level API for using fast vectorized routines for finding a small number of patterns in a haystack. You might want to use this API when you want to completely side-step using Aho-Corasick automata. Otherwise, the fast vectorized routines are used automatically as prefilters for `AhoCorasick` searches whenever possible.\n  * The `automaton`\u27e820\u27e9 sub-module provides a lower level finite state machine interface that the various Aho-Corasick implementations in this crate implement. This sub-module\u2019s main contribution is the `Automaton`\u27e821\u27e9 trait, which permits manually walking the state transitions of an Aho-Corasick automaton.\n  * The `dfa`\u27e822\u27e9 and `nfa`\u27e823\u27e9 sub-modules provide DFA and NFA implementations of the aforementioned `Automaton` trait. The main reason one might want to use these sub-modules is to get access to a type that implements the `Automaton` trait. (The top-level `AhoCorasick` type does not implement the `Automaton` trait.)\n\n\nAs mentioned above, if you aren\u2019t sure whether you need these sub-modules, you should be able to safely ignore them and just focus on the `AhoCorasick`\u27e89\u27e9 type.\n## \u00a7\u27e824\u27e9Crate features\nThis crate exposes a few features for controlling dependency usage and whether this crate can be used without the standard library.\n  * **std** - Enables support for the standard library. This feature is enabled by default. When disabled, only `core` and `alloc` are used. At an API level, enabling `std` enables `std::error::Error` trait impls for the various error types, and higher level stream search routines such as `AhoCorasick::try_stream_find_iter`\u27e825\u27e9. But the `std` feature is also required to enable vectorized prefilters. Prefilters can greatly accelerate searches, but generally only apply when the number of patterns is small (less than ~100).\n  * **perf-literal** - Enables support for literal prefilters that use vectorized routines from external crates. This feature is enabled by default. If you\u2019re only using Aho-Corasick for large numbers of patterns or otherwise can abide lower throughput when searching with a small number of patterns, then it is reasonable to disable this feature.\n  * **logging** - Enables a dependency on the `log` crate and emits messages to aide in diagnostics. This feature is disabled by default.\n\n\n## Modules\u00a7\u27e826\u27e9\n\nautomaton\u27e820\u27e9\n    Provides `Automaton`\u27e821\u27e9 trait for abstracting over Aho-Corasick automata.\n\ndfa\u27e822\u27e9\n    Provides direct access to a DFA implementation of Aho-Corasick.\n\nnfa\u27e823\u27e9\n    Provides direct access to NFA implementations of Aho-Corasick.\n\npacked\u27e819\u27e9\n    Provides packed multiple substring search, principally for a small number of patterns.\n## Structs\u00a7\u27e827\u27e9\n\nAhoCorasick\u27e89\u27e9\n    An automaton for searching multiple strings in linear time.\n\nAhoCorasickBuilder\u27e810\u27e9\n    A builder for configuring an Aho-Corasick automaton.\n\nBuildError\u27e828\u27e9\n    An error that occurred during the construction of an Aho-Corasick automaton.\n\nFindIter\u27e829\u27e9\n    An iterator of non-overlapping matches in a particular haystack.\n\nFindOverlappingIter\u27e830\u27e9\n    An iterator of overlapping matches in a particular haystack.\n\nInput\u27e831\u27e9\n    The configuration and the haystack to use for an Aho-Corasick search.\n\nMatch\u27e811\u27e9\n    A representation of a match reported by an Aho-Corasick searcher.\n\nMatchError\u27e832\u27e9\n    An error that occurred during an Aho-Corasick search.\n\nPatternID\u27e833\u27e9\n    The identifier of a pattern in an Aho-Corasick automaton.\n\nPatternIDError\u27e834\u27e9\n    This error occurs when an ID could not be constructed.\n\nSpan\u27e835\u27e9\n    A representation of a range in a haystack.\n\nStreamFindIter\u27e836\u27e9`std`\n    An iterator that reports Aho-Corasick matches in a stream.\n## Enums\u00a7\u27e837\u27e9\n\nAhoCorasickKind\u27e838\u27e9\n    The type of Aho-Corasick implementation to use in an `AhoCorasick`\u27e89\u27e9 searcher.\n\nAnchored\u27e839\u27e9\n    The type of anchored search to perform.\n\nMatchErrorKind\u27e840\u27e9\n    The underlying kind of a `MatchError`\u27e832\u27e9.\n\nMatchKind\u27e87\u27e9\n    A knob for controlling the match semantics of an Aho-Corasick automaton.\n\nStartKind\u27e841\u27e9\n    The kind of anchored starting configurations to support in an Aho-Corasick searcher.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/aho-corasick/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/aho-corasick/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/aho-corasick/latest/src/aho_corasick/lib.rs.html#1-326: Source\n\u27e84\u27e9 https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm: Aho-Corasick algorithm\n\u27e85\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/enum.MatchKind.html#variant.LeftmostFirst: variant aho_corasick::MatchKind::LeftmostFirst - leftmost-first\n\u27e86\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/enum.MatchKind.html#variant.LeftmostLongest: variant aho_corasick::MatchKind::LeftmostLongest - leftmost-longest\n\u27e87\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/enum.MatchKind.html: enum aho_corasick::MatchKind - `MatchKind`\n\u27e88\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#overview: \u00a7\n\u27e89\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasick.html: struct aho_corasick::AhoCorasick - `AhoCorasick`\n\u27e810\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasickBuilder.html: struct aho_corasick::AhoCorasickBuilder - `AhoCorasickBuilder`\n\u27e811\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.Match.html: struct aho_corasick::Match - `Match`\n\u27e812\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#example-basic-searching: \u00a7\n\u27e813\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#example-case-insensitivity: \u00a7\n\u27e814\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#example-replacing-matches-in-a-stream: \u00a7\n\u27e815\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#example-finding-the-leftmost-first-match: \u00a7\n\u27e816\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#prefilters: \u00a7\n\u27e817\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasickBuilder.html#method.prefilter: method aho_corasick::AhoCorasickBuilder::prefilter - `AhoCorasickBuilder::prefilter`\n\u27e818\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#lower-level-apis: \u00a7\n\u27e819\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/packed/index.html: mod aho_corasick::packed - `packed`\n\u27e820\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/automaton/index.html: mod aho_corasick::automaton - `automaton`\n\u27e821\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/automaton/trait.Automaton.html: trait aho_corasick::automaton::Automaton - `Automaton`\n\u27e822\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/dfa/index.html: mod aho_corasick::dfa - `dfa`\n\u27e823\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/nfa/index.html: mod aho_corasick::nfa - `nfa`\n\u27e824\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#crate-features: \u00a7\n\u27e825\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.AhoCorasick.html#method.try_stream_find_iter: method aho_corasick::AhoCorasick::try_stream_find_iter - `AhoCorasick::try_stream_find_iter`\n\u27e826\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#modules: \u00a7\n\u27e827\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#structs: \u00a7\n\u27e828\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.BuildError.html: struct aho_corasick::BuildError - BuildError\n\u27e829\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.FindIter.html: struct aho_corasick::FindIter - FindIter\n\u27e830\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.FindOverlappingIter.html: struct aho_corasick::FindOverlappingIter - FindOverlappingIter\n\u27e831\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.Input.html: struct aho_corasick::Input - Input\n\u27e832\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.MatchError.html: struct aho_corasick::MatchError - MatchError\n\u27e833\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.PatternID.html: struct aho_corasick::PatternID - PatternID\n\u27e834\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.PatternIDError.html: struct aho_corasick::PatternIDError - PatternIDError\n\u27e835\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.Span.html: struct aho_corasick::Span - Span\n\u27e836\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/struct.StreamFindIter.html: struct aho_corasick::StreamFindIter - StreamFindIter\n\u27e837\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/#enums: \u00a7\n\u27e838\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/enum.AhoCorasickKind.html: enum aho_corasick::AhoCorasickKind - AhoCorasickKind\n\u27e839\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/enum.Anchored.html: enum aho_corasick::Anchored - Anchored\n\u27e840\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/enum.MatchErrorKind.html: enum aho_corasick::MatchErrorKind - MatchErrorKind\n\u27e841\u27e9 https://docs.rs/aho-corasick/latest/aho_corasick/enum.StartKind.html: enum aho_corasick::StartKind - StartKind\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `aho-corasick` crate implements the Aho-Corasick algorithm for efficient multi-pattern searching in linear time, supporting features like case-insensitive matching, overlapping matches, and stream-based search and replace. It offers configurable match semantics (e.g., leftmost-first and leftmost-longest), prefilter optimizations for performance, and lower-level APIs for fine-grained control. The crate is highly customizable via its builder and supports both standard and no-std environments.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Match Semantics\n\u2705 **Factual:** The `aho-corasick` crate supports leftmost-first and leftmost-longest match semantics, allowing users to control whether overlapping matches or POSIX-style longest matches are reported during searches.  \n\u274c **Counterfactual:** The `aho-corasick` crate only supports the default Aho-Corasick match semantics and does not allow customization of match behavior.\n\n---\n\n### Pair 2: Case Insensitivity\n\u2705 **Factual:** The `aho-corasick` crate provides ASCII case-insensitive matching, which can be enabled via the `AhoCorasickBuilder` by setting `.ascii_case_insensitive(true)`.  \n\u274c **Counterfactual:** The `aho-corasick` crate supports Unicode case-insensitive matching, allowing searches across all Unicode characters regardless of case.\n\n---\n\n### Pair 3: Stream Replacement\n\u2705 **Factual:** The `aho-corasick` crate allows search-and-replace operations on streams without requiring the entire stream to be loaded into memory, using methods like `try_stream_replace_all`.  \n\u274c **Counterfactual:** The `aho-corasick` crate requires the entire stream to be loaded into memory before performing search-and-replace operations, making it unsuitable for large data streams.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}