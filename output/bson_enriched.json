{
    "name": "bson",
    "version": "2.15.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/bson/latest/bson/all.html \"show sidebar\")\n# Crate bsonCopy item path\n[Settings](https://docs.rs/bson/latest/settings.html)\n[Help](https://docs.rs/bson/latest/help.html)\nSummary[Source](https://docs.rs/bson/latest/src/bson/lib.rs.html#22-350)\nExpand description\nBSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents. Like JSON, BSON supports the embedding of documents and arrays within other documents and arrays. BSON also contains extensions that allow representation of data types that are not part of the JSON spec. For example, BSON has a datetime type and a binary data type.\n```\n// JSON equivalent\n{\"hello\": \"world\"}\n// BSON encoding\n\\x16\\x00\\x00\\x00          // total document size\n\\x02                // 0x02 = type String\nhello\\x00             // field name\n\\x06\\x00\\x00\\x00world\\x00     // field value\n\\x00                // 0x00 = type EOO ('end of object')\n```\n\nBSON is the primary data representation for [MongoDB](https://www.mongodb.com/), and this crate is used in the [`mongodb`](https://docs.rs/mongodb/latest/mongodb/) driver crate in its API and implementation.\nFor more information about BSON itself, see [bsonspec.org](http://bsonspec.org).\n### [\u00a7](https://docs.rs/bson/latest/bson/#installation)Installation\n#### [\u00a7](https://docs.rs/bson/latest/bson/#requirements)Requirements\n  * Rust 1.64+\n\n\n#### [\u00a7](https://docs.rs/bson/latest/bson/#importing)Importing\nThis crate is available on [crates.io](https://crates.io/crates/bson). To use it in your application, simply add it to your project\u2019s `Cargo.toml`.\n```\n[dependencies]\nbson = \"2.15.0\"\n```\n\nNote that if you are using `bson` through the `mongodb` crate, you do not need to specify it in your `Cargo.toml`, since the `mongodb` crate already re-exports it.\n##### [\u00a7](https://docs.rs/bson/latest/bson/#feature-flags)Feature Flags\nFeature| Description| Default  \n---|---|---  \n`chrono-0_4`| Enable support for v0.4 of the [`chrono`](https://docs.rs/chrono/0.4) crate in the public API.| no  \n`uuid-0_8`| Enable support for v0.8 of the [`uuid`](https://docs.rs/uuid/0.8) crate in the public API.| no  \n`uuid-1`| Enable support for v1.x of the [`uuid`](https://docs.rs/uuid/1.x) crate in the public API.| no  \n`time-0_3`| Enable support for v0.3 of the [`time`](https://docs.rs/time/0.3) crate in the public API.| no  \n`serde_with`| Enable [`serde_with`](https://docs.rs/serde_with/1.x) 1.x integrations for [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\").| no  \n`serde_with-3`| Enable [`serde_with`](https://docs.rs/serde_with/3.x) 3.x integrations for [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\").| no  \n`serde_path_to_error`| Enable support for error paths via integration with [`serde_path_to_error`](https://docs.rs/serde_path_to_err/latest). This is an unstable feature and any breaking changes to `serde_path_to_error` may affect usage of it via this feature.| no  \n### [\u00a7](https://docs.rs/bson/latest/bson/#bson-values)BSON values\nMany different types can be represented as a BSON value, including 32-bit and 64-bit signed integers, 64 bit floating point numbers, strings, datetimes, embedded documents, and more. To see a full list of possible BSON values, see the [BSON specification](http://bsonspec.org/spec.html). The various possible BSON values are modeled in this crate by the [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) enum.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#creating-bson-instances)Creating [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) instances\n[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) values can be instantiated directly or via the [`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html) macro:\n```\nuse bson::{bson, Bson};\nlet string = Bson::String(\"hello world\".to_string());\nlet int = Bson::Int32(5);\nlet array = Bson::Array(vec![Bson::Int32(5), Bson::Boolean(false)]);\nlet string: Bson = \"hello world\".into();\nlet int: Bson = 5i32.into();\nlet string = bson!(\"hello world\");\nlet int = bson!(5);\nlet array = bson!([5, false]);\n```\n\n[`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html) has supports both array and object literals, and it automatically converts any values specified to [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html), provided they are `Into<Bson>`.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#bson-value-unwrapping)[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) value unwrapping\n[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) has a number of helper methods for accessing the underlying native Rust types. These helpers can be useful in circumstances in which the specific type of a BSON value is known ahead of time.\ne.g.:\n```\nuse bson::{bson, Bson};\nlet value = Bson::Int32(5);\nlet int = value.as_i32(); // Some(5)\nlet bool = value.as_bool(); // None\nlet value = bson!([true]);\nlet array = value.as_array(); // Some(&Vec<Bson>)\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#bson-documents)BSON documents\nBSON documents are ordered maps of UTF-8 encoded strings to BSON values. They are logically similar to JSON objects in that they can contain subdocuments, arrays, and values of several different types. This crate models BSON documents via the [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) struct.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#creating-documents)Creating [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html)s\n[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html)s can be created directly either from a byte reader containing BSON data or via the `doc!` macro:\n```\nuse bson::{doc, Document};\nuse std::io::Read;\nlet mut bytes = hex::decode(\"0C0000001069000100000000\").unwrap();\nlet doc = Document::from_reader(&mut bytes.as_slice()).unwrap(); // { \"i\": 1 }\nlet doc = doc! {\n  \"hello\": \"world\",\n  \"int\": 5,\n  \"subdoc\": { \"cat\": true },\n};\n```\n\n[`doc!`](https://docs.rs/bson/latest/bson/macro.doc.html) works similarly to [`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html), except that it always returns a [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) rather than a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html).\n#### [\u00a7](https://docs.rs/bson/latest/bson/#document-member-access)[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) member access\n[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) has a number of methods on it to facilitate member access:\n```\nuse bson::doc;\nlet doc = doc! {\n  \"string\": \"string\",\n  \"bool\": true,\n  \"i32\": 5,\n  \"doc\": { \"x\": true },\n};\n// attempt get values as untyped Bson\nlet none = doc.get(\"asdfadsf\"); // None\nlet value = doc.get(\"string\"); // Some(&Bson::String(\"string\"))\n// attempt to get values with explicit typing\nlet string = doc.get_str(\"string\"); // Ok(\"string\")\nlet subdoc = doc.get_document(\"doc\"); // Some(Document({ \"x\": true }))\nlet error = doc.get_i64(\"i32\"); // Err(...)\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#modeling-bson-with-strongly-typed-data-structures)Modeling BSON with strongly typed data structures\nWhile it is possible to work with documents and BSON values directly, it will often introduce a lot of boilerplate for verifying the necessary keys are present and their values are the correct types. [`serde`](https://serde.rs/) provides a powerful way of mapping BSON data into Rust data structures largely automatically, removing the need for all that boilerplate.\ne.g.:\n```\nuse serde::{Deserialize, Serialize};\nuse bson::{bson, Bson};\n#[derive(Serialize, Deserialize)]\nstruct Person {\n  name: String,\n  age: i32,\n  phones: Vec<String>,\n}\n// Some BSON input data as a [`Bson`].\nlet bson_data: Bson = bson!({\n  \"name\": \"John Doe\",\n  \"age\": 43,\n  \"phones\": [\n    \"+44 1234567\",\n    \"+44 2345678\"\n  ]\n});\n// Deserialize the Person struct from the BSON data, automatically\n// verifying that the necessary keys are present and that they are of\n// the correct types.\nlet mut person: Person = bson::from_bson(bson_data).unwrap();\n// Do things just like with any other Rust data structure.\nprintln!(\"Redacting {}'s record.\", person.name);\nperson.name = \"REDACTED\".to_string();\n// Get a serialized version of the input data as a [`Bson`].\nlet redacted_bson = bson::to_bson(&person).unwrap();\n```\n\nAny types that implement [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") can be used in this way. Doing so helps separate the \u201cbusiness logic\u201d that operates over the data from the (de)serialization logic that translates the data to/from its serialized form. This can lead to more clear and concise code that is also less error prone.\nWhen serializing values that cannot be represented in BSON, or deserialzing from BSON that does not match the format expected by the type, the default error will only report the specific field that failed. To aid debugging, enabling the `serde_path_to_error` feature will [augment errors](https://docs.rs/bson/latest/bson/de/enum.Error.html#variant.WithPath \"variant bson::de::Error::WithPath\") with the full field path from root object to failing field. This feature does incur a small CPU and memory overhead during (de)serialization and should be enabled with care in performance-sensitive environments.\n### [\u00a7](https://docs.rs/bson/latest/bson/#working-with-datetimes)Working with datetimes\nThe BSON format includes a datetime type, which is modeled in this crate by the [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") struct, and the [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") implementations for this struct produce and parse BSON datetimes when serializing to or deserializing from BSON. The popular crate [`chrono`](https://docs.rs/bson/latest/bson/docs.rs/chrono) also provides a [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") type, but its [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") implementations operate on strings instead, so when using it with BSON, the BSON datetime type is not used. To work around this, the `chrono-0_4` feature flag can be enabled. This flag exposes a number of convenient conversions between [`bson::DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\"), including the [`serde_helpers::chrono_datetime_as_bson_datetime`](https://docs.rs/bson/latest/bson/serde_helpers/chrono_datetime_as_bson_datetime/index.html \"mod bson::serde_helpers::chrono_datetime_as_bson_datetime\") serde helper, which can be used to (de)serialize [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\")s to/from BSON datetimes, and the `From<chrono::DateTime>` implementation for [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\"), which allows [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\") values to be used in the `doc!` and `bson!` macros.\ne.g.\n```\nuse serde::{Serialize, Deserialize};\nuse bson::doc;\n#[derive(Serialize, Deserialize)]\nstruct Foo {\n  // serializes as a BSON datetime.\n  date_time: bson::DateTime,\n  // serializes as an RFC 3339 / ISO-8601 string.\n  chrono_datetime: chrono::DateTime<chrono::Utc>,\n  // serializes as a BSON datetime.\n  // this requires the \"chrono-0_4\" feature flag\n  #[serde(with = \"bson::serde_helpers::chrono_datetime_as_bson_datetime\")]\n  chrono_as_bson: chrono::DateTime<chrono::Utc>,\n}\n// this automatic conversion also requires the \"chrono-0_4\" feature flag\nlet query = doc! {\n  \"created_at\": chrono::Utc::now(),\n};\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#working-with-uuids)Working with UUIDs\nSee the module level documentation for the [`uuid`](https://docs.rs/bson/latest/bson/uuid/index.html \"mod bson::uuid\") module.\n### [\u00a7](https://docs.rs/bson/latest/bson/#wasm-support)WASM support\nThis crate compiles to the `wasm32-unknown-unknown` target; when doing so, the `js-sys` crate is used for the current timestamp component of `ObjectId` generation.\n### [\u00a7](https://docs.rs/bson/latest/bson/#minimum-supported-rust-version-msrv)Minimum supported Rust version (MSRV)\nThe MSRV for this crate is currently 1.81. This will be rarely be increased, and if it ever is, it will only happen in a minor or major version release.\n## Re-exports[\u00a7](https://docs.rs/bson/latest/bson/#reexports)\n\n`pub use self::de::from_reader_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_reader_utf8_lossy.html \"fn bson::de::from_reader_utf8_lossy\");`\n\n\n`pub use self::de::from_slice_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_slice_utf8_lossy.html \"fn bson::de::from_slice_utf8_lossy\");`\n\n## Modules[\u00a7](https://docs.rs/bson/latest/bson/#modules)\n\n[binary](https://docs.rs/bson/latest/bson/binary/index.html \"mod bson::binary\")\n\n\n[datetime](https://docs.rs/bson/latest/bson/datetime/index.html \"mod bson::datetime\")\n    Module containing functionality related to BSON DateTimes. For more information, see the documentation for the [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") type.\n\n[de](https://docs.rs/bson/latest/bson/de/index.html \"mod bson::de\")\n    Deserializer\n\n[decimal128](https://docs.rs/bson/latest/bson/decimal128/index.html \"mod bson::decimal128\")\n    [BSON Decimal128](https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst) data type representation\n\n[document](https://docs.rs/bson/latest/bson/document/index.html \"mod bson::document\")\n    A BSON document represented as an associative HashMap with insertion ordering.\n\n[extjson](https://docs.rs/bson/latest/bson/extjson/index.html \"mod bson::extjson\")\n    Deserialization and serialization of [MongoDB Extended JSON v2](https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/)\n\n[oid](https://docs.rs/bson/latest/bson/oid/index.html \"mod bson::oid\")\n    Module containing functionality related to BSON ObjectIds. For more information, see the documentation for the [`ObjectId`](https://docs.rs/bson/latest/bson/oid/struct.ObjectId.html \"struct bson::oid::ObjectId\") type.\n\n[raw](https://docs.rs/bson/latest/bson/raw/index.html \"mod bson::raw\")\n    An API for interacting with raw BSON bytes.\n\n[ser](https://docs.rs/bson/latest/bson/ser/index.html \"mod bson::ser\")\n    Serializer\n\n[serde_helpers](https://docs.rs/bson/latest/bson/serde_helpers/index.html \"mod bson::serde_helpers\")\n    Collection of helper functions for serializing to and deserializing from BSON using Serde\n\n[spec](https://docs.rs/bson/latest/bson/spec/index.html \"mod bson::spec\")\n    Constants derived from the [BSON Specification Version 1.1](http://bsonspec.org/spec.html).\n\n[uuid](https://docs.rs/bson/latest/bson/uuid/index.html \"mod bson::uuid\")\n    UUID support for BSON.\n## Macros[\u00a7](https://docs.rs/bson/latest/bson/#macros)\n\n[bson](https://docs.rs/bson/latest/bson/macro.bson.html \"macro bson::bson\")\n    Construct a bson::BSON value from a literal.\n\n[doc](https://docs.rs/bson/latest/bson/macro.doc.html \"macro bson::doc\")\n    Construct a bson::Document value.\n\n[rawbson](https://docs.rs/bson/latest/bson/macro.rawbson.html \"macro bson::rawbson\")\n    Construct a [`crate::RawBson`](https://docs.rs/bson/latest/bson/enum.RawBson.html \"enum bson::RawBson\") value from a literal.\n\n[rawdoc](https://docs.rs/bson/latest/bson/macro.rawdoc.html \"macro bson::rawdoc\")\n    Construct a [`crate::RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") value.\n## Structs[\u00a7](https://docs.rs/bson/latest/bson/#structs)\n\n[Binary](https://docs.rs/bson/latest/bson/struct.Binary.html \"struct bson::Binary\")\n    Represents a BSON binary value.\n\n[DateTime](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\")\n    Struct representing a BSON datetime. Note: BSON datetimes have millisecond precision.\n\n[DbPointer](https://docs.rs/bson/latest/bson/struct.DbPointer.html \"struct bson::DbPointer\")\n    Represents a DBPointer. (Deprecated)\n\n[Decimal128](https://docs.rs/bson/latest/bson/struct.Decimal128.html \"struct bson::Decimal128\")\n    Struct representing a BSON Decimal128 type.\n\n[Deserializer](https://docs.rs/bson/latest/bson/struct.Deserializer.html \"struct bson::Deserializer\")\n    Serde Deserializer\n\n[DeserializerOptions](https://docs.rs/bson/latest/bson/struct.DeserializerOptions.html \"struct bson::DeserializerOptions\")\n    Options used to configure a [`Deserializer`](https://docs.rs/bson/latest/bson/struct.Deserializer.html \"struct bson::Deserializer\"). These can also be passed into [`crate::from_bson_with_options`](https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html \"fn bson::from_bson_with_options\") and [`crate::from_document_with_options`](https://docs.rs/bson/latest/bson/fn.from_document_with_options.html \"fn bson::from_document_with_options\").\n\n[Document](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\")\n    A BSON document represented as an associative HashMap with insertion ordering.\n\n[JavaScriptCodeWithScope](https://docs.rs/bson/latest/bson/struct.JavaScriptCodeWithScope.html \"struct bson::JavaScriptCodeWithScope\")\n    Represents a BSON code with scope value.\n\n[RawArray](https://docs.rs/bson/latest/bson/struct.RawArray.html \"struct bson::RawArray\")\n    A slice of a BSON document containing a BSON array value (akin to [`std::str`](https://doc.rust-lang.org/nightly/alloc/str/index.html \"mod alloc::str\")). This can be retrieved from a [`RawDocument`](https://docs.rs/bson/latest/bson/struct.RawDocument.html \"struct bson::RawDocument\") via [`RawDocument::get`](https://docs.rs/bson/latest/bson/struct.RawDocument.html#method.get \"method bson::RawDocument::get\").\n\n[RawArrayBuf](https://docs.rs/bson/latest/bson/struct.RawArrayBuf.html \"struct bson::RawArrayBuf\")\n    An owned BSON array value (akin to [`std::path::PathBuf`](https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html \"struct std::path::PathBuf\")), backed by a buffer of raw BSON bytes. This type can be used to construct owned array values, which can be used to append to [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") or as a field in a [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") struct.\n\n[RawBinaryRef](https://docs.rs/bson/latest/bson/struct.RawBinaryRef.html \"struct bson::RawBinaryRef\")\n    A BSON binary value referencing raw bytes stored elsewhere.\n\n[RawDbPointerRef](https://docs.rs/bson/latest/bson/struct.RawDbPointerRef.html \"struct bson::RawDbPointerRef\")\n    A BSON DB pointer value referencing raw bytes stored elesewhere.\n\n[RawDocument](https://docs.rs/bson/latest/bson/struct.RawDocument.html \"struct bson::RawDocument\")\n    A slice of a BSON document (akin to [`std::str`](https://doc.rust-lang.org/nightly/alloc/str/index.html \"mod alloc::str\")). This can be created from a [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") or any type that contains valid BSON data, including static binary literals, [`Vec<u8>`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\"), or arrays.\n\n[RawDocumentBuf](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\")\n    An owned BSON document (akin to [`std::path::PathBuf`](https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html \"struct std::path::PathBuf\")), backed by a buffer of raw BSON bytes. This can be created from a `Vec<u8>` or a [`crate::Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[RawJavaScriptCodeWithScope](https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScope.html \"struct bson::RawJavaScriptCodeWithScope\")\n    A BSON \u201ccode with scope\u201d value backed by owned raw BSON.\n\n[RawJavaScriptCodeWithScopeRef](https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScopeRef.html \"struct bson::RawJavaScriptCodeWithScopeRef\")\n    A BSON \u201ccode with scope\u201d value referencing raw bytes stored elsewhere.\n\n[RawRegexRef](https://docs.rs/bson/latest/bson/struct.RawRegexRef.html \"struct bson::RawRegexRef\")\n    A BSON regex referencing raw bytes stored elsewhere.\n\n[Regex](https://docs.rs/bson/latest/bson/struct.Regex.html \"struct bson::Regex\")\n    Represents a BSON regular expression value.\n\n[Serializer](https://docs.rs/bson/latest/bson/struct.Serializer.html \"struct bson::Serializer\")\n    Serde Serializer\n\n[SerializerOptions](https://docs.rs/bson/latest/bson/struct.SerializerOptions.html \"struct bson::SerializerOptions\")\n    Options used to configure a [`Serializer`](https://docs.rs/bson/latest/bson/struct.Serializer.html \"struct bson::Serializer\").\n\n[Timestamp](https://docs.rs/bson/latest/bson/struct.Timestamp.html \"struct bson::Timestamp\")\n    Represents a BSON timestamp value.\n\n[Uuid](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\")\n    A struct modeling a BSON UUID value (i.e. a Binary value with subtype 4).\n## Enums[\u00a7](https://docs.rs/bson/latest/bson/#enums)\n\n[Bson](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\")\n    Possible BSON value types.\n\n[RawBson](https://docs.rs/bson/latest/bson/enum.RawBson.html \"enum bson::RawBson\")\n    A BSON value backed by owned raw BSON bytes.\n\n[RawBsonRef](https://docs.rs/bson/latest/bson/enum.RawBsonRef.html \"enum bson::RawBsonRef\")\n    A BSON value referencing raw bytes stored elsewhere.\n\n[UuidRepresentation](https://docs.rs/bson/latest/bson/enum.UuidRepresentation.html \"enum bson::UuidRepresentation\")\n    Enum of the possible representations to use when converting between [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\") and [`Binary`](https://docs.rs/bson/latest/bson/struct.Binary.html \"struct bson::Binary\"). This enum is necessary because the different drivers used to have different ways of encoding UUIDs, with the BSON subtype: 0x03 (UUID old). If a UUID has been serialized with a particular representation, it MUST be deserialized with the same representation.\n## Functions[\u00a7](https://docs.rs/bson/latest/bson/#functions)\n\n[from_bson](https://docs.rs/bson/latest/bson/fn.from_bson.html \"fn bson::from_bson\")\n    Deserialize a `T` from the provided [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value.\n\n[from_bson_with_options](https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html \"fn bson::from_bson_with_options\")\n    Deserialize a `T` from the provided [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value, configuring the underlying deserializer with the provided options.\n\n[from_document](https://docs.rs/bson/latest/bson/fn.from_document.html \"fn bson::from_document\")\n    Deserialize a `T` from the provided [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[from_document_with_options](https://docs.rs/bson/latest/bson/fn.from_document_with_options.html \"fn bson::from_document_with_options\")\n    Deserialize a `T` from the provided [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\"), configuring the underlying deserializer with the provided options.\n\n[from_reader](https://docs.rs/bson/latest/bson/fn.from_reader.html \"fn bson::from_reader\")\n    Deserialize an instance of type `T` from an I/O stream of BSON.\n\n[from_slice](https://docs.rs/bson/latest/bson/fn.from_slice.html \"fn bson::from_slice\")\n    Deserialize an instance of type `T` from a slice of BSON bytes.\n\n[to_bson](https://docs.rs/bson/latest/bson/fn.to_bson.html \"fn bson::to_bson\")\n    Encode a `T` Serializable into a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value.\n\n[to_bson_with_options](https://docs.rs/bson/latest/bson/fn.to_bson_with_options.html \"fn bson::to_bson_with_options\")\n    Encode a `T` into a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value, configuring the underlying serializer with the provided options.\n\n[to_document](https://docs.rs/bson/latest/bson/fn.to_document.html \"fn bson::to_document\")\n    Encode a `T` Serializable into a BSON [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[to_document_with_options](https://docs.rs/bson/latest/bson/fn.to_document_with_options.html \"fn bson::to_document_with_options\")\n    Encode a `T` into a [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\"), configuring the underlying serializer with the provided options.\n\n[to_raw_document_buf](https://docs.rs/bson/latest/bson/fn.to_raw_document_buf.html \"fn bson::to_raw_document_buf\")\n    Serialize the given `T` as a [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\").\n\n[to_vec](https://docs.rs/bson/latest/bson/fn.to_vec.html \"fn bson::to_vec\")\n    Serialize the given `T` as a BSON byte vector.\n## Type Aliases[\u00a7](https://docs.rs/bson/latest/bson/#types)\n\n[Array](https://docs.rs/bson/latest/bson/type.Array.html \"type bson::Array\")\n    Alias for `Vec<Bson>`.\n",
        "markdown_with_citations": "[](https://docs.rs/bson/latest/bson/all.html \"show sidebar\")\n# Crate bsonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nBSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents. Like JSON, BSON supports the embedding of documents and arrays within other documents and arrays. BSON also contains extensions that allow representation of data types that are not part of the JSON spec. For example, BSON has a datetime type and a binary data type.\n```\n// JSON equivalent\n{\"hello\": \"world\"}\n// BSON encoding\n\\x16\\x00\\x00\\x00          // total document size\n\\x02                // 0x02 = type String\nhello\\x00             // field name\n\\x06\\x00\\x00\\x00world\\x00     // field value\n\\x00                // 0x00 = type EOO ('end of object')\n```\n\nBSON is the primary data representation for MongoDB\u27e84\u27e9, and this crate is used in the `mongodb`\u27e85\u27e9 driver crate in its API and implementation.\nFor more information about BSON itself, see bsonspec.org\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Installation\n#### \u00a7\u27e88\u27e9Requirements\n  * Rust 1.64+\n\n\n#### \u00a7\u27e89\u27e9Importing\nThis crate is available on crates.io\u27e810\u27e9. To use it in your application, simply add it to your project\u2019s `Cargo.toml`.\n```\n[dependencies]\nbson = \"2.15.0\"\n```\n\nNote that if you are using `bson` through the `mongodb` crate, you do not need to specify it in your `Cargo.toml`, since the `mongodb` crate already re-exports it.\n##### \u00a7\u27e811\u27e9Feature Flags\nFeature| Description| Default  \n---|---|---  \n`chrono-0_4`| Enable support for v0.4 of the `chrono`\u27e812\u27e9 crate in the public API.| no  \n`uuid-0_8`| Enable support for v0.8 of the `uuid`\u27e813\u27e9 crate in the public API.| no  \n`uuid-1`| Enable support for v1.x of the `uuid`\u27e814\u27e9 crate in the public API.| no  \n`time-0_3`| Enable support for v0.3 of the `time`\u27e815\u27e9 crate in the public API.| no  \n`serde_with`| Enable `serde_with`\u27e816\u27e9 1.x integrations for `DateTime`\u27e817\u27e9 and `Uuid`\u27e818\u27e9.| no  \n`serde_with-3`| Enable `serde_with`\u27e819\u27e9 3.x integrations for `DateTime`\u27e817\u27e9 and `Uuid`\u27e818\u27e9.| no  \n`serde_path_to_error`| Enable support for error paths via integration with `serde_path_to_error`\u27e820\u27e9. This is an unstable feature and any breaking changes to `serde_path_to_error` may affect usage of it via this feature.| no  \n### \u00a7\u27e821\u27e9BSON values\nMany different types can be represented as a BSON value, including 32-bit and 64-bit signed integers, 64 bit floating point numbers, strings, datetimes, embedded documents, and more. To see a full list of possible BSON values, see the BSON specification\u27e822\u27e9. The various possible BSON values are modeled in this crate by the `Bson`\u27e823\u27e9 enum.\n#### \u00a7\u27e824\u27e9Creating `Bson`\u27e823\u27e9 instances\n`Bson`\u27e823\u27e9 values can be instantiated directly or via the `bson!`\u27e825\u27e9 macro:\n```\nuse bson::{bson, Bson};\nlet string = Bson::String(\"hello world\".to_string());\nlet int = Bson::Int32(5);\nlet array = Bson::Array(vec![Bson::Int32(5), Bson::Boolean(false)]);\nlet string: Bson = \"hello world\".into();\nlet int: Bson = 5i32.into();\nlet string = bson!(\"hello world\");\nlet int = bson!(5);\nlet array = bson!([5, false]);\n```\n\n`bson!`\u27e825\u27e9 has supports both array and object literals, and it automatically converts any values specified to `Bson`\u27e823\u27e9, provided they are `Into<Bson>`.\n#### \u00a7\u27e826\u27e9`Bson`\u27e823\u27e9 value unwrapping\n`Bson`\u27e823\u27e9 has a number of helper methods for accessing the underlying native Rust types. These helpers can be useful in circumstances in which the specific type of a BSON value is known ahead of time.\ne.g.:\n```\nuse bson::{bson, Bson};\nlet value = Bson::Int32(5);\nlet int = value.as_i32(); // Some(5)\nlet bool = value.as_bool(); // None\nlet value = bson!([true]);\nlet array = value.as_array(); // Some(&Vec<Bson>)\n```\n\n### \u00a7\u27e827\u27e9BSON documents\nBSON documents are ordered maps of UTF-8 encoded strings to BSON values. They are logically similar to JSON objects in that they can contain subdocuments, arrays, and values of several different types. This crate models BSON documents via the `Document`\u27e828\u27e9 struct.\n#### \u00a7\u27e829\u27e9Creating `Document`\u27e828\u27e9s\n`Document`\u27e828\u27e9s can be created directly either from a byte reader containing BSON data or via the `doc!` macro:\n```\nuse bson::{doc, Document};\nuse std::io::Read;\nlet mut bytes = hex::decode(\"0C0000001069000100000000\").unwrap();\nlet doc = Document::from_reader(&mut bytes.as_slice()).unwrap(); // { \"i\": 1 }\nlet doc = doc! {\n  \"hello\": \"world\",\n  \"int\": 5,\n  \"subdoc\": { \"cat\": true },\n};\n```\n\n`doc!`\u27e830\u27e9 works similarly to `bson!`\u27e825\u27e9, except that it always returns a `Document`\u27e828\u27e9 rather than a `Bson`\u27e823\u27e9.\n#### \u00a7\u27e831\u27e9`Document`\u27e828\u27e9 member access\n`Document`\u27e828\u27e9 has a number of methods on it to facilitate member access:\n```\nuse bson::doc;\nlet doc = doc! {\n  \"string\": \"string\",\n  \"bool\": true,\n  \"i32\": 5,\n  \"doc\": { \"x\": true },\n};\n// attempt get values as untyped Bson\nlet none = doc.get(\"asdfadsf\"); // None\nlet value = doc.get(\"string\"); // Some(&Bson::String(\"string\"))\n// attempt to get values with explicit typing\nlet string = doc.get_str(\"string\"); // Ok(\"string\")\nlet subdoc = doc.get_document(\"doc\"); // Some(Document({ \"x\": true }))\nlet error = doc.get_i64(\"i32\"); // Err(...)\n```\n\n### \u00a7\u27e832\u27e9Modeling BSON with strongly typed data structures\nWhile it is possible to work with documents and BSON values directly, it will often introduce a lot of boilerplate for verifying the necessary keys are present and their values are the correct types. `serde`\u27e833\u27e9 provides a powerful way of mapping BSON data into Rust data structures largely automatically, removing the need for all that boilerplate.\ne.g.:\n```\nuse serde::{Deserialize, Serialize};\nuse bson::{bson, Bson};\n#[derive(Serialize, Deserialize)]\nstruct Person {\n  name: String,\n  age: i32,\n  phones: Vec<String>,\n}\n// Some BSON input data as a [`Bson`].\nlet bson_data: Bson = bson!({\n  \"name\": \"John Doe\",\n  \"age\": 43,\n  \"phones\": [\n    \"+44 1234567\",\n    \"+44 2345678\"\n  ]\n});\n// Deserialize the Person struct from the BSON data, automatically\n// verifying that the necessary keys are present and that they are of\n// the correct types.\nlet mut person: Person = bson::from_bson(bson_data).unwrap();\n// Do things just like with any other Rust data structure.\nprintln!(\"Redacting {}'s record.\", person.name);\nperson.name = \"REDACTED\".to_string();\n// Get a serialized version of the input data as a [`Bson`].\nlet redacted_bson = bson::to_bson(&person).unwrap();\n```\n\nAny types that implement `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 can be used in this way. Doing so helps separate the \u201cbusiness logic\u201d that operates over the data from the (de)serialization logic that translates the data to/from its serialized form. This can lead to more clear and concise code that is also less error prone.\nWhen serializing values that cannot be represented in BSON, or deserialzing from BSON that does not match the format expected by the type, the default error will only report the specific field that failed. To aid debugging, enabling the `serde_path_to_error` feature will augment errors\u27e836\u27e9 with the full field path from root object to failing field. This feature does incur a small CPU and memory overhead during (de)serialization and should be enabled with care in performance-sensitive environments.\n### \u00a7\u27e837\u27e9Working with datetimes\nThe BSON format includes a datetime type, which is modeled in this crate by the `DateTime`\u27e817\u27e9 struct, and the `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 implementations for this struct produce and parse BSON datetimes when serializing to or deserializing from BSON. The popular crate `chrono`\u27e838\u27e9 also provides a `DateTime`\u27e817\u27e9 type, but its `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 implementations operate on strings instead, so when using it with BSON, the BSON datetime type is not used. To work around this, the `chrono-0_4` feature flag can be enabled. This flag exposes a number of convenient conversions between `bson::DateTime`\u27e817\u27e9 and `chrono::DateTime`\u27e839\u27e9, including the `serde_helpers::chrono_datetime_as_bson_datetime`\u27e840\u27e9 serde helper, which can be used to (de)serialize `chrono::DateTime`\u27e839\u27e9s to/from BSON datetimes, and the `From<chrono::DateTime>` implementation for `Bson`\u27e823\u27e9, which allows `chrono::DateTime`\u27e839\u27e9 values to be used in the `doc!` and `bson!` macros.\ne.g.\n```\nuse serde::{Serialize, Deserialize};\nuse bson::doc;\n#[derive(Serialize, Deserialize)]\nstruct Foo {\n  // serializes as a BSON datetime.\n  date_time: bson::DateTime,\n  // serializes as an RFC 3339 / ISO-8601 string.\n  chrono_datetime: chrono::DateTime<chrono::Utc>,\n  // serializes as a BSON datetime.\n  // this requires the \"chrono-0_4\" feature flag\n  #[serde(with = \"bson::serde_helpers::chrono_datetime_as_bson_datetime\")]\n  chrono_as_bson: chrono::DateTime<chrono::Utc>,\n}\n// this automatic conversion also requires the \"chrono-0_4\" feature flag\nlet query = doc! {\n  \"created_at\": chrono::Utc::now(),\n};\n```\n\n### \u00a7\u27e841\u27e9Working with UUIDs\nSee the module level documentation for the `uuid`\u27e842\u27e9 module.\n### \u00a7\u27e843\u27e9WASM support\nThis crate compiles to the `wasm32-unknown-unknown` target; when doing so, the `js-sys` crate is used for the current timestamp component of `ObjectId` generation.\n### \u00a7\u27e844\u27e9Minimum supported Rust version (MSRV)\nThe MSRV for this crate is currently 1.81. This will be rarely be increased, and if it ever is, it will only happen in a minor or major version release.\n## Re-exports\u00a7\u27e845\u27e9\n\n`pub use self::de::from_reader_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_reader_utf8_lossy.html \"fn bson::de::from_reader_utf8_lossy\");`\n\n\n`pub use self::de::from_slice_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_slice_utf8_lossy.html \"fn bson::de::from_slice_utf8_lossy\");`\n\n## Modules\u00a7\u27e846\u27e9\n\nbinary\u27e847\u27e9\n\n\ndatetime\u27e848\u27e9\n    Module containing functionality related to BSON DateTimes. For more information, see the documentation for the `DateTime`\u27e817\u27e9 type.\n\nde\u27e849\u27e9\n    Deserializer\n\ndecimal128\u27e850\u27e9\n    BSON Decimal128\u27e851\u27e9 data type representation\n\ndocument\u27e852\u27e9\n    A BSON document represented as an associative HashMap with insertion ordering.\n\nextjson\u27e853\u27e9\n    Deserialization and serialization of MongoDB Extended JSON v2\u27e854\u27e9\n\noid\u27e855\u27e9\n    Module containing functionality related to BSON ObjectIds. For more information, see the documentation for the `ObjectId`\u27e856\u27e9 type.\n\nraw\u27e857\u27e9\n    An API for interacting with raw BSON bytes.\n\nser\u27e858\u27e9\n    Serializer\n\nserde_helpers\u27e859\u27e9\n    Collection of helper functions for serializing to and deserializing from BSON using Serde\n\nspec\u27e860\u27e9\n    Constants derived from the BSON Specification Version 1.1\u27e822\u27e9.\n\nuuid\u27e842\u27e9\n    UUID support for BSON.\n## Macros\u00a7\u27e861\u27e9\n\nbson\u27e825\u27e9\n    Construct a bson::BSON value from a literal.\n\ndoc\u27e830\u27e9\n    Construct a bson::Document value.\n\nrawbson\u27e862\u27e9\n    Construct a `crate::RawBson`\u27e863\u27e9 value from a literal.\n\nrawdoc\u27e864\u27e9\n    Construct a `crate::RawDocumentBuf`\u27e865\u27e9 value.\n## Structs\u00a7\u27e866\u27e9\n\nBinary\u27e867\u27e9\n    Represents a BSON binary value.\n\nDateTime\u27e817\u27e9\n    Struct representing a BSON datetime. Note: BSON datetimes have millisecond precision.\n\nDbPointer\u27e868\u27e9\n    Represents a DBPointer. (Deprecated)\n\nDecimal128\u27e869\u27e9\n    Struct representing a BSON Decimal128 type.\n\nDeserializer\u27e870\u27e9\n    Serde Deserializer\n\nDeserializerOptions\u27e871\u27e9\n    Options used to configure a `Deserializer`\u27e870\u27e9. These can also be passed into `crate::from_bson_with_options`\u27e872\u27e9 and `crate::from_document_with_options`\u27e873\u27e9.\n\nDocument\u27e874\u27e9\n    A BSON document represented as an associative HashMap with insertion ordering.\n\nJavaScriptCodeWithScope\u27e875\u27e9\n    Represents a BSON code with scope value.\n\nRawArray\u27e876\u27e9\n    A slice of a BSON document containing a BSON array value (akin to `std::str`\u27e877\u27e9). This can be retrieved from a `RawDocument`\u27e878\u27e9 via `RawDocument::get`\u27e879\u27e9.\n\nRawArrayBuf\u27e880\u27e9\n    An owned BSON array value (akin to `std::path::PathBuf`\u27e881\u27e9), backed by a buffer of raw BSON bytes. This type can be used to construct owned array values, which can be used to append to `RawDocumentBuf`\u27e865\u27e9 or as a field in a `Deserialize`\u27e835\u27e9 struct.\n\nRawBinaryRef\u27e882\u27e9\n    A BSON binary value referencing raw bytes stored elsewhere.\n\nRawDbPointerRef\u27e883\u27e9\n    A BSON DB pointer value referencing raw bytes stored elesewhere.\n\nRawDocument\u27e878\u27e9\n    A slice of a BSON document (akin to `std::str`\u27e877\u27e9). This can be created from a `RawDocumentBuf`\u27e865\u27e9 or any type that contains valid BSON data, including static binary literals, `Vec<u8>`\u27e884\u27e9, or arrays.\n\nRawDocumentBuf\u27e865\u27e9\n    An owned BSON document (akin to `std::path::PathBuf`\u27e881\u27e9), backed by a buffer of raw BSON bytes. This can be created from a `Vec<u8>` or a `crate::Document`\u27e874\u27e9.\n\nRawJavaScriptCodeWithScope\u27e885\u27e9\n    A BSON \u201ccode with scope\u201d value backed by owned raw BSON.\n\nRawJavaScriptCodeWithScopeRef\u27e886\u27e9\n    A BSON \u201ccode with scope\u201d value referencing raw bytes stored elsewhere.\n\nRawRegexRef\u27e887\u27e9\n    A BSON regex referencing raw bytes stored elsewhere.\n\nRegex\u27e888\u27e9\n    Represents a BSON regular expression value.\n\nSerializer\u27e889\u27e9\n    Serde Serializer\n\nSerializerOptions\u27e890\u27e9\n    Options used to configure a `Serializer`\u27e889\u27e9.\n\nTimestamp\u27e891\u27e9\n    Represents a BSON timestamp value.\n\nUuid\u27e818\u27e9\n    A struct modeling a BSON UUID value (i.e. a Binary value with subtype 4).\n## Enums\u00a7\u27e892\u27e9\n\nBson\u27e823\u27e9\n    Possible BSON value types.\n\nRawBson\u27e863\u27e9\n    A BSON value backed by owned raw BSON bytes.\n\nRawBsonRef\u27e893\u27e9\n    A BSON value referencing raw bytes stored elsewhere.\n\nUuidRepresentation\u27e894\u27e9\n    Enum of the possible representations to use when converting between `Uuid`\u27e818\u27e9 and `Binary`\u27e867\u27e9. This enum is necessary because the different drivers used to have different ways of encoding UUIDs, with the BSON subtype: 0x03 (UUID old). If a UUID has been serialized with a particular representation, it MUST be deserialized with the same representation.\n## Functions\u00a7\u27e895\u27e9\n\nfrom_bson\u27e896\u27e9\n    Deserialize a `T` from the provided `Bson`\u27e823\u27e9 value.\n\nfrom_bson_with_options\u27e872\u27e9\n    Deserialize a `T` from the provided `Bson`\u27e823\u27e9 value, configuring the underlying deserializer with the provided options.\n\nfrom_document\u27e897\u27e9\n    Deserialize a `T` from the provided `Document`\u27e874\u27e9.\n\nfrom_document_with_options\u27e873\u27e9\n    Deserialize a `T` from the provided `Document`\u27e874\u27e9, configuring the underlying deserializer with the provided options.\n\nfrom_reader\u27e898\u27e9\n    Deserialize an instance of type `T` from an I/O stream of BSON.\n\nfrom_slice\u27e899\u27e9\n    Deserialize an instance of type `T` from a slice of BSON bytes.\n\nto_bson\u27e8100\u27e9\n    Encode a `T` Serializable into a `Bson`\u27e823\u27e9 value.\n\nto_bson_with_options\u27e8101\u27e9\n    Encode a `T` into a `Bson`\u27e823\u27e9 value, configuring the underlying serializer with the provided options.\n\nto_document\u27e8102\u27e9\n    Encode a `T` Serializable into a BSON `Document`\u27e874\u27e9.\n\nto_document_with_options\u27e8103\u27e9\n    Encode a `T` into a `Document`\u27e874\u27e9, configuring the underlying serializer with the provided options.\n\nto_raw_document_buf\u27e8104\u27e9\n    Serialize the given `T` as a `RawDocumentBuf`\u27e865\u27e9.\n\nto_vec\u27e8105\u27e9\n    Serialize the given `T` as a BSON byte vector.\n## Type Aliases\u00a7\u27e8106\u27e9\n\nArray\u27e8107\u27e9\n    Alias for `Vec<Bson>`.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bson/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bson/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bson/latest/src/bson/lib.rs.html#22-350: Source\n\u27e84\u27e9 https://www.mongodb.com/: MongoDB\n\u27e85\u27e9 https://docs.rs/mongodb/latest/mongodb/: `mongodb`\n\u27e86\u27e9 http://bsonspec.org: bsonspec.org\n\u27e87\u27e9 https://docs.rs/bson/latest/bson/#installation: \u00a7\n\u27e88\u27e9 https://docs.rs/bson/latest/bson/#requirements: \u00a7\n\u27e89\u27e9 https://docs.rs/bson/latest/bson/#importing: \u00a7\n\u27e810\u27e9 https://crates.io/crates/bson: crates.io\n\u27e811\u27e9 https://docs.rs/bson/latest/bson/#feature-flags: \u00a7\n\u27e812\u27e9 https://docs.rs/chrono/0.4: `chrono`\n\u27e813\u27e9 https://docs.rs/uuid/0.8: `uuid`\n\u27e814\u27e9 https://docs.rs/uuid/1.x: `uuid`\n\u27e815\u27e9 https://docs.rs/time/0.3: `time`\n\u27e816\u27e9 https://docs.rs/serde_with/1.x: `serde_with`\n\u27e817\u27e9 https://docs.rs/bson/latest/bson/struct.DateTime.html: struct bson::DateTime - `DateTime`\n\u27e818\u27e9 https://docs.rs/bson/latest/bson/struct.Uuid.html: struct bson::Uuid - `Uuid`\n\u27e819\u27e9 https://docs.rs/serde_with/3.x: `serde_with`\n\u27e820\u27e9 https://docs.rs/serde_path_to_err/latest: `serde_path_to_error`\n\u27e821\u27e9 https://docs.rs/bson/latest/bson/#bson-values: \u00a7\n\u27e822\u27e9 http://bsonspec.org/spec.html: BSON specification\n\u27e823\u27e9 https://docs.rs/bson/latest/bson/enum.Bson.html: `Bson`\n\u27e824\u27e9 https://docs.rs/bson/latest/bson/#creating-bson-instances: \u00a7\n\u27e825\u27e9 https://docs.rs/bson/latest/bson/macro.bson.html: `bson!`\n\u27e826\u27e9 https://docs.rs/bson/latest/bson/#bson-value-unwrapping: \u00a7\n\u27e827\u27e9 https://docs.rs/bson/latest/bson/#bson-documents: \u00a7\n\u27e828\u27e9 https://docs.rs/bson/latest/bson/document/struct.Document.html: `Document`\n\u27e829\u27e9 https://docs.rs/bson/latest/bson/#creating-documents: \u00a7\n\u27e830\u27e9 https://docs.rs/bson/latest/bson/macro.doc.html: `doc!`\n\u27e831\u27e9 https://docs.rs/bson/latest/bson/#document-member-access: \u00a7\n\u27e832\u27e9 https://docs.rs/bson/latest/bson/#modeling-bson-with-strongly-typed-data-structures: \u00a7\n\u27e833\u27e9 https://serde.rs/: `serde`\n\u27e834\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e835\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e836\u27e9 https://docs.rs/bson/latest/bson/de/enum.Error.html#variant.WithPath: variant bson::de::Error::WithPath - augment errors\n\u27e837\u27e9 https://docs.rs/bson/latest/bson/#working-with-datetimes: \u00a7\n\u27e838\u27e9 https://docs.rs/bson/latest/bson/docs.rs/chrono: `chrono`\n\u27e839\u27e9 https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html: struct chrono::datetime::DateTime - `chrono::DateTime`\n\u27e840\u27e9 https://docs.rs/bson/latest/bson/serde_helpers/chrono_datetime_as_bson_datetime/index.html: mod bson::serde_helpers::chrono_datetime_as_bson_datetime - `serde_helpers::chrono_datetime_as_bson_datetime`\n\u27e841\u27e9 https://docs.rs/bson/latest/bson/#working-with-uuids: \u00a7\n\u27e842\u27e9 https://docs.rs/bson/latest/bson/uuid/index.html: mod bson::uuid - `uuid`\n\u27e843\u27e9 https://docs.rs/bson/latest/bson/#wasm-support: \u00a7\n\u27e844\u27e9 https://docs.rs/bson/latest/bson/#minimum-supported-rust-version-msrv: \u00a7\n\u27e845\u27e9 https://docs.rs/bson/latest/bson/#reexports: \u00a7\n\u27e846\u27e9 https://docs.rs/bson/latest/bson/#modules: \u00a7\n\u27e847\u27e9 https://docs.rs/bson/latest/bson/binary/index.html: mod bson::binary - binary\n\u27e848\u27e9 https://docs.rs/bson/latest/bson/datetime/index.html: mod bson::datetime - datetime\n\u27e849\u27e9 https://docs.rs/bson/latest/bson/de/index.html: mod bson::de - de\n\u27e850\u27e9 https://docs.rs/bson/latest/bson/decimal128/index.html: mod bson::decimal128 - decimal128\n\u27e851\u27e9 https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst: BSON Decimal128\n\u27e852\u27e9 https://docs.rs/bson/latest/bson/document/index.html: mod bson::document - document\n\u27e853\u27e9 https://docs.rs/bson/latest/bson/extjson/index.html: mod bson::extjson - extjson\n\u27e854\u27e9 https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/: MongoDB Extended JSON v2\n\u27e855\u27e9 https://docs.rs/bson/latest/bson/oid/index.html: mod bson::oid - oid\n\u27e856\u27e9 https://docs.rs/bson/latest/bson/oid/struct.ObjectId.html: struct bson::oid::ObjectId - `ObjectId`\n\u27e857\u27e9 https://docs.rs/bson/latest/bson/raw/index.html: mod bson::raw - raw\n\u27e858\u27e9 https://docs.rs/bson/latest/bson/ser/index.html: mod bson::ser - ser\n\u27e859\u27e9 https://docs.rs/bson/latest/bson/serde_helpers/index.html: mod bson::serde_helpers - serde_helpers\n\u27e860\u27e9 https://docs.rs/bson/latest/bson/spec/index.html: mod bson::spec - spec\n\u27e861\u27e9 https://docs.rs/bson/latest/bson/#macros: \u00a7\n\u27e862\u27e9 https://docs.rs/bson/latest/bson/macro.rawbson.html: macro bson::rawbson - rawbson\n\u27e863\u27e9 https://docs.rs/bson/latest/bson/enum.RawBson.html: enum bson::RawBson - `crate::RawBson`\n\u27e864\u27e9 https://docs.rs/bson/latest/bson/macro.rawdoc.html: macro bson::rawdoc - rawdoc\n\u27e865\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html: struct bson::RawDocumentBuf - `crate::RawDocumentBuf`\n\u27e866\u27e9 https://docs.rs/bson/latest/bson/#structs: \u00a7\n\u27e867\u27e9 https://docs.rs/bson/latest/bson/struct.Binary.html: struct bson::Binary - Binary\n\u27e868\u27e9 https://docs.rs/bson/latest/bson/struct.DbPointer.html: struct bson::DbPointer - DbPointer\n\u27e869\u27e9 https://docs.rs/bson/latest/bson/struct.Decimal128.html: struct bson::Decimal128 - Decimal128\n\u27e870\u27e9 https://docs.rs/bson/latest/bson/struct.Deserializer.html: struct bson::Deserializer - Deserializer\n\u27e871\u27e9 https://docs.rs/bson/latest/bson/struct.DeserializerOptions.html: struct bson::DeserializerOptions - DeserializerOptions\n\u27e872\u27e9 https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html: fn bson::from_bson_with_options - `crate::from_bson_with_options`\n\u27e873\u27e9 https://docs.rs/bson/latest/bson/fn.from_document_with_options.html: fn bson::from_document_with_options - `crate::from_document_with_options`\n\u27e874\u27e9 https://docs.rs/bson/latest/bson/struct.Document.html: struct bson::Document - Document\n\u27e875\u27e9 https://docs.rs/bson/latest/bson/struct.JavaScriptCodeWithScope.html: struct bson::JavaScriptCodeWithScope - JavaScriptCodeWithScope\n\u27e876\u27e9 https://docs.rs/bson/latest/bson/struct.RawArray.html: struct bson::RawArray - RawArray\n\u27e877\u27e9 https://doc.rust-lang.org/nightly/alloc/str/index.html: mod alloc::str - `std::str`\n\u27e878\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocument.html: struct bson::RawDocument - `RawDocument`\n\u27e879\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocument.html#method.get: method bson::RawDocument::get - `RawDocument::get`\n\u27e880\u27e9 https://docs.rs/bson/latest/bson/struct.RawArrayBuf.html: struct bson::RawArrayBuf - RawArrayBuf\n\u27e881\u27e9 https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html: struct std::path::PathBuf - `std::path::PathBuf`\n\u27e882\u27e9 https://docs.rs/bson/latest/bson/struct.RawBinaryRef.html: struct bson::RawBinaryRef - RawBinaryRef\n\u27e883\u27e9 https://docs.rs/bson/latest/bson/struct.RawDbPointerRef.html: struct bson::RawDbPointerRef - RawDbPointerRef\n\u27e884\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `Vec<u8>`\n\u27e885\u27e9 https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScope.html: struct bson::RawJavaScriptCodeWithScope - RawJavaScriptCodeWithScope\n\u27e886\u27e9 https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScopeRef.html: struct bson::RawJavaScriptCodeWithScopeRef - RawJavaScriptCodeWithScopeRef\n\u27e887\u27e9 https://docs.rs/bson/latest/bson/struct.RawRegexRef.html: struct bson::RawRegexRef - RawRegexRef\n\u27e888\u27e9 https://docs.rs/bson/latest/bson/struct.Regex.html: struct bson::Regex - Regex\n\u27e889\u27e9 https://docs.rs/bson/latest/bson/struct.Serializer.html: struct bson::Serializer - Serializer\n\u27e890\u27e9 https://docs.rs/bson/latest/bson/struct.SerializerOptions.html: struct bson::SerializerOptions - SerializerOptions\n\u27e891\u27e9 https://docs.rs/bson/latest/bson/struct.Timestamp.html: struct bson::Timestamp - Timestamp\n\u27e892\u27e9 https://docs.rs/bson/latest/bson/#enums: \u00a7\n\u27e893\u27e9 https://docs.rs/bson/latest/bson/enum.RawBsonRef.html: enum bson::RawBsonRef - RawBsonRef\n\u27e894\u27e9 https://docs.rs/bson/latest/bson/enum.UuidRepresentation.html: enum bson::UuidRepresentation - UuidRepresentation\n\u27e895\u27e9 https://docs.rs/bson/latest/bson/#functions: \u00a7\n\u27e896\u27e9 https://docs.rs/bson/latest/bson/fn.from_bson.html: fn bson::from_bson - from_bson\n\u27e897\u27e9 https://docs.rs/bson/latest/bson/fn.from_document.html: fn bson::from_document - from_document\n\u27e898\u27e9 https://docs.rs/bson/latest/bson/fn.from_reader.html: fn bson::from_reader - from_reader\n\u27e899\u27e9 https://docs.rs/bson/latest/bson/fn.from_slice.html: fn bson::from_slice - from_slice\n\u27e8100\u27e9 https://docs.rs/bson/latest/bson/fn.to_bson.html: fn bson::to_bson - to_bson\n\u27e8101\u27e9 https://docs.rs/bson/latest/bson/fn.to_bson_with_options.html: fn bson::to_bson_with_options - to_bson_with_options\n\u27e8102\u27e9 https://docs.rs/bson/latest/bson/fn.to_document.html: fn bson::to_document - to_document\n\u27e8103\u27e9 https://docs.rs/bson/latest/bson/fn.to_document_with_options.html: fn bson::to_document_with_options - to_document_with_options\n\u27e8104\u27e9 https://docs.rs/bson/latest/bson/fn.to_raw_document_buf.html: fn bson::to_raw_document_buf - to_raw_document_buf\n\u27e8105\u27e9 https://docs.rs/bson/latest/bson/fn.to_vec.html: fn bson::to_vec - to_vec\n\u27e8106\u27e9 https://docs.rs/bson/latest/bson/#types: \u00a7\n\u27e8107\u27e9 https://docs.rs/bson/latest/bson/type.Array.html: type bson::Array - Array\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `bson` crate provides support for BSON (Binary JSON), a binary-encoded serialization format used primarily by MongoDB. It enables working with BSON values and documents, offering features like type-safe serialization/deserialization via Serde, macros (`bson!` and `doc!`) for creating BSON data, and integration with popular libraries like `chrono` and `uuid`. Additionally, it supports advanced features like raw BSON manipulation, extended JSON, and WebAssembly compatibility.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: BSON Serialization and Deserialization  \n\u2705 **Factual:** The `bson` crate provides seamless integration with `serde`, allowing developers to serialize and deserialize Rust data structures into BSON format using the `to_bson` and `from_bson` functions.  \n\u274c **Counterfactual:** The `bson` crate requires manual implementation of serialization and deserialization logic for Rust data structures, as it does not support `serde` integration.  \n\n---\n\n### Pair 2: Support for Datetime Handling  \n\u2705 **Factual:** The `bson` crate includes a dedicated `DateTime` type that supports BSON's millisecond-precision datetime format, and it can interoperate with the `chrono` crate when the `chrono-0_4` feature flag is enabled.  \n\u274c **Counterfactual:** The `bson` crate does not provide direct support for datetime handling and requires developers to convert datetime values to strings manually for serialization.  \n\n---\n\n### Pair 3: WASM Compatibility  \n\u2705 **Factual:** The `bson` crate is compatible with the `wasm32-unknown-unknown` target and uses the `js-sys` crate for generating timestamps when creating BSON `ObjectId` values in WebAssembly environments.  \n\u274c **Counterfactual:** The `bson` crate is incompatible with WebAssembly targets and cannot be used for BSON serialization or `ObjectId` generation in WASM environments.  \n\n---",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}