{
    "name": "terminal_size",
    "version": "0.4.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/terminal_size/latest/terminal_size/all.html \"show sidebar\")\n# Crate terminal_sizeCopy item path\n[Settings](https://docs.rs/terminal_size/latest/settings.html)\n[Help](https://docs.rs/terminal_size/latest/help.html)\nSummary[Source](https://docs.rs/terminal_size/latest/src/terminal_size/lib.rs.html#1-41)\nExpand description\nA simple utility for getting the size of a terminal.\nWorks on Linux, macOS, Windows, and illumos.\nThis crate requires a minimum Rust version of 1.63.0 (2022-08-11).\n## [\u00a7](https://docs.rs/terminal_size/latest/terminal_size/#example)Example\n```\nuse terminal_size::{Width, Height, terminal_size};\nlet size = terminal_size();\nif let Some((Width(w), Height(h))) = size {\n  println!(\"Your terminal is {} cols wide and {} lines tall\", w, h);\n} else {\n  println!(\"Unable to get terminal size\");\n}\n```\n\n## Structs[\u00a7](https://docs.rs/terminal_size/latest/terminal_size/#structs)\n\n[Height](https://docs.rs/terminal_size/latest/terminal_size/struct.Height.html \"struct terminal_size::Height\")\n\n\n[Width](https://docs.rs/terminal_size/latest/terminal_size/struct.Width.html \"struct terminal_size::Width\")\n\n## Functions[\u00a7](https://docs.rs/terminal_size/latest/terminal_size/#functions)\n\n[terminal_size](https://docs.rs/terminal_size/latest/terminal_size/fn.terminal_size.html \"fn terminal_size::terminal_size\")\n    Returns the size of the terminal.\n\n[terminal_size_of](https://docs.rs/terminal_size/latest/terminal_size/fn.terminal_size_of.html \"fn terminal_size::terminal_size_of\")\n    Returns the size of the terminal using the given file descriptor, if available.\n\n[terminal_size_using_fd](https://docs.rs/terminal_size/latest/terminal_size/fn.terminal_size_using_fd.html \"fn terminal_size::terminal_size_using_fd\")\u26a0Deprecated\n    Returns the size of the terminal using the given raw file descriptor, if available.\n",
        "markdown_with_citations": "[](https://docs.rs/terminal_size/latest/terminal_size/all.html \"show sidebar\")\n# Crate terminal_sizeCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA simple utility for getting the size of a terminal.\nWorks on Linux, macOS, Windows, and illumos.\nThis crate requires a minimum Rust version of 1.63.0 (2022-08-11).\n## \u00a7\u27e84\u27e9Example\n```\nuse terminal_size::{Width, Height, terminal_size};\nlet size = terminal_size();\nif let Some((Width(w), Height(h))) = size {\n  println!(\"Your terminal is {} cols wide and {} lines tall\", w, h);\n} else {\n  println!(\"Unable to get terminal size\");\n}\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nHeight\u27e86\u27e9\n\n\nWidth\u27e87\u27e9\n\n## Functions\u00a7\u27e88\u27e9\n\nterminal_size\u27e89\u27e9\n    Returns the size of the terminal.\n\nterminal_size_of\u27e810\u27e9\n    Returns the size of the terminal using the given file descriptor, if available.\n\nterminal_size_using_fd\u27e811\u27e9\u26a0Deprecated\n    Returns the size of the terminal using the given raw file descriptor, if available.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/terminal_size/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/terminal_size/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/terminal_size/latest/src/terminal_size/lib.rs.html#1-41: Source\n\u27e84\u27e9 https://docs.rs/terminal_size/latest/terminal_size/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/terminal_size/latest/terminal_size/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/terminal_size/latest/terminal_size/struct.Height.html: struct terminal_size::Height - Height\n\u27e87\u27e9 https://docs.rs/terminal_size/latest/terminal_size/struct.Width.html: struct terminal_size::Width - Width\n\u27e88\u27e9 https://docs.rs/terminal_size/latest/terminal_size/#functions: \u00a7\n\u27e89\u27e9 https://docs.rs/terminal_size/latest/terminal_size/fn.terminal_size.html: fn terminal_size::terminal_size - terminal_size\n\u27e810\u27e9 https://docs.rs/terminal_size/latest/terminal_size/fn.terminal_size_of.html: fn terminal_size::terminal_size_of - terminal_size_of\n\u27e811\u27e9 https://docs.rs/terminal_size/latest/terminal_size/fn.terminal_size_using_fd.html: fn terminal_size::terminal_size_using_fd - terminal_size_using_fd\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `terminal_size` crate is a lightweight utility for retrieving the dimensions of a terminal, compatible with Linux, macOS, Windows, and illumos. It provides functions like `terminal_size` and `terminal_size_of` to fetch terminal width and height, with support for file descriptors. The crate requires Rust 1.63.0 or later and includes simple abstractions via `Width` and `Height` structs.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Platform Compatibility\n\u2705 Factual: The `terminal_size` crate works on Linux, macOS, Windows, and illumos, making it cross-platform.  \n\u274c Counterfactual: The `terminal_size` crate is limited to Linux and macOS and does not support Windows or illumos.\n\n---\n\n### Pair 2: Minimum Rust Version Requirement  \n\u2705 Factual: The `terminal_size` crate requires a minimum Rust version of 1.63.0, released on August 11, 2022.  \n\u274c Counterfactual: The `terminal_size` crate has no minimum Rust version requirement and works with any Rust version.\n\n---\n\n### Pair 3: Functionality for Terminal Size Retrieval  \n\u2705 Factual: The `terminal_size` crate provides the `terminal_size` function to retrieve the terminal dimensions and supports optional file descriptor-based methods like `terminal_size_of`.  \n\u274c Counterfactual: The `terminal_size` crate only supports retrieving terminal dimensions using file descriptors and does not provide a general-purpose `terminal_size` function.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}