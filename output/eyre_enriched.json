{
    "name": "eyre",
    "version": "0.6.12",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/eyre/latest/eyre/all.html \"show sidebar\")\n# Crate eyreCopy item path\n[Settings](https://docs.rs/eyre/latest/settings.html)\n[Help](https://docs.rs/eyre/latest/help.html)\nSummary[Source](https://docs.rs/eyre/latest/src/eyre/lib.rs.html#1-1322)\nExpand description\nThis library provides [`eyre::Report`](https://docs.rs/eyre/*/eyre/struct.Report.html), a trait object based error handling type for easy idiomatic error handling and reporting in Rust applications.\nThis crate is a fork of [`anyhow`](https://github.com/dtolnay/anyhow) with support for customized error reports. For more details on customization, check out the docs on [`eyre::EyreHandler`](https://docs.rs/eyre/*/eyre/trait.EyreHandler.html).\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#custom-report-handlers)Custom Report Handlers\nThe heart of this crate is its ability to swap out the Handler type to change what information is carried alongside errors and how the end report is formatted. This crate is meant to be used alongside companion crates that customize its behavior. Below is a list of known crates that export report handlers for eyre and short summaries of what features they provide.\n  * [`stable-eyre`](https://github.com/eyre-rs/stable-eyre): Switches the backtrace type from `std`\u2019s to `backtrace-rs`\u2019s so that it can be captured on stable. The report format is identical to `DefaultHandler`\u2019s report format.\n  * [`color-eyre`](https://github.com/eyre-rs/color-eyre): Captures a `backtrace::Backtrace` and a `tracing_error::SpanTrace`. Provides a `Section` trait for attaching warnings and suggestions to error reports. The end report is then pretty printed with the help of [`color-backtrace`](https://github.com/athre0z/color-backtrace), [`color-spantrace`](https://github.com/eyre-rs/color-spantrace), and `ansi_term`. Check out the README on [`color-eyre`](https://github.com/eyre-rs/color-eyre) for details on the report format.\n  * [`simple-eyre`](https://github.com/eyre-rs/simple-eyre): A minimal `EyreHandler` that captures no additional information, for when you do not wish to capture `Backtrace`s with errors.\n  * [`jane-eyre`](https://github.com/yaahc/jane-eyre): A report handler crate that exists purely for the pun. Currently just re-exports `color-eyre`.\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#usage-recommendations-and-stability-considerations)Usage Recommendations and Stability Considerations\n**We recommend users do not re-export types from this library as part their own public API for libraries with external users.** The main reason for this is that it will make your library API break if we ever bump the major version number on eyre and your users upgrade the eyre version they use in their application code before you upgrade your own eyre dep version[1](https://docs.rs/eyre/latest/eyre/#fn1).\nHowever, even beyond this API stability hazard, there are other good reasons to avoid using `eyre::Report` as your public error type.\n  * You export an undocumented error interface that is otherwise still accessible via downcast, making it hard for users to react to specific errors while not preventing them from depending on details you didn\u2019t mean to make part of your public API. \n    * This in turn makes the error types of all libraries you use a part of your public API as well, and makes changing any of those libraries into undetectable runtime breakage.\n  * If many of your errors are constructed from strings, you encourage your users to use string comparison for reacting to specific errors, which is brittle and turns updating error messages into potentially undetectable runtime breakage.\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#details)Details\n  * Use `Result<T, eyre::Report>`, or equivalently `eyre::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error` trait.\n```\nuse eyre::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Wrap a lower level error with a new error created from a message to help the person troubleshooting understand the chain of failures that occurred. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more information about what higher level step the application was in the middle of.\n```\nuse eyre::{WrapErr, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().wrap_err(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .wrap_err_with(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be done by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using the nightly channel, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in [`std::backtrace`](https://doc.rust-lang.org/std/backtrace/index.html#environment-variables):\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\nThe tracking issue for this feature is [rust-lang/rust#53487](https://github.com/rust-lang/rust/issues/53487).\n  * Eyre works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like [thiserror](https://github.com/dtolnay/thiserror).\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `eyre!` macro, which supports string interpolation and produces an `eyre::Report`.\n```\nreturn Err(eyre!(\"Missing attribute: {}\", missing));\n```\n\n  * On newer versions of the compiler (i.e. 1.58 and later) this macro also supports format args captures.\n```\nreturn Err(eyre!(\"Missing attribute: {missing}\"));\n```\n\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#no-std-support)No-std support\nNo-std support was removed in 2020 in [commit 608a16a](https://github.com/eyre-rs/eyre/pull/29/commits/608a16aa2c2c27eca6c88001cc94c6973c18f1d5) due to unaddressed upstream breakages.\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#comparison-to-failure)Comparison to failure\nThe `eyre::Report` type works something like `failure::Error`, but unlike failure ours is built around the standard library\u2019s `std::error::Error` trait rather than a separate trait `failure::Fail`. The standard library has adopted the necessary improvements for this to be possible as part of [RFC 2504](https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md).\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#comparison-to-thiserror)Comparison to thiserror\nUse `eyre` if you don\u2019t think you\u2019ll do anything with an error other than report it. This is common in application code. Use `thiserror` if you think you need an error type that can be handled via match or reported. This is common in library crates where you don\u2019t know how your users will handle your errors.\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#compatibility-with-anyhow)Compatibility with `anyhow`\nThis crate does its best to be usable as a drop in replacement of `anyhow` and vice-versa by re-exporting all of the renamed APIs with the names used in `anyhow`, though there are some differences still.\n##### [\u00a7](https://docs.rs/eyre/latest/eyre/#context-and-option)`Context` and `Option`\nAs part of renaming `Context` to `WrapErr` we also intentionally do not implement `WrapErr` for `Option`. This decision was made because `wrap_err` implies that you\u2019re creating a new error that saves the old error as its `source`. With `Option` there is no source error to wrap, so `wrap_err` ends up being somewhat meaningless.\nInstead `eyre` offers [`OptionExt::ok_or_eyre`](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre \"method eyre::OptionExt::ok_or_eyre\") to yield _static_ errors from `None`, and intends for users to use the combinator functions provided by `std`, converting `Option`s to `Result`s, for _dynamic_ errors. So where you would write this with anyhow:\n```\nuse anyhow::Context;\nlet opt: Option<()> = None;\nlet result_static = opt.context(\"static error message\");\nlet result_dynamic = opt.with_context(|| format!(\"{} error message\", \"dynamic\"));\n```\n\nWith `eyre` we want users to write:\n```\nuse eyre::{eyre, OptionExt, Result};\nlet opt: Option<()> = None;\nlet result_static: Result<()> = opt.ok_or_eyre(\"static error message\");\nlet result_dynamic: Result<()> = opt.ok_or_else(|| eyre!(\"{} error message\", \"dynamic\"));\n```\n\n**NOTE** : However, to help with porting we do provide a `ContextCompat` trait which implements `context` for options which you can import to make existing `.context` calls compile.\n  1. example and explanation of breakage <https://github.com/eyre-rs/eyre/issues/30#issuecomment-647650361> [\u21a9](https://docs.rs/eyre/latest/eyre/#fnref1)\n\n\n## Re-exports[\u00a7](https://docs.rs/eyre/latest/eyre/#reexports)\n\n`pub use Report[](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\") as Error;`\n\n\n`pub use WrapErr[](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\") as Context;`\n\n## Macros[\u00a7](https://docs.rs/eyre/latest/eyre/#macros)\n\n[anyhow](https://docs.rs/eyre/latest/eyre/macro.anyhow.html \"macro eyre::anyhow\")\n    Compatibility re-export of `eyre` for interop with `anyhow` Construct an ad-hoc error from a string.\n\n[bail](https://docs.rs/eyre/latest/eyre/macro.bail.html \"macro eyre::bail\")\n    Return early with an error.\n\n[ensure](https://docs.rs/eyre/latest/eyre/macro.ensure.html \"macro eyre::ensure\")\n    Return early with an error if a condition is not satisfied.\n\n[eyre](https://docs.rs/eyre/latest/eyre/macro.eyre.html \"macro eyre::eyre\")\n    Construct an ad-hoc error from a string.\n\n[format_err](https://docs.rs/eyre/latest/eyre/macro.format_err.html \"macro eyre::format_err\")\n    Construct an ad-hoc error from a string.\n## Structs[\u00a7](https://docs.rs/eyre/latest/eyre/#structs)\n\n[Chain](https://docs.rs/eyre/latest/eyre/struct.Chain.html \"struct eyre::Chain\")\n    Iterator of a chain of source errors.\n\n[DefaultHandler](https://docs.rs/eyre/latest/eyre/struct.DefaultHandler.html \"struct eyre::DefaultHandler\")\n    The default provided error report handler for `eyre::Report`.\n\n[InstallError](https://docs.rs/eyre/latest/eyre/struct.InstallError.html \"struct eyre::InstallError\")\n    Error indicating that `set_hook` was unable to install the provided ErrorHook\n\n[Report](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\")\n    The core error reporting type of the library, a wrapper around a dynamic error reporting type.\n## Traits[\u00a7](https://docs.rs/eyre/latest/eyre/#traits)\n\n[ContextCompat](https://docs.rs/eyre/latest/eyre/trait.ContextCompat.html \"trait eyre::ContextCompat\")\n    Provides the `context` method for `Option` when porting from `anyhow`\n\n[EyreHandler](https://docs.rs/eyre/latest/eyre/trait.EyreHandler.html \"trait eyre::EyreHandler\")\n    Error Report Handler trait for customizing `eyre::Report`\n\n[OptionExt](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html \"trait eyre::OptionExt\")\n    Provides the [`ok_or_eyre`](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre \"method eyre::OptionExt::ok_or_eyre\") method for [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\n\n[WrapErr](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\")\n    Provides the `wrap_err` method for `Result`.\n## Functions[\u00a7](https://docs.rs/eyre/latest/eyre/#functions)\n\n[Ok](https://docs.rs/eyre/latest/eyre/fn.Ok.html \"fn eyre::Ok\")\n    Equivalent to Ok::<_, eyre::Error>(value).\n\n[set_hook](https://docs.rs/eyre/latest/eyre/fn.set_hook.html \"fn eyre::set_hook\")\n    Install the provided error hook for constructing EyreHandlers when converting Errors to Reports\n## Type Aliases[\u00a7](https://docs.rs/eyre/latest/eyre/#types)\n\n[Result](https://docs.rs/eyre/latest/eyre/type.Result.html \"type eyre::Result\")\n    type alias for `Result<T, Report>`\n",
        "markdown_with_citations": "[](https://docs.rs/eyre/latest/eyre/all.html \"show sidebar\")\n# Crate eyreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis library provides `eyre::Report`\u27e84\u27e9, a trait object based error handling type for easy idiomatic error handling and reporting in Rust applications.\nThis crate is a fork of `anyhow`\u27e85\u27e9 with support for customized error reports. For more details on customization, check out the docs on `eyre::EyreHandler`\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Custom Report Handlers\nThe heart of this crate is its ability to swap out the Handler type to change what information is carried alongside errors and how the end report is formatted. This crate is meant to be used alongside companion crates that customize its behavior. Below is a list of known crates that export report handlers for eyre and short summaries of what features they provide.\n  * `stable-eyre`\u27e88\u27e9: Switches the backtrace type from `std`\u2019s to `backtrace-rs`\u2019s so that it can be captured on stable. The report format is identical to `DefaultHandler`\u2019s report format.\n  * `color-eyre`\u27e89\u27e9: Captures a `backtrace::Backtrace` and a `tracing_error::SpanTrace`. Provides a `Section` trait for attaching warnings and suggestions to error reports. The end report is then pretty printed with the help of `color-backtrace`\u27e810\u27e9, `color-spantrace`\u27e811\u27e9, and `ansi_term`. Check out the README on `color-eyre`\u27e89\u27e9 for details on the report format.\n  * `simple-eyre`\u27e812\u27e9: A minimal `EyreHandler` that captures no additional information, for when you do not wish to capture `Backtrace`s with errors.\n  * `jane-eyre`\u27e813\u27e9: A report handler crate that exists purely for the pun. Currently just re-exports `color-eyre`.\n\n\n### \u00a7\u27e814\u27e9Usage Recommendations and Stability Considerations\n**We recommend users do not re-export types from this library as part their own public API for libraries with external users.** The main reason for this is that it will make your library API break if we ever bump the major version number on eyre and your users upgrade the eyre version they use in their application code before you upgrade your own eyre dep version1\u27e815\u27e9.\nHowever, even beyond this API stability hazard, there are other good reasons to avoid using `eyre::Report` as your public error type.\n  * You export an undocumented error interface that is otherwise still accessible via downcast, making it hard for users to react to specific errors while not preventing them from depending on details you didn\u2019t mean to make part of your public API. \n    * This in turn makes the error types of all libraries you use a part of your public API as well, and makes changing any of those libraries into undetectable runtime breakage.\n  * If many of your errors are constructed from strings, you encourage your users to use string comparison for reacting to specific errors, which is brittle and turns updating error messages into potentially undetectable runtime breakage.\n\n\n### \u00a7\u27e816\u27e9Details\n  * Use `Result<T, eyre::Report>`, or equivalently `eyre::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error` trait.\n```\nuse eyre::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Wrap a lower level error with a new error created from a message to help the person troubleshooting understand the chain of failures that occurred. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more information about what higher level step the application was in the middle of.\n```\nuse eyre::{WrapErr, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().wrap_err(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .wrap_err_with(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be done by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using the nightly channel, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in `std::backtrace`\u27e817\u27e9:\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\nThe tracking issue for this feature is rust-lang/rust#53487\u27e818\u27e9.\n  * Eyre works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like thiserror\u27e819\u27e9.\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `eyre!` macro, which supports string interpolation and produces an `eyre::Report`.\n```\nreturn Err(eyre!(\"Missing attribute: {}\", missing));\n```\n\n  * On newer versions of the compiler (i.e. 1.58 and later) this macro also supports format args captures.\n```\nreturn Err(eyre!(\"Missing attribute: {missing}\"));\n```\n\n\n\n### \u00a7\u27e820\u27e9No-std support\nNo-std support was removed in 2020 in commit 608a16a\u27e821\u27e9 due to unaddressed upstream breakages.\n### \u00a7\u27e822\u27e9Comparison to failure\nThe `eyre::Report` type works something like `failure::Error`, but unlike failure ours is built around the standard library\u2019s `std::error::Error` trait rather than a separate trait `failure::Fail`. The standard library has adopted the necessary improvements for this to be possible as part of RFC 2504\u27e823\u27e9.\n### \u00a7\u27e824\u27e9Comparison to thiserror\nUse `eyre` if you don\u2019t think you\u2019ll do anything with an error other than report it. This is common in application code. Use `thiserror` if you think you need an error type that can be handled via match or reported. This is common in library crates where you don\u2019t know how your users will handle your errors.\n### \u00a7\u27e825\u27e9Compatibility with `anyhow`\nThis crate does its best to be usable as a drop in replacement of `anyhow` and vice-versa by re-exporting all of the renamed APIs with the names used in `anyhow`, though there are some differences still.\n##### \u00a7\u27e826\u27e9`Context` and `Option`\nAs part of renaming `Context` to `WrapErr` we also intentionally do not implement `WrapErr` for `Option`. This decision was made because `wrap_err` implies that you\u2019re creating a new error that saves the old error as its `source`. With `Option` there is no source error to wrap, so `wrap_err` ends up being somewhat meaningless.\nInstead `eyre` offers `OptionExt::ok_or_eyre`\u27e827\u27e9 to yield _static_ errors from `None`, and intends for users to use the combinator functions provided by `std`, converting `Option`s to `Result`s, for _dynamic_ errors. So where you would write this with anyhow:\n```\nuse anyhow::Context;\nlet opt: Option<()> = None;\nlet result_static = opt.context(\"static error message\");\nlet result_dynamic = opt.with_context(|| format!(\"{} error message\", \"dynamic\"));\n```\n\nWith `eyre` we want users to write:\n```\nuse eyre::{eyre, OptionExt, Result};\nlet opt: Option<()> = None;\nlet result_static: Result<()> = opt.ok_or_eyre(\"static error message\");\nlet result_dynamic: Result<()> = opt.ok_or_else(|| eyre!(\"{} error message\", \"dynamic\"));\n```\n\n**NOTE** : However, to help with porting we do provide a `ContextCompat` trait which implements `context` for options which you can import to make existing `.context` calls compile.\n  1. example and explanation of breakage <https://github.com/eyre-rs/eyre/issues/30#issuecomment-647650361> \u21a9\u27e828\u27e9\n\n\n## Re-exports\u00a7\u27e829\u27e9\n\n`pub use Report[](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\") as Error;`\n\n\n`pub use WrapErr[](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\") as Context;`\n\n## Macros\u00a7\u27e830\u27e9\n\nanyhow\u27e831\u27e9\n    Compatibility re-export of `eyre` for interop with `anyhow` Construct an ad-hoc error from a string.\n\nbail\u27e832\u27e9\n    Return early with an error.\n\nensure\u27e833\u27e9\n    Return early with an error if a condition is not satisfied.\n\neyre\u27e834\u27e9\n    Construct an ad-hoc error from a string.\n\nformat_err\u27e835\u27e9\n    Construct an ad-hoc error from a string.\n## Structs\u00a7\u27e836\u27e9\n\nChain\u27e837\u27e9\n    Iterator of a chain of source errors.\n\nDefaultHandler\u27e838\u27e9\n    The default provided error report handler for `eyre::Report`.\n\nInstallError\u27e839\u27e9\n    Error indicating that `set_hook` was unable to install the provided ErrorHook\n\nReport\u27e840\u27e9\n    The core error reporting type of the library, a wrapper around a dynamic error reporting type.\n## Traits\u00a7\u27e841\u27e9\n\nContextCompat\u27e842\u27e9\n    Provides the `context` method for `Option` when porting from `anyhow`\n\nEyreHandler\u27e843\u27e9\n    Error Report Handler trait for customizing `eyre::Report`\n\nOptionExt\u27e844\u27e9\n    Provides the `ok_or_eyre`\u27e827\u27e9 method for `Option`\u27e845\u27e9.\n\nWrapErr\u27e846\u27e9\n    Provides the `wrap_err` method for `Result`.\n## Functions\u00a7\u27e847\u27e9\n\nOk\u27e848\u27e9\n    Equivalent to Ok::<_, eyre::Error>(value).\n\nset_hook\u27e849\u27e9\n    Install the provided error hook for constructing EyreHandlers when converting Errors to Reports\n## Type Aliases\u00a7\u27e850\u27e9\n\nResult\u27e851\u27e9\n    type alias for `Result<T, Report>`\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/eyre/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/eyre/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/eyre/latest/src/eyre/lib.rs.html#1-1322: Source\n\u27e84\u27e9 https://docs.rs/eyre/*/eyre/struct.Report.html: `eyre::Report`\n\u27e85\u27e9 https://github.com/dtolnay/anyhow: `anyhow`\n\u27e86\u27e9 https://docs.rs/eyre/*/eyre/trait.EyreHandler.html: `eyre::EyreHandler`\n\u27e87\u27e9 https://docs.rs/eyre/latest/eyre/#custom-report-handlers: \u00a7\n\u27e88\u27e9 https://github.com/eyre-rs/stable-eyre: `stable-eyre`\n\u27e89\u27e9 https://github.com/eyre-rs/color-eyre: `color-eyre`\n\u27e810\u27e9 https://github.com/athre0z/color-backtrace: `color-backtrace`\n\u27e811\u27e9 https://github.com/eyre-rs/color-spantrace: `color-spantrace`\n\u27e812\u27e9 https://github.com/eyre-rs/simple-eyre: `simple-eyre`\n\u27e813\u27e9 https://github.com/yaahc/jane-eyre: `jane-eyre`\n\u27e814\u27e9 https://docs.rs/eyre/latest/eyre/#usage-recommendations-and-stability-considerations: \u00a7\n\u27e815\u27e9 https://docs.rs/eyre/latest/eyre/#fn1: 1\n\u27e816\u27e9 https://docs.rs/eyre/latest/eyre/#details: \u00a7\n\u27e817\u27e9 https://doc.rust-lang.org/std/backtrace/index.html#environment-variables: `std::backtrace`\n\u27e818\u27e9 https://github.com/rust-lang/rust/issues/53487: rust-lang/rust#53487\n\u27e819\u27e9 https://github.com/dtolnay/thiserror: thiserror\n\u27e820\u27e9 https://docs.rs/eyre/latest/eyre/#no-std-support: \u00a7\n\u27e821\u27e9 https://github.com/eyre-rs/eyre/pull/29/commits/608a16aa2c2c27eca6c88001cc94c6973c18f1d5: commit 608a16a\n\u27e822\u27e9 https://docs.rs/eyre/latest/eyre/#comparison-to-failure: \u00a7\n\u27e823\u27e9 https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md: RFC 2504\n\u27e824\u27e9 https://docs.rs/eyre/latest/eyre/#comparison-to-thiserror: \u00a7\n\u27e825\u27e9 https://docs.rs/eyre/latest/eyre/#compatibility-with-anyhow: \u00a7\n\u27e826\u27e9 https://docs.rs/eyre/latest/eyre/#context-and-option: \u00a7\n\u27e827\u27e9 https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre: method eyre::OptionExt::ok_or_eyre - `OptionExt::ok_or_eyre`\n\u27e828\u27e9 https://docs.rs/eyre/latest/eyre/#fnref1: \u21a9\n\u27e829\u27e9 https://docs.rs/eyre/latest/eyre/#reexports: \u00a7\n\u27e830\u27e9 https://docs.rs/eyre/latest/eyre/#macros: \u00a7\n\u27e831\u27e9 https://docs.rs/eyre/latest/eyre/macro.anyhow.html: macro eyre::anyhow - anyhow\n\u27e832\u27e9 https://docs.rs/eyre/latest/eyre/macro.bail.html: macro eyre::bail - bail\n\u27e833\u27e9 https://docs.rs/eyre/latest/eyre/macro.ensure.html: macro eyre::ensure - ensure\n\u27e834\u27e9 https://docs.rs/eyre/latest/eyre/macro.eyre.html: macro eyre::eyre - eyre\n\u27e835\u27e9 https://docs.rs/eyre/latest/eyre/macro.format_err.html: macro eyre::format_err - format_err\n\u27e836\u27e9 https://docs.rs/eyre/latest/eyre/#structs: \u00a7\n\u27e837\u27e9 https://docs.rs/eyre/latest/eyre/struct.Chain.html: struct eyre::Chain - Chain\n\u27e838\u27e9 https://docs.rs/eyre/latest/eyre/struct.DefaultHandler.html: struct eyre::DefaultHandler - DefaultHandler\n\u27e839\u27e9 https://docs.rs/eyre/latest/eyre/struct.InstallError.html: struct eyre::InstallError - InstallError\n\u27e840\u27e9 https://docs.rs/eyre/latest/eyre/struct.Report.html: struct eyre::Report - Report\n\u27e841\u27e9 https://docs.rs/eyre/latest/eyre/#traits: \u00a7\n\u27e842\u27e9 https://docs.rs/eyre/latest/eyre/trait.ContextCompat.html: trait eyre::ContextCompat - ContextCompat\n\u27e843\u27e9 https://docs.rs/eyre/latest/eyre/trait.EyreHandler.html: trait eyre::EyreHandler - EyreHandler\n\u27e844\u27e9 https://docs.rs/eyre/latest/eyre/trait.OptionExt.html: trait eyre::OptionExt - OptionExt\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option`\n\u27e846\u27e9 https://docs.rs/eyre/latest/eyre/trait.WrapErr.html: trait eyre::WrapErr - WrapErr\n\u27e847\u27e9 https://docs.rs/eyre/latest/eyre/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/eyre/latest/eyre/fn.Ok.html: fn eyre::Ok - Ok\n\u27e849\u27e9 https://docs.rs/eyre/latest/eyre/fn.set_hook.html: fn eyre::set_hook - set_hook\n\u27e850\u27e9 https://docs.rs/eyre/latest/eyre/#types: \u00a7\n\u27e851\u27e9 https://docs.rs/eyre/latest/eyre/type.Result.html: type eyre::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `eyre` crate provides `eyre::Report`, a dynamic error handling type for idiomatic error reporting in Rust applications. It supports customizable error report handlers, enabling tailored formatting and additional context, and offers features like error wrapping, downcasting, and backtrace support on nightly Rust. Designed as a fork of `anyhow`, it integrates seamlessly with companion crates like `color-eyre` for enhanced error visualization and is ideal for application-level error reporting.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1: Error Handling and Reporting  \n\u2705 Factual: The `eyre` crate provides `eyre::Report`, a trait object-based error handling type that supports idiomatic error propagation and reporting in Rust applications.  \n\u274c Counterfactual: The `eyre` crate requires all errors to implement a custom trait specific to `eyre` in order to be used with `eyre::Report`.  \n\n---\n\n### Pair 2: Backtrace Support  \n\u2705 Factual: On the nightly Rust channel, `eyre` captures and prints backtraces for errors if the underlying error type does not already provide its own backtrace.  \n\u274c Counterfactual: The `eyre` crate automatically captures backtraces on all Rust channels, including stable, without requiring any environment variable configuration.  \n\n---\n\n### Pair 3: Compatibility with `anyhow`  \n\u2705 Factual: The `eyre` crate is designed to be a drop-in replacement for `anyhow`, re-exporting renamed APIs to ensure compatibility.  \n\u274c Counterfactual: The `eyre` crate cannot be used as a replacement for `anyhow` because its APIs are fundamentally incompatible with `anyhow`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}