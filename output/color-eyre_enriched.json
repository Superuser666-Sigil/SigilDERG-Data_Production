{
    "name": "color-eyre",
    "version": "0.6.5",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/color-eyre/latest/color_eyre/all.html \"show sidebar\")\n# Crate color_eyreCopy item path\n[Settings](https://docs.rs/color-eyre/latest/settings.html)\n[Help](https://docs.rs/color-eyre/latest/help.html)\nSummary[Source](https://docs.rs/color-eyre/latest/src/color_eyre/lib.rs.html#1-460)\nExpand description\nAn error report handler for panics and the [`eyre`](https://docs.rs/eyre) crate for colorful, consistent, and well formatted error reports for all kinds of errors.\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#tldr)TLDR\n`color_eyre` helps you build error reports that look like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#setup)Setup\nAdd the following to your toml file:\n```\n[dependencies]\ncolor-eyre = \"0.6\"\n```\n\nAnd install the panic and error report handlers:\n```\nuse color_eyre::eyre::Result;\nfn main() -> Result<()> {\n  color_eyre::install()?;\n  // ...\n}\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#disabling-tracing-support)Disabling tracing support\nIf you don\u2019t plan on using `tracing_error` and `SpanTrace` you can disable the tracing integration to cut down on unused dependencies:\n```\n[dependencies]\ncolor-eyre = { version = \"0.6\", default-features = false }\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#disabling-spantrace-capture-by-default)Disabling SpanTrace capture by default\ncolor-eyre defaults to capturing span traces. This is because `SpanTrace` capture is significantly cheaper than `Backtrace` capture. However, like backtraces, span traces are most useful for debugging applications, and it\u2019s not uncommon to want to disable span trace capture by default to keep noise out developer.\nTo disable span trace capture you must explicitly set one of the env variables that regulate `SpanTrace` capture to `\"0\"`:\n```\nif std::env::var(\"RUST_SPANTRACE\").is_err() {\n  std::env::set_var(\"RUST_SPANTRACE\", \"0\");\n}\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#improving-perf-on-debug-builds)Improving perf on debug builds\nIn debug mode `color-eyre` behaves noticably worse than `eyre`. This is caused by the fact that `eyre` uses `std::backtrace::Backtrace` instead of `backtrace::Backtrace`. The std version of backtrace is precompiled with optimizations, this means that whether or not you\u2019re in debug mode doesn\u2019t matter much for how expensive backtrace capture is, it will always be in the 10s of milliseconds to capture. A debug version of `backtrace::Backtrace` however isn\u2019t so lucky, and can take an order of magnitude more time to capture a backtrace compared to its std counterpart.\nCargo [profile overrides](https://doc.rust-lang.org/cargo/reference/profiles.html#overrides) can be used to mitigate this problem. By configuring your project to always build `backtrace` with optimizations you should get the same performance from `color-eyre` that you\u2019re used to with `eyre`. To do so add the following to your Cargo.toml:\n```\n[profile.dev.package.backtrace]\nopt-level = 3\n```\n\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#features)Features\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#multiple-report-format-verbosity-levels)Multiple report format verbosity levels\n`color-eyre` provides 3 different report formats for how it formats the captured `SpanTrace` and `Backtrace`, minimal, short, and full. Take the below snippets of the output produced by [`examples/usage.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/usage.rs):\nRunning `cargo run --example usage` without `RUST_LIB_BACKTRACE` set will produce a minimal report like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:15:58.026  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\nSuggestion: try using a file that exists next time\n```\n\nRunning `RUST_LIB_BACKTRACE=1 cargo run --example usage` tells `color-eyre` to use the short format, which additionally capture a [`backtrace::Backtrace`](https://docs.rs/backtrace/*/backtrace/struct.Backtrace.html):\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=1 cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:02.853  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\nFinally, running `RUST_LIB_BACKTRACE=full cargo run --example usage` tells `color-eyre` to use the full format, which in addition to the above will attempt to include source lines where the error originated from, assuming it can find them on the disk.\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=full cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.05s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:06.335  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n    30 \u2502 }\n    31 \u2502\n **   32 > #[instrument]**\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n  1: usage::read_config\n   at examples/usage.rs:38\n    36 \u2502 }\n    37 \u2502\n **   38 > #[instrument]**\n    39 \u2502 fn read_config() -> Result<(), Report> {\n    40 \u2502   read_file(\"fake_file\")\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n **   35 >   Ok(std::fs::read_to_string(path).map(drop)?)**\n    36 \u2502 }\n    37 \u2502\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n    38 \u2502 #[instrument]\n    39 \u2502 fn read_config() -> Result<(), Report> {\n **   40 >   read_file(\"fake_file\")**\n    41 \u2502     .wrap_err(\"Unable to read config\")\n    42 \u2502     .suggestion(\"try using a file that exists next time\")\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n     9 \u2502   color_eyre::install()?;\n    10 \u2502\n **   11 >   Ok(read_config()?)**\n    12 \u2502 }\n    13 \u2502\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#custom-sections-for-error-reports-via-section-trait)Custom `Section`s for error reports via [`Section`](https://docs.rs/color-eyre/*/color_eyre/trait.Section.html) trait\nThe `section` module provides helpers for adding extra sections to error reports. Sections are disinct from error messages and are displayed independently from the chain of errors. Take this example of adding sections to contain `stderr` and `stdout` from a failed command, taken from [`examples/custom_section.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/custom_section.rs):\n```\nuse color_eyre::{eyre::eyre, SectionExt, Section, eyre::Report};\nuse std::process::Command;\nuse tracing::instrument;\ntrait Output {\n  fn output2(&mut self) -> Result<String, Report>;\n}\nimpl Output for Command {\n  #[instrument]\n  fn output2(&mut self) -> Result<String, Report> {\n    let output = self.output()?;\n    let stdout = String::from_utf8_lossy(&output.stdout);\n    if !output.status.success() {\n      let stderr = String::from_utf8_lossy(&output.stderr);\n      Err(eyre!(\"cmd exited with non-zero status code\"))\n        .with_section(move || stdout.trim().to_string().header(\"Stdout:\"))\n        .with_section(move || stderr.trim().to_string().header(\"Stderr:\"))\n    } else {\n      Ok(stdout.into())\n    }\n  }\n}\n```\n\nHere we have an function that, if the command exits unsuccessfully, creates a report indicating the failure and attaches two sections, one for `stdout` and one for `stderr`.\nRunning `cargo run --example custom_section` shows us how these sections are included in the output:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\nOnly the `Stderr:` section actually gets included. The `cat` command fails, so stdout ends up being empty and is skipped in the final report. This gives us a short and concise error report indicating exactly what was attempted and how it failed.\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#aggregating-multiple-errors-into-one-report)Aggregating multiple errors into one report\nIt\u2019s not uncommon for programs like batched task runners or parsers to want to return an error with multiple sources. The current version of the error trait does not support this use case very well, though there is [work being done](https://github.com/rust-lang/rfcs/pull/2895) to improve this.\nFor now however one way to work around this is to compose errors outside the error trait. `color-eyre` supports such composition in its error reports via the `Section` trait.\nFor an example of how to aggregate errors check out [`examples/multiple_errors.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/multiple_errors.rs).\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#custom-configuration-for-color-backtrace-for-setting-custom-filters-and-more)Custom configuration for `color-backtrace` for setting custom filters and more\nThe pretty printing for backtraces and span traces isn\u2019t actually provided by `color-eyre`, but instead comes from its dependencies [`color-backtrace`](https://docs.rs/color-backtrace) and [`color-spantrace`](https://github.com/yaahc/color-spantrace). `color-backtrace` in particular has many more features than are exported by `color-eyre`, such as customized color schemes, panic hooks, and custom frame filters. The custom frame filters are particularly useful when combined with `color-eyre`, so to enable their usage we provide the `install` fn for setting up a custom `BacktracePrinter` with custom filters installed.\nFor an example of how to setup custom filters, check out [`examples/custom_filter.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/custom_filter.rs).\n## Re-exports[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#reexports)\n\n`pub use section::IndentedSection[](https://docs.rs/color-eyre/latest/color_eyre/section/struct.IndentedSection.html \"struct color_eyre::section::IndentedSection\");`\n\n\n`pub use section::Section[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.Section.html \"trait color_eyre::section::Section\");`\n\n\n`pub use section::SectionExt[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.SectionExt.html \"trait color_eyre::section::SectionExt\");`\n\n\n`pub use eyre[](https://docs.rs/eyre/0.6.12/x86_64-unknown-linux-gnu/eyre/index.html \"mod eyre\");`\n\n\n`pub use owo_colors[](https://docs.rs/owo-colors/4.2.1/x86_64-unknown-linux-gnu/owo_colors/index.html \"mod owo_colors\");`\n\n## Modules[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#modules)\n\n[config](https://docs.rs/color-eyre/latest/color_eyre/config/index.html \"mod color_eyre::config\")\n    Configuration options for customizing the behavior of the provided panic and error reporting hooks\n\n[section](https://docs.rs/color-eyre/latest/color_eyre/section/index.html \"mod color_eyre::section\")\n    Helpers for adding custom sections to error reports\n## Structs[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#structs)\n\n[Handler](https://docs.rs/color-eyre/latest/color_eyre/struct.Handler.html \"struct color_eyre::Handler\")\n    A custom handler type for [`eyre::Report`](https://docs.rs/eyre/*/eyre/struct.Report.html) which provides colorful error reports and [`tracing-error`](https://docs.rs/tracing-error) support.\n## Enums[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#enums)\n\n[ErrorKind](https://docs.rs/color-eyre/latest/color_eyre/enum.ErrorKind.html \"enum color_eyre::ErrorKind\")`issue-url`\n    The kind of type erased error being reported\n## Functions[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#functions)\n\n[install](https://docs.rs/color-eyre/latest/color_eyre/fn.install.html \"fn color_eyre::install\")\n    Install the default panic and error report hooks\n",
        "markdown_with_citations": "[](https://docs.rs/color-eyre/latest/color_eyre/all.html \"show sidebar\")\n# Crate color_eyreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn error report handler for panics and the `eyre`\u27e84\u27e9 crate for colorful, consistent, and well formatted error reports for all kinds of errors.\n### \u00a7\u27e85\u27e9TLDR\n`color_eyre` helps you build error reports that look like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\n### \u00a7\u27e86\u27e9Setup\nAdd the following to your toml file:\n```\n[dependencies]\ncolor-eyre = \"0.6\"\n```\n\nAnd install the panic and error report handlers:\n```\nuse color_eyre::eyre::Result;\nfn main() -> Result<()> {\n  color_eyre::install()?;\n  // ...\n}\n```\n\n#### \u00a7\u27e87\u27e9Disabling tracing support\nIf you don\u2019t plan on using `tracing_error` and `SpanTrace` you can disable the tracing integration to cut down on unused dependencies:\n```\n[dependencies]\ncolor-eyre = { version = \"0.6\", default-features = false }\n```\n\n#### \u00a7\u27e88\u27e9Disabling SpanTrace capture by default\ncolor-eyre defaults to capturing span traces. This is because `SpanTrace` capture is significantly cheaper than `Backtrace` capture. However, like backtraces, span traces are most useful for debugging applications, and it\u2019s not uncommon to want to disable span trace capture by default to keep noise out developer.\nTo disable span trace capture you must explicitly set one of the env variables that regulate `SpanTrace` capture to `\"0\"`:\n```\nif std::env::var(\"RUST_SPANTRACE\").is_err() {\n  std::env::set_var(\"RUST_SPANTRACE\", \"0\");\n}\n```\n\n#### \u00a7\u27e89\u27e9Improving perf on debug builds\nIn debug mode `color-eyre` behaves noticably worse than `eyre`. This is caused by the fact that `eyre` uses `std::backtrace::Backtrace` instead of `backtrace::Backtrace`. The std version of backtrace is precompiled with optimizations, this means that whether or not you\u2019re in debug mode doesn\u2019t matter much for how expensive backtrace capture is, it will always be in the 10s of milliseconds to capture. A debug version of `backtrace::Backtrace` however isn\u2019t so lucky, and can take an order of magnitude more time to capture a backtrace compared to its std counterpart.\nCargo profile overrides\u27e810\u27e9 can be used to mitigate this problem. By configuring your project to always build `backtrace` with optimizations you should get the same performance from `color-eyre` that you\u2019re used to with `eyre`. To do so add the following to your Cargo.toml:\n```\n[profile.dev.package.backtrace]\nopt-level = 3\n```\n\n### \u00a7\u27e811\u27e9Features\n#### \u00a7\u27e812\u27e9Multiple report format verbosity levels\n`color-eyre` provides 3 different report formats for how it formats the captured `SpanTrace` and `Backtrace`, minimal, short, and full. Take the below snippets of the output produced by `examples/usage.rs`\u27e813\u27e9:\nRunning `cargo run --example usage` without `RUST_LIB_BACKTRACE` set will produce a minimal report like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:15:58.026  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\nSuggestion: try using a file that exists next time\n```\n\nRunning `RUST_LIB_BACKTRACE=1 cargo run --example usage` tells `color-eyre` to use the short format, which additionally capture a `backtrace::Backtrace`\u27e814\u27e9:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=1 cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:02.853  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\nFinally, running `RUST_LIB_BACKTRACE=full cargo run --example usage` tells `color-eyre` to use the full format, which in addition to the above will attempt to include source lines where the error originated from, assuming it can find them on the disk.\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=full cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.05s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:06.335  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n    30 \u2502 }\n    31 \u2502\n **   32 > #[instrument]**\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n  1: usage::read_config\n   at examples/usage.rs:38\n    36 \u2502 }\n    37 \u2502\n **   38 > #[instrument]**\n    39 \u2502 fn read_config() -> Result<(), Report> {\n    40 \u2502   read_file(\"fake_file\")\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n **   35 >   Ok(std::fs::read_to_string(path).map(drop)?)**\n    36 \u2502 }\n    37 \u2502\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n    38 \u2502 #[instrument]\n    39 \u2502 fn read_config() -> Result<(), Report> {\n **   40 >   read_file(\"fake_file\")**\n    41 \u2502     .wrap_err(\"Unable to read config\")\n    42 \u2502     .suggestion(\"try using a file that exists next time\")\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n     9 \u2502   color_eyre::install()?;\n    10 \u2502\n **   11 >   Ok(read_config()?)**\n    12 \u2502 }\n    13 \u2502\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\n#### \u00a7\u27e815\u27e9Custom `Section`s for error reports via `Section`\u27e816\u27e9 trait\nThe `section` module provides helpers for adding extra sections to error reports. Sections are disinct from error messages and are displayed independently from the chain of errors. Take this example of adding sections to contain `stderr` and `stdout` from a failed command, taken from `examples/custom_section.rs`\u27e817\u27e9:\n```\nuse color_eyre::{eyre::eyre, SectionExt, Section, eyre::Report};\nuse std::process::Command;\nuse tracing::instrument;\ntrait Output {\n  fn output2(&mut self) -> Result<String, Report>;\n}\nimpl Output for Command {\n  #[instrument]\n  fn output2(&mut self) -> Result<String, Report> {\n    let output = self.output()?;\n    let stdout = String::from_utf8_lossy(&output.stdout);\n    if !output.status.success() {\n      let stderr = String::from_utf8_lossy(&output.stderr);\n      Err(eyre!(\"cmd exited with non-zero status code\"))\n        .with_section(move || stdout.trim().to_string().header(\"Stdout:\"))\n        .with_section(move || stderr.trim().to_string().header(\"Stderr:\"))\n    } else {\n      Ok(stdout.into())\n    }\n  }\n}\n```\n\nHere we have an function that, if the command exits unsuccessfully, creates a report indicating the failure and attaches two sections, one for `stdout` and one for `stderr`.\nRunning `cargo run --example custom_section` shows us how these sections are included in the output:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\nOnly the `Stderr:` section actually gets included. The `cat` command fails, so stdout ends up being empty and is skipped in the final report. This gives us a short and concise error report indicating exactly what was attempted and how it failed.\n#### \u00a7\u27e818\u27e9Aggregating multiple errors into one report\nIt\u2019s not uncommon for programs like batched task runners or parsers to want to return an error with multiple sources. The current version of the error trait does not support this use case very well, though there is work being done\u27e819\u27e9 to improve this.\nFor now however one way to work around this is to compose errors outside the error trait. `color-eyre` supports such composition in its error reports via the `Section` trait.\nFor an example of how to aggregate errors check out `examples/multiple_errors.rs`\u27e820\u27e9.\n#### \u00a7\u27e821\u27e9Custom configuration for `color-backtrace` for setting custom filters and more\nThe pretty printing for backtraces and span traces isn\u2019t actually provided by `color-eyre`, but instead comes from its dependencies `color-backtrace`\u27e822\u27e9 and `color-spantrace`\u27e823\u27e9. `color-backtrace` in particular has many more features than are exported by `color-eyre`, such as customized color schemes, panic hooks, and custom frame filters. The custom frame filters are particularly useful when combined with `color-eyre`, so to enable their usage we provide the `install` fn for setting up a custom `BacktracePrinter` with custom filters installed.\nFor an example of how to setup custom filters, check out `examples/custom_filter.rs`\u27e824\u27e9.\n## Re-exports\u00a7\u27e825\u27e9\n\n`pub use section::IndentedSection[](https://docs.rs/color-eyre/latest/color_eyre/section/struct.IndentedSection.html \"struct color_eyre::section::IndentedSection\");`\n\n\n`pub use section::Section[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.Section.html \"trait color_eyre::section::Section\");`\n\n\n`pub use section::SectionExt[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.SectionExt.html \"trait color_eyre::section::SectionExt\");`\n\n\n`pub use eyre[](https://docs.rs/eyre/0.6.12/x86_64-unknown-linux-gnu/eyre/index.html \"mod eyre\");`\n\n\n`pub use owo_colors[](https://docs.rs/owo-colors/4.2.1/x86_64-unknown-linux-gnu/owo_colors/index.html \"mod owo_colors\");`\n\n## Modules\u00a7\u27e826\u27e9\n\nconfig\u27e827\u27e9\n    Configuration options for customizing the behavior of the provided panic and error reporting hooks\n\nsection\u27e828\u27e9\n    Helpers for adding custom sections to error reports\n## Structs\u00a7\u27e829\u27e9\n\nHandler\u27e830\u27e9\n    A custom handler type for `eyre::Report`\u27e831\u27e9 which provides colorful error reports and `tracing-error`\u27e832\u27e9 support.\n## Enums\u00a7\u27e833\u27e9\n\nErrorKind\u27e834\u27e9`issue-url`\n    The kind of type erased error being reported\n## Functions\u00a7\u27e835\u27e9\n\ninstall\u27e836\u27e9\n    Install the default panic and error report hooks\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/color-eyre/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/color-eyre/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/color-eyre/latest/src/color_eyre/lib.rs.html#1-460: Source\n\u27e84\u27e9 https://docs.rs/eyre: `eyre`\n\u27e85\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#tldr: \u00a7\n\u27e86\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#setup: \u00a7\n\u27e87\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#disabling-tracing-support: \u00a7\n\u27e88\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#disabling-spantrace-capture-by-default: \u00a7\n\u27e89\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#improving-perf-on-debug-builds: \u00a7\n\u27e810\u27e9 https://doc.rust-lang.org/cargo/reference/profiles.html#overrides: profile overrides\n\u27e811\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#features: \u00a7\n\u27e812\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#multiple-report-format-verbosity-levels: \u00a7\n\u27e813\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/usage.rs: `examples/usage.rs`\n\u27e814\u27e9 https://docs.rs/backtrace/*/backtrace/struct.Backtrace.html: `backtrace::Backtrace`\n\u27e815\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#custom-sections-for-error-reports-via-section-trait: \u00a7\n\u27e816\u27e9 https://docs.rs/color-eyre/*/color_eyre/trait.Section.html: `Section`\n\u27e817\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/custom_section.rs: `examples/custom_section.rs`\n\u27e818\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#aggregating-multiple-errors-into-one-report: \u00a7\n\u27e819\u27e9 https://github.com/rust-lang/rfcs/pull/2895: work being done\n\u27e820\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/multiple_errors.rs: `examples/multiple_errors.rs`\n\u27e821\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#custom-configuration-for-color-backtrace-for-setting-custom-filters-and-more: \u00a7\n\u27e822\u27e9 https://docs.rs/color-backtrace: `color-backtrace`\n\u27e823\u27e9 https://github.com/yaahc/color-spantrace: `color-spantrace`\n\u27e824\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/custom_filter.rs: `examples/custom_filter.rs`\n\u27e825\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#reexports: \u00a7\n\u27e826\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#modules: \u00a7\n\u27e827\u27e9 https://docs.rs/color-eyre/latest/color_eyre/config/index.html: mod color_eyre::config - config\n\u27e828\u27e9 https://docs.rs/color-eyre/latest/color_eyre/section/index.html: mod color_eyre::section - section\n\u27e829\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/color-eyre/latest/color_eyre/struct.Handler.html: struct color_eyre::Handler - Handler\n\u27e831\u27e9 https://docs.rs/eyre/*/eyre/struct.Report.html: `eyre::Report`\n\u27e832\u27e9 https://docs.rs/tracing-error: `tracing-error`\n\u27e833\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#enums: \u00a7\n\u27e834\u27e9 https://docs.rs/color-eyre/latest/color_eyre/enum.ErrorKind.html: enum color_eyre::ErrorKind - ErrorKind\n\u27e835\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#functions: \u00a7\n\u27e836\u27e9 https://docs.rs/color-eyre/latest/color_eyre/fn.install.html: fn color_eyre::install - install\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `color-eyre` crate enhances error reporting in Rust by providing colorful, consistent, and well-formatted error messages for both panics and the `eyre` crate. Key features include customizable verbosity levels for error reports (minimal, short, and full), support for adding custom sections to reports, aggregation of multiple errors, and integration with `tracing-error` for span traces. It also offers configuration options for performance optimization and custom backtrace formatting via `color-backtrace`.",
    "feature_summary": null,
    "use_case": "DevTools",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Error Reporting Features  \n\u2705 **Factual:** The `color-eyre` crate provides colorful, consistent, and well-formatted error reports, including support for custom sections via the `Section` trait to display additional context such as `stderr` and `stdout`.  \n\u274c **Counterfactual:** The `color-eyre` crate only supports plain-text error reporting and does not allow customization of error sections or formatting.  \n\n---\n\n### Pair 2: Performance Optimization  \n\u2705 **Factual:** `color-eyre` can improve performance in debug builds by configuring `backtrace` to always build with optimizations using Cargo profile overrides (`opt-level = 3`).  \n\u274c **Counterfactual:** `color-eyre` automatically optimizes `backtrace` performance in debug builds without requiring any manual configuration or Cargo profile overrides.  \n\n---\n\n### Pair 3: Tracing Integration  \n\u2705 **Factual:** `color-eyre` supports integration with `tracing_error` and `SpanTrace`, but these features can be disabled to reduce dependency overhead by setting `default-features = false` in the `Cargo.toml`.  \n\u274c **Counterfactual:** Disabling tracing support in `color-eyre` completely removes the ability to capture backtraces, making the crate unusable for debugging purposes.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}