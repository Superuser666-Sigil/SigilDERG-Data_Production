{
    "name": "snafu",
    "version": "0.8.6",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/snafu/latest/snafu/all.html \"show sidebar\")\n# Crate snafuCopy item path\n[Settings](https://docs.rs/snafu/latest/settings.html)\n[Help](https://docs.rs/snafu/latest/help.html)\nSummary[Source](https://docs.rs/snafu/latest/src/snafu/lib.rs.html#1-1680)\nExpand description\n## [\u00a7](https://docs.rs/snafu/latest/snafu/#snafu)SNAFU\nSNAFU is a library to easily generate errors and add information to underlying errors, especially when the same underlying error type can occur in different contexts.\nFor detailed information, please see the [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\") macro and the [user\u2019s guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\").\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#features)Features\n  * [Turnkey errors based on strings](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\")\n  * [Custom error types](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")\n    * Including a conversion path from turnkey errors\n  * [Backtraces](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\")\n  * Extension traits for \n    * [`Results`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html \"trait snafu::ResultExt\")\n    * [`Options`](https://docs.rs/snafu/latest/snafu/trait.OptionExt.html \"trait snafu::OptionExt\")\n    * [`Futures`](https://docs.rs/snafu/latest/snafu/futures/trait.TryFutureExt.html \"trait snafu::futures::TryFutureExt\")\n    * [`Streams`](https://docs.rs/snafu/latest/snafu/futures/trait.TryStreamExt.html \"trait snafu::futures::TryStreamExt\")\n  * [Error reporting](https://docs.rs/snafu/latest/snafu/#reporting)\n  * Suitable for libraries and applications\n  * `no_std` compatibility\n  * Generic types and lifetimes\n\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#quick-start)Quick start\nIf you want to report errors without hassle, start with the [`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") type and the [`whatever!`](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\") macro:\n```\nuse snafu::{prelude::*, Whatever};\nfn is_valid_id(id: u16) -> Result<(), Whatever> {\n  if id < 10 {\n    whatever!(\"ID may not be less than 10, but it was {id}\");\n  }\n  Ok(())\n}\n```\n\nYou can also use it to wrap any other error:\n```\nuse snafu::{prelude::*, Whatever};\nfn read_config_file(path: &str) -> Result<String, Whatever> {\n  std::fs::read_to_string(path)\n    .with_whatever_context(|_| format!(\"Could not read file {path}\"))\n}\n```\n\n[`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") allows for a short message and tracks a [`Backtrace`](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\") for every error:\n```\nuse snafu::{prelude::*, ErrorCompat, Whatever};\nif let Err(e) = returns_an_error() {\n  eprintln!(\"An error occurred: {e}\");\n  if let Some(bt) = ErrorCompat::backtrace(&e) {\n    eprintln!(\"{bt}\");\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#custom-error-types)Custom error types\nMany projects will hit limitations of the `Whatever` type. When that occurs, it\u2019s time to create your own error type by deriving [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")!\n#### [\u00a7](https://docs.rs/snafu/latest/snafu/#struct-style)Struct style\nSNAFU will read your error struct definition and create a _context selector_ type (called `InvalidIdSnafu` in this example). These context selectors are used with the [`ensure!`](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\") macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\nstruct InvalidIdError {\n  id: u16,\n}\nfn is_valid_id(id: u16) -> Result<(), InvalidIdError> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to your error, you can then wrap an underlying error using the [`context`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context \"method snafu::ResultExt::context\") extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not read file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\n#### [\u00a7](https://docs.rs/snafu/latest/snafu/#enum-style)Enum style\nWhile error structs are good for constrained cases, they don\u2019t allow for reporting multiple possible kinds of errors at one time. Error enums solve that problem.\nSNAFU will read your error enum definition and create a _context selector_ type for each variant (called `InvalidIdSnafu` in this example). These context selectors are used with the [`ensure!`](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\") macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to a variant, you can then wrap an underlying error using the [`context`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context \"method snafu::ResultExt::context\") extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"Could not read file {path}\"))]\n  ConfigFile {\n    source: std::io::Error,\n    path: String,\n  },\n}\nfn read_config_file(path: &str) -> Result<String, Error> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\nYou can combine the power of the [`whatever!`](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\") macro with an enum error type. This is great if you started out with [`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") and are moving to a custom error type:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n  #[snafu(whatever, display(\"{message}\"))]\n  Whatever {\n    message: String,\n    #[snafu(source(from(Box<dyn std::error::Error>, Some)))]\n    source: Option<Box<dyn std::error::Error>>,\n  },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  whatever!(\"Just kidding... this function always fails!\");\n  Ok(())\n}\n```\n\nYou may wish to make the type `Send` and/or `Sync`, allowing your error type to be used in multithreaded programs, by changing `dyn std::error::Error` to `dyn std::error::Error + Send + Sync`.\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#reporting)Reporting\nPrinting an error via [`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") will only show the top-level error message without the underlying sources. For an extended error report, SNAFU offers a user-friendly error output mechanism. It prints the main error and all underlying errors in the chain, from the most recent to the oldest, plus the [backtrace](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\") if applicable. This is done by using the [`report`](https://docs.rs/snafu/latest/snafu/attr.report.html \"attr snafu::report\") procedural macro or the [`Report`](https://docs.rs/snafu/latest/snafu/struct.Report.html \"struct snafu::Report\") type directly.\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not load configuration file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n#[snafu::report]\nfn main() -> Result<(), ConfigFileError> {\n  read_config_file(\"bad-config.ini\")?;\n  Ok(())\n}\n```\n\nThis will print:\n```\nError: Could not load configuration file bad-config.ini\nCaused by this error:\n1: No such file or directory (os error 2)\n```\n\nWhich shows the underlying errors, unlike [`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\"):\n```\nError: Could not load configuration file bad-config.ini\n```\n\n\u2026 and is also more readable than the [`Debug`](https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html \"trait core::fmt::Debug\") output:\n```\nError: ConfigFileError { source: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }, path: \"bad-config.ini\" }\n```\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#next-steps)Next steps\nRead the documentation for the [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\") macro to see all of the capabilities, then read the [user\u2019s guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\") for deeper understanding.\n## Modules[\u00a7](https://docs.rs/snafu/latest/snafu/#modules)\n\n[futures](https://docs.rs/snafu/latest/snafu/futures/index.html \"mod snafu::futures\")`futures`\n    Additions to the [`TryFuture`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/future/trait.TryFuture.html \"trait futures_core::future::TryFuture\") and [`TryStream`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.TryStream.html \"trait futures_core::stream::TryStream\") traits.\n\n[guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\")`guide`\n    SNAFU user\u2019s guide\n\n[prelude](https://docs.rs/snafu/latest/snafu/prelude/index.html \"mod snafu::prelude\")\n    Traits and macros used by most projects. Add `use snafu::prelude::*` to your code to quickly get started with SNAFU.\n## Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#macros)\n\n[ensure](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\")\n    Ensure a condition is true. If it is not, return from the function with an error.\n\n[ensure_whatever](https://docs.rs/snafu/latest/snafu/macro.ensure_whatever.html \"macro snafu::ensure_whatever\")`alloc`\n    Ensure a condition is true. If it is not, return a stringly-typed error message.\n\n[location](https://docs.rs/snafu/latest/snafu/macro.location.html \"macro snafu::location\")\n    Constructs a [`Location`](https://docs.rs/snafu/latest/snafu/struct.Location.html \"struct snafu::Location\") using the current file, line, and column.\n\n[whatever](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\")`alloc`\n    Instantiate and return a stringly-typed error message.\n## Structs[\u00a7](https://docs.rs/snafu/latest/snafu/#structs)\n\n[Backtrace](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\")\n    A captured OS thread stack backtrace.\n\n[ChainCompat](https://docs.rs/snafu/latest/snafu/struct.ChainCompat.html \"struct snafu::ChainCompat\")\n    An iterator over an Error and its sources.\n\n[CleanedErrorText](https://docs.rs/snafu/latest/snafu/struct.CleanedErrorText.html \"struct snafu::CleanedErrorText\")`alloc`\n    An iterator over an Error and its sources that removes duplicated text from the error display strings.\n\n[Location](https://docs.rs/snafu/latest/snafu/struct.Location.html \"struct snafu::Location\")\n    The source code location where the error was reported.\n\n[NoneError](https://docs.rs/snafu/latest/snafu/struct.NoneError.html \"struct snafu::NoneError\")\n    A temporary error type used when converting an [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\") into a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\")\n\n[Report](https://docs.rs/snafu/latest/snafu/struct.Report.html \"struct snafu::Report\")\n    Opinionated solution to format an error in a user-friendly way. Useful as the return type from `main` and test functions.\n\n[Whatever](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\")`alloc`\n    A basic error type that you can use as a first step to better error handling.\n## Traits[\u00a7](https://docs.rs/snafu/latest/snafu/#traits)\n\n[AsBacktrace](https://docs.rs/snafu/latest/snafu/trait.AsBacktrace.html \"trait snafu::AsBacktrace\")\n    View a backtrace-like value as an optional backtrace.\n\n[AsErrorSource](https://docs.rs/snafu/latest/snafu/trait.AsErrorSource.html \"trait snafu::AsErrorSource\")\n    Converts the receiver into an [`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") trait object, suitable for use in [`Error::source`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source \"method core::error::Error::source\").\n\n[ErrorCompat](https://docs.rs/snafu/latest/snafu/trait.ErrorCompat.html \"trait snafu::ErrorCompat\")\n    Backports changes to the [`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") trait to versions of Rust lacking them.\n\n[FromString](https://docs.rs/snafu/latest/snafu/trait.FromString.html \"trait snafu::FromString\")`alloc`\n    Takes a string message and builds the corresponding error.\n\n[GenerateImplicitData](https://docs.rs/snafu/latest/snafu/trait.GenerateImplicitData.html \"trait snafu::GenerateImplicitData\")\n    Construct data to be included as part of an error. The data must require no arguments to be created.\n\n[IntoError](https://docs.rs/snafu/latest/snafu/trait.IntoError.html \"trait snafu::IntoError\")\n    Combines an underlying error with additional information about the error.\n\n[OptionExt](https://docs.rs/snafu/latest/snafu/trait.OptionExt.html \"trait snafu::OptionExt\")\n    Additions to [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\n\n[ResultExt](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html \"trait snafu::ResultExt\")\n    Additions to [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\").\n## Attribute Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#attributes)\n\n[report](https://docs.rs/snafu/latest/snafu/attr.report.html \"attr snafu::report\")\n    Adapts a function to provide user-friendly error output for `main` functions and tests.\n## Derive Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#derives)\n\n[Snafu](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")\n    The `Snafu` macro is the entrypoint to defining your own error types. It is designed to require little configuration for the recommended and typical usecases while still offering flexibility for unique situations.\n",
        "markdown_with_citations": "[](https://docs.rs/snafu/latest/snafu/all.html \"show sidebar\")\n# Crate snafuCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9SNAFU\nSNAFU is a library to easily generate errors and add information to underlying errors, especially when the same underlying error type can occur in different contexts.\nFor detailed information, please see the `Snafu`\u27e85\u27e9 macro and the user\u2019s guide\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Features\n  * Turnkey errors based on strings\u27e88\u27e9\n  * Custom error types\u27e85\u27e9\n    * Including a conversion path from turnkey errors\n  * Backtraces\u27e89\u27e9\n  * Extension traits for \n    * `Results`\u27e810\u27e9\n    * `Options`\u27e811\u27e9\n    * `Futures`\u27e812\u27e9\n    * `Streams`\u27e813\u27e9\n  * Error reporting\u27e814\u27e9\n  * Suitable for libraries and applications\n  * `no_std` compatibility\n  * Generic types and lifetimes\n\n\n### \u00a7\u27e815\u27e9Quick start\nIf you want to report errors without hassle, start with the `Whatever`\u27e88\u27e9 type and the `whatever!`\u27e816\u27e9 macro:\n```\nuse snafu::{prelude::*, Whatever};\nfn is_valid_id(id: u16) -> Result<(), Whatever> {\n  if id < 10 {\n    whatever!(\"ID may not be less than 10, but it was {id}\");\n  }\n  Ok(())\n}\n```\n\nYou can also use it to wrap any other error:\n```\nuse snafu::{prelude::*, Whatever};\nfn read_config_file(path: &str) -> Result<String, Whatever> {\n  std::fs::read_to_string(path)\n    .with_whatever_context(|_| format!(\"Could not read file {path}\"))\n}\n```\n\n`Whatever`\u27e88\u27e9 allows for a short message and tracks a `Backtrace`\u27e89\u27e9 for every error:\n```\nuse snafu::{prelude::*, ErrorCompat, Whatever};\nif let Err(e) = returns_an_error() {\n  eprintln!(\"An error occurred: {e}\");\n  if let Some(bt) = ErrorCompat::backtrace(&e) {\n    eprintln!(\"{bt}\");\n  }\n}\n```\n\n### \u00a7\u27e817\u27e9Custom error types\nMany projects will hit limitations of the `Whatever` type. When that occurs, it\u2019s time to create your own error type by deriving `Snafu`\u27e85\u27e9!\n#### \u00a7\u27e818\u27e9Struct style\nSNAFU will read your error struct definition and create a _context selector_ type (called `InvalidIdSnafu` in this example). These context selectors are used with the `ensure!`\u27e819\u27e9 macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\nstruct InvalidIdError {\n  id: u16,\n}\nfn is_valid_id(id: u16) -> Result<(), InvalidIdError> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to your error, you can then wrap an underlying error using the `context`\u27e820\u27e9 extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not read file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\n#### \u00a7\u27e821\u27e9Enum style\nWhile error structs are good for constrained cases, they don\u2019t allow for reporting multiple possible kinds of errors at one time. Error enums solve that problem.\nSNAFU will read your error enum definition and create a _context selector_ type for each variant (called `InvalidIdSnafu` in this example). These context selectors are used with the `ensure!`\u27e819\u27e9 macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to a variant, you can then wrap an underlying error using the `context`\u27e820\u27e9 extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"Could not read file {path}\"))]\n  ConfigFile {\n    source: std::io::Error,\n    path: String,\n  },\n}\nfn read_config_file(path: &str) -> Result<String, Error> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\nYou can combine the power of the `whatever!`\u27e816\u27e9 macro with an enum error type. This is great if you started out with `Whatever`\u27e88\u27e9 and are moving to a custom error type:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n  #[snafu(whatever, display(\"{message}\"))]\n  Whatever {\n    message: String,\n    #[snafu(source(from(Box<dyn std::error::Error>, Some)))]\n    source: Option<Box<dyn std::error::Error>>,\n  },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  whatever!(\"Just kidding... this function always fails!\");\n  Ok(())\n}\n```\n\nYou may wish to make the type `Send` and/or `Sync`, allowing your error type to be used in multithreaded programs, by changing `dyn std::error::Error` to `dyn std::error::Error + Send + Sync`.\n### \u00a7\u27e814\u27e9Reporting\nPrinting an error via `Display`\u27e822\u27e9 will only show the top-level error message without the underlying sources. For an extended error report, SNAFU offers a user-friendly error output mechanism. It prints the main error and all underlying errors in the chain, from the most recent to the oldest, plus the backtrace\u27e89\u27e9 if applicable. This is done by using the `report`\u27e823\u27e9 procedural macro or the `Report`\u27e824\u27e9 type directly.\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not load configuration file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n#[snafu::report]\nfn main() -> Result<(), ConfigFileError> {\n  read_config_file(\"bad-config.ini\")?;\n  Ok(())\n}\n```\n\nThis will print:\n```\nError: Could not load configuration file bad-config.ini\nCaused by this error:\n1: No such file or directory (os error 2)\n```\n\nWhich shows the underlying errors, unlike `Display`\u27e822\u27e9:\n```\nError: Could not load configuration file bad-config.ini\n```\n\n\u2026 and is also more readable than the `Debug`\u27e825\u27e9 output:\n```\nError: ConfigFileError { source: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }, path: \"bad-config.ini\" }\n```\n\n### \u00a7\u27e826\u27e9Next steps\nRead the documentation for the `Snafu`\u27e85\u27e9 macro to see all of the capabilities, then read the user\u2019s guide\u27e86\u27e9 for deeper understanding.\n## Modules\u00a7\u27e827\u27e9\n\nfutures\u27e828\u27e9`futures`\n    Additions to the `TryFuture`\u27e829\u27e9 and `TryStream`\u27e830\u27e9 traits.\n\nguide\u27e86\u27e9`guide`\n    SNAFU user\u2019s guide\n\nprelude\u27e831\u27e9\n    Traits and macros used by most projects. Add `use snafu::prelude::*` to your code to quickly get started with SNAFU.\n## Macros\u00a7\u27e832\u27e9\n\nensure\u27e819\u27e9\n    Ensure a condition is true. If it is not, return from the function with an error.\n\nensure_whatever\u27e833\u27e9`alloc`\n    Ensure a condition is true. If it is not, return a stringly-typed error message.\n\nlocation\u27e834\u27e9\n    Constructs a `Location`\u27e835\u27e9 using the current file, line, and column.\n\nwhatever\u27e816\u27e9`alloc`\n    Instantiate and return a stringly-typed error message.\n## Structs\u00a7\u27e836\u27e9\n\nBacktrace\u27e89\u27e9\n    A captured OS thread stack backtrace.\n\nChainCompat\u27e837\u27e9\n    An iterator over an Error and its sources.\n\nCleanedErrorText\u27e838\u27e9`alloc`\n    An iterator over an Error and its sources that removes duplicated text from the error display strings.\n\nLocation\u27e835\u27e9\n    The source code location where the error was reported.\n\nNoneError\u27e839\u27e9\n    A temporary error type used when converting an `Option`\u27e840\u27e9 into a `Result`\u27e841\u27e9\n\nReport\u27e824\u27e9\n    Opinionated solution to format an error in a user-friendly way. Useful as the return type from `main` and test functions.\n\nWhatever\u27e88\u27e9`alloc`\n    A basic error type that you can use as a first step to better error handling.\n## Traits\u00a7\u27e842\u27e9\n\nAsBacktrace\u27e843\u27e9\n    View a backtrace-like value as an optional backtrace.\n\nAsErrorSource\u27e844\u27e9\n    Converts the receiver into an `Error`\u27e845\u27e9 trait object, suitable for use in `Error::source`\u27e846\u27e9.\n\nErrorCompat\u27e847\u27e9\n    Backports changes to the `Error`\u27e845\u27e9 trait to versions of Rust lacking them.\n\nFromString\u27e848\u27e9`alloc`\n    Takes a string message and builds the corresponding error.\n\nGenerateImplicitData\u27e849\u27e9\n    Construct data to be included as part of an error. The data must require no arguments to be created.\n\nIntoError\u27e850\u27e9\n    Combines an underlying error with additional information about the error.\n\nOptionExt\u27e811\u27e9\n    Additions to `Option`\u27e840\u27e9.\n\nResultExt\u27e810\u27e9\n    Additions to `Result`\u27e841\u27e9.\n## Attribute Macros\u00a7\u27e851\u27e9\n\nreport\u27e823\u27e9\n    Adapts a function to provide user-friendly error output for `main` functions and tests.\n## Derive Macros\u00a7\u27e852\u27e9\n\nSnafu\u27e85\u27e9\n    The `Snafu` macro is the entrypoint to defining your own error types. It is designed to require little configuration for the recommended and typical usecases while still offering flexibility for unique situations.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/snafu/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/snafu/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/snafu/latest/src/snafu/lib.rs.html#1-1680: Source\n\u27e84\u27e9 https://docs.rs/snafu/latest/snafu/#snafu: \u00a7\n\u27e85\u27e9 https://docs.rs/snafu/latest/snafu/derive.Snafu.html: derive snafu::Snafu - `Snafu`\n\u27e86\u27e9 https://docs.rs/snafu/latest/snafu/guide/index.html: mod snafu::guide - user\u2019s guide\n\u27e87\u27e9 https://docs.rs/snafu/latest/snafu/#features: \u00a7\n\u27e88\u27e9 https://docs.rs/snafu/latest/snafu/struct.Whatever.html: struct snafu::Whatever - Turnkey errors based on strings\n\u27e89\u27e9 https://docs.rs/snafu/latest/snafu/struct.Backtrace.html: struct snafu::Backtrace - Backtraces\n\u27e810\u27e9 https://docs.rs/snafu/latest/snafu/trait.ResultExt.html: trait snafu::ResultExt - `Results`\n\u27e811\u27e9 https://docs.rs/snafu/latest/snafu/trait.OptionExt.html: trait snafu::OptionExt - `Options`\n\u27e812\u27e9 https://docs.rs/snafu/latest/snafu/futures/trait.TryFutureExt.html: trait snafu::futures::TryFutureExt - `Futures`\n\u27e813\u27e9 https://docs.rs/snafu/latest/snafu/futures/trait.TryStreamExt.html: trait snafu::futures::TryStreamExt - `Streams`\n\u27e814\u27e9 https://docs.rs/snafu/latest/snafu/#reporting: Error reporting\n\u27e815\u27e9 https://docs.rs/snafu/latest/snafu/#quick-start: \u00a7\n\u27e816\u27e9 https://docs.rs/snafu/latest/snafu/macro.whatever.html: macro snafu::whatever - `whatever!`\n\u27e817\u27e9 https://docs.rs/snafu/latest/snafu/#custom-error-types: \u00a7\n\u27e818\u27e9 https://docs.rs/snafu/latest/snafu/#struct-style: \u00a7\n\u27e819\u27e9 https://docs.rs/snafu/latest/snafu/macro.ensure.html: macro snafu::ensure - `ensure!`\n\u27e820\u27e9 https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context: method snafu::ResultExt::context - `context`\n\u27e821\u27e9 https://docs.rs/snafu/latest/snafu/#enum-style: \u00a7\n\u27e822\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e823\u27e9 https://docs.rs/snafu/latest/snafu/attr.report.html: attr snafu::report - `report`\n\u27e824\u27e9 https://docs.rs/snafu/latest/snafu/struct.Report.html: struct snafu::Report - `Report`\n\u27e825\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html: trait core::fmt::Debug - `Debug`\n\u27e826\u27e9 https://docs.rs/snafu/latest/snafu/#next-steps: \u00a7\n\u27e827\u27e9 https://docs.rs/snafu/latest/snafu/#modules: \u00a7\n\u27e828\u27e9 https://docs.rs/snafu/latest/snafu/futures/index.html: mod snafu::futures - futures\n\u27e829\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/future/trait.TryFuture.html: trait futures_core::future::TryFuture - `TryFuture`\n\u27e830\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.TryStream.html: trait futures_core::stream::TryStream - `TryStream`\n\u27e831\u27e9 https://docs.rs/snafu/latest/snafu/prelude/index.html: mod snafu::prelude - prelude\n\u27e832\u27e9 https://docs.rs/snafu/latest/snafu/#macros: \u00a7\n\u27e833\u27e9 https://docs.rs/snafu/latest/snafu/macro.ensure_whatever.html: macro snafu::ensure_whatever - ensure_whatever\n\u27e834\u27e9 https://docs.rs/snafu/latest/snafu/macro.location.html: macro snafu::location - location\n\u27e835\u27e9 https://docs.rs/snafu/latest/snafu/struct.Location.html: struct snafu::Location - `Location`\n\u27e836\u27e9 https://docs.rs/snafu/latest/snafu/#structs: \u00a7\n\u27e837\u27e9 https://docs.rs/snafu/latest/snafu/struct.ChainCompat.html: struct snafu::ChainCompat - ChainCompat\n\u27e838\u27e9 https://docs.rs/snafu/latest/snafu/struct.CleanedErrorText.html: struct snafu::CleanedErrorText - CleanedErrorText\n\u27e839\u27e9 https://docs.rs/snafu/latest/snafu/struct.NoneError.html: struct snafu::NoneError - NoneError\n\u27e840\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option`\n\u27e841\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n\u27e842\u27e9 https://docs.rs/snafu/latest/snafu/#traits: \u00a7\n\u27e843\u27e9 https://docs.rs/snafu/latest/snafu/trait.AsBacktrace.html: trait snafu::AsBacktrace - AsBacktrace\n\u27e844\u27e9 https://docs.rs/snafu/latest/snafu/trait.AsErrorSource.html: trait snafu::AsErrorSource - AsErrorSource\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html: trait core::error::Error - `Error`\n\u27e846\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source: method core::error::Error::source - `Error::source`\n\u27e847\u27e9 https://docs.rs/snafu/latest/snafu/trait.ErrorCompat.html: trait snafu::ErrorCompat - ErrorCompat\n\u27e848\u27e9 https://docs.rs/snafu/latest/snafu/trait.FromString.html: trait snafu::FromString - FromString\n\u27e849\u27e9 https://docs.rs/snafu/latest/snafu/trait.GenerateImplicitData.html: trait snafu::GenerateImplicitData - GenerateImplicitData\n\u27e850\u27e9 https://docs.rs/snafu/latest/snafu/trait.IntoError.html: trait snafu::IntoError - IntoError\n\u27e851\u27e9 https://docs.rs/snafu/latest/snafu/#attributes: \u00a7\n\u27e852\u27e9 https://docs.rs/snafu/latest/snafu/#derives: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `snafu` crate simplifies error handling in Rust by enabling the creation of custom error types with minimal boilerplate. It supports ergonomic error reporting with context, backtraces, and user-friendly output, while offering turnkey errors (`Whatever` type) for quick setups. Key features include `no_std` compatibility, extensions for `Result`, `Option`, `Future`, and `Stream`, and flexible error definitions via structs or enums.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Error Handling with `Whatever`\n\u2705 **Factual**: The `snafu` crate provides the `Whatever` type and the `whatever!` macro for quick error handling, allowing developers to create stringly-typed error messages with minimal setup.  \n\u274c **Counterfactual**: The `Whatever` type in the `snafu` crate is designed exclusively for wrapping existing errors and cannot be used to generate standalone error messages.  \n\n---\n\n### Pair 2: Custom Error Types\n\u2705 **Factual**: The `snafu` crate allows developers to create custom error types by deriving the `Snafu` macro, supporting both struct-style and enum-style error definitions.  \n\u274c **Counterfactual**: Custom error types created using the `Snafu` macro in the `snafu` crate cannot include fields for wrapping underlying errors or adding context.  \n\n---\n\n### Pair 3: `no_std` Compatibility\n\u2705 **Factual**: The `snafu` crate is compatible with `no_std` environments, making it suitable for embedded systems and constrained environments.  \n\u274c **Counterfactual**: The `snafu` crate requires the standard library and is not compatible with `no_std` environments.  \n\n---",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}