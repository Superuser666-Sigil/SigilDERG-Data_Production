{
    "name": "isahc",
    "version": "1.7.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/isahc/latest/isahc/all.html \"show sidebar\")\n# Crate isahcCopy item path\n[Settings](https://docs.rs/isahc/latest/settings.html)\n[Help](https://docs.rs/isahc/latest/help.html)\nSummary[Source](https://docs.rs/isahc/latest/src/isahc/lib.rs.html#1-470)\nExpand description\nThe practical HTTP client that is fun to use.\nHere are some of Isahc\u2019s key features:\n  * Full support for HTTP/1.1 and HTTP/2.\n  * Configurable request timeouts, redirect policies, Unix sockets, and many more settings.\n  * Offers an ergonomic synchronous API as well as a runtime-agnostic asynchronous API with support for async/await.\n  * Fully asynchronous core, with incremental reading and writing of request and response bodies and connection multiplexing.\n  * Sessions and cookie persistence.\n  * Automatic request cancellation on drop.\n\n\n## [\u00a7](https://docs.rs/isahc/latest/isahc/#getting-started)Getting started\nSending requests is as easy as calling a single function. Let\u2019s make a simple GET request to an example website:\n```\nuse isahc::prelude::*;\nlet mut response = isahc::get(\"https://example.org\")?;\nprintln!(\"{}\", response.text()?);\n```\n\nBy default, sending a request will wait for the response, up until the response headers are received. The returned response struct includes the response body as an open stream implementing [`Read`](https://doc.rust-lang.org/nightly/std/io/trait.Read.html \"trait std::io::Read\").\nSending a POST request is also easy, and takes an additional argument for the request body:\n```\nlet response = isahc::post(\"https://httpbin.org/post\", \"make me a salad\")?;\n```\n\nIsahc provides several other simple functions for common HTTP request types:\n```\nisahc::put(\"https://httpbin.org/put\", \"have a salad\")?;\nisahc::head(\"https://httpbin.org/get\")?;\nisahc::delete(\"https://httpbin.org/delete\")?;\n```\n\nIf you want to customize the request by adding headers, setting timeouts, etc, then you can create a [`Request`](https://docs.rs/isahc/latest/isahc/struct.Request.html \"struct isahc::Request\") using a builder-style fluent interface, then finishing it off with a [`send`](https://docs.rs/isahc/latest/isahc/trait.RequestExt.html#tymethod.send \"method isahc::RequestExt::send\"):\n```\nuse isahc::{prelude::*, Request};\nuse std::time::Duration;\nlet response = Request::post(\"https://httpbin.org/post\")\n  .header(\"Content-Type\", \"application/json\")\n  .timeout(Duration::from_secs(5))\n  .body(r#\"{\n    \"speed\": \"fast\",\n    \"cool_name\": true\n  }\"#)?\n  .send()?;\n```\n\nFor even more examples used in complete programs, please check out the [examples](https://github.com/sagebind/isahc/tree/master/examples) directory in the project repo.\n## [\u00a7](https://docs.rs/isahc/latest/isahc/#feature-tour)Feature tour\nBelow is a brief overview of some notable features of Isahc. Check out the rest of the documentation for even more guides and examples.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#easy-request-functions)Easy request functions\nYou can start sending requests without any configuration by using the global functions in this module, including [`get`](https://docs.rs/isahc/latest/isahc/fn.get.html \"fn isahc::get\"), [`post`](https://docs.rs/isahc/latest/isahc/fn.post.html \"fn isahc::post\"), and [`send`](https://docs.rs/isahc/latest/isahc/fn.send.html \"fn isahc::send\"). These use a shared HTTP client instance with sane defaults, so it is easy to get up and running. They should work perfectly fine for many use-cases, so don\u2019t worry about graduating to more complex APIs if you don\u2019t need them.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#request-and-response-traits)Request and response traits\nIsahc includes a number of traits in the [`prelude`](https://docs.rs/isahc/latest/isahc/prelude/index.html \"mod isahc::prelude\") module that extend the [`Request`](https://docs.rs/isahc/latest/isahc/struct.Request.html \"struct isahc::Request\") and [`Response`](https://docs.rs/isahc/latest/isahc/struct.Response.html \"struct isahc::Response\") types with a plethora of extra methods that make common tasks convenient and allow you to configure more advanced connection and protocol details.\nHere are some of the key traits to read about:\n  * [`Configurable`](https://docs.rs/isahc/latest/isahc/config/trait.Configurable.html \"trait isahc::config::Configurable\"): Configure request parameters.\n  * [`RequestExt`](https://docs.rs/isahc/latest/isahc/trait.RequestExt.html \"trait isahc::RequestExt\"): Manipulate and send requests.\n  * [`ResponseExt`](https://docs.rs/isahc/latest/isahc/trait.ResponseExt.html \"trait isahc::ResponseExt\"): Get information about the corresponding request or response statistics.\n  * [`ReadResponseExt`](https://docs.rs/isahc/latest/isahc/trait.ReadResponseExt.html \"trait isahc::ReadResponseExt\"): Consume a response body in a variety of ways.\n  * [`AsyncReadResponseExt`](https://docs.rs/isahc/latest/isahc/trait.AsyncReadResponseExt.html \"trait isahc::AsyncReadResponseExt\"): Consume an asynchronous response body in a variety of ways.\n\n\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#custom-clients)Custom clients\nThe free-standing functions for sending requests use a shared [`HttpClient`](https://docs.rs/isahc/latest/isahc/struct.HttpClient.html \"struct isahc::HttpClient\") instance, but you can also create your own client instances, which allows you to customize the default behavior for requests that use it.\nSee the documentation for [`HttpClient`](https://docs.rs/isahc/latest/isahc/struct.HttpClient.html \"struct isahc::HttpClient\") and [`HttpClientBuilder`](https://docs.rs/isahc/latest/isahc/struct.HttpClientBuilder.html \"struct isahc::HttpClientBuilder\") for more information on creating custom clients.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#asynchronous-requests)Asynchronous requests\nRequests are always executed asynchronously under the hood. This allows a single client to execute a large number of requests concurrently with minimal overhead. Even synchronous applications can benefit!\nIf you are writing an asynchronous application, you can reap additional benefits from the async nature of the client by using the asynchronous methods available to prevent blocking threads in your code. All request methods have an asynchronous variant that ends with `_async` in the name. Here is our first example rewritten to use async/await syntax:\n```\nuse isahc::prelude::*;\nlet mut response = isahc::get_async(\"https://httpbin.org/get\").await?;\nprintln!(\"{}\", response.text().await?);\n```\n\nSince we sent our request using [`get_async`](https://docs.rs/isahc/latest/isahc/fn.get_async.html \"fn isahc::get_async\"), no blocking will occur, and the asynchronous versions of all response methods (such as [`text`](https://docs.rs/isahc/latest/isahc/trait.AsyncReadResponseExt.html#tymethod.text \"method isahc::AsyncReadResponseExt::text\")) will also automatically be selected by the compiler.\n## [\u00a7](https://docs.rs/isahc/latest/isahc/#feature-flags)Feature flags\nIsahc is designed to be as \u201cpay-as-you-need\u201d as possible using Cargo feature flags and optional dependencies. Unstable features are also initially released behind feature flags until they are stabilized. You can add the feature names below to your `Cargo.toml` file to enable them:\n```\n[dependencies.isahc]\nversion = \"1.7\"\nfeatures = [\"psl\"]\n```\n\nBelow is a list of all available feature flags and their meanings.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#cookies)`cookies`\nEnable persistent HTTP cookie support. Disabled by default.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#http2)`http2`\nEnable compile-time support for HTTP/2 in libcurl via libnghttp2. This does not actually affect whether HTTP/2 is used for a given request, but simply makes it available. To configure which HTTP versions to use in a request, see [`VersionNegotiation`](https://docs.rs/isahc/latest/isahc/config/struct.VersionNegotiation.html \"struct isahc::config::VersionNegotiation\").\nTo check which HTTP versions are supported at runtime, you can use [`is_http_version_supported`](https://docs.rs/isahc/latest/isahc/fn.is_http_version_supported.html \"fn isahc::is_http_version_supported\").\nEnabled by default.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#json)`json`\nAdditional serialization and deserialization of JSON bodies via [serde](https://serde.rs). Disabled by default.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#psl)`psl`\nEnable use of the Public Suffix List to filter out potentially malicious cross-domain cookies. Implies `cookies`, disabled by default.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#spnego)`spnego`\nEnable support for [SPNEGO-based HTTP authentication](https://tools.ietf.org/html/rfc4559) (`negotiate` auth scheme). This makes the `negotiate` scheme available in the API and, if `static-curl` is enabled, compiles libcurl with GSS-API APIs. The [MIT Kerberos](https://web.mit.edu/kerberos/) headers must be pre-installed at compile time.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#static-curl)`static-curl`\nUse a bundled libcurl version and statically link to it. Enabled by default.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#text-decoding)`text-decoding`\nEnable support for decoding text-based responses in various charsets into strings. Enabled by default.\n### [\u00a7](https://docs.rs/isahc/latest/isahc/#unstable-apis)Unstable APIs\nThere are also some features that enable new incubating APIs that do not have stability guarantees:\n#### [\u00a7](https://docs.rs/isahc/latest/isahc/#unstable-interceptors)`unstable-interceptors`\nEnable the new interceptors API (replaces the old unstable middleware API). Unstable until the API is finalized. This an unstable feature whose interface may change between patch releases.\n## [\u00a7](https://docs.rs/isahc/latest/isahc/#logging-and-tracing)Logging and tracing\nIsahc logs quite a bit of useful information at various levels compatible with the [log](https://docs.rs/log) crate. For even more in-depth diagnostics, you can use a [tracing](https://docs.rs/tracing) subscriber to track log events grouped by individual requests. This can be especially useful if you are sending multiple requests concurrently.\nIf you set the log level to `Trace` for the `isahc::wire` target, Isahc will also log all incoming and outgoing data while in flight. This may come in handy if you are debugging code and need to see the exact data being sent to the server and being received.\n## Re-exports[\u00a7](https://docs.rs/isahc/latest/isahc/#reexports)\n\n`pub use crate::error::Error[](https://docs.rs/isahc/latest/isahc/error/struct.Error.html \"struct isahc::error::Error\");`\n\n\n`pub use http[](https://docs.rs/http/0.2.12/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules[\u00a7](https://docs.rs/isahc/latest/isahc/#modules)\n\n[auth](https://docs.rs/isahc/latest/isahc/auth/index.html \"mod isahc::auth\")\n    Types for working with HTTP authentication methods.\n\n[config](https://docs.rs/isahc/latest/isahc/config/index.html \"mod isahc::config\")\n    Definition of all client and request configuration options.\n\n[cookies](https://docs.rs/isahc/latest/isahc/cookies/index.html \"mod isahc::cookies\")`cookies`\n    Types for cookie state management.\n\n[error](https://docs.rs/isahc/latest/isahc/error/index.html \"mod isahc::error\")\n    Types for error handling.\n\n[prelude](https://docs.rs/isahc/latest/isahc/prelude/index.html \"mod isahc::prelude\")\n    A \u201cprelude\u201d for importing commonly used Isahc types and traits.\n## Structs[\u00a7](https://docs.rs/isahc/latest/isahc/#structs)\n\n[AsyncBody](https://docs.rs/isahc/latest/isahc/struct.AsyncBody.html \"struct isahc::AsyncBody\")\n    Contains the body of an asynchronous HTTP request or response.\n\n[Body](https://docs.rs/isahc/latest/isahc/struct.Body.html \"struct isahc::Body\")\n    Contains the body of a synchronous HTTP request or response.\n\n[HttpClient](https://docs.rs/isahc/latest/isahc/struct.HttpClient.html \"struct isahc::HttpClient\")\n    An HTTP client for making requests.\n\n[HttpClientBuilder](https://docs.rs/isahc/latest/isahc/struct.HttpClientBuilder.html \"struct isahc::HttpClientBuilder\")\n    An HTTP client builder, capable of creating custom [`HttpClient`](https://docs.rs/isahc/latest/isahc/struct.HttpClient.html \"struct isahc::HttpClient\") instances with customized behavior.\n\n[Metrics](https://docs.rs/isahc/latest/isahc/struct.Metrics.html \"struct isahc::Metrics\")\n    An object that holds status updates and progress statistics on a particular request. A [`Metrics`](https://docs.rs/isahc/latest/isahc/struct.Metrics.html \"struct isahc::Metrics\") can be shared between threads, which allows an agent thread to post updates to the object while consumers can read from the object simultaneously.\n\n[Request](https://docs.rs/isahc/latest/isahc/struct.Request.html \"struct isahc::Request\")\n    Represents an HTTP request.\n\n[Response](https://docs.rs/isahc/latest/isahc/struct.Response.html \"struct isahc::Response\")\n    Represents an HTTP response\n\n[ResponseFuture](https://docs.rs/isahc/latest/isahc/struct.ResponseFuture.html \"struct isahc::ResponseFuture\")\n    A future for a request being executed.\n\n[Trailer](https://docs.rs/isahc/latest/isahc/struct.Trailer.html \"struct isahc::Trailer\")\n    Holds the current state of a trailer for a response.\n## Traits[\u00a7](https://docs.rs/isahc/latest/isahc/#traits)\n\n[AsyncReadResponseExt](https://docs.rs/isahc/latest/isahc/trait.AsyncReadResponseExt.html \"trait isahc::AsyncReadResponseExt\")\n    Provides extension methods for consuming asynchronous HTTP response streams.\n\n[ReadResponseExt](https://docs.rs/isahc/latest/isahc/trait.ReadResponseExt.html \"trait isahc::ReadResponseExt\")\n    Provides extension methods for consuming HTTP response streams.\n\n[RequestExt](https://docs.rs/isahc/latest/isahc/trait.RequestExt.html \"trait isahc::RequestExt\")\n    Extension methods on an HTTP request.\n\n[ResponseExt](https://docs.rs/isahc/latest/isahc/trait.ResponseExt.html \"trait isahc::ResponseExt\")\n    Provides extension methods for working with HTTP responses.\n## Functions[\u00a7](https://docs.rs/isahc/latest/isahc/#functions)\n\n[delete](https://docs.rs/isahc/latest/isahc/fn.delete.html \"fn isahc::delete\")\n    Send a DELETE request to the given URI.\n\n[delete_async](https://docs.rs/isahc/latest/isahc/fn.delete_async.html \"fn isahc::delete_async\")\n    Send a DELETE request to the given URI asynchronously.\n\n[get](https://docs.rs/isahc/latest/isahc/fn.get.html \"fn isahc::get\")\n    Send a GET request to the given URI.\n\n[get_async](https://docs.rs/isahc/latest/isahc/fn.get_async.html \"fn isahc::get_async\")\n    Send a GET request to the given URI asynchronously.\n\n[head](https://docs.rs/isahc/latest/isahc/fn.head.html \"fn isahc::head\")\n    Send a HEAD request to the given URI.\n\n[head_async](https://docs.rs/isahc/latest/isahc/fn.head_async.html \"fn isahc::head_async\")\n    Send a HEAD request to the given URI asynchronously.\n\n[is_http_version_supported](https://docs.rs/isahc/latest/isahc/fn.is_http_version_supported.html \"fn isahc::is_http_version_supported\")\n    Check if runtime support is available for the given HTTP version.\n\n[post](https://docs.rs/isahc/latest/isahc/fn.post.html \"fn isahc::post\")\n    Send a POST request to the given URI with a given request body.\n\n[post_async](https://docs.rs/isahc/latest/isahc/fn.post_async.html \"fn isahc::post_async\")\n    Send a POST request to the given URI asynchronously with a given request body.\n\n[put](https://docs.rs/isahc/latest/isahc/fn.put.html \"fn isahc::put\")\n    Send a PUT request to the given URI with a given request body.\n\n[put_async](https://docs.rs/isahc/latest/isahc/fn.put_async.html \"fn isahc::put_async\")\n    Send a PUT request to the given URI asynchronously with a given request body.\n\n[send](https://docs.rs/isahc/latest/isahc/fn.send.html \"fn isahc::send\")\n    Send an HTTP request and return the HTTP response.\n\n[send_async](https://docs.rs/isahc/latest/isahc/fn.send_async.html \"fn isahc::send_async\")\n    Send an HTTP request and return the HTTP response asynchronously.\n\n[version](https://docs.rs/isahc/latest/isahc/fn.version.html \"fn isahc::version\")\n    Gets a human-readable string with the version number of Isahc and its dependencies.\n",
        "markdown_with_citations": "[](https://docs.rs/isahc/latest/isahc/all.html \"show sidebar\")\n# Crate isahcCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThe practical HTTP client that is fun to use.\nHere are some of Isahc\u2019s key features:\n  * Full support for HTTP/1.1 and HTTP/2.\n  * Configurable request timeouts, redirect policies, Unix sockets, and many more settings.\n  * Offers an ergonomic synchronous API as well as a runtime-agnostic asynchronous API with support for async/await.\n  * Fully asynchronous core, with incremental reading and writing of request and response bodies and connection multiplexing.\n  * Sessions and cookie persistence.\n  * Automatic request cancellation on drop.\n\n\n## \u00a7\u27e84\u27e9Getting started\nSending requests is as easy as calling a single function. Let\u2019s make a simple GET request to an example website:\n```\nuse isahc::prelude::*;\nlet mut response = isahc::get(\"https://example.org\")?;\nprintln!(\"{}\", response.text()?);\n```\n\nBy default, sending a request will wait for the response, up until the response headers are received. The returned response struct includes the response body as an open stream implementing `Read`\u27e85\u27e9.\nSending a POST request is also easy, and takes an additional argument for the request body:\n```\nlet response = isahc::post(\"https://httpbin.org/post\", \"make me a salad\")?;\n```\n\nIsahc provides several other simple functions for common HTTP request types:\n```\nisahc::put(\"https://httpbin.org/put\", \"have a salad\")?;\nisahc::head(\"https://httpbin.org/get\")?;\nisahc::delete(\"https://httpbin.org/delete\")?;\n```\n\nIf you want to customize the request by adding headers, setting timeouts, etc, then you can create a `Request`\u27e86\u27e9 using a builder-style fluent interface, then finishing it off with a `send`\u27e87\u27e9:\n```\nuse isahc::{prelude::*, Request};\nuse std::time::Duration;\nlet response = Request::post(\"https://httpbin.org/post\")\n  .header(\"Content-Type\", \"application/json\")\n  .timeout(Duration::from_secs(5))\n  .body(r#\"{\n    \"speed\": \"fast\",\n    \"cool_name\": true\n  }\"#)?\n  .send()?;\n```\n\nFor even more examples used in complete programs, please check out the examples\u27e88\u27e9 directory in the project repo.\n## \u00a7\u27e89\u27e9Feature tour\nBelow is a brief overview of some notable features of Isahc. Check out the rest of the documentation for even more guides and examples.\n### \u00a7\u27e810\u27e9Easy request functions\nYou can start sending requests without any configuration by using the global functions in this module, including `get`\u27e811\u27e9, `post`\u27e812\u27e9, and `send`\u27e813\u27e9. These use a shared HTTP client instance with sane defaults, so it is easy to get up and running. They should work perfectly fine for many use-cases, so don\u2019t worry about graduating to more complex APIs if you don\u2019t need them.\n### \u00a7\u27e814\u27e9Request and response traits\nIsahc includes a number of traits in the `prelude`\u27e815\u27e9 module that extend the `Request`\u27e86\u27e9 and `Response`\u27e816\u27e9 types with a plethora of extra methods that make common tasks convenient and allow you to configure more advanced connection and protocol details.\nHere are some of the key traits to read about:\n  * `Configurable`\u27e817\u27e9: Configure request parameters.\n  * `RequestExt`\u27e818\u27e9: Manipulate and send requests.\n  * `ResponseExt`\u27e819\u27e9: Get information about the corresponding request or response statistics.\n  * `ReadResponseExt`\u27e820\u27e9: Consume a response body in a variety of ways.\n  * `AsyncReadResponseExt`\u27e821\u27e9: Consume an asynchronous response body in a variety of ways.\n\n\n### \u00a7\u27e822\u27e9Custom clients\nThe free-standing functions for sending requests use a shared `HttpClient`\u27e823\u27e9 instance, but you can also create your own client instances, which allows you to customize the default behavior for requests that use it.\nSee the documentation for `HttpClient`\u27e823\u27e9 and `HttpClientBuilder`\u27e824\u27e9 for more information on creating custom clients.\n### \u00a7\u27e825\u27e9Asynchronous requests\nRequests are always executed asynchronously under the hood. This allows a single client to execute a large number of requests concurrently with minimal overhead. Even synchronous applications can benefit!\nIf you are writing an asynchronous application, you can reap additional benefits from the async nature of the client by using the asynchronous methods available to prevent blocking threads in your code. All request methods have an asynchronous variant that ends with `_async` in the name. Here is our first example rewritten to use async/await syntax:\n```\nuse isahc::prelude::*;\nlet mut response = isahc::get_async(\"https://httpbin.org/get\").await?;\nprintln!(\"{}\", response.text().await?);\n```\n\nSince we sent our request using `get_async`\u27e826\u27e9, no blocking will occur, and the asynchronous versions of all response methods (such as `text`\u27e827\u27e9) will also automatically be selected by the compiler.\n## \u00a7\u27e828\u27e9Feature flags\nIsahc is designed to be as \u201cpay-as-you-need\u201d as possible using Cargo feature flags and optional dependencies. Unstable features are also initially released behind feature flags until they are stabilized. You can add the feature names below to your `Cargo.toml` file to enable them:\n```\n[dependencies.isahc]\nversion = \"1.7\"\nfeatures = [\"psl\"]\n```\n\nBelow is a list of all available feature flags and their meanings.\n### \u00a7\u27e829\u27e9`cookies`\nEnable persistent HTTP cookie support. Disabled by default.\n### \u00a7\u27e830\u27e9`http2`\nEnable compile-time support for HTTP/2 in libcurl via libnghttp2. This does not actually affect whether HTTP/2 is used for a given request, but simply makes it available. To configure which HTTP versions to use in a request, see `VersionNegotiation`\u27e831\u27e9.\nTo check which HTTP versions are supported at runtime, you can use `is_http_version_supported`\u27e832\u27e9.\nEnabled by default.\n### \u00a7\u27e833\u27e9`json`\nAdditional serialization and deserialization of JSON bodies via serde\u27e834\u27e9. Disabled by default.\n### \u00a7\u27e835\u27e9`psl`\nEnable use of the Public Suffix List to filter out potentially malicious cross-domain cookies. Implies `cookies`, disabled by default.\n### \u00a7\u27e836\u27e9`spnego`\nEnable support for SPNEGO-based HTTP authentication\u27e837\u27e9 (`negotiate` auth scheme). This makes the `negotiate` scheme available in the API and, if `static-curl` is enabled, compiles libcurl with GSS-API APIs. The MIT Kerberos\u27e838\u27e9 headers must be pre-installed at compile time.\n### \u00a7\u27e839\u27e9`static-curl`\nUse a bundled libcurl version and statically link to it. Enabled by default.\n### \u00a7\u27e840\u27e9`text-decoding`\nEnable support for decoding text-based responses in various charsets into strings. Enabled by default.\n### \u00a7\u27e841\u27e9Unstable APIs\nThere are also some features that enable new incubating APIs that do not have stability guarantees:\n#### \u00a7\u27e842\u27e9`unstable-interceptors`\nEnable the new interceptors API (replaces the old unstable middleware API). Unstable until the API is finalized. This an unstable feature whose interface may change between patch releases.\n## \u00a7\u27e843\u27e9Logging and tracing\nIsahc logs quite a bit of useful information at various levels compatible with the log\u27e844\u27e9 crate. For even more in-depth diagnostics, you can use a tracing\u27e845\u27e9 subscriber to track log events grouped by individual requests. This can be especially useful if you are sending multiple requests concurrently.\nIf you set the log level to `Trace` for the `isahc::wire` target, Isahc will also log all incoming and outgoing data while in flight. This may come in handy if you are debugging code and need to see the exact data being sent to the server and being received.\n## Re-exports\u00a7\u27e846\u27e9\n\n`pub use crate::error::Error[](https://docs.rs/isahc/latest/isahc/error/struct.Error.html \"struct isahc::error::Error\");`\n\n\n`pub use http[](https://docs.rs/http/0.2.12/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules\u00a7\u27e847\u27e9\n\nauth\u27e848\u27e9\n    Types for working with HTTP authentication methods.\n\nconfig\u27e849\u27e9\n    Definition of all client and request configuration options.\n\ncookies\u27e850\u27e9`cookies`\n    Types for cookie state management.\n\nerror\u27e851\u27e9\n    Types for error handling.\n\nprelude\u27e815\u27e9\n    A \u201cprelude\u201d for importing commonly used Isahc types and traits.\n## Structs\u00a7\u27e852\u27e9\n\nAsyncBody\u27e853\u27e9\n    Contains the body of an asynchronous HTTP request or response.\n\nBody\u27e854\u27e9\n    Contains the body of a synchronous HTTP request or response.\n\nHttpClient\u27e823\u27e9\n    An HTTP client for making requests.\n\nHttpClientBuilder\u27e824\u27e9\n    An HTTP client builder, capable of creating custom `HttpClient`\u27e823\u27e9 instances with customized behavior.\n\nMetrics\u27e855\u27e9\n    An object that holds status updates and progress statistics on a particular request. A `Metrics`\u27e855\u27e9 can be shared between threads, which allows an agent thread to post updates to the object while consumers can read from the object simultaneously.\n\nRequest\u27e86\u27e9\n    Represents an HTTP request.\n\nResponse\u27e816\u27e9\n    Represents an HTTP response\n\nResponseFuture\u27e856\u27e9\n    A future for a request being executed.\n\nTrailer\u27e857\u27e9\n    Holds the current state of a trailer for a response.\n## Traits\u00a7\u27e858\u27e9\n\nAsyncReadResponseExt\u27e821\u27e9\n    Provides extension methods for consuming asynchronous HTTP response streams.\n\nReadResponseExt\u27e820\u27e9\n    Provides extension methods for consuming HTTP response streams.\n\nRequestExt\u27e818\u27e9\n    Extension methods on an HTTP request.\n\nResponseExt\u27e819\u27e9\n    Provides extension methods for working with HTTP responses.\n## Functions\u00a7\u27e859\u27e9\n\ndelete\u27e860\u27e9\n    Send a DELETE request to the given URI.\n\ndelete_async\u27e861\u27e9\n    Send a DELETE request to the given URI asynchronously.\n\nget\u27e811\u27e9\n    Send a GET request to the given URI.\n\nget_async\u27e826\u27e9\n    Send a GET request to the given URI asynchronously.\n\nhead\u27e862\u27e9\n    Send a HEAD request to the given URI.\n\nhead_async\u27e863\u27e9\n    Send a HEAD request to the given URI asynchronously.\n\nis_http_version_supported\u27e832\u27e9\n    Check if runtime support is available for the given HTTP version.\n\npost\u27e812\u27e9\n    Send a POST request to the given URI with a given request body.\n\npost_async\u27e864\u27e9\n    Send a POST request to the given URI asynchronously with a given request body.\n\nput\u27e865\u27e9\n    Send a PUT request to the given URI with a given request body.\n\nput_async\u27e866\u27e9\n    Send a PUT request to the given URI asynchronously with a given request body.\n\nsend\u27e813\u27e9\n    Send an HTTP request and return the HTTP response.\n\nsend_async\u27e867\u27e9\n    Send an HTTP request and return the HTTP response asynchronously.\n\nversion\u27e868\u27e9\n    Gets a human-readable string with the version number of Isahc and its dependencies.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/isahc/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/isahc/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/isahc/latest/src/isahc/lib.rs.html#1-470: Source\n\u27e84\u27e9 https://docs.rs/isahc/latest/isahc/#getting-started: \u00a7\n\u27e85\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Read.html: trait std::io::Read - `Read`\n\u27e86\u27e9 https://docs.rs/isahc/latest/isahc/struct.Request.html: struct isahc::Request - `Request`\n\u27e87\u27e9 https://docs.rs/isahc/latest/isahc/trait.RequestExt.html#tymethod.send: method isahc::RequestExt::send - `send`\n\u27e88\u27e9 https://github.com/sagebind/isahc/tree/master/examples: examples\n\u27e89\u27e9 https://docs.rs/isahc/latest/isahc/#feature-tour: \u00a7\n\u27e810\u27e9 https://docs.rs/isahc/latest/isahc/#easy-request-functions: \u00a7\n\u27e811\u27e9 https://docs.rs/isahc/latest/isahc/fn.get.html: fn isahc::get - `get`\n\u27e812\u27e9 https://docs.rs/isahc/latest/isahc/fn.post.html: fn isahc::post - `post`\n\u27e813\u27e9 https://docs.rs/isahc/latest/isahc/fn.send.html: fn isahc::send - `send`\n\u27e814\u27e9 https://docs.rs/isahc/latest/isahc/#request-and-response-traits: \u00a7\n\u27e815\u27e9 https://docs.rs/isahc/latest/isahc/prelude/index.html: mod isahc::prelude - `prelude`\n\u27e816\u27e9 https://docs.rs/isahc/latest/isahc/struct.Response.html: struct isahc::Response - `Response`\n\u27e817\u27e9 https://docs.rs/isahc/latest/isahc/config/trait.Configurable.html: trait isahc::config::Configurable - `Configurable`\n\u27e818\u27e9 https://docs.rs/isahc/latest/isahc/trait.RequestExt.html: trait isahc::RequestExt - `RequestExt`\n\u27e819\u27e9 https://docs.rs/isahc/latest/isahc/trait.ResponseExt.html: trait isahc::ResponseExt - `ResponseExt`\n\u27e820\u27e9 https://docs.rs/isahc/latest/isahc/trait.ReadResponseExt.html: trait isahc::ReadResponseExt - `ReadResponseExt`\n\u27e821\u27e9 https://docs.rs/isahc/latest/isahc/trait.AsyncReadResponseExt.html: trait isahc::AsyncReadResponseExt - `AsyncReadResponseExt`\n\u27e822\u27e9 https://docs.rs/isahc/latest/isahc/#custom-clients: \u00a7\n\u27e823\u27e9 https://docs.rs/isahc/latest/isahc/struct.HttpClient.html: struct isahc::HttpClient - `HttpClient`\n\u27e824\u27e9 https://docs.rs/isahc/latest/isahc/struct.HttpClientBuilder.html: struct isahc::HttpClientBuilder - `HttpClientBuilder`\n\u27e825\u27e9 https://docs.rs/isahc/latest/isahc/#asynchronous-requests: \u00a7\n\u27e826\u27e9 https://docs.rs/isahc/latest/isahc/fn.get_async.html: fn isahc::get_async - `get_async`\n\u27e827\u27e9 https://docs.rs/isahc/latest/isahc/trait.AsyncReadResponseExt.html#tymethod.text: method isahc::AsyncReadResponseExt::text - `text`\n\u27e828\u27e9 https://docs.rs/isahc/latest/isahc/#feature-flags: \u00a7\n\u27e829\u27e9 https://docs.rs/isahc/latest/isahc/#cookies: \u00a7\n\u27e830\u27e9 https://docs.rs/isahc/latest/isahc/#http2: \u00a7\n\u27e831\u27e9 https://docs.rs/isahc/latest/isahc/config/struct.VersionNegotiation.html: struct isahc::config::VersionNegotiation - `VersionNegotiation`\n\u27e832\u27e9 https://docs.rs/isahc/latest/isahc/fn.is_http_version_supported.html: fn isahc::is_http_version_supported - `is_http_version_supported`\n\u27e833\u27e9 https://docs.rs/isahc/latest/isahc/#json: \u00a7\n\u27e834\u27e9 https://serde.rs: serde\n\u27e835\u27e9 https://docs.rs/isahc/latest/isahc/#psl: \u00a7\n\u27e836\u27e9 https://docs.rs/isahc/latest/isahc/#spnego: \u00a7\n\u27e837\u27e9 https://tools.ietf.org/html/rfc4559: SPNEGO-based HTTP authentication\n\u27e838\u27e9 https://web.mit.edu/kerberos/: MIT Kerberos\n\u27e839\u27e9 https://docs.rs/isahc/latest/isahc/#static-curl: \u00a7\n\u27e840\u27e9 https://docs.rs/isahc/latest/isahc/#text-decoding: \u00a7\n\u27e841\u27e9 https://docs.rs/isahc/latest/isahc/#unstable-apis: \u00a7\n\u27e842\u27e9 https://docs.rs/isahc/latest/isahc/#unstable-interceptors: \u00a7\n\u27e843\u27e9 https://docs.rs/isahc/latest/isahc/#logging-and-tracing: \u00a7\n\u27e844\u27e9 https://docs.rs/log: log\n\u27e845\u27e9 https://docs.rs/tracing: tracing\n\u27e846\u27e9 https://docs.rs/isahc/latest/isahc/#reexports: \u00a7\n\u27e847\u27e9 https://docs.rs/isahc/latest/isahc/#modules: \u00a7\n\u27e848\u27e9 https://docs.rs/isahc/latest/isahc/auth/index.html: mod isahc::auth - auth\n\u27e849\u27e9 https://docs.rs/isahc/latest/isahc/config/index.html: mod isahc::config - config\n\u27e850\u27e9 https://docs.rs/isahc/latest/isahc/cookies/index.html: mod isahc::cookies - cookies\n\u27e851\u27e9 https://docs.rs/isahc/latest/isahc/error/index.html: mod isahc::error - error\n\u27e852\u27e9 https://docs.rs/isahc/latest/isahc/#structs: \u00a7\n\u27e853\u27e9 https://docs.rs/isahc/latest/isahc/struct.AsyncBody.html: struct isahc::AsyncBody - AsyncBody\n\u27e854\u27e9 https://docs.rs/isahc/latest/isahc/struct.Body.html: struct isahc::Body - Body\n\u27e855\u27e9 https://docs.rs/isahc/latest/isahc/struct.Metrics.html: struct isahc::Metrics - Metrics\n\u27e856\u27e9 https://docs.rs/isahc/latest/isahc/struct.ResponseFuture.html: struct isahc::ResponseFuture - ResponseFuture\n\u27e857\u27e9 https://docs.rs/isahc/latest/isahc/struct.Trailer.html: struct isahc::Trailer - Trailer\n\u27e858\u27e9 https://docs.rs/isahc/latest/isahc/#traits: \u00a7\n\u27e859\u27e9 https://docs.rs/isahc/latest/isahc/#functions: \u00a7\n\u27e860\u27e9 https://docs.rs/isahc/latest/isahc/fn.delete.html: fn isahc::delete - delete\n\u27e861\u27e9 https://docs.rs/isahc/latest/isahc/fn.delete_async.html: fn isahc::delete_async - delete_async\n\u27e862\u27e9 https://docs.rs/isahc/latest/isahc/fn.head.html: fn isahc::head - head\n\u27e863\u27e9 https://docs.rs/isahc/latest/isahc/fn.head_async.html: fn isahc::head_async - head_async\n\u27e864\u27e9 https://docs.rs/isahc/latest/isahc/fn.post_async.html: fn isahc::post_async - post_async\n\u27e865\u27e9 https://docs.rs/isahc/latest/isahc/fn.put.html: fn isahc::put - put\n\u27e866\u27e9 https://docs.rs/isahc/latest/isahc/fn.put_async.html: fn isahc::put_async - put_async\n\u27e867\u27e9 https://docs.rs/isahc/latest/isahc/fn.send_async.html: fn isahc::send_async - send_async\n\u27e868\u27e9 https://docs.rs/isahc/latest/isahc/fn.version.html: fn isahc::version - version\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `isahc` crate is a practical and ergonomic HTTP client for Rust, offering both synchronous and runtime-agnostic asynchronous APIs with full support for HTTP/1.1 and HTTP/2. It features configurable request settings, connection multiplexing, cookie persistence, and automatic request cancellation on drop. Additionally, it provides simple functions for common HTTP methods, a builder-style interface for custom requests, and extensive logging and tracing capabilities.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: HTTP Version Support  \n\u2705 Factual: The `isahc` crate supports both HTTP/1.1 and HTTP/2, with the HTTP/2 feature enabled by default at compile time.  \n\u274c Counterfactual: The `isahc` crate exclusively supports HTTP/2 and does not provide backward compatibility for HTTP/1.1.  \n\n---\n\n### Pair 2: Asynchronous API  \n\u2705 Factual: The `isahc` crate provides runtime-agnostic asynchronous APIs, allowing developers to use `async/await` syntax for non-blocking HTTP requests.  \n\u274c Counterfactual: The `isahc` crate only supports synchronous APIs and does not provide any asynchronous methods for HTTP requests.  \n\n---\n\n### Pair 3: Cookie Management  \n\u2705 Factual: Persistent HTTP cookie support in `isahc` is available but disabled by default; it can be enabled using the `cookies` feature flag.  \n\u274c Counterfactual: Persistent HTTP cookie support in `isahc` is enabled by default and cannot be disabled.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}