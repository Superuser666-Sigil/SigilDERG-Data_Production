{
    "name": "pin-project-lite",
    "version": "0.2.16",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/pin-project-lite/latest/pin_project_lite/all.html \"show sidebar\")\n# Crate pin_project_liteCopy item path\n[Settings](https://docs.rs/pin-project-lite/latest/settings.html)\n[Help](https://docs.rs/pin-project-lite/latest/help.html)\nSummary[Source](https://docs.rs/pin-project-lite/latest/src/pin_project_lite/lib.rs.html#3-1766)\nExpand description\nA lightweight version of [pin-project](https://github.com/taiki-e/pin-project) written with declarative macros.\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project-lite = \"0.2\"\n```\n\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#examples)Examples\n[`pin_project!`](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\") macro creates a projection type covering all the fields of struct.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  struct Struct<T, U> {\n    #[pin]\n    pinned: T,\n    unpinned: U,\n  }\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\nTo use [`pin_project!`](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\") on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  #[project = EnumProj]\n  enum Enum<T, U> {\n    Variant { #[pin] pinned: T, unpinned: U },\n  }\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Variant { pinned, unpinned } => {\n        let _: Pin<&mut T> = pinned;\n        let _: &mut U = unpinned;\n      }\n    }\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#pin-project-vs-pin-project-lite)[pin-project](https://github.com/taiki-e/pin-project) vs pin-project-lite\nHere are some similarities and differences compared to [pin-project](https://github.com/taiki-e/pin-project).\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#similar-safety)Similar: Safety\npin-project-lite guarantees safety in much the same way as [pin-project](https://github.com/taiki-e/pin-project). Both are completely safe unless you write other unsafe code.\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-minimal-design)Different: Minimal design\nThis library does not tackle as expansive of a range of use cases as [pin-project](https://github.com/taiki-e/pin-project) does. If your use case is not already covered, please use [pin-project](https://github.com/taiki-e/pin-project).\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-proc-macro-related-dependencies)Different: No proc-macro related dependencies\nThis is the **only** reason to use this crate. However, **if you already have proc-macro related dependencies in your crate\u2019s dependency graph, there is no benefit from using this crate.** (Note: There is almost no difference in the amount of code generated between [pin-project](https://github.com/taiki-e/pin-project) and pin-project-lite.)\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-useful-error-messages)Different: No useful error messages\nThis macro does not handle any invalid input. So error messages are not to be useful in most cases. If you do need useful error messages, then upon error you can pass the same input to [pin-project](https://github.com/taiki-e/pin-project) to receive a helpful description of the compile error.\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-custom-unpin-implementation)Different: No support for custom Unpin implementation\npin-project supports this by [`UnsafeUnpin`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unsafeunpin). (`!Unpin` is supported by both [pin-project](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unpin) and [pin-project-lite](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#unpin \"macro pin_project_lite::pin_project\").)\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-tuple-structs-and-tuple-variants)Different: No support for tuple structs and tuple variants\npin-project supports this.\n## Macros[\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#macros)\n\n[pin_project](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\")\n    A macro that creates a projection type covering all the fields of struct.\n",
        "markdown_with_citations": "[](https://docs.rs/pin-project-lite/latest/pin_project_lite/all.html \"show sidebar\")\n# Crate pin_project_liteCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA lightweight version of pin-project\u27e84\u27e9 written with declarative macros.\n### \u00a7\u27e85\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project-lite = \"0.2\"\n```\n\n### \u00a7\u27e86\u27e9Examples\n`pin_project!`\u27e87\u27e9 macro creates a projection type covering all the fields of struct.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  struct Struct<T, U> {\n    #[pin]\n    pinned: T,\n    unpinned: U,\n  }\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\nTo use `pin_project!`\u27e87\u27e9 on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  #[project = EnumProj]\n  enum Enum<T, U> {\n    Variant { #[pin] pinned: T, unpinned: U },\n  }\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Variant { pinned, unpinned } => {\n        let _: Pin<&mut T> = pinned;\n        let _: &mut U = unpinned;\n      }\n    }\n  }\n}\n```\n\n### \u00a7\u27e88\u27e9pin-project\u27e84\u27e9 vs pin-project-lite\nHere are some similarities and differences compared to pin-project\u27e84\u27e9.\n#### \u00a7\u27e89\u27e9Similar: Safety\npin-project-lite guarantees safety in much the same way as pin-project\u27e84\u27e9. Both are completely safe unless you write other unsafe code.\n#### \u00a7\u27e810\u27e9Different: Minimal design\nThis library does not tackle as expansive of a range of use cases as pin-project\u27e84\u27e9 does. If your use case is not already covered, please use pin-project\u27e84\u27e9.\n#### \u00a7\u27e811\u27e9Different: No proc-macro related dependencies\nThis is the **only** reason to use this crate. However, **if you already have proc-macro related dependencies in your crate\u2019s dependency graph, there is no benefit from using this crate.** (Note: There is almost no difference in the amount of code generated between pin-project\u27e84\u27e9 and pin-project-lite.)\n#### \u00a7\u27e812\u27e9Different: No useful error messages\nThis macro does not handle any invalid input. So error messages are not to be useful in most cases. If you do need useful error messages, then upon error you can pass the same input to pin-project\u27e84\u27e9 to receive a helpful description of the compile error.\n#### \u00a7\u27e813\u27e9Different: No support for custom Unpin implementation\npin-project supports this by `UnsafeUnpin`\u27e814\u27e9. (`!Unpin` is supported by both pin-project\u27e815\u27e9 and pin-project-lite\u27e816\u27e9.)\n#### \u00a7\u27e817\u27e9Different: No support for tuple structs and tuple variants\npin-project supports this.\n## Macros\u00a7\u27e818\u27e9\n\npin_project\u27e87\u27e9\n    A macro that creates a projection type covering all the fields of struct.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pin-project-lite/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pin-project-lite/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pin-project-lite/latest/src/pin_project_lite/lib.rs.html#3-1766: Source\n\u27e84\u27e9 https://github.com/taiki-e/pin-project: pin-project\n\u27e85\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#examples: \u00a7\n\u27e87\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html: macro pin_project_lite::pin_project - `pin_project!`\n\u27e88\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#pin-project-vs-pin-project-lite: \u00a7\n\u27e89\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#similar-safety: \u00a7\n\u27e810\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-minimal-design: \u00a7\n\u27e811\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-proc-macro-related-dependencies: \u00a7\n\u27e812\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-useful-error-messages: \u00a7\n\u27e813\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-custom-unpin-implementation: \u00a7\n\u27e814\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unsafeunpin: `UnsafeUnpin`\n\u27e815\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unpin: pin-project\n\u27e816\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#unpin: macro pin_project_lite::pin_project - pin-project-lite\n\u27e817\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-tuple-structs-and-tuple-variants: \u00a7\n\u27e818\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#macros: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `pin-project-lite` crate provides a lightweight macro, `pin_project!`, for safely projecting pinned types in structs and enums without requiring proc-macro dependencies. It guarantees safety similar to `pin-project` but offers a minimal design, lacks support for tuple structs, custom `Unpin` implementations, and useful error messages. Ideal for projects avoiding proc-macro dependencies, it is otherwise functionally similar to `pin-project`.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Safety Guarantees  \n\u2705 **Factual**: `pin-project-lite` guarantees safety in much the same way as `pin-project`, ensuring that pinning is safe unless other unsafe code is introduced.  \n\u274c **Counterfactual**: `pin-project-lite` does not guarantee safety and requires manual validation of pinning correctness.  \n\n---\n\n### Pair 2: Dependency Characteristics  \n\u2705 **Factual**: `pin-project-lite` does not rely on proc-macro-related dependencies, making it ideal for projects that aim to minimize dependency graphs.  \n\u274c **Counterfactual**: `pin-project-lite` requires proc-macro-related dependencies, similar to `pin-project`.  \n\n---\n\n### Pair 3: Error Handling  \n\u2705 **Factual**: `pin-project-lite` does not provide useful error messages for invalid input, making debugging more challenging compared to `pin-project`.  \n\u274c **Counterfactual**: `pin-project-lite` provides detailed and helpful error messages for invalid input, similar to `pin-project`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}