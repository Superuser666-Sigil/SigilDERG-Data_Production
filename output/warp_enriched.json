{
    "name": "warp",
    "version": "0.3.7",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/warp/latest/warp/all.html \"show sidebar\")\n# Crate warpCopy item path\n[Settings](https://docs.rs/warp/latest/settings.html)\n[Help](https://docs.rs/warp/latest/help.html)\nSummary[Source](https://docs.rs/warp/latest/src/warp/lib.rs.html#1-178)\nExpand description\n## [\u00a7](https://docs.rs/warp/latest/warp/#warp)warp\nwarp is a super-easy, composable, web server framework for warp speeds.\nThanks to its [`Filter`](https://docs.rs/warp/latest/warp/trait.Filter.html) system, warp provides these out of the box:\n  * Path routing and parameter extraction\n  * Header requirements and extraction\n  * Query string deserialization\n  * JSON and Form bodies\n  * Multipart form data\n  * Static Files and Directories\n  * Websockets\n  * Access logging\n  * Etc\n\n\nSince it builds on top of [hyper](https://hyper.rs), you automatically get:\n  * HTTP/1\n  * HTTP/2\n  * Asynchronous\n  * One of the fastest HTTP implementations\n  * Tested and **correct**\n\n\n### [\u00a7](https://docs.rs/warp/latest/warp/#filters)Filters\nThe main concept in warp is the [`Filter`](https://docs.rs/warp/latest/warp/trait.Filter.html), which allows composition to describe various endpoints in your web service. Besides this powerful trait, warp comes with several built in [filters](https://docs.rs/warp/latest/warp/filters/index.html), which can be combined for your specific needs.\nAs a small example, consider an endpoint that has path and header requirements:\n```\nuse warp::Filter;\nlet hi = warp::path(\"hello\")\n  .and(warp::path::param())\n  .and(warp::header(\"user-agent\"))\n  .map(|param: String, agent: String| {\n    format!(\"Hello {}, whose agent is {}\", param, agent)\n  });\n```\n\nThis example composes several [`Filter`s](https://docs.rs/warp/latest/warp/trait.Filter.html) together using `and`:\n  * A path prefix of \u201chello\u201d\n  * A path parameter of a `String`\n  * The `user-agent` header parsed as a `String`\n\n\nThese specific filters will [`reject`](https://docs.rs/warp/latest/warp/reject/index.html) requests that don\u2019t match their requirements.\nThis ends up matching requests like:\n```\nGET /hello/sean HTTP/1.1\nHost: hyper.rs\nUser-Agent: reqwest/v0.8.6\n\n```\n\nAnd it returns a response similar to this:\n```\nHTTP/1.1 200 OK\nContent-Length: 41\nDate: ...\nHello sean, whose agent is reqwest/v0.8.6\n```\n\nTake a look at the full list of [`filters`](https://docs.rs/warp/latest/warp/filters/index.html) to see what you can build.\n### [\u00a7](https://docs.rs/warp/latest/warp/#testing)Testing\nTesting your web services easily is extremely important, and warp provides a [`test`](https://docs.rs/warp/latest/warp/test/index.html \"mod warp::test\") module to help send mocked requests through your service.\n## Modules[\u00a7](https://docs.rs/warp/latest/warp/#modules)\n\n[filters](https://docs.rs/warp/latest/warp/filters/index.html \"mod warp::filters\")\n    Built-in Filters\n\n[redirect](https://docs.rs/warp/latest/warp/redirect/index.html \"mod warp::redirect\")\n    Redirect requests to a new location.\n\n[reject](https://docs.rs/warp/latest/warp/reject/index.html \"mod warp::reject\")\n    Rejections\n\n[reply](https://docs.rs/warp/latest/warp/reply/index.html \"mod warp::reply\")\n    Reply to requests.\n\n[test](https://docs.rs/warp/latest/warp/test/index.html \"mod warp::test\")\n    Test utilities to test your filters.\n## Macros[\u00a7](https://docs.rs/warp/latest/warp/#macros)\n\n[path](https://docs.rs/warp/latest/warp/macro.path.html \"macro warp::path\")\n    Convenient way to chain multiple path filters together.\n## Structs[\u00a7](https://docs.rs/warp/latest/warp/#structs)\n\n[Error](https://docs.rs/warp/latest/warp/struct.Error.html \"struct warp::Error\")\n    Errors that can happen inside warp.\n\n[Server](https://docs.rs/warp/latest/warp/struct.Server.html \"struct warp::Server\")\n    A Warp Server ready to filter requests.\n\n[TlsServer](https://docs.rs/warp/latest/warp/struct.TlsServer.html \"struct warp::TlsServer\")\n    A Warp Server ready to filter requests over TLS.\n## Traits[\u00a7](https://docs.rs/warp/latest/warp/#traits)\n\n[Filter](https://docs.rs/warp/latest/warp/trait.Filter.html \"trait warp::Filter\")\n    Composable request filters.\n## Functions[\u00a7](https://docs.rs/warp/latest/warp/#functions)\n\n[serve](https://docs.rs/warp/latest/warp/fn.serve.html \"fn warp::serve\")\n    Create a `Server` with the provided `Filter`.\n\n[service](https://docs.rs/warp/latest/warp/fn.service.html \"fn warp::service\")\n    Convert a `Filter` into a `Service`.\n\n[wrap_fn](https://docs.rs/warp/latest/warp/fn.wrap_fn.html \"fn warp::wrap_fn\")\n    Combines received filter with pre and after filters\n",
        "markdown_with_citations": "[](https://docs.rs/warp/latest/warp/all.html \"show sidebar\")\n# Crate warpCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9warp\nwarp is a super-easy, composable, web server framework for warp speeds.\nThanks to its `Filter`\u27e85\u27e9 system, warp provides these out of the box:\n  * Path routing and parameter extraction\n  * Header requirements and extraction\n  * Query string deserialization\n  * JSON and Form bodies\n  * Multipart form data\n  * Static Files and Directories\n  * Websockets\n  * Access logging\n  * Etc\n\n\nSince it builds on top of hyper\u27e86\u27e9, you automatically get:\n  * HTTP/1\n  * HTTP/2\n  * Asynchronous\n  * One of the fastest HTTP implementations\n  * Tested and **correct**\n\n\n### \u00a7\u27e87\u27e9Filters\nThe main concept in warp is the `Filter`\u27e85\u27e9, which allows composition to describe various endpoints in your web service. Besides this powerful trait, warp comes with several built in filters\u27e88\u27e9, which can be combined for your specific needs.\nAs a small example, consider an endpoint that has path and header requirements:\n```\nuse warp::Filter;\nlet hi = warp::path(\"hello\")\n  .and(warp::path::param())\n  .and(warp::header(\"user-agent\"))\n  .map(|param: String, agent: String| {\n    format!(\"Hello {}, whose agent is {}\", param, agent)\n  });\n```\n\nThis example composes several `Filter`s\u27e85\u27e9 together using `and`:\n  * A path prefix of \u201chello\u201d\n  * A path parameter of a `String`\n  * The `user-agent` header parsed as a `String`\n\n\nThese specific filters will `reject`\u27e89\u27e9 requests that don\u2019t match their requirements.\nThis ends up matching requests like:\n```\nGET /hello/sean HTTP/1.1\nHost: hyper.rs\nUser-Agent: reqwest/v0.8.6\n\n```\n\nAnd it returns a response similar to this:\n```\nHTTP/1.1 200 OK\nContent-Length: 41\nDate: ...\nHello sean, whose agent is reqwest/v0.8.6\n```\n\nTake a look at the full list of `filters`\u27e88\u27e9 to see what you can build.\n### \u00a7\u27e810\u27e9Testing\nTesting your web services easily is extremely important, and warp provides a `test`\u27e811\u27e9 module to help send mocked requests through your service.\n## Modules\u00a7\u27e812\u27e9\n\nfilters\u27e88\u27e9\n    Built-in Filters\n\nredirect\u27e813\u27e9\n    Redirect requests to a new location.\n\nreject\u27e89\u27e9\n    Rejections\n\nreply\u27e814\u27e9\n    Reply to requests.\n\ntest\u27e811\u27e9\n    Test utilities to test your filters.\n## Macros\u00a7\u27e815\u27e9\n\npath\u27e816\u27e9\n    Convenient way to chain multiple path filters together.\n## Structs\u00a7\u27e817\u27e9\n\nError\u27e818\u27e9\n    Errors that can happen inside warp.\n\nServer\u27e819\u27e9\n    A Warp Server ready to filter requests.\n\nTlsServer\u27e820\u27e9\n    A Warp Server ready to filter requests over TLS.\n## Traits\u00a7\u27e821\u27e9\n\nFilter\u27e85\u27e9\n    Composable request filters.\n## Functions\u00a7\u27e822\u27e9\n\nserve\u27e823\u27e9\n    Create a `Server` with the provided `Filter`.\n\nservice\u27e824\u27e9\n    Convert a `Filter` into a `Service`.\n\nwrap_fn\u27e825\u27e9\n    Combines received filter with pre and after filters\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/warp/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/warp/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/warp/latest/src/warp/lib.rs.html#1-178: Source\n\u27e84\u27e9 https://docs.rs/warp/latest/warp/#warp: \u00a7\n\u27e85\u27e9 https://docs.rs/warp/latest/warp/trait.Filter.html: `Filter`\n\u27e86\u27e9 https://hyper.rs: hyper\n\u27e87\u27e9 https://docs.rs/warp/latest/warp/#filters: \u00a7\n\u27e88\u27e9 https://docs.rs/warp/latest/warp/filters/index.html: filters\n\u27e89\u27e9 https://docs.rs/warp/latest/warp/reject/index.html: `reject`\n\u27e810\u27e9 https://docs.rs/warp/latest/warp/#testing: \u00a7\n\u27e811\u27e9 https://docs.rs/warp/latest/warp/test/index.html: mod warp::test - `test`\n\u27e812\u27e9 https://docs.rs/warp/latest/warp/#modules: \u00a7\n\u27e813\u27e9 https://docs.rs/warp/latest/warp/redirect/index.html: mod warp::redirect - redirect\n\u27e814\u27e9 https://docs.rs/warp/latest/warp/reply/index.html: mod warp::reply - reply\n\u27e815\u27e9 https://docs.rs/warp/latest/warp/#macros: \u00a7\n\u27e816\u27e9 https://docs.rs/warp/latest/warp/macro.path.html: macro warp::path - path\n\u27e817\u27e9 https://docs.rs/warp/latest/warp/#structs: \u00a7\n\u27e818\u27e9 https://docs.rs/warp/latest/warp/struct.Error.html: struct warp::Error - Error\n\u27e819\u27e9 https://docs.rs/warp/latest/warp/struct.Server.html: struct warp::Server - Server\n\u27e820\u27e9 https://docs.rs/warp/latest/warp/struct.TlsServer.html: struct warp::TlsServer - TlsServer\n\u27e821\u27e9 https://docs.rs/warp/latest/warp/#traits: \u00a7\n\u27e822\u27e9 https://docs.rs/warp/latest/warp/#functions: \u00a7\n\u27e823\u27e9 https://docs.rs/warp/latest/warp/fn.serve.html: fn warp::serve - serve\n\u27e824\u27e9 https://docs.rs/warp/latest/warp/fn.service.html: fn warp::service - service\n\u27e825\u27e9 https://docs.rs/warp/latest/warp/fn.wrap_fn.html: fn warp::wrap_fn - wrap_fn\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `warp` crate is a fast, composable web server framework built on top of `hyper`, offering HTTP/1 and HTTP/2 support with asynchronous capabilities. Its core feature is the `Filter` system, enabling flexible composition for tasks like path routing, parameter extraction, query deserialization, JSON/form handling, static file serving, WebSocket support, and access logging. Additionally, it provides utilities for testing, error handling, and TLS support.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: Path Routing and Parameter Extraction  \n\u2705 **Factual**: The `warp` crate provides built-in filters for path routing and parameter extraction, allowing developers to define endpoints with specific path prefixes and parameters.  \n\u274c **Counterfactual**: The `warp` crate requires manual implementation of path routing and parameter extraction, as it does not provide built-in filters for these features.  \n\n---\n\n### Pair 2: HTTP Protocol Support  \n\u2705 **Factual**: `warp` builds on top of the `hyper` library, enabling support for both HTTP/1 and HTTP/2 protocols with asynchronous handling.  \n\u274c **Counterfactual**: `warp` only supports HTTP/1 and lacks compatibility with HTTP/2, as it does not integrate with the `hyper` library.  \n\n---\n\n### Pair 3: WebSocket Support  \n\u2705 **Factual**: The `warp` crate includes built-in support for WebSocket connections, allowing developers to easily handle real-time communication.  \n\u274c **Counterfactual**: The `warp` crate does not support WebSocket connections, requiring developers to use external libraries for real-time communication.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}