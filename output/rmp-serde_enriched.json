{
    "name": "rmp-serde",
    "version": "1.3.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/rmp-serde/latest/rmp_serde/all.html \"show sidebar\")\n# Crate rmp_serdeCopy item path\n[Settings](https://docs.rs/rmp-serde/latest/settings.html)\n[Help](https://docs.rs/rmp-serde/latest/help.html)\nSummary[Source](https://docs.rs/rmp-serde/latest/src/rmp_serde/lib.rs.html#1-337)\nExpand description\n## [\u00a7](https://docs.rs/rmp-serde/latest/rmp_serde/#messagepack--serde)MessagePack + Serde\nThis crate connects Rust MessagePack library with [`serde`](https://serde.rs/) providing an ability to easily serialize and deserialize both Rust built-in types, the standard library and custom data structures.\n### [\u00a7](https://docs.rs/rmp-serde/latest/rmp_serde/#motivating-example)Motivating example\n```\nlet buf = rmp_serde::to_vec(&(42, \"the Answer\")).unwrap();\nassert_eq!(\n  vec![0x92, 0x2a, 0xaa, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72],\n  buf\n);\nassert_eq!((42, \"the Answer\"), rmp_serde::from_slice(&buf).unwrap());\n```\n\n### [\u00a7](https://docs.rs/rmp-serde/latest/rmp_serde/#type-based-serialization-and-deserialization)Type-based Serialization and Deserialization\nSerde provides a mechanism for low boilerplate serialization & deserialization of values to and from MessagePack via the serialization API.\nTo be able to serialize a piece of data, it must implement the `serde::Serialize` trait. To be able to deserialize a piece of data, it must implement the `serde::Deserialize` trait. Serde provides an annotation to automatically generate the code for these traits: `#[derive(Serialize, Deserialize)]`.\n### [\u00a7](https://docs.rs/rmp-serde/latest/rmp_serde/#examples)Examples\n```\nuse std::collections::HashMap;\nuse serde::{Deserialize, Serialize};\nuse rmp_serde::{Deserializer, Serializer};\n#[derive(Debug, PartialEq, Deserialize, Serialize)]\nstruct Human {\n  age: u32,\n  name: String,\n}\nfn main() {\n  let mut buf = Vec::new();\n  let val = Human {\n    age: 42,\n    name: \"John\".into(),\n  };\n  val.serialize(&mut Serializer::new(&mut buf)).unwrap();\n}\n```\n\n### [\u00a7](https://docs.rs/rmp-serde/latest/rmp_serde/#efficient-storage-of-u8-types)Efficient storage of `&[u8]` types\nMessagePack can efficiently store binary data. However, Serde\u2019s standard derived implementations _do not_ use binary representations by default. Serde prefers to represent types like `&[u8; N]` or `Vec<u8>` as arrays of objects of arbitrary/unknown type, and not as slices of bytes. This creates about a 50% overhead in storage size.\nWrap your data in [`serde_bytes`](https://lib.rs/crates/serde_bytes) to store blobs quickly and efficiently. Alternatively, [configure an override in `rmp_serde` to force use of byte slices](https://docs.rs/rmp-serde/latest/rmp_serde/encode/struct.Serializer.html#method.with_bytes).\n## Re-exports[\u00a7](https://docs.rs/rmp-serde/latest/rmp_serde/#reexports)\n\n`pub use crate::decode::from_read[](https://docs.rs/rmp-serde/latest/rmp_serde/decode/fn.from_read.html \"fn rmp_serde::decode::from_read\");`\n\n\n`pub use crate::decode::Deserializer[](https://docs.rs/rmp-serde/latest/rmp_serde/decode/struct.Deserializer.html \"struct rmp_serde::decode::Deserializer\");`\n\n\n`pub use crate::encode::to_vec[](https://docs.rs/rmp-serde/latest/rmp_serde/encode/fn.to_vec.html \"fn rmp_serde::encode::to_vec\");`\n\n\n`pub use crate::encode::to_vec_named[](https://docs.rs/rmp-serde/latest/rmp_serde/encode/fn.to_vec_named.html \"fn rmp_serde::encode::to_vec_named\");`\n\n\n`pub use crate::encode::Serializer[](https://docs.rs/rmp-serde/latest/rmp_serde/encode/struct.Serializer.html \"struct rmp_serde::encode::Serializer\");`\n\n\n`pub use crate::decode::from_slice[](https://docs.rs/rmp-serde/latest/rmp_serde/decode/fn.from_slice.html \"fn rmp_serde::decode::from_slice\");`\n\n## Modules[\u00a7](https://docs.rs/rmp-serde/latest/rmp_serde/#modules)\n\n[config](https://docs.rs/rmp-serde/latest/rmp_serde/config/index.html \"mod rmp_serde::config\")\n    Change MessagePack behavior with configuration wrappers.\n\n[decode](https://docs.rs/rmp-serde/latest/rmp_serde/decode/index.html \"mod rmp_serde::decode\")\n    Generic MessagePack deserialization.\n\n[encode](https://docs.rs/rmp-serde/latest/rmp_serde/encode/index.html \"mod rmp_serde::encode\")\n    Serialize a Rust data structure into MessagePack data.\n## Constants[\u00a7](https://docs.rs/rmp-serde/latest/rmp_serde/#constants)\n\n[MSGPACK_EXT_STRUCT_NAME](https://docs.rs/rmp-serde/latest/rmp_serde/constant.MSGPACK_EXT_STRUCT_NAME.html \"constant rmp_serde::MSGPACK_EXT_STRUCT_NAME\")\n    Hack used to serialize MessagePack Extension types.\n",
        "markdown_with_citations": "[](https://docs.rs/rmp-serde/latest/rmp_serde/all.html \"show sidebar\")\n# Crate rmp_serdeCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9MessagePack + Serde\nThis crate connects Rust MessagePack library with `serde`\u27e85\u27e9 providing an ability to easily serialize and deserialize both Rust built-in types, the standard library and custom data structures.\n### \u00a7\u27e86\u27e9Motivating example\n```\nlet buf = rmp_serde::to_vec(&(42, \"the Answer\")).unwrap();\nassert_eq!(\n  vec![0x92, 0x2a, 0xaa, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72],\n  buf\n);\nassert_eq!((42, \"the Answer\"), rmp_serde::from_slice(&buf).unwrap());\n```\n\n### \u00a7\u27e87\u27e9Type-based Serialization and Deserialization\nSerde provides a mechanism for low boilerplate serialization & deserialization of values to and from MessagePack via the serialization API.\nTo be able to serialize a piece of data, it must implement the `serde::Serialize` trait. To be able to deserialize a piece of data, it must implement the `serde::Deserialize` trait. Serde provides an annotation to automatically generate the code for these traits: `#[derive(Serialize, Deserialize)]`.\n### \u00a7\u27e88\u27e9Examples\n```\nuse std::collections::HashMap;\nuse serde::{Deserialize, Serialize};\nuse rmp_serde::{Deserializer, Serializer};\n#[derive(Debug, PartialEq, Deserialize, Serialize)]\nstruct Human {\n  age: u32,\n  name: String,\n}\nfn main() {\n  let mut buf = Vec::new();\n  let val = Human {\n    age: 42,\n    name: \"John\".into(),\n  };\n  val.serialize(&mut Serializer::new(&mut buf)).unwrap();\n}\n```\n\n### \u00a7\u27e89\u27e9Efficient storage of `&[u8]` types\nMessagePack can efficiently store binary data. However, Serde\u2019s standard derived implementations _do not_ use binary representations by default. Serde prefers to represent types like `&[u8; N]` or `Vec<u8>` as arrays of objects of arbitrary/unknown type, and not as slices of bytes. This creates about a 50% overhead in storage size.\nWrap your data in `serde_bytes`\u27e810\u27e9 to store blobs quickly and efficiently. Alternatively, configure an override in `rmp_serde` to force use of byte slices\u27e811\u27e9.\n## Re-exports\u00a7\u27e812\u27e9\n\n`pub use crate::decode::from_read[](https://docs.rs/rmp-serde/latest/rmp_serde/decode/fn.from_read.html \"fn rmp_serde::decode::from_read\");`\n\n\n`pub use crate::decode::Deserializer[](https://docs.rs/rmp-serde/latest/rmp_serde/decode/struct.Deserializer.html \"struct rmp_serde::decode::Deserializer\");`\n\n\n`pub use crate::encode::to_vec[](https://docs.rs/rmp-serde/latest/rmp_serde/encode/fn.to_vec.html \"fn rmp_serde::encode::to_vec\");`\n\n\n`pub use crate::encode::to_vec_named[](https://docs.rs/rmp-serde/latest/rmp_serde/encode/fn.to_vec_named.html \"fn rmp_serde::encode::to_vec_named\");`\n\n\n`pub use crate::encode::Serializer[](https://docs.rs/rmp-serde/latest/rmp_serde/encode/struct.Serializer.html \"struct rmp_serde::encode::Serializer\");`\n\n\n`pub use crate::decode::from_slice[](https://docs.rs/rmp-serde/latest/rmp_serde/decode/fn.from_slice.html \"fn rmp_serde::decode::from_slice\");`\n\n## Modules\u00a7\u27e813\u27e9\n\nconfig\u27e814\u27e9\n    Change MessagePack behavior with configuration wrappers.\n\ndecode\u27e815\u27e9\n    Generic MessagePack deserialization.\n\nencode\u27e816\u27e9\n    Serialize a Rust data structure into MessagePack data.\n## Constants\u00a7\u27e817\u27e9\n\nMSGPACK_EXT_STRUCT_NAME\u27e818\u27e9\n    Hack used to serialize MessagePack Extension types.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rmp-serde/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rmp-serde/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rmp-serde/latest/src/rmp_serde/lib.rs.html#1-337: Source\n\u27e84\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/#messagepack--serde: \u00a7\n\u27e85\u27e9 https://serde.rs/: `serde`\n\u27e86\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/#motivating-example: \u00a7\n\u27e87\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/#type-based-serialization-and-deserialization: \u00a7\n\u27e88\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/#examples: \u00a7\n\u27e89\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/#efficient-storage-of-u8-types: \u00a7\n\u27e810\u27e9 https://lib.rs/crates/serde_bytes: `serde_bytes`\n\u27e811\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/encode/struct.Serializer.html#method.with_bytes: configure an override in `rmp_serde` to force use of byte slices\n\u27e812\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/#reexports: \u00a7\n\u27e813\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/#modules: \u00a7\n\u27e814\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/config/index.html: mod rmp_serde::config - config\n\u27e815\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/decode/index.html: mod rmp_serde::decode - decode\n\u27e816\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/encode/index.html: mod rmp_serde::encode - encode\n\u27e817\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/#constants: \u00a7\n\u27e818\u27e9 https://docs.rs/rmp-serde/latest/rmp_serde/constant.MSGPACK_EXT_STRUCT_NAME.html: constant rmp_serde::MSGPACK_EXT_STRUCT_NAME - MSGPACK_EXT_STRUCT_NAME\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `rmp-serde` crate integrates the MessagePack serialization format with Serde, enabling efficient serialization and deserialization of Rust built-in types, standard library types, and custom data structures. It supports type-based serialization via `#[derive(Serialize, Deserialize)]`, provides efficient storage for binary data using `serde_bytes`, and offers configurable options for optimizing byte slice handling. Key utilities include `to_vec`, `from_slice`, and customizable serializers/deserializers.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1: Serialization and Deserialization\n\u2705 **Factual**: The `rmp-serde` crate allows for serialization and deserialization of Rust built-in types, standard library types, and custom data structures by leveraging the `serde::Serialize` and `serde::Deserialize` traits.  \n\u274c **Counterfactual**: The `rmp-serde` crate automatically serializes and deserializes all Rust types without requiring the implementation of `serde::Serialize` and `serde::Deserialize` traits.\n\n---\n\n### Pair 2: Efficient Storage of Binary Data\n\u2705 **Factual**: `rmp-serde` can efficiently store binary data when paired with the `serde_bytes` crate or by configuring the `Serializer` to use byte slices, reducing storage overhead by approximately 50%.  \n\u274c **Counterfactual**: `rmp-serde` always uses binary representations for types like `Vec<u8>` or `&[u8]` by default, without requiring additional configuration or external crates.\n\n---\n\n### Pair 3: Custom Configuration\n\u2705 **Factual**: The `rmp-serde` crate provides configuration wrappers via its `config` module to customize MessagePack serialization behavior, such as enabling compact encoding or controlling type representations.  \n\u274c **Counterfactual**: The `rmp-serde` crate does not allow any customization of MessagePack serialization behavior and strictly adheres to default settings without user overrides.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}