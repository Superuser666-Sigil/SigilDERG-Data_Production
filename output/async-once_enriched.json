{
    "name": "async-once",
    "version": "0.2.6",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/async_once/latest/async_once/all.html \"show sidebar\")\n# Crate async_onceCopy item path\n[Settings](https://docs.rs/async_once/latest/settings.html)\n[Help](https://docs.rs/async_once/latest/help.html)\nSummary[Source](https://docs.rs/async_once/latest/src/async_once/lib.rs.html#1-212)\nExpand description\n### [\u00a7](https://docs.rs/async_once/latest/async_once/#async-once-tool-for-lazy_static)async once tool for lazy_static\n## [\u00a7](https://docs.rs/async_once/latest/async_once/#examples)Examples\n```\n  use lazy_static::lazy_static;\n  use tokio::runtime::Builder;\n  use async_once::AsyncOnce;\n  lazy_static!{\n    static ref FOO : AsyncOnce<u32> = AsyncOnce::new(async{\n      1\n    });\n  }\n  let rt = Builder::new_current_thread().build().unwrap();\n  rt.block_on(async {\n    assert_eq!(FOO.get().await , &1)\n  })\n```\n\n#### [\u00a7](https://docs.rs/async_once/latest/async_once/#run-tests)run tests\n```\n  cargo test\n  wasm-pack test --headless --chrome --firefox\n```\n\n## Structs[\u00a7](https://docs.rs/async_once/latest/async_once/#structs)\n\n[AsyncOnce](https://docs.rs/async_once/latest/async_once/struct.AsyncOnce.html \"struct async_once::AsyncOnce\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/async_once/latest/async_once/all.html \"show sidebar\")\n# Crate async_onceCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n### \u00a7\u27e84\u27e9async once tool for lazy_static\n## \u00a7\u27e85\u27e9Examples\n```\n  use lazy_static::lazy_static;\n  use tokio::runtime::Builder;\n  use async_once::AsyncOnce;\n  lazy_static!{\n    static ref FOO : AsyncOnce<u32> = AsyncOnce::new(async{\n      1\n    });\n  }\n  let rt = Builder::new_current_thread().build().unwrap();\n  rt.block_on(async {\n    assert_eq!(FOO.get().await , &1)\n  })\n```\n\n#### \u00a7\u27e86\u27e9run tests\n```\n  cargo test\n  wasm-pack test --headless --chrome --firefox\n```\n\n## Structs\u00a7\u27e87\u27e9\n\nAsyncOnce\u27e88\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async_once/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async_once/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async_once/latest/src/async_once/lib.rs.html#1-212: Source\n\u27e84\u27e9 https://docs.rs/async_once/latest/async_once/#async-once-tool-for-lazy_static: \u00a7\n\u27e85\u27e9 https://docs.rs/async_once/latest/async_once/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/async_once/latest/async_once/#run-tests: \u00a7\n\u27e87\u27e9 https://docs.rs/async_once/latest/async_once/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/async_once/latest/async_once/struct.AsyncOnce.html: struct async_once::AsyncOnce - AsyncOnce\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `async-once` crate provides an `AsyncOnce` utility for initializing asynchronous values lazily, similar to `lazy_static`, but designed for async contexts. It ensures that the initialization logic runs only once and provides safe concurrent access to the resulting value. Key features include easy integration with async runtimes like Tokio and compatibility with testing frameworks, including support for WebAssembly environments.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 4.0,
    "factual_counterfactual": "### Pair 1: Lazy Initialization with AsyncOnce  \n\u2705 **Factual:** The `async_once` crate provides the `AsyncOnce` struct, which enables lazy initialization of asynchronous values, ensuring the value is computed only once and reused in subsequent calls.  \n\u274c **Counterfactual:** The `async_once` crate requires the value to be computed synchronously before being accessed asynchronously, making it incompatible with purely asynchronous workflows.  \n\n---\n\n### Pair 2: Integration with `lazy_static`  \n\u2705 **Factual:** The `async_once` crate integrates seamlessly with the `lazy_static` macro, allowing developers to define asynchronous values that are lazily initialized and globally accessible.  \n\u274c **Counterfactual:** The `async_once` crate does not support integration with `lazy_static`, requiring developers to manually manage global asynchronous state.  \n\n---\n\n### Pair 3: Thread-Safety and Runtime Compatibility  \n\u2705 **Factual:** The `AsyncOnce` struct is thread-safe and works well with the `tokio` runtime, allowing asynchronous values to be accessed concurrently across threads without race conditions.  \n\u274c **Counterfactual:** The `AsyncOnce` struct is not thread-safe and can lead to race conditions when accessed concurrently in multi-threaded environments.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}