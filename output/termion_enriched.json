{
    "name": "termion",
    "version": "4.0.5",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/termion/latest/termion/all.html \"show sidebar\")\n# Crate termionCopy item path\n[Settings](https://docs.rs/termion/latest/settings.html)\n[Help](https://docs.rs/termion/latest/help.html)\nSummary[Source](https://docs.rs/termion/latest/src/termion/lib.rs.html#1-71)\nExpand description\nTermion is a pure Rust, bindless library for low-level handling, manipulating and reading information about terminals. This provides a full-featured alternative to Termbox.\nTermion aims to be simple and yet expressive. It is bindless, meaning that it is not a front-end to some other library (e.g., ncurses or termbox), but a standalone library directly talking to the TTY.\nSupports Redox, Mac OS X, and Linux (or, in general, ANSI terminals).\nFor more information refer to the [README](https://github.com/redox-os/termion).\n## Modules[\u00a7](https://docs.rs/termion/latest/termion/#modules)\n\n[clear](https://docs.rs/termion/latest/termion/clear/index.html \"mod termion::clear\")\n    Clearing the screen.\n\n[color](https://docs.rs/termion/latest/termion/color/index.html \"mod termion::color\")\n    Color managemement.\n\n[cursor](https://docs.rs/termion/latest/termion/cursor/index.html \"mod termion::cursor\")\n    Cursor movement.\n\n[event](https://docs.rs/termion/latest/termion/event/index.html \"mod termion::event\")\n    Mouse and key events.\n\n[input](https://docs.rs/termion/latest/termion/input/index.html \"mod termion::input\")\n    User input.\n\n[raw](https://docs.rs/termion/latest/termion/raw/index.html \"mod termion::raw\")\n    Managing raw mode.\n\n[screen](https://docs.rs/termion/latest/termion/screen/index.html \"mod termion::screen\")\n    Managing switching between main and alternate screen buffers.\n\n[scroll](https://docs.rs/termion/latest/termion/scroll/index.html \"mod termion::scroll\")\n    Scrolling.\n\n[style](https://docs.rs/termion/latest/termion/style/index.html \"mod termion::style\")\n    Text styling management.\n## Structs[\u00a7](https://docs.rs/termion/latest/termion/#structs)\n\n[AsyncReader](https://docs.rs/termion/latest/termion/struct.AsyncReader.html \"struct termion::AsyncReader\")\n    An asynchronous reader.\n## Functions[\u00a7](https://docs.rs/termion/latest/termion/#functions)\n\n[async_stdin](https://docs.rs/termion/latest/termion/fn.async_stdin.html \"fn termion::async_stdin\")\n    Construct an asynchronous handle to the TTY standard input.\n\n[get_tty](https://docs.rs/termion/latest/termion/fn.get_tty.html \"fn termion::get_tty\")\n    Get the TTY device.\n\n[is_tty](https://docs.rs/termion/latest/termion/fn.is_tty.html \"fn termion::is_tty\")\n    Is this stream a TTY?\n\n[terminal_size](https://docs.rs/termion/latest/termion/fn.terminal_size.html \"fn termion::terminal_size\")\n    Get the size (columns, rows) of the terminal.\n\n[terminal_size_fd](https://docs.rs/termion/latest/termion/fn.terminal_size_fd.html \"fn termion::terminal_size_fd\")\n    Get the size (columns, rows) of the terminal from descriptor object.\n\n[terminal_size_pixels](https://docs.rs/termion/latest/termion/fn.terminal_size_pixels.html \"fn termion::terminal_size_pixels\")\n    Get the size of the terminal in pixels.\n\n[terminal_size_pixels_fd](https://docs.rs/termion/latest/termion/fn.terminal_size_pixels_fd.html \"fn termion::terminal_size_pixels_fd\")\n    Get the size of the terminal in pixels from descriptor object.\n",
        "markdown_with_citations": "[](https://docs.rs/termion/latest/termion/all.html \"show sidebar\")\n# Crate termionCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nTermion is a pure Rust, bindless library for low-level handling, manipulating and reading information about terminals. This provides a full-featured alternative to Termbox.\nTermion aims to be simple and yet expressive. It is bindless, meaning that it is not a front-end to some other library (e.g., ncurses or termbox), but a standalone library directly talking to the TTY.\nSupports Redox, Mac OS X, and Linux (or, in general, ANSI terminals).\nFor more information refer to the README\u27e84\u27e9.\n## Modules\u00a7\u27e85\u27e9\n\nclear\u27e86\u27e9\n    Clearing the screen.\n\ncolor\u27e87\u27e9\n    Color managemement.\n\ncursor\u27e88\u27e9\n    Cursor movement.\n\nevent\u27e89\u27e9\n    Mouse and key events.\n\ninput\u27e810\u27e9\n    User input.\n\nraw\u27e811\u27e9\n    Managing raw mode.\n\nscreen\u27e812\u27e9\n    Managing switching between main and alternate screen buffers.\n\nscroll\u27e813\u27e9\n    Scrolling.\n\nstyle\u27e814\u27e9\n    Text styling management.\n## Structs\u00a7\u27e815\u27e9\n\nAsyncReader\u27e816\u27e9\n    An asynchronous reader.\n## Functions\u00a7\u27e817\u27e9\n\nasync_stdin\u27e818\u27e9\n    Construct an asynchronous handle to the TTY standard input.\n\nget_tty\u27e819\u27e9\n    Get the TTY device.\n\nis_tty\u27e820\u27e9\n    Is this stream a TTY?\n\nterminal_size\u27e821\u27e9\n    Get the size (columns, rows) of the terminal.\n\nterminal_size_fd\u27e822\u27e9\n    Get the size (columns, rows) of the terminal from descriptor object.\n\nterminal_size_pixels\u27e823\u27e9\n    Get the size of the terminal in pixels.\n\nterminal_size_pixels_fd\u27e824\u27e9\n    Get the size of the terminal in pixels from descriptor object.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/termion/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/termion/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/termion/latest/src/termion/lib.rs.html#1-71: Source\n\u27e84\u27e9 https://github.com/redox-os/termion: README\n\u27e85\u27e9 https://docs.rs/termion/latest/termion/#modules: \u00a7\n\u27e86\u27e9 https://docs.rs/termion/latest/termion/clear/index.html: mod termion::clear - clear\n\u27e87\u27e9 https://docs.rs/termion/latest/termion/color/index.html: mod termion::color - color\n\u27e88\u27e9 https://docs.rs/termion/latest/termion/cursor/index.html: mod termion::cursor - cursor\n\u27e89\u27e9 https://docs.rs/termion/latest/termion/event/index.html: mod termion::event - event\n\u27e810\u27e9 https://docs.rs/termion/latest/termion/input/index.html: mod termion::input - input\n\u27e811\u27e9 https://docs.rs/termion/latest/termion/raw/index.html: mod termion::raw - raw\n\u27e812\u27e9 https://docs.rs/termion/latest/termion/screen/index.html: mod termion::screen - screen\n\u27e813\u27e9 https://docs.rs/termion/latest/termion/scroll/index.html: mod termion::scroll - scroll\n\u27e814\u27e9 https://docs.rs/termion/latest/termion/style/index.html: mod termion::style - style\n\u27e815\u27e9 https://docs.rs/termion/latest/termion/#structs: \u00a7\n\u27e816\u27e9 https://docs.rs/termion/latest/termion/struct.AsyncReader.html: struct termion::AsyncReader - AsyncReader\n\u27e817\u27e9 https://docs.rs/termion/latest/termion/#functions: \u00a7\n\u27e818\u27e9 https://docs.rs/termion/latest/termion/fn.async_stdin.html: fn termion::async_stdin - async_stdin\n\u27e819\u27e9 https://docs.rs/termion/latest/termion/fn.get_tty.html: fn termion::get_tty - get_tty\n\u27e820\u27e9 https://docs.rs/termion/latest/termion/fn.is_tty.html: fn termion::is_tty - is_tty\n\u27e821\u27e9 https://docs.rs/termion/latest/termion/fn.terminal_size.html: fn termion::terminal_size - terminal_size\n\u27e822\u27e9 https://docs.rs/termion/latest/termion/fn.terminal_size_fd.html: fn termion::terminal_size_fd - terminal_size_fd\n\u27e823\u27e9 https://docs.rs/termion/latest/termion/fn.terminal_size_pixels.html: fn termion::terminal_size_pixels - terminal_size_pixels\n\u27e824\u27e9 https://docs.rs/termion/latest/termion/fn.terminal_size_pixels_fd.html: fn termion::terminal_size_pixels_fd - terminal_size_pixels_fd\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `termion` crate is a pure Rust library for low-level terminal handling, offering features like cursor movement, screen clearing, color management, text styling, and raw mode management. It supports ANSI terminals across Linux, macOS, and Redox, and provides utilities for handling terminal size, asynchronous input, and mouse/key events. Unlike bindings to external libraries, `termion` directly interacts with the TTY for standalone functionality.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Terminal Size Functionality  \n\u2705 **Factual**: The `termion` crate provides the `terminal_size` function to retrieve the terminal's size in terms of columns and rows.  \n\u274c **Counterfactual**: The `termion` crate can dynamically resize the terminal window to a specified size using the `terminal_size` function.  \n\n---\n\n### Pair 2: Raw Mode Management  \n\u2705 **Factual**: The `termion::raw` module allows developers to enable raw mode, which disables input buffering and line editing for more direct terminal interaction.  \n\u274c **Counterfactual**: The `termion::raw` module automatically handles raw mode without requiring explicit activation by the developer.  \n\n---\n\n### Pair 3: Platform Support  \n\u2705 **Factual**: The `termion` crate supports ANSI-compatible terminals on platforms like Linux, macOS, and Redox OS.  \n\u274c **Counterfactual**: The `termion` crate provides built-in support for Windows CMD terminals without requiring additional compatibility layers.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}