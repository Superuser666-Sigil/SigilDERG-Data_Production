{
    "name": "async-trait",
    "version": "0.1.88",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/async-trait/latest/async_trait/all.html \"show sidebar\")\n# Crate async_traitCopy item path\n[Settings](https://docs.rs/async-trait/latest/settings.html)\n[Help](https://docs.rs/async-trait/latest/help.html)\nSummary[Source](https://docs.rs/async-trait/latest/src/async_trait/lib.rs.html#1-257)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/async-trait) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/async-trait) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/async-trait)\n#### Type erasure for async trait methods\nThe stabilization of async functions in traits in Rust 1.75 did not include support for using traits containing async functions as `dyn Trait`. Trying to use dyn with an async trait produces the following error:\n[\u24d8](https://docs.rs/async-trait/latest/async_trait/ \"This example deliberately fails to compile\")```\npub trait Trait {\n  async fn f(&self);\n}\npub fn make() -> Box<dyn Trait> {\n  unimplemented!()\n}\n```\n\n```\nerror[E0038]: the trait `Trait` is not dyn compatible\n --> src/main.rs:5:22\n |\n5 | pub fn make() -> Box<dyn Trait> {\n |           ^^^^^^^^^ `Trait` is not dyn compatible\n |\nnote: for a trait to be dyn compatible it needs to allow building a vtable\n   for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>\n --> src/main.rs:2:14\n |\n1 | pub trait Trait {\n |      ----- this trait is not dyn compatible...\n2 |   async fn f(&self);\n |       ^ ...because method `f` is `async`\n = help: consider moving `f` to another trait\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn traits.\nPlease refer to [_why async fn in traits are hard_](https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/) for a deeper analysis of how this implementation differs from what the compiler and language deliver natively.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#example)Example\nThis example implements the core of a highly effective advertising platform using async fn in a trait.\nThe only thing to notice here is that we write an `#[async_trait]` macro on top of traits and trait impls that contain async fn, and then they work. We get to have `Vec<Box<dyn Advertisement + Sync>>` or `&[&dyn Advertisement]`, for example.\n```\nuse async_trait::async_trait;\n#[async_trait]\ntrait Advertisement {\n  async fn run(&self);\n}\nstruct Modal;\n#[async_trait]\nimpl Advertisement for Modal {\n  async fn run(&self) {\n    self.render_fullscreen().await;\n    for _ in 0..4u16 {\n      remind_user_to_join_mailing_list().await;\n    }\n    self.hide_for_now().await;\n  }\n}\nstruct AutoplayingVideo {\n  media_url: String,\n}\n#[async_trait]\nimpl Advertisement for AutoplayingVideo {\n  async fn run(&self) {\n    let stream = connect(&self.media_url).await;\n    stream.play().await;\n    // Video probably persuaded user to join our mailing list!\n    Modal.run().await;\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#supported-features)Supported features\nIt is the intention that all features of Rust traits should work nicely with #[async_trait], but the edge cases are numerous. Please file an issue if you see unexpected borrow checker errors, type errors, or warnings. There is no use of `unsafe` in the expanded code, so rest assured that if your code compiles it can\u2019t be that badly broken.\n> \u2611 Self by value, by reference, by mut reference, or no self; \u2611 Any number of arguments, any return value; \u2611 Generic type parameters and lifetime parameters; \u2611 Associated types; \u2611 Having async and non-async functions in the same trait; \u2611 Default implementations provided by the trait; \u2611 Elided lifetimes.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#explanation)Explanation\nAsync fns get transformed into methods that return `Pin<Box<dyn Future + Send + 'async_trait>>` and delegate to an async block.\nFor example the `impl Advertisement for AutoplayingVideo` above would be expanded as:\n```\nimpl Advertisement for AutoplayingVideo {\n  fn run<'async_trait>(\n    &'async_trait self,\n  ) -> Pin<Box<dyn core::future::Future<Output = ()> + Send + 'async_trait>>\n  where\n    Self: Sync + 'async_trait,\n  {\n    Box::pin(async move {\n      /* the original method body */\n    })\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#non-threadsafe-futures)Non-threadsafe futures\nNot all async traits need futures that are `dyn Future + Send`. To avoid having Send and Sync bounds placed on the async trait methods, invoke the async trait macro as `#[async_trait(?Send)]` on both the trait and the impl blocks.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#elided-lifetimes)Elided lifetimes\nBe aware that async fn syntax does not allow lifetime elision outside of `&` and `&mut` references. (This is true even when not using #[async_trait].) Lifetimes must be named or marked by the placeholder `'_`.\nFortunately the compiler is able to diagnose missing lifetimes with a good error message.\n[\u24d8](https://docs.rs/async-trait/latest/async_trait/ \"This example deliberately fails to compile\")```\ntype Elided<'a> = &'a usize;\n#[async_trait]\ntrait Test {\n  async fn test(not_okay: Elided, okay: &usize) {}\n}\n```\n\n```\nerror[E0726]: implicit elided lifetime not allowed here\n --> src/main.rs:9:29\n |\n9 |   async fn test(not_okay: Elided, okay: &usize) {}\n |               ^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n```\n\nThe fix is to name the lifetime or use `'_`.\n```\n#[async_trait]\ntrait Test {\n  // either\n  async fn test<'e>(elided: Elided<'e>) {}\n  // or\n  async fn test(elided: Elided<'_>) {}\n}\n```\n\n## Attribute Macros[\u00a7](https://docs.rs/async-trait/latest/async_trait/#attributes)\n\n[async_trait](https://docs.rs/async-trait/latest/async_trait/attr.async_trait.html \"attr async_trait::async_trait\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/async-trait/latest/async_trait/all.html \"show sidebar\")\n# Crate async_traitCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/async-trait) ![crates-io\u27e85\u27e9](https://crates.io/crates/async-trait) ![docs-rs\u27e86\u27e9](https://docs.rs/async-trait)\n#### Type erasure for async trait methods\nThe stabilization of async functions in traits in Rust 1.75 did not include support for using traits containing async functions as `dyn Trait`. Trying to use dyn with an async trait produces the following error:\n\u24d8\u27e87\u27e9```\npub trait Trait {\n  async fn f(&self);\n}\npub fn make() -> Box<dyn Trait> {\n  unimplemented!()\n}\n```\n\n```\nerror[E0038]: the trait `Trait` is not dyn compatible\n --> src/main.rs:5:22\n |\n5 | pub fn make() -> Box<dyn Trait> {\n |           ^^^^^^^^^ `Trait` is not dyn compatible\n |\nnote: for a trait to be dyn compatible it needs to allow building a vtable\n   for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>\n --> src/main.rs:2:14\n |\n1 | pub trait Trait {\n |      ----- this trait is not dyn compatible...\n2 |   async fn f(&self);\n |       ^ ...because method `f` is `async`\n = help: consider moving `f` to another trait\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn traits.\nPlease refer to _why async fn in traits are hard_\u27e88\u27e9 for a deeper analysis of how this implementation differs from what the compiler and language deliver natively.\n## \u00a7\u27e89\u27e9Example\nThis example implements the core of a highly effective advertising platform using async fn in a trait.\nThe only thing to notice here is that we write an `#[async_trait]` macro on top of traits and trait impls that contain async fn, and then they work. We get to have `Vec<Box<dyn Advertisement + Sync>>` or `&[&dyn Advertisement]`, for example.\n```\nuse async_trait::async_trait;\n#[async_trait]\ntrait Advertisement {\n  async fn run(&self);\n}\nstruct Modal;\n#[async_trait]\nimpl Advertisement for Modal {\n  async fn run(&self) {\n    self.render_fullscreen().await;\n    for _ in 0..4u16 {\n      remind_user_to_join_mailing_list().await;\n    }\n    self.hide_for_now().await;\n  }\n}\nstruct AutoplayingVideo {\n  media_url: String,\n}\n#[async_trait]\nimpl Advertisement for AutoplayingVideo {\n  async fn run(&self) {\n    let stream = connect(&self.media_url).await;\n    stream.play().await;\n    // Video probably persuaded user to join our mailing list!\n    Modal.run().await;\n  }\n}\n```\n\n## \u00a7\u27e810\u27e9Supported features\nIt is the intention that all features of Rust traits should work nicely with #[async_trait], but the edge cases are numerous. Please file an issue if you see unexpected borrow checker errors, type errors, or warnings. There is no use of `unsafe` in the expanded code, so rest assured that if your code compiles it can\u2019t be that badly broken.\n> \u2611 Self by value, by reference, by mut reference, or no self; \u2611 Any number of arguments, any return value; \u2611 Generic type parameters and lifetime parameters; \u2611 Associated types; \u2611 Having async and non-async functions in the same trait; \u2611 Default implementations provided by the trait; \u2611 Elided lifetimes.\n## \u00a7\u27e811\u27e9Explanation\nAsync fns get transformed into methods that return `Pin<Box<dyn Future + Send + 'async_trait>>` and delegate to an async block.\nFor example the `impl Advertisement for AutoplayingVideo` above would be expanded as:\n```\nimpl Advertisement for AutoplayingVideo {\n  fn run<'async_trait>(\n    &'async_trait self,\n  ) -> Pin<Box<dyn core::future::Future<Output = ()> + Send + 'async_trait>>\n  where\n    Self: Sync + 'async_trait,\n  {\n    Box::pin(async move {\n      /* the original method body */\n    })\n  }\n}\n```\n\n## \u00a7\u27e812\u27e9Non-threadsafe futures\nNot all async traits need futures that are `dyn Future + Send`. To avoid having Send and Sync bounds placed on the async trait methods, invoke the async trait macro as `#[async_trait(?Send)]` on both the trait and the impl blocks.\n## \u00a7\u27e813\u27e9Elided lifetimes\nBe aware that async fn syntax does not allow lifetime elision outside of `&` and `&mut` references. (This is true even when not using #[async_trait].) Lifetimes must be named or marked by the placeholder `'_`.\nFortunately the compiler is able to diagnose missing lifetimes with a good error message.\n\u24d8\u27e87\u27e9```\ntype Elided<'a> = &'a usize;\n#[async_trait]\ntrait Test {\n  async fn test(not_okay: Elided, okay: &usize) {}\n}\n```\n\n```\nerror[E0726]: implicit elided lifetime not allowed here\n --> src/main.rs:9:29\n |\n9 |   async fn test(not_okay: Elided, okay: &usize) {}\n |               ^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n```\n\nThe fix is to name the lifetime or use `'_`.\n```\n#[async_trait]\ntrait Test {\n  // either\n  async fn test<'e>(elided: Elided<'e>) {}\n  // or\n  async fn test(elided: Elided<'_>) {}\n}\n```\n\n## Attribute Macros\u00a7\u27e814\u27e9\n\nasync_trait\u27e815\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-trait/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-trait/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-trait/latest/src/async_trait/lib.rs.html#1-257: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://docs.rs/async-trait/latest/async_trait/: This example deliberately fails to compile - \u24d8\n\u27e88\u27e9 https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/: _why async fn in traits are hard_\n\u27e89\u27e9 https://docs.rs/async-trait/latest/async_trait/#example: \u00a7\n\u27e810\u27e9 https://docs.rs/async-trait/latest/async_trait/#supported-features: \u00a7\n\u27e811\u27e9 https://docs.rs/async-trait/latest/async_trait/#explanation: \u00a7\n\u27e812\u27e9 https://docs.rs/async-trait/latest/async_trait/#non-threadsafe-futures: \u00a7\n\u27e813\u27e9 https://docs.rs/async-trait/latest/async_trait/#elided-lifetimes: \u00a7\n\u27e814\u27e9 https://docs.rs/async-trait/latest/async_trait/#attributes: \u00a7\n\u27e815\u27e9 https://docs.rs/async-trait/latest/async_trait/attr.async_trait.html: attr async_trait::async_trait - async_trait\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `async-trait` crate enables the use of `async fn` in Rust traits, addressing the limitation that traits with async methods are not `dyn` compatible. It provides an `#[async_trait]` attribute macro to transform async methods into `Pin<Box<dyn Future + Send>>`, supporting features like generic parameters, lifetimes, associated types, default implementations, and mixed async/non-async methods. Additionally, it offers options for non-threadsafe futures and handles elided lifetimes gracefully.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Compatibility with `dyn Trait`\n\u2705 **Factual**: The `async-trait` crate allows traits containing `async fn` to be used as `dyn Trait` by transforming the async functions into methods returning `Pin<Box<dyn Future + Send + 'async_trait>>`.  \n\u274c **Counterfactual**: The `async-trait` crate enables native compiler support for using `async fn` in traits without requiring any transformation or additional macros.\n\n---\n\n### Pair 2: Thread Safety of Futures\n\u2705 **Factual**: The `async-trait` crate provides an option to generate non-threadsafe futures by using the `#[async_trait(?Send)]` macro, which avoids placing `Send` and `Sync` bounds on the async trait methods.  \n\u274c **Counterfactual**: The `async-trait` crate requires all futures generated by async trait methods to be `Send` and `Sync`, with no option to opt out of these bounds.\n\n---\n\n### Pair 3: Lifetime Elision in Async Functions\n\u2705 **Factual**: The `async-trait` crate does not allow lifetime elision outside of `&` and `&mut` references in async functions, requiring explicit lifetimes or the use of the placeholder `'_'`.  \n\u274c **Counterfactual**: The `async-trait` crate automatically infers all lifetimes in async functions, including those outside of `&` and `&mut",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}