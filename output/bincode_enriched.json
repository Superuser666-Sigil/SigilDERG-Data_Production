{
    "name": "bincode",
    "version": "2.0.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/bincode/latest/bincode/all.html \"show sidebar\")\n# Crate bincodeCopy item path\n[Settings](https://docs.rs/bincode/latest/settings.html)\n[Help](https://docs.rs/bincode/latest/help.html)\nSummary[Source](https://docs.rs/bincode/latest/src/bincode/lib.rs.html#1-237)\nExpand description\nBincode is a crate for encoding and decoding using a tiny binary serialization strategy. Using it, you can easily go from having an object in memory, quickly serialize it to bytes, and then deserialize it back just as fast!\nIf you\u2019re coming from bincode 1, check out our [migration guide](https://docs.rs/bincode/latest/bincode/migration_guide/index.html)\n## [\u00a7](https://docs.rs/bincode/latest/bincode/#serde)Serde\nStarting from bincode 2, serde is now an optional dependency. If you want to use serde, please enable the `serde` feature. See [Features](https://docs.rs/bincode/latest/bincode/#features) for more information.\n## [\u00a7](https://docs.rs/bincode/latest/bincode/#features)Features\nName| Default?| Affects MSRV?| Supported types for Encode/Decode| Enabled methods| Other  \n---|---|---|---|---|---  \nstd| Yes| No| `HashMap` and `HashSet`| `decode_from_std_read` and `encode_into_std_write`|   \nalloc| Yes| No| All common containers in alloc, like `Vec`, `String`, `Box`| `encode_to_vec`|   \natomic| Yes| No| All `Atomic*` integer types, e.g. `AtomicUsize`, and `AtomicBool`| |   \nderive| Yes| No| | | Enables the `BorrowDecode`, `Decode` and `Encode` derive macros  \nserde| No| Yes (MSRV reliant on serde)| `Compat` and `BorrowCompat`, which will work for all types that implement serde\u2019s traits| serde-specific encode/decode functions in the [serde](https://docs.rs/bincode/latest/bincode/serde/index.html \"mod bincode::serde\") module| Note: There are several [known issues](https://docs.rs/bincode/latest/bincode/serde/index.html#known-issues) when using serde and bincode  \n## [\u00a7](https://docs.rs/bincode/latest/bincode/#which-functions-to-use)Which functions to use\nBincode has a couple of pairs of functions that are used in different situations.\nSituation| Encode| Decode  \n---|---|---  \nYou\u2019re working with [`fs::File`](https://doc.rust-lang.org/nightly/std/fs/struct.File.html \"struct std::fs::File\") or [`net::TcpStream`](https://doc.rust-lang.org/nightly/std/net/tcp/struct.TcpStream.html \"struct std::net::tcp::TcpStream\")| [`encode_into_std_write`](https://docs.rs/bincode/latest/bincode/fn.encode_into_std_write.html \"fn bincode::encode_into_std_write\")| [`decode_from_std_read`](https://docs.rs/bincode/latest/bincode/fn.decode_from_std_read.html \"fn bincode::decode_from_std_read\")  \nyou\u2019re working with in-memory buffers| [`encode_to_vec`](https://docs.rs/bincode/latest/bincode/fn.encode_to_vec.html \"fn bincode::encode_to_vec\")| [`decode_from_slice`](https://docs.rs/bincode/latest/bincode/fn.decode_from_slice.html \"fn bincode::decode_from_slice\")  \nYou want to use a custom [Reader](https://docs.rs/bincode/latest/bincode/de/read/trait.Reader.html \"trait bincode::de::read::Reader\") and [Writer](https://docs.rs/bincode/latest/bincode/enc/write/trait.Writer.html \"trait bincode::enc::write::Writer\")| [`encode_into_writer`](https://docs.rs/bincode/latest/bincode/fn.encode_into_writer.html \"fn bincode::encode_into_writer\")| [`decode_from_reader`](https://docs.rs/bincode/latest/bincode/fn.decode_from_reader.html \"fn bincode::decode_from_reader\")  \nYou\u2019re working with pre-allocated buffers or on embedded targets| [`encode_into_slice`](https://docs.rs/bincode/latest/bincode/fn.encode_into_slice.html \"fn bincode::encode_into_slice\")| [`decode_from_slice`](https://docs.rs/bincode/latest/bincode/fn.decode_from_slice.html \"fn bincode::decode_from_slice\")  \n**Note:** If you\u2019re using `serde`, use `bincode::serde::...` instead of `bincode::...`\n## [\u00a7](https://docs.rs/bincode/latest/bincode/#example)Example\n```\nlet mut slice = [0u8; 100];\n// You can encode any type that implements `Encode`.\n// You can automatically implement this trait on custom types with the `derive` feature.\nlet input = (\n  0u8,\n  10u32,\n  10000i128,\n  'a',\n  [0u8, 1u8, 2u8, 3u8]\n);\nlet length = bincode::encode_into_slice(\n  input,\n  &mut slice,\n  bincode::config::standard()\n).unwrap();\nlet slice = &slice[..length];\nprintln!(\"Bytes written: {:?}\", slice);\n// Decoding works the same as encoding.\n// The trait used is `Decode`, and can also be automatically implemented with the `derive` feature.\nlet decoded: (u8, u32, i128, char, [u8; 4]) = bincode::decode_from_slice(slice, bincode::config::standard()).unwrap().0;\nassert_eq!(decoded, input);\n```\n\n## Re-exports[\u00a7](https://docs.rs/bincode/latest/bincode/#reexports)\n\n`pub use de::BorrowDecode[](https://docs.rs/bincode/latest/bincode/de/trait.BorrowDecode.html \"trait bincode::de::BorrowDecode\");`\n\n\n`pub use de::Decode[](https://docs.rs/bincode/latest/bincode/de/trait.Decode.html \"trait bincode::de::Decode\");`\n\n\n`pub use enc::Encode[](https://docs.rs/bincode/latest/bincode/enc/trait.Encode.html \"trait bincode::enc::Encode\");`\n\n## Modules[\u00a7](https://docs.rs/bincode/latest/bincode/#modules)\n\n[config](https://docs.rs/bincode/latest/bincode/config/index.html \"mod bincode::config\")\n    The config module is used to change the behavior of bincode\u2019s encoding and decoding logic.\n\n[de](https://docs.rs/bincode/latest/bincode/de/index.html \"mod bincode::de\")\n    Decoder-based structs and traits.\n\n[enc](https://docs.rs/bincode/latest/bincode/enc/index.html \"mod bincode::enc\")\n    Encoder-based structs and traits.\n\n[error](https://docs.rs/bincode/latest/bincode/error/index.html \"mod bincode::error\")\n    Errors that can be encounting by Encoding and Decoding.\n\n[migration_guide](https://docs.rs/bincode/latest/bincode/migration_guide/index.html \"mod bincode::migration_guide\")\n    Migrating from bincode 1 to 2\n\n[serde](https://docs.rs/bincode/latest/bincode/serde/index.html \"mod bincode::serde\")`serde`\n    Support for serde integration. Enable this with the `serde` feature.\n\n[spec](https://docs.rs/bincode/latest/bincode/spec/index.html \"mod bincode::spec\")\n    Serialization Specification\n## Macros[\u00a7](https://docs.rs/bincode/latest/bincode/#macros)\n\n[impl_borrow_decode](https://docs.rs/bincode/latest/bincode/macro.impl_borrow_decode.html \"macro bincode::impl_borrow_decode\")\n    Helper macro to implement `BorrowDecode` for any type that implements `Decode`.\n\n[impl_borrow_decode_with_context](https://docs.rs/bincode/latest/bincode/macro.impl_borrow_decode_with_context.html \"macro bincode::impl_borrow_decode_with_context\")\n    Helper macro to implement `BorrowDecode` for any type that implements `Decode`.\n## Functions[\u00a7](https://docs.rs/bincode/latest/bincode/#functions)\n\n[borrow_decode_from_slice](https://docs.rs/bincode/latest/bincode/fn.borrow_decode_from_slice.html \"fn bincode::borrow_decode_from_slice\")\n    Attempt to decode a given type `D` from the given slice. Returns the decoded output and the amount of bytes read.\n\n[borrow_decode_from_slice_with_context](https://docs.rs/bincode/latest/bincode/fn.borrow_decode_from_slice_with_context.html \"fn bincode::borrow_decode_from_slice_with_context\")\n    Attempt to decode a given type `D` from the given slice with `Context`. Returns the decoded output and the amount of bytes read.\n\n[decode_from_reader](https://docs.rs/bincode/latest/bincode/fn.decode_from_reader.html \"fn bincode::decode_from_reader\")\n    Attempt to decode a given type `D` from the given [Reader](https://docs.rs/bincode/latest/bincode/de/read/trait.Reader.html \"trait bincode::de::read::Reader\").\n\n[decode_from_slice](https://docs.rs/bincode/latest/bincode/fn.decode_from_slice.html \"fn bincode::decode_from_slice\")\n    Attempt to decode a given type `D` from the given slice. Returns the decoded output and the amount of bytes read.\n\n[decode_from_slice_with_context](https://docs.rs/bincode/latest/bincode/fn.decode_from_slice_with_context.html \"fn bincode::decode_from_slice_with_context\")\n    Attempt to decode a given type `D` from the given slice with `Context`. Returns the decoded output and the amount of bytes read.\n\n[decode_from_std_read](https://docs.rs/bincode/latest/bincode/fn.decode_from_std_read.html \"fn bincode::decode_from_std_read\")`std`\n    Decode type `D` from the given reader with the given `Config`. The reader can be any type that implements `std::io::Read`, e.g. `std::fs::File`.\n\n[decode_from_std_read_with_context](https://docs.rs/bincode/latest/bincode/fn.decode_from_std_read_with_context.html \"fn bincode::decode_from_std_read_with_context\")`std`\n    Decode type `D` from the given reader with the given `Config` and `Context`. The reader can be any type that implements `std::io::Read`, e.g. `std::fs::File`.\n\n[encode_into_slice](https://docs.rs/bincode/latest/bincode/fn.encode_into_slice.html \"fn bincode::encode_into_slice\")\n    Encode the given value into the given slice. Returns the amount of bytes that have been written.\n\n[encode_into_std_write](https://docs.rs/bincode/latest/bincode/fn.encode_into_std_write.html \"fn bincode::encode_into_std_write\")`std`\n    Encode the given value into any type that implements `std::io::Write`, e.g. `std::fs::File`, with the given `Config`. See the [config](https://docs.rs/bincode/latest/bincode/config/index.html) module for more information. Returns the amount of bytes written.\n\n[encode_into_writer](https://docs.rs/bincode/latest/bincode/fn.encode_into_writer.html \"fn bincode::encode_into_writer\")\n    Encode the given value into a custom [Writer](https://docs.rs/bincode/latest/bincode/enc/write/trait.Writer.html \"trait bincode::enc::write::Writer\").\n\n[encode_to_vec](https://docs.rs/bincode/latest/bincode/fn.encode_to_vec.html \"fn bincode::encode_to_vec\")`alloc`\n    Encode the given value into a `Vec<u8>` with the given `Config`. See the [config](https://docs.rs/bincode/latest/bincode/config/index.html) module for more information.\n## Derive Macros[\u00a7](https://docs.rs/bincode/latest/bincode/#derives)\n\n[BorrowDecode](https://docs.rs/bincode/latest/bincode/derive.BorrowDecode.html \"derive bincode::BorrowDecode\")`derive`\n\n\n[Decode](https://docs.rs/bincode/latest/bincode/derive.Decode.html \"derive bincode::Decode\")`derive`\n\n\n[Encode](https://docs.rs/bincode/latest/bincode/derive.Encode.html \"derive bincode::Encode\")`derive`\n\n",
        "markdown_with_citations": "[](https://docs.rs/bincode/latest/bincode/all.html \"show sidebar\")\n# Crate bincodeCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nBincode is a crate for encoding and decoding using a tiny binary serialization strategy. Using it, you can easily go from having an object in memory, quickly serialize it to bytes, and then deserialize it back just as fast!\nIf you\u2019re coming from bincode 1, check out our migration guide\u27e84\u27e9\n## \u00a7\u27e85\u27e9Serde\nStarting from bincode 2, serde is now an optional dependency. If you want to use serde, please enable the `serde` feature. See Features\u27e86\u27e9 for more information.\n## \u00a7\u27e86\u27e9Features\nName| Default?| Affects MSRV?| Supported types for Encode/Decode| Enabled methods| Other  \n---|---|---|---|---|---  \nstd| Yes| No| `HashMap` and `HashSet`| `decode_from_std_read` and `encode_into_std_write`|   \nalloc| Yes| No| All common containers in alloc, like `Vec`, `String`, `Box`| `encode_to_vec`|   \natomic| Yes| No| All `Atomic*` integer types, e.g. `AtomicUsize`, and `AtomicBool`| |   \nderive| Yes| No| | | Enables the `BorrowDecode`, `Decode` and `Encode` derive macros  \nserde| No| Yes (MSRV reliant on serde)| `Compat` and `BorrowCompat`, which will work for all types that implement serde\u2019s traits| serde-specific encode/decode functions in the serde\u27e87\u27e9 module| Note: There are several known issues\u27e88\u27e9 when using serde and bincode  \n## \u00a7\u27e89\u27e9Which functions to use\nBincode has a couple of pairs of functions that are used in different situations.\nSituation| Encode| Decode  \n---|---|---  \nYou\u2019re working with `fs::File`\u27e810\u27e9 or `net::TcpStream`\u27e811\u27e9| `encode_into_std_write`\u27e812\u27e9| `decode_from_std_read`\u27e813\u27e9  \nyou\u2019re working with in-memory buffers| `encode_to_vec`\u27e814\u27e9| `decode_from_slice`\u27e815\u27e9  \nYou want to use a custom Reader\u27e816\u27e9 and Writer\u27e817\u27e9| `encode_into_writer`\u27e818\u27e9| `decode_from_reader`\u27e819\u27e9  \nYou\u2019re working with pre-allocated buffers or on embedded targets| `encode_into_slice`\u27e820\u27e9| `decode_from_slice`\u27e815\u27e9  \n**Note:** If you\u2019re using `serde`, use `bincode::serde::...` instead of `bincode::...`\n## \u00a7\u27e821\u27e9Example\n```\nlet mut slice = [0u8; 100];\n// You can encode any type that implements `Encode`.\n// You can automatically implement this trait on custom types with the `derive` feature.\nlet input = (\n  0u8,\n  10u32,\n  10000i128,\n  'a',\n  [0u8, 1u8, 2u8, 3u8]\n);\nlet length = bincode::encode_into_slice(\n  input,\n  &mut slice,\n  bincode::config::standard()\n).unwrap();\nlet slice = &slice[..length];\nprintln!(\"Bytes written: {:?}\", slice);\n// Decoding works the same as encoding.\n// The trait used is `Decode`, and can also be automatically implemented with the `derive` feature.\nlet decoded: (u8, u32, i128, char, [u8; 4]) = bincode::decode_from_slice(slice, bincode::config::standard()).unwrap().0;\nassert_eq!(decoded, input);\n```\n\n## Re-exports\u00a7\u27e822\u27e9\n\n`pub use de::BorrowDecode[](https://docs.rs/bincode/latest/bincode/de/trait.BorrowDecode.html \"trait bincode::de::BorrowDecode\");`\n\n\n`pub use de::Decode[](https://docs.rs/bincode/latest/bincode/de/trait.Decode.html \"trait bincode::de::Decode\");`\n\n\n`pub use enc::Encode[](https://docs.rs/bincode/latest/bincode/enc/trait.Encode.html \"trait bincode::enc::Encode\");`\n\n## Modules\u00a7\u27e823\u27e9\n\nconfig\u27e824\u27e9\n    The config module is used to change the behavior of bincode\u2019s encoding and decoding logic.\n\nde\u27e825\u27e9\n    Decoder-based structs and traits.\n\nenc\u27e826\u27e9\n    Encoder-based structs and traits.\n\nerror\u27e827\u27e9\n    Errors that can be encounting by Encoding and Decoding.\n\nmigration_guide\u27e84\u27e9\n    Migrating from bincode 1 to 2\n\nserde\u27e87\u27e9`serde`\n    Support for serde integration. Enable this with the `serde` feature.\n\nspec\u27e828\u27e9\n    Serialization Specification\n## Macros\u00a7\u27e829\u27e9\n\nimpl_borrow_decode\u27e830\u27e9\n    Helper macro to implement `BorrowDecode` for any type that implements `Decode`.\n\nimpl_borrow_decode_with_context\u27e831\u27e9\n    Helper macro to implement `BorrowDecode` for any type that implements `Decode`.\n## Functions\u00a7\u27e832\u27e9\n\nborrow_decode_from_slice\u27e833\u27e9\n    Attempt to decode a given type `D` from the given slice. Returns the decoded output and the amount of bytes read.\n\nborrow_decode_from_slice_with_context\u27e834\u27e9\n    Attempt to decode a given type `D` from the given slice with `Context`. Returns the decoded output and the amount of bytes read.\n\ndecode_from_reader\u27e819\u27e9\n    Attempt to decode a given type `D` from the given Reader\u27e816\u27e9.\n\ndecode_from_slice\u27e815\u27e9\n    Attempt to decode a given type `D` from the given slice. Returns the decoded output and the amount of bytes read.\n\ndecode_from_slice_with_context\u27e835\u27e9\n    Attempt to decode a given type `D` from the given slice with `Context`. Returns the decoded output and the amount of bytes read.\n\ndecode_from_std_read\u27e813\u27e9`std`\n    Decode type `D` from the given reader with the given `Config`. The reader can be any type that implements `std::io::Read`, e.g. `std::fs::File`.\n\ndecode_from_std_read_with_context\u27e836\u27e9`std`\n    Decode type `D` from the given reader with the given `Config` and `Context`. The reader can be any type that implements `std::io::Read`, e.g. `std::fs::File`.\n\nencode_into_slice\u27e820\u27e9\n    Encode the given value into the given slice. Returns the amount of bytes that have been written.\n\nencode_into_std_write\u27e812\u27e9`std`\n    Encode the given value into any type that implements `std::io::Write`, e.g. `std::fs::File`, with the given `Config`. See the config\u27e824\u27e9 module for more information. Returns the amount of bytes written.\n\nencode_into_writer\u27e818\u27e9\n    Encode the given value into a custom Writer\u27e817\u27e9.\n\nencode_to_vec\u27e814\u27e9`alloc`\n    Encode the given value into a `Vec<u8>` with the given `Config`. See the config\u27e824\u27e9 module for more information.\n## Derive Macros\u00a7\u27e837\u27e9\n\nBorrowDecode\u27e838\u27e9`derive`\n\n\nDecode\u27e839\u27e9`derive`\n\n\nEncode\u27e840\u27e9`derive`\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bincode/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bincode/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bincode/latest/src/bincode/lib.rs.html#1-237: Source\n\u27e84\u27e9 https://docs.rs/bincode/latest/bincode/migration_guide/index.html: migration guide\n\u27e85\u27e9 https://docs.rs/bincode/latest/bincode/#serde: \u00a7\n\u27e86\u27e9 https://docs.rs/bincode/latest/bincode/#features: Features\n\u27e87\u27e9 https://docs.rs/bincode/latest/bincode/serde/index.html: mod bincode::serde - serde\n\u27e88\u27e9 https://docs.rs/bincode/latest/bincode/serde/index.html#known-issues: known issues\n\u27e89\u27e9 https://docs.rs/bincode/latest/bincode/#which-functions-to-use: \u00a7\n\u27e810\u27e9 https://doc.rust-lang.org/nightly/std/fs/struct.File.html: struct std::fs::File - `fs::File`\n\u27e811\u27e9 https://doc.rust-lang.org/nightly/std/net/tcp/struct.TcpStream.html: struct std::net::tcp::TcpStream - `net::TcpStream`\n\u27e812\u27e9 https://docs.rs/bincode/latest/bincode/fn.encode_into_std_write.html: fn bincode::encode_into_std_write - `encode_into_std_write`\n\u27e813\u27e9 https://docs.rs/bincode/latest/bincode/fn.decode_from_std_read.html: fn bincode::decode_from_std_read - `decode_from_std_read`\n\u27e814\u27e9 https://docs.rs/bincode/latest/bincode/fn.encode_to_vec.html: fn bincode::encode_to_vec - `encode_to_vec`\n\u27e815\u27e9 https://docs.rs/bincode/latest/bincode/fn.decode_from_slice.html: fn bincode::decode_from_slice - `decode_from_slice`\n\u27e816\u27e9 https://docs.rs/bincode/latest/bincode/de/read/trait.Reader.html: trait bincode::de::read::Reader - Reader\n\u27e817\u27e9 https://docs.rs/bincode/latest/bincode/enc/write/trait.Writer.html: trait bincode::enc::write::Writer - Writer\n\u27e818\u27e9 https://docs.rs/bincode/latest/bincode/fn.encode_into_writer.html: fn bincode::encode_into_writer - `encode_into_writer`\n\u27e819\u27e9 https://docs.rs/bincode/latest/bincode/fn.decode_from_reader.html: fn bincode::decode_from_reader - `decode_from_reader`\n\u27e820\u27e9 https://docs.rs/bincode/latest/bincode/fn.encode_into_slice.html: fn bincode::encode_into_slice - `encode_into_slice`\n\u27e821\u27e9 https://docs.rs/bincode/latest/bincode/#example: \u00a7\n\u27e822\u27e9 https://docs.rs/bincode/latest/bincode/#reexports: \u00a7\n\u27e823\u27e9 https://docs.rs/bincode/latest/bincode/#modules: \u00a7\n\u27e824\u27e9 https://docs.rs/bincode/latest/bincode/config/index.html: mod bincode::config - config\n\u27e825\u27e9 https://docs.rs/bincode/latest/bincode/de/index.html: mod bincode::de - de\n\u27e826\u27e9 https://docs.rs/bincode/latest/bincode/enc/index.html: mod bincode::enc - enc\n\u27e827\u27e9 https://docs.rs/bincode/latest/bincode/error/index.html: mod bincode::error - error\n\u27e828\u27e9 https://docs.rs/bincode/latest/bincode/spec/index.html: mod bincode::spec - spec\n\u27e829\u27e9 https://docs.rs/bincode/latest/bincode/#macros: \u00a7\n\u27e830\u27e9 https://docs.rs/bincode/latest/bincode/macro.impl_borrow_decode.html: macro bincode::impl_borrow_decode - impl_borrow_decode\n\u27e831\u27e9 https://docs.rs/bincode/latest/bincode/macro.impl_borrow_decode_with_context.html: macro bincode::impl_borrow_decode_with_context - impl_borrow_decode_with_context\n\u27e832\u27e9 https://docs.rs/bincode/latest/bincode/#functions: \u00a7\n\u27e833\u27e9 https://docs.rs/bincode/latest/bincode/fn.borrow_decode_from_slice.html: fn bincode::borrow_decode_from_slice - borrow_decode_from_slice\n\u27e834\u27e9 https://docs.rs/bincode/latest/bincode/fn.borrow_decode_from_slice_with_context.html: fn bincode::borrow_decode_from_slice_with_context - borrow_decode_from_slice_with_context\n\u27e835\u27e9 https://docs.rs/bincode/latest/bincode/fn.decode_from_slice_with_context.html: fn bincode::decode_from_slice_with_context - decode_from_slice_with_context\n\u27e836\u27e9 https://docs.rs/bincode/latest/bincode/fn.decode_from_std_read_with_context.html: fn bincode::decode_from_std_read_with_context - decode_from_std_read_with_context\n\u27e837\u27e9 https://docs.rs/bincode/latest/bincode/#derives: \u00a7\n\u27e838\u27e9 https://docs.rs/bincode/latest/bincode/derive.BorrowDecode.html: derive bincode::BorrowDecode - BorrowDecode\n\u27e839\u27e9 https://docs.rs/bincode/latest/bincode/derive.Decode.html: derive bincode::Decode - Decode\n\u27e840\u27e9 https://docs.rs/bincode/latest/bincode/derive.Encode.html: derive bincode::Encode - Encode\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `bincode` crate provides fast and compact binary serialization and deserialization for Rust, enabling efficient conversion between in-memory objects and byte representations. It supports custom encoding/decoding configurations, derives for `Encode` and `Decode` traits, and optional integration with `serde`. Key features include support for standard containers, atomic types, and various encoding/decoding methods tailored for files, memory buffers, or embedded systems.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Serde Integration  \n\u2705 Factual: Starting from bincode v2, Serde is an optional dependency that can be enabled using the `serde` feature, allowing compatibility with types implementing Serde's traits.  \n\u274c Counterfactual: Bincode v2 requires Serde as a mandatory dependency for all encoding and decoding operations.  \n\n---\n\n### Pair 2: Encoding and Decoding with `std`  \n\u2705 Factual: Bincode provides functions like `encode_into_std_write` and `decode_from_std_read` for working with types that implement `std::io::Write` and `std::io::Read`, such as `fs::File` and `net::TcpStream`.  \n\u274c Counterfactual: Bincode does not support encoding or decoding directly with `std::io::Write` or `std::io::Read` types and requires custom wrappers for such operations.  \n\n---\n\n### Pair 3: Pre-allocated Buffers  \n\u2705 Factual: Bincode supports encoding into pre-allocated buffers using `encode_into_slice` and decoding from slices using `decode_from_slice`, making it suitable for embedded systems.  \n\u274c Counterfactual: Bincode does not support encoding or decoding with pre-allocated buffers and requires dynamic memory allocation for all operations.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}