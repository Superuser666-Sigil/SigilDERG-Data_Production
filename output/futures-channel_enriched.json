{
    "name": "futures-channel",
    "version": "0.3.31",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/futures-channel/latest/futures_channel/all.html \"show sidebar\")\n# Crate futures_channelCopy item path\n[Settings](https://docs.rs/futures-channel/latest/settings.html)\n[Help](https://docs.rs/futures-channel/latest/help.html)\nSummary[Source](https://docs.rs/futures-channel/latest/src/futures_channel/lib.rs.html#1-38)\nExpand description\nAsynchronous channels.\nLike threads, concurrent tasks sometimes need to communicate with each other. This module contains two basic abstractions for doing so:\n  * [oneshot](https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html \"mod futures_channel::oneshot\"), a way of sending a single value from one task to another.\n  * [mpsc](https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html \"mod futures_channel::mpsc\"), a multi-producer, single-consumer channel for sending values between tasks, analogous to the similarly-named structure in the standard library.\n\n\nAll items are only available when the `std` or `alloc` feature of this library is activated, and it is activated by default.\n## Modules[\u00a7](https://docs.rs/futures-channel/latest/futures_channel/#modules)\n\n[mpsc](https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html \"mod futures_channel::mpsc\")\n    A multi-producer, single-consumer queue for sending values across asynchronous tasks.\n\n[oneshot](https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html \"mod futures_channel::oneshot\")\n    A channel for sending a single message between asynchronous tasks.\n",
        "markdown_with_citations": "[](https://docs.rs/futures-channel/latest/futures_channel/all.html \"show sidebar\")\n# Crate futures_channelCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAsynchronous channels.\nLike threads, concurrent tasks sometimes need to communicate with each other. This module contains two basic abstractions for doing so:\n  * oneshot\u27e84\u27e9, a way of sending a single value from one task to another.\n  * mpsc\u27e85\u27e9, a multi-producer, single-consumer channel for sending values between tasks, analogous to the similarly-named structure in the standard library.\n\n\nAll items are only available when the `std` or `alloc` feature of this library is activated, and it is activated by default.\n## Modules\u00a7\u27e86\u27e9\n\nmpsc\u27e85\u27e9\n    A multi-producer, single-consumer queue for sending values across asynchronous tasks.\n\noneshot\u27e84\u27e9\n    A channel for sending a single message between asynchronous tasks.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-channel/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-channel/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-channel/latest/src/futures_channel/lib.rs.html#1-38: Source\n\u27e84\u27e9 https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html: mod futures_channel::oneshot - oneshot\n\u27e85\u27e9 https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html: mod futures_channel::mpsc - mpsc\n\u27e86\u27e9 https://docs.rs/futures-channel/latest/futures_channel/#modules: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `futures-channel` crate provides asynchronous communication primitives for Rust, enabling tasks to exchange data efficiently. It includes two key abstractions: `oneshot`, for sending a single value between tasks, and `mpsc`, a multi-producer, single-consumer channel for transferring values across tasks. These features require the `std` or `alloc` feature, which is enabled by default.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1: Asynchronous Communication Mechanisms  \n\u2705 Factual: The `futures-channel` crate provides two primary abstractions for asynchronous communication: `oneshot` for sending a single value between tasks and `mpsc` for multi-producer, single-consumer communication.  \n\u274c Counterfactual: The `futures-channel` crate includes a `broadcast` channel type that allows multi-producer, multi-consumer communication, similar to the `tokio::sync::broadcast` channel.  \n\n---\n\n### Pair 2: Feature Activation  \n\u2705 Factual: All items in the `futures-channel` crate require the `std` or `alloc` feature to be activated, which is enabled by default.  \n\u274c Counterfactual: The `futures-channel` crate can operate without the `std` or `alloc` feature, making it suitable for `no_std` environments by default.  \n\n---\n\n### Pair 3: Performance Characteristics  \n\u2705 Factual: The `mpsc` channel in `futures-channel` is optimized for single-consumer scenarios, ensuring efficient communication between asynchronous tasks.  \n\u274c Counterfactual: The `mpsc` channel in `futures-channel` supports multiple consumers, allowing multiple tasks to receive messages from the same producer concurrently.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}