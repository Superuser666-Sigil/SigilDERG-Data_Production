{
    "name": "dashmap",
    "version": "7.0.0-rc2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/dashmap/latest/dashmap/all.html \"show sidebar\")\n# Crate dashmapCopy item path\n[Settings](https://docs.rs/dashmap/latest/settings.html)\n[Help](https://docs.rs/dashmap/latest/help.html)\nSummary[Source](https://docs.rs/dashmap/latest/src/dashmap/lib.rs.html#1-1547)\n## Re-exports[\u00a7](https://docs.rs/dashmap/latest/dashmap/#reexports)\n\n`pub use mapref::entry::Entry[](https://docs.rs/dashmap/latest/dashmap/mapref/entry/enum.Entry.html \"enum dashmap::mapref::entry::Entry\");`\n\n\n`pub use mapref::entry::OccupiedEntry[](https://docs.rs/dashmap/latest/dashmap/mapref/entry/struct.OccupiedEntry.html \"struct dashmap::mapref::entry::OccupiedEntry\");`\n\n\n`pub use mapref::entry::VacantEntry[](https://docs.rs/dashmap/latest/dashmap/mapref/entry/struct.VacantEntry.html \"struct dashmap::mapref::entry::VacantEntry\");`\n\n## Modules[\u00a7](https://docs.rs/dashmap/latest/dashmap/#modules)\n\n[iter](https://docs.rs/dashmap/latest/dashmap/iter/index.html \"mod dashmap::iter\")\n\n\n[iter_set](https://docs.rs/dashmap/latest/dashmap/iter_set/index.html \"mod dashmap::iter_set\")\n\n\n[mapref](https://docs.rs/dashmap/latest/dashmap/mapref/index.html \"mod dashmap::mapref\")\n\n\n[rayon](https://docs.rs/dashmap/latest/dashmap/rayon/index.html \"mod dashmap::rayon\")\n\n\n[setref](https://docs.rs/dashmap/latest/dashmap/setref/index.html \"mod dashmap::setref\")\n\n\n[try_result](https://docs.rs/dashmap/latest/dashmap/try_result/index.html \"mod dashmap::try_result\")\n\n## Structs[\u00a7](https://docs.rs/dashmap/latest/dashmap/#structs)\n\n[DashMap](https://docs.rs/dashmap/latest/dashmap/struct.DashMap.html \"struct dashmap::DashMap\")\n    DashMap is an implementation of a concurrent associative array/hashmap in Rust.\n\n[DashSet](https://docs.rs/dashmap/latest/dashmap/struct.DashSet.html \"struct dashmap::DashSet\")\n    DashSet is a thin wrapper around [`DashMap`](https://docs.rs/dashmap/latest/dashmap/struct.DashMap.html) using `()` as the value type. It uses methods and types which are more convenient to work with on a set.\n\n[RawRwLock](https://docs.rs/dashmap/latest/dashmap/struct.RawRwLock.html \"struct dashmap::RawRwLock\")\n\n\n[ReadOnlyView](https://docs.rs/dashmap/latest/dashmap/struct.ReadOnlyView.html \"struct dashmap::ReadOnlyView\")\n    A read-only view into a `DashMap`. Allows to obtain raw references to the stored values.\n\n[SharedValue](https://docs.rs/dashmap/latest/dashmap/struct.SharedValue.html \"struct dashmap::SharedValue\")\n    A simple wrapper around `T`\n\n[TryReserveError](https://docs.rs/dashmap/latest/dashmap/struct.TryReserveError.html \"struct dashmap::TryReserveError\")\n\n## Traits[\u00a7](https://docs.rs/dashmap/latest/dashmap/#traits)\n\n[Map](https://docs.rs/dashmap/latest/dashmap/trait.Map.html \"trait dashmap::Map\")\n    Implementation detail that is exposed due to generic constraints in public types.\n## Type Aliases[\u00a7](https://docs.rs/dashmap/latest/dashmap/#types)\n\n[RwLock](https://docs.rs/dashmap/latest/dashmap/type.RwLock.html \"type dashmap::RwLock\")\n\n\n[RwLockReadGuard](https://docs.rs/dashmap/latest/dashmap/type.RwLockReadGuard.html \"type dashmap::RwLockReadGuard\")\n\n\n[RwLockWriteGuard](https://docs.rs/dashmap/latest/dashmap/type.RwLockWriteGuard.html \"type dashmap::RwLockWriteGuard\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/dashmap/latest/dashmap/all.html \"show sidebar\")\n# Crate dashmapCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\n## Re-exports\u00a7\u27e84\u27e9\n\n`pub use mapref::entry::Entry[](https://docs.rs/dashmap/latest/dashmap/mapref/entry/enum.Entry.html \"enum dashmap::mapref::entry::Entry\");`\n\n\n`pub use mapref::entry::OccupiedEntry[](https://docs.rs/dashmap/latest/dashmap/mapref/entry/struct.OccupiedEntry.html \"struct dashmap::mapref::entry::OccupiedEntry\");`\n\n\n`pub use mapref::entry::VacantEntry[](https://docs.rs/dashmap/latest/dashmap/mapref/entry/struct.VacantEntry.html \"struct dashmap::mapref::entry::VacantEntry\");`\n\n## Modules\u00a7\u27e85\u27e9\n\niter\u27e86\u27e9\n\n\niter_set\u27e87\u27e9\n\n\nmapref\u27e88\u27e9\n\n\nrayon\u27e89\u27e9\n\n\nsetref\u27e810\u27e9\n\n\ntry_result\u27e811\u27e9\n\n## Structs\u00a7\u27e812\u27e9\n\nDashMap\u27e813\u27e9\n    DashMap is an implementation of a concurrent associative array/hashmap in Rust.\n\nDashSet\u27e814\u27e9\n    DashSet is a thin wrapper around `DashMap`\u27e813\u27e9 using `()` as the value type. It uses methods and types which are more convenient to work with on a set.\n\nRawRwLock\u27e815\u27e9\n\n\nReadOnlyView\u27e816\u27e9\n    A read-only view into a `DashMap`. Allows to obtain raw references to the stored values.\n\nSharedValue\u27e817\u27e9\n    A simple wrapper around `T`\n\nTryReserveError\u27e818\u27e9\n\n## Traits\u00a7\u27e819\u27e9\n\nMap\u27e820\u27e9\n    Implementation detail that is exposed due to generic constraints in public types.\n## Type Aliases\u00a7\u27e821\u27e9\n\nRwLock\u27e822\u27e9\n\n\nRwLockReadGuard\u27e823\u27e9\n\n\nRwLockWriteGuard\u27e824\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/dashmap/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/dashmap/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/dashmap/latest/src/dashmap/lib.rs.html#1-1547: Source\n\u27e84\u27e9 https://docs.rs/dashmap/latest/dashmap/#reexports: \u00a7\n\u27e85\u27e9 https://docs.rs/dashmap/latest/dashmap/#modules: \u00a7\n\u27e86\u27e9 https://docs.rs/dashmap/latest/dashmap/iter/index.html: mod dashmap::iter - iter\n\u27e87\u27e9 https://docs.rs/dashmap/latest/dashmap/iter_set/index.html: mod dashmap::iter_set - iter_set\n\u27e88\u27e9 https://docs.rs/dashmap/latest/dashmap/mapref/index.html: mod dashmap::mapref - mapref\n\u27e89\u27e9 https://docs.rs/dashmap/latest/dashmap/rayon/index.html: mod dashmap::rayon - rayon\n\u27e810\u27e9 https://docs.rs/dashmap/latest/dashmap/setref/index.html: mod dashmap::setref - setref\n\u27e811\u27e9 https://docs.rs/dashmap/latest/dashmap/try_result/index.html: mod dashmap::try_result - try_result\n\u27e812\u27e9 https://docs.rs/dashmap/latest/dashmap/#structs: \u00a7\n\u27e813\u27e9 https://docs.rs/dashmap/latest/dashmap/struct.DashMap.html: struct dashmap::DashMap - DashMap\n\u27e814\u27e9 https://docs.rs/dashmap/latest/dashmap/struct.DashSet.html: struct dashmap::DashSet - DashSet\n\u27e815\u27e9 https://docs.rs/dashmap/latest/dashmap/struct.RawRwLock.html: struct dashmap::RawRwLock - RawRwLock\n\u27e816\u27e9 https://docs.rs/dashmap/latest/dashmap/struct.ReadOnlyView.html: struct dashmap::ReadOnlyView - ReadOnlyView\n\u27e817\u27e9 https://docs.rs/dashmap/latest/dashmap/struct.SharedValue.html: struct dashmap::SharedValue - SharedValue\n\u27e818\u27e9 https://docs.rs/dashmap/latest/dashmap/struct.TryReserveError.html: struct dashmap::TryReserveError - TryReserveError\n\u27e819\u27e9 https://docs.rs/dashmap/latest/dashmap/#traits: \u00a7\n\u27e820\u27e9 https://docs.rs/dashmap/latest/dashmap/trait.Map.html: trait dashmap::Map - Map\n\u27e821\u27e9 https://docs.rs/dashmap/latest/dashmap/#types: \u00a7\n\u27e822\u27e9 https://docs.rs/dashmap/latest/dashmap/type.RwLock.html: type dashmap::RwLock - RwLock\n\u27e823\u27e9 https://docs.rs/dashmap/latest/dashmap/type.RwLockReadGuard.html: type dashmap::RwLockReadGuard - RwLockReadGuard\n\u27e824\u27e9 https://docs.rs/dashmap/latest/dashmap/type.RwLockWriteGuard.html: type dashmap::RwLockWriteGuard - RwLockWriteGuard\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `dashmap` crate provides a high-performance, thread-safe concurrent hashmap implementation in Rust, allowing multiple readers and writers without blocking. Key features include `DashMap` for associative arrays, `DashSet` for sets, and utilities like `ReadOnlyView` for read-only access and `RawRwLock` for fine-grained locking. It supports ergonomic APIs for iteration, entry management, and integration with Rayon for parallel processing.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: Concurrent HashMap Functionality\n\u2705 **Factual:** `DashMap` is a concurrent associative array/hashmap in Rust that allows multiple threads to perform read and write operations without explicit locking.  \n\u274c **Counterfactual:** `DashMap` requires manual locking for concurrent access, as it does not provide built-in synchronization mechanisms.\n\n---\n\n### Pair 2: DashSet Wrapper\n\u2705 **Factual:** `DashSet` is a wrapper around `DashMap` that uses `()` as the value type, making it convenient for managing sets.  \n\u274c **Counterfactual:** `DashSet` is a standalone implementation of a concurrent set and does not rely on `DashMap` for its functionality.\n\n---\n\n### Pair 3: Read-Only Views\n\u2705 **Factual:** The `ReadOnlyView` struct in `DashMap` provides a read-only view of the stored values, allowing access to raw references without modifying the data.  \n\u274c **Counterfactual:** The `ReadOnlyView` struct in `DashMap` allows both read and write access to the stored values, enabling modifications.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}