{
    "name": "tonic",
    "version": "0.13.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/tonic/latest/tonic/all.html \"show sidebar\")\n# Crate tonicCopy item path\n[Settings](https://docs.rs/tonic/latest/settings.html)\n[Help](https://docs.rs/tonic/latest/help.html)\nSummary[Source](https://docs.rs/tonic/latest/src/tonic/lib.rs.html#1-135)\nExpand description\nA Rust implementation of [gRPC](https://grpc.io), a high performance, open source, general RPC framework that puts mobile and HTTP/2 first.\n[`tonic`](https://github.com/hyperium/tonic) is a gRPC over HTTP/2 implementation focused on **high performance** , **interoperability** , and **flexibility**. This library was created to have first class support of async/await and to act as a core building block for production systems written in Rust.\n## [\u00a7](https://docs.rs/tonic/latest/tonic/#examples)Examples\nExamples can be found in the [`tonic-examples`](https://github.com/hyperium/tonic/tree/master/examples) crate.\n## [\u00a7](https://docs.rs/tonic/latest/tonic/#getting-started)Getting Started\nFollow the instructions in the [`tonic-build`](https://docs.rs/tonic-build) crate documentation.\n## [\u00a7](https://docs.rs/tonic/latest/tonic/#feature-flags)Feature Flags\n  * `transport`: Enables the fully featured, batteries included client and server implementation based on [`hyper`](https://docs.rs/hyper), [`tower`](https://docs.rs/tower) and [`tokio`](https://docs.rs/tokio). This enables `server` and `channel` features. Enabled by default.\n  * `server`: Enables just the full featured server portion of the `transport` feature.\n  * `channel`: Enables just the full featured channel portion of the `transport` feature.\n  * `router`: Enables the [`axum`](https://docs.rs/axum/0.8.4/x86_64-unknown-linux-gnu/axum/index.html \"mod axum\") based service router. Enabled by default.\n  * `codegen`: Enables all the required exports and optional dependencies required for [`tonic-build`](https://docs.rs/tonic-build). Enabled by default.\n  * `tls-ring`: Enables the [`rustls`](https://docs.rs/rustls) based TLS options for the `transport` feature using the [`ring`](https://docs.rs/ring) libcrypto provider. Not enabled by default.\n  * `tls-aws-lc`: Enables the [`rustls`](https://docs.rs/rustls) based TLS options for the `transport` feature using the [`aws-lc-rs`] libcrypto provider. Not enabled by default.\n  * `tls-native-roots`: Adds system trust roots to [`rustls`](https://docs.rs/rustls)-based gRPC clients using the [`rustls-native-certs`](https://docs.rs/rustls-native-certs) crate. Not enabled by default.\n  * `tls-webpki-roots`: Add the standard trust roots from the [`webpki-roots`](https://docs.rs/webpki-roots) crate to `rustls`-based gRPC clients. Not enabled by default.\n  * `prost`: Enables the [`prost`](https://docs.rs/prost) based gRPC [`Codec`](https://docs.rs/tonic/latest/tonic/codec/trait.Codec.html) implementation. Enabled by default.\n  * `gzip`: Enables compressing requests, responses, and streams. Depends on [`flate2`](https://docs.rs/flate2). Not enabled by default.\n  * `deflate`: Enables compressing requests, responses, and streams. Depends on [`flate2`](https://docs.rs/flate2). Not enabled by default.\n  * `zstd`: Enables compressing requests, responses, and streams. Depends on [`zstd`](https://docs.rs/zstd). Not enabled by default.\n\n\n## [\u00a7](https://docs.rs/tonic/latest/tonic/#structure)Structure\n### [\u00a7](https://docs.rs/tonic/latest/tonic/#generic-implementation)Generic implementation\nThe main goal of [`tonic`](https://github.com/hyperium/tonic) is to provide a generic gRPC implementation over HTTP/2 framing. This means at the lowest level this library provides the ability to use a generic HTTP/2 implementation with different types of gRPC encodings formats. Generally, some form of codegen should be used instead of interacting directly with the items in [`client`](https://docs.rs/tonic/latest/tonic/client/index.html) and [`server`](https://docs.rs/tonic/latest/tonic/transport/struct.Server.html).\n### [\u00a7](https://docs.rs/tonic/latest/tonic/#transport)Transport\nThe [`transport`](https://docs.rs/tonic/latest/tonic/transport/index.html) module contains a fully featured HTTP/2.0 [`Channel`](https://docs.rs/tonic/latest/tonic/transport/struct.Channel.html) (gRPC terminology) and [`Server`](https://docs.rs/tonic/latest/tonic/transport/struct.Server.html). These implementations are built on top of [`tokio`](https://docs.rs/tokio), [`hyper`](https://docs.rs/hyper) and [`tower`](https://docs.rs/tower). It also provides many of the features that the core gRPC libraries provide such as load balancing, tls, timeouts, and many more. This implementation can also be used as a reference implementation to build even more feature rich clients and servers. This module also provides the ability to enable TLS using [`rustls`](https://docs.rs/rustls), via the `tls` feature flag.\n## [\u00a7](https://docs.rs/tonic/latest/tonic/#code-generated-clientserver-configuration)Code generated client/server configuration\n### [\u00a7](https://docs.rs/tonic/latest/tonic/#max-message-size)Max Message Size\nCurrently, both servers and clients can be configured to set the max message encoding and decoding size. This will ensure that an incoming gRPC message will not exhaust the systems memory. By default, the decoding message limit is `4MB` and the encoding limit is `usize::MAX`.\n## Modules[\u00a7](https://docs.rs/tonic/latest/tonic/#modules)\n\n[body](https://docs.rs/tonic/latest/tonic/body/index.html \"mod tonic::body\")\n    HTTP specific body utilities.\n\n[client](https://docs.rs/tonic/latest/tonic/client/index.html \"mod tonic::client\")\n    Generic client implementation.\n\n[codec](https://docs.rs/tonic/latest/tonic/codec/index.html \"mod tonic::codec\")\n    Generic encoding and decoding.\n\n[metadata](https://docs.rs/tonic/latest/tonic/metadata/index.html \"mod tonic::metadata\")\n    Contains data structures and utilities for handling gRPC custom metadata.\n\n[server](https://docs.rs/tonic/latest/tonic/server/index.html \"mod tonic::server\")\n    Generic server implementation.\n\n[service](https://docs.rs/tonic/latest/tonic/service/index.html \"mod tonic::service\")\n    Utilities for using Tower services with Tonic.\n\n[transport](https://docs.rs/tonic/latest/tonic/transport/index.html \"mod tonic::transport\")`server` or `channel`\n    Batteries included server and client.\n## Macros[\u00a7](https://docs.rs/tonic/latest/tonic/#macros)\n\n[include_file_descriptor_set](https://docs.rs/tonic/latest/tonic/macro.include_file_descriptor_set.html \"macro tonic::include_file_descriptor_set\")\n    Include an encoded `prost_types::FileDescriptorSet` as a `&'static [u8]`. The parameter must be the stem of the filename passed to `file_descriptor_set_path` for the `tonic-build::Builder`, excluding the `.bin` extension.\n\n[include_proto](https://docs.rs/tonic/latest/tonic/macro.include_proto.html \"macro tonic::include_proto\")\n    Include generated proto server and client items.\n## Structs[\u00a7](https://docs.rs/tonic/latest/tonic/#structs)\n\n[ConnectError](https://docs.rs/tonic/latest/tonic/struct.ConnectError.html \"struct tonic::ConnectError\")\n    Wrapper type to indicate that an error occurs during the connection process, so that the appropriate gRPC Status can be inferred.\n\n[Extensions](https://docs.rs/tonic/latest/tonic/struct.Extensions.html \"struct tonic::Extensions\")\n    A type map of protocol extensions.\n\n[GrpcMethod](https://docs.rs/tonic/latest/tonic/struct.GrpcMethod.html \"struct tonic::GrpcMethod\")\n    A gRPC Method info extension.\n\n[Request](https://docs.rs/tonic/latest/tonic/struct.Request.html \"struct tonic::Request\")\n    A gRPC request and metadata from an RPC call.\n\n[Response](https://docs.rs/tonic/latest/tonic/struct.Response.html \"struct tonic::Response\")\n    A gRPC response and metadata from an RPC call.\n\n[Status](https://docs.rs/tonic/latest/tonic/struct.Status.html \"struct tonic::Status\")\n    A gRPC status describing the result of an RPC call.\n\n[Streaming](https://docs.rs/tonic/latest/tonic/struct.Streaming.html \"struct tonic::Streaming\")\n    Streaming requests and responses.\n\n[TimeoutExpired](https://docs.rs/tonic/latest/tonic/struct.TimeoutExpired.html \"struct tonic::TimeoutExpired\")\n    Error returned if a request didn\u2019t complete within the configured timeout.\n## Enums[\u00a7](https://docs.rs/tonic/latest/tonic/#enums)\n\n[Code](https://docs.rs/tonic/latest/tonic/enum.Code.html \"enum tonic::Code\")\n    gRPC status codes used by [`Status`](https://docs.rs/tonic/latest/tonic/struct.Status.html \"struct tonic::Status\").\n## Traits[\u00a7](https://docs.rs/tonic/latest/tonic/#traits)\n\n[IntoRequest](https://docs.rs/tonic/latest/tonic/trait.IntoRequest.html \"trait tonic::IntoRequest\")\n    Trait implemented by RPC request types.\n\n[IntoStreamingRequest](https://docs.rs/tonic/latest/tonic/trait.IntoStreamingRequest.html \"trait tonic::IntoStreamingRequest\")\n    Trait implemented by RPC streaming request types.\n## Type Aliases[\u00a7](https://docs.rs/tonic/latest/tonic/#types)\n\n[Result](https://docs.rs/tonic/latest/tonic/type.Result.html \"type tonic::Result\")\n    `Result` is a type that represents either success ([`Ok`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok \"variant core::result::Result::Ok\")) or failure ([`Err`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err \"variant core::result::Result::Err\")). By default, the Err value is of type [`Status`](https://docs.rs/tonic/latest/tonic/struct.Status.html \"struct tonic::Status\") but this can be overridden if desired.\n## Attribute Macros[\u00a7](https://docs.rs/tonic/latest/tonic/#attributes)\n\n[async_trait](https://docs.rs/tonic/latest/tonic/attr.async_trait.html \"attr tonic::async_trait\")`codegen`\n    A re-export of [`async-trait`](https://docs.rs/async-trait) for use with codegen.\n",
        "markdown_with_citations": "[](https://docs.rs/tonic/latest/tonic/all.html \"show sidebar\")\n# Crate tonicCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA Rust implementation of gRPC\u27e84\u27e9, a high performance, open source, general RPC framework that puts mobile and HTTP/2 first.\n`tonic`\u27e85\u27e9 is a gRPC over HTTP/2 implementation focused on **high performance** , **interoperability** , and **flexibility**. This library was created to have first class support of async/await and to act as a core building block for production systems written in Rust.\n## \u00a7\u27e86\u27e9Examples\nExamples can be found in the `tonic-examples`\u27e87\u27e9 crate.\n## \u00a7\u27e88\u27e9Getting Started\nFollow the instructions in the `tonic-build`\u27e89\u27e9 crate documentation.\n## \u00a7\u27e810\u27e9Feature Flags\n  * `transport`: Enables the fully featured, batteries included client and server implementation based on `hyper`\u27e811\u27e9, `tower`\u27e812\u27e9 and `tokio`\u27e813\u27e9. This enables `server` and `channel` features. Enabled by default.\n  * `server`: Enables just the full featured server portion of the `transport` feature.\n  * `channel`: Enables just the full featured channel portion of the `transport` feature.\n  * `router`: Enables the `axum`\u27e814\u27e9 based service router. Enabled by default.\n  * `codegen`: Enables all the required exports and optional dependencies required for `tonic-build`\u27e89\u27e9. Enabled by default.\n  * `tls-ring`: Enables the `rustls`\u27e815\u27e9 based TLS options for the `transport` feature using the `ring`\u27e816\u27e9 libcrypto provider. Not enabled by default.\n  * `tls-aws-lc`: Enables the `rustls`\u27e815\u27e9 based TLS options for the `transport` feature using the [`aws-lc-rs`] libcrypto provider. Not enabled by default.\n  * `tls-native-roots`: Adds system trust roots to `rustls`\u27e815\u27e9-based gRPC clients using the `rustls-native-certs`\u27e817\u27e9 crate. Not enabled by default.\n  * `tls-webpki-roots`: Add the standard trust roots from the `webpki-roots`\u27e818\u27e9 crate to `rustls`-based gRPC clients. Not enabled by default.\n  * `prost`: Enables the `prost`\u27e819\u27e9 based gRPC `Codec`\u27e820\u27e9 implementation. Enabled by default.\n  * `gzip`: Enables compressing requests, responses, and streams. Depends on `flate2`\u27e821\u27e9. Not enabled by default.\n  * `deflate`: Enables compressing requests, responses, and streams. Depends on `flate2`\u27e821\u27e9. Not enabled by default.\n  * `zstd`: Enables compressing requests, responses, and streams. Depends on `zstd`\u27e822\u27e9. Not enabled by default.\n\n\n## \u00a7\u27e823\u27e9Structure\n### \u00a7\u27e824\u27e9Generic implementation\nThe main goal of `tonic`\u27e85\u27e9 is to provide a generic gRPC implementation over HTTP/2 framing. This means at the lowest level this library provides the ability to use a generic HTTP/2 implementation with different types of gRPC encodings formats. Generally, some form of codegen should be used instead of interacting directly with the items in `client`\u27e825\u27e9 and `server`\u27e826\u27e9.\n### \u00a7\u27e827\u27e9Transport\nThe `transport`\u27e828\u27e9 module contains a fully featured HTTP/2.0 `Channel`\u27e829\u27e9 (gRPC terminology) and `Server`\u27e826\u27e9. These implementations are built on top of `tokio`\u27e813\u27e9, `hyper`\u27e811\u27e9 and `tower`\u27e812\u27e9. It also provides many of the features that the core gRPC libraries provide such as load balancing, tls, timeouts, and many more. This implementation can also be used as a reference implementation to build even more feature rich clients and servers. This module also provides the ability to enable TLS using `rustls`\u27e815\u27e9, via the `tls` feature flag.\n## \u00a7\u27e830\u27e9Code generated client/server configuration\n### \u00a7\u27e831\u27e9Max Message Size\nCurrently, both servers and clients can be configured to set the max message encoding and decoding size. This will ensure that an incoming gRPC message will not exhaust the systems memory. By default, the decoding message limit is `4MB` and the encoding limit is `usize::MAX`.\n## Modules\u00a7\u27e832\u27e9\n\nbody\u27e833\u27e9\n    HTTP specific body utilities.\n\nclient\u27e825\u27e9\n    Generic client implementation.\n\ncodec\u27e834\u27e9\n    Generic encoding and decoding.\n\nmetadata\u27e835\u27e9\n    Contains data structures and utilities for handling gRPC custom metadata.\n\nserver\u27e836\u27e9\n    Generic server implementation.\n\nservice\u27e837\u27e9\n    Utilities for using Tower services with Tonic.\n\ntransport\u27e828\u27e9`server` or `channel`\n    Batteries included server and client.\n## Macros\u00a7\u27e838\u27e9\n\ninclude_file_descriptor_set\u27e839\u27e9\n    Include an encoded `prost_types::FileDescriptorSet` as a `&'static [u8]`. The parameter must be the stem of the filename passed to `file_descriptor_set_path` for the `tonic-build::Builder`, excluding the `.bin` extension.\n\ninclude_proto\u27e840\u27e9\n    Include generated proto server and client items.\n## Structs\u00a7\u27e841\u27e9\n\nConnectError\u27e842\u27e9\n    Wrapper type to indicate that an error occurs during the connection process, so that the appropriate gRPC Status can be inferred.\n\nExtensions\u27e843\u27e9\n    A type map of protocol extensions.\n\nGrpcMethod\u27e844\u27e9\n    A gRPC Method info extension.\n\nRequest\u27e845\u27e9\n    A gRPC request and metadata from an RPC call.\n\nResponse\u27e846\u27e9\n    A gRPC response and metadata from an RPC call.\n\nStatus\u27e847\u27e9\n    A gRPC status describing the result of an RPC call.\n\nStreaming\u27e848\u27e9\n    Streaming requests and responses.\n\nTimeoutExpired\u27e849\u27e9\n    Error returned if a request didn\u2019t complete within the configured timeout.\n## Enums\u00a7\u27e850\u27e9\n\nCode\u27e851\u27e9\n    gRPC status codes used by `Status`\u27e847\u27e9.\n## Traits\u00a7\u27e852\u27e9\n\nIntoRequest\u27e853\u27e9\n    Trait implemented by RPC request types.\n\nIntoStreamingRequest\u27e854\u27e9\n    Trait implemented by RPC streaming request types.\n## Type Aliases\u00a7\u27e855\u27e9\n\nResult\u27e856\u27e9\n    `Result` is a type that represents either success (`Ok`\u27e857\u27e9) or failure (`Err`\u27e858\u27e9). By default, the Err value is of type `Status`\u27e847\u27e9 but this can be overridden if desired.\n## Attribute Macros\u00a7\u27e859\u27e9\n\nasync_trait\u27e860\u27e9`codegen`\n    A re-export of `async-trait`\u27e861\u27e9 for use with codegen.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tonic/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tonic/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tonic/latest/src/tonic/lib.rs.html#1-135: Source\n\u27e84\u27e9 https://grpc.io: gRPC\n\u27e85\u27e9 https://github.com/hyperium/tonic: `tonic`\n\u27e86\u27e9 https://docs.rs/tonic/latest/tonic/#examples: \u00a7\n\u27e87\u27e9 https://github.com/hyperium/tonic/tree/master/examples: `tonic-examples`\n\u27e88\u27e9 https://docs.rs/tonic/latest/tonic/#getting-started: \u00a7\n\u27e89\u27e9 https://docs.rs/tonic-build: `tonic-build`\n\u27e810\u27e9 https://docs.rs/tonic/latest/tonic/#feature-flags: \u00a7\n\u27e811\u27e9 https://docs.rs/hyper: `hyper`\n\u27e812\u27e9 https://docs.rs/tower: `tower`\n\u27e813\u27e9 https://docs.rs/tokio: `tokio`\n\u27e814\u27e9 https://docs.rs/axum/0.8.4/x86_64-unknown-linux-gnu/axum/index.html: mod axum - `axum`\n\u27e815\u27e9 https://docs.rs/rustls: `rustls`\n\u27e816\u27e9 https://docs.rs/ring: `ring`\n\u27e817\u27e9 https://docs.rs/rustls-native-certs: `rustls-native-certs`\n\u27e818\u27e9 https://docs.rs/webpki-roots: `webpki-roots`\n\u27e819\u27e9 https://docs.rs/prost: `prost`\n\u27e820\u27e9 https://docs.rs/tonic/latest/tonic/codec/trait.Codec.html: `Codec`\n\u27e821\u27e9 https://docs.rs/flate2: `flate2`\n\u27e822\u27e9 https://docs.rs/zstd: `zstd`\n\u27e823\u27e9 https://docs.rs/tonic/latest/tonic/#structure: \u00a7\n\u27e824\u27e9 https://docs.rs/tonic/latest/tonic/#generic-implementation: \u00a7\n\u27e825\u27e9 https://docs.rs/tonic/latest/tonic/client/index.html: `client`\n\u27e826\u27e9 https://docs.rs/tonic/latest/tonic/transport/struct.Server.html: `server`\n\u27e827\u27e9 https://docs.rs/tonic/latest/tonic/#transport: \u00a7\n\u27e828\u27e9 https://docs.rs/tonic/latest/tonic/transport/index.html: `transport`\n\u27e829\u27e9 https://docs.rs/tonic/latest/tonic/transport/struct.Channel.html: `Channel`\n\u27e830\u27e9 https://docs.rs/tonic/latest/tonic/#code-generated-clientserver-configuration: \u00a7\n\u27e831\u27e9 https://docs.rs/tonic/latest/tonic/#max-message-size: \u00a7\n\u27e832\u27e9 https://docs.rs/tonic/latest/tonic/#modules: \u00a7\n\u27e833\u27e9 https://docs.rs/tonic/latest/tonic/body/index.html: mod tonic::body - body\n\u27e834\u27e9 https://docs.rs/tonic/latest/tonic/codec/index.html: mod tonic::codec - codec\n\u27e835\u27e9 https://docs.rs/tonic/latest/tonic/metadata/index.html: mod tonic::metadata - metadata\n\u27e836\u27e9 https://docs.rs/tonic/latest/tonic/server/index.html: mod tonic::server - server\n\u27e837\u27e9 https://docs.rs/tonic/latest/tonic/service/index.html: mod tonic::service - service\n\u27e838\u27e9 https://docs.rs/tonic/latest/tonic/#macros: \u00a7\n\u27e839\u27e9 https://docs.rs/tonic/latest/tonic/macro.include_file_descriptor_set.html: macro tonic::include_file_descriptor_set - include_file_descriptor_set\n\u27e840\u27e9 https://docs.rs/tonic/latest/tonic/macro.include_proto.html: macro tonic::include_proto - include_proto\n\u27e841\u27e9 https://docs.rs/tonic/latest/tonic/#structs: \u00a7\n\u27e842\u27e9 https://docs.rs/tonic/latest/tonic/struct.ConnectError.html: struct tonic::ConnectError - ConnectError\n\u27e843\u27e9 https://docs.rs/tonic/latest/tonic/struct.Extensions.html: struct tonic::Extensions - Extensions\n\u27e844\u27e9 https://docs.rs/tonic/latest/tonic/struct.GrpcMethod.html: struct tonic::GrpcMethod - GrpcMethod\n\u27e845\u27e9 https://docs.rs/tonic/latest/tonic/struct.Request.html: struct tonic::Request - Request\n\u27e846\u27e9 https://docs.rs/tonic/latest/tonic/struct.Response.html: struct tonic::Response - Response\n\u27e847\u27e9 https://docs.rs/tonic/latest/tonic/struct.Status.html: struct tonic::Status - Status\n\u27e848\u27e9 https://docs.rs/tonic/latest/tonic/struct.Streaming.html: struct tonic::Streaming - Streaming\n\u27e849\u27e9 https://docs.rs/tonic/latest/tonic/struct.TimeoutExpired.html: struct tonic::TimeoutExpired - TimeoutExpired\n\u27e850\u27e9 https://docs.rs/tonic/latest/tonic/#enums: \u00a7\n\u27e851\u27e9 https://docs.rs/tonic/latest/tonic/enum.Code.html: enum tonic::Code - Code\n\u27e852\u27e9 https://docs.rs/tonic/latest/tonic/#traits: \u00a7\n\u27e853\u27e9 https://docs.rs/tonic/latest/tonic/trait.IntoRequest.html: trait tonic::IntoRequest - IntoRequest\n\u27e854\u27e9 https://docs.rs/tonic/latest/tonic/trait.IntoStreamingRequest.html: trait tonic::IntoStreamingRequest - IntoStreamingRequest\n\u27e855\u27e9 https://docs.rs/tonic/latest/tonic/#types: \u00a7\n\u27e856\u27e9 https://docs.rs/tonic/latest/tonic/type.Result.html: type tonic::Result - Result\n\u27e857\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok: variant core::result::Result::Ok - `Ok`\n\u27e858\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err: variant core::result::Result::Err - `Err`\n\u27e859\u27e9 https://docs.rs/tonic/latest/tonic/#attributes: \u00a7\n\u27e860\u27e9 https://docs.rs/tonic/latest/tonic/attr.async_trait.html: attr tonic::async_trait - async_trait\n\u27e861\u27e9 https://docs.rs/async-trait: `async-trait`\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `tonic` crate is a high-performance, async/await-first implementation of gRPC over HTTP/2 for Rust, designed for interoperability and flexibility in production systems. It provides robust client and server implementations built on `tokio`, `hyper`, and `tower`, with features like load balancing, TLS support, and configurable message limits. Key features include code generation, compression options (gzip, deflate, zstd), and support for custom gRPC codecs and metadata.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Async/Await Support  \n\u2705 **Factual:** The `tonic` crate provides first-class support for Rust's async/await syntax, allowing developers to write asynchronous gRPC clients and servers efficiently.  \n\u274c **Counterfactual:** The `tonic` crate does not support async/await and requires developers to use callback-based asynchronous programming for gRPC implementations.  \n\n---\n\n### Pair 2: Transport Implementation  \n\u2705 **Factual:** The `transport` module in `tonic` is built on top of `tokio`, `hyper`, and `tower`, providing a fully featured HTTP/2-based gRPC client and server implementation.  \n\u274c **Counterfactual:** The `transport` module in `tonic` uses `async-std` instead of `tokio` for its underlying asynchronous runtime.  \n\n---\n\n### Pair 3: Compression Features  \n\u2705 **Factual:** The `tonic` crate supports optional compression for gRPC requests, responses, and streams using feature flags like `gzip`, `deflate`, and `zstd`.  \n\u274c **Counterfactual:** The `tonic` crate enables compression for gRPC requests, responses, and streams by default, without requiring any feature flags.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}