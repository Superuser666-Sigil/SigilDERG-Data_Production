{
    "name": "reqwest",
    "version": "0.12.20",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/reqwest/latest/reqwest/all.html \"show sidebar\")\n# Crate reqwestCopy item path\n[Settings](https://docs.rs/reqwest/latest/settings.html)\n[Help](https://docs.rs/reqwest/latest/help.html)\nSummary[Source](https://docs.rs/reqwest/latest/src/reqwest/lib.rs.html#1-394)\nExpand description\n## [\u00a7](https://docs.rs/reqwest/latest/reqwest/#reqwest)reqwest\nThe `reqwest` crate provides a convenient, higher-level HTTP [`Client`](https://docs.rs/reqwest/latest/reqwest/struct.Client.html).\nIt handles many of the things that most people just expect an HTTP client to do for them.\n  * Async and [blocking](https://docs.rs/reqwest/latest/reqwest/blocking/index.html) Clients\n  * Plain bodies, [JSON](https://docs.rs/reqwest/latest/reqwest/#json), [urlencoded](https://docs.rs/reqwest/latest/reqwest/#forms), [multipart](https://docs.rs/reqwest/latest/reqwest/multipart/index.html \"mod reqwest::multipart\")\n  * Customizable [redirect policy](https://docs.rs/reqwest/latest/reqwest/#redirect-policies)\n  * HTTP [Proxies](https://docs.rs/reqwest/latest/reqwest/#proxies)\n  * Uses [TLS](https://docs.rs/reqwest/latest/reqwest/#tls) by default\n  * Cookies\n\n\nThe [`reqwest::Client`](https://docs.rs/reqwest/latest/reqwest/struct.Client.html) is asynchronous. For applications wishing to only make a few HTTP requests, the [`reqwest::blocking`](https://docs.rs/reqwest/latest/reqwest/blocking/index.html \"mod reqwest::blocking\") API may be more convenient.\nAdditional learning resources include:\n  * [The Rust Cookbook](https://rust-lang-nursery.github.io/rust-cookbook/web/clients.html)\n  * [Reqwest Repository Examples](https://github.com/seanmonstar/reqwest/tree/master/examples)\n\n\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#commercial-support)Commercial Support\nFor private advice, support, reviews, access to the maintainer, and the like, reach out for [commercial support](https://seanmonstar.com/sponsor).\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#making-a-get-request)Making a GET request\nFor a single request, you can use the [`get`](https://docs.rs/reqwest/latest/reqwest/fn.get.html) shortcut method.\n```\nlet body = reqwest::get(\"https://www.rust-lang.org\")\n  .await?\n  .text()\n  .await?;\nprintln!(\"body = {body:?}\");\n```\n\n**NOTE** : If you plan to perform multiple requests, it is best to create a [`Client`](https://docs.rs/reqwest/latest/reqwest/struct.Client.html) and reuse it, taking advantage of keep-alive connection pooling.\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#making-post-requests-or-setting-request-bodies)Making POST requests (or setting request bodies)\nThere are several ways you can set the body of a request. The basic one is by using the `body()` method of a [`RequestBuilder`](https://docs.rs/reqwest/latest/reqwest/struct.RequestBuilder.html). This lets you set the exact raw bytes of what the body should be. It accepts various types, including `String` and `Vec<u8>`. If you wish to pass a custom type, you can use the `reqwest::Body` constructors.\n```\nlet client = reqwest::Client::new();\nlet res = client.post(\"http://httpbin.org/post\")\n  .body(\"the exact body that is sent\")\n  .send()\n  .await?;\n```\n\n#### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#forms)Forms\nIt\u2019s very common to want to send form data in a request body. This can be done with any type that can be serialized into form data.\nThis can be an array of tuples, or a `HashMap`, or a custom type that implements [`Serialize`](http://serde.rs).\n```\n// This will POST a body of `foo=bar&baz=quux`\nlet params = [(\"foo\", \"bar\"), (\"baz\", \"quux\")];\nlet client = reqwest::Client::new();\nlet res = client.post(\"http://httpbin.org/post\")\n  .form(&params)\n  .send()\n  .await?;\n```\n\n#### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#json)JSON\nThere is also a `json` method helper on the [`RequestBuilder`](https://docs.rs/reqwest/latest/reqwest/struct.RequestBuilder.html) that works in a similar fashion the `form` method. It can take any value that can be serialized into JSON. The feature `json` is required.\n```\n// This will POST a body of `{\"lang\":\"rust\",\"body\":\"json\"}`\nlet mut map = HashMap::new();\nmap.insert(\"lang\", \"rust\");\nmap.insert(\"body\", \"json\");\nlet client = reqwest::Client::new();\nlet res = client.post(\"http://httpbin.org/post\")\n  .json(&map)\n  .send()\n  .await?;\n```\n\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#redirect-policies)Redirect Policies\nBy default, a `Client` will automatically handle HTTP redirects, having a maximum redirect chain of 10 hops. To customize this behavior, a [`redirect::Policy`](https://docs.rs/reqwest/latest/reqwest/redirect/index.html \"mod reqwest::redirect\") can be used with a `ClientBuilder`.\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#cookies)Cookies\nThe automatic storing and sending of session cookies can be enabled with the [`cookie_store`](https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.cookie_store \"method reqwest::ClientBuilder::cookie_store\") method on `ClientBuilder`.\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#proxies)Proxies\n**NOTE** : System proxies are enabled by default.\nSystem proxies look in environment variables to set HTTP or HTTPS proxies.\n`HTTP_PROXY` or `http_proxy` provide HTTP proxies for HTTP connections while `HTTPS_PROXY` or `https_proxy` provide HTTPS proxies for HTTPS connections. `ALL_PROXY` or `all_proxy` provide proxies for both HTTP and HTTPS connections. If both the all proxy and HTTP or HTTPS proxy variables are set the more specific HTTP or HTTPS proxies take precedence.\nThese can be overwritten by adding a [`Proxy`](https://docs.rs/reqwest/latest/reqwest/struct.Proxy.html \"struct reqwest::Proxy\") to `ClientBuilder` i.e. `let proxy = reqwest::Proxy::http(\"https://secure.example\")?;` or disabled by calling `ClientBuilder::no_proxy()`.\n`socks` feature is required if you have configured socks proxy like this:\n```\nexport https_proxy=socks5://127.0.0.1:1086\n```\n\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#tls)TLS\nA `Client` will use transport layer security (TLS) by default to connect to HTTPS destinations.\n  * Additional server certificates can be configured on a `ClientBuilder` with the [`Certificate`](https://docs.rs/reqwest/latest/reqwest/tls/struct.Certificate.html \"struct reqwest::tls::Certificate\") type.\n  * Client certificates can be added to a `ClientBuilder` with the [`Identity`](https://docs.rs/reqwest/latest/reqwest/tls/struct.Identity.html \"struct reqwest::tls::Identity\") type.\n  * Various parts of TLS can also be configured or even disabled on the `ClientBuilder`.\n\n\nSee more details in the [`tls`](https://docs.rs/reqwest/latest/reqwest/tls/index.html \"mod reqwest::tls\") module.\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#wasm)WASM\nThe Client implementation automatically switches to the WASM one when the target_arch is wasm32, the usage is basically the same as the async api. Some of the features are disabled in wasm : [`tls`](https://docs.rs/reqwest/latest/reqwest/tls/index.html \"mod reqwest::tls\"), [`cookie`](https://docs.rs/reqwest/latest/reqwest/cookie/index.html \"mod reqwest::cookie\"), [`blocking`](https://docs.rs/reqwest/latest/reqwest/blocking/index.html \"mod reqwest::blocking\"), as well as various `ClientBuilder` methods such as `timeout()` and `connector_layer()`.\nTLS and cookies are provided through the browser environment, so reqwest can issue TLS requests with cookies, but has limited configuration.\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#optional-features)Optional Features\nThe following are a list of [Cargo features](https://doc.rust-lang.org/stable/cargo/reference/manifest.html#the-features-section) that can be enabled or disabled:\n  * **http2** _(enabled by default)_ : Enables HTTP/2 support.\n  * **default-tls** _(enabled by default)_ : Provides TLS support to connect over HTTPS.\n  * **native-tls** : Enables TLS functionality provided by `native-tls`.\n  * **native-tls-vendored** : Enables the `vendored` feature of `native-tls`.\n  * **native-tls-alpn** : Enables the `alpn` feature of `native-tls`.\n  * **rustls-tls** : Enables TLS functionality provided by `rustls`. Equivalent to `rustls-tls-webpki-roots`.\n  * **rustls-tls-manual-roots** : Enables TLS functionality provided by `rustls`, without setting any root certificates. Roots have to be specified manually.\n  * **rustls-tls-webpki-roots** : Enables TLS functionality provided by `rustls`, while using root certificates from the `webpki-roots` crate.\n  * **rustls-tls-native-roots** : Enables TLS functionality provided by `rustls`, while using root certificates from the `rustls-native-certs` crate.\n  * **blocking** : Provides the [blocking](https://docs.rs/reqwest/latest/reqwest/blocking/index.html) client API.\n  * **charset** _(enabled by default)_ : Improved support for decoding text.\n  * **cookies** : Provides cookie session support.\n  * **gzip** : Provides response body gzip decompression.\n  * **brotli** : Provides response body brotli decompression.\n  * **zstd** : Provides response body zstd decompression.\n  * **deflate** : Provides response body deflate decompression.\n  * **json** : Provides serialization and deserialization for JSON bodies.\n  * **multipart** : Provides functionality for multipart forms.\n  * **stream** : Adds support for `futures::Stream`.\n  * **socks** : Provides SOCKS5 proxy support.\n  * **hickory-dns** : Enables a hickory-dns async resolver instead of default threadpool using `getaddrinfo`.\n  * **system-proxy** _(enabled by default)_ : Use Windows and macOS system proxy settings automatically.\n\n\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#unstable-features)Unstable Features\nSome feature flags require additional opt-in by the application, by setting a `reqwest_unstable` flag.\n  * **http3** _(unstable)_ : Enables support for sending HTTP/3 requests.\n\n\nThese features are unstable, and experimental. Details about them may be changed in patch releases.\nYou can pass such a flag to the compiler via `.cargo/config`, or environment variables, such as:\n```\nRUSTFLAGS=\"--cfg reqwest_unstable\" cargo build\n```\n\n### [\u00a7](https://docs.rs/reqwest/latest/reqwest/#sponsors)Sponsors\nSupport this project by becoming a [sponsor](https://seanmonstar.com/sponsor).\n## Re-exports[\u00a7](https://docs.rs/reqwest/latest/reqwest/#reexports)\n\n`pub use tls::Certificate[](https://docs.rs/reqwest/latest/reqwest/tls/struct.Certificate.html \"struct reqwest::tls::Certificate\");`\n\n\n`pub use tls::Identity[](https://docs.rs/reqwest/latest/reqwest/tls/struct.Identity.html \"struct reqwest::tls::Identity\");`\n\n## Modules[\u00a7](https://docs.rs/reqwest/latest/reqwest/#modules)\n\n[blocking](https://docs.rs/reqwest/latest/reqwest/blocking/index.html \"mod reqwest::blocking\")\n    A blocking Client API.\n\n[cookie](https://docs.rs/reqwest/latest/reqwest/cookie/index.html \"mod reqwest::cookie\")\n    HTTP Cookies\n\n[dns](https://docs.rs/reqwest/latest/reqwest/dns/index.html \"mod reqwest::dns\")\n    DNS resolution\n\n[header](https://docs.rs/reqwest/latest/reqwest/header/index.html \"mod reqwest::header\")\n    HTTP header types\n\n[multipart](https://docs.rs/reqwest/latest/reqwest/multipart/index.html \"mod reqwest::multipart\")\n    multipart/form-data\n\n[redirect](https://docs.rs/reqwest/latest/reqwest/redirect/index.html \"mod reqwest::redirect\")\n    Redirect Handling\n\n[tls](https://docs.rs/reqwest/latest/reqwest/tls/index.html \"mod reqwest::tls\")\n    TLS configuration and types\n## Structs[\u00a7](https://docs.rs/reqwest/latest/reqwest/#structs)\n\n[Body](https://docs.rs/reqwest/latest/reqwest/struct.Body.html \"struct reqwest::Body\")\n    An asynchronous request body.\n\n[Client](https://docs.rs/reqwest/latest/reqwest/struct.Client.html \"struct reqwest::Client\")\n    An asynchronous `Client` to make Requests with.\n\n[ClientBuilder](https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html \"struct reqwest::ClientBuilder\")\n    A `ClientBuilder` can be used to create a `Client` with custom configuration.\n\n[Error](https://docs.rs/reqwest/latest/reqwest/struct.Error.html \"struct reqwest::Error\")\n    The Errors that may occur when processing a `Request`.\n\n[Method](https://docs.rs/reqwest/latest/reqwest/struct.Method.html \"struct reqwest::Method\")\n    The Request Method (VERB)\n\n[NoProxy](https://docs.rs/reqwest/latest/reqwest/struct.NoProxy.html \"struct reqwest::NoProxy\")\n    A configuration for filtering out requests that shouldn\u2019t be proxied\n\n[Proxy](https://docs.rs/reqwest/latest/reqwest/struct.Proxy.html \"struct reqwest::Proxy\")\n    Configuration of a proxy that a `Client` should pass requests to.\n\n[Request](https://docs.rs/reqwest/latest/reqwest/struct.Request.html \"struct reqwest::Request\")\n    A request which can be executed with `Client::execute()`.\n\n[RequestBuilder](https://docs.rs/reqwest/latest/reqwest/struct.RequestBuilder.html \"struct reqwest::RequestBuilder\")\n    A builder to construct the properties of a `Request`.\n\n[Response](https://docs.rs/reqwest/latest/reqwest/struct.Response.html \"struct reqwest::Response\")\n    A Response to a submitted `Request`.\n\n[StatusCode](https://docs.rs/reqwest/latest/reqwest/struct.StatusCode.html \"struct reqwest::StatusCode\")\n    An HTTP status code (`status-code` in RFC 9110 et al.).\n\n[Upgraded](https://docs.rs/reqwest/latest/reqwest/struct.Upgraded.html \"struct reqwest::Upgraded\")\n    An upgraded HTTP connection.\n\n[Url](https://docs.rs/reqwest/latest/reqwest/struct.Url.html \"struct reqwest::Url\")\n    A parsed URL record.\n\n[Version](https://docs.rs/reqwest/latest/reqwest/struct.Version.html \"struct reqwest::Version\")\n    Represents a version of the HTTP spec.\n## Traits[\u00a7](https://docs.rs/reqwest/latest/reqwest/#traits)\n\n[IntoUrl](https://docs.rs/reqwest/latest/reqwest/trait.IntoUrl.html \"trait reqwest::IntoUrl\")\n    A trait to try to convert some type into a `Url`.\n\n[ResponseBuilderExt](https://docs.rs/reqwest/latest/reqwest/trait.ResponseBuilderExt.html \"trait reqwest::ResponseBuilderExt\")\n    Extension trait for http::response::Builder objects\n## Functions[\u00a7](https://docs.rs/reqwest/latest/reqwest/#functions)\n\n[get](https://docs.rs/reqwest/latest/reqwest/fn.get.html \"fn reqwest::get\")\n    Shortcut method to quickly make a `GET` request.\n## Type Aliases[\u00a7](https://docs.rs/reqwest/latest/reqwest/#types)\n\n[Result](https://docs.rs/reqwest/latest/reqwest/type.Result.html \"type reqwest::Result\")\n    A `Result` alias where the `Err` case is `reqwest::Error`.\n",
        "markdown_with_citations": "[](https://docs.rs/reqwest/latest/reqwest/all.html \"show sidebar\")\n# Crate reqwestCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9reqwest\nThe `reqwest` crate provides a convenient, higher-level HTTP `Client`\u27e85\u27e9.\nIt handles many of the things that most people just expect an HTTP client to do for them.\n  * Async and blocking\u27e86\u27e9 Clients\n  * Plain bodies, JSON\u27e87\u27e9, urlencoded\u27e88\u27e9, multipart\u27e89\u27e9\n  * Customizable redirect policy\u27e810\u27e9\n  * HTTP Proxies\u27e811\u27e9\n  * Uses TLS\u27e812\u27e9 by default\n  * Cookies\n\n\nThe `reqwest::Client`\u27e85\u27e9 is asynchronous. For applications wishing to only make a few HTTP requests, the `reqwest::blocking`\u27e86\u27e9 API may be more convenient.\nAdditional learning resources include:\n  * The Rust Cookbook\u27e813\u27e9\n  * Reqwest Repository Examples\u27e814\u27e9\n\n\n### \u00a7\u27e815\u27e9Commercial Support\nFor private advice, support, reviews, access to the maintainer, and the like, reach out for commercial support\u27e816\u27e9.\n### \u00a7\u27e817\u27e9Making a GET request\nFor a single request, you can use the `get`\u27e818\u27e9 shortcut method.\n```\nlet body = reqwest::get(\"https://www.rust-lang.org\")\n  .await?\n  .text()\n  .await?;\nprintln!(\"body = {body:?}\");\n```\n\n**NOTE** : If you plan to perform multiple requests, it is best to create a `Client`\u27e85\u27e9 and reuse it, taking advantage of keep-alive connection pooling.\n### \u00a7\u27e819\u27e9Making POST requests (or setting request bodies)\nThere are several ways you can set the body of a request. The basic one is by using the `body()` method of a `RequestBuilder`\u27e820\u27e9. This lets you set the exact raw bytes of what the body should be. It accepts various types, including `String` and `Vec<u8>`. If you wish to pass a custom type, you can use the `reqwest::Body` constructors.\n```\nlet client = reqwest::Client::new();\nlet res = client.post(\"http://httpbin.org/post\")\n  .body(\"the exact body that is sent\")\n  .send()\n  .await?;\n```\n\n#### \u00a7\u27e88\u27e9Forms\nIt\u2019s very common to want to send form data in a request body. This can be done with any type that can be serialized into form data.\nThis can be an array of tuples, or a `HashMap`, or a custom type that implements `Serialize`\u27e821\u27e9.\n```\n// This will POST a body of `foo=bar&baz=quux`\nlet params = [(\"foo\", \"bar\"), (\"baz\", \"quux\")];\nlet client = reqwest::Client::new();\nlet res = client.post(\"http://httpbin.org/post\")\n  .form(&params)\n  .send()\n  .await?;\n```\n\n#### \u00a7\u27e87\u27e9JSON\nThere is also a `json` method helper on the `RequestBuilder`\u27e820\u27e9 that works in a similar fashion the `form` method. It can take any value that can be serialized into JSON. The feature `json` is required.\n```\n// This will POST a body of `{\"lang\":\"rust\",\"body\":\"json\"}`\nlet mut map = HashMap::new();\nmap.insert(\"lang\", \"rust\");\nmap.insert(\"body\", \"json\");\nlet client = reqwest::Client::new();\nlet res = client.post(\"http://httpbin.org/post\")\n  .json(&map)\n  .send()\n  .await?;\n```\n\n### \u00a7\u27e810\u27e9Redirect Policies\nBy default, a `Client` will automatically handle HTTP redirects, having a maximum redirect chain of 10 hops. To customize this behavior, a `redirect::Policy`\u27e822\u27e9 can be used with a `ClientBuilder`.\n### \u00a7\u27e823\u27e9Cookies\nThe automatic storing and sending of session cookies can be enabled with the `cookie_store`\u27e824\u27e9 method on `ClientBuilder`.\n### \u00a7\u27e811\u27e9Proxies\n**NOTE** : System proxies are enabled by default.\nSystem proxies look in environment variables to set HTTP or HTTPS proxies.\n`HTTP_PROXY` or `http_proxy` provide HTTP proxies for HTTP connections while `HTTPS_PROXY` or `https_proxy` provide HTTPS proxies for HTTPS connections. `ALL_PROXY` or `all_proxy` provide proxies for both HTTP and HTTPS connections. If both the all proxy and HTTP or HTTPS proxy variables are set the more specific HTTP or HTTPS proxies take precedence.\nThese can be overwritten by adding a `Proxy`\u27e825\u27e9 to `ClientBuilder` i.e. `let proxy = reqwest::Proxy::http(\"https://secure.example\")?;` or disabled by calling `ClientBuilder::no_proxy()`.\n`socks` feature is required if you have configured socks proxy like this:\n```\nexport https_proxy=socks5://127.0.0.1:1086\n```\n\n### \u00a7\u27e812\u27e9TLS\nA `Client` will use transport layer security (TLS) by default to connect to HTTPS destinations.\n  * Additional server certificates can be configured on a `ClientBuilder` with the `Certificate`\u27e826\u27e9 type.\n  * Client certificates can be added to a `ClientBuilder` with the `Identity`\u27e827\u27e9 type.\n  * Various parts of TLS can also be configured or even disabled on the `ClientBuilder`.\n\n\nSee more details in the `tls`\u27e828\u27e9 module.\n### \u00a7\u27e829\u27e9WASM\nThe Client implementation automatically switches to the WASM one when the target_arch is wasm32, the usage is basically the same as the async api. Some of the features are disabled in wasm : `tls`\u27e828\u27e9, `cookie`\u27e830\u27e9, `blocking`\u27e86\u27e9, as well as various `ClientBuilder` methods such as `timeout()` and `connector_layer()`.\nTLS and cookies are provided through the browser environment, so reqwest can issue TLS requests with cookies, but has limited configuration.\n### \u00a7\u27e831\u27e9Optional Features\nThe following are a list of Cargo features\u27e832\u27e9 that can be enabled or disabled:\n  * **http2** _(enabled by default)_ : Enables HTTP/2 support.\n  * **default-tls** _(enabled by default)_ : Provides TLS support to connect over HTTPS.\n  * **native-tls** : Enables TLS functionality provided by `native-tls`.\n  * **native-tls-vendored** : Enables the `vendored` feature of `native-tls`.\n  * **native-tls-alpn** : Enables the `alpn` feature of `native-tls`.\n  * **rustls-tls** : Enables TLS functionality provided by `rustls`. Equivalent to `rustls-tls-webpki-roots`.\n  * **rustls-tls-manual-roots** : Enables TLS functionality provided by `rustls`, without setting any root certificates. Roots have to be specified manually.\n  * **rustls-tls-webpki-roots** : Enables TLS functionality provided by `rustls`, while using root certificates from the `webpki-roots` crate.\n  * **rustls-tls-native-roots** : Enables TLS functionality provided by `rustls`, while using root certificates from the `rustls-native-certs` crate.\n  * **blocking** : Provides the blocking\u27e86\u27e9 client API.\n  * **charset** _(enabled by default)_ : Improved support for decoding text.\n  * **cookies** : Provides cookie session support.\n  * **gzip** : Provides response body gzip decompression.\n  * **brotli** : Provides response body brotli decompression.\n  * **zstd** : Provides response body zstd decompression.\n  * **deflate** : Provides response body deflate decompression.\n  * **json** : Provides serialization and deserialization for JSON bodies.\n  * **multipart** : Provides functionality for multipart forms.\n  * **stream** : Adds support for `futures::Stream`.\n  * **socks** : Provides SOCKS5 proxy support.\n  * **hickory-dns** : Enables a hickory-dns async resolver instead of default threadpool using `getaddrinfo`.\n  * **system-proxy** _(enabled by default)_ : Use Windows and macOS system proxy settings automatically.\n\n\n### \u00a7\u27e833\u27e9Unstable Features\nSome feature flags require additional opt-in by the application, by setting a `reqwest_unstable` flag.\n  * **http3** _(unstable)_ : Enables support for sending HTTP/3 requests.\n\n\nThese features are unstable, and experimental. Details about them may be changed in patch releases.\nYou can pass such a flag to the compiler via `.cargo/config`, or environment variables, such as:\n```\nRUSTFLAGS=\"--cfg reqwest_unstable\" cargo build\n```\n\n### \u00a7\u27e834\u27e9Sponsors\nSupport this project by becoming a sponsor\u27e816\u27e9.\n## Re-exports\u00a7\u27e835\u27e9\n\n`pub use tls::Certificate[](https://docs.rs/reqwest/latest/reqwest/tls/struct.Certificate.html \"struct reqwest::tls::Certificate\");`\n\n\n`pub use tls::Identity[](https://docs.rs/reqwest/latest/reqwest/tls/struct.Identity.html \"struct reqwest::tls::Identity\");`\n\n## Modules\u00a7\u27e836\u27e9\n\nblocking\u27e86\u27e9\n    A blocking Client API.\n\ncookie\u27e830\u27e9\n    HTTP Cookies\n\ndns\u27e837\u27e9\n    DNS resolution\n\nheader\u27e838\u27e9\n    HTTP header types\n\nmultipart\u27e89\u27e9\n    multipart/form-data\n\nredirect\u27e822\u27e9\n    Redirect Handling\n\ntls\u27e828\u27e9\n    TLS configuration and types\n## Structs\u00a7\u27e839\u27e9\n\nBody\u27e840\u27e9\n    An asynchronous request body.\n\nClient\u27e85\u27e9\n    An asynchronous `Client` to make Requests with.\n\nClientBuilder\u27e841\u27e9\n    A `ClientBuilder` can be used to create a `Client` with custom configuration.\n\nError\u27e842\u27e9\n    The Errors that may occur when processing a `Request`.\n\nMethod\u27e843\u27e9\n    The Request Method (VERB)\n\nNoProxy\u27e844\u27e9\n    A configuration for filtering out requests that shouldn\u2019t be proxied\n\nProxy\u27e825\u27e9\n    Configuration of a proxy that a `Client` should pass requests to.\n\nRequest\u27e845\u27e9\n    A request which can be executed with `Client::execute()`.\n\nRequestBuilder\u27e820\u27e9\n    A builder to construct the properties of a `Request`.\n\nResponse\u27e846\u27e9\n    A Response to a submitted `Request`.\n\nStatusCode\u27e847\u27e9\n    An HTTP status code (`status-code` in RFC 9110 et al.).\n\nUpgraded\u27e848\u27e9\n    An upgraded HTTP connection.\n\nUrl\u27e849\u27e9\n    A parsed URL record.\n\nVersion\u27e850\u27e9\n    Represents a version of the HTTP spec.\n## Traits\u00a7\u27e851\u27e9\n\nIntoUrl\u27e852\u27e9\n    A trait to try to convert some type into a `Url`.\n\nResponseBuilderExt\u27e853\u27e9\n    Extension trait for http::response::Builder objects\n## Functions\u00a7\u27e854\u27e9\n\nget\u27e818\u27e9\n    Shortcut method to quickly make a `GET` request.\n## Type Aliases\u00a7\u27e855\u27e9\n\nResult\u27e856\u27e9\n    A `Result` alias where the `Err` case is `reqwest::Error`.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/reqwest/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/reqwest/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/reqwest/latest/src/reqwest/lib.rs.html#1-394: Source\n\u27e84\u27e9 https://docs.rs/reqwest/latest/reqwest/#reqwest: \u00a7\n\u27e85\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.Client.html: `Client`\n\u27e86\u27e9 https://docs.rs/reqwest/latest/reqwest/blocking/index.html: blocking\n\u27e87\u27e9 https://docs.rs/reqwest/latest/reqwest/#json: JSON\n\u27e88\u27e9 https://docs.rs/reqwest/latest/reqwest/#forms: urlencoded\n\u27e89\u27e9 https://docs.rs/reqwest/latest/reqwest/multipart/index.html: mod reqwest::multipart - multipart\n\u27e810\u27e9 https://docs.rs/reqwest/latest/reqwest/#redirect-policies: redirect policy\n\u27e811\u27e9 https://docs.rs/reqwest/latest/reqwest/#proxies: Proxies\n\u27e812\u27e9 https://docs.rs/reqwest/latest/reqwest/#tls: TLS\n\u27e813\u27e9 https://rust-lang-nursery.github.io/rust-cookbook/web/clients.html: The Rust Cookbook\n\u27e814\u27e9 https://github.com/seanmonstar/reqwest/tree/master/examples: Reqwest Repository Examples\n\u27e815\u27e9 https://docs.rs/reqwest/latest/reqwest/#commercial-support: \u00a7\n\u27e816\u27e9 https://seanmonstar.com/sponsor: commercial support\n\u27e817\u27e9 https://docs.rs/reqwest/latest/reqwest/#making-a-get-request: \u00a7\n\u27e818\u27e9 https://docs.rs/reqwest/latest/reqwest/fn.get.html: `get`\n\u27e819\u27e9 https://docs.rs/reqwest/latest/reqwest/#making-post-requests-or-setting-request-bodies: \u00a7\n\u27e820\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.RequestBuilder.html: `RequestBuilder`\n\u27e821\u27e9 http://serde.rs: `Serialize`\n\u27e822\u27e9 https://docs.rs/reqwest/latest/reqwest/redirect/index.html: mod reqwest::redirect - `redirect::Policy`\n\u27e823\u27e9 https://docs.rs/reqwest/latest/reqwest/#cookies: \u00a7\n\u27e824\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.cookie_store: method reqwest::ClientBuilder::cookie_store - `cookie_store`\n\u27e825\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.Proxy.html: struct reqwest::Proxy - `Proxy`\n\u27e826\u27e9 https://docs.rs/reqwest/latest/reqwest/tls/struct.Certificate.html: struct reqwest::tls::Certificate - `Certificate`\n\u27e827\u27e9 https://docs.rs/reqwest/latest/reqwest/tls/struct.Identity.html: struct reqwest::tls::Identity - `Identity`\n\u27e828\u27e9 https://docs.rs/reqwest/latest/reqwest/tls/index.html: mod reqwest::tls - `tls`\n\u27e829\u27e9 https://docs.rs/reqwest/latest/reqwest/#wasm: \u00a7\n\u27e830\u27e9 https://docs.rs/reqwest/latest/reqwest/cookie/index.html: mod reqwest::cookie - `cookie`\n\u27e831\u27e9 https://docs.rs/reqwest/latest/reqwest/#optional-features: \u00a7\n\u27e832\u27e9 https://doc.rust-lang.org/stable/cargo/reference/manifest.html#the-features-section: Cargo features\n\u27e833\u27e9 https://docs.rs/reqwest/latest/reqwest/#unstable-features: \u00a7\n\u27e834\u27e9 https://docs.rs/reqwest/latest/reqwest/#sponsors: \u00a7\n\u27e835\u27e9 https://docs.rs/reqwest/latest/reqwest/#reexports: \u00a7\n\u27e836\u27e9 https://docs.rs/reqwest/latest/reqwest/#modules: \u00a7\n\u27e837\u27e9 https://docs.rs/reqwest/latest/reqwest/dns/index.html: mod reqwest::dns - dns\n\u27e838\u27e9 https://docs.rs/reqwest/latest/reqwest/header/index.html: mod reqwest::header - header\n\u27e839\u27e9 https://docs.rs/reqwest/latest/reqwest/#structs: \u00a7\n\u27e840\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.Body.html: struct reqwest::Body - Body\n\u27e841\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html: struct reqwest::ClientBuilder - ClientBuilder\n\u27e842\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.Error.html: struct reqwest::Error - Error\n\u27e843\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.Method.html: struct reqwest::Method - Method\n\u27e844\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.NoProxy.html: struct reqwest::NoProxy - NoProxy\n\u27e845\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.Request.html: struct reqwest::Request - Request\n\u27e846\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.Response.html: struct reqwest::Response - Response\n\u27e847\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.StatusCode.html: struct reqwest::StatusCode - StatusCode\n\u27e848\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.Upgraded.html: struct reqwest::Upgraded - Upgraded\n\u27e849\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.Url.html: struct reqwest::Url - Url\n\u27e850\u27e9 https://docs.rs/reqwest/latest/reqwest/struct.Version.html: struct reqwest::Version - Version\n\u27e851\u27e9 https://docs.rs/reqwest/latest/reqwest/#traits: \u00a7\n\u27e852\u27e9 https://docs.rs/reqwest/latest/reqwest/trait.IntoUrl.html: trait reqwest::IntoUrl - IntoUrl\n\u27e853\u27e9 https://docs.rs/reqwest/latest/reqwest/trait.ResponseBuilderExt.html: trait reqwest::ResponseBuilderExt - ResponseBuilderExt\n\u27e854\u27e9 https://docs.rs/reqwest/latest/reqwest/#functions: \u00a7\n\u27e855\u27e9 https://docs.rs/reqwest/latest/reqwest/#types: \u00a7\n\u27e856\u27e9 https://docs.rs/reqwest/latest/reqwest/type.Result.html: type reqwest::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `reqwest` crate is a high-level HTTP client for Rust, offering both asynchronous and blocking APIs. It supports common features like JSON, form, and multipart request bodies, customizable redirect policies, proxy configuration, cookie handling, and TLS by default. Optional features include HTTP/2, compression (gzip, brotli, zstd, deflate), SOCKS5 proxy, and WASM compatibility, with experimental support for HTTP/3.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Async and Blocking Clients  \n\u2705 Factual: The `reqwest` crate supports both asynchronous and blocking HTTP clients, allowing developers to choose the API that best fits their application's concurrency model.  \n\u274c Counterfactual: The `reqwest` crate only supports asynchronous HTTP clients and does not provide a blocking API for single-threaded applications.  \n\n---\n\n### Pair 2: JSON Serialization  \n\u2705 Factual: The `reqwest` crate provides a `json` method on the `RequestBuilder` that allows sending JSON-encoded bodies, provided the `json` feature is enabled.  \n\u274c Counterfactual: The `reqwest` crate automatically serializes all request bodies into JSON format, even if the `json` feature is not enabled.  \n\n---\n\n### Pair 3: Proxy Configuration  \n\u2705 Factual: The `reqwest` crate allows configuring HTTP and HTTPS proxies via environment variables or by explicitly setting a `Proxy` object in the `ClientBuilder`.  \n\u274c Counterfactual: The `reqwest` crate does not support proxy configuration and requires developers to handle proxying manually at the network layer.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}