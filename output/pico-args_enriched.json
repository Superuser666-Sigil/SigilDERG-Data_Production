{
    "name": "pico-args",
    "version": "0.5.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/pico-args/latest/pico_args/all.html \"show sidebar\")\n# Crate pico_argsCopy item path\n[Settings](https://docs.rs/pico-args/latest/settings.html)\n[Help](https://docs.rs/pico-args/latest/help.html)\nSummary[Source](https://docs.rs/pico-args/latest/src/pico_args/lib.rs.html#1-808)\nExpand description\nAn ultra simple CLI arguments parser.\nIf you think that this library doesn\u2019t support some feature, it\u2019s probably intentional.\n  * No help generation\n  * Only flags, options, free arguments and subcommands are supported\n  * No combined flags (like `-vvv` or `-abc`)\n  * Options can be separated by a space, `=` or nothing. See build features\n  * Arguments can be in any order\n  * Non UTF-8 arguments are supported\n\n\n### [\u00a7](https://docs.rs/pico-args/latest/pico_args/#build-features)Build features\n  * `eq-separator`\nAllows parsing arguments separated by `=` This feature adds about 1KiB to the resulting binary\n  * `short-space-opt`\nMakes the space between short keys and their values optional (e.g. `-w10`) If `eq-separator` is enabled, then it takes precedence and the \u2018=\u2019 is not included. If `eq-separator` is disabled, then `-K=value` gives an error instead of returning `\"=value\"`. The optional space is only applicable for short keys because `--keyvalue` would be ambiguous\n  * `combined-flags` Allows combination of flags, e.g. `-abc` instead of `-a -b -c`. If `short-space-opt` or `eq-separator` are enabled, you must parse flags after values, to prevent ambiguities.\n\n\n## Structs[\u00a7](https://docs.rs/pico-args/latest/pico_args/#structs)\n\n[Arguments](https://docs.rs/pico-args/latest/pico_args/struct.Arguments.html \"struct pico_args::Arguments\")\n    An arguments parser.\n## Enums[\u00a7](https://docs.rs/pico-args/latest/pico_args/#enums)\n\n[Error](https://docs.rs/pico-args/latest/pico_args/enum.Error.html \"enum pico_args::Error\")\n    A list of possible errors.\n",
        "markdown_with_citations": "[](https://docs.rs/pico-args/latest/pico_args/all.html \"show sidebar\")\n# Crate pico_argsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn ultra simple CLI arguments parser.\nIf you think that this library doesn\u2019t support some feature, it\u2019s probably intentional.\n  * No help generation\n  * Only flags, options, free arguments and subcommands are supported\n  * No combined flags (like `-vvv` or `-abc`)\n  * Options can be separated by a space, `=` or nothing. See build features\n  * Arguments can be in any order\n  * Non UTF-8 arguments are supported\n\n\n### \u00a7\u27e84\u27e9Build features\n  * `eq-separator`\nAllows parsing arguments separated by `=` This feature adds about 1KiB to the resulting binary\n  * `short-space-opt`\nMakes the space between short keys and their values optional (e.g. `-w10`) If `eq-separator` is enabled, then it takes precedence and the \u2018=\u2019 is not included. If `eq-separator` is disabled, then `-K=value` gives an error instead of returning `\"=value\"`. The optional space is only applicable for short keys because `--keyvalue` would be ambiguous\n  * `combined-flags` Allows combination of flags, e.g. `-abc` instead of `-a -b -c`. If `short-space-opt` or `eq-separator` are enabled, you must parse flags after values, to prevent ambiguities.\n\n\n## Structs\u00a7\u27e85\u27e9\n\nArguments\u27e86\u27e9\n    An arguments parser.\n## Enums\u00a7\u27e87\u27e9\n\nError\u27e88\u27e9\n    A list of possible errors.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pico-args/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pico-args/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pico-args/latest/src/pico_args/lib.rs.html#1-808: Source\n\u27e84\u27e9 https://docs.rs/pico-args/latest/pico_args/#build-features: \u00a7\n\u27e85\u27e9 https://docs.rs/pico-args/latest/pico_args/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/pico-args/latest/pico_args/struct.Arguments.html: struct pico_args::Arguments - Arguments\n\u27e87\u27e9 https://docs.rs/pico-args/latest/pico_args/#enums: \u00a7\n\u27e88\u27e9 https://docs.rs/pico-args/latest/pico_args/enum.Error.html: enum pico_args::Error - Error\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `pico-args` crate is a minimalist CLI argument parser for Rust, designed to handle flags, options, free arguments, and subcommands with simplicity and flexibility. It supports arguments in any order, non-UTF-8 inputs, and optional build features like `eq-separator` (for `=`-separated options), `short-space-opt` (compact short key-value pairs), and `combined-flags` (e.g., `-abc`). Notably, it avoids features like help generation and combined flags by default, keeping the binary lightweight.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Argument Parsing Capabilities\n\u2705 Factual: The `pico-args` crate supports parsing CLI arguments in any order, including flags, options, free arguments, and subcommands.  \n\u274c Counterfactual: The `pico-args` crate enforces a strict order for CLI arguments, requiring flags to appear before options and subcommands.\n\n---\n\n### Pair 2: Build Features\n\u2705 Factual: The `eq-separator` feature in `pico-args` allows parsing arguments separated by `=`, adding approximately 1KiB to the resulting binary size.  \n\u274c Counterfactual: The `eq-separator` feature is enabled by default and does not affect the binary size.\n\n---\n\n### Pair 3: Combined Flags\n\u2705 Factual: The `combined-flags` feature allows combining multiple flags, such as `-abc`, into a single argument, but requires careful parsing when other features like `short-space-opt` are enabled to avoid ambiguities.  \n\u274c Counterfactual: The `combined-flags` feature is always active and does not conflict with other build features like `short-space-opt` or `eq-separator`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}