{
    "name": "poem",
    "version": "3.1.11",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/poem/latest/poem/all.html \"show sidebar\")\n# Crate poemCopy item path\n[Settings](https://docs.rs/poem/latest/settings.html)\n[Help](https://docs.rs/poem/latest/help.html)\nSummary[Source](https://docs.rs/poem/latest/src/poem/lib.rs.html#1-311)\nExpand description\nPoem is a full-featured and easy-to-use web framework with the Rust programming language.\n## [\u00a7](https://docs.rs/poem/latest/poem/#table-of-contents)Table of contents\n  * [Quickstart](https://docs.rs/poem/latest/poem/#quickstart)\n  * [Endpoint](https://docs.rs/poem/latest/poem/#endpoint)\n  * [Extractors](https://docs.rs/poem/latest/poem/#extractors)\n  * [Routing](https://docs.rs/poem/latest/poem/#routing)\n  * [Responses](https://docs.rs/poem/latest/poem/#responses)\n  * [Handling errors](https://docs.rs/poem/latest/poem/#handling-errors)\n  * [Middleware](https://docs.rs/poem/latest/poem/#middleware)\n  * [Crate features](https://docs.rs/poem/latest/poem/#crate-features)\n\n\n## [\u00a7](https://docs.rs/poem/latest/poem/#quickstart)Quickstart\n```\nuse poem::{IntoResponse, Route, Server, get, handler, listener::TcpListener, web::Path};\n#[handler]\nfn hello(Path(name): Path<String>) -> String {\n  format!(\"hello: {}\", name)\n}\n#[tokio::main]\nasync fn main() -> Result<(), std::io::Error> {\n  let app = Route::new().at(\"/hello/:name\", get(hello));\n  Server::new(TcpListener::bind(\"0.0.0.0:3000\"))\n    .run(app)\n    .await\n}\n```\n\n## [\u00a7](https://docs.rs/poem/latest/poem/#endpoint)Endpoint\nThe [`Endpoint`](https://docs.rs/poem/latest/poem/endpoint/trait.Endpoint.html \"trait poem::endpoint::Endpoint\") trait represents a type that can handle HTTP requests, and it returns the `Result<T: IntoResponse, Error>` type.\nThe [`handler`](https://docs.rs/poem/latest/poem/attr.handler.html \"attr poem::handler\") macro is used to convert a function into an endpoint.\n```\nuse poem::{\n  Endpoint, Request, Result, error::NotFoundError, handler, http::StatusCode,\n  test::TestClient,\n};\n#[handler]\nfn return_str() -> &'static str {\n  \"hello\"\n}\n#[handler]\nfn return_err() -> Result<&'static str, NotFoundError> {\n  Err(NotFoundError)\n}\nlet resp = TestClient::new(return_str).get(\"/\").send().await;\nresp.assert_status_is_ok();\nresp.assert_text(\"hello\").await;\nlet resp = TestClient::new(return_err).get(\"/\").send().await;\nresp.assert_status(StatusCode::NOT_FOUND);\n```\n\n## [\u00a7](https://docs.rs/poem/latest/poem/#extractors)Extractors\nThe extractor is used to extract something from the HTTP request.\n`Poem` provides some [commonly used extractors](https://docs.rs/poem/latest/poem/web/trait.FromRequest.html \"trait poem::web::FromRequest\") for extracting something from HTTP requests.\nIn the following example, the `index` function uses 3 extractors to extract the remote address, HTTP method and URI.\n```\nuse poem::{\n  handler,\n  http::{Method, Uri},\n  web::RemoteAddr,\n};\n#[handler]\nfn index(remote_addr: &RemoteAddr, method: Method, uri: &Uri) {}\n```\n\nBy default, the extractor will return a `400 Bad Request` when an error occurs, but sometimes you may want to change this behavior, so you can handle the error yourself.\nIn the following example, when the [`Query`](https://docs.rs/poem/latest/poem/web/struct.Query.html \"struct poem::web::Query\") extractor fails, it will return a `500 Internal Server` response and the reason for the error.\n```\nuse poem::{\n  IntoResponse, Response, Result, error::ParseQueryError, handler, http::StatusCode,\n  web::Query,\n};\nuse serde::Deserialize;\n#[derive(Debug, Deserialize)]\nstruct Params {\n  name: String,\n}\n#[handler]\nfn index(res: Result<Query<Params>>) -> Result<impl IntoResponse> {\n  match res {\n    Ok(Query(params)) => Ok(params.name.into_response()),\n    Err(err) if err.is::<ParseQueryError>() => Ok(Response::builder()\n      .status(StatusCode::INTERNAL_SERVER_ERROR)\n      .body(err.to_string())),\n    Err(err) => Err(err),\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/poem/latest/poem/#routing)Routing\nThere are three available routes.\n  * [`Route`](https://docs.rs/poem/latest/poem/struct.Route.html \"struct poem::Route\") Routing for path\n  * [`RouteDomain`](https://docs.rs/poem/latest/poem/struct.RouteDomain.html \"struct poem::RouteDomain\") Routing for domain\n  * [`RouteMethod`](https://docs.rs/poem/latest/poem/struct.RouteMethod.html \"struct poem::RouteMethod\") Routing for HTTP method\n\n\n```\nuse poem::{Route, get, handler, post, web::Path};\n#[handler]\nasync fn get_user(id: Path<String>) {}\n#[handler]\nasync fn delete_user(id: Path<String>) {}\n#[handler]\nasync fn create_user() {}\nlet app = Route::new()\n  .at(\"/user/:id\", get(get_user).delete(delete_user))\n  .at(\"/user\", post(create_user));\n```\n\nYou can create custom extractors, see also [`FromRequest`](https://docs.rs/poem/latest/poem/web/trait.FromRequest.html \"trait poem::web::FromRequest\").\n## [\u00a7](https://docs.rs/poem/latest/poem/#responses)Responses\nAll types that can be converted to HTTP response [`Response`](https://docs.rs/poem/latest/poem/struct.Response.html \"struct poem::Response\") should implement [`IntoResponse`](https://docs.rs/poem/latest/poem/web/trait.IntoResponse.html \"trait poem::web::IntoResponse\").\nIn the following example, the `string_response` and `status_response` functions return the `String` and `StatusCode` types, because `Poem` has implemented the [`IntoResponse`](https://docs.rs/poem/latest/poem/web/trait.IntoResponse.html \"trait poem::web::IntoResponse\") trait for them.\nThe `no_response` function does not return a value. We can think that its return type is `()`, and `Poem` also implements [`IntoResponse`](https://docs.rs/poem/latest/poem/web/trait.IntoResponse.html \"trait poem::web::IntoResponse\") for `()`, which is always converted to `200 OK`.\nThe `result_response` function returns a `Result` type, which means that an error may occur.\n```\nuse poem::{Result, handler, http::StatusCode};\n#[handler]\nfn string_response() -> String {\n  todo!()\n}\n#[handler]\nfn status_response() -> StatusCode {\n  todo!()\n}\n#[handler]\nfn no_response() {}\n#[handler]\nfn result_response() -> Result<String> {\n  todo!()\n}\n```\n\n## [\u00a7](https://docs.rs/poem/latest/poem/#handling-errors)Handling errors\nThe following example returns customized content when [`NotFoundError`](https://docs.rs/poem/latest/poem/error/struct.NotFoundError.html \"struct poem::error::NotFoundError\") occurs.\n```\nuse poem::{\n  EndpointExt, IntoResponse, Response, Route, error::NotFoundError, handler, http::StatusCode,\n};\n#[handler]\nfn foo() {}\n#[handler]\nfn bar() {}\nlet app =\n  Route::new()\n    .at(\"/foo\", foo)\n    .at(\"/bar\", bar)\n    .catch_error(|err: NotFoundError| async move {\n      Response::builder()\n        .status(StatusCode::NOT_FOUND)\n        .body(\"custom not found\")\n    });\n```\n\n## [\u00a7](https://docs.rs/poem/latest/poem/#middleware)Middleware\nYou can call the [`with`](https://docs.rs/poem/latest/poem/endpoint/trait.EndpointExt.html#method.with \"method poem::endpoint::EndpointExt::with\") method on the [`Endpoint`](https://docs.rs/poem/latest/poem/endpoint/trait.Endpoint.html \"trait poem::endpoint::Endpoint\") to apply a middleware to an endpoint. It actually converts the original endpoint to a new endpoint.\n```\nuse poem::{EndpointExt, Route, handler, middleware::Tracing};\n#[handler]\nfn index() {}\nlet app = Route::new().at(\"/\", index).with(Tracing);\n```\n\nYou can create your own middleware, see also [`Middleware`](https://docs.rs/poem/latest/poem/middleware/trait.Middleware.html \"trait poem::middleware::Middleware\").\n## [\u00a7](https://docs.rs/poem/latest/poem/#crate-features)Crate features\nTo avoid compiling unused dependencies, `Poem` gates certain features, all of which are disabled by default:\nFeature| Description  \n---|---  \nserver| Server and listener APIs(enable by default)  \ncompression| Support decompress request body and compress response body  \ncookie| Support for Cookie  \ncsrf| Support for Cross-Site Request Forgery (CSRF) protection  \nmultipart| Support for Multipart  \nnative-tls| Support for HTTP server over TLS with [`native-tls`](https://crates.io/crates/native-tls)  \nopenssl-tls| Support for HTTP server over TLS with [`openssl-tls`](https://crates.io/crates/openssl)  \nopentelemetry| Support for opentelemetry  \nprometheus| Support for Prometheus  \nredis-session| Support for RedisSession  \nrustls| Support for HTTP server over TLS with [`rustls`](https://crates.io/crates/rustls)  \nsession| Support for session  \nsse| Support Server-Sent Events (SSE)  \ntempfile| Support for [`tempfile`](https://crates.io/crates/tempfile)  \ntest| Test utilities to test your endpoints.  \ntower-compat| Adapters for `tower::Layer` and `tower::Service`.  \nwebsocket| Support for WebSocket  \nanyhow| Integrate with the [`anyhow`](https://crates.io/crates/anyhow) crate.  \neyre06| Integrate with version 0.6.x of the [`eyre`](https://crates.io/crates/eyre) crate.  \ni18n| Support for internationalization  \nacme-native-roots| Support for ACME(Automatic Certificate Management Environment)  \nacme-webpki-roots| Support for ACME using webpki TLS roots rather than native TLS roots  \ntokio-metrics| Integrate with the [`tokio-metrics`](https://crates.io/crates/tokio-metrics) crate.  \nembed| Integrate with [`rust-embed`](https://crates.io/crates/rust-embed) crate.  \nxml| Integrate with [`quick-xml`](https://crates.io/crates/quick-xml) crate.  \nyaml| Integrate with [`serde-yaml`](https://crates.io/crates/serde-yaml) crate.  \nsonic-rs| Uses [`sonic-rs`](https://github.com/cloudwego/sonic-rs) instead of `serde_json`. Pls, checkout `sonic-rs` requirements to properly enable `sonic-rs` capabilities  \n## Re-exports[\u00a7](https://docs.rs/poem/latest/poem/#reexports)\n\n`pub use endpoint::Endpoint[](https://docs.rs/poem/latest/poem/endpoint/trait.Endpoint.html \"trait poem::endpoint::Endpoint\");`\n\n\n`pub use endpoint::EndpointExt[](https://docs.rs/poem/latest/poem/endpoint/trait.EndpointExt.html \"trait poem::endpoint::EndpointExt\");`\n\n\n`pub use endpoint::IntoEndpoint[](https://docs.rs/poem/latest/poem/endpoint/trait.IntoEndpoint.html \"trait poem::endpoint::IntoEndpoint\");`\n\n\n`pub use error::Error[](https://docs.rs/poem/latest/poem/error/struct.Error.html \"struct poem::error::Error\");`\n\n\n`pub use error::Result[](https://docs.rs/poem/latest/poem/error/type.Result.html \"type poem::error::Result\");`\n\n\n`pub use middleware::Middleware[](https://docs.rs/poem/latest/poem/middleware/trait.Middleware.html \"trait poem::middleware::Middleware\");`\n\n\n`pub use web::FromRequest[](https://docs.rs/poem/latest/poem/web/trait.FromRequest.html \"trait poem::web::FromRequest\");`\n\n\n`pub use web::IntoResponse[](https://docs.rs/poem/latest/poem/web/trait.IntoResponse.html \"trait poem::web::IntoResponse\");`\n\n\n`pub use web::RequestBody[](https://docs.rs/poem/latest/poem/web/struct.RequestBody.html \"struct poem::web::RequestBody\");`\n\n## Modules[\u00a7](https://docs.rs/poem/latest/poem/#modules)\n\n[endpoint](https://docs.rs/poem/latest/poem/endpoint/index.html \"mod poem::endpoint\")\n    Endpoint related types.\n\n[error](https://docs.rs/poem/latest/poem/error/index.html \"mod poem::error\")\n    Some common error types.\n\n[http](https://docs.rs/poem/latest/poem/http/index.html \"mod poem::http\")\n    A general purpose library of common HTTP types\n\n[i18n](https://docs.rs/poem/latest/poem/i18n/index.html \"mod poem::i18n\")`i18n`\n    Internationalization related types.\n\n[listener](https://docs.rs/poem/latest/poem/listener/index.html \"mod poem::listener\")`server`\n    Commonly used listeners.\n\n[middleware](https://docs.rs/poem/latest/poem/middleware/index.html \"mod poem::middleware\")\n    Commonly used middleware.\n\n[session](https://docs.rs/poem/latest/poem/session/index.html \"mod poem::session\")`session`\n    Session management.\n\n[test](https://docs.rs/poem/latest/poem/test/index.html \"mod poem::test\")`test`\n    Test utilities to test your endpoints.\n\n[web](https://docs.rs/poem/latest/poem/web/index.html \"mod poem::web\")\n    Commonly used as the type of extractor or response.\n## Structs[\u00a7](https://docs.rs/poem/latest/poem/#structs)\n\n[Body](https://docs.rs/poem/latest/poem/struct.Body.html \"struct poem::Body\")\n    A body object for requests and responses.\n\n[OnUpgrade](https://docs.rs/poem/latest/poem/struct.OnUpgrade.html \"struct poem::OnUpgrade\")\n    A future for a possible HTTP upgrade.\n\n[PathPattern](https://docs.rs/poem/latest/poem/struct.PathPattern.html \"struct poem::PathPattern\")\n    Container that can be used to obtain path pattern from the request.\n\n[Request](https://docs.rs/poem/latest/poem/struct.Request.html \"struct poem::Request\")\n    Represents an HTTP request.\n\n[RequestBuilder](https://docs.rs/poem/latest/poem/struct.RequestBuilder.html \"struct poem::RequestBuilder\")\n    An request builder.\n\n[RequestParts](https://docs.rs/poem/latest/poem/struct.RequestParts.html \"struct poem::RequestParts\")\n    Component parts of an HTTP Request.\n\n[Response](https://docs.rs/poem/latest/poem/struct.Response.html \"struct poem::Response\")\n    Represents an HTTP response.\n\n[ResponseBuilder](https://docs.rs/poem/latest/poem/struct.ResponseBuilder.html \"struct poem::ResponseBuilder\")\n    An response builder.\n\n[ResponseParts](https://docs.rs/poem/latest/poem/struct.ResponseParts.html \"struct poem::ResponseParts\")\n    Component parts of an HTTP Response.\n\n[Route](https://docs.rs/poem/latest/poem/struct.Route.html \"struct poem::Route\")\n    Routing object\n\n[RouteDomain](https://docs.rs/poem/latest/poem/struct.RouteDomain.html \"struct poem::RouteDomain\")\n    Routing object for `HOST` header\n\n[RouteMethod](https://docs.rs/poem/latest/poem/struct.RouteMethod.html \"struct poem::RouteMethod\")\n    Routing object for HTTP methods\n\n[RouteScheme](https://docs.rs/poem/latest/poem/struct.RouteScheme.html \"struct poem::RouteScheme\")\n    Routing object for request scheme\n\n[Server](https://docs.rs/poem/latest/poem/struct.Server.html \"struct poem::Server\")\n    An HTTP Server.\n\n[Upgraded](https://docs.rs/poem/latest/poem/struct.Upgraded.html \"struct poem::Upgraded\")\n    An upgraded HTTP connection.\n## Enums[\u00a7](https://docs.rs/poem/latest/poem/#enums)\n\n[Addr](https://docs.rs/poem/latest/poem/enum.Addr.html \"enum poem::Addr\")\n    An network address.\n## Functions[\u00a7](https://docs.rs/poem/latest/poem/#functions)\n\n[connect](https://docs.rs/poem/latest/poem/fn.connect.html \"fn poem::connect\")\n    A helper function, similar to `RouteMethod::new().connect(ep)`.\n\n[delete](https://docs.rs/poem/latest/poem/fn.delete.html \"fn poem::delete\")\n    A helper function, similar to `RouteMethod::new().delete(ep)`.\n\n[get](https://docs.rs/poem/latest/poem/fn.get.html \"fn poem::get\")\n    A helper function, similar to `RouteMethod::new().get(ep)`.\n\n[head](https://docs.rs/poem/latest/poem/fn.head.html \"fn poem::head\")\n    A helper function, similar to `RouteMethod::new().head(ep)`.\n\n[options](https://docs.rs/poem/latest/poem/fn.options.html \"fn poem::options\")\n    A helper function, similar to `RouteMethod::new().options(ep)`.\n\n[patch](https://docs.rs/poem/latest/poem/fn.patch.html \"fn poem::patch\")\n    A helper function, similar to `RouteMethod::new().patch(ep)`.\n\n[post](https://docs.rs/poem/latest/poem/fn.post.html \"fn poem::post\")\n    A helper function, similar to `RouteMethod::new().post(ep)`.\n\n[put](https://docs.rs/poem/latest/poem/fn.put.html \"fn poem::put\")\n    A helper function, similar to `RouteMethod::new().put(ep)`.\n\n[trace](https://docs.rs/poem/latest/poem/fn.trace.html \"fn poem::trace\")\n    A helper function, similar to `RouteMethod::new().trace(ep)`.\n## Attribute Macros[\u00a7](https://docs.rs/poem/latest/poem/#attributes)\n\n[handler](https://docs.rs/poem/latest/poem/attr.handler.html \"attr poem::handler\")\n    Wrap an asynchronous function as an `Endpoint`.\n",
        "markdown_with_citations": "[](https://docs.rs/poem/latest/poem/all.html \"show sidebar\")\n# Crate poemCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nPoem is a full-featured and easy-to-use web framework with the Rust programming language.\n## \u00a7\u27e84\u27e9Table of contents\n  * Quickstart\u27e85\u27e9\n  * Endpoint\u27e86\u27e9\n  * Extractors\u27e87\u27e9\n  * Routing\u27e88\u27e9\n  * Responses\u27e89\u27e9\n  * Handling errors\u27e810\u27e9\n  * Middleware\u27e811\u27e9\n  * Crate features\u27e812\u27e9\n\n\n## \u00a7\u27e85\u27e9Quickstart\n```\nuse poem::{IntoResponse, Route, Server, get, handler, listener::TcpListener, web::Path};\n#[handler]\nfn hello(Path(name): Path<String>) -> String {\n  format!(\"hello: {}\", name)\n}\n#[tokio::main]\nasync fn main() -> Result<(), std::io::Error> {\n  let app = Route::new().at(\"/hello/:name\", get(hello));\n  Server::new(TcpListener::bind(\"0.0.0.0:3000\"))\n    .run(app)\n    .await\n}\n```\n\n## \u00a7\u27e86\u27e9Endpoint\nThe `Endpoint`\u27e813\u27e9 trait represents a type that can handle HTTP requests, and it returns the `Result<T: IntoResponse, Error>` type.\nThe `handler`\u27e814\u27e9 macro is used to convert a function into an endpoint.\n```\nuse poem::{\n  Endpoint, Request, Result, error::NotFoundError, handler, http::StatusCode,\n  test::TestClient,\n};\n#[handler]\nfn return_str() -> &'static str {\n  \"hello\"\n}\n#[handler]\nfn return_err() -> Result<&'static str, NotFoundError> {\n  Err(NotFoundError)\n}\nlet resp = TestClient::new(return_str).get(\"/\").send().await;\nresp.assert_status_is_ok();\nresp.assert_text(\"hello\").await;\nlet resp = TestClient::new(return_err).get(\"/\").send().await;\nresp.assert_status(StatusCode::NOT_FOUND);\n```\n\n## \u00a7\u27e87\u27e9Extractors\nThe extractor is used to extract something from the HTTP request.\n`Poem` provides some commonly used extractors\u27e815\u27e9 for extracting something from HTTP requests.\nIn the following example, the `index` function uses 3 extractors to extract the remote address, HTTP method and URI.\n```\nuse poem::{\n  handler,\n  http::{Method, Uri},\n  web::RemoteAddr,\n};\n#[handler]\nfn index(remote_addr: &RemoteAddr, method: Method, uri: &Uri) {}\n```\n\nBy default, the extractor will return a `400 Bad Request` when an error occurs, but sometimes you may want to change this behavior, so you can handle the error yourself.\nIn the following example, when the `Query`\u27e816\u27e9 extractor fails, it will return a `500 Internal Server` response and the reason for the error.\n```\nuse poem::{\n  IntoResponse, Response, Result, error::ParseQueryError, handler, http::StatusCode,\n  web::Query,\n};\nuse serde::Deserialize;\n#[derive(Debug, Deserialize)]\nstruct Params {\n  name: String,\n}\n#[handler]\nfn index(res: Result<Query<Params>>) -> Result<impl IntoResponse> {\n  match res {\n    Ok(Query(params)) => Ok(params.name.into_response()),\n    Err(err) if err.is::<ParseQueryError>() => Ok(Response::builder()\n      .status(StatusCode::INTERNAL_SERVER_ERROR)\n      .body(err.to_string())),\n    Err(err) => Err(err),\n  }\n}\n```\n\n## \u00a7\u27e88\u27e9Routing\nThere are three available routes.\n  * `Route`\u27e817\u27e9 Routing for path\n  * `RouteDomain`\u27e818\u27e9 Routing for domain\n  * `RouteMethod`\u27e819\u27e9 Routing for HTTP method\n\n\n```\nuse poem::{Route, get, handler, post, web::Path};\n#[handler]\nasync fn get_user(id: Path<String>) {}\n#[handler]\nasync fn delete_user(id: Path<String>) {}\n#[handler]\nasync fn create_user() {}\nlet app = Route::new()\n  .at(\"/user/:id\", get(get_user).delete(delete_user))\n  .at(\"/user\", post(create_user));\n```\n\nYou can create custom extractors, see also `FromRequest`\u27e815\u27e9.\n## \u00a7\u27e89\u27e9Responses\nAll types that can be converted to HTTP response `Response`\u27e820\u27e9 should implement `IntoResponse`\u27e821\u27e9.\nIn the following example, the `string_response` and `status_response` functions return the `String` and `StatusCode` types, because `Poem` has implemented the `IntoResponse`\u27e821\u27e9 trait for them.\nThe `no_response` function does not return a value. We can think that its return type is `()`, and `Poem` also implements `IntoResponse`\u27e821\u27e9 for `()`, which is always converted to `200 OK`.\nThe `result_response` function returns a `Result` type, which means that an error may occur.\n```\nuse poem::{Result, handler, http::StatusCode};\n#[handler]\nfn string_response() -> String {\n  todo!()\n}\n#[handler]\nfn status_response() -> StatusCode {\n  todo!()\n}\n#[handler]\nfn no_response() {}\n#[handler]\nfn result_response() -> Result<String> {\n  todo!()\n}\n```\n\n## \u00a7\u27e810\u27e9Handling errors\nThe following example returns customized content when `NotFoundError`\u27e822\u27e9 occurs.\n```\nuse poem::{\n  EndpointExt, IntoResponse, Response, Route, error::NotFoundError, handler, http::StatusCode,\n};\n#[handler]\nfn foo() {}\n#[handler]\nfn bar() {}\nlet app =\n  Route::new()\n    .at(\"/foo\", foo)\n    .at(\"/bar\", bar)\n    .catch_error(|err: NotFoundError| async move {\n      Response::builder()\n        .status(StatusCode::NOT_FOUND)\n        .body(\"custom not found\")\n    });\n```\n\n## \u00a7\u27e811\u27e9Middleware\nYou can call the `with`\u27e823\u27e9 method on the `Endpoint`\u27e813\u27e9 to apply a middleware to an endpoint. It actually converts the original endpoint to a new endpoint.\n```\nuse poem::{EndpointExt, Route, handler, middleware::Tracing};\n#[handler]\nfn index() {}\nlet app = Route::new().at(\"/\", index).with(Tracing);\n```\n\nYou can create your own middleware, see also `Middleware`\u27e824\u27e9.\n## \u00a7\u27e812\u27e9Crate features\nTo avoid compiling unused dependencies, `Poem` gates certain features, all of which are disabled by default:\nFeature| Description  \n---|---  \nserver| Server and listener APIs(enable by default)  \ncompression| Support decompress request body and compress response body  \ncookie| Support for Cookie  \ncsrf| Support for Cross-Site Request Forgery (CSRF) protection  \nmultipart| Support for Multipart  \nnative-tls| Support for HTTP server over TLS with `native-tls`\u27e825\u27e9  \nopenssl-tls| Support for HTTP server over TLS with `openssl-tls`\u27e826\u27e9  \nopentelemetry| Support for opentelemetry  \nprometheus| Support for Prometheus  \nredis-session| Support for RedisSession  \nrustls| Support for HTTP server over TLS with `rustls`\u27e827\u27e9  \nsession| Support for session  \nsse| Support Server-Sent Events (SSE)  \ntempfile| Support for `tempfile`\u27e828\u27e9  \ntest| Test utilities to test your endpoints.  \ntower-compat| Adapters for `tower::Layer` and `tower::Service`.  \nwebsocket| Support for WebSocket  \nanyhow| Integrate with the `anyhow`\u27e829\u27e9 crate.  \neyre06| Integrate with version 0.6.x of the `eyre`\u27e830\u27e9 crate.  \ni18n| Support for internationalization  \nacme-native-roots| Support for ACME(Automatic Certificate Management Environment)  \nacme-webpki-roots| Support for ACME using webpki TLS roots rather than native TLS roots  \ntokio-metrics| Integrate with the `tokio-metrics`\u27e831\u27e9 crate.  \nembed| Integrate with `rust-embed`\u27e832\u27e9 crate.  \nxml| Integrate with `quick-xml`\u27e833\u27e9 crate.  \nyaml| Integrate with `serde-yaml`\u27e834\u27e9 crate.  \nsonic-rs| Uses `sonic-rs`\u27e835\u27e9 instead of `serde_json`. Pls, checkout `sonic-rs` requirements to properly enable `sonic-rs` capabilities  \n## Re-exports\u00a7\u27e836\u27e9\n\n`pub use endpoint::Endpoint[](https://docs.rs/poem/latest/poem/endpoint/trait.Endpoint.html \"trait poem::endpoint::Endpoint\");`\n\n\n`pub use endpoint::EndpointExt[](https://docs.rs/poem/latest/poem/endpoint/trait.EndpointExt.html \"trait poem::endpoint::EndpointExt\");`\n\n\n`pub use endpoint::IntoEndpoint[](https://docs.rs/poem/latest/poem/endpoint/trait.IntoEndpoint.html \"trait poem::endpoint::IntoEndpoint\");`\n\n\n`pub use error::Error[](https://docs.rs/poem/latest/poem/error/struct.Error.html \"struct poem::error::Error\");`\n\n\n`pub use error::Result[](https://docs.rs/poem/latest/poem/error/type.Result.html \"type poem::error::Result\");`\n\n\n`pub use middleware::Middleware[](https://docs.rs/poem/latest/poem/middleware/trait.Middleware.html \"trait poem::middleware::Middleware\");`\n\n\n`pub use web::FromRequest[](https://docs.rs/poem/latest/poem/web/trait.FromRequest.html \"trait poem::web::FromRequest\");`\n\n\n`pub use web::IntoResponse[](https://docs.rs/poem/latest/poem/web/trait.IntoResponse.html \"trait poem::web::IntoResponse\");`\n\n\n`pub use web::RequestBody[](https://docs.rs/poem/latest/poem/web/struct.RequestBody.html \"struct poem::web::RequestBody\");`\n\n## Modules\u00a7\u27e837\u27e9\n\nendpoint\u27e838\u27e9\n    Endpoint related types.\n\nerror\u27e839\u27e9\n    Some common error types.\n\nhttp\u27e840\u27e9\n    A general purpose library of common HTTP types\n\ni18n\u27e841\u27e9`i18n`\n    Internationalization related types.\n\nlistener\u27e842\u27e9`server`\n    Commonly used listeners.\n\nmiddleware\u27e843\u27e9\n    Commonly used middleware.\n\nsession\u27e844\u27e9`session`\n    Session management.\n\ntest\u27e845\u27e9`test`\n    Test utilities to test your endpoints.\n\nweb\u27e846\u27e9\n    Commonly used as the type of extractor or response.\n## Structs\u00a7\u27e847\u27e9\n\nBody\u27e848\u27e9\n    A body object for requests and responses.\n\nOnUpgrade\u27e849\u27e9\n    A future for a possible HTTP upgrade.\n\nPathPattern\u27e850\u27e9\n    Container that can be used to obtain path pattern from the request.\n\nRequest\u27e851\u27e9\n    Represents an HTTP request.\n\nRequestBuilder\u27e852\u27e9\n    An request builder.\n\nRequestParts\u27e853\u27e9\n    Component parts of an HTTP Request.\n\nResponse\u27e820\u27e9\n    Represents an HTTP response.\n\nResponseBuilder\u27e854\u27e9\n    An response builder.\n\nResponseParts\u27e855\u27e9\n    Component parts of an HTTP Response.\n\nRoute\u27e817\u27e9\n    Routing object\n\nRouteDomain\u27e818\u27e9\n    Routing object for `HOST` header\n\nRouteMethod\u27e819\u27e9\n    Routing object for HTTP methods\n\nRouteScheme\u27e856\u27e9\n    Routing object for request scheme\n\nServer\u27e857\u27e9\n    An HTTP Server.\n\nUpgraded\u27e858\u27e9\n    An upgraded HTTP connection.\n## Enums\u00a7\u27e859\u27e9\n\nAddr\u27e860\u27e9\n    An network address.\n## Functions\u00a7\u27e861\u27e9\n\nconnect\u27e862\u27e9\n    A helper function, similar to `RouteMethod::new().connect(ep)`.\n\ndelete\u27e863\u27e9\n    A helper function, similar to `RouteMethod::new().delete(ep)`.\n\nget\u27e864\u27e9\n    A helper function, similar to `RouteMethod::new().get(ep)`.\n\nhead\u27e865\u27e9\n    A helper function, similar to `RouteMethod::new().head(ep)`.\n\noptions\u27e866\u27e9\n    A helper function, similar to `RouteMethod::new().options(ep)`.\n\npatch\u27e867\u27e9\n    A helper function, similar to `RouteMethod::new().patch(ep)`.\n\npost\u27e868\u27e9\n    A helper function, similar to `RouteMethod::new().post(ep)`.\n\nput\u27e869\u27e9\n    A helper function, similar to `RouteMethod::new().put(ep)`.\n\ntrace\u27e870\u27e9\n    A helper function, similar to `RouteMethod::new().trace(ep)`.\n## Attribute Macros\u00a7\u27e871\u27e9\n\nhandler\u27e814\u27e9\n    Wrap an asynchronous function as an `Endpoint`.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/poem/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/poem/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/poem/latest/src/poem/lib.rs.html#1-311: Source\n\u27e84\u27e9 https://docs.rs/poem/latest/poem/#table-of-contents: \u00a7\n\u27e85\u27e9 https://docs.rs/poem/latest/poem/#quickstart: Quickstart\n\u27e86\u27e9 https://docs.rs/poem/latest/poem/#endpoint: Endpoint\n\u27e87\u27e9 https://docs.rs/poem/latest/poem/#extractors: Extractors\n\u27e88\u27e9 https://docs.rs/poem/latest/poem/#routing: Routing\n\u27e89\u27e9 https://docs.rs/poem/latest/poem/#responses: Responses\n\u27e810\u27e9 https://docs.rs/poem/latest/poem/#handling-errors: Handling errors\n\u27e811\u27e9 https://docs.rs/poem/latest/poem/#middleware: Middleware\n\u27e812\u27e9 https://docs.rs/poem/latest/poem/#crate-features: Crate features\n\u27e813\u27e9 https://docs.rs/poem/latest/poem/endpoint/trait.Endpoint.html: trait poem::endpoint::Endpoint - `Endpoint`\n\u27e814\u27e9 https://docs.rs/poem/latest/poem/attr.handler.html: attr poem::handler - `handler`\n\u27e815\u27e9 https://docs.rs/poem/latest/poem/web/trait.FromRequest.html: trait poem::web::FromRequest - commonly used extractors\n\u27e816\u27e9 https://docs.rs/poem/latest/poem/web/struct.Query.html: struct poem::web::Query - `Query`\n\u27e817\u27e9 https://docs.rs/poem/latest/poem/struct.Route.html: struct poem::Route - `Route`\n\u27e818\u27e9 https://docs.rs/poem/latest/poem/struct.RouteDomain.html: struct poem::RouteDomain - `RouteDomain`\n\u27e819\u27e9 https://docs.rs/poem/latest/poem/struct.RouteMethod.html: struct poem::RouteMethod - `RouteMethod`\n\u27e820\u27e9 https://docs.rs/poem/latest/poem/struct.Response.html: struct poem::Response - `Response`\n\u27e821\u27e9 https://docs.rs/poem/latest/poem/web/trait.IntoResponse.html: trait poem::web::IntoResponse - `IntoResponse`\n\u27e822\u27e9 https://docs.rs/poem/latest/poem/error/struct.NotFoundError.html: struct poem::error::NotFoundError - `NotFoundError`\n\u27e823\u27e9 https://docs.rs/poem/latest/poem/endpoint/trait.EndpointExt.html#method.with: method poem::endpoint::EndpointExt::with - `with`\n\u27e824\u27e9 https://docs.rs/poem/latest/poem/middleware/trait.Middleware.html: trait poem::middleware::Middleware - `Middleware`\n\u27e825\u27e9 https://crates.io/crates/native-tls: `native-tls`\n\u27e826\u27e9 https://crates.io/crates/openssl: `openssl-tls`\n\u27e827\u27e9 https://crates.io/crates/rustls: `rustls`\n\u27e828\u27e9 https://crates.io/crates/tempfile: `tempfile`\n\u27e829\u27e9 https://crates.io/crates/anyhow: `anyhow`\n\u27e830\u27e9 https://crates.io/crates/eyre: `eyre`\n\u27e831\u27e9 https://crates.io/crates/tokio-metrics: `tokio-metrics`\n\u27e832\u27e9 https://crates.io/crates/rust-embed: `rust-embed`\n\u27e833\u27e9 https://crates.io/crates/quick-xml: `quick-xml`\n\u27e834\u27e9 https://crates.io/crates/serde-yaml: `serde-yaml`\n\u27e835\u27e9 https://github.com/cloudwego/sonic-rs: `sonic-rs`\n\u27e836\u27e9 https://docs.rs/poem/latest/poem/#reexports: \u00a7\n\u27e837\u27e9 https://docs.rs/poem/latest/poem/#modules: \u00a7\n\u27e838\u27e9 https://docs.rs/poem/latest/poem/endpoint/index.html: mod poem::endpoint - endpoint\n\u27e839\u27e9 https://docs.rs/poem/latest/poem/error/index.html: mod poem::error - error\n\u27e840\u27e9 https://docs.rs/poem/latest/poem/http/index.html: mod poem::http - http\n\u27e841\u27e9 https://docs.rs/poem/latest/poem/i18n/index.html: mod poem::i18n - i18n\n\u27e842\u27e9 https://docs.rs/poem/latest/poem/listener/index.html: mod poem::listener - listener\n\u27e843\u27e9 https://docs.rs/poem/latest/poem/middleware/index.html: mod poem::middleware - middleware\n\u27e844\u27e9 https://docs.rs/poem/latest/poem/session/index.html: mod poem::session - session\n\u27e845\u27e9 https://docs.rs/poem/latest/poem/test/index.html: mod poem::test - test\n\u27e846\u27e9 https://docs.rs/poem/latest/poem/web/index.html: mod poem::web - web\n\u27e847\u27e9 https://docs.rs/poem/latest/poem/#structs: \u00a7\n\u27e848\u27e9 https://docs.rs/poem/latest/poem/struct.Body.html: struct poem::Body - Body\n\u27e849\u27e9 https://docs.rs/poem/latest/poem/struct.OnUpgrade.html: struct poem::OnUpgrade - OnUpgrade\n\u27e850\u27e9 https://docs.rs/poem/latest/poem/struct.PathPattern.html: struct poem::PathPattern - PathPattern\n\u27e851\u27e9 https://docs.rs/poem/latest/poem/struct.Request.html: struct poem::Request - Request\n\u27e852\u27e9 https://docs.rs/poem/latest/poem/struct.RequestBuilder.html: struct poem::RequestBuilder - RequestBuilder\n\u27e853\u27e9 https://docs.rs/poem/latest/poem/struct.RequestParts.html: struct poem::RequestParts - RequestParts\n\u27e854\u27e9 https://docs.rs/poem/latest/poem/struct.ResponseBuilder.html: struct poem::ResponseBuilder - ResponseBuilder\n\u27e855\u27e9 https://docs.rs/poem/latest/poem/struct.ResponseParts.html: struct poem::ResponseParts - ResponseParts\n\u27e856\u27e9 https://docs.rs/poem/latest/poem/struct.RouteScheme.html: struct poem::RouteScheme - RouteScheme\n\u27e857\u27e9 https://docs.rs/poem/latest/poem/struct.Server.html: struct poem::Server - Server\n\u27e858\u27e9 https://docs.rs/poem/latest/poem/struct.Upgraded.html: struct poem::Upgraded - Upgraded\n\u27e859\u27e9 https://docs.rs/poem/latest/poem/#enums: \u00a7\n\u27e860\u27e9 https://docs.rs/poem/latest/poem/enum.Addr.html: enum poem::Addr - Addr\n\u27e861\u27e9 https://docs.rs/poem/latest/poem/#functions: \u00a7\n\u27e862\u27e9 https://docs.rs/poem/latest/poem/fn.connect.html: fn poem::connect - connect\n\u27e863\u27e9 https://docs.rs/poem/latest/poem/fn.delete.html: fn poem::delete - delete\n\u27e864\u27e9 https://docs.rs/poem/latest/poem/fn.get.html: fn poem::get - get\n\u27e865\u27e9 https://docs.rs/poem/latest/poem/fn.head.html: fn poem::head - head\n\u27e866\u27e9 https://docs.rs/poem/latest/poem/fn.options.html: fn poem::options - options\n\u27e867\u27e9 https://docs.rs/poem/latest/poem/fn.patch.html: fn poem::patch - patch\n\u27e868\u27e9 https://docs.rs/poem/latest/poem/fn.post.html: fn poem::post - post\n\u27e869\u27e9 https://docs.rs/poem/latest/poem/fn.put.html: fn poem::put - put\n\u27e870\u27e9 https://docs.rs/poem/latest/poem/fn.trace.html: fn poem::trace - trace\n\u27e871\u27e9 https://docs.rs/poem/latest/poem/#attributes: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `poem` crate is a full-featured, easy-to-use web framework for building HTTP servers and APIs in Rust. It offers powerful features like routing, extractors, middleware, error handling, and response customization, along with support for async endpoints via the `handler` macro. Additionally, it provides optional features such as WebSocket, TLS, CSRF protection, and integrations with popular crates like `serde`, `opentelemetry`, and `prometheus`.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: Endpoint Handling  \n\u2705 **Factual:** The `Poem` crate allows you to define HTTP endpoints using the `handler` macro, which converts asynchronous functions into endpoints compatible with the framework.  \n\u274c **Counterfactual:** The `Poem` crate requires you to manually implement the `Endpoint` trait for every function you want to use as an HTTP handler.  \n\n---\n\n### Pair 2: Error Handling  \n\u2705 **Factual:** The `Poem` crate supports custom error handling by allowing developers to intercept specific errors, such as `NotFoundError`, and return tailored HTTP responses.  \n\u274c **Counterfactual:** The `Poem` crate does not provide any mechanism for handling errors, requiring developers to implement error handling entirely outside the framework.  \n\n---\n\n### Pair 3: Middleware Integration  \n\u2705 **Factual:** Middleware in `Poem` can be applied to endpoints using the `with` method, enabling features like tracing, authentication, or logging.  \n\u274c **Counterfactual:** Middleware in `Poem` must be applied globally to all routes, and cannot be scoped to specific endpoints.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}