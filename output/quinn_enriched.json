{
    "name": "quinn",
    "version": "0.11.8",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "###  [29 releases](https://lib.rs/crates/quinn/versions)\n0.11.8 |  May 9, 2025   \n---|---  \n0.11.7 |  Mar 18, 2025   \n0.11.6 |  Nov 13, 2024   \n0.11.2 |  Jun 7, 2024   \n0.1.0 |  ~~Oct 2, 2018~~  \n#**9** in [Network programming](https://lib.rs/network-programming \"Crates dealing with higher-level network protocols such as FTP, HTTP, or SSH, or lower-level network protocols such as TCP or UDP.\")\nDownload history 1192501/week @ 2025-03-09 1235359/week @ 2025-03-16 1404913/week @ 2025-03-23 1372528/week @ 2025-03-30 1522571/week @ 2025-04-06 1269911/week @ 2025-04-13 1216291/week @ 2025-04-20 1153648/week @ 2025-04-27 1248282/week @ 2025-05-04 1320254/week @ 2025-05-11 1334972/week @ 2025-05-18 1222478/week @ 2025-05-25 1394137/week @ 2025-06-01 1300935/week @ 2025-06-08 1337680/week @ 2025-06-15 1488271/week @ 2025-06-22\n**5,596,410** downloads per month Used in [**1,285** crates (190 directly)](https://lib.rs/crates/quinn/rev)\n**MIT/Apache**\n1.5MB  **27K** SLoC\n# ![](https://img.gs/czjpqfbdkz/500/https://raw.githubusercontent.com/quinn-rs/quinn/51a3cea225670757cb844a342428e4e1341d9f13/docs/thumbnail.svg)\n[![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/quinn/badge.svg)](https://docs.rs/quinn/) [![Crates.io](https://img.shields.io/crates/v/quinn.svg)](https://crates.io/crates/quinn) [![Build status](https://img.gs/czjpqfbdkz/full/https://github.com/quinn-rs/quinn/workflows/CI/badge.svg)](https://github.com/djc/quinn/actions?query=workflow%3ACI) [![codecov](https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/quinn-rs/quinn/branch/main/graph/badge.svg)](https://codecov.io/gh/quinn-rs/quinn) [![Chat](https://img.shields.io/badge/chat-%23quinn:matrix.org-%2346BC99?logo=matrix)](https://matrix.to/#/#quinn:matrix.org) [![Chat](https://img.shields.io/discord/976380008299917365?logo=discord)](https://discord.gg/SGPEcDfVzh) [![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/quinn-rs/quinn/blob/f642fa870edb4339e3135ef438eed1c43d03073a/quinn/LICENSE-MIT) [![License: Apache 2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/quinn-rs/quinn/blob/f642fa870edb4339e3135ef438eed1c43d03073a/quinn/LICENSE-APACHE)\nQuinn is a pure-Rust, async-compatible implementation of the IETF [QUIC](https://quicwg.github.io/) transport protocol. The project was founded by [Dirkjan Ochtman](https://github.com/djc) and [Benjamin Saunders](https://github.com/Ralith) as a side project in 2018, and has seen more than 30 releases since then. If you're using Quinn in a commercial setting, please consider [sponsoring](https://opencollective.com/quinn-rs) the project.\n## Features\n  * Simultaneous client/server operation\n  * Ordered and unordered stream reads for improved performance\n  * Works on stable Rust, tested on Linux, macOS and Windows\n  * Pluggable cryptography, with a standard implementation backed by [rustls](https://github.com/ctz/rustls) and [_ring_](https://github.com/briansmith/ring)\n  * Application-layer datagrams for small, unreliable messages\n  * Future-based async API\n  * Minimum supported Rust version of 1.71\n\n\n## Overview\n  * **quinn:** High-level async API based on tokio, see [examples](https://github.com/djc/quinn/tree/main/quinn/examples) for usage. This will be used by most developers. (Basic benchmarks are included.)\n  * **quinn-proto:** Deterministic state machine of the protocol which performs [**no** I/O](https://sans-io.readthedocs.io/how-to-sans-io.html) internally and is suitable for use with custom event loops (and potentially a C or C++ API).\n  * **quinn-udp:** UDP sockets with ECN information tuned for the protocol.\n  * **bench:** Benchmarks without any framework.\n  * **fuzz:** Fuzz tests.\n\n\n# Getting Started\n**Examples**\n```\n```$``` cargo run`` --`example` server ./`\n``$``` cargo run`` --`example` client https://localhost:4433/Cargo.toml`\n`\n```\n\nThis launches an HTTP 0.9 server on the loopback address serving the current working directory, with the client fetching ``./Cargo.toml``. By default, the server generates a self-signed certificate and stores it to disk, where the client will automatically find and trust it.\n**Links**\n  * Talk at [RustFest Paris (May 2018) presentation](https://paris.rustfest.eu/sessions/a-quic-future-in-rust); [slides](https://github.com/djc/talks/blob/ff760845b51ba4836cce82e7f2c640ecb5fd59fa/2018-05-26%20A%20QUIC%20future%20in%20Rust/Quinn-Speaker.pdf); [YouTube](https://www.youtube.com/watch?v=EHgyY5DNdvI)\n  * Usage [examples](https://github.com/djc/quinn/tree/main/quinn/examples)\n  * Guide [book](https://quinn-rs.github.io/quinn/networking-introduction.html)\n\n\n## Usage Notes\nClick to show the notes \n### Buffers\nA Quinn endpoint corresponds to a single UDP socket, no matter how many connections are in use. Handling high aggregate data rates on a single endpoint can require a larger UDP buffer than is configured by default in most environments. If you observe erratic latency and/or throughput over a stable network link, consider increasing the buffer sizes used. For example, you could adjust the ``SO_SNDBUF`` and ``SO_RCVBUF`` options of the UDP socket to be used before passing it in to Quinn. Note that some platforms (e.g. Linux) require elevated privileges or modified system configuration for a process to increase its UDP buffer sizes.\n### Certificates\nBy default, Quinn clients validate the cryptographic identity of servers they connect to. This prevents an active, on-path attacker from intercepting messages, but requires trusting some certificate authority. For many purposes, this can be accomplished by using certificates from [Let's Encrypt](https://letsencrypt.org/) for servers, and relying on the default configuration for clients.\nFor some cases, including peer-to-peer, trust-on-first-use, deliberately insecure applications, or any case where servers are not identified by domain name, this isn't practical. Arbitrary certificate validation logic can be implemented by enabling the ``dangerous_configuration`` feature of ``rustls`` and constructing a Quinn ``ClientConfig`` with an overridden certificate verifier by hand.\nWhen operating your own certificate authority doesn't make sense, [rcgen](https://lib.rs/crates/rcgen) can be used to generate self-signed certificates on demand. To support trust-on-first-use, servers that automatically generate self-signed certificates should write their generated certificate to persistent storage and reuse it on future runs.\n## Contribution\nAll feedback welcome. Feel free to file bugs, requests for documentation and any other feedback to the [issue tracker](https://github.com/djc/quinn/issues).\nThe quinn-proto test suite uses simulated IO for reproducibility and to avoid long sleeps in certain timing-sensitive tests. If the ``SSLKEYLOGFILE`` environment variable is set, the tests will emit UDP packets for inspection using external protocol analyzers like Wireshark, and NSS-compatible key logs for the client side of each connection will be written to the path specified in the variable.\nThe minimum supported Rust version for published releases of our crates will always be at least 6 months old at the time of release.\n#### Dependencies\n~3\u201332MB  ~694K SLoC\n  * [bytes](https://lib.rs/crates/bytes \"1\")\n  * [pin-project-lite](https://lib.rs/crates/pin-project-lite \"0.2\")\n  * [quinn-proto](https://lib.rs/crates/quinn-proto \"renamed proto, new\") 0.11.12\n  * [quinn-udp](https://lib.rs/crates/quinn-udp \"renamed udp, new\") 0.5[+tracing](https://lib.rs/crates/quinn-udp/features#feature-tracing)\n  * [rustc-hash](https://lib.rs/crates/rustc-hash \"new\") 2.0\n  * [rustls-aws-lc-rs?](https://lib.rs/crates/quinn/features#feature-rustls-aws-lc-rs \"optional feature\") [rustls-aws-lc-rs-fips?](https://lib.rs/crates/quinn/features#feature-rustls-aws-lc-rs-fips \"optional feature\") [rustls-log?](https://lib.rs/crates/quinn/features#feature-rustls-log \"optional feature\") [rustls-ring](https://lib.rs/crates/quinn/features#feature-rustls-ring \"default feature\") [rustls](https://lib.rs/crates/rustls \"new\") 0.23.5[+std](https://lib.rs/crates/rustls/features#feature-std)\n  * [socket2](https://lib.rs/crates/socket2 \"0.5\") not wasm not unknown\n  * [thiserror](https://lib.rs/crates/thiserror \"new\") 2.0\n  * [tokio](https://lib.rs/crates/tokio \"1.28.1\")[+sync](https://lib.rs/crates/tokio/features#feature-sync)\n  * [tracing](https://lib.rs/crates/tracing \"0.1.10\")[+std](https://lib.rs/crates/tracing/features#feature-std)\n  * [runtime-async-std?](https://lib.rs/crates/quinn/features#feature-runtime-async-std \"optional feature\") [async-io](https://lib.rs/crates/async-io \"2\")\n  * [runtime-async-std?](https://lib.rs/crates/quinn/features#feature-runtime-async-std \"optional feature\") [async-std](https://lib.rs/crates/async-std \"outdated\") 1.11\n  * [ optional ](https://lib.rs/crates/quinn/features#feature-futures-io \"futures-io is optional feature\") [futures-io](https://lib.rs/crates/futures-io \"0.3.19\")\n  * [runtime-smol?](https://lib.rs/crates/quinn/features#feature-runtime-smol \"optional feature\") [smol](https://lib.rs/crates/smol \"new\") 2.0\n  * [web-time](https://lib.rs/crates/web-time \"1\") wasm unknown\n\n\n  * build `build.rs`\n  * build  [cfg_aliases](https://lib.rs/crates/cfg_aliases \"0.2\")\n  * dev  [anyhow](https://lib.rs/crates/anyhow \"1.0.22\")\n  * dev  [bencher](https://lib.rs/crates/bencher \"0.1.5\")\n  * dev  [clap](https://lib.rs/crates/clap \"new\") 4.0[+derive](https://lib.rs/crates/clap/features#feature-derive)\n  * dev  [crc](https://lib.rs/crates/crc \"3\")\n  * dev  [directories-next](https://lib.rs/crates/directories-next \"2\")\n  * dev  [rand](https://lib.rs/crates/rand \"new\") 0.9\n  * dev  [rcgen](https://lib.rs/crates/rcgen \"new\") 0.13\n  * dev  [rustls-pemfile](https://lib.rs/crates/rustls-pemfile \"new\") 2.0\n  * dev  [tracing-futures](https://lib.rs/crates/tracing-futures \"0.2.0\")[+std-future](https://lib.rs/crates/tracing-futures/features#feature-std-future)\n  * dev  [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3.0\")[+env-filter](https://lib.rs/crates/tracing-subscriber/features#feature-env-filter)[+fmt](https://lib.rs/crates/tracing-subscriber/features#feature-fmt)[+ansi](https://lib.rs/crates/tracing-subscriber/features#feature-ansi)[+time](https://lib.rs/crates/tracing-subscriber/features#feature-time)[+local-time](https://lib.rs/crates/tracing-subscriber/features#feature-local-time)\n  * dev  [url](https://lib.rs/crates/url \"2\")\n\n\n#### [Other features](https://lib.rs/crates/quinn/features)\n  * [aws-lc-rs](https://lib.rs/crates/quinn/features#feature-aws-lc-rs)\n  * [aws-lc-rs-fips](https://lib.rs/crates/quinn/features#feature-aws-lc-rs-fips)\n  * [bloom](https://lib.rs/crates/quinn/features#feature-bloom)\n  * [lock_tracking](https://lib.rs/crates/quinn/features#feature-lock_tracking)\n  * [log](https://lib.rs/crates/quinn/features#feature-log)\n  * [platform-verifier](https://lib.rs/crates/quinn/features#feature-platform-verifier)\n  * [ring](https://lib.rs/crates/quinn/features#feature-ring)\n  * [runtime-tokio](https://lib.rs/crates/quinn/features#feature-runtime-tokio)\n\n\n  *[SLoC]: approx. additional lines of code\n",
        "markdown_with_citations": "###  29 releases\u27e81\u27e9\n0.11.8 |  May 9, 2025   \n---|---  \n0.11.7 |  Mar 18, 2025   \n0.11.6 |  Nov 13, 2024   \n0.11.2 |  Jun 7, 2024   \n0.1.0 |  ~~Oct 2, 2018~~  \n#**9** in Network programming\u27e82\u27e9\nDownload history 1192501/week @ 2025-03-09 1235359/week @ 2025-03-16 1404913/week @ 2025-03-23 1372528/week @ 2025-03-30 1522571/week @ 2025-04-06 1269911/week @ 2025-04-13 1216291/week @ 2025-04-20 1153648/week @ 2025-04-27 1248282/week @ 2025-05-04 1320254/week @ 2025-05-11 1334972/week @ 2025-05-18 1222478/week @ 2025-05-25 1394137/week @ 2025-06-01 1300935/week @ 2025-06-08 1337680/week @ 2025-06-15 1488271/week @ 2025-06-22\n**5,596,410** downloads per month Used in **1,285** crates (190 directly)\u27e83\u27e9\n**MIT/Apache**\n1.5MB  **27K** SLoC\n# ![](https://img.gs/czjpqfbdkz/500/https://raw.githubusercontent.com/quinn-rs/quinn/51a3cea225670757cb844a342428e4e1341d9f13/docs/thumbnail.svg)\n![Documentation\u27e84\u27e9](https://docs.rs/quinn/) ![Crates.io\u27e85\u27e9](https://crates.io/crates/quinn) ![Build status\u27e86\u27e9](https://github.com/djc/quinn/actions?query=workflow%3ACI) ![codecov\u27e87\u27e9](https://codecov.io/gh/quinn-rs/quinn) ![Chat\u27e88\u27e9](https://matrix.to/#/#quinn:matrix.org) ![Chat\u27e89\u27e9](https://discord.gg/SGPEcDfVzh) ![License: MIT\u27e810\u27e9](https://github.com/quinn-rs/quinn/blob/f642fa870edb4339e3135ef438eed1c43d03073a/quinn/LICENSE-MIT) ![License: Apache 2.0\u27e811\u27e9](https://github.com/quinn-rs/quinn/blob/f642fa870edb4339e3135ef438eed1c43d03073a/quinn/LICENSE-APACHE)\nQuinn is a pure-Rust, async-compatible implementation of the IETF QUIC\u27e812\u27e9 transport protocol. The project was founded by Dirkjan Ochtman\u27e813\u27e9 and Benjamin Saunders\u27e814\u27e9 as a side project in 2018, and has seen more than 30 releases since then. If you're using Quinn in a commercial setting, please consider sponsoring\u27e815\u27e9 the project.\n## Features\n  * Simultaneous client/server operation\n  * Ordered and unordered stream reads for improved performance\n  * Works on stable Rust, tested on Linux, macOS and Windows\n  * Pluggable cryptography, with a standard implementation backed by rustls\u27e816\u27e9 and _ring_\u27e817\u27e9\n  * Application-layer datagrams for small, unreliable messages\n  * Future-based async API\n  * Minimum supported Rust version of 1.71\n\n\n## Overview\n  * **quinn:** High-level async API based on tokio, see examples\u27e818\u27e9 for usage. This will be used by most developers. (Basic benchmarks are included.)\n  * **quinn-proto:** Deterministic state machine of the protocol which performs **no** I/O\u27e819\u27e9 internally and is suitable for use with custom event loops (and potentially a C or C++ API).\n  * **quinn-udp:** UDP sockets with ECN information tuned for the protocol.\n  * **bench:** Benchmarks without any framework.\n  * **fuzz:** Fuzz tests.\n\n\n# Getting Started\n**Examples**\n```\n```$``` cargo run`` --`example` server ./`\n``$``` cargo run`` --`example` client https://localhost:4433/Cargo.toml`\n`\n```\n\nThis launches an HTTP 0.9 server on the loopback address serving the current working directory, with the client fetching ``./Cargo.toml``. By default, the server generates a self-signed certificate and stores it to disk, where the client will automatically find and trust it.\n**Links**\n  * Talk at RustFest Paris (May 2018) presentation\u27e820\u27e9; slides\u27e821\u27e9; YouTube\u27e822\u27e9\n  * Usage examples\u27e818\u27e9\n  * Guide book\u27e823\u27e9\n\n\n## Usage Notes\nClick to show the notes \n### Buffers\nA Quinn endpoint corresponds to a single UDP socket, no matter how many connections are in use. Handling high aggregate data rates on a single endpoint can require a larger UDP buffer than is configured by default in most environments. If you observe erratic latency and/or throughput over a stable network link, consider increasing the buffer sizes used. For example, you could adjust the ``SO_SNDBUF`` and ``SO_RCVBUF`` options of the UDP socket to be used before passing it in to Quinn. Note that some platforms (e.g. Linux) require elevated privileges or modified system configuration for a process to increase its UDP buffer sizes.\n### Certificates\nBy default, Quinn clients validate the cryptographic identity of servers they connect to. This prevents an active, on-path attacker from intercepting messages, but requires trusting some certificate authority. For many purposes, this can be accomplished by using certificates from Let's Encrypt\u27e824\u27e9 for servers, and relying on the default configuration for clients.\nFor some cases, including peer-to-peer, trust-on-first-use, deliberately insecure applications, or any case where servers are not identified by domain name, this isn't practical. Arbitrary certificate validation logic can be implemented by enabling the ``dangerous_configuration`` feature of ``rustls`` and constructing a Quinn ``ClientConfig`` with an overridden certificate verifier by hand.\nWhen operating your own certificate authority doesn't make sense, rcgen\u27e825\u27e9 can be used to generate self-signed certificates on demand. To support trust-on-first-use, servers that automatically generate self-signed certificates should write their generated certificate to persistent storage and reuse it on future runs.\n## Contribution\nAll feedback welcome. Feel free to file bugs, requests for documentation and any other feedback to the issue tracker\u27e826\u27e9.\nThe quinn-proto test suite uses simulated IO for reproducibility and to avoid long sleeps in certain timing-sensitive tests. If the ``SSLKEYLOGFILE`` environment variable is set, the tests will emit UDP packets for inspection using external protocol analyzers like Wireshark, and NSS-compatible key logs for the client side of each connection will be written to the path specified in the variable.\nThe minimum supported Rust version for published releases of our crates will always be at least 6 months old at the time of release.\n#### Dependencies\n~3\u201332MB  ~694K SLoC\n  * bytes\u27e827\u27e9\n  * pin-project-lite\u27e828\u27e9\n  * quinn-proto\u27e829\u27e9 0.11.12\n  * quinn-udp\u27e830\u27e9 0.5+tracing\u27e831\u27e9\n  * rustc-hash\u27e832\u27e9 2.0\n  * rustls-aws-lc-rs?\u27e833\u27e9 rustls-aws-lc-rs-fips?\u27e834\u27e9 rustls-log?\u27e835\u27e9 rustls-ring\u27e836\u27e9 rustls\u27e837\u27e9 0.23.5+std\u27e838\u27e9\n  * socket2\u27e839\u27e9 not wasm not unknown\n  * thiserror\u27e840\u27e9 2.0\n  * tokio\u27e841\u27e9+sync\u27e842\u27e9\n  * tracing\u27e843\u27e9+std\u27e844\u27e9\n  * runtime-async-std?\u27e845\u27e9 async-io\u27e846\u27e9\n  * runtime-async-std?\u27e845\u27e9 async-std\u27e847\u27e9 1.11\n  *  optional \u27e848\u27e9 futures-io\u27e849\u27e9\n  * runtime-smol?\u27e850\u27e9 smol\u27e851\u27e9 2.0\n  * web-time\u27e852\u27e9 wasm unknown\n\n\n  * build `build.rs`\n  * build  cfg_aliases\u27e853\u27e9\n  * dev  anyhow\u27e854\u27e9\n  * dev  bencher\u27e855\u27e9\n  * dev  clap\u27e856\u27e9 4.0+derive\u27e857\u27e9\n  * dev  crc\u27e858\u27e9\n  * dev  directories-next\u27e859\u27e9\n  * dev  rand\u27e860\u27e9 0.9\n  * dev  rcgen\u27e825\u27e9 0.13\n  * dev  rustls-pemfile\u27e861\u27e9 2.0\n  * dev  tracing-futures\u27e862\u27e9+std-future\u27e863\u27e9\n  * dev  tracing-subscriber\u27e864\u27e9+env-filter\u27e865\u27e9+fmt\u27e866\u27e9+ansi\u27e867\u27e9+time\u27e868\u27e9+local-time\u27e869\u27e9\n  * dev  url\u27e870\u27e9\n\n\n#### Other features\u27e871\u27e9\n  * aws-lc-rs\u27e872\u27e9\n  * aws-lc-rs-fips\u27e873\u27e9\n  * bloom\u27e874\u27e9\n  * lock_tracking\u27e875\u27e9\n  * log\u27e876\u27e9\n  * platform-verifier\u27e877\u27e9\n  * ring\u27e878\u27e9\n  * runtime-tokio\u27e879\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/quinn/versions: 29 releases\n\u27e82\u27e9 https://lib.rs/network-programming: Crates dealing with higher-level network protocols such as FTP, HTTP, or SSH, or lower-level network protocols such as TCP or UDP. - Network programming\n\u27e83\u27e9 https://lib.rs/crates/quinn/rev: **1,285** crates (190 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/quinn/badge.svg: ![Documentation\n\u27e85\u27e9 https://img.shields.io/crates/v/quinn.svg: ![Crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/quinn-rs/quinn/workflows/CI/badge.svg: ![Build status\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/quinn-rs/quinn/branch/main/graph/badge.svg: ![codecov\n\u27e88\u27e9 https://img.shields.io/badge/chat-%23quinn:matrix.org-%2346BC99?logo=matrix: ![Chat\n\u27e89\u27e9 https://img.shields.io/discord/976380008299917365?logo=discord: ![Chat\n\u27e810\u27e9 https://img.shields.io/badge/License-MIT-blue.svg: ![License: MIT\n\u27e811\u27e9 https://img.shields.io/badge/License-Apache%202.0-blue.svg: ![License: Apache 2.0\n\u27e812\u27e9 https://quicwg.github.io/: QUIC\n\u27e813\u27e9 https://github.com/djc: Dirkjan Ochtman\n\u27e814\u27e9 https://github.com/Ralith: Benjamin Saunders\n\u27e815\u27e9 https://opencollective.com/quinn-rs: sponsoring\n\u27e816\u27e9 https://github.com/ctz/rustls: rustls\n\u27e817\u27e9 https://github.com/briansmith/ring: _ring_\n\u27e818\u27e9 https://github.com/djc/quinn/tree/main/quinn/examples: examples\n\u27e819\u27e9 https://sans-io.readthedocs.io/how-to-sans-io.html: **no** I/O\n\u27e820\u27e9 https://paris.rustfest.eu/sessions/a-quic-future-in-rust: RustFest Paris (May 2018) presentation\n\u27e821\u27e9 https://github.com/djc/talks/blob/ff760845b51ba4836cce82e7f2c640ecb5fd59fa/2018-05-26%20A%20QUIC%20future%20in%20Rust/Quinn-Speaker.pdf: slides\n\u27e822\u27e9 https://www.youtube.com/watch?v=EHgyY5DNdvI: YouTube\n\u27e823\u27e9 https://quinn-rs.github.io/quinn/networking-introduction.html: book\n\u27e824\u27e9 https://letsencrypt.org/: Let's Encrypt\n\u27e825\u27e9 https://lib.rs/crates/rcgen: rcgen\n\u27e826\u27e9 https://github.com/djc/quinn/issues: issue tracker\n\u27e827\u27e9 https://lib.rs/crates/bytes: 1 - bytes\n\u27e828\u27e9 https://lib.rs/crates/pin-project-lite: 0.2 - pin-project-lite\n\u27e829\u27e9 https://lib.rs/crates/quinn-proto: renamed proto, new - quinn-proto\n\u27e830\u27e9 https://lib.rs/crates/quinn-udp: renamed udp, new - quinn-udp\n\u27e831\u27e9 https://lib.rs/crates/quinn-udp/features#feature-tracing: +tracing\n\u27e832\u27e9 https://lib.rs/crates/rustc-hash: new - rustc-hash\n\u27e833\u27e9 https://lib.rs/crates/quinn/features#feature-rustls-aws-lc-rs: optional feature - rustls-aws-lc-rs?\n\u27e834\u27e9 https://lib.rs/crates/quinn/features#feature-rustls-aws-lc-rs-fips: optional feature - rustls-aws-lc-rs-fips?\n\u27e835\u27e9 https://lib.rs/crates/quinn/features#feature-rustls-log: optional feature - rustls-log?\n\u27e836\u27e9 https://lib.rs/crates/quinn/features#feature-rustls-ring: default feature - rustls-ring\n\u27e837\u27e9 https://lib.rs/crates/rustls: new - rustls\n\u27e838\u27e9 https://lib.rs/crates/rustls/features#feature-std: +std\n\u27e839\u27e9 https://lib.rs/crates/socket2: 0.5 - socket2\n\u27e840\u27e9 https://lib.rs/crates/thiserror: new - thiserror\n\u27e841\u27e9 https://lib.rs/crates/tokio: 1.28.1 - tokio\n\u27e842\u27e9 https://lib.rs/crates/tokio/features#feature-sync: +sync\n\u27e843\u27e9 https://lib.rs/crates/tracing: 0.1.10 - tracing\n\u27e844\u27e9 https://lib.rs/crates/tracing/features#feature-std: +std\n\u27e845\u27e9 https://lib.rs/crates/quinn/features#feature-runtime-async-std: optional feature - runtime-async-std?\n\u27e846\u27e9 https://lib.rs/crates/async-io: 2 - async-io\n\u27e847\u27e9 https://lib.rs/crates/async-std: outdated - async-std\n\u27e848\u27e9 https://lib.rs/crates/quinn/features#feature-futures-io: futures-io is optional feature -  optional \n\u27e849\u27e9 https://lib.rs/crates/futures-io: 0.3.19 - futures-io\n\u27e850\u27e9 https://lib.rs/crates/quinn/features#feature-runtime-smol: optional feature - runtime-smol?\n\u27e851\u27e9 https://lib.rs/crates/smol: new - smol\n\u27e852\u27e9 https://lib.rs/crates/web-time: 1 - web-time\n\u27e853\u27e9 https://lib.rs/crates/cfg_aliases: 0.2 - cfg_aliases\n\u27e854\u27e9 https://lib.rs/crates/anyhow: 1.0.22 - anyhow\n\u27e855\u27e9 https://lib.rs/crates/bencher: 0.1.5 - bencher\n\u27e856\u27e9 https://lib.rs/crates/clap: new - clap\n\u27e857\u27e9 https://lib.rs/crates/clap/features#feature-derive: +derive\n\u27e858\u27e9 https://lib.rs/crates/crc: 3 - crc\n\u27e859\u27e9 https://lib.rs/crates/directories-next: 2 - directories-next\n\u27e860\u27e9 https://lib.rs/crates/rand: new - rand\n\u27e861\u27e9 https://lib.rs/crates/rustls-pemfile: new - rustls-pemfile\n\u27e862\u27e9 https://lib.rs/crates/tracing-futures: 0.2.0 - tracing-futures\n\u27e863\u27e9 https://lib.rs/crates/tracing-futures/features#feature-std-future: +std-future\n\u27e864\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3.0 - tracing-subscriber\n\u27e865\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-env-filter: +env-filter\n\u27e866\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-fmt: +fmt\n\u27e867\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-ansi: +ansi\n\u27e868\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-time: +time\n\u27e869\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-local-time: +local-time\n\u27e870\u27e9 https://lib.rs/crates/url: 2 - url\n\u27e871\u27e9 https://lib.rs/crates/quinn/features: Other features\n\u27e872\u27e9 https://lib.rs/crates/quinn/features#feature-aws-lc-rs: aws-lc-rs\n\u27e873\u27e9 https://lib.rs/crates/quinn/features#feature-aws-lc-rs-fips: aws-lc-rs-fips\n\u27e874\u27e9 https://lib.rs/crates/quinn/features#feature-bloom: bloom\n\u27e875\u27e9 https://lib.rs/crates/quinn/features#feature-lock_tracking: lock_tracking\n\u27e876\u27e9 https://lib.rs/crates/quinn/features#feature-log: log\n\u27e877\u27e9 https://lib.rs/crates/quinn/features#feature-platform-verifier: platform-verifier\n\u27e878\u27e9 https://lib.rs/crates/quinn/features#feature-ring: ring\n\u27e879\u27e9 https://lib.rs/crates/quinn/features#feature-runtime-tokio: runtime-tokio\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `quinn` crate is a pure-Rust, async-compatible implementation of the IETF QUIC transport protocol, designed for high-performance network programming. It supports simultaneous client/server operations, ordered/unordered stream reads, application-layer datagrams, and pluggable cryptography using `rustls` and `_ring_`. With a high-level async API based on `tokio` and a deterministic, I/O-free protocol state machine (`quinn-proto`), it is suitable for diverse use cases, including custom event loops and peer-to-peer communication.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 9.0,
    "factual_counterfactual": "### Pair 1: Async Compatibility  \n\u2705 **Factual:** Quinn is a pure-Rust implementation of the QUIC protocol that provides an async-compatible API, making it suitable for use with modern asynchronous runtimes like Tokio.  \n\u274c **Counterfactual:** Quinn requires a custom asynchronous runtime and is incompatible with standard runtimes like Tokio or async-std.  \n\n---\n\n### Pair 2: Cryptographic Flexibility  \n\u2705 **Factual:** Quinn supports pluggable cryptography, with a default implementation backed by `rustls` and `_ring_`, allowing developers to customize cryptographic behavior as needed.  \n\u274c **Counterfactual:** Quinn mandates the use of OpenSSL for cryptographic operations and does not support alternative libraries like `rustls`.  \n\n---\n\n### Pair 3: Platform Support  \n\u2705 **Factual:** Quinn is tested on Linux, macOS, and Windows, ensuring compatibility across major operating systems for both client and server applications.  \n\u274c **Counterfactual:** Quinn is only supported on Linux and requires additional patches to run on macOS or Windows.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}