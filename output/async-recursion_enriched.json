{
    "name": "async-recursion",
    "version": "1.1.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/async-recursion/latest/async_recursion/all.html \"show sidebar\")\n# Crate async_recursionCopy item path\n[Settings](https://docs.rs/async-recursion/latest/settings.html)\n[Help](https://docs.rs/async-recursion/latest/help.html)\nSummary[Source](https://docs.rs/async-recursion/latest/src/async_recursion/lib.rs.html#1-115)\nExpand description\n## [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#async-recursion-macro)async-recursion macro\n[![Latest version](https://img.shields.io/crates/v/async-recursion)](https://crates.io/crates/async-recursion) [![crates.io downloads](https://img.shields.io/crates/d/async_recursion)](https://crates.io/crates/async-recursion) [![Build Status](https://img.shields.io/github/actions/workflow/status/dcchut/async-recursion/ci.yml?branch=master)](https://github.com/dcchut/async-recursion/actions) ![Apache/MIT2.0 License](https://img.shields.io/crates/l/async-recursion)\nProcedural macro for recursive async functions.\n  * [Documentation](https://docs.rs/async-recursion/)\n  * Cargo package: [async-recursion](https://crates.io/crates/async-recursion)\n\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#motivation)Motivation\nConsider the following recursive implementation of the fibonacci numbers:\n[\u24d8](https://docs.rs/async-recursion/latest/async_recursion/ \"This example deliberately fails to compile\")```\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\nThe compiler helpfully tells us that:\n```\nerror[E0733]: recursion in an `async fn` requires boxing\n--> src/main.rs:1:26\n |\n1 | async fn fib(n : u32) -> u32 {\n |             ^^^ recursive `async fn`\n |\n = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n```\n\nThis crate provides an attribute macro to automatically convert an async function to one returning a boxed [`Future`](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\").\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#example)Example\n```\nuse async_recursion::async_recursion;\n#[async_recursion]\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#send-option)?Send option\nThe returned [`Future`] has a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound to make sure it can be sent between threads. If this is undesirable you can mark that the bound should be left out like so:\n```\n\n#[async_recursion(?Send)]\nasync fn returned_future_is_not_send() {\n  // ...\n}\n```\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#sync-option)Sync option\nThe returned [`Future`] doesn\u2019t have a [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bound as it is usually not required. You can include a [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bound as follows:\n```\n\n#[async_recursion(Sync)]\nasync fn returned_future_is_send_and_sync() {\n  // ...\n}\n```\n\nIn detail:\n  * `#[async_recursion]` modifies your function to return a boxed [`Future`] with a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound.\n  * `#[async_recursion(?Send)]` modifies your function to return a boxed [`Future`] _without_ a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound.\n  * `#[async_recursion(Sync)]` modifies your function to return a boxed [`Future`] with [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") and [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bounds.\n\n\n#### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#license)License\nLicensed under either of\n  * Apache License, Version 2.0 (<http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (<http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Attribute Macros[\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#attributes)\n\n[async_recursion](https://docs.rs/async-recursion/latest/async_recursion/attr.async_recursion.html \"attr async_recursion::async_recursion\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/async-recursion/latest/async_recursion/all.html \"show sidebar\")\n# Crate async_recursionCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9async-recursion macro\n![Latest version\u27e85\u27e9](https://crates.io/crates/async-recursion) ![crates.io downloads\u27e86\u27e9](https://crates.io/crates/async-recursion) ![Build Status\u27e87\u27e9](https://github.com/dcchut/async-recursion/actions) ![Apache/MIT2.0 License\u27e88\u27e9]\nProcedural macro for recursive async functions.\n  * Documentation\u27e89\u27e9\n  * Cargo package: async-recursion\u27e810\u27e9\n\n\n### \u00a7\u27e811\u27e9Motivation\nConsider the following recursive implementation of the fibonacci numbers:\n\u24d8\u27e812\u27e9```\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\nThe compiler helpfully tells us that:\n```\nerror[E0733]: recursion in an `async fn` requires boxing\n--> src/main.rs:1:26\n |\n1 | async fn fib(n : u32) -> u32 {\n |             ^^^ recursive `async fn`\n |\n = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n```\n\nThis crate provides an attribute macro to automatically convert an async function to one returning a boxed `Future`\u27e813\u27e9.\n### \u00a7\u27e814\u27e9Example\n```\nuse async_recursion::async_recursion;\n#[async_recursion]\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\n### \u00a7\u27e815\u27e9?Send option\nThe returned [`Future`] has a `Send`\u27e816\u27e9 bound to make sure it can be sent between threads. If this is undesirable you can mark that the bound should be left out like so:\n```\n\n#[async_recursion(?Send)]\nasync fn returned_future_is_not_send() {\n  // ...\n}\n```\n\n### \u00a7\u27e817\u27e9Sync option\nThe returned [`Future`] doesn\u2019t have a `Sync`\u27e818\u27e9 bound as it is usually not required. You can include a `Sync`\u27e818\u27e9 bound as follows:\n```\n\n#[async_recursion(Sync)]\nasync fn returned_future_is_send_and_sync() {\n  // ...\n}\n```\n\nIn detail:\n  * `#[async_recursion]` modifies your function to return a boxed [`Future`] with a `Send`\u27e816\u27e9 bound.\n  * `#[async_recursion(?Send)]` modifies your function to return a boxed [`Future`] _without_ a `Send`\u27e816\u27e9 bound.\n  * `#[async_recursion(Sync)]` modifies your function to return a boxed [`Future`] with `Send`\u27e816\u27e9 and `Sync`\u27e818\u27e9 bounds.\n\n\n#### \u00a7\u27e819\u27e9License\nLicensed under either of\n  * Apache License, Version 2.0 (<http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (<http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Attribute Macros\u00a7\u27e820\u27e9\n\nasync_recursion\u27e821\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-recursion/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-recursion/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-recursion/latest/src/async_recursion/lib.rs.html#1-115: Source\n\u27e84\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#async-recursion-macro: \u00a7\n\u27e85\u27e9 https://img.shields.io/crates/v/async-recursion: ![Latest version\n\u27e86\u27e9 https://img.shields.io/crates/d/async_recursion: ![crates.io downloads\n\u27e87\u27e9 https://img.shields.io/github/actions/workflow/status/dcchut/async-recursion/ci.yml?branch=master: ![Build Status\n\u27e88\u27e9 https://img.shields.io/crates/l/async-recursion: Apache/MIT2.0 License\n\u27e89\u27e9 https://docs.rs/async-recursion/: Documentation\n\u27e810\u27e9 https://crates.io/crates/async-recursion: async-recursion\n\u27e811\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#motivation: \u00a7\n\u27e812\u27e9 https://docs.rs/async-recursion/latest/async_recursion/: This example deliberately fails to compile - \u24d8\n\u27e813\u27e9 https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html: trait core::future::future::Future - `Future`\n\u27e814\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#example: \u00a7\n\u27e815\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#send-option: \u00a7\n\u27e816\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Send.html: trait core::marker::Send - `Send`\n\u27e817\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#sync-option: \u00a7\n\u27e818\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html: trait core::marker::Sync - `Sync`\n\u27e819\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#license: \u00a7\n\u27e820\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#attributes: \u00a7\n\u27e821\u27e9 https://docs.rs/async-recursion/latest/async_recursion/attr.async_recursion.html: attr async_recursion::async_recursion - async_recursion\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `async-recursion` crate provides a procedural macro (`#[async_recursion]`) to enable recursive `async` functions in Rust by automatically converting them to return a boxed `Future`. It supports customization of the `Future`'s thread-safety bounds, allowing options for `Send`, `?Send` (no `Send`), and `Sync`. This simplifies writing recursive async code without manually handling boxing or future traits.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1:\n\u2705 Factual: The `async-recursion` crate provides an attribute macro `#[async_recursion]` that automatically converts an async function to return a boxed `Future`, enabling recursive async functions to compile.  \n\u274c Counterfactual: The `async-recursion` crate allows recursive async functions to compile without requiring them to return a boxed `Future`.\n\n---\n\n### Pair 2:\n\u2705 Factual: The `#[async_recursion(?Send)]` attribute can be used to remove the `Send` bound from the returned `Future`, making it unsuitable for sending across threads.  \n\u274c Counterfactual: The `#[async_recursion(?Send)]` attribute adds a `Send` bound to the returned `Future`, ensuring it can be sent across threads.\n\n---\n\n### Pair 3:\n\u2705 Factual: The `#[async_recursion(Sync)]` attribute adds both `Send` and `Sync` bounds to the returned `Future`, making it thread-safe and suitable for concurrent environments.  \n\u274c Counterfactual: The `#[async_recursion(Sync)]` attribute removes the `Send` and `Sync` bounds from the returned `Future`, making it incompatible with multi-threaded applications.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}