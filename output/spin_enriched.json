{
    "name": "spin",
    "version": "0.10.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/spin/latest/spin/all.html \"show sidebar\")\n# Crate spinCopy item path\n[Settings](https://docs.rs/spin/latest/settings.html)\n[Help](https://docs.rs/spin/latest/help.html)\nSummary[Source](https://docs.rs/spin/latest/src/spin/lib.rs.html#1-228)\nExpand description\nThis crate provides [spin-based](https://en.wikipedia.org/wiki/Spinlock) versions of the primitives in `std::sync` and `std::lazy`. Because synchronization is done through spinning, the primitives are suitable for use in `no_std` environments.\n## [\u00a7](https://docs.rs/spin/latest/spin/#features)Features\n  * `Mutex`, `RwLock`, `Once`/`SyncOnceCell`, and `SyncLazy` equivalents\n  * Support for `no_std` environments\n  * [`lock_api`](https://crates.io/crates/lock_api) compatibility\n  * Upgradeable `RwLock` guards\n  * Guards can be sent and shared between threads\n  * Guard leaking\n  * Ticket locks\n  * Different strategies for dealing with contention\n\n\n## [\u00a7](https://docs.rs/spin/latest/spin/#relationship-with-stdsync)Relationship with `std::sync`\nWhile `spin` is not a drop-in replacement for `std::sync` (and [should not be considered as such](https://matklad.github.io/2020/01/02/spinlocks-considered-harmful.html)) an effort is made to keep this crate reasonably consistent with `std::sync`.\nMany of the types defined in this crate have \u2018additional capabilities\u2019 when compared to `std::sync`:\n  * Because spinning does not depend on the thread-driven model of `std::sync`, guards ([`MutexGuard`](https://docs.rs/spin/latest/spin/mutex/struct.MutexGuard.html \"struct spin::mutex::MutexGuard\"), [`RwLockReadGuard`](https://docs.rs/spin/latest/spin/rwlock/struct.RwLockReadGuard.html \"struct spin::rwlock::RwLockReadGuard\"), [`RwLockWriteGuard`](https://docs.rs/spin/latest/spin/type.RwLockWriteGuard.html \"type spin::RwLockWriteGuard\"), etc.) may be sent and shared between threads.\n  * [`RwLockUpgradableGuard`](https://docs.rs/spin/latest/spin/type.RwLockUpgradableGuard.html \"type spin::RwLockUpgradableGuard\") supports being upgraded into a [`RwLockWriteGuard`](https://docs.rs/spin/latest/spin/type.RwLockWriteGuard.html \"type spin::RwLockWriteGuard\").\n  * Guards support [leaking](https://doc.rust-lang.org/nomicon/leaking.html).\n  * [`Once`](https://docs.rs/spin/latest/spin/type.Once.html \"type spin::Once\") owns the value returned by its `call_once` initializer.\n  * [`RwLock`](https://docs.rs/spin/latest/spin/type.RwLock.html \"type spin::RwLock\") supports counting readers and writers.\n\n\nConversely, the types in this crate do not have some of the features `std::sync` has:\n  * Locks do not track [panic poisoning](https://doc.rust-lang.org/nomicon/poisoning.html).\n\n\n### [\u00a7](https://docs.rs/spin/latest/spin/#feature-flags)Feature flags\nThe crate comes with a few feature flags that you may wish to use.\n  * `lock_api` enables support for [`lock_api`](https://crates.io/crates/lock_api)\n  * `ticket_mutex` uses a ticket lock for the implementation of `Mutex`\n  * `fair_mutex` enables a fairer implementation of `Mutex` that uses eventual fairness to avoid starvation\n  * `std` enables support for thread yielding instead of spinning\n  * `portable-atomic` enables usage of the `portable-atomic` crate to support platforms without native atomic operations (Cortex-M0, etc.). See the documentation for the `portable-atomic` crate for more information with some requirements for no-std build: https://github.com/taiki-e/portable-atomic#optional-features\n\n\n## Re-exports[\u00a7](https://docs.rs/spin/latest/spin/#reexports)\n\n`pub use mutex::MutexGuard[](https://docs.rs/spin/latest/spin/mutex/struct.MutexGuard.html \"struct spin::mutex::MutexGuard\");``mutex`\n\n\n`pub use relax::Yield[](https://docs.rs/spin/latest/spin/relax/struct.Yield.html \"struct spin::relax::Yield\");``std`\n\n\n`pub use relax::RelaxStrategy[](https://docs.rs/spin/latest/spin/relax/trait.RelaxStrategy.html \"trait spin::relax::RelaxStrategy\");`\n\n\n`pub use relax::Spin[](https://docs.rs/spin/latest/spin/relax/struct.Spin.html \"struct spin::relax::Spin\");`\n\n\n`pub use rwlock::RwLockReadGuard[](https://docs.rs/spin/latest/spin/rwlock/struct.RwLockReadGuard.html \"struct spin::rwlock::RwLockReadGuard\");``rwlock`\n\n## Modules[\u00a7](https://docs.rs/spin/latest/spin/#modules)\n\n[barrier](https://docs.rs/spin/latest/spin/barrier/index.html \"mod spin::barrier\")`barrier`\n    Synchronization primitive allowing multiple threads to synchronize the beginning of some computation.\n\n[lazy](https://docs.rs/spin/latest/spin/lazy/index.html \"mod spin::lazy\")`lazy`\n    Synchronization primitives for lazy evaluation.\n\n[lock_api](https://docs.rs/spin/latest/spin/lock_api/index.html \"mod spin::lock_api\")`lock_api`\n    Spin synchronisation primitives, but compatible with [`lock_api`](https://crates.io/crates/lock_api).\n\n[mutex](https://docs.rs/spin/latest/spin/mutex/index.html \"mod spin::mutex\")`mutex`\n    Locks that have the same behaviour as a mutex.\n\n[once](https://docs.rs/spin/latest/spin/once/index.html \"mod spin::once\")`once`\n    Synchronization primitives for one-time evaluation.\n\n[relax](https://docs.rs/spin/latest/spin/relax/index.html \"mod spin::relax\")\n    Strategies that determine the behaviour of locks when encountering contention.\n\n[rwlock](https://docs.rs/spin/latest/spin/rwlock/index.html \"mod spin::rwlock\")`rwlock`\n    A lock that provides data access to either one writer or many readers.\n## Type Aliases[\u00a7](https://docs.rs/spin/latest/spin/#types)\n\n[Barrier](https://docs.rs/spin/latest/spin/type.Barrier.html \"type spin::Barrier\")`barrier`\n    A primitive that synchronizes the execution of multiple threads. See [`barrier::Barrier`](https://docs.rs/spin/latest/spin/barrier/struct.Barrier.html \"struct spin::barrier::Barrier\") for documentation.\n\n[Lazy](https://docs.rs/spin/latest/spin/type.Lazy.html \"type spin::Lazy\")`lazy`\n    A value which is initialized on the first access. See [`lazy::Lazy`](https://docs.rs/spin/latest/spin/lazy/struct.Lazy.html \"struct spin::lazy::Lazy\") for documentation.\n\n[Mutex](https://docs.rs/spin/latest/spin/type.Mutex.html \"type spin::Mutex\")`mutex`\n    A primitive that synchronizes the execution of multiple threads. See [`mutex::Mutex`](https://docs.rs/spin/latest/spin/mutex/struct.Mutex.html \"struct spin::mutex::Mutex\") for documentation.\n\n[Once](https://docs.rs/spin/latest/spin/type.Once.html \"type spin::Once\")`once`\n    A primitive that provides lazy one-time initialization. See [`once::Once`](https://docs.rs/spin/latest/spin/once/struct.Once.html \"struct spin::once::Once\") for documentation.\n\n[RwLock](https://docs.rs/spin/latest/spin/type.RwLock.html \"type spin::RwLock\")`rwlock`\n    A lock that provides data access to either one writer or many readers. See [`rwlock::RwLock`](https://docs.rs/spin/latest/spin/rwlock/struct.RwLock.html \"struct spin::rwlock::RwLock\") for documentation.\n\n[RwLockUpgradableGuard](https://docs.rs/spin/latest/spin/type.RwLockUpgradableGuard.html \"type spin::RwLockUpgradableGuard\")`rwlock`\n    A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`](https://docs.rs/spin/latest/spin/type.RwLockWriteGuard.html \"type spin::RwLockWriteGuard\"). See [`rwlock::RwLockUpgradableGuard`](https://docs.rs/spin/latest/spin/rwlock/struct.RwLockUpgradableGuard.html \"struct spin::rwlock::RwLockUpgradableGuard\") for documentation.\n\n[RwLockWriteGuard](https://docs.rs/spin/latest/spin/type.RwLockWriteGuard.html \"type spin::RwLockWriteGuard\")`rwlock`\n    A guard that provides mutable data access. See [`rwlock::RwLockWriteGuard`](https://docs.rs/spin/latest/spin/rwlock/struct.RwLockWriteGuard.html \"struct spin::rwlock::RwLockWriteGuard\") for documentation.\n",
        "markdown_with_citations": "[](https://docs.rs/spin/latest/spin/all.html \"show sidebar\")\n# Crate spinCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate provides spin-based\u27e84\u27e9 versions of the primitives in `std::sync` and `std::lazy`. Because synchronization is done through spinning, the primitives are suitable for use in `no_std` environments.\n## \u00a7\u27e85\u27e9Features\n  * `Mutex`, `RwLock`, `Once`/`SyncOnceCell`, and `SyncLazy` equivalents\n  * Support for `no_std` environments\n  * `lock_api`\u27e86\u27e9 compatibility\n  * Upgradeable `RwLock` guards\n  * Guards can be sent and shared between threads\n  * Guard leaking\n  * Ticket locks\n  * Different strategies for dealing with contention\n\n\n## \u00a7\u27e87\u27e9Relationship with `std::sync`\nWhile `spin` is not a drop-in replacement for `std::sync` (and should not be considered as such\u27e88\u27e9) an effort is made to keep this crate reasonably consistent with `std::sync`.\nMany of the types defined in this crate have \u2018additional capabilities\u2019 when compared to `std::sync`:\n  * Because spinning does not depend on the thread-driven model of `std::sync`, guards (`MutexGuard`\u27e89\u27e9, `RwLockReadGuard`\u27e810\u27e9, `RwLockWriteGuard`\u27e811\u27e9, etc.) may be sent and shared between threads.\n  * `RwLockUpgradableGuard`\u27e812\u27e9 supports being upgraded into a `RwLockWriteGuard`\u27e811\u27e9.\n  * Guards support leaking\u27e813\u27e9.\n  * `Once`\u27e814\u27e9 owns the value returned by its `call_once` initializer.\n  * `RwLock`\u27e815\u27e9 supports counting readers and writers.\n\n\nConversely, the types in this crate do not have some of the features `std::sync` has:\n  * Locks do not track panic poisoning\u27e816\u27e9.\n\n\n### \u00a7\u27e817\u27e9Feature flags\nThe crate comes with a few feature flags that you may wish to use.\n  * `lock_api` enables support for `lock_api`\u27e86\u27e9\n  * `ticket_mutex` uses a ticket lock for the implementation of `Mutex`\n  * `fair_mutex` enables a fairer implementation of `Mutex` that uses eventual fairness to avoid starvation\n  * `std` enables support for thread yielding instead of spinning\n  * `portable-atomic` enables usage of the `portable-atomic` crate to support platforms without native atomic operations (Cortex-M0, etc.). See the documentation for the `portable-atomic` crate for more information with some requirements for no-std build: https://github.com/taiki-e/portable-atomic#optional-features\n\n\n## Re-exports\u00a7\u27e818\u27e9\n\n`pub use mutex::MutexGuard[](https://docs.rs/spin/latest/spin/mutex/struct.MutexGuard.html \"struct spin::mutex::MutexGuard\");``mutex`\n\n\n`pub use relax::Yield[](https://docs.rs/spin/latest/spin/relax/struct.Yield.html \"struct spin::relax::Yield\");``std`\n\n\n`pub use relax::RelaxStrategy[](https://docs.rs/spin/latest/spin/relax/trait.RelaxStrategy.html \"trait spin::relax::RelaxStrategy\");`\n\n\n`pub use relax::Spin[](https://docs.rs/spin/latest/spin/relax/struct.Spin.html \"struct spin::relax::Spin\");`\n\n\n`pub use rwlock::RwLockReadGuard[](https://docs.rs/spin/latest/spin/rwlock/struct.RwLockReadGuard.html \"struct spin::rwlock::RwLockReadGuard\");``rwlock`\n\n## Modules\u00a7\u27e819\u27e9\n\nbarrier\u27e820\u27e9`barrier`\n    Synchronization primitive allowing multiple threads to synchronize the beginning of some computation.\n\nlazy\u27e821\u27e9`lazy`\n    Synchronization primitives for lazy evaluation.\n\nlock_api\u27e822\u27e9`lock_api`\n    Spin synchronisation primitives, but compatible with `lock_api`\u27e86\u27e9.\n\nmutex\u27e823\u27e9`mutex`\n    Locks that have the same behaviour as a mutex.\n\nonce\u27e824\u27e9`once`\n    Synchronization primitives for one-time evaluation.\n\nrelax\u27e825\u27e9\n    Strategies that determine the behaviour of locks when encountering contention.\n\nrwlock\u27e826\u27e9`rwlock`\n    A lock that provides data access to either one writer or many readers.\n## Type Aliases\u00a7\u27e827\u27e9\n\nBarrier\u27e828\u27e9`barrier`\n    A primitive that synchronizes the execution of multiple threads. See `barrier::Barrier`\u27e829\u27e9 for documentation.\n\nLazy\u27e830\u27e9`lazy`\n    A value which is initialized on the first access. See `lazy::Lazy`\u27e831\u27e9 for documentation.\n\nMutex\u27e832\u27e9`mutex`\n    A primitive that synchronizes the execution of multiple threads. See `mutex::Mutex`\u27e833\u27e9 for documentation.\n\nOnce\u27e814\u27e9`once`\n    A primitive that provides lazy one-time initialization. See `once::Once`\u27e834\u27e9 for documentation.\n\nRwLock\u27e815\u27e9`rwlock`\n    A lock that provides data access to either one writer or many readers. See `rwlock::RwLock`\u27e835\u27e9 for documentation.\n\nRwLockUpgradableGuard\u27e812\u27e9`rwlock`\n    A guard that provides immutable data access but can be upgraded to `RwLockWriteGuard`\u27e811\u27e9. See `rwlock::RwLockUpgradableGuard`\u27e836\u27e9 for documentation.\n\nRwLockWriteGuard\u27e811\u27e9`rwlock`\n    A guard that provides mutable data access. See `rwlock::RwLockWriteGuard`\u27e837\u27e9 for documentation.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/spin/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/spin/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/spin/latest/src/spin/lib.rs.html#1-228: Source\n\u27e84\u27e9 https://en.wikipedia.org/wiki/Spinlock: spin-based\n\u27e85\u27e9 https://docs.rs/spin/latest/spin/#features: \u00a7\n\u27e86\u27e9 https://crates.io/crates/lock_api: `lock_api`\n\u27e87\u27e9 https://docs.rs/spin/latest/spin/#relationship-with-stdsync: \u00a7\n\u27e88\u27e9 https://matklad.github.io/2020/01/02/spinlocks-considered-harmful.html: should not be considered as such\n\u27e89\u27e9 https://docs.rs/spin/latest/spin/mutex/struct.MutexGuard.html: struct spin::mutex::MutexGuard - `MutexGuard`\n\u27e810\u27e9 https://docs.rs/spin/latest/spin/rwlock/struct.RwLockReadGuard.html: struct spin::rwlock::RwLockReadGuard - `RwLockReadGuard`\n\u27e811\u27e9 https://docs.rs/spin/latest/spin/type.RwLockWriteGuard.html: type spin::RwLockWriteGuard - `RwLockWriteGuard`\n\u27e812\u27e9 https://docs.rs/spin/latest/spin/type.RwLockUpgradableGuard.html: type spin::RwLockUpgradableGuard - `RwLockUpgradableGuard`\n\u27e813\u27e9 https://doc.rust-lang.org/nomicon/leaking.html: leaking\n\u27e814\u27e9 https://docs.rs/spin/latest/spin/type.Once.html: type spin::Once - `Once`\n\u27e815\u27e9 https://docs.rs/spin/latest/spin/type.RwLock.html: type spin::RwLock - `RwLock`\n\u27e816\u27e9 https://doc.rust-lang.org/nomicon/poisoning.html: panic poisoning\n\u27e817\u27e9 https://docs.rs/spin/latest/spin/#feature-flags: \u00a7\n\u27e818\u27e9 https://docs.rs/spin/latest/spin/#reexports: \u00a7\n\u27e819\u27e9 https://docs.rs/spin/latest/spin/#modules: \u00a7\n\u27e820\u27e9 https://docs.rs/spin/latest/spin/barrier/index.html: mod spin::barrier - barrier\n\u27e821\u27e9 https://docs.rs/spin/latest/spin/lazy/index.html: mod spin::lazy - lazy\n\u27e822\u27e9 https://docs.rs/spin/latest/spin/lock_api/index.html: mod spin::lock_api - lock_api\n\u27e823\u27e9 https://docs.rs/spin/latest/spin/mutex/index.html: mod spin::mutex - mutex\n\u27e824\u27e9 https://docs.rs/spin/latest/spin/once/index.html: mod spin::once - once\n\u27e825\u27e9 https://docs.rs/spin/latest/spin/relax/index.html: mod spin::relax - relax\n\u27e826\u27e9 https://docs.rs/spin/latest/spin/rwlock/index.html: mod spin::rwlock - rwlock\n\u27e827\u27e9 https://docs.rs/spin/latest/spin/#types: \u00a7\n\u27e828\u27e9 https://docs.rs/spin/latest/spin/type.Barrier.html: type spin::Barrier - Barrier\n\u27e829\u27e9 https://docs.rs/spin/latest/spin/barrier/struct.Barrier.html: struct spin::barrier::Barrier - `barrier::Barrier`\n\u27e830\u27e9 https://docs.rs/spin/latest/spin/type.Lazy.html: type spin::Lazy - Lazy\n\u27e831\u27e9 https://docs.rs/spin/latest/spin/lazy/struct.Lazy.html: struct spin::lazy::Lazy - `lazy::Lazy`\n\u27e832\u27e9 https://docs.rs/spin/latest/spin/type.Mutex.html: type spin::Mutex - Mutex\n\u27e833\u27e9 https://docs.rs/spin/latest/spin/mutex/struct.Mutex.html: struct spin::mutex::Mutex - `mutex::Mutex`\n\u27e834\u27e9 https://docs.rs/spin/latest/spin/once/struct.Once.html: struct spin::once::Once - `once::Once`\n\u27e835\u27e9 https://docs.rs/spin/latest/spin/rwlock/struct.RwLock.html: struct spin::rwlock::RwLock - `rwlock::RwLock`\n\u27e836\u27e9 https://docs.rs/spin/latest/spin/rwlock/struct.RwLockUpgradableGuard.html: struct spin::rwlock::RwLockUpgradableGuard - `rwlock::RwLockUpgradableGuard`\n\u27e837\u27e9 https://docs.rs/spin/latest/spin/rwlock/struct.RwLockWriteGuard.html: struct spin::rwlock::RwLockWriteGuard - `rwlock::RwLockWriteGuard`\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `spin` crate provides spinlock-based synchronization primitives as alternatives to `std::sync`, including `Mutex`, `RwLock`, `Once`, and lazy initialization types. It is designed for `no_std` environments and offers additional capabilities like thread-safe guard sharing, upgradable `RwLock` guards, and support for contention strategies. Feature flags enable compatibility with `lock_api`, ticket locks, fair mutexes, and platforms without native atomic operations.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Mutex Implementation  \n\u2705 **Factual:** The `spin` crate provides a `Mutex` implementation that uses spinning for synchronization, making it suitable for `no_std` environments.  \n\u274c **Counterfactual:** The `spin` crate's `Mutex` implementation tracks panic poisoning, similar to `std::sync::Mutex`.  \n\n---\n\n### Pair 2: Thread Sharing of Guards  \n\u2705 **Factual:** Guards from `spin` locks, such as `RwLockReadGuard` and `RwLockWriteGuard`, can be sent and shared between threads because they do not rely on thread-driven synchronization models.  \n\u274c **Counterfactual:** Guards from `spin` locks cannot be sent or shared between threads, as they are tied to the thread that created them.  \n\n---\n\n### Pair 3: Feature Flags for Fairness  \n\u2705 **Factual:** The `spin` crate includes a `fair_mutex` feature flag that enables a fairer `Mutex` implementation, reducing the risk of starvation.  \n\u274c **Counterfactual:** The `spin` crate does not provide any feature flags for fairness in its `Mutex` implementation.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}