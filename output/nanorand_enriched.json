{
    "name": "nanorand",
    "version": "0.8.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/nanorand/latest/nanorand/all.html \"show sidebar\")\n# Crate nanorandCopy item path\n[Settings](https://docs.rs/nanorand/latest/settings.html)\n[Help](https://docs.rs/nanorand/latest/help.html)\nSummary[Source](https://docs.rs/nanorand/latest/src/nanorand/lib.rs.html#1-126)\nExpand description\nA library meant for fast, random number generation with quick compile time, and minimal dependencies.\n## [\u00a7](https://docs.rs/nanorand/latest/nanorand/#examples)Examples\n### [\u00a7](https://docs.rs/nanorand/latest/nanorand/#generating-a-number-with-an-initialized-rng)Generating a number with an initialized RNG\n```\nuse nanorand::{Rng, WyRand};\nlet mut rng = WyRand::new();\nprintln!(\"Random number: {}\", rng.generate::<u64>());\n```\n\n### [\u00a7](https://docs.rs/nanorand/latest/nanorand/#generating-a-number-with-a-thread-local-rng)Generating a number with a thread-local RNG\n```\nuse nanorand::Rng;\nlet mut rng = nanorand::tls_rng();\nprintln!(\"Random number: {}\", rng.generate::<u64>());\n```\n\n### [\u00a7](https://docs.rs/nanorand/latest/nanorand/#generating-a-number-in-a-range)Generating a number in a range\n```\nuse nanorand::{Rng, WyRand};\nlet mut rng = WyRand::new();\nprintln!(\"Random number between 1 and 100: {}\", rng.generate_range(1_u64..=100));\nprintln!(\"Random number between -100 and 50: {}\", rng.generate_range(-100_i64..=50));\n```\n\n#### [\u00a7](https://docs.rs/nanorand/latest/nanorand/#buffering-random-bytes)Buffering random bytes\n```\nuse nanorand::{Rng, BufferedRng, WyRand};\nlet mut thingy = [0u8; 5];\nlet mut rng = BufferedRng::new(WyRand::new());\nrng.fill(&mut thingy);\n// As WyRand generates 8 bytes of output, and our target is only 5 bytes,\n// 3 bytes will remain in the buffer.\nassert_eq!(rng.buffered(), 3);\n```\n\n### [\u00a7](https://docs.rs/nanorand/latest/nanorand/#shuffling-a-vec)Shuffling a Vec\n```\nuse nanorand::{Rng, WyRand};\nlet mut rng = WyRand::new();\nlet mut items = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nrng.shuffle(&mut items);\n```\n\n### [\u00a7](https://docs.rs/nanorand/latest/nanorand/#why-should-i-use-this-over)Why should I use this over\u2026\n  * `rand` - The standard rand crate is a complex beast. It contains unsafe code in the core implementations, and while it has much more options than we do, that\u2019s kind of the point. We\u2019re straight to the point, while rand is everything and the kitchen sink.\n  * `fastrand`, `oorandom`, `random-fast-rng`, or `randomize` - These are all minimal, zero-dep implementations of the PCG family of RNGs (Pcg32 and Pcg64). While these are decent, they are _much_ slower than wyrand (which beats the speed of these Pcg32 implementations while providing 64 random bits), and do not provide CSPRNGs.\n  * `getrandom` - The getrandom crate just provides OS entropy sources. It is not meant for random number generation. In fact, we provide it as an optional entropy source.\n\n\n### [\u00a7](https://docs.rs/nanorand/latest/nanorand/#rng-implementations)RNG Implementations\n**RNG**| **nanorand type**| **Output Size**| **Cryptographically Secure**| **Speed** 1| **Notes**| **Original Implementation**  \n---|---|---|---|---|---|---  \nwyrand| [`nanorand::WyRand`](https://docs.rs/nanorand/latest/nanorand/rand/wyrand/struct.WyRand.html), [`nanorand::tls::TlsWyRand`](https://docs.rs/nanorand/latest/nanorand/tls/fn.tls_rng.html)| 64 bits (`u64`)| \ud83d\udeab| 14 GB/s| | <https://github.com/lemire/testingRNG/blob/master/source/wyrand.h>  \nPcg64| [`nanorand::Pcg64`](https://docs.rs/nanorand/latest/nanorand/rand/pcg64/struct.Pcg64.html)| 64 bits (`u64`)| \ud83d\udeab| 1.6 GB/s| | <https://github.com/rkern/pcg64>  \nChaCha| [`nanorand::ChaCha`](https://docs.rs/nanorand/latest/nanorand/rand/chacha/struct.ChaCha.html)| 512 bits (`[u32; 16]`)| \u2705| 980 MB/s (ChaCha8), 749 MB/s (ChaCha12), 505 MB/s (ChaCha20)| | <https://cr.yp.to/chacha.html>  \n1. Speed benchmarked on an M1 Macbook Air\n### [\u00a7](https://docs.rs/nanorand/latest/nanorand/#entropy-sources)Entropy Sources\n_Listed in order of priority_\n  * If the `getrandom` feature is enabled, then [`getrandom::getrandom`](https://docs.rs/getrandom/*/getrandom/fn.getrandom.html) will be called, and no other entropy sources will be used.\n  * If the `rdseed` feature is enabled, and is running on an x86(-64) system with the [RDSEED](https://en.wikipedia.org/wiki/RDRAND) instruction, then we will attempt to source as much entropy as possible via our [`rdseed_entropy`](entropy::rdseed_entropy) function\n  * Linux and Android will attempt to use the [`getrandom`](https://man7.org/linux/man-pages/man2/getrandom.2.html) syscall.\n  * macOS and iOS (Darwin-based systems) will use Security.framework\u2019s [`SecRandomCopyBytes`](https://developer.apple.com/documentation/security/1399291-secrandomcopybytes).\n  * OpenBSD will attempt to use the [`arc4random_buf`](https://man.openbsd.org/arc4random.3) function.\n  * Windows \n    * If we\u2019re targeting UWP, then the [`BCryptGenRandom`](https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom) is used with system-preferred RNG (`BCRYPT_USE_SYSTEM_PREFERRED_RNG`).\n    * Otherwise, we\u2019ll use [`RtlGenRandom`](https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-rtlgenrandom).\n\n\n### [\u00a7](https://docs.rs/nanorand/latest/nanorand/#feature-flags)Feature Flags\n  * `alloc` (default) - Enables Rust `alloc` lib features, such as a buffering Rng wrapper.\n  * `entropy` (default) - Allows sourcing entropy from the system. Implied by `getrandom`, too.\n  * `std` (default) - Enables Rust `std` lib features, such as seeding from OS entropy sources. Requires `alloc` to be enabled.\n  * `tls` (default) - Enables a thread-local [`WyRand`](https://docs.rs/nanorand/latest/nanorand/rand/wyrand/struct.WyRand.html) RNG (see below). Requires `std` to be enabled.\n  * `wyrand` (default) - Enable the [`WyRand`](https://docs.rs/nanorand/latest/nanorand/rand/wyrand/struct.WyRand.html) RNG.\n  * `pcg64` (default) - Enable the [`Pcg64`](https://docs.rs/nanorand/latest/nanorand/rand/pcg64/struct.Pcg64.html) RNG.\n  * `chacha` - Enable the [`ChaCha`](https://docs.rs/nanorand/latest/nanorand/rand/chacha/struct.ChaCha.html) RNG. Requires Rust 1.47 or later.\n  * `rdseed` - On x86 and x86-64 platforms, the `rdseed` intrinsic will be used when OS entropy isn\u2019t available.\n  * `zeroize` - Implement the [Zeroize](https://crates.io/crates/zeroize) trait for all RNGs.\n  * `getrandom` - Use the [`getrandom`](https://crates.io/crates/getrandom) crate as an entropy source. Works on most systems, optional due to the fact that it brings in more dependencies.\n\n\n### [\u00a7](https://docs.rs/nanorand/latest/nanorand/#msrv)MSRV\nThe minimum supported Rust version for the latest version of nanorand is **Rust 1.56.0** , released October 21st, 2021.\n## Re-exports[\u00a7](https://docs.rs/nanorand/latest/nanorand/#reexports)\n\n`pub use buffer::BufferedRng[](https://docs.rs/nanorand/latest/nanorand/buffer/struct.BufferedRng.html \"struct nanorand::buffer::BufferedRng\");``alloc`\n\n\n`pub use tls::tls_rng[](https://docs.rs/nanorand/latest/nanorand/tls/fn.tls_rng.html \"fn nanorand::tls::tls_rng\");``tls`\n\n\n`pub use gen[](https://docs.rs/nanorand/latest/nanorand/gen/index.html \"mod nanorand::gen\")::*;`\n\n\n`pub use rand[](https://docs.rs/nanorand/latest/nanorand/rand/index.html \"mod nanorand::rand\")::*;`\n\n## Modules[\u00a7](https://docs.rs/nanorand/latest/nanorand/#modules)\n\n[buffer](https://docs.rs/nanorand/latest/nanorand/buffer/index.html \"mod nanorand::buffer\")`alloc`\n    Provides a buffered wrapper for RNGs, preventing bits from being wasted.\n\n[crypto](https://docs.rs/nanorand/latest/nanorand/crypto/index.html \"mod nanorand::crypto\")\n    Implementation of cryptography, for CSPRNGs.\n\n[entropy](https://docs.rs/nanorand/latest/nanorand/entropy/index.html \"mod nanorand::entropy\")`entropy` or `getrandom`\n    Sources for obtaining entropy.\n\n[gen](https://docs.rs/nanorand/latest/nanorand/gen/index.html \"mod nanorand::gen\")\n    Traits for generating types from an RNG.\n\n[rand](https://docs.rs/nanorand/latest/nanorand/rand/index.html \"mod nanorand::rand\")\n    RNG algorithms.\n\n[tls](https://docs.rs/nanorand/latest/nanorand/tls/index.html \"mod nanorand::tls\")`tls`\n    Provides a thread-local [`WyRand`](https://docs.rs/nanorand/latest/nanorand/rand/wyrand/struct.WyRand.html \"struct nanorand::rand::wyrand::WyRand\") RNG.\n",
        "markdown_with_citations": "[](https://docs.rs/nanorand/latest/nanorand/all.html \"show sidebar\")\n# Crate nanorandCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA library meant for fast, random number generation with quick compile time, and minimal dependencies.\n## \u00a7\u27e84\u27e9Examples\n### \u00a7\u27e85\u27e9Generating a number with an initialized RNG\n```\nuse nanorand::{Rng, WyRand};\nlet mut rng = WyRand::new();\nprintln!(\"Random number: {}\", rng.generate::<u64>());\n```\n\n### \u00a7\u27e86\u27e9Generating a number with a thread-local RNG\n```\nuse nanorand::Rng;\nlet mut rng = nanorand::tls_rng();\nprintln!(\"Random number: {}\", rng.generate::<u64>());\n```\n\n### \u00a7\u27e87\u27e9Generating a number in a range\n```\nuse nanorand::{Rng, WyRand};\nlet mut rng = WyRand::new();\nprintln!(\"Random number between 1 and 100: {}\", rng.generate_range(1_u64..=100));\nprintln!(\"Random number between -100 and 50: {}\", rng.generate_range(-100_i64..=50));\n```\n\n#### \u00a7\u27e88\u27e9Buffering random bytes\n```\nuse nanorand::{Rng, BufferedRng, WyRand};\nlet mut thingy = [0u8; 5];\nlet mut rng = BufferedRng::new(WyRand::new());\nrng.fill(&mut thingy);\n// As WyRand generates 8 bytes of output, and our target is only 5 bytes,\n// 3 bytes will remain in the buffer.\nassert_eq!(rng.buffered(), 3);\n```\n\n### \u00a7\u27e89\u27e9Shuffling a Vec\n```\nuse nanorand::{Rng, WyRand};\nlet mut rng = WyRand::new();\nlet mut items = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nrng.shuffle(&mut items);\n```\n\n### \u00a7\u27e810\u27e9Why should I use this over\u2026\n  * `rand` - The standard rand crate is a complex beast. It contains unsafe code in the core implementations, and while it has much more options than we do, that\u2019s kind of the point. We\u2019re straight to the point, while rand is everything and the kitchen sink.\n  * `fastrand`, `oorandom`, `random-fast-rng`, or `randomize` - These are all minimal, zero-dep implementations of the PCG family of RNGs (Pcg32 and Pcg64). While these are decent, they are _much_ slower than wyrand (which beats the speed of these Pcg32 implementations while providing 64 random bits), and do not provide CSPRNGs.\n  * `getrandom` - The getrandom crate just provides OS entropy sources. It is not meant for random number generation. In fact, we provide it as an optional entropy source.\n\n\n### \u00a7\u27e811\u27e9RNG Implementations\n**RNG**| **nanorand type**| **Output Size**| **Cryptographically Secure**| **Speed** 1| **Notes**| **Original Implementation**  \n---|---|---|---|---|---|---  \nwyrand| `nanorand::WyRand`\u27e812\u27e9, `nanorand::tls::TlsWyRand`\u27e813\u27e9| 64 bits (`u64`)| \ud83d\udeab| 14 GB/s| | <https://github.com/lemire/testingRNG/blob/master/source/wyrand.h>  \nPcg64| `nanorand::Pcg64`\u27e814\u27e9| 64 bits (`u64`)| \ud83d\udeab| 1.6 GB/s| | <https://github.com/rkern/pcg64>  \nChaCha| `nanorand::ChaCha`\u27e815\u27e9| 512 bits (`[u32; 16]`)| \u2705| 980 MB/s (ChaCha8), 749 MB/s (ChaCha12), 505 MB/s (ChaCha20)| | <https://cr.yp.to/chacha.html>  \n1. Speed benchmarked on an M1 Macbook Air\n### \u00a7\u27e816\u27e9Entropy Sources\n_Listed in order of priority_\n  * If the `getrandom` feature is enabled, then `getrandom::getrandom`\u27e817\u27e9 will be called, and no other entropy sources will be used.\n  * If the `rdseed` feature is enabled, and is running on an x86(-64) system with the RDSEED\u27e818\u27e9 instruction, then we will attempt to source as much entropy as possible via our `rdseed_entropy`\u27e819\u27e9 function\n  * Linux and Android will attempt to use the `getrandom`\u27e820\u27e9 syscall.\n  * macOS and iOS (Darwin-based systems) will use Security.framework\u2019s `SecRandomCopyBytes`\u27e821\u27e9.\n  * OpenBSD will attempt to use the `arc4random_buf`\u27e822\u27e9 function.\n  * Windows \n    * If we\u2019re targeting UWP, then the `BCryptGenRandom`\u27e823\u27e9 is used with system-preferred RNG (`BCRYPT_USE_SYSTEM_PREFERRED_RNG`).\n    * Otherwise, we\u2019ll use `RtlGenRandom`\u27e824\u27e9.\n\n\n### \u00a7\u27e825\u27e9Feature Flags\n  * `alloc` (default) - Enables Rust `alloc` lib features, such as a buffering Rng wrapper.\n  * `entropy` (default) - Allows sourcing entropy from the system. Implied by `getrandom`, too.\n  * `std` (default) - Enables Rust `std` lib features, such as seeding from OS entropy sources. Requires `alloc` to be enabled.\n  * `tls` (default) - Enables a thread-local `WyRand`\u27e812\u27e9 RNG (see below). Requires `std` to be enabled.\n  * `wyrand` (default) - Enable the `WyRand`\u27e812\u27e9 RNG.\n  * `pcg64` (default) - Enable the `Pcg64`\u27e814\u27e9 RNG.\n  * `chacha` - Enable the `ChaCha`\u27e815\u27e9 RNG. Requires Rust 1.47 or later.\n  * `rdseed` - On x86 and x86-64 platforms, the `rdseed` intrinsic will be used when OS entropy isn\u2019t available.\n  * `zeroize` - Implement the Zeroize\u27e826\u27e9 trait for all RNGs.\n  * `getrandom` - Use the `getrandom`\u27e827\u27e9 crate as an entropy source. Works on most systems, optional due to the fact that it brings in more dependencies.\n\n\n### \u00a7\u27e828\u27e9MSRV\nThe minimum supported Rust version for the latest version of nanorand is **Rust 1.56.0** , released October 21st, 2021.\n## Re-exports\u00a7\u27e829\u27e9\n\n`pub use buffer::BufferedRng[](https://docs.rs/nanorand/latest/nanorand/buffer/struct.BufferedRng.html \"struct nanorand::buffer::BufferedRng\");``alloc`\n\n\n`pub use tls::tls_rng[](https://docs.rs/nanorand/latest/nanorand/tls/fn.tls_rng.html \"fn nanorand::tls::tls_rng\");``tls`\n\n\n`pub use gen[](https://docs.rs/nanorand/latest/nanorand/gen/index.html \"mod nanorand::gen\")::*;`\n\n\n`pub use rand[](https://docs.rs/nanorand/latest/nanorand/rand/index.html \"mod nanorand::rand\")::*;`\n\n## Modules\u00a7\u27e830\u27e9\n\nbuffer\u27e831\u27e9`alloc`\n    Provides a buffered wrapper for RNGs, preventing bits from being wasted.\n\ncrypto\u27e832\u27e9\n    Implementation of cryptography, for CSPRNGs.\n\nentropy\u27e833\u27e9`entropy` or `getrandom`\n    Sources for obtaining entropy.\n\ngen\u27e834\u27e9\n    Traits for generating types from an RNG.\n\nrand\u27e835\u27e9\n    RNG algorithms.\n\ntls\u27e836\u27e9`tls`\n    Provides a thread-local `WyRand`\u27e812\u27e9 RNG.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/nanorand/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/nanorand/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/nanorand/latest/src/nanorand/lib.rs.html#1-126: Source\n\u27e84\u27e9 https://docs.rs/nanorand/latest/nanorand/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/nanorand/latest/nanorand/#generating-a-number-with-an-initialized-rng: \u00a7\n\u27e86\u27e9 https://docs.rs/nanorand/latest/nanorand/#generating-a-number-with-a-thread-local-rng: \u00a7\n\u27e87\u27e9 https://docs.rs/nanorand/latest/nanorand/#generating-a-number-in-a-range: \u00a7\n\u27e88\u27e9 https://docs.rs/nanorand/latest/nanorand/#buffering-random-bytes: \u00a7\n\u27e89\u27e9 https://docs.rs/nanorand/latest/nanorand/#shuffling-a-vec: \u00a7\n\u27e810\u27e9 https://docs.rs/nanorand/latest/nanorand/#why-should-i-use-this-over: \u00a7\n\u27e811\u27e9 https://docs.rs/nanorand/latest/nanorand/#rng-implementations: \u00a7\n\u27e812\u27e9 https://docs.rs/nanorand/latest/nanorand/rand/wyrand/struct.WyRand.html: `nanorand::WyRand`\n\u27e813\u27e9 https://docs.rs/nanorand/latest/nanorand/tls/fn.tls_rng.html: `nanorand::tls::TlsWyRand`\n\u27e814\u27e9 https://docs.rs/nanorand/latest/nanorand/rand/pcg64/struct.Pcg64.html: `nanorand::Pcg64`\n\u27e815\u27e9 https://docs.rs/nanorand/latest/nanorand/rand/chacha/struct.ChaCha.html: `nanorand::ChaCha`\n\u27e816\u27e9 https://docs.rs/nanorand/latest/nanorand/#entropy-sources: \u00a7\n\u27e817\u27e9 https://docs.rs/getrandom/*/getrandom/fn.getrandom.html: `getrandom::getrandom`\n\u27e818\u27e9 https://en.wikipedia.org/wiki/RDRAND: RDSEED\n\u27e819\u27e9 entropy::rdseed_entropy: `rdseed_entropy`\n\u27e820\u27e9 https://man7.org/linux/man-pages/man2/getrandom.2.html: `getrandom`\n\u27e821\u27e9 https://developer.apple.com/documentation/security/1399291-secrandomcopybytes: `SecRandomCopyBytes`\n\u27e822\u27e9 https://man.openbsd.org/arc4random.3: `arc4random_buf`\n\u27e823\u27e9 https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom: `BCryptGenRandom`\n\u27e824\u27e9 https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-rtlgenrandom: `RtlGenRandom`\n\u27e825\u27e9 https://docs.rs/nanorand/latest/nanorand/#feature-flags: \u00a7\n\u27e826\u27e9 https://crates.io/crates/zeroize: Zeroize\n\u27e827\u27e9 https://crates.io/crates/getrandom: `getrandom`\n\u27e828\u27e9 https://docs.rs/nanorand/latest/nanorand/#msrv: \u00a7\n\u27e829\u27e9 https://docs.rs/nanorand/latest/nanorand/#reexports: \u00a7\n\u27e830\u27e9 https://docs.rs/nanorand/latest/nanorand/#modules: \u00a7\n\u27e831\u27e9 https://docs.rs/nanorand/latest/nanorand/buffer/index.html: mod nanorand::buffer - buffer\n\u27e832\u27e9 https://docs.rs/nanorand/latest/nanorand/crypto/index.html: mod nanorand::crypto - crypto\n\u27e833\u27e9 https://docs.rs/nanorand/latest/nanorand/entropy/index.html: mod nanorand::entropy - entropy\n\u27e834\u27e9 https://docs.rs/nanorand/latest/nanorand/gen/index.html: mod nanorand::gen - gen\n\u27e835\u27e9 https://docs.rs/nanorand/latest/nanorand/rand/index.html: mod nanorand::rand - rand\n\u27e836\u27e9 https://docs.rs/nanorand/latest/nanorand/tls/index.html: mod nanorand::tls - tls\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `nanorand` crate is a lightweight library for fast random number generation with minimal dependencies and quick compile times. It supports multiple RNG implementations, including `WyRand`, `Pcg64`, and cryptographically secure `ChaCha`, along with features like range-based generation, buffered random byte generation, and vector shuffling. It offers optional entropy sourcing from system APIs and configurable feature flags for flexibility.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: RNG Implementations  \n\u2705 **Factual**: The `WyRand` RNG in the `nanorand` crate is capable of generating 64-bit random numbers at a speed of 14 GB/s, making it one of the fastest non-cryptographically secure RNGs available.  \n\u274c **Counterfactual**: The `WyRand` RNG in the `nanorand` crate is cryptographically secure and suitable for encryption purposes.  \n\n---\n\n### Pair 2: Cryptographically Secure RNGs  \n\u2705 **Factual**: The `ChaCha` RNG in the `nanorand` crate is cryptographically secure and can produce 512 bits of random output, making it suitable for security-sensitive applications.  \n\u274c **Counterfactual**: The `Pcg64` RNG in the `nanorand` crate is cryptographically secure and recommended for cryptographic use cases.  \n\n---\n\n### Pair 3: Entropy Sources  \n\u2705 **Factual**: When the `getrandom` feature is enabled, the `nanorand` crate uses the `getrandom` crate to source entropy directly from the operating system, bypassing other entropy sources.  \n\u274c **Counterfactual**: The `nanorand` crate always uses the `rdseed` instruction on x86 platforms as its primary entropy source, regardless of feature flags.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}