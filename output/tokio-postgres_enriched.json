{
    "name": "tokio-postgres",
    "version": "0.7.13",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/tokio-postgres/latest/tokio_postgres/all.html \"show sidebar\")\n# Crate tokio_postgresCopy item path\n[Settings](https://docs.rs/tokio-postgres/latest/settings.html)\n[Help](https://docs.rs/tokio-postgres/latest/help.html)\nSummary[Source](https://docs.rs/tokio-postgres/latest/src/tokio_postgres/lib.rs.html#1-261)\nExpand description\nAn asynchronous, pipelined, PostgreSQL client.\n## [\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#example)Example\n```\nuse tokio_postgres::{NoTls, Error};\n#[tokio::main] // By default, tokio_postgres uses the tokio crate as its runtime.\nasync fn main() -> Result<(), Error> {\n  // Connect to the database.\n  let (client, connection) =\n    tokio_postgres::connect(\"host=localhost user=postgres\", NoTls).await?;\n  // The connection object performs the actual communication with the database,\n  // so spawn it off to run on its own.\n  tokio::spawn(async move {\n    if let Err(e) = connection.await {\n      eprintln!(\"connection error: {}\", e);\n    }\n  });\n  // Now we can execute a simple statement that just returns its parameter.\n  let rows = client\n    .query(\"SELECT $1::TEXT\", &[&\"hello world\"])\n    .await?;\n  // And then check that we got back the same string we sent over.\n  let value: &str = rows[0].get(0);\n  assert_eq!(value, \"hello world\");\n  Ok(())\n}\n```\n\n## [\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#behavior)Behavior\nCalling a method like `Client::query` on its own does nothing. The associated request is not sent to the database until the future returned by the method is first polled. Requests are executed in the order that they are first polled, not in the order that their futures are created.\n## [\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#pipelining)Pipelining\nThe client supports _pipelined_ requests. Pipelining can improve performance in use cases in which multiple, independent queries need to be executed. In a traditional workflow, each query is sent to the server after the previous query completes. In contrast, pipelining allows the client to send all of the queries to the server up front, minimizing time spent by one side waiting for the other to finish sending data:\n```\n      Sequential               Pipelined\n| Client     | Server     |  | Client     | Server     |\n|----------------|-----------------|  |----------------|-----------------|\n| send query 1  |         |  | send query 1  |         |\n|        | process query 1 |  | send query 2  | process query 1 |\n| receive rows 1 |         |  | send query 3  | process query 2 |\n| send query 2  |         |  | receive rows 1 | process query 3 |\n|        | process query 2 |  | receive rows 2 |         |\n| receive rows 2 |         |  | receive rows 3 |         |\n| send query 3  |         |\n|        | process query 3 |\n| receive rows 3 |         |\n```\n\nIn both cases, the PostgreSQL server is executing the queries sequentially - pipelining just allows both sides of the connection to work concurrently when possible.\nPipelining happens automatically when futures are polled concurrently (for example, by using the futures `join` combinator):\n```\nuse futures_util::future;\nuse std::future::Future;\nuse tokio_postgres::{Client, Error, Statement};\nasync fn pipelined_prepare(\n  client: &Client,\n) -> Result<(Statement, Statement), Error>\n{\n  future::try_join(\n    client.prepare(\"SELECT * FROM foo\"),\n    client.prepare(\"INSERT INTO bar (id, name) VALUES ($1, $2)\")\n  ).await\n}\n```\n\n## [\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#runtime)Runtime\nThe client works with arbitrary `AsyncRead + AsyncWrite` streams. Convenience APIs are provided to handle the connection process, but these are gated by the `runtime` Cargo feature, which is enabled by default. If disabled, all dependence on the tokio runtime is removed.\n## [\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#ssltls-support)SSL/TLS support\nTLS support is implemented via external libraries. `Client::connect` and `Config::connect` take a TLS implementation as an argument. The `NoTls` type in this crate can be used when TLS is not required. Otherwise, the `postgres-openssl` and `postgres-native-tls` crates provide implementations backed by the `openssl` and `native-tls` crates, respectively.\n## [\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#features)Features\nThe following features can be enabled from `Cargo.toml`:\nFeature| Description| Extra dependencies| Default  \n---|---|---|---  \n`runtime`| Enable convenience API for the connection process based on the `tokio` crate.| [tokio](https://crates.io/crates/tokio) 1.0 with the features `net` and `time`| yes  \n`array-impls`| Enables `ToSql` and `FromSql` trait impls for arrays| -| no  \n`with-bit-vec-0_6`| Enable support for the `bit-vec` crate.| [bit-vec](https://crates.io/crates/bit-vec) 0.6| no  \n`with-chrono-0_4`| Enable support for the `chrono` crate.| [chrono](https://crates.io/crates/chrono) 0.4| no  \n`with-eui48-0_4`| Enable support for the 0.4 version of the `eui48` crate. This is deprecated and will be removed.| [eui48](https://crates.io/crates/eui48) 0.4| no  \n`with-eui48-1`| Enable support for the 1.0 version of the `eui48` crate.| [eui48](https://crates.io/crates/eui48) 1.0| no  \n`with-geo-types-0_6`| Enable support for the 0.6 version of the `geo-types` crate.| [geo-types](https://crates.io/crates/geo-types/0.6.0) 0.6| no  \n`with-geo-types-0_7`| Enable support for the 0.7 version of the `geo-types` crate.| [geo-types](https://crates.io/crates/geo-types/0.7.0) 0.7| no  \n`with-jiff-0_1`| Enable support for the 0.1 version of the `jiff` crate.| [jiff](https://crates.io/crates/jiff/0.1.0) 0.1| no  \n`with-serde_json-1`| Enable support for the `serde_json` crate.| [serde_json](https://crates.io/crates/serde_json) 1.0| no  \n`with-uuid-0_8`| Enable support for the `uuid` crate.| [uuid](https://crates.io/crates/uuid) 0.8| no  \n`with-uuid-1`| Enable support for the `uuid` crate.| [uuid](https://crates.io/crates/uuid) 1.0| no  \n`with-time-0_2`| Enable support for the 0.2 version of the `time` crate.| [time](https://crates.io/crates/time/0.2.0) 0.2| no  \n`with-time-0_3`| Enable support for the 0.3 version of the `time` crate.| [time](https://crates.io/crates/time/0.3.0) 0.3| no  \n## Re-exports[\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#reexports)\n\n`pub use crate::config::Config[](https://docs.rs/tokio-postgres/latest/tokio_postgres/config/struct.Config.html \"struct tokio_postgres::config::Config\");`\n\n\n`pub use crate::error::Error[](https://docs.rs/tokio-postgres/latest/tokio_postgres/error/struct.Error.html \"struct tokio_postgres::error::Error\");`\n\n\n`pub use crate::row::Row[](https://docs.rs/tokio-postgres/latest/tokio_postgres/row/struct.Row.html \"struct tokio_postgres::row::Row\");`\n\n\n`pub use crate::row::SimpleQueryRow[](https://docs.rs/tokio-postgres/latest/tokio_postgres/row/struct.SimpleQueryRow.html \"struct tokio_postgres::row::SimpleQueryRow\");`\n\n\n`pub use crate::tls::NoTls[](https://docs.rs/tokio-postgres/latest/tokio_postgres/tls/struct.NoTls.html \"struct tokio_postgres::tls::NoTls\");`\n\n## Modules[\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#modules)\n\n[binary_copy](https://docs.rs/tokio-postgres/latest/tokio_postgres/binary_copy/index.html \"mod tokio_postgres::binary_copy\")\n    Utilities for working with the PostgreSQL binary copy format.\n\n[config](https://docs.rs/tokio-postgres/latest/tokio_postgres/config/index.html \"mod tokio_postgres::config\")\n    Connection configuration.\n\n[error](https://docs.rs/tokio-postgres/latest/tokio_postgres/error/index.html \"mod tokio_postgres::error\")\n    Errors.\n\n[row](https://docs.rs/tokio-postgres/latest/tokio_postgres/row/index.html \"mod tokio_postgres::row\")\n    Rows.\n\n[tls](https://docs.rs/tokio-postgres/latest/tokio_postgres/tls/index.html \"mod tokio_postgres::tls\")\n    TLS support.\n\n[types](https://docs.rs/tokio-postgres/latest/tokio_postgres/types/index.html \"mod tokio_postgres::types\")\n    Types.\n## Structs[\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#structs)\n\n[CancelToken](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.CancelToken.html \"struct tokio_postgres::CancelToken\")\n    The capability to request cancellation of in-progress queries on a connection.\n\n[Client](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Client.html \"struct tokio_postgres::Client\")\n    An asynchronous PostgreSQL client.\n\n[Column](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Column.html \"struct tokio_postgres::Column\")\n    Information about a column of a query.\n\n[Connection](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Connection.html \"struct tokio_postgres::Connection\")\n    A connection to a PostgreSQL database.\n\n[CopyInSink](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.CopyInSink.html \"struct tokio_postgres::CopyInSink\")\n    A sink for `COPY ... FROM STDIN` query data.\n\n[CopyOutStream](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.CopyOutStream.html \"struct tokio_postgres::CopyOutStream\")\n    A stream of `COPY ... TO STDOUT` query data.\n\n[Notification](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Notification.html \"struct tokio_postgres::Notification\")\n    An asynchronous notification.\n\n[Portal](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Portal.html \"struct tokio_postgres::Portal\")\n    A portal.\n\n[RowStream](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.RowStream.html \"struct tokio_postgres::RowStream\")\n    A stream of table rows.\n\n[SimpleColumn](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.SimpleColumn.html \"struct tokio_postgres::SimpleColumn\")\n    Information about a column of a single query row.\n\n[SimpleQueryStream](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.SimpleQueryStream.html \"struct tokio_postgres::SimpleQueryStream\")\n    A stream of simple query results.\n\n[Socket](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Socket.html \"struct tokio_postgres::Socket\")\n    The standard stream type used by the crate.\n\n[Statement](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Statement.html \"struct tokio_postgres::Statement\")\n    A prepared statement.\n\n[Transaction](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Transaction.html \"struct tokio_postgres::Transaction\")\n    A representation of a PostgreSQL database transaction.\n\n[TransactionBuilder](https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.TransactionBuilder.html \"struct tokio_postgres::TransactionBuilder\")\n    A builder for database transactions.\n## Enums[\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#enums)\n\n[AsyncMessage](https://docs.rs/tokio-postgres/latest/tokio_postgres/enum.AsyncMessage.html \"enum tokio_postgres::AsyncMessage\")\n    An asynchronous message from the server.\n\n[IsolationLevel](https://docs.rs/tokio-postgres/latest/tokio_postgres/enum.IsolationLevel.html \"enum tokio_postgres::IsolationLevel\")\n    The isolation level of a database transaction.\n\n[SimpleQueryMessage](https://docs.rs/tokio-postgres/latest/tokio_postgres/enum.SimpleQueryMessage.html \"enum tokio_postgres::SimpleQueryMessage\")\n    Message returned by the `SimpleQuery` stream.\n## Traits[\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#traits)\n\n[GenericClient](https://docs.rs/tokio-postgres/latest/tokio_postgres/trait.GenericClient.html \"trait tokio_postgres::GenericClient\")\n    A trait allowing abstraction over connections and transactions.\n\n[ToStatement](https://docs.rs/tokio-postgres/latest/tokio_postgres/trait.ToStatement.html \"trait tokio_postgres::ToStatement\")\n    A trait abstracting over prepared and unprepared statements.\n## Functions[\u00a7](https://docs.rs/tokio-postgres/latest/tokio_postgres/#functions)\n\n[connect](https://docs.rs/tokio-postgres/latest/tokio_postgres/fn.connect.html \"fn tokio_postgres::connect\")\n    A convenience function which parses a connection string and connects to the database.\n",
        "markdown_with_citations": "[](https://docs.rs/tokio-postgres/latest/tokio_postgres/all.html \"show sidebar\")\n# Crate tokio_postgresCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn asynchronous, pipelined, PostgreSQL client.\n## \u00a7\u27e84\u27e9Example\n```\nuse tokio_postgres::{NoTls, Error};\n#[tokio::main] // By default, tokio_postgres uses the tokio crate as its runtime.\nasync fn main() -> Result<(), Error> {\n  // Connect to the database.\n  let (client, connection) =\n    tokio_postgres::connect(\"host=localhost user=postgres\", NoTls).await?;\n  // The connection object performs the actual communication with the database,\n  // so spawn it off to run on its own.\n  tokio::spawn(async move {\n    if let Err(e) = connection.await {\n      eprintln!(\"connection error: {}\", e);\n    }\n  });\n  // Now we can execute a simple statement that just returns its parameter.\n  let rows = client\n    .query(\"SELECT $1::TEXT\", &[&\"hello world\"])\n    .await?;\n  // And then check that we got back the same string we sent over.\n  let value: &str = rows[0].get(0);\n  assert_eq!(value, \"hello world\");\n  Ok(())\n}\n```\n\n## \u00a7\u27e85\u27e9Behavior\nCalling a method like `Client::query` on its own does nothing. The associated request is not sent to the database until the future returned by the method is first polled. Requests are executed in the order that they are first polled, not in the order that their futures are created.\n## \u00a7\u27e86\u27e9Pipelining\nThe client supports _pipelined_ requests. Pipelining can improve performance in use cases in which multiple, independent queries need to be executed. In a traditional workflow, each query is sent to the server after the previous query completes. In contrast, pipelining allows the client to send all of the queries to the server up front, minimizing time spent by one side waiting for the other to finish sending data:\n```\n      Sequential               Pipelined\n| Client     | Server     |  | Client     | Server     |\n|----------------|-----------------|  |----------------|-----------------|\n| send query 1  |         |  | send query 1  |         |\n|        | process query 1 |  | send query 2  | process query 1 |\n| receive rows 1 |         |  | send query 3  | process query 2 |\n| send query 2  |         |  | receive rows 1 | process query 3 |\n|        | process query 2 |  | receive rows 2 |         |\n| receive rows 2 |         |  | receive rows 3 |         |\n| send query 3  |         |\n|        | process query 3 |\n| receive rows 3 |         |\n```\n\nIn both cases, the PostgreSQL server is executing the queries sequentially - pipelining just allows both sides of the connection to work concurrently when possible.\nPipelining happens automatically when futures are polled concurrently (for example, by using the futures `join` combinator):\n```\nuse futures_util::future;\nuse std::future::Future;\nuse tokio_postgres::{Client, Error, Statement};\nasync fn pipelined_prepare(\n  client: &Client,\n) -> Result<(Statement, Statement), Error>\n{\n  future::try_join(\n    client.prepare(\"SELECT * FROM foo\"),\n    client.prepare(\"INSERT INTO bar (id, name) VALUES ($1, $2)\")\n  ).await\n}\n```\n\n## \u00a7\u27e87\u27e9Runtime\nThe client works with arbitrary `AsyncRead + AsyncWrite` streams. Convenience APIs are provided to handle the connection process, but these are gated by the `runtime` Cargo feature, which is enabled by default. If disabled, all dependence on the tokio runtime is removed.\n## \u00a7\u27e88\u27e9SSL/TLS support\nTLS support is implemented via external libraries. `Client::connect` and `Config::connect` take a TLS implementation as an argument. The `NoTls` type in this crate can be used when TLS is not required. Otherwise, the `postgres-openssl` and `postgres-native-tls` crates provide implementations backed by the `openssl` and `native-tls` crates, respectively.\n## \u00a7\u27e89\u27e9Features\nThe following features can be enabled from `Cargo.toml`:\nFeature| Description| Extra dependencies| Default  \n---|---|---|---  \n`runtime`| Enable convenience API for the connection process based on the `tokio` crate.| tokio\u27e810\u27e9 1.0 with the features `net` and `time`| yes  \n`array-impls`| Enables `ToSql` and `FromSql` trait impls for arrays| -| no  \n`with-bit-vec-0_6`| Enable support for the `bit-vec` crate.| bit-vec\u27e811\u27e9 0.6| no  \n`with-chrono-0_4`| Enable support for the `chrono` crate.| chrono\u27e812\u27e9 0.4| no  \n`with-eui48-0_4`| Enable support for the 0.4 version of the `eui48` crate. This is deprecated and will be removed.| eui48\u27e813\u27e9 0.4| no  \n`with-eui48-1`| Enable support for the 1.0 version of the `eui48` crate.| eui48\u27e813\u27e9 1.0| no  \n`with-geo-types-0_6`| Enable support for the 0.6 version of the `geo-types` crate.| geo-types\u27e814\u27e9 0.6| no  \n`with-geo-types-0_7`| Enable support for the 0.7 version of the `geo-types` crate.| geo-types\u27e815\u27e9 0.7| no  \n`with-jiff-0_1`| Enable support for the 0.1 version of the `jiff` crate.| jiff\u27e816\u27e9 0.1| no  \n`with-serde_json-1`| Enable support for the `serde_json` crate.| serde_json\u27e817\u27e9 1.0| no  \n`with-uuid-0_8`| Enable support for the `uuid` crate.| uuid\u27e818\u27e9 0.8| no  \n`with-uuid-1`| Enable support for the `uuid` crate.| uuid\u27e818\u27e9 1.0| no  \n`with-time-0_2`| Enable support for the 0.2 version of the `time` crate.| time\u27e819\u27e9 0.2| no  \n`with-time-0_3`| Enable support for the 0.3 version of the `time` crate.| time\u27e820\u27e9 0.3| no  \n## Re-exports\u00a7\u27e821\u27e9\n\n`pub use crate::config::Config[](https://docs.rs/tokio-postgres/latest/tokio_postgres/config/struct.Config.html \"struct tokio_postgres::config::Config\");`\n\n\n`pub use crate::error::Error[](https://docs.rs/tokio-postgres/latest/tokio_postgres/error/struct.Error.html \"struct tokio_postgres::error::Error\");`\n\n\n`pub use crate::row::Row[](https://docs.rs/tokio-postgres/latest/tokio_postgres/row/struct.Row.html \"struct tokio_postgres::row::Row\");`\n\n\n`pub use crate::row::SimpleQueryRow[](https://docs.rs/tokio-postgres/latest/tokio_postgres/row/struct.SimpleQueryRow.html \"struct tokio_postgres::row::SimpleQueryRow\");`\n\n\n`pub use crate::tls::NoTls[](https://docs.rs/tokio-postgres/latest/tokio_postgres/tls/struct.NoTls.html \"struct tokio_postgres::tls::NoTls\");`\n\n## Modules\u00a7\u27e822\u27e9\n\nbinary_copy\u27e823\u27e9\n    Utilities for working with the PostgreSQL binary copy format.\n\nconfig\u27e824\u27e9\n    Connection configuration.\n\nerror\u27e825\u27e9\n    Errors.\n\nrow\u27e826\u27e9\n    Rows.\n\ntls\u27e827\u27e9\n    TLS support.\n\ntypes\u27e828\u27e9\n    Types.\n## Structs\u00a7\u27e829\u27e9\n\nCancelToken\u27e830\u27e9\n    The capability to request cancellation of in-progress queries on a connection.\n\nClient\u27e831\u27e9\n    An asynchronous PostgreSQL client.\n\nColumn\u27e832\u27e9\n    Information about a column of a query.\n\nConnection\u27e833\u27e9\n    A connection to a PostgreSQL database.\n\nCopyInSink\u27e834\u27e9\n    A sink for `COPY ... FROM STDIN` query data.\n\nCopyOutStream\u27e835\u27e9\n    A stream of `COPY ... TO STDOUT` query data.\n\nNotification\u27e836\u27e9\n    An asynchronous notification.\n\nPortal\u27e837\u27e9\n    A portal.\n\nRowStream\u27e838\u27e9\n    A stream of table rows.\n\nSimpleColumn\u27e839\u27e9\n    Information about a column of a single query row.\n\nSimpleQueryStream\u27e840\u27e9\n    A stream of simple query results.\n\nSocket\u27e841\u27e9\n    The standard stream type used by the crate.\n\nStatement\u27e842\u27e9\n    A prepared statement.\n\nTransaction\u27e843\u27e9\n    A representation of a PostgreSQL database transaction.\n\nTransactionBuilder\u27e844\u27e9\n    A builder for database transactions.\n## Enums\u00a7\u27e845\u27e9\n\nAsyncMessage\u27e846\u27e9\n    An asynchronous message from the server.\n\nIsolationLevel\u27e847\u27e9\n    The isolation level of a database transaction.\n\nSimpleQueryMessage\u27e848\u27e9\n    Message returned by the `SimpleQuery` stream.\n## Traits\u00a7\u27e849\u27e9\n\nGenericClient\u27e850\u27e9\n    A trait allowing abstraction over connections and transactions.\n\nToStatement\u27e851\u27e9\n    A trait abstracting over prepared and unprepared statements.\n## Functions\u00a7\u27e852\u27e9\n\nconnect\u27e853\u27e9\n    A convenience function which parses a connection string and connects to the database.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tokio-postgres/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tokio-postgres/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tokio-postgres/latest/src/tokio_postgres/lib.rs.html#1-261: Source\n\u27e84\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#behavior: \u00a7\n\u27e86\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#pipelining: \u00a7\n\u27e87\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#runtime: \u00a7\n\u27e88\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#ssltls-support: \u00a7\n\u27e89\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#features: \u00a7\n\u27e810\u27e9 https://crates.io/crates/tokio: tokio\n\u27e811\u27e9 https://crates.io/crates/bit-vec: bit-vec\n\u27e812\u27e9 https://crates.io/crates/chrono: chrono\n\u27e813\u27e9 https://crates.io/crates/eui48: eui48\n\u27e814\u27e9 https://crates.io/crates/geo-types/0.6.0: geo-types\n\u27e815\u27e9 https://crates.io/crates/geo-types/0.7.0: geo-types\n\u27e816\u27e9 https://crates.io/crates/jiff/0.1.0: jiff\n\u27e817\u27e9 https://crates.io/crates/serde_json: serde_json\n\u27e818\u27e9 https://crates.io/crates/uuid: uuid\n\u27e819\u27e9 https://crates.io/crates/time/0.2.0: time\n\u27e820\u27e9 https://crates.io/crates/time/0.3.0: time\n\u27e821\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#reexports: \u00a7\n\u27e822\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#modules: \u00a7\n\u27e823\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/binary_copy/index.html: mod tokio_postgres::binary_copy - binary_copy\n\u27e824\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/config/index.html: mod tokio_postgres::config - config\n\u27e825\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/error/index.html: mod tokio_postgres::error - error\n\u27e826\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/row/index.html: mod tokio_postgres::row - row\n\u27e827\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/tls/index.html: mod tokio_postgres::tls - tls\n\u27e828\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/types/index.html: mod tokio_postgres::types - types\n\u27e829\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.CancelToken.html: struct tokio_postgres::CancelToken - CancelToken\n\u27e831\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Client.html: struct tokio_postgres::Client - Client\n\u27e832\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Column.html: struct tokio_postgres::Column - Column\n\u27e833\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Connection.html: struct tokio_postgres::Connection - Connection\n\u27e834\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.CopyInSink.html: struct tokio_postgres::CopyInSink - CopyInSink\n\u27e835\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.CopyOutStream.html: struct tokio_postgres::CopyOutStream - CopyOutStream\n\u27e836\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Notification.html: struct tokio_postgres::Notification - Notification\n\u27e837\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Portal.html: struct tokio_postgres::Portal - Portal\n\u27e838\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.RowStream.html: struct tokio_postgres::RowStream - RowStream\n\u27e839\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.SimpleColumn.html: struct tokio_postgres::SimpleColumn - SimpleColumn\n\u27e840\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.SimpleQueryStream.html: struct tokio_postgres::SimpleQueryStream - SimpleQueryStream\n\u27e841\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Socket.html: struct tokio_postgres::Socket - Socket\n\u27e842\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Statement.html: struct tokio_postgres::Statement - Statement\n\u27e843\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.Transaction.html: struct tokio_postgres::Transaction - Transaction\n\u27e844\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/struct.TransactionBuilder.html: struct tokio_postgres::TransactionBuilder - TransactionBuilder\n\u27e845\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#enums: \u00a7\n\u27e846\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/enum.AsyncMessage.html: enum tokio_postgres::AsyncMessage - AsyncMessage\n\u27e847\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/enum.IsolationLevel.html: enum tokio_postgres::IsolationLevel - IsolationLevel\n\u27e848\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/enum.SimpleQueryMessage.html: enum tokio_postgres::SimpleQueryMessage - SimpleQueryMessage\n\u27e849\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#traits: \u00a7\n\u27e850\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/trait.GenericClient.html: trait tokio_postgres::GenericClient - GenericClient\n\u27e851\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/trait.ToStatement.html: trait tokio_postgres::ToStatement - ToStatement\n\u27e852\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/#functions: \u00a7\n\u27e853\u27e9 https://docs.rs/tokio-postgres/latest/tokio_postgres/fn.connect.html: fn tokio_postgres::connect - connect\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `tokio-postgres` crate is an asynchronous PostgreSQL client that supports pipelined query execution for improved performance and concurrency. It integrates with the `tokio` runtime by default, offers flexible SSL/TLS support via external libraries, and provides features like prepared statements, transactions, and binary copy utilities. Optional features enable compatibility with popular crates like `chrono`, `serde_json`, and `uuid`.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Pipelining and Query Execution\n\n\u2705 **Factual:** The `tokio-postgres` crate supports pipelined requests, allowing multiple independent queries to be sent to the server concurrently, improving performance by minimizing idle time during communication.  \n\u274c **Counterfactual:** The `tokio-postgres` crate executes pipelined queries in parallel on the PostgreSQL server, allowing simultaneous query processing.  \n\n---\n\n### Pair 2: Runtime Compatibility\n\n\u2705 **Factual:** The `tokio-postgres` crate works with arbitrary `AsyncRead + AsyncWrite` streams and can operate without the default `tokio` runtime by disabling the `runtime` feature in `Cargo.toml`.  \n\u274c **Counterfactual:** The `tokio-postgres` crate is strictly dependent on the `tokio` runtime and cannot function without it, even if the `runtime` feature is disabled.  \n\n---\n\n### Pair 3: SSL/TLS Support\n\n\u2705 **Factual:** The `tokio-postgres` crate provides SSL/TLS support through external libraries like `postgres-openssl` and `postgres-native-tls`, while the `NoTls` type can be used for connections without encryption.  \n\u274c **Counterfactual:** The `tokio-postgres` crate has built-in SSL/TLS support without requiring external libraries, making it independent of `openssl` or `native-tls`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}