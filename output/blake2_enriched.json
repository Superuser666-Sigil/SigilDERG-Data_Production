{
    "name": "blake2",
    "version": "0.11.0-rc.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/blake2/latest/blake2/all.html \"show sidebar\")\n# Crate blake2Copy item path\n[Settings](https://docs.rs/blake2/latest/settings.html)\n[Help](https://docs.rs/blake2/latest/help.html)\nSummary[Source](https://docs.rs/blake2/latest/src/blake2/lib.rs.html#1-172)\nExpand description\nAn implementation of the [BLAKE2](https://en.wikipedia.org/wiki/BLAKE_\\(hash_function\\)#BLAKE2) hash functions.\n## [\u00a7](https://docs.rs/blake2/latest/blake2/#usage)Usage\n[`Blake2b512`](https://docs.rs/blake2/latest/blake2/type.Blake2b512.html \"type blake2::Blake2b512\") and [`Blake2s256`](https://docs.rs/blake2/latest/blake2/type.Blake2s256.html \"type blake2::Blake2s256\") can be used in the following way:\n```\nuse blake2::{Blake2b512, Blake2s256, Digest};\nuse hex_literal::hex;\n// create a Blake2b512 object\nlet mut hasher = Blake2b512::new();\n// write input message\nhasher.update(b\"hello world\");\n// read hash digest and consume hasher\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbc\n  c05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0\n\")[..]);\n// same example for Blake2s256:\nlet mut hasher = Blake2s256::new();\nhasher.update(b\"hello world\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes](https://github.com/RustCrypto/hashes) readme.\n### [\u00a7](https://docs.rs/blake2/latest/blake2/#variable-output-size)Variable output size\nThis implementation supports run and compile time variable sizes.\nRun time variable output example:\n```\nuse blake2::Blake2bVar;\nuse blake2::digest::{Update, VariableOutput};\nuse hex_literal::hex;\nlet mut hasher = Blake2bVar::new(10).unwrap();\nhasher.update(b\"my_input\");\nlet mut buf = [0u8; 10];\nhasher.finalize_variable(&mut buf).unwrap();\nassert_eq!(buf, hex!(\"2cc55c84e416924e6400\"));\n```\n\nCompile time variable output example:\n```\nuse blake2::{Blake2b, Digest, digest::consts::U10};\nuse hex_literal::hex;\ntype Blake2b80 = Blake2b<U10>;\nlet mut hasher = Blake2b80::new();\nhasher.update(b\"my_input\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"2cc55c84e416924e6400\")[..]);\n```\n\n## [\u00a7](https://docs.rs/blake2/latest/blake2/#acknowledgment)Acknowledgment\nBased on the [blake2-rfc](https://github.com/cesarb/blake2-rfc) crate.\n## Re-exports[\u00a7](https://docs.rs/blake2/latest/blake2/#reexports)\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs[\u00a7](https://docs.rs/blake2/latest/blake2/#structs)\n\n[Blake2bMac](https://docs.rs/blake2/latest/blake2/struct.Blake2bMac.html \"struct blake2::Blake2bMac\")\n    Blake2b MAC function\n\n[Blake2bVarCore](https://docs.rs/blake2/latest/blake2/struct.Blake2bVarCore.html \"struct blake2::Blake2bVarCore\")\n    Blake2b instance with a variable output.\n\n[Blake2sMac](https://docs.rs/blake2/latest/blake2/struct.Blake2sMac.html \"struct blake2::Blake2sMac\")\n    Blake2s MAC function\n\n[Blake2sVarCore](https://docs.rs/blake2/latest/blake2/struct.Blake2sVarCore.html \"struct blake2::Blake2sVarCore\")\n    Blake2s instance with a variable output.\n## Traits[\u00a7](https://docs.rs/blake2/latest/blake2/#traits)\n\n[Digest](https://docs.rs/blake2/latest/blake2/trait.Digest.html \"trait blake2::Digest\")\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Type Aliases[\u00a7](https://docs.rs/blake2/latest/blake2/#types)\n\n[Blake2b](https://docs.rs/blake2/latest/blake2/type.Blake2b.html \"type blake2::Blake2b\")\n    BLAKE2b generic over output size.\n\n[Blake2b512](https://docs.rs/blake2/latest/blake2/type.Blake2b512.html \"type blake2::Blake2b512\")\n    BLAKE2b-512 hasher state.\n\n[Blake2bCore](https://docs.rs/blake2/latest/blake2/type.Blake2bCore.html \"type blake2::Blake2bCore\")\n    Core hasher state of BLAKE2b generic over output size.\n\n[Blake2bMac512](https://docs.rs/blake2/latest/blake2/type.Blake2bMac512.html \"type blake2::Blake2bMac512\")\n    BLAKE2b-512 MAC state.\n\n[Blake2bVar](https://docs.rs/blake2/latest/blake2/type.Blake2bVar.html \"type blake2::Blake2bVar\")\n    BLAKE2b which allows to choose output size at runtime.\n\n[Blake2s](https://docs.rs/blake2/latest/blake2/type.Blake2s.html \"type blake2::Blake2s\")\n    BLAKE2s generic over output size.\n\n[Blake2s256](https://docs.rs/blake2/latest/blake2/type.Blake2s256.html \"type blake2::Blake2s256\")\n    BLAKE2s-256 hasher state.\n\n[Blake2sCore](https://docs.rs/blake2/latest/blake2/type.Blake2sCore.html \"type blake2::Blake2sCore\")\n    Core hasher state of BLAKE2s generic over output size.\n\n[Blake2sMac256](https://docs.rs/blake2/latest/blake2/type.Blake2sMac256.html \"type blake2::Blake2sMac256\")\n    BLAKE2s-256 MAC state.\n\n[Blake2sVar](https://docs.rs/blake2/latest/blake2/type.Blake2sVar.html \"type blake2::Blake2sVar\")\n    BLAKE2s which allows to choose output size at runtime.\n",
        "markdown_with_citations": "[](https://docs.rs/blake2/latest/blake2/all.html \"show sidebar\")\n# Crate blake2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn implementation of the BLAKE2\u27e84\u27e9#BLAKE2) hash functions.\n## \u00a7\u27e85\u27e9Usage\n`Blake2b512`\u27e86\u27e9 and `Blake2s256`\u27e87\u27e9 can be used in the following way:\n```\nuse blake2::{Blake2b512, Blake2s256, Digest};\nuse hex_literal::hex;\n// create a Blake2b512 object\nlet mut hasher = Blake2b512::new();\n// write input message\nhasher.update(b\"hello world\");\n// read hash digest and consume hasher\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbc\n  c05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0\n\")[..]);\n// same example for Blake2s256:\nlet mut hasher = Blake2s256::new();\nhasher.update(b\"hello world\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b\n\")[..]);\n```\n\nAlso see RustCrypto/hashes\u27e88\u27e9 readme.\n### \u00a7\u27e89\u27e9Variable output size\nThis implementation supports run and compile time variable sizes.\nRun time variable output example:\n```\nuse blake2::Blake2bVar;\nuse blake2::digest::{Update, VariableOutput};\nuse hex_literal::hex;\nlet mut hasher = Blake2bVar::new(10).unwrap();\nhasher.update(b\"my_input\");\nlet mut buf = [0u8; 10];\nhasher.finalize_variable(&mut buf).unwrap();\nassert_eq!(buf, hex!(\"2cc55c84e416924e6400\"));\n```\n\nCompile time variable output example:\n```\nuse blake2::{Blake2b, Digest, digest::consts::U10};\nuse hex_literal::hex;\ntype Blake2b80 = Blake2b<U10>;\nlet mut hasher = Blake2b80::new();\nhasher.update(b\"my_input\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"2cc55c84e416924e6400\")[..]);\n```\n\n## \u00a7\u27e810\u27e9Acknowledgment\nBased on the blake2-rfc\u27e811\u27e9 crate.\n## Re-exports\u00a7\u27e812\u27e9\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs\u00a7\u27e813\u27e9\n\nBlake2bMac\u27e814\u27e9\n    Blake2b MAC function\n\nBlake2bVarCore\u27e815\u27e9\n    Blake2b instance with a variable output.\n\nBlake2sMac\u27e816\u27e9\n    Blake2s MAC function\n\nBlake2sVarCore\u27e817\u27e9\n    Blake2s instance with a variable output.\n## Traits\u00a7\u27e818\u27e9\n\nDigest\u27e819\u27e9\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Type Aliases\u00a7\u27e820\u27e9\n\nBlake2b\u27e821\u27e9\n    BLAKE2b generic over output size.\n\nBlake2b512\u27e86\u27e9\n    BLAKE2b-512 hasher state.\n\nBlake2bCore\u27e822\u27e9\n    Core hasher state of BLAKE2b generic over output size.\n\nBlake2bMac512\u27e823\u27e9\n    BLAKE2b-512 MAC state.\n\nBlake2bVar\u27e824\u27e9\n    BLAKE2b which allows to choose output size at runtime.\n\nBlake2s\u27e825\u27e9\n    BLAKE2s generic over output size.\n\nBlake2s256\u27e87\u27e9\n    BLAKE2s-256 hasher state.\n\nBlake2sCore\u27e826\u27e9\n    Core hasher state of BLAKE2s generic over output size.\n\nBlake2sMac256\u27e827\u27e9\n    BLAKE2s-256 MAC state.\n\nBlake2sVar\u27e828\u27e9\n    BLAKE2s which allows to choose output size at runtime.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/blake2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/blake2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/blake2/latest/src/blake2/lib.rs.html#1-172: Source\n\u27e84\u27e9 https://en.wikipedia.org/wiki/BLAKE_\\(hash_function\\: BLAKE2\n\u27e85\u27e9 https://docs.rs/blake2/latest/blake2/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2b512.html: type blake2::Blake2b512 - `Blake2b512`\n\u27e87\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2s256.html: type blake2::Blake2s256 - `Blake2s256`\n\u27e88\u27e9 https://github.com/RustCrypto/hashes: RustCrypto/hashes\n\u27e89\u27e9 https://docs.rs/blake2/latest/blake2/#variable-output-size: \u00a7\n\u27e810\u27e9 https://docs.rs/blake2/latest/blake2/#acknowledgment: \u00a7\n\u27e811\u27e9 https://github.com/cesarb/blake2-rfc: blake2-rfc\n\u27e812\u27e9 https://docs.rs/blake2/latest/blake2/#reexports: \u00a7\n\u27e813\u27e9 https://docs.rs/blake2/latest/blake2/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2bMac.html: struct blake2::Blake2bMac - Blake2bMac\n\u27e815\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2bVarCore.html: struct blake2::Blake2bVarCore - Blake2bVarCore\n\u27e816\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2sMac.html: struct blake2::Blake2sMac - Blake2sMac\n\u27e817\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2sVarCore.html: struct blake2::Blake2sVarCore - Blake2sVarCore\n\u27e818\u27e9 https://docs.rs/blake2/latest/blake2/#traits: \u00a7\n\u27e819\u27e9 https://docs.rs/blake2/latest/blake2/trait.Digest.html: trait blake2::Digest - Digest\n\u27e820\u27e9 https://docs.rs/blake2/latest/blake2/#types: \u00a7\n\u27e821\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2b.html: type blake2::Blake2b - Blake2b\n\u27e822\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bCore.html: type blake2::Blake2bCore - Blake2bCore\n\u27e823\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bMac512.html: type blake2::Blake2bMac512 - Blake2bMac512\n\u27e824\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bVar.html: type blake2::Blake2bVar - Blake2bVar\n\u27e825\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2s.html: type blake2::Blake2s - Blake2s\n\u27e826\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sCore.html: type blake2::Blake2sCore - Blake2sCore\n\u27e827\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sMac256.html: type blake2::Blake2sMac256 - Blake2sMac256\n\u27e828\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sVar.html: type blake2::Blake2sVar - Blake2sVar\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `blake2` crate provides an implementation of the BLAKE2 cryptographic hash functions, including BLAKE2b and BLAKE2s, with support for fixed and variable output sizes at both compile-time and runtime. It offers convenient traits and types for hashing, message authentication (MAC), and customizable output sizes, making it suitable for secure and efficient hashing needs. The crate is based on the `blake2-rfc` and integrates with the RustCrypto ecosystem.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Hashing Algorithms Supported  \n\u2705 Factual: The `blake2` crate provides implementations for both BLAKE2b and BLAKE2s hash functions, including fixed output sizes like 512 bits for BLAKE2b and 256 bits for BLAKE2s.  \n\u274c Counterfactual: The `blake2` crate supports additional hash functions like SHA-256 and SHA-3 alongside BLAKE2b and BLAKE2s.  \n\n---\n\n### Pair 2: Variable Output Size  \n\u2705 Factual: The `blake2` crate supports variable output sizes at both runtime (via `Blake2bVar` and `Blake2sVar`) and compile time (via generics like `Blake2b<U10>`).  \n\u274c Counterfactual: The `blake2` crate only supports fixed output sizes and does not allow customization of hash output length.  \n\n---\n\n### Pair 3: Performance and Optimization  \n\u2705 Factual: The `blake2` crate is optimized for high performance and is commonly used in cryptographic applications due to its speed and efficiency compared to older hash functions like SHA-1.  \n\u274c Counterfactual: The `blake2` crate is slower than traditional hash functions like MD5 and SHA-1, making it unsuitable for performance-critical applications.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}