{
    "name": "zmq",
    "version": "0.10.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/zmq/latest/zmq/all.html \"show sidebar\")\n# Crate zmqCopy item path\n[Settings](https://docs.rs/zmq/latest/settings.html)\n[Help](https://docs.rs/zmq/latest/help.html)\nSummary[Source](https://docs.rs/zmq/latest/src/zmq/lib.rs.html#1-1350)\nExpand description\nModule: zmq\n## Re-exports[\u00a7](https://docs.rs/zmq/latest/zmq/#reexports)\n\n`pub use crate::SocketType[](https://docs.rs/zmq/latest/zmq/enum.SocketType.html \"enum zmq::SocketType\")::*;`\n\n## Structs[\u00a7](https://docs.rs/zmq/latest/zmq/#structs)\n\n[Context](https://docs.rs/zmq/latest/zmq/struct.Context.html \"struct zmq::Context\")\n    Handle for a 0MQ context, used to create sockets.\n\n[CurveKeyPair](https://docs.rs/zmq/latest/zmq/struct.CurveKeyPair.html \"struct zmq::CurveKeyPair\")\n    A CURVE key pair generated by 0MQ.\n\n[Message](https://docs.rs/zmq/latest/zmq/struct.Message.html \"struct zmq::Message\")\n    Holds a 0MQ message.\n\n[PollEvents](https://docs.rs/zmq/latest/zmq/struct.PollEvents.html \"struct zmq::PollEvents\")\n    Type representing pending socket events.\n\n[PollItem](https://docs.rs/zmq/latest/zmq/struct.PollItem.html \"struct zmq::PollItem\")\n    Represents a handle that can be `poll()`ed.\n\n[Socket](https://docs.rs/zmq/latest/zmq/struct.Socket.html \"struct zmq::Socket\")\n    A socket, the central object in 0MQ.\n## Enums[\u00a7](https://docs.rs/zmq/latest/zmq/#enums)\n\n[DecodeError](https://docs.rs/zmq/latest/zmq/enum.DecodeError.html \"enum zmq::DecodeError\")\n    Errors that can occur while decoding Z85.\n\n[EncodeError](https://docs.rs/zmq/latest/zmq/enum.EncodeError.html \"enum zmq::EncodeError\")\n    Errors that can occur while encoding Z85.\n\n[Error](https://docs.rs/zmq/latest/zmq/enum.Error.html \"enum zmq::Error\")\n    An error returned by a 0MQ API function.\n\n[Mechanism](https://docs.rs/zmq/latest/zmq/enum.Mechanism.html \"enum zmq::Mechanism\")\n    Security Mechanism\n\n[SocketEvent](https://docs.rs/zmq/latest/zmq/enum.SocketEvent.html \"enum zmq::SocketEvent\")\n    Socket Events\n\n[SocketType](https://docs.rs/zmq/latest/zmq/enum.SocketType.html \"enum zmq::SocketType\")\n    Socket types\n## Constants[\u00a7](https://docs.rs/zmq/latest/zmq/#constants)\n\n[POLLERR](https://docs.rs/zmq/latest/zmq/constant.POLLERR.html \"constant zmq::POLLERR\")\n    For `poll()`, specifies to signal when an error condition is present on a socket. This only applies to non-0MQ sockets.\n\n[POLLIN](https://docs.rs/zmq/latest/zmq/constant.POLLIN.html \"constant zmq::POLLIN\")\n    For `poll()`, specifies to signal when a message/some data can be read from a socket.\n\n[POLLOUT](https://docs.rs/zmq/latest/zmq/constant.POLLOUT.html \"constant zmq::POLLOUT\")\n    For `poll()`, specifies to signal when a message/some data can be written to a socket.\n## Statics[\u00a7](https://docs.rs/zmq/latest/zmq/#statics)\n\n[DONTWAIT](https://docs.rs/zmq/latest/zmq/static.DONTWAIT.html \"static zmq::DONTWAIT\")\n    Flag for socket `send` methods that specifies non-blocking mode.\n\n[SNDMORE](https://docs.rs/zmq/latest/zmq/static.SNDMORE.html \"static zmq::SNDMORE\")\n    Flag for socket `send` methods that specifies that more frames of a multipart message will follow.\n## Traits[\u00a7](https://docs.rs/zmq/latest/zmq/#traits)\n\n[Sendable](https://docs.rs/zmq/latest/zmq/trait.Sendable.html \"trait zmq::Sendable\")\n    Sendable over a `Socket`.\n## Functions[\u00a7](https://docs.rs/zmq/latest/zmq/#functions)\n\n[has](https://docs.rs/zmq/latest/zmq/fn.has.html \"fn zmq::has\")\n    Return true if the used 0MQ library has the given capability.\n\n[poll](https://docs.rs/zmq/latest/zmq/fn.poll.html \"fn zmq::poll\")\n    Poll for events on multiple sockets.\n\n[proxy](https://docs.rs/zmq/latest/zmq/fn.proxy.html \"fn zmq::proxy\")\n    Start a 0MQ proxy in the current thread.\n\n[proxy_steerable](https://docs.rs/zmq/latest/zmq/fn.proxy_steerable.html \"fn zmq::proxy_steerable\")\n    Start a 0MQ proxy in the current thread, with a control socket.\n\n[proxy_steerable_with_capture](https://docs.rs/zmq/latest/zmq/fn.proxy_steerable_with_capture.html \"fn zmq::proxy_steerable_with_capture\")\n    Start a 0MQ proxy in the current thread, with capture and control sockets.\n\n[proxy_with_capture](https://docs.rs/zmq/latest/zmq/fn.proxy_with_capture.html \"fn zmq::proxy_with_capture\")\n    Start a 0MQ proxy in the current thread, with a capture socket.\n\n[version](https://docs.rs/zmq/latest/zmq/fn.version.html \"fn zmq::version\")\n    Return the current zeromq version, as `(major, minor, patch)`.\n\n[z85_decode](https://docs.rs/zmq/latest/zmq/fn.z85_decode.html \"fn zmq::z85_decode\")\n    Decode a binary key from Z85-encoded text.\n\n[z85_encode](https://docs.rs/zmq/latest/zmq/fn.z85_encode.html \"fn zmq::z85_encode\")\n    Encode a binary key as Z85 printable text.\n## Type Aliases[\u00a7](https://docs.rs/zmq/latest/zmq/#types)\n\n[Result](https://docs.rs/zmq/latest/zmq/type.Result.html \"type zmq::Result\")\n    `zmq`-specific Result type.\n",
        "markdown_with_citations": "[](https://docs.rs/zmq/latest/zmq/all.html \"show sidebar\")\n# Crate zmqCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nModule: zmq\n## Re-exports\u00a7\u27e84\u27e9\n\n`pub use crate::SocketType[](https://docs.rs/zmq/latest/zmq/enum.SocketType.html \"enum zmq::SocketType\")::*;`\n\n## Structs\u00a7\u27e85\u27e9\n\nContext\u27e86\u27e9\n    Handle for a 0MQ context, used to create sockets.\n\nCurveKeyPair\u27e87\u27e9\n    A CURVE key pair generated by 0MQ.\n\nMessage\u27e88\u27e9\n    Holds a 0MQ message.\n\nPollEvents\u27e89\u27e9\n    Type representing pending socket events.\n\nPollItem\u27e810\u27e9\n    Represents a handle that can be `poll()`ed.\n\nSocket\u27e811\u27e9\n    A socket, the central object in 0MQ.\n## Enums\u00a7\u27e812\u27e9\n\nDecodeError\u27e813\u27e9\n    Errors that can occur while decoding Z85.\n\nEncodeError\u27e814\u27e9\n    Errors that can occur while encoding Z85.\n\nError\u27e815\u27e9\n    An error returned by a 0MQ API function.\n\nMechanism\u27e816\u27e9\n    Security Mechanism\n\nSocketEvent\u27e817\u27e9\n    Socket Events\n\nSocketType\u27e818\u27e9\n    Socket types\n## Constants\u00a7\u27e819\u27e9\n\nPOLLERR\u27e820\u27e9\n    For `poll()`, specifies to signal when an error condition is present on a socket. This only applies to non-0MQ sockets.\n\nPOLLIN\u27e821\u27e9\n    For `poll()`, specifies to signal when a message/some data can be read from a socket.\n\nPOLLOUT\u27e822\u27e9\n    For `poll()`, specifies to signal when a message/some data can be written to a socket.\n## Statics\u00a7\u27e823\u27e9\n\nDONTWAIT\u27e824\u27e9\n    Flag for socket `send` methods that specifies non-blocking mode.\n\nSNDMORE\u27e825\u27e9\n    Flag for socket `send` methods that specifies that more frames of a multipart message will follow.\n## Traits\u00a7\u27e826\u27e9\n\nSendable\u27e827\u27e9\n    Sendable over a `Socket`.\n## Functions\u00a7\u27e828\u27e9\n\nhas\u27e829\u27e9\n    Return true if the used 0MQ library has the given capability.\n\npoll\u27e830\u27e9\n    Poll for events on multiple sockets.\n\nproxy\u27e831\u27e9\n    Start a 0MQ proxy in the current thread.\n\nproxy_steerable\u27e832\u27e9\n    Start a 0MQ proxy in the current thread, with a control socket.\n\nproxy_steerable_with_capture\u27e833\u27e9\n    Start a 0MQ proxy in the current thread, with capture and control sockets.\n\nproxy_with_capture\u27e834\u27e9\n    Start a 0MQ proxy in the current thread, with a capture socket.\n\nversion\u27e835\u27e9\n    Return the current zeromq version, as `(major, minor, patch)`.\n\nz85_decode\u27e836\u27e9\n    Decode a binary key from Z85-encoded text.\n\nz85_encode\u27e837\u27e9\n    Encode a binary key as Z85 printable text.\n## Type Aliases\u00a7\u27e838\u27e9\n\nResult\u27e839\u27e9\n    `zmq`-specific Result type.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/zmq/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/zmq/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/zmq/latest/src/zmq/lib.rs.html#1-1350: Source\n\u27e84\u27e9 https://docs.rs/zmq/latest/zmq/#reexports: \u00a7\n\u27e85\u27e9 https://docs.rs/zmq/latest/zmq/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/zmq/latest/zmq/struct.Context.html: struct zmq::Context - Context\n\u27e87\u27e9 https://docs.rs/zmq/latest/zmq/struct.CurveKeyPair.html: struct zmq::CurveKeyPair - CurveKeyPair\n\u27e88\u27e9 https://docs.rs/zmq/latest/zmq/struct.Message.html: struct zmq::Message - Message\n\u27e89\u27e9 https://docs.rs/zmq/latest/zmq/struct.PollEvents.html: struct zmq::PollEvents - PollEvents\n\u27e810\u27e9 https://docs.rs/zmq/latest/zmq/struct.PollItem.html: struct zmq::PollItem - PollItem\n\u27e811\u27e9 https://docs.rs/zmq/latest/zmq/struct.Socket.html: struct zmq::Socket - Socket\n\u27e812\u27e9 https://docs.rs/zmq/latest/zmq/#enums: \u00a7\n\u27e813\u27e9 https://docs.rs/zmq/latest/zmq/enum.DecodeError.html: enum zmq::DecodeError - DecodeError\n\u27e814\u27e9 https://docs.rs/zmq/latest/zmq/enum.EncodeError.html: enum zmq::EncodeError - EncodeError\n\u27e815\u27e9 https://docs.rs/zmq/latest/zmq/enum.Error.html: enum zmq::Error - Error\n\u27e816\u27e9 https://docs.rs/zmq/latest/zmq/enum.Mechanism.html: enum zmq::Mechanism - Mechanism\n\u27e817\u27e9 https://docs.rs/zmq/latest/zmq/enum.SocketEvent.html: enum zmq::SocketEvent - SocketEvent\n\u27e818\u27e9 https://docs.rs/zmq/latest/zmq/enum.SocketType.html: enum zmq::SocketType - SocketType\n\u27e819\u27e9 https://docs.rs/zmq/latest/zmq/#constants: \u00a7\n\u27e820\u27e9 https://docs.rs/zmq/latest/zmq/constant.POLLERR.html: constant zmq::POLLERR - POLLERR\n\u27e821\u27e9 https://docs.rs/zmq/latest/zmq/constant.POLLIN.html: constant zmq::POLLIN - POLLIN\n\u27e822\u27e9 https://docs.rs/zmq/latest/zmq/constant.POLLOUT.html: constant zmq::POLLOUT - POLLOUT\n\u27e823\u27e9 https://docs.rs/zmq/latest/zmq/#statics: \u00a7\n\u27e824\u27e9 https://docs.rs/zmq/latest/zmq/static.DONTWAIT.html: static zmq::DONTWAIT - DONTWAIT\n\u27e825\u27e9 https://docs.rs/zmq/latest/zmq/static.SNDMORE.html: static zmq::SNDMORE - SNDMORE\n\u27e826\u27e9 https://docs.rs/zmq/latest/zmq/#traits: \u00a7\n\u27e827\u27e9 https://docs.rs/zmq/latest/zmq/trait.Sendable.html: trait zmq::Sendable - Sendable\n\u27e828\u27e9 https://docs.rs/zmq/latest/zmq/#functions: \u00a7\n\u27e829\u27e9 https://docs.rs/zmq/latest/zmq/fn.has.html: fn zmq::has - has\n\u27e830\u27e9 https://docs.rs/zmq/latest/zmq/fn.poll.html: fn zmq::poll - poll\n\u27e831\u27e9 https://docs.rs/zmq/latest/zmq/fn.proxy.html: fn zmq::proxy - proxy\n\u27e832\u27e9 https://docs.rs/zmq/latest/zmq/fn.proxy_steerable.html: fn zmq::proxy_steerable - proxy_steerable\n\u27e833\u27e9 https://docs.rs/zmq/latest/zmq/fn.proxy_steerable_with_capture.html: fn zmq::proxy_steerable_with_capture - proxy_steerable_with_capture\n\u27e834\u27e9 https://docs.rs/zmq/latest/zmq/fn.proxy_with_capture.html: fn zmq::proxy_with_capture - proxy_with_capture\n\u27e835\u27e9 https://docs.rs/zmq/latest/zmq/fn.version.html: fn zmq::version - version\n\u27e836\u27e9 https://docs.rs/zmq/latest/zmq/fn.z85_decode.html: fn zmq::z85_decode - z85_decode\n\u27e837\u27e9 https://docs.rs/zmq/latest/zmq/fn.z85_encode.html: fn zmq::z85_encode - z85_encode\n\u27e838\u27e9 https://docs.rs/zmq/latest/zmq/#types: \u00a7\n\u27e839\u27e9 https://docs.rs/zmq/latest/zmq/type.Result.html: type zmq::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `zmq` crate provides Rust bindings for ZeroMQ, enabling high-performance messaging and socket-based communication. It offers core abstractions like `Context`, `Socket`, and `Message` for creating and managing sockets, along with support for polling, proxies, and CURVE security mechanisms. Additional features include Z85 encoding/decoding, event handling, and utilities for non-blocking operations.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: Context Management  \n\u2705 **Factual:** The `zmq::Context` struct in the crate is used as a handle for creating and managing ZeroMQ sockets, ensuring thread safety and resource management.  \n\u274c **Counterfactual:** The `zmq::Context` struct is required for sending and receiving messages directly, bypassing the need for sockets.  \n\n---\n\n### Pair 2: Polling for Events  \n\u2705 **Factual:** The `zmq::poll` function allows users to monitor multiple sockets simultaneously for events like incoming messages or errors.  \n\u274c **Counterfactual:** The `zmq::poll` function automatically handles message delivery and routing between sockets without user intervention.  \n\n---\n\n### Pair 3: Z85 Encoding and Decoding  \n\u2705 **Factual:** The crate provides `z85_encode` and `z85_decode` functions for encoding binary keys into Z85 text format and decoding them back into binary.  \n\u274c **Counterfactual:** The `z85_encode` and `z85_decode` functions are used for encrypting and decrypting messages sent through ZeroMQ sockets.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}