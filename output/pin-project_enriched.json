{
    "name": "pin-project",
    "version": "1.1.10",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/pin-project/latest/pin_project/all.html \"show sidebar\")\n# Crate pin_projectCopy item path\n[Settings](https://docs.rs/pin-project/latest/settings.html)\n[Help](https://docs.rs/pin-project/latest/help.html)\nSummary[Source](https://docs.rs/pin-project/latest/src/pin_project/lib.rs.html#3-350)\nExpand description\nA crate for safe and ergonomic [pin-projection](https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning).\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project = \"1\"\n```\n\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#examples)Examples\n[`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute creates projection types covering all the fields of struct or enum.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project]\nstruct Struct<T, U> {\n  #[pin]\n  pinned: T,\n  unpinned: U,\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\n[_code like this will be generated_](https://github.com/taiki-e/pin-project/blob/HEAD/examples/struct-default-expanded.rs)\nTo use `#[pin_project]` on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project(project = EnumProj)]\nenum Enum<T, U> {\n  Pinned(#[pin] T),\n  Unpinned(U),\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Pinned(x) => {\n        let _: Pin<&mut T> = x;\n      }\n      EnumProj::Unpinned(y) => {\n        let _: &mut U = y;\n      }\n    }\n  }\n}\n```\n\n[_code like this will be generated_](https://github.com/taiki-e/pin-project/blob/HEAD/examples/enum-default-expanded.rs)\nSee [`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute for more details, and see [examples](https://github.com/taiki-e/pin-project/blob/HEAD/examples/README.md) directory for more examples and generated code.\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#related-projects)Related Projects\n  * [pin-project-lite](https://github.com/taiki-e/pin-project-lite): A lightweight version of pin-project written with declarative macros.\n\n\n## Traits[\u00a7](https://docs.rs/pin-project/latest/pin_project/#traits)\n\n[UnsafeUnpin](https://docs.rs/pin-project/latest/pin_project/trait.UnsafeUnpin.html \"trait pin_project::UnsafeUnpin\")\n    A trait used for custom implementations of [`Unpin`](https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html \"trait core::marker::Unpin\").\n## Attribute Macros[\u00a7](https://docs.rs/pin-project/latest/pin_project/#attributes)\n\n[pin_project](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\")\n    An attribute that creates projection types covering all the fields of struct or enum.\n\n[pinned_drop](https://docs.rs/pin-project/latest/pin_project/attr.pinned_drop.html \"attr pin_project::pinned_drop\")\n    An attribute used for custom implementations of [`Drop`].\n",
        "markdown_with_citations": "[](https://docs.rs/pin-project/latest/pin_project/all.html \"show sidebar\")\n# Crate pin_projectCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA crate for safe and ergonomic pin-projection\u27e84\u27e9.\n### \u00a7\u27e85\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project = \"1\"\n```\n\n### \u00a7\u27e86\u27e9Examples\n[`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute creates projection types covering all the fields of struct or enum.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project]\nstruct Struct<T, U> {\n  #[pin]\n  pinned: T,\n  unpinned: U,\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\n_code like this will be generated_\u27e87\u27e9\nTo use `#[pin_project]` on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project(project = EnumProj)]\nenum Enum<T, U> {\n  Pinned(#[pin] T),\n  Unpinned(U),\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Pinned(x) => {\n        let _: Pin<&mut T> = x;\n      }\n      EnumProj::Unpinned(y) => {\n        let _: &mut U = y;\n      }\n    }\n  }\n}\n```\n\n_code like this will be generated_\u27e88\u27e9\nSee [`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute for more details, and see examples\u27e89\u27e9 directory for more examples and generated code.\n### \u00a7\u27e810\u27e9Related Projects\n  * pin-project-lite\u27e811\u27e9: A lightweight version of pin-project written with declarative macros.\n\n\n## Traits\u00a7\u27e812\u27e9\n\nUnsafeUnpin\u27e813\u27e9\n    A trait used for custom implementations of `Unpin`\u27e814\u27e9.\n## Attribute Macros\u00a7\u27e815\u27e9\n\npin_project\u27e816\u27e9\n    An attribute that creates projection types covering all the fields of struct or enum.\n\npinned_drop\u27e817\u27e9\n    An attribute used for custom implementations of [`Drop`].\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pin-project/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pin-project/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pin-project/latest/src/pin_project/lib.rs.html#3-350: Source\n\u27e84\u27e9 https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning: pin-projection\n\u27e85\u27e9 https://docs.rs/pin-project/latest/pin_project/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/pin-project/latest/pin_project/#examples: \u00a7\n\u27e87\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/struct-default-expanded.rs: _code like this will be generated_\n\u27e88\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/enum-default-expanded.rs: _code like this will be generated_\n\u27e89\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/README.md: examples\n\u27e810\u27e9 https://docs.rs/pin-project/latest/pin_project/#related-projects: \u00a7\n\u27e811\u27e9 https://github.com/taiki-e/pin-project-lite: pin-project-lite\n\u27e812\u27e9 https://docs.rs/pin-project/latest/pin_project/#traits: \u00a7\n\u27e813\u27e9 https://docs.rs/pin-project/latest/pin_project/trait.UnsafeUnpin.html: trait pin_project::UnsafeUnpin - UnsafeUnpin\n\u27e814\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html: trait core::marker::Unpin - `Unpin`\n\u27e815\u27e9 https://docs.rs/pin-project/latest/pin_project/#attributes: \u00a7\n\u27e816\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html: attr pin_project::pin_project - pin_project\n\u27e817\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pinned_drop.html: attr pin_project::pinned_drop - pinned_drop\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `pin-project` crate provides safe and ergonomic pin-projection capabilities for Rust, enabling structural pinning of fields in structs and enums. Its core feature is the `#[pin_project]` attribute, which automatically generates projection types to access pinned and unpinned fields. It also supports custom implementations of `Drop` via the `#[pinned_drop]` attribute and `Unpin` via the `UnsafeUnpin` trait.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Pinning and Projection\n\u2705 Factual: The `#[pin_project]` attribute in the `pin-project` crate generates projection types that allow safe access to pinned and unpinned fields of structs or enums, ensuring structural pinning is maintained.  \n\u274c Counterfactual: The `#[pin_project]` attribute automatically unpins all fields of a struct or enum, making manual pinning unnecessary.  \n\n---\n\n### Pair 2: Enum Projection\n\u2705 Factual: When using `#[pin_project]` on enums, the user must explicitly name the projection type returned by the `project()` method, such as `EnumProj`.  \n\u274c Counterfactual: The `#[pin_project]` attribute automatically generates projection type names for enums without requiring user input.  \n\n---\n\n### Pair 3: Related Projects\n\u2705 Factual: The `pin-project-lite` crate is a lightweight alternative to `pin-project`, offering similar functionality but implemented using declarative macros.  \n\u274c Counterfactual: The `pin-project-lite` crate is a successor to `pin-project` and completely replaces its functionality with no trade-offs.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}