{
    "name": "futures-test",
    "version": "0.3.31",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/futures-test/latest/futures_test/all.html \"show sidebar\")\n# Crate futures_testCopy item path\n[Settings](https://docs.rs/futures-test/latest/settings.html)\n[Help](https://docs.rs/futures-test/latest/help.html)\nSummary[Source](https://docs.rs/futures-test/latest/src/futures_test/lib.rs.html#1-81)\nExpand description\nUtilities to make testing [`Future`s](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\") easier\n## Modules[\u00a7](https://docs.rs/futures-test/latest/futures_test/#modules)\n\n[future](https://docs.rs/futures-test/latest/futures_test/future/index.html \"mod futures_test::future\")\n    Additional combinators for testing futures.\n\n[io](https://docs.rs/futures-test/latest/futures_test/io/index.html \"mod futures_test::io\")\n    Additional combinators for testing async IO.\n\n[sink](https://docs.rs/futures-test/latest/futures_test/sink/index.html \"mod futures_test::sink\")\n    Additional combinators for testing sinks.\n\n[stream](https://docs.rs/futures-test/latest/futures_test/stream/index.html \"mod futures_test::stream\")\n    Additional combinators for testing streams.\n\n[task](https://docs.rs/futures-test/latest/futures_test/task/index.html \"mod futures_test::task\")\n    Task related testing utilities.\n## Macros[\u00a7](https://docs.rs/futures-test/latest/futures_test/#macros)\n\n[assert_stream_done](https://docs.rs/futures-test/latest/futures_test/macro.assert_stream_done.html \"macro futures_test::assert_stream_done\")\n    Assert that the next poll to the provided stream will return an empty [`Poll::Ready`](https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html#variant.Ready \"variant core::task::poll::Poll::Ready\") signalling the completion of the stream.\n\n[assert_stream_next](https://docs.rs/futures-test/latest/futures_test/macro.assert_stream_next.html \"macro futures_test::assert_stream_next\")\n    Assert that the next poll to the provided stream will return [`Poll::Ready`](https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html#variant.Ready \"variant core::task::poll::Poll::Ready\") with the provided item.\n\n[assert_stream_pending](https://docs.rs/futures-test/latest/futures_test/macro.assert_stream_pending.html \"macro futures_test::assert_stream_pending\")\n    Assert that the next poll to the provided stream will return [`Poll::Pending`](https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html#variant.Pending \"variant core::task::poll::Poll::Pending\").\n## Attribute Macros[\u00a7](https://docs.rs/futures-test/latest/futures_test/#attributes)\n\n[test](https://docs.rs/futures-test/latest/futures_test/attr.test.html \"attr futures_test::test\")\n    Enables an `async` test function. The generated future will be run to completion with [`futures_executor::block_on`](https://docs.rs/futures-executor/0.3.31/x86_64-unknown-linux-gnu/futures_executor/local_pool/fn.block_on.html \"fn futures_executor::local_pool::block_on\").\n",
        "markdown_with_citations": "[](https://docs.rs/futures-test/latest/futures_test/all.html \"show sidebar\")\n# Crate futures_testCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nUtilities to make testing `Future`s\u27e84\u27e9 easier\n## Modules\u00a7\u27e85\u27e9\n\nfuture\u27e86\u27e9\n    Additional combinators for testing futures.\n\nio\u27e87\u27e9\n    Additional combinators for testing async IO.\n\nsink\u27e88\u27e9\n    Additional combinators for testing sinks.\n\nstream\u27e89\u27e9\n    Additional combinators for testing streams.\n\ntask\u27e810\u27e9\n    Task related testing utilities.\n## Macros\u00a7\u27e811\u27e9\n\nassert_stream_done\u27e812\u27e9\n    Assert that the next poll to the provided stream will return an empty `Poll::Ready`\u27e813\u27e9 signalling the completion of the stream.\n\nassert_stream_next\u27e814\u27e9\n    Assert that the next poll to the provided stream will return `Poll::Ready`\u27e813\u27e9 with the provided item.\n\nassert_stream_pending\u27e815\u27e9\n    Assert that the next poll to the provided stream will return `Poll::Pending`\u27e816\u27e9.\n## Attribute Macros\u00a7\u27e817\u27e9\n\ntest\u27e818\u27e9\n    Enables an `async` test function. The generated future will be run to completion with `futures_executor::block_on`\u27e819\u27e9.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-test/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-test/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-test/latest/src/futures_test/lib.rs.html#1-81: Source\n\u27e84\u27e9 https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html: trait core::future::future::Future - `Future`s\n\u27e85\u27e9 https://docs.rs/futures-test/latest/futures_test/#modules: \u00a7\n\u27e86\u27e9 https://docs.rs/futures-test/latest/futures_test/future/index.html: mod futures_test::future - future\n\u27e87\u27e9 https://docs.rs/futures-test/latest/futures_test/io/index.html: mod futures_test::io - io\n\u27e88\u27e9 https://docs.rs/futures-test/latest/futures_test/sink/index.html: mod futures_test::sink - sink\n\u27e89\u27e9 https://docs.rs/futures-test/latest/futures_test/stream/index.html: mod futures_test::stream - stream\n\u27e810\u27e9 https://docs.rs/futures-test/latest/futures_test/task/index.html: mod futures_test::task - task\n\u27e811\u27e9 https://docs.rs/futures-test/latest/futures_test/#macros: \u00a7\n\u27e812\u27e9 https://docs.rs/futures-test/latest/futures_test/macro.assert_stream_done.html: macro futures_test::assert_stream_done - assert_stream_done\n\u27e813\u27e9 https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html#variant.Ready: variant core::task::poll::Poll::Ready - `Poll::Ready`\n\u27e814\u27e9 https://docs.rs/futures-test/latest/futures_test/macro.assert_stream_next.html: macro futures_test::assert_stream_next - assert_stream_next\n\u27e815\u27e9 https://docs.rs/futures-test/latest/futures_test/macro.assert_stream_pending.html: macro futures_test::assert_stream_pending - assert_stream_pending\n\u27e816\u27e9 https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html#variant.Pending: variant core::task::poll::Poll::Pending - `Poll::Pending`\n\u27e817\u27e9 https://docs.rs/futures-test/latest/futures_test/#attributes: \u00a7\n\u27e818\u27e9 https://docs.rs/futures-test/latest/futures_test/attr.test.html: attr futures_test::test - test\n\u27e819\u27e9 https://docs.rs/futures-executor/0.3.31/x86_64-unknown-linux-gnu/futures_executor/local_pool/fn.block_on.html: fn futures_executor::local_pool::block_on - `futures_executor::block_on`\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `futures-test` crate provides utilities for testing asynchronous Rust code, including futures, streams, sinks, and async I/O. It offers modules with combinators for testing these abstractions, macros like `assert_stream_done`, `assert_stream_next`, and `assert_stream_pending` for stream assertions, and an attribute macro `#[test]` for writing `async` test functions that run to completion using `futures_executor::block_on`. This simplifies and enhances the testing of async behavior in Rust applications.",
    "feature_summary": null,
    "use_case": "DevTools",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Testing utilities for `Future`s  \n\u2705 **Factual:** The `futures-test` crate provides utilities to simplify testing `Future`s, including combinators and macros for asserting the behavior of asynchronous tasks.  \n\u274c **Counterfactual:** The `futures-test` crate is designed to optimize the runtime performance of `Future`s in production environments, rather than focusing on testing.  \n\n---\n\n### Pair 2: Stream testing macros  \n\u2705 **Factual:** The crate includes macros such as `assert_stream_done`, `assert_stream_next`, and `assert_stream_pending`, which help verify the state of a stream during testing by asserting specific `Poll` results.  \n\u274c **Counterfactual:** The macros in `futures-test` are designed to modify the behavior of streams during runtime, allowing developers to dynamically change the stream's polling logic.  \n\n---\n\n### Pair 3: Async test attribute  \n\u2705 **Factual:** The `#[test]` attribute macro provided by `futures-test` allows developers to write `async` test functions that are executed to completion using `futures_executor::block_on`.  \n\u274c **Counterfactual:** The `#[test]` attribute macro in `futures-test` automatically parallelizes all `async` test functions to improve test suite execution speed.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}