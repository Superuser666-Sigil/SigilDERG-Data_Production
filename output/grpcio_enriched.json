{
    "name": "grpcio",
    "version": "0.13.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "###  [45 releases](https://lib.rs/crates/grpcio/versions)\n0.13.0 |  Aug 25, 2023   \n---|---  \n0.12.1 |  Feb 14, 2023   \n0.12.0 |  Nov 4, 2022   \n0.10.3 |  Jun 28, 2022   \n0.1.0 |  Jul 27, 2017   \n#**1297** in [Network programming](https://lib.rs/network-programming \"Crates dealing with higher-level network protocols such as FTP, HTTP, or SSH, or lower-level network protocols such as TCP or UDP.\")\nDownload history 2243/week @ 2024-12-14 1172/week @ 2024-12-21 895/week @ 2024-12-28 1780/week @ 2025-01-04 2069/week @ 2025-01-11 2223/week @ 2025-01-18 1674/week @ 2025-01-25 1876/week @ 2025-02-01 1890/week @ 2025-02-08 1636/week @ 2025-02-15 2242/week @ 2025-02-22 1703/week @ 2025-03-01 2479/week @ 2025-03-08 2360/week @ 2025-03-15 2643/week @ 2025-03-22 1383/week @ 2025-03-29\n**9,190** downloads per month Used in [**62** crates (45 directly)](https://lib.rs/crates/grpcio/rev)\n**Apache-2.0**\n**27MB** **535K** SLoC\nC++ 323K SLoC // 0.1% comments  C 81K SLoC // 0.1% comments  Python 41K SLoC // 0.2% comments  Bazel 30K SLoC // 0.1% comments  Go 19K SLoC // 0.1% comments  M4 10K SLoC // 0.2% comments  Rust 10K SLoC // 0.0% comments  Shell 7.5K SLoC // 0.5% comments  Bitbake 4.5K SLoC // 0.1% comments  Forge Config 2.5K SLoC // 0.6% comments  Swift 2K SLoC  Lua 1.5K SLoC // 0.1% comments  Batch 860 SLoC // 0.0% comments  Ruby 559 SLoC // 0.2% comments  PHP 334 SLoC // 0.8% comments  XSL 185 SLoC  C# 180 SLoC // 0.3% comments  Perl 154 SLoC // 0.1% comments  Automake 127 SLoC // 0.2% comments  Java 119 SLoC // 0.4% comments  Cython 94 SLoC // 0.1% comments  PowerShell 92 SLoC // 0.2% comments  Pan 43 SLoC // 0.1% comments  Alex 19 SLoC  AWK 17 SLoC // 0.3% comments  NuGet Config 6 SLoC \n# gRPC-rs\n``gRPC`-`rs`` is a Rust wrapper of [gRPC Core](https://github.com/grpc/grpc). [gRPC](http://www.grpc.io) is a high performance, open source universal RPC framework that puts mobile and HTTP/2 first.\n[![Crates.io](https://img.shields.io/crates/v/grpcio.svg?maxAge=2592000)](https://crates.io/crates/grpcio) [![docs.rs](https://img.gs/czjpqfbdkz/full/https://docs.rs/grpcio/badge.svg)](https://docs.rs/grpcio) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/tikv/grpc-rs/workflows/CI/badge.svg)](https://github.com/tikv/grpc-rs/actions) [![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.org/tikv/grpc-rs.svg)](https://travis-ci.org/tikv/grpc-rs)\n## Status\nThis project is still under development. The following features with the check marks are supported:\n  * Basic asynchronous unary/steaming call\n  * SSL\n  * Generic call\n  * Connection level compression\n  * Interoperability test\n  * QPS benchmark\n  * Custom metadata\n  * Health check\n  * Reflection\n  * Authentication\n  * Load balance, client side is fully supported, server side load report is not implemented yet.\n\n\n## Prerequisites\n  * CMake >= 3.8.0\n  * Rust >= 1.36.0\n  * binutils >= 2.22\n  * LLVM and Clang >= 3.9 if you need to generate bindings at compile time.\n\n\nFor Linux and MacOS, you also need to install gcc 7.3+ (or clang 6+) too.\nBindings are pre-generated for x86_64/arm64 Linux. For other platforms, bindings are generated at compile time.\nFor Windows, you also need to install following software:\n  * Active State Perl\n  * yasm\n  * Visual Studio 2015+\n\n\n## Build\n```\n```$``` cargo xtask submodule ``#``` if you just cloned the repository\n`$ cargo build\n``\n```\n\n### Error linking OpenSSL\nIf you're getting linker errors when building your project using ``gRPC`-`rs``, head down to the ``openssl`` feature section for a possible fix.\n## Usage\nTo generate the sources from proto files:\n### Option 1 - Manual Generation\n  1. Install the protobuf compiler:\n\n```\n```$``` cargo install protobuf-codegen`\n`\n```\n\n  1. Install the gRPC compiler:\n\n```\n```$``` cargo install grpcio-compiler`\n`\n```\n\n  1. Generate the sources:\n\n```\n```$``` protoc`` --`rust_out``=`.`` --`grpc_out``=`.`` --`plugin``=`protoc-gen-grpc=`````which`` grpc_rust_plugin``` example.proto`\n`\n```\n\n### Option 2 - Programmatic Generation\nProgrammatic generation can be used to generate Rust modules from proto files via your ``build.rs`` by using [protoc-grpcio](https://lib.rs/crates/protoc-grpcio).\nFor more information and examples see [README](https://github.com/mtp401/protoc-grpcio/blob/master/README.md).\nTo include this project as a dependency:\n```\n```[``dependencies``]`\n`grpcio ``=` ``\"`0.13`\"``\n``\n```\n\n### Feature ``boringssl``\n``boringssl`` feature enables support for TLS encryption and some authentication mechanism. When you do not need it, for example when working in intranet, you can disable it by using the following configuration:\n```\n```[``dependencies``]`\n`grpcio = { version = \"0.13\", default-features = false, features ``=` ``[```\"`protobuf-codec`\"```]`` }\n``\n```\n\n### Feature ``prost-codec`` and ``protobuf-codec``\n``gRPC`-`rs`` uses ``protobuf`` crate by default. If you want to use ``prost`` instead, you can enable ``prost-codec`` feature. You probably only want to enable only one of the two features. Though grpcio is completely fine with both features enabled at the same time, grpcio-compiler will not going to work as expected.\n### Feature ``openssl`` and ``openssl-vendored``\n``gRPC`-`rs`` comes vendored with ``gRPC Core``, which by default uses BoringSSL instead of OpenSSL. This may cause linking issues due to symbol clashes and/or missing symbols when another one of your dependencies uses OpenSSL. To resolve this, you can tell ``gRPC`-`rs`` to use OpenSSL too by specifying ````\"`openssl`\"```` in your ``Cargo.toml``'s features list for ``gprcio``, which requires openssl (>=1.0.2). E.g.:\n```\n```[``dependencies``]`\n`grpcio = { version = \"0.13\", features ``=` ``[```\"`openssl`\"```]`` }\n``\n```\n\nFeature ``openssl-vendored`` is the same as feature ``openssl`` except it will build openssl from bundled sources.\n## Performance\nSee [benchmark](https://github.com/tikv/grpc-rs/tree/master/benchmark) to find out how to run a benchmark by yourself.\n## Cross Compile\nSee [cross_compile](https://github.com/tikv/grpc-rs/blob/master/cross_compile.md)\n## Contributing\nMake sure to format and test the code before sending a PR.\nIf the content in grpc-sys/grpc is updated, you may need to regenerate bindings:\n```\n```$``` cargo xtask bindgen`\n`\n```\n\n#### Dependencies\n~2\u201311MB  ~130K SLoC\n  * [futures-executor](https://lib.rs/crates/futures-executor \"0.3\")\n  * [futures-util](https://lib.rs/crates/futures-util \"0.3\")[+std](https://lib.rs/crates/futures-util/features#feature-std)[+sink](https://lib.rs/crates/futures-util/features#feature-sink)\n  * [grpcio-sys](https://lib.rs/crates/grpcio-sys \"new\") 0.13\n  * [libc](https://lib.rs/crates/libc \"0.2\")\n  * [log](https://lib.rs/crates/log \"0.4\")\n  * [parking_lot](https://lib.rs/crates/parking_lot \"0.12\")\n  * [protobuf-codec](https://lib.rs/crates/grpcio/features#feature-protobuf-codec \"default feature\") [protobuf](https://lib.rs/crates/protobuf \"outdated\") 2.0\n  * [prost-codec?](https://lib.rs/crates/grpcio/features#feature-prost-codec \"optional feature\") [bytes](https://lib.rs/crates/bytes \"1.0\")\n  * [prost-codec?](https://lib.rs/crates/grpcio/features#feature-prost-codec \"optional feature\") [prost](https://lib.rs/crates/prost \"obsolete\") 0.11\n  * [protobufv3-codec?](https://lib.rs/crates/grpcio/features#feature-protobufv3-codec \"optional feature\") [protobuf](https://lib.rs/crates/protobuf \"renamed protobufv3, new\") 3.2\n\n\n#### [Other features](https://lib.rs/crates/grpcio/features)\n  * [boringssl](https://lib.rs/crates/grpcio/features#feature-boringssl)\n  * [nightly](https://lib.rs/crates/grpcio/features#feature-nightly)\n  * [no-omit-frame-pointer](https://lib.rs/crates/grpcio/features#feature-no-omit-frame-pointer)\n  * [openssl](https://lib.rs/crates/grpcio/features#feature-openssl)\n  * [openssl-vendored](https://lib.rs/crates/grpcio/features#feature-openssl-vendored)\n\n\n  *[SLoC]: approx. additional lines of code\n",
        "markdown_with_citations": "###  45 releases\u27e81\u27e9\n0.13.0 |  Aug 25, 2023   \n---|---  \n0.12.1 |  Feb 14, 2023   \n0.12.0 |  Nov 4, 2022   \n0.10.3 |  Jun 28, 2022   \n0.1.0 |  Jul 27, 2017   \n#**1297** in Network programming\u27e82\u27e9\nDownload history 2243/week @ 2024-12-14 1172/week @ 2024-12-21 895/week @ 2024-12-28 1780/week @ 2025-01-04 2069/week @ 2025-01-11 2223/week @ 2025-01-18 1674/week @ 2025-01-25 1876/week @ 2025-02-01 1890/week @ 2025-02-08 1636/week @ 2025-02-15 2242/week @ 2025-02-22 1703/week @ 2025-03-01 2479/week @ 2025-03-08 2360/week @ 2025-03-15 2643/week @ 2025-03-22 1383/week @ 2025-03-29\n**9,190** downloads per month Used in **62** crates (45 directly)\u27e83\u27e9\n**Apache-2.0**\n**27MB** **535K** SLoC\nC++ 323K SLoC // 0.1% comments  C 81K SLoC // 0.1% comments  Python 41K SLoC // 0.2% comments  Bazel 30K SLoC // 0.1% comments  Go 19K SLoC // 0.1% comments  M4 10K SLoC // 0.2% comments  Rust 10K SLoC // 0.0% comments  Shell 7.5K SLoC // 0.5% comments  Bitbake 4.5K SLoC // 0.1% comments  Forge Config 2.5K SLoC // 0.6% comments  Swift 2K SLoC  Lua 1.5K SLoC // 0.1% comments  Batch 860 SLoC // 0.0% comments  Ruby 559 SLoC // 0.2% comments  PHP 334 SLoC // 0.8% comments  XSL 185 SLoC  C# 180 SLoC // 0.3% comments  Perl 154 SLoC // 0.1% comments  Automake 127 SLoC // 0.2% comments  Java 119 SLoC // 0.4% comments  Cython 94 SLoC // 0.1% comments  PowerShell 92 SLoC // 0.2% comments  Pan 43 SLoC // 0.1% comments  Alex 19 SLoC  AWK 17 SLoC // 0.3% comments  NuGet Config 6 SLoC \n# gRPC-rs\n``gRPC`-`rs`` is a Rust wrapper of gRPC Core\u27e84\u27e9. gRPC\u27e85\u27e9 is a high performance, open source universal RPC framework that puts mobile and HTTP/2 first.\n![Crates.io\u27e86\u27e9](https://crates.io/crates/grpcio) ![docs.rs\u27e87\u27e9](https://docs.rs/grpcio) ![Build Status\u27e88\u27e9](https://github.com/tikv/grpc-rs/actions) ![Build Status\u27e89\u27e9](https://travis-ci.org/tikv/grpc-rs)\n## Status\nThis project is still under development. The following features with the check marks are supported:\n  * Basic asynchronous unary/steaming call\n  * SSL\n  * Generic call\n  * Connection level compression\n  * Interoperability test\n  * QPS benchmark\n  * Custom metadata\n  * Health check\n  * Reflection\n  * Authentication\n  * Load balance, client side is fully supported, server side load report is not implemented yet.\n\n\n## Prerequisites\n  * CMake >= 3.8.0\n  * Rust >= 1.36.0\n  * binutils >= 2.22\n  * LLVM and Clang >= 3.9 if you need to generate bindings at compile time.\n\n\nFor Linux and MacOS, you also need to install gcc 7.3+ (or clang 6+) too.\nBindings are pre-generated for x86_64/arm64 Linux. For other platforms, bindings are generated at compile time.\nFor Windows, you also need to install following software:\n  * Active State Perl\n  * yasm\n  * Visual Studio 2015+\n\n\n## Build\n```\n```$``` cargo xtask submodule ``#``` if you just cloned the repository\n`$ cargo build\n``\n```\n\n### Error linking OpenSSL\nIf you're getting linker errors when building your project using ``gRPC`-`rs``, head down to the ``openssl`` feature section for a possible fix.\n## Usage\nTo generate the sources from proto files:\n### Option 1 - Manual Generation\n  1. Install the protobuf compiler:\n\n```\n```$``` cargo install protobuf-codegen`\n`\n```\n\n  1. Install the gRPC compiler:\n\n```\n```$``` cargo install grpcio-compiler`\n`\n```\n\n  1. Generate the sources:\n\n```\n```$``` protoc`` --`rust_out``=`.`` --`grpc_out``=`.`` --`plugin``=`protoc-gen-grpc=`````which`` grpc_rust_plugin``` example.proto`\n`\n```\n\n### Option 2 - Programmatic Generation\nProgrammatic generation can be used to generate Rust modules from proto files via your ``build.rs`` by using protoc-grpcio\u27e810\u27e9.\nFor more information and examples see README\u27e811\u27e9.\nTo include this project as a dependency:\n```\n```[``dependencies``]`\n`grpcio ``=` ``\"`0.13`\"``\n``\n```\n\n### Feature ``boringssl``\n``boringssl`` feature enables support for TLS encryption and some authentication mechanism. When you do not need it, for example when working in intranet, you can disable it by using the following configuration:\n```\n```[``dependencies``]`\n`grpcio = { version = \"0.13\", default-features = false, features ``=` ``[```\"`protobuf-codec`\"```]`` }\n``\n```\n\n### Feature ``prost-codec`` and ``protobuf-codec``\n``gRPC`-`rs`` uses ``protobuf`` crate by default. If you want to use ``prost`` instead, you can enable ``prost-codec`` feature. You probably only want to enable only one of the two features. Though grpcio is completely fine with both features enabled at the same time, grpcio-compiler will not going to work as expected.\n### Feature ``openssl`` and ``openssl-vendored``\n``gRPC`-`rs`` comes vendored with ``gRPC Core``, which by default uses BoringSSL instead of OpenSSL. This may cause linking issues due to symbol clashes and/or missing symbols when another one of your dependencies uses OpenSSL. To resolve this, you can tell ``gRPC`-`rs`` to use OpenSSL too by specifying ````\"`openssl`\"```` in your ``Cargo.toml``'s features list for ``gprcio``, which requires openssl (>=1.0.2). E.g.:\n```\n```[``dependencies``]`\n`grpcio = { version = \"0.13\", features ``=` ``[```\"`openssl`\"```]`` }\n``\n```\n\nFeature ``openssl-vendored`` is the same as feature ``openssl`` except it will build openssl from bundled sources.\n## Performance\nSee benchmark\u27e812\u27e9 to find out how to run a benchmark by yourself.\n## Cross Compile\nSee cross_compile\u27e813\u27e9\n## Contributing\nMake sure to format and test the code before sending a PR.\nIf the content in grpc-sys/grpc is updated, you may need to regenerate bindings:\n```\n```$``` cargo xtask bindgen`\n`\n```\n\n#### Dependencies\n~2\u201311MB  ~130K SLoC\n  * futures-executor\u27e814\u27e9\n  * futures-util\u27e815\u27e9+std\u27e816\u27e9+sink\u27e817\u27e9\n  * grpcio-sys\u27e818\u27e9 0.13\n  * libc\u27e819\u27e9\n  * log\u27e820\u27e9\n  * parking_lot\u27e821\u27e9\n  * protobuf-codec\u27e822\u27e9 protobuf\u27e823\u27e9 2.0\n  * prost-codec?\u27e824\u27e9 bytes\u27e825\u27e9\n  * prost-codec?\u27e824\u27e9 prost\u27e826\u27e9 0.11\n  * protobufv3-codec?\u27e827\u27e9 protobuf\u27e823\u27e9 3.2\n\n\n#### Other features\u27e828\u27e9\n  * boringssl\u27e829\u27e9\n  * nightly\u27e830\u27e9\n  * no-omit-frame-pointer\u27e831\u27e9\n  * openssl\u27e832\u27e9\n  * openssl-vendored\u27e833\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/grpcio/versions: 45 releases\n\u27e82\u27e9 https://lib.rs/network-programming: Crates dealing with higher-level network protocols such as FTP, HTTP, or SSH, or lower-level network protocols such as TCP or UDP. - Network programming\n\u27e83\u27e9 https://lib.rs/crates/grpcio/rev: **62** crates (45 directly)\n\u27e84\u27e9 https://github.com/grpc/grpc: gRPC Core\n\u27e85\u27e9 http://www.grpc.io: gRPC\n\u27e86\u27e9 https://img.shields.io/crates/v/grpcio.svg?maxAge=2592000: ![Crates.io\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/grpcio/badge.svg: ![docs.rs\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/tikv/grpc-rs/workflows/CI/badge.svg: ![Build Status\n\u27e89\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.org/tikv/grpc-rs.svg: ![Build Status\n\u27e810\u27e9 https://lib.rs/crates/protoc-grpcio: protoc-grpcio\n\u27e811\u27e9 https://github.com/mtp401/protoc-grpcio/blob/master/README.md: README\n\u27e812\u27e9 https://github.com/tikv/grpc-rs/tree/master/benchmark: benchmark\n\u27e813\u27e9 https://github.com/tikv/grpc-rs/blob/master/cross_compile.md: cross_compile\n\u27e814\u27e9 https://lib.rs/crates/futures-executor: 0.3 - futures-executor\n\u27e815\u27e9 https://lib.rs/crates/futures-util: 0.3 - futures-util\n\u27e816\u27e9 https://lib.rs/crates/futures-util/features#feature-std: +std\n\u27e817\u27e9 https://lib.rs/crates/futures-util/features#feature-sink: +sink\n\u27e818\u27e9 https://lib.rs/crates/grpcio-sys: new - grpcio-sys\n\u27e819\u27e9 https://lib.rs/crates/libc: 0.2 - libc\n\u27e820\u27e9 https://lib.rs/crates/log: 0.4 - log\n\u27e821\u27e9 https://lib.rs/crates/parking_lot: 0.12 - parking_lot\n\u27e822\u27e9 https://lib.rs/crates/grpcio/features#feature-protobuf-codec: default feature - protobuf-codec\n\u27e823\u27e9 https://lib.rs/crates/protobuf: outdated - protobuf\n\u27e824\u27e9 https://lib.rs/crates/grpcio/features#feature-prost-codec: optional feature - prost-codec?\n\u27e825\u27e9 https://lib.rs/crates/bytes: 1.0 - bytes\n\u27e826\u27e9 https://lib.rs/crates/prost: obsolete - prost\n\u27e827\u27e9 https://lib.rs/crates/grpcio/features#feature-protobufv3-codec: optional feature - protobufv3-codec?\n\u27e828\u27e9 https://lib.rs/crates/grpcio/features: Other features\n\u27e829\u27e9 https://lib.rs/crates/grpcio/features#feature-boringssl: boringssl\n\u27e830\u27e9 https://lib.rs/crates/grpcio/features#feature-nightly: nightly\n\u27e831\u27e9 https://lib.rs/crates/grpcio/features#feature-no-omit-frame-pointer: no-omit-frame-pointer\n\u27e832\u27e9 https://lib.rs/crates/grpcio/features#feature-openssl: openssl\n\u27e833\u27e9 https://lib.rs/crates/grpcio/features#feature-openssl-vendored: openssl-vendored\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `grpcio` crate is a Rust wrapper for gRPC Core, enabling high-performance, asynchronous remote procedure calls (RPC) with support for HTTP/2. Key features include unary/streaming calls, SSL/TLS encryption, custom metadata, health checks, reflection, authentication, and client-side load balancing. It offers flexibility with codec options (`protobuf` or `prost`) and supports cross-platform builds with pre-generated or runtime-generated bindings.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Supported Features  \n\u2705 Factual: The `grpcio` crate supports SSL encryption and client-side load balancing, making it suitable for secure and scalable RPC applications.  \n\u274c Counterfactual: The `grpcio` crate fully supports server-side load reporting for load balancing, allowing seamless integration with server-side load balancers.  \n\n---\n\n### Pair 2: Dependency Management  \n\u2705 Factual: The `grpcio` crate can use either the `prost` or `protobuf` codec for protocol buffer serialization, but enabling both simultaneously may cause issues with the `grpcio-compiler`.  \n\u274c Counterfactual: The `grpcio` crate requires both `prost` and `protobuf` codecs to function correctly, as they are mandatory dependencies for serialization.  \n\n---\n\n### Pair 3: Performance Characteristics  \n\u2705 Factual: The `grpcio` crate includes a QPS benchmark utility to measure the performance of RPC calls under high throughput scenarios.  \n\u274c Counterfactual: The `grpcio` crate automatically optimizes RPC performance based on runtime conditions without requiring any manual benchmarking or configuration.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}