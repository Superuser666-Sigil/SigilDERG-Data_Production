{
    "name": "mongodb",
    "version": "3.2.3",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/mongodb/latest/mongodb/all.html \"show sidebar\")\n# Crate mongodbCopy item path\n[Settings](https://docs.rs/mongodb/latest/settings.html)\n[Help](https://docs.rs/mongodb/latest/help.html)\nSummary[Source](https://docs.rs/mongodb/latest/src/mongodb/lib.rs.html#1-83)\nExpand description\n## [\u00a7](https://docs.rs/mongodb/latest/mongodb/#mongodb-rust-driver)MongoDB Rust Driver\n[![Crates.io](https://img.shields.io/crates/v/mongodb.svg)](https://crates.io/crates/mongodb) [![docs.rs](https://docs.rs/mongodb/badge.svg)](https://docs.rs/mongodb) [![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/mongodb/mongo-rust-driver/blob/main/LICENSE)\nThis is the officially supported MongoDB Rust driver, a client side library that can be used to interact with MongoDB deployments in Rust applications. It uses the [`bson`](https://docs.rs/bson/latest) crate for BSON support. The driver contains a fully async API that requires [`tokio`](https://docs.rs/tokio). The driver also has a sync API that may be enabled via feature flags.\nFor more details, including features, runnable examples, troubleshooting resources, and more, please see the [official documentation](https://www.mongodb.com/docs/drivers/rust/current/).\n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#installation)Installation\n#### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#requirements)Requirements\n  * Rust 1.71.1+ (See the [MSRV policy](https://docs.rs/mongodb/latest/mongodb/#minimum-supported-rust-version-msrv-policy) for more information)\n  * MongoDB 4.0+\n\n\n##### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#supported-platforms)Supported Platforms\nThe driver tests against Linux, MacOS, and Windows in CI.\n#### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#importing)Importing\nThe driver is available on [crates.io](https://crates.io/crates/mongodb). To use the driver in your application, simply add it to your project\u2019s `Cargo.toml`.\n```\n[dependencies]\nmongodb = \"3.2.3\"\n```\n\nVersion 1 of this crate has reached end of life and will no longer be receiving any updates or bug fixes, so all users are recommended to always depend on the latest 2.x release. See the [2.0.0 release notes](https://github.com/mongodb/mongo-rust-driver/releases/tag/v2.0.0) for migration information if upgrading from a 1.x version.\n##### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#enabling-the-sync-api)Enabling the sync API\nThe driver also provides a blocking sync API. To enable this, add the `\"sync\"` feature to your `Cargo.toml`:\n```\n[dependencies.mongodb]\nversion = \"3.2.3\"\nfeatures = [\"sync\"]\n```\n\n**Note:** The sync-specific types can be imported from `mongodb::sync` (e.g. `mongodb::sync::Client`).\n#### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#all-feature-flags)All Feature Flags\nFeature| Description  \n---|---  \n`dns-resolver`| Enable DNS resolution to allow `mongodb+srv` URI handling. **Enabled by default.**  \n`rustls-tls`| Use [`rustls`](https://docs.rs/rustls/latest/rustls/) for TLS connection handling. **Enabled by default.**  \n`openssl-tls`| Use [`openssl`](https://docs.rs/openssl/latest/openssl/) for TLS connection handling.  \n`sync`| Expose the synchronous API (`mongodb::sync`).  \n`aws-auth`| Enable support for the MONGODB-AWS authentication mechanism.  \n`zlib-compression`| Enable support for compressing messages with [`zlib`](https://zlib.net/).  \n`zstd-compression`| Enable support for compressing messages with [`zstd`](http://facebook.github.io/zstd/).  \n`snappy-compression`| Enable support for compressing messages with [`snappy`](http://google.github.io/snappy/).  \n`in-use-encryption`| Enable support for client-side field level encryption and queryable encryption. Note that re-exports from the `mongocrypt` crate may change in backwards-incompatible ways while that crate is below version 1.0.  \n`tracing-unstable`| Enable support for emitting [`tracing`](https://docs.rs/tracing/latest/tracing/) events. This API is unstable and may be subject to breaking changes in minor releases.  \n`compat-3-0-0`| Required for future compatibility if default features are disabled.  \n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#web-framework-examples)Web Framework Examples\n#### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#actix)Actix\nThe driver can be used easily with the Actix web framework by storing a `Client` in Actix application data. A full example application for using MongoDB with Actix can be found [here](https://github.com/actix/examples/tree/master/databases/mongodb).\n#### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#rocket)Rocket\nThe Rocket web framework provides built-in support for MongoDB via the Rust driver. The documentation for the [`rocket_db_pools`](https://api.rocket.rs/v0.5/rocket_db_pools/index.html) crate contains instructions for using MongoDB with your Rocket application.\n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#note-on-connecting-to-atlas-deployments)Note on connecting to Atlas deployments\nIn order to connect to a pre-4.2 Atlas instance that\u2019s M2 or bigger, the `openssl-tls` feature flag must be enabled. The flag is not required for clusters smaller than M2 or running server versions 4.2 or newer.\n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#windows-dns-note)Windows DNS note\nOn Windows, there is a known issue in the `trust-dns-resolver` crate, which the driver uses to perform DNS lookups, that causes severe performance degradation in resolvers that use the system configuration. Since the driver uses the system configuration by default, users are recommended to specify an alternate resolver configuration on Windows (e.g. `ResolverConfig::cloudflare()`) until that issue is resolved. This only has an effect when connecting to deployments using a `mongodb+srv` connection string.\n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#warning-about-timeouts--cancellation)Warning about timeouts / cancellation\nIn async Rust, it is common to implement cancellation and timeouts by dropping a future after a certain period of time instead of polling it to completion. This is how [`tokio::time::timeout`](https://docs.rs/tokio/1.10.1/tokio/time/fn.timeout.html) works, for example. However, doing this with futures returned by the driver can leave the driver\u2019s internals in an inconsistent state, which may lead to unpredictable or incorrect behavior (see [RUST-937](https://jira.mongodb.org/browse/RUST-937) for more details). As such, it is **_highly_** recommended to poll all futures returned from the driver to completion. In order to still use timeout mechanisms like `tokio::time::timeout` with the driver, one option is to spawn tasks and time out on their [`JoinHandle`](https://docs.rs/tokio/1.10.1/tokio/task/struct.JoinHandle.html) futures instead of on the driver\u2019s futures directly. This will ensure the driver\u2019s futures will always be completely polled while also allowing the application to continue in the event of a timeout.\n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#bug-reporting--feature-requests)Bug Reporting / Feature Requests\nTo file a bug report or submit a feature request, please open a ticket on our [Jira project](https://jira.mongodb.org/browse/RUST):\n  * Create an account and login at [jira.mongodb.org](https://jira.mongodb.org)\n  * Navigate to the RUST project at [jira.mongodb.org/browse/RUST](https://jira.mongodb.org/browse/RUST)\n  * Click **Create Issue** - If the ticket you are filing is a bug report, please include as much detail as possible about the issue and how to reproduce it.\n\n\nBefore filing a ticket, please use the search functionality of Jira to see if a similar issue has already been filed.\n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#contributing)Contributing\nWe encourage and would happily accept contributions in the form of GitHub pull requests. Before opening one, be sure to run the tests locally; check out the [testing section](https://docs.rs/mongodb/latest/mongodb/#running-the-tests) for information on how to do that. Once you open a pull request, your branch will be run against the same testing matrix that we use for our [continuous integration](https://docs.rs/mongodb/latest/mongodb/#continuous-integration) system, so it is usually sufficient to only run the integration tests locally against a standalone. Remember to always run the linter tests before opening a pull request.\n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#running-the-tests)Running the tests\n#### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#integration-and-unit-tests)Integration and unit tests\nIn order to run the tests (which are mostly integration tests), you must have access to a MongoDB deployment. You may specify a [MongoDB connection string](https://www.mongodb.com/docs/manual/reference/connection-string/) in the `MONGODB_URI` environment variable, and the tests will use it to connect to the deployment. If `MONGODB_URI` is unset, the tests will attempt to connect to a local deployment on port 27017.\n**Note:** The integration tests will clear out the databases/collections they need to use, but they do not clean up after themselves.\nTo actually run the tests, you can use `cargo` like you would in any other crate:\n```\ncargo test --verbose # runs against localhost:27017\nexport MONGODB_URI=\"mongodb://localhost:123\"\ncargo test --verbose # runs against localhost:123\n```\n\n##### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#auth-tests)Auth tests\nThe authentication tests will only be included in the test run if certain requirements are met:\n  * The deployment must have `--auth` enabled\n  * Credentials must be specified in `MONGODB_URI`\n  * The credentials specified in `MONGODB_URI` must be valid and have root privileges on the deployment\n\n\n```\nexport MONGODB_URI=\"mongodb://user:pass@localhost:27017\"\ncargo test --verbose # auth tests included\n```\n\n##### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#topology-specific-tests)Topology-specific tests\nCertain tests will only be run against certain topologies. To ensure that the entire test suite is run, make sure to run the tests separately against standalone, replicated, and sharded deployments.\n```\nexport MONGODB_URI=\"mongodb://my-standalone-host:27017\" # mongod running on 27017\ncargo test --verbose\nexport MONGODB_URI=\"mongodb://localhost:27018,localhost:27019,localhost:27020/?replicaSet=repl\" # replicaset running on ports 27018, 27019, 27020 with name repl\ncargo test --verbose\nexport MONGODB_URI=\"mongodb://localhost:27021\" # mongos running on 27021\ncargo test --verbose\n```\n\n##### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#run-the-tests-with-tlsssl)Run the tests with TLS/SSL\nTo run the tests with TLS/SSL enabled, you must enable it on the deployment and in `MONGODB_URI`.\n```\nexport MONGODB_URI=\"mongodb://localhost:27017/?tls=true&tlsCertificateKeyFile=cert.pem&tlsCAFile=ca.pem\"\ncargo test --verbose\n```\n\n**Note:** When you open a pull request, your code will be run against a comprehensive testing matrix, so it is usually not necessary to run the integration tests against all combinations of topology/auth/TLS locally.\n#### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#linter-tests)Linter Tests\nOur linter tests use the nightly version of `rustfmt` to verify that the source is formatted properly and the stable version of `clippy` to statically detect any common mistakes. You can use `rustup` to install them both:\n```\nrustup component add clippy --toolchain stable\nrustup component add rustfmt --toolchain nightly\n```\n\nOur linter tests also use `rustdoc` to verify that all necessary documentation is present and properly formatted. `rustdoc` is included in the standard Rust distribution.\nTo run the linter tests, run the `check-clippy.sh`, `check-rustfmt.sh`, and `check-rustdoc.sh` scripts in the `.evergreen` directory. To run all three, use the `check-all.sh` script.\n```\nbash .evergreen/check-all.sh\n```\n\n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#continuous-integration)Continuous Integration\nCommits to main are run automatically on [evergreen](https://evergreen.mongodb.com/waterfall/mongo-rust-driver).\n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#minimum-supported-rust-version-msrv-policy)Minimum supported Rust version (MSRV) policy\nThe MSRV for this crate is currently 1.71.1. This will rarely be increased, and if it ever is, it will only happen in a minor or major version release.\n### [\u00a7](https://docs.rs/mongodb/latest/mongodb/#license)License\nThis project is licensed under the [Apache License 2.0](https://github.com/10gen/mongo-rust-driver/blob/main/LICENSE).\nThis product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit (<http://www.openssl.org/>).\n## Re-exports[\u00a7](https://docs.rs/mongodb/latest/mongodb/#reexports)\n\n`pub use ::bson[](https://docs.rs/bson/2.14.0/x86_64-unknown-linux-gnu/bson/index.html \"mod bson\");`\n\n\n`pub use ::mongocrypt[](https://docs.rs/mongocrypt/0.2.1/x86_64-unknown-linux-gnu/mongocrypt/index.html \"mod mongocrypt\");``in-use-encryption`\n\n## Modules[\u00a7](https://docs.rs/mongodb/latest/mongodb/#modules)\n\n[action](https://docs.rs/mongodb/latest/mongodb/action/index.html \"mod mongodb::action\")\n    Action builder types.\n\n[change_stream](https://docs.rs/mongodb/latest/mongodb/change_stream/index.html \"mod mongodb::change_stream\")\n    Contains the functionality for change streams.\n\n[client_encryption](https://docs.rs/mongodb/latest/mongodb/client_encryption/index.html \"mod mongodb::client_encryption\")`in-use-encryption`\n    Support for explicit encryption.\n\n[error](https://docs.rs/mongodb/latest/mongodb/error/index.html \"mod mongodb::error\")\n    Contains the `Error` and `Result` types that `mongodb` uses.\n\n[event](https://docs.rs/mongodb/latest/mongodb/event/index.html \"mod mongodb::event\")\n    Contains the events and functionality for monitoring internal `Client` behavior.\n\n[gridfs](https://docs.rs/mongodb/latest/mongodb/gridfs/index.html \"mod mongodb::gridfs\")\n    Contains the functionality for GridFS operations.\n\n[options](https://docs.rs/mongodb/latest/mongodb/options/index.html \"mod mongodb::options\")\n    Contains all of the types needed to specify options to MongoDB operations.\n\n[results](https://docs.rs/mongodb/latest/mongodb/results/index.html \"mod mongodb::results\")\n    Contains the types of results returned by CRUD operations.\n\n[sync](https://docs.rs/mongodb/latest/mongodb/sync/index.html \"mod mongodb::sync\")`sync`\n    Contains the sync API. This is only available when the `sync` feature is enabled.\n## Structs[\u00a7](https://docs.rs/mongodb/latest/mongodb/#structs)\n\n[Client](https://docs.rs/mongodb/latest/mongodb/struct.Client.html \"struct mongodb::Client\")\n    This is the main entry point for the API. A `Client` is used to connect to a MongoDB cluster. By default, it will monitor the topology of the cluster, keeping track of any changes, such as servers being added or removed.\n\n[ClientSession](https://docs.rs/mongodb/latest/mongodb/struct.ClientSession.html \"struct mongodb::ClientSession\")\n    A MongoDB client session. This struct represents a logical session used for ordering sequential operations. To create a `ClientSession`, call `start_session` on a `Client`.\n\n[ClusterTime](https://docs.rs/mongodb/latest/mongodb/struct.ClusterTime.html \"struct mongodb::ClusterTime\")\n    Struct modeling a cluster time reported by the server.\n\n[Collection](https://docs.rs/mongodb/latest/mongodb/struct.Collection.html \"struct mongodb::Collection\")\n    `Collection` is the client-side abstraction of a MongoDB Collection. It can be used to perform collection-level operations such as CRUD operations. A `Collection` can be obtained through a [`Database`](https://docs.rs/mongodb/latest/mongodb/struct.Database.html) by calling either [`Database::collection`](https://docs.rs/mongodb/latest/mongodb/struct.Database.html#method.collection) or [`Database::collection_with_options`](https://docs.rs/mongodb/latest/mongodb/struct.Database.html#method.collection_with_options).\n\n[Cursor](https://docs.rs/mongodb/latest/mongodb/struct.Cursor.html \"struct mongodb::Cursor\")\n    A [`Cursor`](https://docs.rs/mongodb/latest/mongodb/struct.Cursor.html \"struct mongodb::Cursor\") streams the result of a query. When a query is made, the returned [`Cursor`](https://docs.rs/mongodb/latest/mongodb/struct.Cursor.html \"struct mongodb::Cursor\") will contain the first batch of results from the server; the individual results will then be returned as the [`Cursor`](https://docs.rs/mongodb/latest/mongodb/struct.Cursor.html \"struct mongodb::Cursor\") is iterated. When the batch is exhausted and if there are more results, the [`Cursor`](https://docs.rs/mongodb/latest/mongodb/struct.Cursor.html \"struct mongodb::Cursor\") will fetch the next batch of documents, and so forth until the results are exhausted. Note that because of this batching, additional network I/O may occur on any given call to `next`. Because of this, a [`Cursor`](https://docs.rs/mongodb/latest/mongodb/struct.Cursor.html \"struct mongodb::Cursor\") iterates over `Result<T>` items rather than simply `T` items.\n\n[Database](https://docs.rs/mongodb/latest/mongodb/struct.Database.html \"struct mongodb::Database\")\n    `Database` is the client-side abstraction of a MongoDB database. It can be used to perform database-level operations or to obtain handles to specific collections within the database. A `Database` can only be obtained through a [`Client`](https://docs.rs/mongodb/latest/mongodb/struct.Client.html) by calling either [`Client::database`](https://docs.rs/mongodb/latest/mongodb/struct.Client.html#method.database) or [`Client::database_with_options`](https://docs.rs/mongodb/latest/mongodb/struct.Client.html#method.database_with_options).\n\n[IndexModel](https://docs.rs/mongodb/latest/mongodb/struct.IndexModel.html \"struct mongodb::IndexModel\")\n    Specifies the fields and options for an index. For more information, see the [documentation](https://www.mongodb.com/docs/manual/indexes/).\n\n[Namespace](https://docs.rs/mongodb/latest/mongodb/struct.Namespace.html \"struct mongodb::Namespace\")\n    A struct modeling the canonical name for a collection in MongoDB.\n\n[SearchIndexModel](https://docs.rs/mongodb/latest/mongodb/struct.SearchIndexModel.html \"struct mongodb::SearchIndexModel\")\n    Specifies the options for a search index.\n\n[ServerInfo](https://docs.rs/mongodb/latest/mongodb/struct.ServerInfo.html \"struct mongodb::ServerInfo\")\n    A description of the most up-to-date information known about a server. Further details can be found in the [Server Discovery and Monitoring specification](https://specifications.readthedocs.io/en/latest/server-discovery-and-monitoring/server-discovery-and-monitoring/).\n\n[SessionCursor](https://docs.rs/mongodb/latest/mongodb/struct.SessionCursor.html \"struct mongodb::SessionCursor\")\n    A [`SessionCursor`](https://docs.rs/mongodb/latest/mongodb/struct.SessionCursor.html \"struct mongodb::SessionCursor\") is a cursor that was created with a [`ClientSession`](https://docs.rs/mongodb/latest/mongodb/struct.ClientSession.html \"struct mongodb::ClientSession\") that must be iterated using one. To iterate, use [`SessionCursor::next`](https://docs.rs/mongodb/latest/mongodb/struct.SessionCursor.html#method.next \"method mongodb::SessionCursor::next\") or retrieve a [`SessionCursorStream`](https://docs.rs/mongodb/latest/mongodb/struct.SessionCursorStream.html \"struct mongodb::SessionCursorStream\") using [`SessionCursor::stream`](https://docs.rs/mongodb/latest/mongodb/struct.SessionCursor.html#method.stream \"method mongodb::SessionCursor::stream\"):\n\n[SessionCursorStream](https://docs.rs/mongodb/latest/mongodb/struct.SessionCursorStream.html \"struct mongodb::SessionCursorStream\")\n    A type that implements [`Stream`](https://docs.rs/futures/latest/futures/stream/index.html) which can be used to stream the results of a [`SessionCursor`](https://docs.rs/mongodb/latest/mongodb/struct.SessionCursor.html \"struct mongodb::SessionCursor\"). Returned from [`SessionCursor::stream`](https://docs.rs/mongodb/latest/mongodb/struct.SessionCursor.html#method.stream \"method mongodb::SessionCursor::stream\").\n## Enums[\u00a7](https://docs.rs/mongodb/latest/mongodb/#enums)\n\n[SearchIndexType](https://docs.rs/mongodb/latest/mongodb/enum.SearchIndexType.html \"enum mongodb::SearchIndexType\")\n    Specifies the type of search index.\n\n[ServerType](https://docs.rs/mongodb/latest/mongodb/enum.ServerType.html \"enum mongodb::ServerType\")\n    Enum representing the possible types of servers that the driver can connect to.\n\n[TopologyType](https://docs.rs/mongodb/latest/mongodb/enum.TopologyType.html \"enum mongodb::TopologyType\")\n    The possible types for a topology.\n## Type Aliases[\u00a7](https://docs.rs/mongodb/latest/mongodb/#types)\n\n[BoxFuture](https://docs.rs/mongodb/latest/mongodb/type.BoxFuture.html \"type mongodb::BoxFuture\")\n    A boxed future.\n",
        "markdown_with_citations": "[](https://docs.rs/mongodb/latest/mongodb/all.html \"show sidebar\")\n# Crate mongodbCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9MongoDB Rust Driver\n![Crates.io\u27e85\u27e9](https://crates.io/crates/mongodb) ![docs.rs\u27e86\u27e9](https://docs.rs/mongodb) ![License\u27e87\u27e9](https://github.com/mongodb/mongo-rust-driver/blob/main/LICENSE)\nThis is the officially supported MongoDB Rust driver, a client side library that can be used to interact with MongoDB deployments in Rust applications. It uses the `bson`\u27e88\u27e9 crate for BSON support. The driver contains a fully async API that requires `tokio`\u27e89\u27e9. The driver also has a sync API that may be enabled via feature flags.\nFor more details, including features, runnable examples, troubleshooting resources, and more, please see the official documentation\u27e810\u27e9.\n### \u00a7\u27e811\u27e9Installation\n#### \u00a7\u27e812\u27e9Requirements\n  * Rust 1.71.1+ (See the MSRV policy\u27e813\u27e9 for more information)\n  * MongoDB 4.0+\n\n\n##### \u00a7\u27e814\u27e9Supported Platforms\nThe driver tests against Linux, MacOS, and Windows in CI.\n#### \u00a7\u27e815\u27e9Importing\nThe driver is available on crates.io\u27e816\u27e9. To use the driver in your application, simply add it to your project\u2019s `Cargo.toml`.\n```\n[dependencies]\nmongodb = \"3.2.3\"\n```\n\nVersion 1 of this crate has reached end of life and will no longer be receiving any updates or bug fixes, so all users are recommended to always depend on the latest 2.x release. See the 2.0.0 release notes\u27e817\u27e9 for migration information if upgrading from a 1.x version.\n##### \u00a7\u27e818\u27e9Enabling the sync API\nThe driver also provides a blocking sync API. To enable this, add the `\"sync\"` feature to your `Cargo.toml`:\n```\n[dependencies.mongodb]\nversion = \"3.2.3\"\nfeatures = [\"sync\"]\n```\n\n**Note:** The sync-specific types can be imported from `mongodb::sync` (e.g. `mongodb::sync::Client`).\n#### \u00a7\u27e819\u27e9All Feature Flags\nFeature| Description  \n---|---  \n`dns-resolver`| Enable DNS resolution to allow `mongodb+srv` URI handling. **Enabled by default.**  \n`rustls-tls`| Use `rustls`\u27e820\u27e9 for TLS connection handling. **Enabled by default.**  \n`openssl-tls`| Use `openssl`\u27e821\u27e9 for TLS connection handling.  \n`sync`| Expose the synchronous API (`mongodb::sync`).  \n`aws-auth`| Enable support for the MONGODB-AWS authentication mechanism.  \n`zlib-compression`| Enable support for compressing messages with `zlib`\u27e822\u27e9.  \n`zstd-compression`| Enable support for compressing messages with `zstd`\u27e823\u27e9.  \n`snappy-compression`| Enable support for compressing messages with `snappy`\u27e824\u27e9.  \n`in-use-encryption`| Enable support for client-side field level encryption and queryable encryption. Note that re-exports from the `mongocrypt` crate may change in backwards-incompatible ways while that crate is below version 1.0.  \n`tracing-unstable`| Enable support for emitting `tracing`\u27e825\u27e9 events. This API is unstable and may be subject to breaking changes in minor releases.  \n`compat-3-0-0`| Required for future compatibility if default features are disabled.  \n### \u00a7\u27e826\u27e9Web Framework Examples\n#### \u00a7\u27e827\u27e9Actix\nThe driver can be used easily with the Actix web framework by storing a `Client` in Actix application data. A full example application for using MongoDB with Actix can be found here\u27e828\u27e9.\n#### \u00a7\u27e829\u27e9Rocket\nThe Rocket web framework provides built-in support for MongoDB via the Rust driver. The documentation for the `rocket_db_pools`\u27e830\u27e9 crate contains instructions for using MongoDB with your Rocket application.\n### \u00a7\u27e831\u27e9Note on connecting to Atlas deployments\nIn order to connect to a pre-4.2 Atlas instance that\u2019s M2 or bigger, the `openssl-tls` feature flag must be enabled. The flag is not required for clusters smaller than M2 or running server versions 4.2 or newer.\n### \u00a7\u27e832\u27e9Windows DNS note\nOn Windows, there is a known issue in the `trust-dns-resolver` crate, which the driver uses to perform DNS lookups, that causes severe performance degradation in resolvers that use the system configuration. Since the driver uses the system configuration by default, users are recommended to specify an alternate resolver configuration on Windows (e.g. `ResolverConfig::cloudflare()`) until that issue is resolved. This only has an effect when connecting to deployments using a `mongodb+srv` connection string.\n### \u00a7\u27e833\u27e9Warning about timeouts / cancellation\nIn async Rust, it is common to implement cancellation and timeouts by dropping a future after a certain period of time instead of polling it to completion. This is how `tokio::time::timeout`\u27e834\u27e9 works, for example. However, doing this with futures returned by the driver can leave the driver\u2019s internals in an inconsistent state, which may lead to unpredictable or incorrect behavior (see RUST-937\u27e835\u27e9 for more details). As such, it is **_highly_** recommended to poll all futures returned from the driver to completion. In order to still use timeout mechanisms like `tokio::time::timeout` with the driver, one option is to spawn tasks and time out on their `JoinHandle`\u27e836\u27e9 futures instead of on the driver\u2019s futures directly. This will ensure the driver\u2019s futures will always be completely polled while also allowing the application to continue in the event of a timeout.\n### \u00a7\u27e837\u27e9Bug Reporting / Feature Requests\nTo file a bug report or submit a feature request, please open a ticket on our Jira project\u27e838\u27e9:\n  * Create an account and login at jira.mongodb.org\u27e839\u27e9\n  * Navigate to the RUST project at jira.mongodb.org/browse/RUST\u27e838\u27e9\n  * Click **Create Issue** - If the ticket you are filing is a bug report, please include as much detail as possible about the issue and how to reproduce it.\n\n\nBefore filing a ticket, please use the search functionality of Jira to see if a similar issue has already been filed.\n### \u00a7\u27e840\u27e9Contributing\nWe encourage and would happily accept contributions in the form of GitHub pull requests. Before opening one, be sure to run the tests locally; check out the testing section\u27e841\u27e9 for information on how to do that. Once you open a pull request, your branch will be run against the same testing matrix that we use for our continuous integration\u27e842\u27e9 system, so it is usually sufficient to only run the integration tests locally against a standalone. Remember to always run the linter tests before opening a pull request.\n### \u00a7\u27e841\u27e9Running the tests\n#### \u00a7\u27e843\u27e9Integration and unit tests\nIn order to run the tests (which are mostly integration tests), you must have access to a MongoDB deployment. You may specify a MongoDB connection string\u27e844\u27e9 in the `MONGODB_URI` environment variable, and the tests will use it to connect to the deployment. If `MONGODB_URI` is unset, the tests will attempt to connect to a local deployment on port 27017.\n**Note:** The integration tests will clear out the databases/collections they need to use, but they do not clean up after themselves.\nTo actually run the tests, you can use `cargo` like you would in any other crate:\n```\ncargo test --verbose # runs against localhost:27017\nexport MONGODB_URI=\"mongodb://localhost:123\"\ncargo test --verbose # runs against localhost:123\n```\n\n##### \u00a7\u27e845\u27e9Auth tests\nThe authentication tests will only be included in the test run if certain requirements are met:\n  * The deployment must have `--auth` enabled\n  * Credentials must be specified in `MONGODB_URI`\n  * The credentials specified in `MONGODB_URI` must be valid and have root privileges on the deployment\n\n\n```\nexport MONGODB_URI=\"mongodb://user:pass@localhost:27017\"\ncargo test --verbose # auth tests included\n```\n\n##### \u00a7\u27e846\u27e9Topology-specific tests\nCertain tests will only be run against certain topologies. To ensure that the entire test suite is run, make sure to run the tests separately against standalone, replicated, and sharded deployments.\n```\nexport MONGODB_URI=\"mongodb://my-standalone-host:27017\" # mongod running on 27017\ncargo test --verbose\nexport MONGODB_URI=\"mongodb://localhost:27018,localhost:27019,localhost:27020/?replicaSet=repl\" # replicaset running on ports 27018, 27019, 27020 with name repl\ncargo test --verbose\nexport MONGODB_URI=\"mongodb://localhost:27021\" # mongos running on 27021\ncargo test --verbose\n```\n\n##### \u00a7\u27e847\u27e9Run the tests with TLS/SSL\nTo run the tests with TLS/SSL enabled, you must enable it on the deployment and in `MONGODB_URI`.\n```\nexport MONGODB_URI=\"mongodb://localhost:27017/?tls=true&tlsCertificateKeyFile=cert.pem&tlsCAFile=ca.pem\"\ncargo test --verbose\n```\n\n**Note:** When you open a pull request, your code will be run against a comprehensive testing matrix, so it is usually not necessary to run the integration tests against all combinations of topology/auth/TLS locally.\n#### \u00a7\u27e848\u27e9Linter Tests\nOur linter tests use the nightly version of `rustfmt` to verify that the source is formatted properly and the stable version of `clippy` to statically detect any common mistakes. You can use `rustup` to install them both:\n```\nrustup component add clippy --toolchain stable\nrustup component add rustfmt --toolchain nightly\n```\n\nOur linter tests also use `rustdoc` to verify that all necessary documentation is present and properly formatted. `rustdoc` is included in the standard Rust distribution.\nTo run the linter tests, run the `check-clippy.sh`, `check-rustfmt.sh`, and `check-rustdoc.sh` scripts in the `.evergreen` directory. To run all three, use the `check-all.sh` script.\n```\nbash .evergreen/check-all.sh\n```\n\n### \u00a7\u27e842\u27e9Continuous Integration\nCommits to main are run automatically on evergreen\u27e849\u27e9.\n### \u00a7\u27e813\u27e9Minimum supported Rust version (MSRV) policy\nThe MSRV for this crate is currently 1.71.1. This will rarely be increased, and if it ever is, it will only happen in a minor or major version release.\n### \u00a7\u27e850\u27e9License\nThis project is licensed under the Apache License 2.0\u27e851\u27e9.\nThis product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit (<http://www.openssl.org/>).\n## Re-exports\u00a7\u27e852\u27e9\n\n`pub use ::bson[](https://docs.rs/bson/2.14.0/x86_64-unknown-linux-gnu/bson/index.html \"mod bson\");`\n\n\n`pub use ::mongocrypt[](https://docs.rs/mongocrypt/0.2.1/x86_64-unknown-linux-gnu/mongocrypt/index.html \"mod mongocrypt\");``in-use-encryption`\n\n## Modules\u00a7\u27e853\u27e9\n\naction\u27e854\u27e9\n    Action builder types.\n\nchange_stream\u27e855\u27e9\n    Contains the functionality for change streams.\n\nclient_encryption\u27e856\u27e9`in-use-encryption`\n    Support for explicit encryption.\n\nerror\u27e857\u27e9\n    Contains the `Error` and `Result` types that `mongodb` uses.\n\nevent\u27e858\u27e9\n    Contains the events and functionality for monitoring internal `Client` behavior.\n\ngridfs\u27e859\u27e9\n    Contains the functionality for GridFS operations.\n\noptions\u27e860\u27e9\n    Contains all of the types needed to specify options to MongoDB operations.\n\nresults\u27e861\u27e9\n    Contains the types of results returned by CRUD operations.\n\nsync\u27e862\u27e9`sync`\n    Contains the sync API. This is only available when the `sync` feature is enabled.\n## Structs\u00a7\u27e863\u27e9\n\nClient\u27e864\u27e9\n    This is the main entry point for the API. A `Client` is used to connect to a MongoDB cluster. By default, it will monitor the topology of the cluster, keeping track of any changes, such as servers being added or removed.\n\nClientSession\u27e865\u27e9\n    A MongoDB client session. This struct represents a logical session used for ordering sequential operations. To create a `ClientSession`, call `start_session` on a `Client`.\n\nClusterTime\u27e866\u27e9\n    Struct modeling a cluster time reported by the server.\n\nCollection\u27e867\u27e9\n    `Collection` is the client-side abstraction of a MongoDB Collection. It can be used to perform collection-level operations such as CRUD operations. A `Collection` can be obtained through a `Database`\u27e868\u27e9 by calling either `Database::collection`\u27e869\u27e9 or `Database::collection_with_options`\u27e870\u27e9.\n\nCursor\u27e871\u27e9\n    A `Cursor`\u27e871\u27e9 streams the result of a query. When a query is made, the returned `Cursor`\u27e871\u27e9 will contain the first batch of results from the server; the individual results will then be returned as the `Cursor`\u27e871\u27e9 is iterated. When the batch is exhausted and if there are more results, the `Cursor`\u27e871\u27e9 will fetch the next batch of documents, and so forth until the results are exhausted. Note that because of this batching, additional network I/O may occur on any given call to `next`. Because of this, a `Cursor`\u27e871\u27e9 iterates over `Result<T>` items rather than simply `T` items.\n\nDatabase\u27e868\u27e9\n    `Database` is the client-side abstraction of a MongoDB database. It can be used to perform database-level operations or to obtain handles to specific collections within the database. A `Database` can only be obtained through a `Client`\u27e864\u27e9 by calling either `Client::database`\u27e872\u27e9 or `Client::database_with_options`\u27e873\u27e9.\n\nIndexModel\u27e874\u27e9\n    Specifies the fields and options for an index. For more information, see the documentation\u27e875\u27e9.\n\nNamespace\u27e876\u27e9\n    A struct modeling the canonical name for a collection in MongoDB.\n\nSearchIndexModel\u27e877\u27e9\n    Specifies the options for a search index.\n\nServerInfo\u27e878\u27e9\n    A description of the most up-to-date information known about a server. Further details can be found in the Server Discovery and Monitoring specification\u27e879\u27e9.\n\nSessionCursor\u27e880\u27e9\n    A `SessionCursor`\u27e880\u27e9 is a cursor that was created with a `ClientSession`\u27e865\u27e9 that must be iterated using one. To iterate, use `SessionCursor::next`\u27e881\u27e9 or retrieve a `SessionCursorStream`\u27e882\u27e9 using `SessionCursor::stream`\u27e883\u27e9:\n\nSessionCursorStream\u27e882\u27e9\n    A type that implements `Stream`\u27e884\u27e9 which can be used to stream the results of a `SessionCursor`\u27e880\u27e9. Returned from `SessionCursor::stream`\u27e883\u27e9.\n## Enums\u00a7\u27e885\u27e9\n\nSearchIndexType\u27e886\u27e9\n    Specifies the type of search index.\n\nServerType\u27e887\u27e9\n    Enum representing the possible types of servers that the driver can connect to.\n\nTopologyType\u27e888\u27e9\n    The possible types for a topology.\n## Type Aliases\u00a7\u27e889\u27e9\n\nBoxFuture\u27e890\u27e9\n    A boxed future.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/mongodb/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/mongodb/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/mongodb/latest/src/mongodb/lib.rs.html#1-83: Source\n\u27e84\u27e9 https://docs.rs/mongodb/latest/mongodb/#mongodb-rust-driver: \u00a7\n\u27e85\u27e9 https://img.shields.io/crates/v/mongodb.svg: ![Crates.io\n\u27e86\u27e9 https://docs.rs/mongodb/badge.svg: ![docs.rs\n\u27e87\u27e9 https://img.shields.io/badge/license-Apache%202.0-blue.svg: ![License\n\u27e88\u27e9 https://docs.rs/bson/latest: `bson`\n\u27e89\u27e9 https://docs.rs/tokio: `tokio`\n\u27e810\u27e9 https://www.mongodb.com/docs/drivers/rust/current/: official documentation\n\u27e811\u27e9 https://docs.rs/mongodb/latest/mongodb/#installation: \u00a7\n\u27e812\u27e9 https://docs.rs/mongodb/latest/mongodb/#requirements: \u00a7\n\u27e813\u27e9 https://docs.rs/mongodb/latest/mongodb/#minimum-supported-rust-version-msrv-policy: MSRV policy\n\u27e814\u27e9 https://docs.rs/mongodb/latest/mongodb/#supported-platforms: \u00a7\n\u27e815\u27e9 https://docs.rs/mongodb/latest/mongodb/#importing: \u00a7\n\u27e816\u27e9 https://crates.io/crates/mongodb: crates.io\n\u27e817\u27e9 https://github.com/mongodb/mongo-rust-driver/releases/tag/v2.0.0: 2.0.0 release notes\n\u27e818\u27e9 https://docs.rs/mongodb/latest/mongodb/#enabling-the-sync-api: \u00a7\n\u27e819\u27e9 https://docs.rs/mongodb/latest/mongodb/#all-feature-flags: \u00a7\n\u27e820\u27e9 https://docs.rs/rustls/latest/rustls/: `rustls`\n\u27e821\u27e9 https://docs.rs/openssl/latest/openssl/: `openssl`\n\u27e822\u27e9 https://zlib.net/: `zlib`\n\u27e823\u27e9 http://facebook.github.io/zstd/: `zstd`\n\u27e824\u27e9 http://google.github.io/snappy/: `snappy`\n\u27e825\u27e9 https://docs.rs/tracing/latest/tracing/: `tracing`\n\u27e826\u27e9 https://docs.rs/mongodb/latest/mongodb/#web-framework-examples: \u00a7\n\u27e827\u27e9 https://docs.rs/mongodb/latest/mongodb/#actix: \u00a7\n\u27e828\u27e9 https://github.com/actix/examples/tree/master/databases/mongodb: here\n\u27e829\u27e9 https://docs.rs/mongodb/latest/mongodb/#rocket: \u00a7\n\u27e830\u27e9 https://api.rocket.rs/v0.5/rocket_db_pools/index.html: `rocket_db_pools`\n\u27e831\u27e9 https://docs.rs/mongodb/latest/mongodb/#note-on-connecting-to-atlas-deployments: \u00a7\n\u27e832\u27e9 https://docs.rs/mongodb/latest/mongodb/#windows-dns-note: \u00a7\n\u27e833\u27e9 https://docs.rs/mongodb/latest/mongodb/#warning-about-timeouts--cancellation: \u00a7\n\u27e834\u27e9 https://docs.rs/tokio/1.10.1/tokio/time/fn.timeout.html: `tokio::time::timeout`\n\u27e835\u27e9 https://jira.mongodb.org/browse/RUST-937: RUST-937\n\u27e836\u27e9 https://docs.rs/tokio/1.10.1/tokio/task/struct.JoinHandle.html: `JoinHandle`\n\u27e837\u27e9 https://docs.rs/mongodb/latest/mongodb/#bug-reporting--feature-requests: \u00a7\n\u27e838\u27e9 https://jira.mongodb.org/browse/RUST: Jira project\n\u27e839\u27e9 https://jira.mongodb.org: jira.mongodb.org\n\u27e840\u27e9 https://docs.rs/mongodb/latest/mongodb/#contributing: \u00a7\n\u27e841\u27e9 https://docs.rs/mongodb/latest/mongodb/#running-the-tests: testing section\n\u27e842\u27e9 https://docs.rs/mongodb/latest/mongodb/#continuous-integration: continuous integration\n\u27e843\u27e9 https://docs.rs/mongodb/latest/mongodb/#integration-and-unit-tests: \u00a7\n\u27e844\u27e9 https://www.mongodb.com/docs/manual/reference/connection-string/: MongoDB connection string\n\u27e845\u27e9 https://docs.rs/mongodb/latest/mongodb/#auth-tests: \u00a7\n\u27e846\u27e9 https://docs.rs/mongodb/latest/mongodb/#topology-specific-tests: \u00a7\n\u27e847\u27e9 https://docs.rs/mongodb/latest/mongodb/#run-the-tests-with-tlsssl: \u00a7\n\u27e848\u27e9 https://docs.rs/mongodb/latest/mongodb/#linter-tests: \u00a7\n\u27e849\u27e9 https://evergreen.mongodb.com/waterfall/mongo-rust-driver: evergreen\n\u27e850\u27e9 https://docs.rs/mongodb/latest/mongodb/#license: \u00a7\n\u27e851\u27e9 https://github.com/10gen/mongo-rust-driver/blob/main/LICENSE: Apache License 2.0\n\u27e852\u27e9 https://docs.rs/mongodb/latest/mongodb/#reexports: \u00a7\n\u27e853\u27e9 https://docs.rs/mongodb/latest/mongodb/#modules: \u00a7\n\u27e854\u27e9 https://docs.rs/mongodb/latest/mongodb/action/index.html: mod mongodb::action - action\n\u27e855\u27e9 https://docs.rs/mongodb/latest/mongodb/change_stream/index.html: mod mongodb::change_stream - change_stream\n\u27e856\u27e9 https://docs.rs/mongodb/latest/mongodb/client_encryption/index.html: mod mongodb::client_encryption - client_encryption\n\u27e857\u27e9 https://docs.rs/mongodb/latest/mongodb/error/index.html: mod mongodb::error - error\n\u27e858\u27e9 https://docs.rs/mongodb/latest/mongodb/event/index.html: mod mongodb::event - event\n\u27e859\u27e9 https://docs.rs/mongodb/latest/mongodb/gridfs/index.html: mod mongodb::gridfs - gridfs\n\u27e860\u27e9 https://docs.rs/mongodb/latest/mongodb/options/index.html: mod mongodb::options - options\n\u27e861\u27e9 https://docs.rs/mongodb/latest/mongodb/results/index.html: mod mongodb::results - results\n\u27e862\u27e9 https://docs.rs/mongodb/latest/mongodb/sync/index.html: mod mongodb::sync - sync\n\u27e863\u27e9 https://docs.rs/mongodb/latest/mongodb/#structs: \u00a7\n\u27e864\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.Client.html: struct mongodb::Client - Client\n\u27e865\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.ClientSession.html: struct mongodb::ClientSession - ClientSession\n\u27e866\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.ClusterTime.html: struct mongodb::ClusterTime - ClusterTime\n\u27e867\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.Collection.html: struct mongodb::Collection - Collection\n\u27e868\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.Database.html: `Database`\n\u27e869\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.Database.html#method.collection: `Database::collection`\n\u27e870\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.Database.html#method.collection_with_options: `Database::collection_with_options`\n\u27e871\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.Cursor.html: struct mongodb::Cursor - Cursor\n\u27e872\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.Client.html#method.database: `Client::database`\n\u27e873\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.Client.html#method.database_with_options: `Client::database_with_options`\n\u27e874\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.IndexModel.html: struct mongodb::IndexModel - IndexModel\n\u27e875\u27e9 https://www.mongodb.com/docs/manual/indexes/: documentation\n\u27e876\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.Namespace.html: struct mongodb::Namespace - Namespace\n\u27e877\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.SearchIndexModel.html: struct mongodb::SearchIndexModel - SearchIndexModel\n\u27e878\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.ServerInfo.html: struct mongodb::ServerInfo - ServerInfo\n\u27e879\u27e9 https://specifications.readthedocs.io/en/latest/server-discovery-and-monitoring/server-discovery-and-monitoring/: Server Discovery and Monitoring specification\n\u27e880\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.SessionCursor.html: struct mongodb::SessionCursor - SessionCursor\n\u27e881\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.SessionCursor.html#method.next: method mongodb::SessionCursor::next - `SessionCursor::next`\n\u27e882\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.SessionCursorStream.html: struct mongodb::SessionCursorStream - `SessionCursorStream`\n\u27e883\u27e9 https://docs.rs/mongodb/latest/mongodb/struct.SessionCursor.html#method.stream: method mongodb::SessionCursor::stream - `SessionCursor::stream`\n\u27e884\u27e9 https://docs.rs/futures/latest/futures/stream/index.html: `Stream`\n\u27e885\u27e9 https://docs.rs/mongodb/latest/mongodb/#enums: \u00a7\n\u27e886\u27e9 https://docs.rs/mongodb/latest/mongodb/enum.SearchIndexType.html: enum mongodb::SearchIndexType - SearchIndexType\n\u27e887\u27e9 https://docs.rs/mongodb/latest/mongodb/enum.ServerType.html: enum mongodb::ServerType - ServerType\n\u27e888\u27e9 https://docs.rs/mongodb/latest/mongodb/enum.TopologyType.html: enum mongodb::TopologyType - TopologyType\n\u27e889\u27e9 https://docs.rs/mongodb/latest/mongodb/#types: \u00a7\n\u27e890\u27e9 https://docs.rs/mongodb/latest/mongodb/type.BoxFuture.html: type mongodb::BoxFuture - BoxFuture\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `mongodb` crate is the official MongoDB Rust driver, offering both asynchronous and optional synchronous APIs for interacting with MongoDB deployments. It supports BSON via the `bson` crate, integrates with `tokio`, and includes features like TLS handling, AWS authentication, and compression mechanisms. Additional capabilities include change streams, GridFS operations, client-side encryption, and compatibility with popular web frameworks like Actix and Rocket.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Async and Sync API Support  \n\u2705 Factual: The `mongodb` crate provides a fully async API by default, requiring the `tokio` runtime, and also offers a synchronous API that can be enabled via the `\"sync\"` feature flag.  \n\u274c Counterfactual: The `mongodb` crate only supports synchronous operations and does not provide an async API for use with `tokio`.  \n\n---\n\n### Pair 2: Minimum Supported Rust Version (MSRV)  \n\u2705 Factual: The minimum supported Rust version (MSRV) for the `mongodb` crate is 1.71.1, and this version is rarely increased except in minor or major releases.  \n\u274c Counterfactual: The `mongodb` crate supports Rust versions as old as 1.50.0, making it compatible with older projects without requiring upgrades.  \n\n---\n\n### Pair 3: TLS Connection Handling  \n\u2705 Factual: The `mongodb` crate supports TLS connection handling through either `rustls` (enabled by default) or `openssl`, which can be selected via feature flags.  \n\u274c Counterfactual: The `mongodb` crate does not support TLS connection handling, requiring developers to implement their own encryption mechanisms for secure communication.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}