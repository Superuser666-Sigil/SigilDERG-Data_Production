{
    "name": "hyper",
    "version": "1.6.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/hyper/latest/hyper/all.html \"show sidebar\")\n# Crate hyperCopy item path\n[Settings](https://docs.rs/hyper/latest/settings.html)\n[Help](https://docs.rs/hyper/latest/help.html)\nSummary[Source](https://docs.rs/hyper/latest/src/hyper/lib.rs.html#1-139)\nExpand description\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#hyper)hyper\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#features)Features\n  * HTTP/1 and HTTP/2\n  * Asynchronous design\n  * Leading in performance\n  * Tested and **correct**\n  * Extensive production use\n  * [Client](https://docs.rs/hyper/latest/hyper/client/index.html) and [Server](https://docs.rs/hyper/latest/hyper/server/index.html) APIs\n\n\nIf just starting out, **check out the[Guides](https://hyper.rs/guides/1/) first.**\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#low-level)\u201cLow-level\u201d\nhyper is a lower-level HTTP library, meant to be a building block for libraries and applications.\nIf looking for just a convenient HTTP client, consider the [reqwest](https://crates.io/crates/reqwest) crate.\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#optional-features)Optional Features\nhyper uses a set of [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section) to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, hyper does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used.\nIf you are new to hyper it is possible to enable the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\nThe following optional features are available:\n  * `http1`: Enables HTTP/1 support.\n  * `http2`: Enables HTTP/2 support.\n  * `client`: Enables the HTTP `client`.\n  * `server`: Enables the HTTP `server`.\n\n\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#unstable-features)Unstable Features\nhyper includes a set of unstable optional features that can be enabled through the use of a feature flag and a [configuration flag](https://doc.rust-lang.org/reference/conditional-compilation.html).\nThe following is a list of feature flags and their corresponding `RUSTFLAG`:\n  * `ffi`: Enables C API for hyper `hyper_unstable_ffi`.\n  * `tracing`: Enables debug logging with `hyper_unstable_tracing`.\n\n\nFor example:\n```\nRUSTFLAGS=\"--cfg hyper_unstable_tracing\" cargo build\n```\n\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#stability)Stability\nIt\u2019s worth talking a bit about the stability of hyper. hyper\u2019s API follows [SemVer](https://semver.org). Breaking changes will only be introduced in major versions, if ever. New additions to the API, such as new types, methods, or traits will only be added in minor versions.\nSome parts of hyper are documented as NOT being part of the stable API. The following is a brief list, you can read more about each one in the relevant part of the documentation.\n  * Downcasting error types from `Error::source()` is not considered stable.\n  * Private dependencies use of global variables is not considered stable. So, if a dependency uses `log` or `tracing`, hyper doesn\u2019t promise it will continue to do so.\n  * Behavior from default options is not stable. hyper reserves the right to add new options that are enabled by default which might alter the behavior, for the purposes of protection. It is also possible to _change_ what the default options are set to, also in efforts to protect the most people possible.\n\n\n## Re-exports[\u00a7](https://docs.rs/hyper/latest/hyper/#reexports)\n\n`pub use http::header[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/index.html \"mod http::header\");`\n\n\n`pub use http::HeaderMap[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/map/struct.HeaderMap.html \"struct http::header::map::HeaderMap\");`\n\n\n`pub use http::Method[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/method/struct.Method.html \"struct http::method::Method\");`\n\n\n`pub use http::Request[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\");`\n\n\n`pub use http::Response[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\");`\n\n\n`pub use http::StatusCode[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/status/struct.StatusCode.html \"struct http::status::StatusCode\");`\n\n\n`pub use http::Uri[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/uri/struct.Uri.html \"struct http::uri::Uri\");`\n\n\n`pub use http::Version[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/version/struct.Version.html \"struct http::version::Version\");`\n\n## Modules[\u00a7](https://docs.rs/hyper/latest/hyper/#modules)\n\n[body](https://docs.rs/hyper/latest/hyper/body/index.html \"mod hyper::body\")\n    Streaming bodies for Requests and Responses\n\n[client](https://docs.rs/hyper/latest/hyper/client/index.html \"mod hyper::client\")`client`\n    HTTP Client\n\n[ext](https://docs.rs/hyper/latest/hyper/ext/index.html \"mod hyper::ext\")\n    HTTP extensions.\n\n[ffi](https://docs.rs/hyper/latest/hyper/ffi/index.html \"mod hyper::ffi\")`ffi` and `hyper_unstable_ffi`\n    hyper C API\n\n[rt](https://docs.rs/hyper/latest/hyper/rt/index.html \"mod hyper::rt\")\n    Runtime components\n\n[server](https://docs.rs/hyper/latest/hyper/server/index.html \"mod hyper::server\")`server`\n    HTTP Server\n\n[service](https://docs.rs/hyper/latest/hyper/service/index.html \"mod hyper::service\")\n    Asynchronous Services\n\n[upgrade](https://docs.rs/hyper/latest/hyper/upgrade/index.html \"mod hyper::upgrade\")\n    HTTP Upgrades\n## Structs[\u00a7](https://docs.rs/hyper/latest/hyper/#structs)\n\n[Error](https://docs.rs/hyper/latest/hyper/struct.Error.html \"struct hyper::Error\")\n    Represents errors that can occur handling HTTP streams.\n## Type Aliases[\u00a7](https://docs.rs/hyper/latest/hyper/#types)\n\n[Result](https://docs.rs/hyper/latest/hyper/type.Result.html \"type hyper::Result\")\n    Result type often returned from methods that can have hyper `Error`s.\n",
        "markdown_with_citations": "[](https://docs.rs/hyper/latest/hyper/all.html \"show sidebar\")\n# Crate hyperCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9hyper\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n### \u00a7\u27e85\u27e9Features\n  * HTTP/1 and HTTP/2\n  * Asynchronous design\n  * Leading in performance\n  * Tested and **correct**\n  * Extensive production use\n  * Client\u27e86\u27e9 and Server\u27e87\u27e9 APIs\n\n\nIf just starting out, **check out theGuides\u27e88\u27e9 first.**\n### \u00a7\u27e89\u27e9\u201cLow-level\u201d\nhyper is a lower-level HTTP library, meant to be a building block for libraries and applications.\nIf looking for just a convenient HTTP client, consider the reqwest\u27e810\u27e9 crate.\n## \u00a7\u27e811\u27e9Optional Features\nhyper uses a set of feature flags\u27e812\u27e9 to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, hyper does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used.\nIf you are new to hyper it is possible to enable the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\nThe following optional features are available:\n  * `http1`: Enables HTTP/1 support.\n  * `http2`: Enables HTTP/2 support.\n  * `client`: Enables the HTTP `client`.\n  * `server`: Enables the HTTP `server`.\n\n\n### \u00a7\u27e813\u27e9Unstable Features\nhyper includes a set of unstable optional features that can be enabled through the use of a feature flag and a configuration flag\u27e814\u27e9.\nThe following is a list of feature flags and their corresponding `RUSTFLAG`:\n  * `ffi`: Enables C API for hyper `hyper_unstable_ffi`.\n  * `tracing`: Enables debug logging with `hyper_unstable_tracing`.\n\n\nFor example:\n```\nRUSTFLAGS=\"--cfg hyper_unstable_tracing\" cargo build\n```\n\n## \u00a7\u27e815\u27e9Stability\nIt\u2019s worth talking a bit about the stability of hyper. hyper\u2019s API follows SemVer\u27e816\u27e9. Breaking changes will only be introduced in major versions, if ever. New additions to the API, such as new types, methods, or traits will only be added in minor versions.\nSome parts of hyper are documented as NOT being part of the stable API. The following is a brief list, you can read more about each one in the relevant part of the documentation.\n  * Downcasting error types from `Error::source()` is not considered stable.\n  * Private dependencies use of global variables is not considered stable. So, if a dependency uses `log` or `tracing`, hyper doesn\u2019t promise it will continue to do so.\n  * Behavior from default options is not stable. hyper reserves the right to add new options that are enabled by default which might alter the behavior, for the purposes of protection. It is also possible to _change_ what the default options are set to, also in efforts to protect the most people possible.\n\n\n## Re-exports\u00a7\u27e817\u27e9\n\n`pub use http::header[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/index.html \"mod http::header\");`\n\n\n`pub use http::HeaderMap[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/map/struct.HeaderMap.html \"struct http::header::map::HeaderMap\");`\n\n\n`pub use http::Method[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/method/struct.Method.html \"struct http::method::Method\");`\n\n\n`pub use http::Request[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\");`\n\n\n`pub use http::Response[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\");`\n\n\n`pub use http::StatusCode[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/status/struct.StatusCode.html \"struct http::status::StatusCode\");`\n\n\n`pub use http::Uri[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/uri/struct.Uri.html \"struct http::uri::Uri\");`\n\n\n`pub use http::Version[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/version/struct.Version.html \"struct http::version::Version\");`\n\n## Modules\u00a7\u27e818\u27e9\n\nbody\u27e819\u27e9\n    Streaming bodies for Requests and Responses\n\nclient\u27e86\u27e9`client`\n    HTTP Client\n\next\u27e820\u27e9\n    HTTP extensions.\n\nffi\u27e821\u27e9`ffi` and `hyper_unstable_ffi`\n    hyper C API\n\nrt\u27e822\u27e9\n    Runtime components\n\nserver\u27e87\u27e9`server`\n    HTTP Server\n\nservice\u27e823\u27e9\n    Asynchronous Services\n\nupgrade\u27e824\u27e9\n    HTTP Upgrades\n## Structs\u00a7\u27e825\u27e9\n\nError\u27e826\u27e9\n    Represents errors that can occur handling HTTP streams.\n## Type Aliases\u00a7\u27e827\u27e9\n\nResult\u27e828\u27e9\n    Result type often returned from methods that can have hyper `Error`s.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/hyper/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/hyper/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/hyper/latest/src/hyper/lib.rs.html#1-139: Source\n\u27e84\u27e9 https://docs.rs/hyper/latest/hyper/#hyper: \u00a7\n\u27e85\u27e9 https://docs.rs/hyper/latest/hyper/#features: \u00a7\n\u27e86\u27e9 https://docs.rs/hyper/latest/hyper/client/index.html: Client\n\u27e87\u27e9 https://docs.rs/hyper/latest/hyper/server/index.html: Server\n\u27e88\u27e9 https://hyper.rs/guides/1/: Guides\n\u27e89\u27e9 https://docs.rs/hyper/latest/hyper/#low-level: \u00a7\n\u27e810\u27e9 https://crates.io/crates/reqwest: reqwest\n\u27e811\u27e9 https://docs.rs/hyper/latest/hyper/#optional-features: \u00a7\n\u27e812\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e813\u27e9 https://docs.rs/hyper/latest/hyper/#unstable-features: \u00a7\n\u27e814\u27e9 https://doc.rust-lang.org/reference/conditional-compilation.html: configuration flag\n\u27e815\u27e9 https://docs.rs/hyper/latest/hyper/#stability: \u00a7\n\u27e816\u27e9 https://semver.org: SemVer\n\u27e817\u27e9 https://docs.rs/hyper/latest/hyper/#reexports: \u00a7\n\u27e818\u27e9 https://docs.rs/hyper/latest/hyper/#modules: \u00a7\n\u27e819\u27e9 https://docs.rs/hyper/latest/hyper/body/index.html: mod hyper::body - body\n\u27e820\u27e9 https://docs.rs/hyper/latest/hyper/ext/index.html: mod hyper::ext - ext\n\u27e821\u27e9 https://docs.rs/hyper/latest/hyper/ffi/index.html: mod hyper::ffi - ffi\n\u27e822\u27e9 https://docs.rs/hyper/latest/hyper/rt/index.html: mod hyper::rt - rt\n\u27e823\u27e9 https://docs.rs/hyper/latest/hyper/service/index.html: mod hyper::service - service\n\u27e824\u27e9 https://docs.rs/hyper/latest/hyper/upgrade/index.html: mod hyper::upgrade - upgrade\n\u27e825\u27e9 https://docs.rs/hyper/latest/hyper/#structs: \u00a7\n\u27e826\u27e9 https://docs.rs/hyper/latest/hyper/struct.Error.html: struct hyper::Error - Error\n\u27e827\u27e9 https://docs.rs/hyper/latest/hyper/#types: \u00a7\n\u27e828\u27e9 https://docs.rs/hyper/latest/hyper/type.Result.html: type hyper::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `hyper` crate is a fast, correct, and asynchronous HTTP implementation for Rust, designed as a low-level building block for HTTP clients and servers. It supports both HTTP/1 and HTTP/2, offers modular feature flags for tailored functionality, and provides APIs for client-server communication. With extensive production use and adherence to SemVer, it is ideal for high-performance and reliable HTTP applications.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: HTTP Protocol Support  \n\u2705 **Factual**: The `hyper` crate supports both HTTP/1 and HTTP/2 protocols, enabling developers to build applications that work with modern and legacy HTTP standards.  \n\u274c **Counterfactual**: The `hyper` crate exclusively supports HTTP/2 and does not provide support for HTTP/1, making it unsuitable for legacy systems.\n\n---\n\n### Pair 2: Asynchronous Design  \n\u2705 **Factual**: `hyper` is designed with asynchronous programming in mind, leveraging Rust's `async`/`await` syntax to handle high-performance HTTP operations efficiently.  \n\u274c **Counterfactual**: `hyper` relies entirely on synchronous programming models and does not support asynchronous design, limiting its scalability for concurrent workloads.\n\n---\n\n### Pair 3: Feature Flags  \n\u2705 **Factual**: The `hyper` crate uses feature flags such as `http1`, `http2`, `client`, and `server` to allow developers to selectively enable only the functionality they need, reducing compiled code size.  \n\u274c **Counterfactual**: The `hyper` crate automatically enables all features by default, including `http1`, `http2`, `client`, and `server`, regardless of whether they are needed, leading to unnecessary dependencies.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}