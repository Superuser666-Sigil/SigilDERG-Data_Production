{
    "name": "sea-orm",
    "version": "1.2.0-rc.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/sea-orm/latest/sea_orm/all.html \"show sidebar\")\n# Crate sea_ormCopy item path\n[Settings](https://docs.rs/sea-orm/latest/settings.html)\n[Help](https://docs.rs/sea-orm/latest/help.html)\nSummary[Source](https://docs.rs/sea-orm/latest/src/sea_orm/lib.rs.html#1-430)\nExpand description\n![](https://www.sea-ql.org/SeaORM/img/SeaORM banner.png)\n# SeaORM\n### \ud83d\udc1a An async & dynamic ORM for Rust\n[![crate](https://img.shields.io/crates/v/sea-orm.svg)](https://crates.io/crates/sea-orm) [![docs](https://docs.rs/sea-orm/badge.svg)](https://docs.rs/sea-orm) [![build status](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg)](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n## [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#seaorm)SeaORM\n##### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#seaorm-is-a-relational-orm-to-help-you-build-web-services-in-rust-with-the-familiarity-of-dynamic-languages)SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n[![GitHub stars](https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1)](https://github.com/SeaQL/sea-orm/stargazers/) If you like what we do, consider starring, sharing and contributing!\nPlease help us with maintaining SeaORM by completing the [SeaQL Community Survey 2024](https://sea-ql.org/community-survey)!\n[![Discord](https://img.shields.io/discord/873880840487206962?label=Discord)](https://discord.com/invite/uCPdDXzbdv) Join our Discord server to chat with other members of the SeaQL community!\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#getting-started)Getting Started\n  * [Documentation](https://www.sea-ql.org/SeaORM)\n  * [Tutorial](https://www.sea-ql.org/sea-orm-tutorial)\n  * [Cookbook](https://www.sea-ql.org/sea-orm-cookbook)\n\n\nIntegration examples:\n  * [Actix v4 Example](https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example)\n  * [Axum Example](https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example)\n  * [GraphQL Example](https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example)\n  * [jsonrpsee Example](https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example)\n  * [Loco TODO Example](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example) / [Loco REST Starter](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter)\n  * [Poem Example](https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example)\n  * [Rocket Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example) / [Rocket OpenAPI Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example)\n  * [Salvo Example](https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example)\n  * [Tonic Example](https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example)\n  * [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example)\n\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#features)Features\n  1. Async\nRelying on [SQLx](https://github.com/launchbadge/sqlx), SeaORM is a new library with async support from day 1.\n  2. Dynamic\nBuilt upon [SeaQuery](https://github.com/SeaQL/sea-query), SeaORM allows you to build complex dynamic queries.\n  3. Service Oriented\nQuickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n  4. Production Ready\nSeaORM is feature-rich, well-tested and used in production by companies and startups.\n\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#a-quick-taste-of-seaorm)A quick taste of SeaORM\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#entity)Entity\n```\nuse sea_orm::entity::prelude::*;\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n  #[sea_orm(primary_key)]\n  pub id: i32,\n  pub name: String,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n  #[sea_orm(has_many = \"super::fruit::Entity\")]\n  Fruit,\n}\nimpl Related<super::fruit::Entity> for Entity {\n  fn to() -> RelationDef {\n    Relation::Fruit.def()\n  }\n}\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#select)Select\n```\n// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n  .filter(cake::Column::Name.contains(\"chocolate\"))\n  .all(db)\n  .await?;\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n  Cake::find().find_with_related(Fruit).all(db).await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#insert)Insert\n```\nlet apple = fruit::ActiveModel {\n  name: Set(\"Apple\".to_owned()),\n  ..Default::default() // no need to set primary key\n};\nlet pear = fruit::ActiveModel {\n  name: Set(\"Pear\".to_owned()),\n  ..Default::default()\n};\n// insert one\nlet pear = pear.insert(db).await?;\n// insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#update)Update\n```\nuse sea_orm::sea_query::{Expr, Value};\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\npear.name = Set(\"Sweet pear\".to_owned());\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n// update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'\nFruit::update_many()\n  .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n  .filter(fruit::Column::Name.contains(\"Apple\"))\n  .exec(db)\n  .await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#save)Save\n```\nlet banana = fruit::ActiveModel {\n  id: NotSet,\n  name: Set(\"Banana\".to_owned()),\n  ..Default::default()\n};\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\nbanana.name = Set(\"Banana Mongo\".to_owned());\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#delete)Delete\n```\n// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n  .exec(db)\n  .await?;\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n// delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'\nfruit::Entity::delete_many()\n  .filter(fruit::Column::Name.contains(\"Orange\"))\n  .exec(db)\n  .await?;\n\n```\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#-seaography-instant-graphql-api)\ud83e\udded Seaography: instant GraphQL API\n[Seaography](https://github.com/SeaQL/seaography) is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\nLook at the [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example) to learn more.\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#-seaorm-pro-effortless-admin-panel)\ud83d\udda5\ufe0f SeaORM Pro: Effortless Admin Panel\n[SeaORM Pro](https://www.sea-ql.org/sea-orm-pro/) is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!\nFeatures:\n  * Full CRUD\n  * Built on React + GraphQL\n  * Built-in GraphQL resolver\n  * Customize the UI with simple TOML\n\n\nLearn More\n  * [Example Repo](https://github.com/SeaQL/sea-orm-pro)\n  * [Getting Started with Loco](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/)\n  * [Getting Started with Axum](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/)\n\n\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-dark.png#gh-dark-mode-only) ![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-light.png#gh-light-mode-only)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#releases)Releases\n[SeaORM 1.0](https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/) is a stable release. The 1.x version will be updated until at least October 2025, and we\u2019ll decide whether to release a 2.0 version or extend the 1.x life cycle.\nIt doesn\u2019t mean that SeaORM is \u2018done\u2019, we\u2019ve designed an architecture to allow us to deliver new features without major breaking changes. In fact, more features are coming!\n  * [Change Log](https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md)\n\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#whos-using-seaorm)Who\u2019s using SeaORM?\nHere is a short list of awesome open source software built with SeaORM. [Full list here](https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm). Feel free to submit yours!\nProject| GitHub| Tagline  \n---|---|---  \n[Zed](https://github.com/zed-industries/zed)| ![GitHub stars](https://img.shields.io/github/stars/zed-industries/zed.svg?style=social)| A high-performance, multiplayer code editor  \n[OpenObserve](https://github.com/openobserve/openobserve)| ![GitHub stars](https://img.shields.io/github/stars/openobserve/openobserve.svg?style=social)| Open-source observability platform  \n[RisingWave](https://github.com/risingwavelabs/risingwave)| ![GitHub stars](https://img.shields.io/github/stars/risingwavelabs/risingwave.svg?style=social)| Stream processing and management platform  \n[LLDAP](https://github.com/nitnelave/lldap)| ![GitHub stars](https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social)| A light LDAP server for user management  \n[Warpgate](https://github.com/warp-tech/warpgate)| ![GitHub stars](https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social)| Smart SSH bastion that works with any SSH client  \n[Svix](https://github.com/svix/svix-webhooks)| ![GitHub stars](https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social)| The enterprise ready webhooks service  \n[Ryot](https://github.com/IgnisDa/ryot)| ![GitHub stars](https://img.shields.io/github/stars/ignisda/ryot.svg?style=social)| The only self hosted tracker you will ever need  \n[Lapdev](https://github.com/lapce/lapdev)| ![GitHub stars](https://img.shields.io/github/stars/lapce/lapdev.svg?style=social)| Self-hosted remote development enviroment  \n[System Initiative](https://github.com/systeminit/si)| ![GitHub stars](https://img.shields.io/github/stars/systeminit/si.svg?style=social)| DevOps Automation Platform  \n[OctoBase](https://github.com/toeverything/OctoBase)| ![GitHub stars](https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social)| A light-weight, scalable, offline collaborative data backend  \n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#license)License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://docs.rs/sea-orm/latest/sea_orm/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://docs.rs/sea-orm/latest/sea_orm/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nWe invite you to participate, contribute and together help build Rust\u2019s future.\nA big shout out to our contributors!\n[![Contributors](https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false)](https://github.com/SeaQL/sea-orm/graphs/contributors)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#sponsorship)Sponsorship\n[SeaQL.org](https://www.sea-ql.org/) is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via [GitHub Sponsor](https://github.com/sponsors/SeaQL) will be greatly appreciated, and goes a long way towards sustaining the organization.\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#silver-sponsors)Silver Sponsors\n[ ![](https://www.sea-ql.org/static/sponsors/DigitalOcean.svg) ](https://www.digitalocean.com/) | [ ![](https://www.sea-ql.org/static/sponsors/JetBrains.svg) ](https://www.jetbrains.com/)  \n---|---  \nWe\u2019re immensely grateful to our sponsors: Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#mascot)Mascot\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n![Terres](https://www.sea-ql.org/SeaORM/img/Terres.png)\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#rustacean-sticker-pack-)Rustacean Sticker Pack \ud83e\udd80\nThe Rustacean Sticker Pack is the perfect way to express your passion for Rust. Our stickers are made with a premium water-resistant vinyl with a unique matte finish. Stick them on your laptop, notebook, or any gadget to show off your love for Rust!\nSticker Pack Contents:\n  * Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG\n  * Mascot of SeaQL: Terres the Hermit Crab\n  * Mascot of Rust: Ferris the Crab\n  * The Rustacean word\n\n\n[Support SeaQL and get a Sticker Pack!](https://www.sea-ql.org/sticker-pack/) All proceeds contributes directly to the ongoing development of SeaQL projects.\n[![Rustacean Sticker Pack by SeaQL](https://www.sea-ql.org/static/sticker-pack-1s.jpg)](https://www.sea-ql.org/sticker-pack/)\n## Re-exports[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#reexports)\n\n`pub use crate::error::TryGetError[](https://docs.rs/sea-orm/latest/sea_orm/error/enum.TryGetError.html \"enum sea_orm::error::TryGetError\");`\n\n\n`pub use sea_query[](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/index.html \"mod sea_query\");`\n\n\n`pub use strum[](https://docs.rs/strum/0.26.3/x86_64-unknown-linux-gnu/strum/index.html \"mod strum\");`\n\n\n`pub use sqlx[](https://docs.rs/sqlx/0.8.6/x86_64-unknown-linux-gnu/sqlx/index.html \"mod sqlx\");`\n\n\n`pub use entity[](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")::*;`\n\n\n`pub use error[](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")::*;`\n\n\n`pub use query[](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")::*;`\n\n\n`pub use schema[](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")::*;`\n\n## Modules[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#modules)\n\n[entity](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")\n    Module for the Entity type and operations\n\n[error](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")\n    Error types for all database operations\n\n[metric](https://docs.rs/sea-orm/latest/sea_orm/metric/index.html \"mod sea_orm::metric\")\n    Types and methods to perform metric collection\n\n[query](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")\n    Types and methods to perform queries\n\n[schema](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")\n    Types that defines the schemas of an Entity\n\n[value](https://docs.rs/sea-orm/latest/sea_orm/value/index.html \"mod sea_orm::value\")\n    Helpers for working with Value\n## Macros[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#macros)\n\n[debug_print](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_print.html \"macro sea_orm::debug_print\")\n    Non-debug version\n\n[debug_query](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query.html \"macro sea_orm::debug_query\")\n    Helper to get a raw SQL string from an object that impl `QueryTrait`.\n\n[debug_query_stmt](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query_stmt.html \"macro sea_orm::debug_query_stmt\")\n    Helper to get a `Statement` from an object that impl `QueryTrait`.\n## Structs[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#structs)\n\n[ConnectOptions](https://docs.rs/sea-orm/latest/sea_orm/struct.ConnectOptions.html \"struct sea_orm::ConnectOptions\")\n    Defines the configuration options of a database\n\n[Cursor](https://docs.rs/sea-orm/latest/sea_orm/struct.Cursor.html \"struct sea_orm::Cursor\")\n    Cursor pagination\n\n[Database](https://docs.rs/sea-orm/latest/sea_orm/struct.Database.html \"struct sea_orm::Database\")\n    Defines a database\n\n[DatabaseTransaction](https://docs.rs/sea-orm/latest/sea_orm/struct.DatabaseTransaction.html \"struct sea_orm::DatabaseTransaction\")\n    Defines a database transaction, whether it is an open transaction and the type of backend to use\n\n[DeleteResult](https://docs.rs/sea-orm/latest/sea_orm/struct.DeleteResult.html \"struct sea_orm::DeleteResult\")\n    The result of a DELETE operation\n\n[Deleter](https://docs.rs/sea-orm/latest/sea_orm/struct.Deleter.html \"struct sea_orm::Deleter\")\n    Handles DELETE operations in a ActiveModel using [DeleteStatement](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/delete/struct.DeleteStatement.html \"struct sea_query::query::delete::DeleteStatement\")\n\n[ExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.ExecResult.html \"struct sea_orm::ExecResult\")\n    Defines the result of executing an operation\n\n[InsertResult](https://docs.rs/sea-orm/latest/sea_orm/struct.InsertResult.html \"struct sea_orm::InsertResult\")\n    The result of an INSERT operation on an ActiveModel\n\n[Inserter](https://docs.rs/sea-orm/latest/sea_orm/struct.Inserter.html \"struct sea_orm::Inserter\")\n    Defines a structure to perform INSERT operations in an ActiveModel\n\n[ItemsAndPagesNumber](https://docs.rs/sea-orm/latest/sea_orm/struct.ItemsAndPagesNumber.html \"struct sea_orm::ItemsAndPagesNumber\")\n    Define a structure containing the numbers of items and pages of a Paginator\n\n[MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")`mock`\n    Defines a Mock database suitable for testing\n\n[MockDatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnection.html \"struct sea_orm::MockDatabaseConnection\")\n    Defines a connection for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockDatabaseConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnector.html \"struct sea_orm::MockDatabaseConnector\")\n    Defines a database driver for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.MockExecResult.html \"struct sea_orm::MockExecResult\")`mock`\n    Defines the results obtained from a [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockRow](https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html \"struct sea_orm::MockRow\")`mock`\n    Defines the structure of a test Row for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\") which is just a [BTreeMap](https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html \"struct alloc::collections::btree::map::BTreeMap\")<[String](https://doc.rust-lang.org/nightly/alloc/string/struct.String.html \"struct alloc::string::String\"), [Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")>\n\n[OpenTransaction](https://docs.rs/sea-orm/latest/sea_orm/struct.OpenTransaction.html \"struct sea_orm::OpenTransaction\")`mock`\n    Defines a transaction that is has not been committed\n\n[Paginator](https://docs.rs/sea-orm/latest/sea_orm/struct.Paginator.html \"struct sea_orm::Paginator\")\n    Defined a structure to handle pagination of a result from a query operation on a Model\n\n[ProxyDatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnection.html \"struct sea_orm::ProxyDatabaseConnection\")\n    Defines a connection for the [ProxyDatabase]\n\n[ProxyDatabaseConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnector.html \"struct sea_orm::ProxyDatabaseConnector\")\n    Defines a database driver for the [ProxyDatabase]\n\n[ProxyExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyExecResult.html \"struct sea_orm::ProxyExecResult\")`proxy`\n    Defines the results obtained from a [ProxyDatabase]\n\n[ProxyRow](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html \"struct sea_orm::ProxyRow\")`proxy`\n    Defines the structure of a Row for the [ProxyDatabase] which is just a [BTreeMap](https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html \"struct alloc::collections::btree::map::BTreeMap\")<[String](https://doc.rust-lang.org/nightly/alloc/string/struct.String.html \"struct alloc::string::String\"), [Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")>\n\n[QueryResult](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html \"struct sea_orm::QueryResult\")\n    Defines the result of a query operation on a Model\n\n[QueryStream](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryStream.html \"struct sea_orm::QueryStream\")\n    The self-referencing struct.\n\n[SelectGetableTuple](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableTuple.html \"struct sea_orm::SelectGetableTuple\")\n    Get tuple from query result based on column index\n\n[SelectGetableValue](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableValue.html \"struct sea_orm::SelectGetableValue\")\n    Get tuple from query result based on a list of column identifiers\n\n[SelectModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectModel.html \"struct sea_orm::SelectModel\")\n    Helper class to handle query result for 1 Model\n\n[SelectThreeModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectThreeModel.html \"struct sea_orm::SelectThreeModel\")\n    Helper class to handle query result for 3 Models\n\n[SelectTwoModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectTwoModel.html \"struct sea_orm::SelectTwoModel\")\n    Helper class to handle query result for 2 Models\n\n[Selector](https://docs.rs/sea-orm/latest/sea_orm/struct.Selector.html \"struct sea_orm::Selector\")\n    Defines a type to do `SELECT` operations through a [SelectStatement](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/select/struct.SelectStatement.html \"struct sea_query::query::select::SelectStatement\") on a Model\n\n[SelectorRaw](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectorRaw.html \"struct sea_orm::SelectorRaw\")\n    Performs a raw `SELECT` operation on a model\n\n[SqlxMySqlConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlConnector.html \"struct sea_orm::SqlxMySqlConnector\")\n    Defines the [sqlx::mysql](https://docs.rs/sqlx-mysql/0.8.6/x86_64-unknown-linux-gnu/sqlx_mysql/index.html \"mod sqlx_mysql\") connector\n\n[SqlxMySqlPoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlPoolConnection.html \"struct sea_orm::SqlxMySqlPoolConnection\")\n    Defines a sqlx MySQL pool\n\n[SqlxPostgresConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresConnector.html \"struct sea_orm::SqlxPostgresConnector\")\n    Defines the [sqlx::postgres](https://docs.rs/sqlx-postgres/0.8.6/x86_64-unknown-linux-gnu/sqlx_postgres/index.html \"mod sqlx_postgres\") connector\n\n[SqlxPostgresPoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresPoolConnection.html \"struct sea_orm::SqlxPostgresPoolConnection\")\n    Defines a sqlx PostgreSQL pool\n\n[SqlxSqliteConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqliteConnector.html \"struct sea_orm::SqlxSqliteConnector\")\n    Defines the [sqlx::sqlite](https://docs.rs/sqlx-sqlite/0.8.6/x86_64-unknown-linux-gnu/sqlx_sqlite/index.html \"mod sqlx_sqlite\") connector\n\n[SqlxSqlitePoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqlitePoolConnection.html \"struct sea_orm::SqlxSqlitePoolConnection\")\n    Defines a sqlx SQLite pool\n\n[Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")\n    Defines an SQL statement\n\n[Transaction](https://docs.rs/sea-orm/latest/sea_orm/struct.Transaction.html \"struct sea_orm::Transaction\")`mock`\n    Defines a database transaction as it holds a Vec<[Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")>\n\n[TransactionStream](https://docs.rs/sea-orm/latest/sea_orm/struct.TransactionStream.html \"struct sea_orm::TransactionStream\")\n    The self-referencing struct.\n\n[UpdateResult](https://docs.rs/sea-orm/latest/sea_orm/struct.UpdateResult.html \"struct sea_orm::UpdateResult\")\n    The result of an update operation on an ActiveModel\n\n[Updater](https://docs.rs/sea-orm/latest/sea_orm/struct.Updater.html \"struct sea_orm::Updater\")\n    Defines an update operation\n\n[Values](https://docs.rs/sea-orm/latest/sea_orm/struct.Values.html \"struct sea_orm::Values\")\n\n## Enums[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#enums)\n\n[AccessMode](https://docs.rs/sea-orm/latest/sea_orm/enum.AccessMode.html \"enum sea_orm::AccessMode\")\n    Access mode\n\n[DatabaseBackend](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html \"enum sea_orm::DatabaseBackend\")\n    The type of database backend for real world databases. This is enabled by feature flags as specified in the crate documentation\n\n[DatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html \"enum sea_orm::DatabaseConnection\")\n    Handle a database connection depending on the backend enabled by the feature flags. This creates a database pool. This will be `Clone` unless the feature flag `mock` is enabled.\n\n[IsolationLevel](https://docs.rs/sea-orm/latest/sea_orm/enum.IsolationLevel.html \"enum sea_orm::IsolationLevel\")\n    Isolation level\n\n[TransactionError](https://docs.rs/sea-orm/latest/sea_orm/enum.TransactionError.html \"enum sea_orm::TransactionError\")\n    Defines errors for handling transaction failures\n\n[TryInsertResult](https://docs.rs/sea-orm/latest/sea_orm/enum.TryInsertResult.html \"enum sea_orm::TryInsertResult\")\n    The types of results for an INSERT operation\n\n[Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")\n    Value variants\n## Traits[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#traits)\n\n[ColIdx](https://docs.rs/sea-orm/latest/sea_orm/trait.ColIdx.html \"trait sea_orm::ColIdx\")\n    Column Index, used by [`TryGetable`](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html \"trait sea_orm::TryGetable\"). Implemented for `&str` and `usize`\n\n[ConnectionTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ConnectionTrait.html \"trait sea_orm::ConnectionTrait\")\n    The generic API for a database connection that can perform query or execute statements. It abstracts database connection and transaction\n\n[CursorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.CursorTrait.html \"trait sea_orm::CursorTrait\")\n    A trait for any type that can be turn into a cursor\n\n[Iden](https://docs.rs/sea-orm/latest/sea_orm/trait.Iden.html \"trait sea_orm::Iden\")\n    Identifier\n\n[IntoMockRow](https://docs.rs/sea-orm/latest/sea_orm/trait.IntoMockRow.html \"trait sea_orm::IntoMockRow\")`mock`\n    A trait to get a [MockRow](https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html \"struct sea_orm::MockRow\") from a type useful for testing in the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.MockDatabaseTrait.html \"trait sea_orm::MockDatabaseTrait\")\n    A Trait for any type wanting to perform operations on the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[PaginatorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.PaginatorTrait.html \"trait sea_orm::PaginatorTrait\")\n    A Trait for any type that can paginate results\n\n[ProxyDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html \"trait sea_orm::ProxyDatabaseTrait\")`proxy`\n    Defines the [ProxyDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html \"trait sea_orm::ProxyDatabaseTrait\") to save the functions\n\n[SelectorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.SelectorTrait.html \"trait sea_orm::SelectorTrait\")\n    A Trait for any type that can perform SELECT queries\n\n[StatementBuilder](https://docs.rs/sea-orm/latest/sea_orm/trait.StatementBuilder.html \"trait sea_orm::StatementBuilder\")\n    Any type that can build a [Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")\n\n[StreamTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.StreamTrait.html \"trait sea_orm::StreamTrait\")\n    Stream query results\n\n[TransactionTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.TransactionTrait.html \"trait sea_orm::TransactionTrait\")\n    Spawn database transaction\n\n[TryFromU64](https://docs.rs/sea-orm/latest/sea_orm/trait.TryFromU64.html \"trait sea_orm::TryFromU64\")\n    Try to convert a type to a u64\n\n[TryGetable](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html \"trait sea_orm::TryGetable\")\n    An interface to get a value from the query result\n\n[TryGetableArray](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableArray.html \"trait sea_orm::TryGetableArray\")\n    An interface to get an array of values from the query result. A type can only implement `ActiveEnum` or `TryGetableFromJson`, but not both. A blanket impl is provided for `TryGetableFromJson`, while the impl for `ActiveEnum` is provided by the `DeriveActiveEnum` macro. So as an end user you won\u2019t normally touch this trait.\n\n[TryGetableFromJson](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableFromJson.html \"trait sea_orm::TryGetableFromJson\")\n    An interface to get a JSON from the query result\n\n[TryGetableMany](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableMany.html \"trait sea_orm::TryGetableMany\")\n    An interface to get a tuple value from the query result\n## Functions[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#functions)\n\n[from_query_result_to_proxy_row](https://docs.rs/sea-orm/latest/sea_orm/fn.from_query_result_to_proxy_row.html \"fn sea_orm::from_query_result_to_proxy_row\")`proxy`\n    Convert [QueryResult](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html \"struct sea_orm::QueryResult\") to [ProxyRow](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html \"struct sea_orm::ProxyRow\")\n## Type Aliases[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#types)\n\n[DbBackend](https://docs.rs/sea-orm/latest/sea_orm/type.DbBackend.html \"type sea_orm::DbBackend\")\n    The same as [DatabaseBackend](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html \"enum sea_orm::DatabaseBackend\") just shorter :)\n\n[DbConn](https://docs.rs/sea-orm/latest/sea_orm/type.DbConn.html \"type sea_orm::DbConn\")\n    The same as a [DatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html \"enum sea_orm::DatabaseConnection\")\n\n[PinBoxStream](https://docs.rs/sea-orm/latest/sea_orm/type.PinBoxStream.html \"type sea_orm::PinBoxStream\")\n    Pin a Model so that stream operations can be performed on the model\n## Derive Macros[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#derives)\n\n[DeriveActiveEnum](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveEnum.html \"derive sea_orm::DeriveActiveEnum\")\n    A derive macro to implement `sea_orm::ActiveEnum` trait for enums.\n\n[DeriveActiveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModel.html \"derive sea_orm::DeriveActiveModel\")\n    The DeriveActiveModel derive macro will implement ActiveModelTrait for ActiveModel which provides setters and getters for all active values in the active model.\n\n[DeriveActiveModelBehavior](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModelBehavior.html \"derive sea_orm::DeriveActiveModelBehavior\")\n    Models that a user can override\n\n[DeriveColumn](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveColumn.html \"derive sea_orm::DeriveColumn\")\n    The DeriveColumn derive macro will implement [ColumnTrait] for Columns. It defines the identifier of each column by implementing Iden and IdenStatic. The EnumIter is also derived, allowing iteration over all enum variants.\n\n[DeriveCustomColumn](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveCustomColumn.html \"derive sea_orm::DeriveCustomColumn\")\n    Derive a column if column names are not in snake-case\n\n[DeriveDisplay](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveDisplay.html \"derive sea_orm::DeriveDisplay\")\n\n\n[DeriveEntity](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntity.html \"derive sea_orm::DeriveEntity\")\n    Create an Entity\n\n[DeriveEntityModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntityModel.html \"derive sea_orm::DeriveEntityModel\")\n    This derive macro is the \u2018almighty\u2019 macro which automatically generates Entity, Column, and PrimaryKey from a given Model.\n\n[DeriveIden](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIden.html \"derive sea_orm::DeriveIden\")\n    The DeriveIden derive macro will implement `sea_orm::sea_query::Iden` for simplify Iden implementation.\n\n[DeriveIntoActiveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIntoActiveModel.html \"derive sea_orm::DeriveIntoActiveModel\")\n    Derive into an active model\n\n[DeriveMigrationName](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveMigrationName.html \"derive sea_orm::DeriveMigrationName\")\n    The DeriveMigrationName derive macro will implement `sea_orm_migration::MigrationName` for a migration.\n\n[DeriveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveModel.html \"derive sea_orm::DeriveModel\")\n    The DeriveModel derive macro will implement ModelTrait for Model, which provides setters and getters for all attributes in the mod It also implements FromQueryResult to convert a query result into the corresponding Model.\n\n[DerivePartialModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePartialModel.html \"derive sea_orm::DerivePartialModel\")\n    The DerivePartialModel derive macro will implement [`sea_orm::PartialModelTrait`] for simplify partial model queries.\n\n[DerivePrimaryKey](https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePrimaryKey.html \"derive sea_orm::DerivePrimaryKey\")\n    The DerivePrimaryKey derive macro will implement [PrimaryKeyToColumn] for PrimaryKey which defines tedious mappings between primary keys and columns. The [EnumIter](https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html \"derive sea_orm::EnumIter\") is also derived, allowing iteration over all enum variants.\n\n[DeriveRelatedEntity](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelatedEntity.html \"derive sea_orm::DeriveRelatedEntity\")\n    The DeriveRelatedEntity derive macro will implement seaography::RelationBuilder for RelatedEntity enumeration.\n\n[DeriveRelation](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelation.html \"derive sea_orm::DeriveRelation\")\n    The DeriveRelation derive macro will implement RelationTrait for Relation.\n\n[DeriveValueType](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveValueType.html \"derive sea_orm::DeriveValueType\")\n    Implements traits for types that wrap a database value type.\n\n[EnumIter](https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html \"derive sea_orm::EnumIter\")\n    Creates a new type that iterates of the variants of an enum.\n\n[FromJsonQueryResult](https://docs.rs/sea-orm/latest/sea_orm/derive.FromJsonQueryResult.html \"derive sea_orm::FromJsonQueryResult\")\n\n\n[FromQueryResult](https://docs.rs/sea-orm/latest/sea_orm/derive.FromQueryResult.html \"derive sea_orm::FromQueryResult\")\n    Convert a query result into the corresponding Model.\n",
        "markdown_with_citations": "[](https://docs.rs/sea-orm/latest/sea_orm/all.html \"show sidebar\")\n# Crate sea_ormCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![](https://www.sea-ql.org/SeaORM/img/SeaORM banner.png)\n# SeaORM\n### \ud83d\udc1a An async & dynamic ORM for Rust\n![crate\u27e84\u27e9](https://crates.io/crates/sea-orm) ![docs\u27e85\u27e9](https://docs.rs/sea-orm) ![build status\u27e86\u27e9](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n## \u00a7\u27e87\u27e9SeaORM\n##### \u00a7\u27e88\u27e9SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n![GitHub stars\u27e89\u27e9](https://github.com/SeaQL/sea-orm/stargazers/) If you like what we do, consider starring, sharing and contributing!\nPlease help us with maintaining SeaORM by completing the SeaQL Community Survey 2024\u27e810\u27e9!\n![Discord\u27e811\u27e9](https://discord.com/invite/uCPdDXzbdv) Join our Discord server to chat with other members of the SeaQL community!\n### \u00a7\u27e812\u27e9Getting Started\n  * Documentation\u27e813\u27e9\n  * Tutorial\u27e814\u27e9\n  * Cookbook\u27e815\u27e9\n\n\nIntegration examples:\n  * Actix v4 Example\u27e816\u27e9\n  * Axum Example\u27e817\u27e9\n  * GraphQL Example\u27e818\u27e9\n  * jsonrpsee Example\u27e819\u27e9\n  * Loco TODO Example\u27e820\u27e9 / Loco REST Starter\u27e821\u27e9\n  * Poem Example\u27e822\u27e9\n  * Rocket Example\u27e823\u27e9 / Rocket OpenAPI Example\u27e824\u27e9\n  * Salvo Example\u27e825\u27e9\n  * Tonic Example\u27e826\u27e9\n  * Seaography Example\u27e827\u27e9\n\n\n### \u00a7\u27e828\u27e9Features\n  1. Async\nRelying on SQLx\u27e829\u27e9, SeaORM is a new library with async support from day 1.\n  2. Dynamic\nBuilt upon SeaQuery\u27e830\u27e9, SeaORM allows you to build complex dynamic queries.\n  3. Service Oriented\nQuickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n  4. Production Ready\nSeaORM is feature-rich, well-tested and used in production by companies and startups.\n\n\n### \u00a7\u27e831\u27e9A quick taste of SeaORM\n#### \u00a7\u27e832\u27e9Entity\n```\nuse sea_orm::entity::prelude::*;\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n  #[sea_orm(primary_key)]\n  pub id: i32,\n  pub name: String,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n  #[sea_orm(has_many = \"super::fruit::Entity\")]\n  Fruit,\n}\nimpl Related<super::fruit::Entity> for Entity {\n  fn to() -> RelationDef {\n    Relation::Fruit.def()\n  }\n}\n```\n\n#### \u00a7\u27e833\u27e9Select\n```\n// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n  .filter(cake::Column::Name.contains(\"chocolate\"))\n  .all(db)\n  .await?;\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n  Cake::find().find_with_related(Fruit).all(db).await?;\n\n```\n\n#### \u00a7\u27e834\u27e9Insert\n```\nlet apple = fruit::ActiveModel {\n  name: Set(\"Apple\".to_owned()),\n  ..Default::default() // no need to set primary key\n};\nlet pear = fruit::ActiveModel {\n  name: Set(\"Pear\".to_owned()),\n  ..Default::default()\n};\n// insert one\nlet pear = pear.insert(db).await?;\n// insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n```\n\n#### \u00a7\u27e835\u27e9Update\n```\nuse sea_orm::sea_query::{Expr, Value};\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\npear.name = Set(\"Sweet pear\".to_owned());\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n// update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'\nFruit::update_many()\n  .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n  .filter(fruit::Column::Name.contains(\"Apple\"))\n  .exec(db)\n  .await?;\n\n```\n\n#### \u00a7\u27e836\u27e9Save\n```\nlet banana = fruit::ActiveModel {\n  id: NotSet,\n  name: Set(\"Banana\".to_owned()),\n  ..Default::default()\n};\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\nbanana.name = Set(\"Banana Mongo\".to_owned());\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n\n```\n\n#### \u00a7\u27e837\u27e9Delete\n```\n// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n  .exec(db)\n  .await?;\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n// delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'\nfruit::Entity::delete_many()\n  .filter(fruit::Column::Name.contains(\"Orange\"))\n  .exec(db)\n  .await?;\n\n```\n\n### \u00a7\u27e838\u27e9\ud83e\udded Seaography: instant GraphQL API\nSeaography\u27e839\u27e9 is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\nLook at the Seaography Example\u27e827\u27e9 to learn more.\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png)\n### \u00a7\u27e840\u27e9\ud83d\udda5\ufe0f SeaORM Pro: Effortless Admin Panel\nSeaORM Pro\u27e841\u27e9 is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!\nFeatures:\n  * Full CRUD\n  * Built on React + GraphQL\n  * Built-in GraphQL resolver\n  * Customize the UI with simple TOML\n\n\nLearn More\n  * Example Repo\u27e842\u27e9\n  * Getting Started with Loco\u27e843\u27e9\n  * Getting Started with Axum\u27e844\u27e9\n\n\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-dark.png#gh-dark-mode-only) ![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-light.png#gh-light-mode-only)\n### \u00a7\u27e845\u27e9Releases\nSeaORM 1.0\u27e846\u27e9 is a stable release. The 1.x version will be updated until at least October 2025, and we\u2019ll decide whether to release a 2.0 version or extend the 1.x life cycle.\nIt doesn\u2019t mean that SeaORM is \u2018done\u2019, we\u2019ve designed an architecture to allow us to deliver new features without major breaking changes. In fact, more features are coming!\n  * Change Log\u27e847\u27e9\n\n\n#### \u00a7\u27e848\u27e9Who\u2019s using SeaORM?\nHere is a short list of awesome open source software built with SeaORM. Full list here\u27e849\u27e9. Feel free to submit yours!\nProject| GitHub| Tagline  \n---|---|---  \nZed\u27e850\u27e9| ![GitHub stars\u27e851\u27e9]| A high-performance, multiplayer code editor  \nOpenObserve\u27e852\u27e9| ![GitHub stars\u27e853\u27e9]| Open-source observability platform  \nRisingWave\u27e854\u27e9| ![GitHub stars\u27e855\u27e9]| Stream processing and management platform  \nLLDAP\u27e856\u27e9| ![GitHub stars\u27e857\u27e9]| A light LDAP server for user management  \nWarpgate\u27e858\u27e9| ![GitHub stars\u27e859\u27e9]| Smart SSH bastion that works with any SSH client  \nSvix\u27e860\u27e9| ![GitHub stars\u27e861\u27e9]| The enterprise ready webhooks service  \nRyot\u27e862\u27e9| ![GitHub stars\u27e863\u27e9]| The only self hosted tracker you will ever need  \nLapdev\u27e864\u27e9| ![GitHub stars\u27e865\u27e9]| Self-hosted remote development enviroment  \nSystem Initiative\u27e866\u27e9| ![GitHub stars\u27e867\u27e9]| DevOps Automation Platform  \nOctoBase\u27e868\u27e9| ![GitHub stars\u27e869\u27e9]| A light-weight, scalable, offline collaborative data backend  \n### \u00a7\u27e870\u27e9License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e871\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e872\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### \u00a7\u27e873\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nWe invite you to participate, contribute and together help build Rust\u2019s future.\nA big shout out to our contributors!\n![Contributors\u27e874\u27e9](https://github.com/SeaQL/sea-orm/graphs/contributors)\n### \u00a7\u27e875\u27e9Sponsorship\nSeaQL.org\u27e876\u27e9 is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via GitHub Sponsor\u27e877\u27e9 will be greatly appreciated, and goes a long way towards sustaining the organization.\n#### \u00a7\u27e878\u27e9Silver Sponsors\n ![\u27e879\u27e9 ](https://www.digitalocean.com/) |  ![\u27e880\u27e9 ](https://www.jetbrains.com/)  \n---|---  \nWe\u2019re immensely grateful to our sponsors: Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n### \u00a7\u27e881\u27e9Mascot\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n![Terres\u27e882\u27e9]\n#### \u00a7\u27e883\u27e9Rustacean Sticker Pack \ud83e\udd80\nThe Rustacean Sticker Pack is the perfect way to express your passion for Rust. Our stickers are made with a premium water-resistant vinyl with a unique matte finish. Stick them on your laptop, notebook, or any gadget to show off your love for Rust!\nSticker Pack Contents:\n  * Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG\n  * Mascot of SeaQL: Terres the Hermit Crab\n  * Mascot of Rust: Ferris the Crab\n  * The Rustacean word\n\n\nSupport SeaQL and get a Sticker Pack!\u27e884\u27e9 All proceeds contributes directly to the ongoing development of SeaQL projects.\n![Rustacean Sticker Pack by SeaQL\u27e885\u27e9](https://www.sea-ql.org/sticker-pack/)\n## Re-exports\u00a7\u27e886\u27e9\n\n`pub use crate::error::TryGetError[](https://docs.rs/sea-orm/latest/sea_orm/error/enum.TryGetError.html \"enum sea_orm::error::TryGetError\");`\n\n\n`pub use sea_query[](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/index.html \"mod sea_query\");`\n\n\n`pub use strum[](https://docs.rs/strum/0.26.3/x86_64-unknown-linux-gnu/strum/index.html \"mod strum\");`\n\n\n`pub use sqlx[](https://docs.rs/sqlx/0.8.6/x86_64-unknown-linux-gnu/sqlx/index.html \"mod sqlx\");`\n\n\n`pub use entity[](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")::*;`\n\n\n`pub use error[](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")::*;`\n\n\n`pub use query[](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")::*;`\n\n\n`pub use schema[](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")::*;`\n\n## Modules\u00a7\u27e887\u27e9\n\nentity\u27e888\u27e9\n    Module for the Entity type and operations\n\nerror\u27e889\u27e9\n    Error types for all database operations\n\nmetric\u27e890\u27e9\n    Types and methods to perform metric collection\n\nquery\u27e891\u27e9\n    Types and methods to perform queries\n\nschema\u27e892\u27e9\n    Types that defines the schemas of an Entity\n\nvalue\u27e893\u27e9\n    Helpers for working with Value\n## Macros\u00a7\u27e894\u27e9\n\ndebug_print\u27e895\u27e9\n    Non-debug version\n\ndebug_query\u27e896\u27e9\n    Helper to get a raw SQL string from an object that impl `QueryTrait`.\n\ndebug_query_stmt\u27e897\u27e9\n    Helper to get a `Statement` from an object that impl `QueryTrait`.\n## Structs\u00a7\u27e898\u27e9\n\nConnectOptions\u27e899\u27e9\n    Defines the configuration options of a database\n\nCursor\u27e8100\u27e9\n    Cursor pagination\n\nDatabase\u27e8101\u27e9\n    Defines a database\n\nDatabaseTransaction\u27e8102\u27e9\n    Defines a database transaction, whether it is an open transaction and the type of backend to use\n\nDeleteResult\u27e8103\u27e9\n    The result of a DELETE operation\n\nDeleter\u27e8104\u27e9\n    Handles DELETE operations in a ActiveModel using DeleteStatement\u27e8105\u27e9\n\nExecResult\u27e8106\u27e9\n    Defines the result of executing an operation\n\nInsertResult\u27e8107\u27e9\n    The result of an INSERT operation on an ActiveModel\n\nInserter\u27e8108\u27e9\n    Defines a structure to perform INSERT operations in an ActiveModel\n\nItemsAndPagesNumber\u27e8109\u27e9\n    Define a structure containing the numbers of items and pages of a Paginator\n\nMockDatabase\u27e8110\u27e9`mock`\n    Defines a Mock database suitable for testing\n\nMockDatabaseConnection\u27e8111\u27e9\n    Defines a connection for the MockDatabase\u27e8110\u27e9\n\nMockDatabaseConnector\u27e8112\u27e9\n    Defines a database driver for the MockDatabase\u27e8110\u27e9\n\nMockExecResult\u27e8113\u27e9`mock`\n    Defines the results obtained from a MockDatabase\u27e8110\u27e9\n\nMockRow\u27e8114\u27e9`mock`\n    Defines the structure of a test Row for the MockDatabase\u27e8110\u27e9 which is just a BTreeMap\u27e8115\u27e9<String\u27e8116\u27e9, Value\u27e8117\u27e9>\n\nOpenTransaction\u27e8118\u27e9`mock`\n    Defines a transaction that is has not been committed\n\nPaginator\u27e8119\u27e9\n    Defined a structure to handle pagination of a result from a query operation on a Model\n\nProxyDatabaseConnection\u27e8120\u27e9\n    Defines a connection for the [ProxyDatabase]\n\nProxyDatabaseConnector\u27e8121\u27e9\n    Defines a database driver for the [ProxyDatabase]\n\nProxyExecResult\u27e8122\u27e9`proxy`\n    Defines the results obtained from a [ProxyDatabase]\n\nProxyRow\u27e8123\u27e9`proxy`\n    Defines the structure of a Row for the [ProxyDatabase] which is just a BTreeMap\u27e8115\u27e9<String\u27e8116\u27e9, Value\u27e8117\u27e9>\n\nQueryResult\u27e8124\u27e9\n    Defines the result of a query operation on a Model\n\nQueryStream\u27e8125\u27e9\n    The self-referencing struct.\n\nSelectGetableTuple\u27e8126\u27e9\n    Get tuple from query result based on column index\n\nSelectGetableValue\u27e8127\u27e9\n    Get tuple from query result based on a list of column identifiers\n\nSelectModel\u27e8128\u27e9\n    Helper class to handle query result for 1 Model\n\nSelectThreeModel\u27e8129\u27e9\n    Helper class to handle query result for 3 Models\n\nSelectTwoModel\u27e8130\u27e9\n    Helper class to handle query result for 2 Models\n\nSelector\u27e8131\u27e9\n    Defines a type to do `SELECT` operations through a SelectStatement\u27e8132\u27e9 on a Model\n\nSelectorRaw\u27e8133\u27e9\n    Performs a raw `SELECT` operation on a model\n\nSqlxMySqlConnector\u27e8134\u27e9\n    Defines the sqlx::mysql\u27e8135\u27e9 connector\n\nSqlxMySqlPoolConnection\u27e8136\u27e9\n    Defines a sqlx MySQL pool\n\nSqlxPostgresConnector\u27e8137\u27e9\n    Defines the sqlx::postgres\u27e8138\u27e9 connector\n\nSqlxPostgresPoolConnection\u27e8139\u27e9\n    Defines a sqlx PostgreSQL pool\n\nSqlxSqliteConnector\u27e8140\u27e9\n    Defines the sqlx::sqlite\u27e8141\u27e9 connector\n\nSqlxSqlitePoolConnection\u27e8142\u27e9\n    Defines a sqlx SQLite pool\n\nStatement\u27e8143\u27e9\n    Defines an SQL statement\n\nTransaction\u27e8144\u27e9`mock`\n    Defines a database transaction as it holds a Vec<Statement\u27e8143\u27e9>\n\nTransactionStream\u27e8145\u27e9\n    The self-referencing struct.\n\nUpdateResult\u27e8146\u27e9\n    The result of an update operation on an ActiveModel\n\nUpdater\u27e8147\u27e9\n    Defines an update operation\n\nValues\u27e8148\u27e9\n\n## Enums\u00a7\u27e8149\u27e9\n\nAccessMode\u27e8150\u27e9\n    Access mode\n\nDatabaseBackend\u27e8151\u27e9\n    The type of database backend for real world databases. This is enabled by feature flags as specified in the crate documentation\n\nDatabaseConnection\u27e8152\u27e9\n    Handle a database connection depending on the backend enabled by the feature flags. This creates a database pool. This will be `Clone` unless the feature flag `mock` is enabled.\n\nIsolationLevel\u27e8153\u27e9\n    Isolation level\n\nTransactionError\u27e8154\u27e9\n    Defines errors for handling transaction failures\n\nTryInsertResult\u27e8155\u27e9\n    The types of results for an INSERT operation\n\nValue\u27e8117\u27e9\n    Value variants\n## Traits\u00a7\u27e8156\u27e9\n\nColIdx\u27e8157\u27e9\n    Column Index, used by `TryGetable`\u27e8158\u27e9. Implemented for `&str` and `usize`\n\nConnectionTrait\u27e8159\u27e9\n    The generic API for a database connection that can perform query or execute statements. It abstracts database connection and transaction\n\nCursorTrait\u27e8160\u27e9\n    A trait for any type that can be turn into a cursor\n\nIden\u27e8161\u27e9\n    Identifier\n\nIntoMockRow\u27e8162\u27e9`mock`\n    A trait to get a MockRow\u27e8114\u27e9 from a type useful for testing in the MockDatabase\u27e8110\u27e9\n\nMockDatabaseTrait\u27e8163\u27e9\n    A Trait for any type wanting to perform operations on the MockDatabase\u27e8110\u27e9\n\nPaginatorTrait\u27e8164\u27e9\n    A Trait for any type that can paginate results\n\nProxyDatabaseTrait\u27e8165\u27e9`proxy`\n    Defines the ProxyDatabaseTrait\u27e8165\u27e9 to save the functions\n\nSelectorTrait\u27e8166\u27e9\n    A Trait for any type that can perform SELECT queries\n\nStatementBuilder\u27e8167\u27e9\n    Any type that can build a Statement\u27e8143\u27e9\n\nStreamTrait\u27e8168\u27e9\n    Stream query results\n\nTransactionTrait\u27e8169\u27e9\n    Spawn database transaction\n\nTryFromU64\u27e8170\u27e9\n    Try to convert a type to a u64\n\nTryGetable\u27e8158\u27e9\n    An interface to get a value from the query result\n\nTryGetableArray\u27e8171\u27e9\n    An interface to get an array of values from the query result. A type can only implement `ActiveEnum` or `TryGetableFromJson`, but not both. A blanket impl is provided for `TryGetableFromJson`, while the impl for `ActiveEnum` is provided by the `DeriveActiveEnum` macro. So as an end user you won\u2019t normally touch this trait.\n\nTryGetableFromJson\u27e8172\u27e9\n    An interface to get a JSON from the query result\n\nTryGetableMany\u27e8173\u27e9\n    An interface to get a tuple value from the query result\n## Functions\u00a7\u27e8174\u27e9\n\nfrom_query_result_to_proxy_row\u27e8175\u27e9`proxy`\n    Convert QueryResult\u27e8124\u27e9 to ProxyRow\u27e8123\u27e9\n## Type Aliases\u00a7\u27e8176\u27e9\n\nDbBackend\u27e8177\u27e9\n    The same as DatabaseBackend\u27e8151\u27e9 just shorter :)\n\nDbConn\u27e8178\u27e9\n    The same as a DatabaseConnection\u27e8152\u27e9\n\nPinBoxStream\u27e8179\u27e9\n    Pin a Model so that stream operations can be performed on the model\n## Derive Macros\u00a7\u27e8180\u27e9\n\nDeriveActiveEnum\u27e8181\u27e9\n    A derive macro to implement `sea_orm::ActiveEnum` trait for enums.\n\nDeriveActiveModel\u27e8182\u27e9\n    The DeriveActiveModel derive macro will implement ActiveModelTrait for ActiveModel which provides setters and getters for all active values in the active model.\n\nDeriveActiveModelBehavior\u27e8183\u27e9\n    Models that a user can override\n\nDeriveColumn\u27e8184\u27e9\n    The DeriveColumn derive macro will implement [ColumnTrait] for Columns. It defines the identifier of each column by implementing Iden and IdenStatic. The EnumIter is also derived, allowing iteration over all enum variants.\n\nDeriveCustomColumn\u27e8185\u27e9\n    Derive a column if column names are not in snake-case\n\nDeriveDisplay\u27e8186\u27e9\n\n\nDeriveEntity\u27e8187\u27e9\n    Create an Entity\n\nDeriveEntityModel\u27e8188\u27e9\n    This derive macro is the \u2018almighty\u2019 macro which automatically generates Entity, Column, and PrimaryKey from a given Model.\n\nDeriveIden\u27e8189\u27e9\n    The DeriveIden derive macro will implement `sea_orm::sea_query::Iden` for simplify Iden implementation.\n\nDeriveIntoActiveModel\u27e8190\u27e9\n    Derive into an active model\n\nDeriveMigrationName\u27e8191\u27e9\n    The DeriveMigrationName derive macro will implement `sea_orm_migration::MigrationName` for a migration.\n\nDeriveModel\u27e8192\u27e9\n    The DeriveModel derive macro will implement ModelTrait for Model, which provides setters and getters for all attributes in the mod It also implements FromQueryResult to convert a query result into the corresponding Model.\n\nDerivePartialModel\u27e8193\u27e9\n    The DerivePartialModel derive macro will implement [`sea_orm::PartialModelTrait`] for simplify partial model queries.\n\nDerivePrimaryKey\u27e8194\u27e9\n    The DerivePrimaryKey derive macro will implement [PrimaryKeyToColumn] for PrimaryKey which defines tedious mappings between primary keys and columns. The EnumIter\u27e8195\u27e9 is also derived, allowing iteration over all enum variants.\n\nDeriveRelatedEntity\u27e8196\u27e9\n    The DeriveRelatedEntity derive macro will implement seaography::RelationBuilder for RelatedEntity enumeration.\n\nDeriveRelation\u27e8197\u27e9\n    The DeriveRelation derive macro will implement RelationTrait for Relation.\n\nDeriveValueType\u27e8198\u27e9\n    Implements traits for types that wrap a database value type.\n\nEnumIter\u27e8195\u27e9\n    Creates a new type that iterates of the variants of an enum.\n\nFromJsonQueryResult\u27e8199\u27e9\n\n\nFromQueryResult\u27e8200\u27e9\n    Convert a query result into the corresponding Model.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/sea-orm/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/sea-orm/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/sea-orm/latest/src/sea_orm/lib.rs.html#1-430: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/sea-orm.svg: ![crate\n\u27e85\u27e9 https://docs.rs/sea-orm/badge.svg: ![docs\n\u27e86\u27e9 https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg: ![build status\n\u27e87\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#seaorm: \u00a7\n\u27e88\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#seaorm-is-a-relational-orm-to-help-you-build-web-services-in-rust-with-the-familiarity-of-dynamic-languages: \u00a7\n\u27e89\u27e9 https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1: ![GitHub stars\n\u27e810\u27e9 https://sea-ql.org/community-survey: SeaQL Community Survey 2024\n\u27e811\u27e9 https://img.shields.io/discord/873880840487206962?label=Discord: ![Discord\n\u27e812\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#getting-started: \u00a7\n\u27e813\u27e9 https://www.sea-ql.org/SeaORM: Documentation\n\u27e814\u27e9 https://www.sea-ql.org/sea-orm-tutorial: Tutorial\n\u27e815\u27e9 https://www.sea-ql.org/sea-orm-cookbook: Cookbook\n\u27e816\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example: Actix v4 Example\n\u27e817\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example: Axum Example\n\u27e818\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example: GraphQL Example\n\u27e819\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example: jsonrpsee Example\n\u27e820\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example: Loco TODO Example\n\u27e821\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter: Loco REST Starter\n\u27e822\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example: Poem Example\n\u27e823\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example: Rocket Example\n\u27e824\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example: Rocket OpenAPI Example\n\u27e825\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example: Salvo Example\n\u27e826\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example: Tonic Example\n\u27e827\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example: Seaography Example\n\u27e828\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#features: \u00a7\n\u27e829\u27e9 https://github.com/launchbadge/sqlx: SQLx\n\u27e830\u27e9 https://github.com/SeaQL/sea-query: SeaQuery\n\u27e831\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#a-quick-taste-of-seaorm: \u00a7\n\u27e832\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#entity: \u00a7\n\u27e833\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#select: \u00a7\n\u27e834\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#insert: \u00a7\n\u27e835\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#update: \u00a7\n\u27e836\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#save: \u00a7\n\u27e837\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#delete: \u00a7\n\u27e838\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#-seaography-instant-graphql-api: \u00a7\n\u27e839\u27e9 https://github.com/SeaQL/seaography: Seaography\n\u27e840\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#-seaorm-pro-effortless-admin-panel: \u00a7\n\u27e841\u27e9 https://www.sea-ql.org/sea-orm-pro/: SeaORM Pro\n\u27e842\u27e9 https://github.com/SeaQL/sea-orm-pro: Example Repo\n\u27e843\u27e9 https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/: Getting Started with Loco\n\u27e844\u27e9 https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/: Getting Started with Axum\n\u27e845\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#releases: \u00a7\n\u27e846\u27e9 https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/: SeaORM 1.0\n\u27e847\u27e9 https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md: Change Log\n\u27e848\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#whos-using-seaorm: \u00a7\n\u27e849\u27e9 https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm: Full list here\n\u27e850\u27e9 https://github.com/zed-industries/zed: Zed\n\u27e851\u27e9 https://img.shields.io/github/stars/zed-industries/zed.svg?style=social: GitHub stars\n\u27e852\u27e9 https://github.com/openobserve/openobserve: OpenObserve\n\u27e853\u27e9 https://img.shields.io/github/stars/openobserve/openobserve.svg?style=social: GitHub stars\n\u27e854\u27e9 https://github.com/risingwavelabs/risingwave: RisingWave\n\u27e855\u27e9 https://img.shields.io/github/stars/risingwavelabs/risingwave.svg?style=social: GitHub stars\n\u27e856\u27e9 https://github.com/nitnelave/lldap: LLDAP\n\u27e857\u27e9 https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social: GitHub stars\n\u27e858\u27e9 https://github.com/warp-tech/warpgate: Warpgate\n\u27e859\u27e9 https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social: GitHub stars\n\u27e860\u27e9 https://github.com/svix/svix-webhooks: Svix\n\u27e861\u27e9 https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social: GitHub stars\n\u27e862\u27e9 https://github.com/IgnisDa/ryot: Ryot\n\u27e863\u27e9 https://img.shields.io/github/stars/ignisda/ryot.svg?style=social: GitHub stars\n\u27e864\u27e9 https://github.com/lapce/lapdev: Lapdev\n\u27e865\u27e9 https://img.shields.io/github/stars/lapce/lapdev.svg?style=social: GitHub stars\n\u27e866\u27e9 https://github.com/systeminit/si: System Initiative\n\u27e867\u27e9 https://img.shields.io/github/stars/systeminit/si.svg?style=social: GitHub stars\n\u27e868\u27e9 https://github.com/toeverything/OctoBase: OctoBase\n\u27e869\u27e9 https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social: GitHub stars\n\u27e870\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#license: \u00a7\n\u27e871\u27e9 https://docs.rs/sea-orm/latest/sea_orm/LICENSE-APACHE: LICENSE-APACHE\n\u27e872\u27e9 https://docs.rs/sea-orm/latest/sea_orm/LICENSE-MIT: LICENSE-MIT\n\u27e873\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#contribution: \u00a7\n\u27e874\u27e9 https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false: ![Contributors\n\u27e875\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#sponsorship: \u00a7\n\u27e876\u27e9 https://www.sea-ql.org/: SeaQL.org\n\u27e877\u27e9 https://github.com/sponsors/SeaQL: GitHub Sponsor\n\u27e878\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#silver-sponsors: \u00a7\n\u27e879\u27e9 https://www.sea-ql.org/static/sponsors/DigitalOcean.svg:  ![\n\u27e880\u27e9 https://www.sea-ql.org/static/sponsors/JetBrains.svg:  ![\n\u27e881\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#mascot: \u00a7\n\u27e882\u27e9 https://www.sea-ql.org/SeaORM/img/Terres.png: Terres\n\u27e883\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#rustacean-sticker-pack-: \u00a7\n\u27e884\u27e9 https://www.sea-ql.org/sticker-pack/: Support SeaQL and get a Sticker Pack!\n\u27e885\u27e9 https://www.sea-ql.org/static/sticker-pack-1s.jpg: ![Rustacean Sticker Pack by SeaQL\n\u27e886\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#reexports: \u00a7\n\u27e887\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#modules: \u00a7\n\u27e888\u27e9 https://docs.rs/sea-orm/latest/sea_orm/entity/index.html: mod sea_orm::entity - entity\n\u27e889\u27e9 https://docs.rs/sea-orm/latest/sea_orm/error/index.html: mod sea_orm::error - error\n\u27e890\u27e9 https://docs.rs/sea-orm/latest/sea_orm/metric/index.html: mod sea_orm::metric - metric\n\u27e891\u27e9 https://docs.rs/sea-orm/latest/sea_orm/query/index.html: mod sea_orm::query - query\n\u27e892\u27e9 https://docs.rs/sea-orm/latest/sea_orm/schema/index.html: mod sea_orm::schema - schema\n\u27e893\u27e9 https://docs.rs/sea-orm/latest/sea_orm/value/index.html: mod sea_orm::value - value\n\u27e894\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#macros: \u00a7\n\u27e895\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_print.html: macro sea_orm::debug_print - debug_print\n\u27e896\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query.html: macro sea_orm::debug_query - debug_query\n\u27e897\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query_stmt.html: macro sea_orm::debug_query_stmt - debug_query_stmt\n\u27e898\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#structs: \u00a7\n\u27e899\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ConnectOptions.html: struct sea_orm::ConnectOptions - ConnectOptions\n\u27e8100\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Cursor.html: struct sea_orm::Cursor - Cursor\n\u27e8101\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Database.html: struct sea_orm::Database - Database\n\u27e8102\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.DatabaseTransaction.html: struct sea_orm::DatabaseTransaction - DatabaseTransaction\n\u27e8103\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.DeleteResult.html: struct sea_orm::DeleteResult - DeleteResult\n\u27e8104\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Deleter.html: struct sea_orm::Deleter - Deleter\n\u27e8105\u27e9 https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/delete/struct.DeleteStatement.html: struct sea_query::query::delete::DeleteStatement - DeleteStatement\n\u27e8106\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ExecResult.html: struct sea_orm::ExecResult - ExecResult\n\u27e8107\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.InsertResult.html: struct sea_orm::InsertResult - InsertResult\n\u27e8108\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Inserter.html: struct sea_orm::Inserter - Inserter\n\u27e8109\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ItemsAndPagesNumber.html: struct sea_orm::ItemsAndPagesNumber - ItemsAndPagesNumber\n\u27e8110\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html: struct sea_orm::MockDatabase - MockDatabase\n\u27e8111\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnection.html: struct sea_orm::MockDatabaseConnection - MockDatabaseConnection\n\u27e8112\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnector.html: struct sea_orm::MockDatabaseConnector - MockDatabaseConnector\n\u27e8113\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockExecResult.html: struct sea_orm::MockExecResult - MockExecResult\n\u27e8114\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html: struct sea_orm::MockRow - MockRow\n\u27e8115\u27e9 https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html: struct alloc::collections::btree::map::BTreeMap - BTreeMap\n\u27e8116\u27e9 https://doc.rust-lang.org/nightly/alloc/string/struct.String.html: struct alloc::string::String - String\n\u27e8117\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html: enum sea_orm::Value - Value\n\u27e8118\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.OpenTransaction.html: struct sea_orm::OpenTransaction - OpenTransaction\n\u27e8119\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Paginator.html: struct sea_orm::Paginator - Paginator\n\u27e8120\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnection.html: struct sea_orm::ProxyDatabaseConnection - ProxyDatabaseConnection\n\u27e8121\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnector.html: struct sea_orm::ProxyDatabaseConnector - ProxyDatabaseConnector\n\u27e8122\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyExecResult.html: struct sea_orm::ProxyExecResult - ProxyExecResult\n\u27e8123\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html: struct sea_orm::ProxyRow - ProxyRow\n\u27e8124\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html: struct sea_orm::QueryResult - QueryResult\n\u27e8125\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.QueryStream.html: struct sea_orm::QueryStream - QueryStream\n\u27e8126\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableTuple.html: struct sea_orm::SelectGetableTuple - SelectGetableTuple\n\u27e8127\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableValue.html: struct sea_orm::SelectGetableValue - SelectGetableValue\n\u27e8128\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectModel.html: struct sea_orm::SelectModel - SelectModel\n\u27e8129\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectThreeModel.html: struct sea_orm::SelectThreeModel - SelectThreeModel\n\u27e8130\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectTwoModel.html: struct sea_orm::SelectTwoModel - SelectTwoModel\n\u27e8131\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Selector.html: struct sea_orm::Selector - Selector\n\u27e8132\u27e9 https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/select/struct.SelectStatement.html: struct sea_query::query::select::SelectStatement - SelectStatement\n\u27e8133\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectorRaw.html: struct sea_orm::SelectorRaw - SelectorRaw\n\u27e8134\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlConnector.html: struct sea_orm::SqlxMySqlConnector - SqlxMySqlConnector\n\u27e8135\u27e9 https://docs.rs/sqlx-mysql/0.8.6/x86_64-unknown-linux-gnu/sqlx_mysql/index.html: mod sqlx_mysql - sqlx::mysql\n\u27e8136\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlPoolConnection.html: struct sea_orm::SqlxMySqlPoolConnection - SqlxMySqlPoolConnection\n\u27e8137\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresConnector.html: struct sea_orm::SqlxPostgresConnector - SqlxPostgresConnector\n\u27e8138\u27e9 https://docs.rs/sqlx-postgres/0.8.6/x86_64-unknown-linux-gnu/sqlx_postgres/index.html: mod sqlx_postgres - sqlx::postgres\n\u27e8139\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresPoolConnection.html: struct sea_orm::SqlxPostgresPoolConnection - SqlxPostgresPoolConnection\n\u27e8140\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqliteConnector.html: struct sea_orm::SqlxSqliteConnector - SqlxSqliteConnector\n\u27e8141\u27e9 https://docs.rs/sqlx-sqlite/0.8.6/x86_64-unknown-linux-gnu/sqlx_sqlite/index.html: mod sqlx_sqlite - sqlx::sqlite\n\u27e8142\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqlitePoolConnection.html: struct sea_orm::SqlxSqlitePoolConnection - SqlxSqlitePoolConnection\n\u27e8143\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html: struct sea_orm::Statement - Statement\n\u27e8144\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Transaction.html: struct sea_orm::Transaction - Transaction\n\u27e8145\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.TransactionStream.html: struct sea_orm::TransactionStream - TransactionStream\n\u27e8146\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.UpdateResult.html: struct sea_orm::UpdateResult - UpdateResult\n\u27e8147\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Updater.html: struct sea_orm::Updater - Updater\n\u27e8148\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Values.html: struct sea_orm::Values - Values\n\u27e8149\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#enums: \u00a7\n\u27e8150\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.AccessMode.html: enum sea_orm::AccessMode - AccessMode\n\u27e8151\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html: enum sea_orm::DatabaseBackend - DatabaseBackend\n\u27e8152\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html: enum sea_orm::DatabaseConnection - DatabaseConnection\n\u27e8153\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.IsolationLevel.html: enum sea_orm::IsolationLevel - IsolationLevel\n\u27e8154\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.TransactionError.html: enum sea_orm::TransactionError - TransactionError\n\u27e8155\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.TryInsertResult.html: enum sea_orm::TryInsertResult - TryInsertResult\n\u27e8156\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#traits: \u00a7\n\u27e8157\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ColIdx.html: trait sea_orm::ColIdx - ColIdx\n\u27e8158\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html: trait sea_orm::TryGetable - `TryGetable`\n\u27e8159\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ConnectionTrait.html: trait sea_orm::ConnectionTrait - ConnectionTrait\n\u27e8160\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.CursorTrait.html: trait sea_orm::CursorTrait - CursorTrait\n\u27e8161\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.Iden.html: trait sea_orm::Iden - Iden\n\u27e8162\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.IntoMockRow.html: trait sea_orm::IntoMockRow - IntoMockRow\n\u27e8163\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.MockDatabaseTrait.html: trait sea_orm::MockDatabaseTrait - MockDatabaseTrait\n\u27e8164\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.PaginatorTrait.html: trait sea_orm::PaginatorTrait - PaginatorTrait\n\u27e8165\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html: trait sea_orm::ProxyDatabaseTrait - ProxyDatabaseTrait\n\u27e8166\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.SelectorTrait.html: trait sea_orm::SelectorTrait - SelectorTrait\n\u27e8167\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.StatementBuilder.html: trait sea_orm::StatementBuilder - StatementBuilder\n\u27e8168\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.StreamTrait.html: trait sea_orm::StreamTrait - StreamTrait\n\u27e8169\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TransactionTrait.html: trait sea_orm::TransactionTrait - TransactionTrait\n\u27e8170\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryFromU64.html: trait sea_orm::TryFromU64 - TryFromU64\n\u27e8171\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableArray.html: trait sea_orm::TryGetableArray - TryGetableArray\n\u27e8172\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableFromJson.html: trait sea_orm::TryGetableFromJson - TryGetableFromJson\n\u27e8173\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableMany.html: trait sea_orm::TryGetableMany - TryGetableMany\n\u27e8174\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#functions: \u00a7\n\u27e8175\u27e9 https://docs.rs/sea-orm/latest/sea_orm/fn.from_query_result_to_proxy_row.html: fn sea_orm::from_query_result_to_proxy_row - from_query_result_to_proxy_row\n\u27e8176\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#types: \u00a7\n\u27e8177\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.DbBackend.html: type sea_orm::DbBackend - DbBackend\n\u27e8178\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.DbConn.html: type sea_orm::DbConn - DbConn\n\u27e8179\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.PinBoxStream.html: type sea_orm::PinBoxStream - PinBoxStream\n\u27e8180\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#derives: \u00a7\n\u27e8181\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveEnum.html: derive sea_orm::DeriveActiveEnum - DeriveActiveEnum\n\u27e8182\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModel.html: derive sea_orm::DeriveActiveModel - DeriveActiveModel\n\u27e8183\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModelBehavior.html: derive sea_orm::DeriveActiveModelBehavior - DeriveActiveModelBehavior\n\u27e8184\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveColumn.html: derive sea_orm::DeriveColumn - DeriveColumn\n\u27e8185\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveCustomColumn.html: derive sea_orm::DeriveCustomColumn - DeriveCustomColumn\n\u27e8186\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveDisplay.html: derive sea_orm::DeriveDisplay - DeriveDisplay\n\u27e8187\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntity.html: derive sea_orm::DeriveEntity - DeriveEntity\n\u27e8188\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntityModel.html: derive sea_orm::DeriveEntityModel - DeriveEntityModel\n\u27e8189\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIden.html: derive sea_orm::DeriveIden - DeriveIden\n\u27e8190\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIntoActiveModel.html: derive sea_orm::DeriveIntoActiveModel - DeriveIntoActiveModel\n\u27e8191\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveMigrationName.html: derive sea_orm::DeriveMigrationName - DeriveMigrationName\n\u27e8192\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveModel.html: derive sea_orm::DeriveModel - DeriveModel\n\u27e8193\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePartialModel.html: derive sea_orm::DerivePartialModel - DerivePartialModel\n\u27e8194\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePrimaryKey.html: derive sea_orm::DerivePrimaryKey - DerivePrimaryKey\n\u27e8195\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html: derive sea_orm::EnumIter - EnumIter\n\u27e8196\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelatedEntity.html: derive sea_orm::DeriveRelatedEntity - DeriveRelatedEntity\n\u27e8197\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelation.html: derive sea_orm::DeriveRelation - DeriveRelation\n\u27e8198\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveValueType.html: derive sea_orm::DeriveValueType - DeriveValueType\n\u27e8199\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.FromJsonQueryResult.html: derive sea_orm::FromJsonQueryResult - FromJsonQueryResult\n\u27e8200\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.FromQueryResult.html: derive sea_orm::FromQueryResult - FromQueryResult\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `sea-orm` crate is an asynchronous, dynamic, and production-ready relational ORM for Rust, designed to simplify building web services with features familiar to dynamic languages. It supports complex queries, entity modeling, and CRUD operations, leveraging SQLx for database connectivity and SeaQuery for query building. Additional tools like Seaography enable instant GraphQL APIs, and SeaORM Pro offers an effortless admin panel for applications.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: Async Capabilities  \n\u2705 **Factual**: SeaORM is built with async support from day one, relying on the SQLx library to enable asynchronous database operations.  \n\u274c **Counterfactual**: SeaORM does not support asynchronous operations and requires synchronous database interactions.  \n\n---\n\n### Pair 2: Dynamic Query Building  \n\u2705 **Factual**: SeaORM leverages SeaQuery to allow developers to construct complex, dynamic queries programmatically.  \n\u274c **Counterfactual**: SeaORM only supports static, predefined SQL queries and does not allow dynamic query construction.  \n\n---\n\n### Pair 3: GraphQL Integration  \n\u2705 **Factual**: SeaORM integrates with Seaography, enabling developers to quickly generate GraphQL APIs from SeaORM entities.  \n\u274c **Counterfactual**: SeaORM does not support GraphQL integration and requires external tools for GraphQL API generation.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}