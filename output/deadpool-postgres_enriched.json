{
    "name": "deadpool-postgres",
    "version": "0.14.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/all.html \"show sidebar\")\n# Crate deadpool_postgresCopy item path\n[Settings](https://docs.rs/deadpool-postgres/latest/settings.html)\n[Help](https://docs.rs/deadpool-postgres/latest/help.html)\nSummary[Source](https://docs.rs/deadpool-postgres/latest/src/deadpool_postgres/lib.rs.html#1-660)\nExpand description\n## [\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#deadpool-for-postgresql-latest-version-unsafe-forbidden-rust-175)Deadpool for PostgreSQL [![Latest Version](https://img.shields.io/crates/v/deadpool-postgres.svg)](https://crates.io/crates/deadpool-postgres) ![Unsafe forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg) [![Rust 1.75+](https://img.shields.io/badge/rustc-1.75+-lightgray.svg)](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html)\nDeadpool is a dead simple async pool for connections and objects of any type.\nThis crate implements a [`deadpool`](https://crates.io/crates/deadpool) manager for [`tokio-postgres`](https://crates.io/crates/tokio-postgres) and also provides a `statement` cache by wrapping `tokio_postgres::Client` and `tokio_postgres::Transaction`.\n### [\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#features)Features\nFeature| Description| Extra dependencies| Default  \n---|---|---|---  \n`rt_tokio_1`| Enable support for [tokio](https://crates.io/crates/tokio) crate| `deadpool/rt_tokio_1`| yes  \n`rt_async-std_1`| Enable support for [async-std](https://crates.io/crates/config) crate| `deadpool/rt_async-std_1`| no  \n`serde`| Enable support for [serde](https://crates.io/crates/serde) crate| `deadpool/serde`, `serde/derive`| no  \n**Important:** `async-std` support is currently limited to the `async-std` specific timeout function. You still need to enable the `tokio1` feature of `async-std` in order to use this crate with `async-std`.\n### [\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#example)Example\nThe following example assumes a PostgreSQL reachable via an unix domain socket and peer auth enabled for the local user in [pg_hba.conf](https://www.postgresql.org/docs/current/auth-pg-hba-conf.html). If you\u2019re running Windows you probably want to specify the `host`, `user` and `password` in the connection config or use an alternative [authentication method](https://www.postgresql.org/docs/current/auth-methods.html).\n```\nuse deadpool_postgres::{Config, ManagerConfig, RecyclingMethod, Runtime};\nuse tokio_postgres::NoTls;\n#[tokio::main]\nasync fn main() {\n  let mut cfg = Config::new();\n  cfg.dbname = Some(\"deadpool\".to_string());\n  cfg.manager = Some(ManagerConfig {\n    recycling_method: RecyclingMethod::Fast,\n  });\n  let pool = cfg.create_pool(Some(Runtime::Tokio1), NoTls).unwrap();\n  for i in 1..10i32 {\n    let client = pool.get().await.unwrap();\n    let stmt = client.prepare_cached(\"SELECT 1 + $1\").await.unwrap();\n    let rows = client.query(&stmt, &[&i]).await.unwrap();\n    let value: i32 = rows[0].get(0);\n    assert_eq!(value, i + 1);\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#example-with-config-and-dotenvy-crate)Example with `config` and `dotenvy` crate\n```\n# .env\nPG__DBNAME=deadpool\n```\n\n```\nuse deadpool_postgres::Runtime;\nuse dotenvy::dotenv;\nuse tokio_postgres::NoTls;\n#[derive(Debug, serde::Deserialize)]\nstruct Config {\n  pg: deadpool_postgres::Config,\n}\nimpl Config {\n  pub fn from_env() -> Result<Self, config::ConfigError> {\n    config::Config::builder()\n      .add_source(config::Environment::default().separator(\"__\"))\n      .build()?\n      .try_deserialize()\n  }\n}\n#[tokio::main]\nasync fn main() {\n  dotenv().ok();\n  let cfg = Config::from_env().unwrap();\n  let pool = cfg.pg.create_pool(Some(Runtime::Tokio1), NoTls).unwrap();\n  for i in 1..10i32 {\n    let client = pool.get().await.unwrap();\n    let stmt = client.prepare_cached(\"SELECT 1 + $1\").await.unwrap();\n    let rows = client.query(&stmt, &[&i]).await.unwrap();\n    let value: i32 = rows[0].get(0);\n    assert_eq!(value, i + 1);\n  }\n}\n```\n\n**Note:** The code above uses the crate name `config_crate` because of the `config` feature and both features and dependencies share the same namespace. In your own code you will probably want to use `::config::ConfigError` and `::config::Config` instead.\n### [\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#example-using-an-existing-tokio_postgresconfig-object)Example using an existing `tokio_postgres::Config` object\n```\nuse deadpool_postgres::{Manager, ManagerConfig, Pool, RecyclingMethod};\nuse std::env;\nuse tokio_postgres::NoTls;\n#[tokio::main]\nasync fn main() {\n  let mut pg_config = tokio_postgres::Config::new();\n  pg_config.host_path(\"/run/postgresql\");\n  pg_config.host_path(\"/tmp\");\n  pg_config.user(env::var(\"USER\").unwrap().as_str());\n  pg_config.dbname(\"deadpool\");\n  let mgr_config = ManagerConfig {\n    recycling_method: RecyclingMethod::Fast,\n  };\n  let mgr = Manager::from_config(pg_config, NoTls, mgr_config);\n  let pool = Pool::builder(mgr).max_size(16).build().unwrap();\n  for i in 1..10i32 {\n    let client = pool.get().await.unwrap();\n    let stmt = client.prepare_cached(\"SELECT 1 + $1\").await.unwrap();\n    let rows = client.query(&stmt, &[&i]).await.unwrap();\n    let value: i32 = rows[0].get(0);\n    assert_eq!(value, i + 1);\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#faq)FAQ\n  * **The database is unreachable. Why does the pool creation not fail?**\nDeadpool has [identical startup and runtime behaviour](https://crates.io/crates/deadpool/#reasons-for-yet-another-connection-pool) and therefore the pool creation will never fail.\nIf you want your application to crash on startup if no database connection can be established just call `pool.get().await` right after creating the pool.\n  * **Why are connections retrieved from the pool sometimes unuseable?**\nIn `deadpool-postgres 0.5.5` a new recycling method was implemented which is the default since `0.8`. With that recycling method the manager no longer performs a test query prior returning the connection but relies solely on `tokio_postgres::Client::is_closed` instead. Under some rare circumstances (e.g. unreliable networks) this can lead to `tokio_postgres` not noticing a disconnect and reporting the connection as useable.\nThe old and slightly slower recycling method can be enabled by setting `ManagerConfig::recycling_method` to `RecyclingMethod::Verified` or when using the `config` crate by setting `PG__MANAGER__RECYCLING_METHOD=Verified`.\n  * **How can I enable features of the`tokio-postgres` crate?**\nMake sure that you depend on the same version of `tokio-postgres` as `deadpool-postgres` does and enable the needed features in your own `Crate.toml` file:\n```\n[dependencies]\ndeadpool-postgres = { version = \"0.9\" }\ntokio-postgres = { version = \"0.7\", features = [\"with-uuid-0_8\"] }\n```\n\n**Important:** The version numbers of `deadpool-postgres` and `tokio-postgres` do not necessarily match. If they do it is just a coincidence that both crates have the same MAJOR and MINOR version number.\ndeadpool-postgres| tokio-postgres  \n---|---  \n0.7 \u2013 0.12| 0.7  \n0.6| 0.6  \n0.4 \u2013 0.5| 0.5  \n0.2 \u2013 0.3| 0.5.0-alpha  \n  * **How can I clear the statement cache?**\nYou can call `pool.manager().statement_cache.clear()` to clear all statement caches or `pool.manager().statement_cache.remove()` to remove a single statement from all caches.\n**Important:** The `ClientWrapper` also provides a `statement_cache` field which has `clear()` and `remove()` methods which only affect a single client.\n\n\n### [\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#license)License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Re-exports[\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#reexports)\n\n`pub use tokio_postgres[](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html \"mod tokio_postgres\");`\n\n## Structs[\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#structs)\n\n[ClientWrapper](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.ClientWrapper.html \"struct deadpool_postgres::ClientWrapper\")\n    Wrapper around [`tokio_postgres::Client`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/client/struct.Client.html \"struct tokio_postgres::client::Client\") with a [`StatementCache`](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.StatementCache.html \"struct deadpool_postgres::StatementCache\").\n\n[Config](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Config.html \"struct deadpool_postgres::Config\")\n    Configuration object.\n\n[ConfigConnectImpl](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.ConfigConnectImpl.html \"struct deadpool_postgres::ConfigConnectImpl\")\n    Provides an implementation of [`Connect`](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/trait.Connect.html \"trait deadpool_postgres::Connect\") that establishes the connection using the `tokio_postgres` configuration itself.\n\n[Manager](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Manager.html \"struct deadpool_postgres::Manager\")\n    [`Manager`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/trait.Manager.html \"trait deadpool::managed::Manager\") for creating and recycling PostgreSQL connections.\n\n[ManagerConfig](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.ManagerConfig.html \"struct deadpool_postgres::ManagerConfig\")\n    Configuration object for a [`Manager`](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Manager.html \"struct deadpool_postgres::Manager\").\n\n[Metrics](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Metrics.html \"struct deadpool_postgres::Metrics\")\n    Statistics regarding an object returned by the pool\n\n[PoolConfig](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.PoolConfig.html \"struct deadpool_postgres::PoolConfig\")\n    [`Pool`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/struct.Pool.html \"struct deadpool::managed::Pool\") configuration.\n\n[StatementCache](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.StatementCache.html \"struct deadpool_postgres::StatementCache\")\n    Representation of a cache of [`Statement`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/statement/struct.Statement.html \"struct tokio_postgres::statement::Statement\")s.\n\n[StatementCaches](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.StatementCaches.html \"struct deadpool_postgres::StatementCaches\")\n    Structure holding a reference to all [`StatementCache`](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.StatementCache.html \"struct deadpool_postgres::StatementCache\")s and providing access for clearing all caches and removing single statements from them.\n\n[Status](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Status.html \"struct deadpool_postgres::Status\")\n    The current pool status.\n\n[Timeouts](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Timeouts.html \"struct deadpool_postgres::Timeouts\")\n    Timeouts when getting [`Object`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/struct.Object.html \"struct deadpool::managed::Object\")s from a [`Pool`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/struct.Pool.html \"struct deadpool::managed::Pool\").\n\n[Transaction](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Transaction.html \"struct deadpool_postgres::Transaction\")\n    Wrapper around [`tokio_postgres::Transaction`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/transaction/struct.Transaction.html \"struct tokio_postgres::transaction::Transaction\") with a [`StatementCache`](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.StatementCache.html \"struct deadpool_postgres::StatementCache\") from the [`Client`](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Client.html \"type deadpool_postgres::Client\") object it was created by.\n\n[TransactionBuilder](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.TransactionBuilder.html \"struct deadpool_postgres::TransactionBuilder\")\n    Wrapper around [`tokio_postgres::TransactionBuilder`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/transaction_builder/struct.TransactionBuilder.html \"struct tokio_postgres::transaction_builder::TransactionBuilder\") with a [`StatementCache`](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.StatementCache.html \"struct deadpool_postgres::StatementCache\") from the [`Client`](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Client.html \"type deadpool_postgres::Client\") object it was created by.\n## Enums[\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#enums)\n\n[ChannelBinding](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.ChannelBinding.html \"enum deadpool_postgres::ChannelBinding\")\n    Channel binding configuration.\n\n[ConfigError](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.ConfigError.html \"enum deadpool_postgres::ConfigError\")\n    This error is returned if there is something wrong with the configuration\n\n[LoadBalanceHosts](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.LoadBalanceHosts.html \"enum deadpool_postgres::LoadBalanceHosts\")\n    Load balancing configuration.\n\n[RecyclingMethod](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.RecyclingMethod.html \"enum deadpool_postgres::RecyclingMethod\")\n    Possible methods of how a connection is recycled.\n\n[Runtime](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.Runtime.html \"enum deadpool_postgres::Runtime\")\n    Enumeration for picking a runtime implementation.\n\n[SslMode](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.SslMode.html \"enum deadpool_postgres::SslMode\")\n    TLS configuration.\n\n[TargetSessionAttrs](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.TargetSessionAttrs.html \"enum deadpool_postgres::TargetSessionAttrs\")\n    Properties required of a session.\n## Traits[\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#traits)\n\n[Connect](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/trait.Connect.html \"trait deadpool_postgres::Connect\")\n    Describes a mechanism for establishing a connection to a PostgreSQL server via `tokio_postgres`.\n\n[GenericClient](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/trait.GenericClient.html \"trait deadpool_postgres::GenericClient\")\n    A trait allowing abstraction over connections and transactions.\n## Type Aliases[\u00a7](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#types)\n\n[BuildError](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.BuildError.html \"type deadpool_postgres::BuildError\")\n    Type alias for using [`deadpool::managed::BuildError`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/builder/enum.BuildError.html \"enum deadpool::managed::builder::BuildError\") with [`tokio_postgres`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html \"mod tokio_postgres\").\n\n[Client](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Client.html \"type deadpool_postgres::Client\")\n    Type alias for [`Object`](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Object.html \"type deadpool_postgres::Object\")\n\n[CreatePoolError](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.CreatePoolError.html \"type deadpool_postgres::CreatePoolError\")\n    Type alias for using [`deadpool::managed::CreatePoolError`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/config/enum.CreatePoolError.html \"enum deadpool::managed::config::CreatePoolError\") with [`tokio_postgres`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html \"mod tokio_postgres\").\n\n[Hook](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Hook.html \"type deadpool_postgres::Hook\")\n    Type alias for using [`deadpool::managed::Hook`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/hooks/enum.Hook.html \"enum deadpool::managed::hooks::Hook\") with [`tokio_postgres`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html \"mod tokio_postgres\").\n\n[HookError](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.HookError.html \"type deadpool_postgres::HookError\")\n    Type alias for using [`deadpool::managed::HookError`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/hooks/enum.HookError.html \"enum deadpool::managed::hooks::HookError\") with [`tokio_postgres`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html \"mod tokio_postgres\").\n\n[Object](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Object.html \"type deadpool_postgres::Object\")\n    Type alias for using [`deadpool::managed::Object`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/struct.Object.html \"struct deadpool::managed::Object\") with [`tokio_postgres`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html \"mod tokio_postgres\").\n\n[Pool](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Pool.html \"type deadpool_postgres::Pool\")\n    Type alias for using [`deadpool::managed::Pool`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/struct.Pool.html \"struct deadpool::managed::Pool\") with [`tokio_postgres`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html \"mod tokio_postgres\").\n\n[PoolBuilder](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.PoolBuilder.html \"type deadpool_postgres::PoolBuilder\")\n    Type alias for using [`deadpool::managed::PoolBuilder`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/builder/struct.PoolBuilder.html \"struct deadpool::managed::builder::PoolBuilder\") with [`tokio_postgres`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html \"mod tokio_postgres\").\n\n[PoolError](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.PoolError.html \"type deadpool_postgres::PoolError\")\n    Type alias for using [`deadpool::managed::PoolError`](https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/errors/enum.PoolError.html \"enum deadpool::managed::errors::PoolError\") with [`tokio_postgres`](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html \"mod tokio_postgres\").\n",
        "markdown_with_citations": "[](https://docs.rs/deadpool-postgres/latest/deadpool_postgres/all.html \"show sidebar\")\n# Crate deadpool_postgresCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Deadpool for PostgreSQL ![Latest Version\u27e85\u27e9](https://crates.io/crates/deadpool-postgres) ![Unsafe forbidden\u27e86\u27e9] ![Rust 1.75+\u27e87\u27e9](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html)\nDeadpool is a dead simple async pool for connections and objects of any type.\nThis crate implements a `deadpool`\u27e88\u27e9 manager for `tokio-postgres`\u27e89\u27e9 and also provides a `statement` cache by wrapping `tokio_postgres::Client` and `tokio_postgres::Transaction`.\n### \u00a7\u27e810\u27e9Features\nFeature| Description| Extra dependencies| Default  \n---|---|---|---  \n`rt_tokio_1`| Enable support for tokio\u27e811\u27e9 crate| `deadpool/rt_tokio_1`| yes  \n`rt_async-std_1`| Enable support for async-std\u27e812\u27e9 crate| `deadpool/rt_async-std_1`| no  \n`serde`| Enable support for serde\u27e813\u27e9 crate| `deadpool/serde`, `serde/derive`| no  \n**Important:** `async-std` support is currently limited to the `async-std` specific timeout function. You still need to enable the `tokio1` feature of `async-std` in order to use this crate with `async-std`.\n### \u00a7\u27e814\u27e9Example\nThe following example assumes a PostgreSQL reachable via an unix domain socket and peer auth enabled for the local user in pg_hba.conf\u27e815\u27e9. If you\u2019re running Windows you probably want to specify the `host`, `user` and `password` in the connection config or use an alternative authentication method\u27e816\u27e9.\n```\nuse deadpool_postgres::{Config, ManagerConfig, RecyclingMethod, Runtime};\nuse tokio_postgres::NoTls;\n#[tokio::main]\nasync fn main() {\n  let mut cfg = Config::new();\n  cfg.dbname = Some(\"deadpool\".to_string());\n  cfg.manager = Some(ManagerConfig {\n    recycling_method: RecyclingMethod::Fast,\n  });\n  let pool = cfg.create_pool(Some(Runtime::Tokio1), NoTls).unwrap();\n  for i in 1..10i32 {\n    let client = pool.get().await.unwrap();\n    let stmt = client.prepare_cached(\"SELECT 1 + $1\").await.unwrap();\n    let rows = client.query(&stmt, &[&i]).await.unwrap();\n    let value: i32 = rows[0].get(0);\n    assert_eq!(value, i + 1);\n  }\n}\n```\n\n### \u00a7\u27e817\u27e9Example with `config` and `dotenvy` crate\n```\n# .env\nPG__DBNAME=deadpool\n```\n\n```\nuse deadpool_postgres::Runtime;\nuse dotenvy::dotenv;\nuse tokio_postgres::NoTls;\n#[derive(Debug, serde::Deserialize)]\nstruct Config {\n  pg: deadpool_postgres::Config,\n}\nimpl Config {\n  pub fn from_env() -> Result<Self, config::ConfigError> {\n    config::Config::builder()\n      .add_source(config::Environment::default().separator(\"__\"))\n      .build()?\n      .try_deserialize()\n  }\n}\n#[tokio::main]\nasync fn main() {\n  dotenv().ok();\n  let cfg = Config::from_env().unwrap();\n  let pool = cfg.pg.create_pool(Some(Runtime::Tokio1), NoTls).unwrap();\n  for i in 1..10i32 {\n    let client = pool.get().await.unwrap();\n    let stmt = client.prepare_cached(\"SELECT 1 + $1\").await.unwrap();\n    let rows = client.query(&stmt, &[&i]).await.unwrap();\n    let value: i32 = rows[0].get(0);\n    assert_eq!(value, i + 1);\n  }\n}\n```\n\n**Note:** The code above uses the crate name `config_crate` because of the `config` feature and both features and dependencies share the same namespace. In your own code you will probably want to use `::config::ConfigError` and `::config::Config` instead.\n### \u00a7\u27e818\u27e9Example using an existing `tokio_postgres::Config` object\n```\nuse deadpool_postgres::{Manager, ManagerConfig, Pool, RecyclingMethod};\nuse std::env;\nuse tokio_postgres::NoTls;\n#[tokio::main]\nasync fn main() {\n  let mut pg_config = tokio_postgres::Config::new();\n  pg_config.host_path(\"/run/postgresql\");\n  pg_config.host_path(\"/tmp\");\n  pg_config.user(env::var(\"USER\").unwrap().as_str());\n  pg_config.dbname(\"deadpool\");\n  let mgr_config = ManagerConfig {\n    recycling_method: RecyclingMethod::Fast,\n  };\n  let mgr = Manager::from_config(pg_config, NoTls, mgr_config);\n  let pool = Pool::builder(mgr).max_size(16).build().unwrap();\n  for i in 1..10i32 {\n    let client = pool.get().await.unwrap();\n    let stmt = client.prepare_cached(\"SELECT 1 + $1\").await.unwrap();\n    let rows = client.query(&stmt, &[&i]).await.unwrap();\n    let value: i32 = rows[0].get(0);\n    assert_eq!(value, i + 1);\n  }\n}\n```\n\n### \u00a7\u27e819\u27e9FAQ\n  * **The database is unreachable. Why does the pool creation not fail?**\nDeadpool has identical startup and runtime behaviour\u27e820\u27e9 and therefore the pool creation will never fail.\nIf you want your application to crash on startup if no database connection can be established just call `pool.get().await` right after creating the pool.\n  * **Why are connections retrieved from the pool sometimes unuseable?**\nIn `deadpool-postgres 0.5.5` a new recycling method was implemented which is the default since `0.8`. With that recycling method the manager no longer performs a test query prior returning the connection but relies solely on `tokio_postgres::Client::is_closed` instead. Under some rare circumstances (e.g. unreliable networks) this can lead to `tokio_postgres` not noticing a disconnect and reporting the connection as useable.\nThe old and slightly slower recycling method can be enabled by setting `ManagerConfig::recycling_method` to `RecyclingMethod::Verified` or when using the `config` crate by setting `PG__MANAGER__RECYCLING_METHOD=Verified`.\n  * **How can I enable features of the`tokio-postgres` crate?**\nMake sure that you depend on the same version of `tokio-postgres` as `deadpool-postgres` does and enable the needed features in your own `Crate.toml` file:\n```\n[dependencies]\ndeadpool-postgres = { version = \"0.9\" }\ntokio-postgres = { version = \"0.7\", features = [\"with-uuid-0_8\"] }\n```\n\n**Important:** The version numbers of `deadpool-postgres` and `tokio-postgres` do not necessarily match. If they do it is just a coincidence that both crates have the same MAJOR and MINOR version number.\ndeadpool-postgres| tokio-postgres  \n---|---  \n0.7 \u2013 0.12| 0.7  \n0.6| 0.6  \n0.4 \u2013 0.5| 0.5  \n0.2 \u2013 0.3| 0.5.0-alpha  \n  * **How can I clear the statement cache?**\nYou can call `pool.manager().statement_cache.clear()` to clear all statement caches or `pool.manager().statement_cache.remove()` to remove a single statement from all caches.\n**Important:** The `ClientWrapper` also provides a `statement_cache` field which has `clear()` and `remove()` methods which only affect a single client.\n\n\n### \u00a7\u27e821\u27e9License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e822\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e823\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Re-exports\u00a7\u27e824\u27e9\n\n`pub use tokio_postgres[](https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html \"mod tokio_postgres\");`\n\n## Structs\u00a7\u27e825\u27e9\n\nClientWrapper\u27e826\u27e9\n    Wrapper around `tokio_postgres::Client`\u27e827\u27e9 with a `StatementCache`\u27e828\u27e9.\n\nConfig\u27e829\u27e9\n    Configuration object.\n\nConfigConnectImpl\u27e830\u27e9\n    Provides an implementation of `Connect`\u27e831\u27e9 that establishes the connection using the `tokio_postgres` configuration itself.\n\nManager\u27e832\u27e9\n    `Manager`\u27e833\u27e9 for creating and recycling PostgreSQL connections.\n\nManagerConfig\u27e834\u27e9\n    Configuration object for a `Manager`\u27e832\u27e9.\n\nMetrics\u27e835\u27e9\n    Statistics regarding an object returned by the pool\n\nPoolConfig\u27e836\u27e9\n    `Pool`\u27e837\u27e9 configuration.\n\nStatementCache\u27e828\u27e9\n    Representation of a cache of `Statement`\u27e838\u27e9s.\n\nStatementCaches\u27e839\u27e9\n    Structure holding a reference to all `StatementCache`\u27e828\u27e9s and providing access for clearing all caches and removing single statements from them.\n\nStatus\u27e840\u27e9\n    The current pool status.\n\nTimeouts\u27e841\u27e9\n    Timeouts when getting `Object`\u27e842\u27e9s from a `Pool`\u27e837\u27e9.\n\nTransaction\u27e843\u27e9\n    Wrapper around `tokio_postgres::Transaction`\u27e844\u27e9 with a `StatementCache`\u27e828\u27e9 from the `Client`\u27e845\u27e9 object it was created by.\n\nTransactionBuilder\u27e846\u27e9\n    Wrapper around `tokio_postgres::TransactionBuilder`\u27e847\u27e9 with a `StatementCache`\u27e828\u27e9 from the `Client`\u27e845\u27e9 object it was created by.\n## Enums\u00a7\u27e848\u27e9\n\nChannelBinding\u27e849\u27e9\n    Channel binding configuration.\n\nConfigError\u27e850\u27e9\n    This error is returned if there is something wrong with the configuration\n\nLoadBalanceHosts\u27e851\u27e9\n    Load balancing configuration.\n\nRecyclingMethod\u27e852\u27e9\n    Possible methods of how a connection is recycled.\n\nRuntime\u27e853\u27e9\n    Enumeration for picking a runtime implementation.\n\nSslMode\u27e854\u27e9\n    TLS configuration.\n\nTargetSessionAttrs\u27e855\u27e9\n    Properties required of a session.\n## Traits\u00a7\u27e856\u27e9\n\nConnect\u27e831\u27e9\n    Describes a mechanism for establishing a connection to a PostgreSQL server via `tokio_postgres`.\n\nGenericClient\u27e857\u27e9\n    A trait allowing abstraction over connections and transactions.\n## Type Aliases\u00a7\u27e858\u27e9\n\nBuildError\u27e859\u27e9\n    Type alias for using `deadpool::managed::BuildError`\u27e860\u27e9 with `tokio_postgres`\u27e861\u27e9.\n\nClient\u27e845\u27e9\n    Type alias for `Object`\u27e862\u27e9\n\nCreatePoolError\u27e863\u27e9\n    Type alias for using `deadpool::managed::CreatePoolError`\u27e864\u27e9 with `tokio_postgres`\u27e861\u27e9.\n\nHook\u27e865\u27e9\n    Type alias for using `deadpool::managed::Hook`\u27e866\u27e9 with `tokio_postgres`\u27e861\u27e9.\n\nHookError\u27e867\u27e9\n    Type alias for using `deadpool::managed::HookError`\u27e868\u27e9 with `tokio_postgres`\u27e861\u27e9.\n\nObject\u27e862\u27e9\n    Type alias for using `deadpool::managed::Object`\u27e842\u27e9 with `tokio_postgres`\u27e861\u27e9.\n\nPool\u27e869\u27e9\n    Type alias for using `deadpool::managed::Pool`\u27e837\u27e9 with `tokio_postgres`\u27e861\u27e9.\n\nPoolBuilder\u27e870\u27e9\n    Type alias for using `deadpool::managed::PoolBuilder`\u27e871\u27e9 with `tokio_postgres`\u27e861\u27e9.\n\nPoolError\u27e872\u27e9\n    Type alias for using `deadpool::managed::PoolError`\u27e873\u27e9 with `tokio_postgres`\u27e861\u27e9.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/deadpool-postgres/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/deadpool-postgres/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/deadpool-postgres/latest/src/deadpool_postgres/lib.rs.html#1-660: Source\n\u27e84\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#deadpool-for-postgresql-latest-version-unsafe-forbidden-rust-175: \u00a7\n\u27e85\u27e9 https://img.shields.io/crates/v/deadpool-postgres.svg: ![Latest Version\n\u27e86\u27e9 https://img.shields.io/badge/unsafe-forbidden-success.svg: Unsafe forbidden\n\u27e87\u27e9 https://img.shields.io/badge/rustc-1.75+-lightgray.svg: ![Rust 1.75+\n\u27e88\u27e9 https://crates.io/crates/deadpool: `deadpool`\n\u27e89\u27e9 https://crates.io/crates/tokio-postgres: `tokio-postgres`\n\u27e810\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#features: \u00a7\n\u27e811\u27e9 https://crates.io/crates/tokio: tokio\n\u27e812\u27e9 https://crates.io/crates/config: async-std\n\u27e813\u27e9 https://crates.io/crates/serde: serde\n\u27e814\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#example: \u00a7\n\u27e815\u27e9 https://www.postgresql.org/docs/current/auth-pg-hba-conf.html: pg_hba.conf\n\u27e816\u27e9 https://www.postgresql.org/docs/current/auth-methods.html: authentication method\n\u27e817\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#example-with-config-and-dotenvy-crate: \u00a7\n\u27e818\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#example-using-an-existing-tokio_postgresconfig-object: \u00a7\n\u27e819\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#faq: \u00a7\n\u27e820\u27e9 https://crates.io/crates/deadpool/#reasons-for-yet-another-connection-pool: identical startup and runtime behaviour\n\u27e821\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#license: \u00a7\n\u27e822\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/LICENSE-APACHE: LICENSE-APACHE\n\u27e823\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/LICENSE-MIT: LICENSE-MIT\n\u27e824\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#reexports: \u00a7\n\u27e825\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#structs: \u00a7\n\u27e826\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.ClientWrapper.html: struct deadpool_postgres::ClientWrapper - ClientWrapper\n\u27e827\u27e9 https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/client/struct.Client.html: struct tokio_postgres::client::Client - `tokio_postgres::Client`\n\u27e828\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.StatementCache.html: struct deadpool_postgres::StatementCache - `StatementCache`\n\u27e829\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Config.html: struct deadpool_postgres::Config - Config\n\u27e830\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.ConfigConnectImpl.html: struct deadpool_postgres::ConfigConnectImpl - ConfigConnectImpl\n\u27e831\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/trait.Connect.html: trait deadpool_postgres::Connect - `Connect`\n\u27e832\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Manager.html: struct deadpool_postgres::Manager - Manager\n\u27e833\u27e9 https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/trait.Manager.html: trait deadpool::managed::Manager - `Manager`\n\u27e834\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.ManagerConfig.html: struct deadpool_postgres::ManagerConfig - ManagerConfig\n\u27e835\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Metrics.html: struct deadpool_postgres::Metrics - Metrics\n\u27e836\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.PoolConfig.html: struct deadpool_postgres::PoolConfig - PoolConfig\n\u27e837\u27e9 https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/struct.Pool.html: struct deadpool::managed::Pool - `Pool`\n\u27e838\u27e9 https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/statement/struct.Statement.html: struct tokio_postgres::statement::Statement - `Statement`\n\u27e839\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.StatementCaches.html: struct deadpool_postgres::StatementCaches - StatementCaches\n\u27e840\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Status.html: struct deadpool_postgres::Status - Status\n\u27e841\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Timeouts.html: struct deadpool_postgres::Timeouts - Timeouts\n\u27e842\u27e9 https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/struct.Object.html: struct deadpool::managed::Object - `Object`\n\u27e843\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.Transaction.html: struct deadpool_postgres::Transaction - Transaction\n\u27e844\u27e9 https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/transaction/struct.Transaction.html: struct tokio_postgres::transaction::Transaction - `tokio_postgres::Transaction`\n\u27e845\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Client.html: type deadpool_postgres::Client - `Client`\n\u27e846\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/struct.TransactionBuilder.html: struct deadpool_postgres::TransactionBuilder - TransactionBuilder\n\u27e847\u27e9 https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/transaction_builder/struct.TransactionBuilder.html: struct tokio_postgres::transaction_builder::TransactionBuilder - `tokio_postgres::TransactionBuilder`\n\u27e848\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#enums: \u00a7\n\u27e849\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.ChannelBinding.html: enum deadpool_postgres::ChannelBinding - ChannelBinding\n\u27e850\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.ConfigError.html: enum deadpool_postgres::ConfigError - ConfigError\n\u27e851\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.LoadBalanceHosts.html: enum deadpool_postgres::LoadBalanceHosts - LoadBalanceHosts\n\u27e852\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.RecyclingMethod.html: enum deadpool_postgres::RecyclingMethod - RecyclingMethod\n\u27e853\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.Runtime.html: enum deadpool_postgres::Runtime - Runtime\n\u27e854\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.SslMode.html: enum deadpool_postgres::SslMode - SslMode\n\u27e855\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/enum.TargetSessionAttrs.html: enum deadpool_postgres::TargetSessionAttrs - TargetSessionAttrs\n\u27e856\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#traits: \u00a7\n\u27e857\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/trait.GenericClient.html: trait deadpool_postgres::GenericClient - GenericClient\n\u27e858\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/#types: \u00a7\n\u27e859\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.BuildError.html: type deadpool_postgres::BuildError - BuildError\n\u27e860\u27e9 https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/builder/enum.BuildError.html: enum deadpool::managed::builder::BuildError - `deadpool::managed::BuildError`\n\u27e861\u27e9 https://docs.rs/tokio-postgres/0.7.13/x86_64-unknown-linux-gnu/tokio_postgres/index.html: mod tokio_postgres - `tokio_postgres`\n\u27e862\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Object.html: type deadpool_postgres::Object - `Object`\n\u27e863\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.CreatePoolError.html: type deadpool_postgres::CreatePoolError - CreatePoolError\n\u27e864\u27e9 https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/config/enum.CreatePoolError.html: enum deadpool::managed::config::CreatePoolError - `deadpool::managed::CreatePoolError`\n\u27e865\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Hook.html: type deadpool_postgres::Hook - Hook\n\u27e866\u27e9 https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/hooks/enum.Hook.html: enum deadpool::managed::hooks::Hook - `deadpool::managed::Hook`\n\u27e867\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.HookError.html: type deadpool_postgres::HookError - HookError\n\u27e868\u27e9 https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/hooks/enum.HookError.html: enum deadpool::managed::hooks::HookError - `deadpool::managed::HookError`\n\u27e869\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.Pool.html: type deadpool_postgres::Pool - Pool\n\u27e870\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.PoolBuilder.html: type deadpool_postgres::PoolBuilder - PoolBuilder\n\u27e871\u27e9 https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/builder/struct.PoolBuilder.html: struct deadpool::managed::builder::PoolBuilder - `deadpool::managed::PoolBuilder`\n\u27e872\u27e9 https://docs.rs/deadpool-postgres/latest/deadpool_postgres/type.PoolError.html: type deadpool_postgres::PoolError - PoolError\n\u27e873\u27e9 https://docs.rs/deadpool/0.12.2/x86_64-unknown-linux-gnu/deadpool/managed/errors/enum.PoolError.html: enum deadpool::managed::errors::PoolError - `deadpool::managed::PoolError`\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `deadpool-postgres` crate provides an asynchronous connection pool for PostgreSQL, built on `tokio-postgres`. It includes features like statement caching, configurable connection recycling methods, and support for both `tokio` and `async-std` runtimes. Optional integration with `serde` and environment-based configuration via crates like `config` and `dotenvy` is also supported.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Connection Pooling  \n\u2705 **Factual:** The `deadpool-postgres` crate provides an asynchronous connection pooling mechanism for `tokio-postgres`, allowing efficient reuse of database connections in high-concurrency applications.  \n\u274c **Counterfactual:** The `deadpool-postgres` crate automatically detects and reconnects disconnected database connections without any configuration or intervention from the user.  \n\n---\n\n### Pair 2: Statement Caching  \n\u2705 **Factual:** `deadpool-postgres` includes a `StatementCache` that wraps `tokio_postgres::Client` and `tokio_postgres::Transaction`, enabling caching of prepared statements to improve query performance.  \n\u274c **Counterfactual:** `deadpool-postgres` caches all executed queries by default, including non-prepared statements, to optimize database access.  \n\n---\n\n### Pair 3: Runtime Support  \n\u2705 **Factual:** The crate supports both `tokio` and `async-std` runtimes, but `async-std` support is limited to its timeout function and requires enabling the `tokio1` feature of `async-std`.  \n\u274c **Counterfactual:** The crate fully supports `async-std` without any limitations or dependency on `tokio1`, making it equally performant across both runtimes.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}