{
    "name": "tiny_http",
    "version": "0.12.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/tiny_http/latest/tiny_http/all.html \"show sidebar\")\n# Crate tiny_httpCopy item path\n[Settings](https://docs.rs/tiny_http/latest/settings.html)\n[Help](https://docs.rs/tiny_http/latest/help.html)\nSummary[Source](https://docs.rs/tiny_http/latest/src/tiny_http/lib.rs.html#1-445)\nExpand description\n## [\u00a7](https://docs.rs/tiny_http/latest/tiny_http/#simple-usage)Simple usage\n### [\u00a7](https://docs.rs/tiny_http/latest/tiny_http/#creating-the-server)Creating the server\nThe easiest way to create a server is to call `Server::http()`.\nThe `http()` function returns an `IoResult<Server>` which will return an error in the case where the server creation fails (for example if the listening port is already occupied).\n```\nlet server = tiny_http::Server::http(\"0.0.0.0:0\").unwrap();\n```\n\nA newly-created `Server` will immediately start listening for incoming connections and HTTP requests.\n### [\u00a7](https://docs.rs/tiny_http/latest/tiny_http/#receiving-requests)Receiving requests\nCalling `server.recv()` will block until the next request is available. This function returns an `IoResult<Request>`, so you need to handle the possible errors.\n```\n\nloop {\n  // blocks until the next request is received\n  let request = match server.recv() {\n    Ok(rq) => rq,\n    Err(e) => { println!(\"error: {}\", e); break }\n  };\n  // do something with the request\n  // ...\n}\n```\n\nIn a real-case scenario, you will probably want to spawn multiple worker tasks and call `server.recv()` on all of them. Like this:\n```\nlet server = Arc::new(server);\nlet mut guards = Vec::with_capacity(4);\nfor _ in (0 .. 4) {\n  let server = server.clone();\n  let guard = thread::spawn(move || {\n    loop {\n      let rq = server.recv().unwrap();\n      // ...\n    }\n  });\n  guards.push(guard);\n}\n```\n\nIf you don\u2019t want to block, you can call `server.try_recv()` instead.\n### [\u00a7](https://docs.rs/tiny_http/latest/tiny_http/#handling-requests)Handling requests\nThe `Request` object returned by `server.recv()` contains informations about the client\u2019s request. The most useful methods are probably `request.method()` and `request.url()` which return the requested method (`GET`, `POST`, etc.) and url.\nTo handle a request, you need to create a `Response` object. See the docs of this object for more infos. Here is an example of creating a `Response` from a file:\n```\nlet response = tiny_http::Response::from_file(File::open(&Path::new(\"image.png\")).unwrap());\n```\n\nAll that remains to do is call `request.respond()`:\n```\nlet _ = request.respond(response);\n```\n\n## Structs[\u00a7](https://docs.rs/tiny_http/latest/tiny_http/#structs)\n\n[HTTPVersion](https://docs.rs/tiny_http/latest/tiny_http/struct.HTTPVersion.html \"struct tiny_http::HTTPVersion\")\n    HTTP version (usually 1.0 or 1.1).\n\n[Header](https://docs.rs/tiny_http/latest/tiny_http/struct.Header.html \"struct tiny_http::Header\")\n    Represents a HTTP header.\n\n[HeaderField](https://docs.rs/tiny_http/latest/tiny_http/struct.HeaderField.html \"struct tiny_http::HeaderField\")\n    Field of a header (eg. `Content-Type`, `Content-Length`, etc.)\n\n[IncomingRequests](https://docs.rs/tiny_http/latest/tiny_http/struct.IncomingRequests.html \"struct tiny_http::IncomingRequests\")\n\n\n[Request](https://docs.rs/tiny_http/latest/tiny_http/struct.Request.html \"struct tiny_http::Request\")\n    Represents an HTTP request made by a client.\n\n[Response](https://docs.rs/tiny_http/latest/tiny_http/struct.Response.html \"struct tiny_http::Response\")\n    Object representing an HTTP response whose purpose is to be given to a `Request`.\n\n[Server](https://docs.rs/tiny_http/latest/tiny_http/struct.Server.html \"struct tiny_http::Server\")\n    The main class of this library.\n\n[ServerConfig](https://docs.rs/tiny_http/latest/tiny_http/struct.ServerConfig.html \"struct tiny_http::ServerConfig\")\n    Represents the parameters required to create a server.\n\n[SslConfig](https://docs.rs/tiny_http/latest/tiny_http/struct.SslConfig.html \"struct tiny_http::SslConfig\")\n    Configuration of the server for SSL.\n\n[StatusCode](https://docs.rs/tiny_http/latest/tiny_http/struct.StatusCode.html \"struct tiny_http::StatusCode\")\n    Status code of a request or response.\n\n[TestRequest](https://docs.rs/tiny_http/latest/tiny_http/struct.TestRequest.html \"struct tiny_http::TestRequest\")\n    A simpler version of [`Request`](https://docs.rs/tiny_http/latest/tiny_http/struct.Request.html \"struct tiny_http::Request\") that is useful for testing. No data actually goes anywhere.\n## Enums[\u00a7](https://docs.rs/tiny_http/latest/tiny_http/#enums)\n\n[ConfigListenAddr](https://docs.rs/tiny_http/latest/tiny_http/enum.ConfigListenAddr.html \"enum tiny_http::ConfigListenAddr\")\n\n\n[ListenAddr](https://docs.rs/tiny_http/latest/tiny_http/enum.ListenAddr.html \"enum tiny_http::ListenAddr\")\n    Unified listen socket address. Either a [`SocketAddr`](https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html \"enum core::net::socket_addr::SocketAddr\") or [`std::os::unix::net::SocketAddr`](https://doc.rust-lang.org/nightly/std/os/unix/net/addr/struct.SocketAddr.html \"struct std::os::unix::net::addr::SocketAddr\").\n\n[Listener](https://docs.rs/tiny_http/latest/tiny_http/enum.Listener.html \"enum tiny_http::Listener\")\n    Unified listener. Either a [`TcpListener`](https://doc.rust-lang.org/nightly/std/net/tcp/struct.TcpListener.html \"struct std::net::tcp::TcpListener\") or [`std::os::unix::net::UnixListener`](https://doc.rust-lang.org/nightly/std/os/unix/net/listener/struct.UnixListener.html \"struct std::os::unix::net::listener::UnixListener\")\n\n[Method](https://docs.rs/tiny_http/latest/tiny_http/enum.Method.html \"enum tiny_http::Method\")\n    HTTP request methods\n## Traits[\u00a7](https://docs.rs/tiny_http/latest/tiny_http/#traits)\n\n[ReadWrite](https://docs.rs/tiny_http/latest/tiny_http/trait.ReadWrite.html \"trait tiny_http::ReadWrite\")\n    Dummy trait that regroups the `Read` and `Write` traits.\n## Type Aliases[\u00a7](https://docs.rs/tiny_http/latest/tiny_http/#types)\n\n[ResponseBox](https://docs.rs/tiny_http/latest/tiny_http/type.ResponseBox.html \"type tiny_http::ResponseBox\")\n    A `Response` without a template parameter.\n",
        "markdown_with_citations": "[](https://docs.rs/tiny_http/latest/tiny_http/all.html \"show sidebar\")\n# Crate tiny_httpCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Simple usage\n### \u00a7\u27e85\u27e9Creating the server\nThe easiest way to create a server is to call `Server::http()`.\nThe `http()` function returns an `IoResult<Server>` which will return an error in the case where the server creation fails (for example if the listening port is already occupied).\n```\nlet server = tiny_http::Server::http(\"0.0.0.0:0\").unwrap();\n```\n\nA newly-created `Server` will immediately start listening for incoming connections and HTTP requests.\n### \u00a7\u27e86\u27e9Receiving requests\nCalling `server.recv()` will block until the next request is available. This function returns an `IoResult<Request>`, so you need to handle the possible errors.\n```\n\nloop {\n  // blocks until the next request is received\n  let request = match server.recv() {\n    Ok(rq) => rq,\n    Err(e) => { println!(\"error: {}\", e); break }\n  };\n  // do something with the request\n  // ...\n}\n```\n\nIn a real-case scenario, you will probably want to spawn multiple worker tasks and call `server.recv()` on all of them. Like this:\n```\nlet server = Arc::new(server);\nlet mut guards = Vec::with_capacity(4);\nfor _ in (0 .. 4) {\n  let server = server.clone();\n  let guard = thread::spawn(move || {\n    loop {\n      let rq = server.recv().unwrap();\n      // ...\n    }\n  });\n  guards.push(guard);\n}\n```\n\nIf you don\u2019t want to block, you can call `server.try_recv()` instead.\n### \u00a7\u27e87\u27e9Handling requests\nThe `Request` object returned by `server.recv()` contains informations about the client\u2019s request. The most useful methods are probably `request.method()` and `request.url()` which return the requested method (`GET`, `POST`, etc.) and url.\nTo handle a request, you need to create a `Response` object. See the docs of this object for more infos. Here is an example of creating a `Response` from a file:\n```\nlet response = tiny_http::Response::from_file(File::open(&Path::new(\"image.png\")).unwrap());\n```\n\nAll that remains to do is call `request.respond()`:\n```\nlet _ = request.respond(response);\n```\n\n## Structs\u00a7\u27e88\u27e9\n\nHTTPVersion\u27e89\u27e9\n    HTTP version (usually 1.0 or 1.1).\n\nHeader\u27e810\u27e9\n    Represents a HTTP header.\n\nHeaderField\u27e811\u27e9\n    Field of a header (eg. `Content-Type`, `Content-Length`, etc.)\n\nIncomingRequests\u27e812\u27e9\n\n\nRequest\u27e813\u27e9\n    Represents an HTTP request made by a client.\n\nResponse\u27e814\u27e9\n    Object representing an HTTP response whose purpose is to be given to a `Request`.\n\nServer\u27e815\u27e9\n    The main class of this library.\n\nServerConfig\u27e816\u27e9\n    Represents the parameters required to create a server.\n\nSslConfig\u27e817\u27e9\n    Configuration of the server for SSL.\n\nStatusCode\u27e818\u27e9\n    Status code of a request or response.\n\nTestRequest\u27e819\u27e9\n    A simpler version of `Request`\u27e813\u27e9 that is useful for testing. No data actually goes anywhere.\n## Enums\u00a7\u27e820\u27e9\n\nConfigListenAddr\u27e821\u27e9\n\n\nListenAddr\u27e822\u27e9\n    Unified listen socket address. Either a `SocketAddr`\u27e823\u27e9 or `std::os::unix::net::SocketAddr`\u27e824\u27e9.\n\nListener\u27e825\u27e9\n    Unified listener. Either a `TcpListener`\u27e826\u27e9 or `std::os::unix::net::UnixListener`\u27e827\u27e9\n\nMethod\u27e828\u27e9\n    HTTP request methods\n## Traits\u00a7\u27e829\u27e9\n\nReadWrite\u27e830\u27e9\n    Dummy trait that regroups the `Read` and `Write` traits.\n## Type Aliases\u00a7\u27e831\u27e9\n\nResponseBox\u27e832\u27e9\n    A `Response` without a template parameter.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tiny_http/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tiny_http/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tiny_http/latest/src/tiny_http/lib.rs.html#1-445: Source\n\u27e84\u27e9 https://docs.rs/tiny_http/latest/tiny_http/#simple-usage: \u00a7\n\u27e85\u27e9 https://docs.rs/tiny_http/latest/tiny_http/#creating-the-server: \u00a7\n\u27e86\u27e9 https://docs.rs/tiny_http/latest/tiny_http/#receiving-requests: \u00a7\n\u27e87\u27e9 https://docs.rs/tiny_http/latest/tiny_http/#handling-requests: \u00a7\n\u27e88\u27e9 https://docs.rs/tiny_http/latest/tiny_http/#structs: \u00a7\n\u27e89\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.HTTPVersion.html: struct tiny_http::HTTPVersion - HTTPVersion\n\u27e810\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.Header.html: struct tiny_http::Header - Header\n\u27e811\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.HeaderField.html: struct tiny_http::HeaderField - HeaderField\n\u27e812\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.IncomingRequests.html: struct tiny_http::IncomingRequests - IncomingRequests\n\u27e813\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.Request.html: struct tiny_http::Request - Request\n\u27e814\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.Response.html: struct tiny_http::Response - Response\n\u27e815\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.Server.html: struct tiny_http::Server - Server\n\u27e816\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.ServerConfig.html: struct tiny_http::ServerConfig - ServerConfig\n\u27e817\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.SslConfig.html: struct tiny_http::SslConfig - SslConfig\n\u27e818\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.StatusCode.html: struct tiny_http::StatusCode - StatusCode\n\u27e819\u27e9 https://docs.rs/tiny_http/latest/tiny_http/struct.TestRequest.html: struct tiny_http::TestRequest - TestRequest\n\u27e820\u27e9 https://docs.rs/tiny_http/latest/tiny_http/#enums: \u00a7\n\u27e821\u27e9 https://docs.rs/tiny_http/latest/tiny_http/enum.ConfigListenAddr.html: enum tiny_http::ConfigListenAddr - ConfigListenAddr\n\u27e822\u27e9 https://docs.rs/tiny_http/latest/tiny_http/enum.ListenAddr.html: enum tiny_http::ListenAddr - ListenAddr\n\u27e823\u27e9 https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html: enum core::net::socket_addr::SocketAddr - `SocketAddr`\n\u27e824\u27e9 https://doc.rust-lang.org/nightly/std/os/unix/net/addr/struct.SocketAddr.html: struct std::os::unix::net::addr::SocketAddr - `std::os::unix::net::SocketAddr`\n\u27e825\u27e9 https://docs.rs/tiny_http/latest/tiny_http/enum.Listener.html: enum tiny_http::Listener - Listener\n\u27e826\u27e9 https://doc.rust-lang.org/nightly/std/net/tcp/struct.TcpListener.html: struct std::net::tcp::TcpListener - `TcpListener`\n\u27e827\u27e9 https://doc.rust-lang.org/nightly/std/os/unix/net/listener/struct.UnixListener.html: struct std::os::unix::net::listener::UnixListener - `std::os::unix::net::UnixListener`\n\u27e828\u27e9 https://docs.rs/tiny_http/latest/tiny_http/enum.Method.html: enum tiny_http::Method - Method\n\u27e829\u27e9 https://docs.rs/tiny_http/latest/tiny_http/#traits: \u00a7\n\u27e830\u27e9 https://docs.rs/tiny_http/latest/tiny_http/trait.ReadWrite.html: trait tiny_http::ReadWrite - ReadWrite\n\u27e831\u27e9 https://docs.rs/tiny_http/latest/tiny_http/#types: \u00a7\n\u27e832\u27e9 https://docs.rs/tiny_http/latest/tiny_http/type.ResponseBox.html: type tiny_http::ResponseBox - ResponseBox\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `tiny_http` crate is a lightweight HTTP server library for Rust, designed for simplicity and ease of use. It allows you to create servers (`Server::http()`), receive and handle HTTP requests (`server.recv()`), and respond to them using `Response` objects. Key features include blocking and non-blocking request handling, support for HTTP headers, methods, and status codes, as well as SSL configuration and testing utilities.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 6.5,
    "factual_counterfactual": "### Pair 1: Server Creation\n\u2705 **Factual**: The `tiny_http` crate allows you to create a server using `Server::http()` which returns an `IoResult<Server>`. If the port is occupied, the server creation will fail with an error.  \n\u274c **Counterfactual**: The `tiny_http` crate requires you to manually bind to a port using low-level socket APIs before creating a server with `Server::http()`.\n\n---\n\n### Pair 2: Request Handling\n\u2705 **Factual**: The `Request` object in `tiny_http` provides methods like `request.method()` and `request.url()` to access the HTTP method (e.g., `GET`, `POST`) and the URL of the incoming request.  \n\u274c **Counterfactual**: The `Request` object in `tiny_http` automatically parses and executes the HTTP method without requiring the user to call `request.method()`.\n\n---\n\n### Pair 3: Multithreading\n\u2705 **Factual**: The `tiny_http` crate supports multithreaded request handling by allowing you to spawn multiple worker threads that call `server.recv()` to process incoming requests concurrently.  \n\u274c **Counterfactual**: The `tiny_http` crate does not support multithreaded request handling and requires all requests to be processed sequentially on a single thread.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}