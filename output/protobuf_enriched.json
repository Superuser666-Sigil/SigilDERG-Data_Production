{
    "name": "protobuf",
    "version": "4.31.1-release",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/protobuf/latest/protobuf/all.html \"show sidebar\")\n# Crate protobufCopy item path\n[Settings](https://docs.rs/protobuf/latest/settings.html)\n[Help](https://docs.rs/protobuf/latest/help.html)\nSummary[Source](https://docs.rs/protobuf/latest/src/protobuf/lib.rs.html#1-108)\nExpand description\n## [\u00a7](https://docs.rs/protobuf/latest/protobuf/#library-to-read-and-write-protocol-buffers-data)Library to read and write protocol buffers data\n### [\u00a7](https://docs.rs/protobuf/latest/protobuf/#features)Features\nThis crate has one feature, which is `with-bytes`.\n`with-bytes` enables `protobuf` crate support for [`bytes` crate](https://github.com/tokio-rs/bytes): when parsing bytes or strings from `bytes::Bytes`, `protobuf` will be able to reference the input instead of allocating subarrays.\nNote, codegen also need to be instructed to generate `Bytes` or `Chars` for `bytes` or `string` protobuf types instead of default `Vec<u8>` or `String`, just enabling option on this crate is not enough.\nSee `Customize` struct in [`protobuf-codegen` crate](https://docs.rs/protobuf-codegen).\n### [\u00a7](https://docs.rs/protobuf/latest/protobuf/#accompanying-crates)Accompanying crates\n  * [`protobuf-json-mapping`](https://docs.rs/protobuf-json-mapping) implements JSON parsing and serialization for protobuf messages.\n  * [`protobuf-codegen`](https://docs.rs/protobuf-codegen) can be used to generate rust code from `.proto` crates.\n  * [`protoc-bin-vendored`](https://docs.rs/protoc-bin-vendored) contains `protoc` command packed into the crate.\n  * [`protobuf-parse`](https://docs.rs/protobuf-parse) contains `.proto` file parser. Rarely need to be used directly, but can be used for mechanical processing of `.proto` files.\n\n\n## Modules[\u00a7](https://docs.rs/protobuf/latest/protobuf/#modules)\n\n[descriptor](https://docs.rs/protobuf/latest/protobuf/descriptor/index.html \"mod protobuf::descriptor\")\n    Generated file from `google/protobuf/descriptor.proto`\n\n[ext](https://docs.rs/protobuf/latest/protobuf/ext/index.html \"mod protobuf::ext\")\n    Utilities to support \u201cextension\u201d fields.\n\n[plugin](https://docs.rs/protobuf/latest/protobuf/plugin/index.html \"mod protobuf::plugin\")\n    Generated file from `google/protobuf/compiler/plugin.proto`\n\n[reflect](https://docs.rs/protobuf/latest/protobuf/reflect/index.html \"mod protobuf::reflect\")\n    Reflection implementation for protobuf data\n\n[rt](https://docs.rs/protobuf/latest/protobuf/rt/index.html \"mod protobuf::rt\")\n    Functions and types used by generated protobuf code\n\n[rustproto](https://docs.rs/protobuf/latest/protobuf/rustproto/index.html \"mod protobuf::rustproto\")\n    Generated file from `rustproto.proto`\n\n[text_format](https://docs.rs/protobuf/latest/protobuf/text_format/index.html \"mod protobuf::text_format\")\n    Protobuf \u201ctext format\u201d implementation.\n\n[well_known_types](https://docs.rs/protobuf/latest/protobuf/well_known_types/index.html \"mod protobuf::well_known_types\")\n    Generated code for \u201cwell known types\u201d\n## Structs[\u00a7](https://docs.rs/protobuf/latest/protobuf/#structs)\n\n[Chars](https://docs.rs/protobuf/latest/protobuf/struct.Chars.html \"struct protobuf::Chars\")\n    Thin wrapper around `Bytes` which guarantees that bytes are valid UTF-8 string. Should be API-compatible to `String`.\n\n[CodedInputStream](https://docs.rs/protobuf/latest/protobuf/struct.CodedInputStream.html \"struct protobuf::CodedInputStream\")\n    Buffered read with handy utilities.\n\n[CodedOutputStream](https://docs.rs/protobuf/latest/protobuf/struct.CodedOutputStream.html \"struct protobuf::CodedOutputStream\")\n    Buffered write with handy utilities\n\n[EnumOrUnknown](https://docs.rs/protobuf/latest/protobuf/struct.EnumOrUnknown.html \"struct protobuf::EnumOrUnknown\")\n    Protobuf enums with possibly unknown values are preserved in this struct.\n\n[Error](https://docs.rs/protobuf/latest/protobuf/struct.Error.html \"struct protobuf::Error\")\n    Error type for protobuf operations.\n\n[MessageField](https://docs.rs/protobuf/latest/protobuf/struct.MessageField.html \"struct protobuf::MessageField\")\n    Wrapper around `Option<Box<T>>`, convenient newtype.\n\n[SpecialFields](https://docs.rs/protobuf/latest/protobuf/struct.SpecialFields.html \"struct protobuf::SpecialFields\")\n    Special fields included in each generated message.\n\n[UnknownFields](https://docs.rs/protobuf/latest/protobuf/struct.UnknownFields.html \"struct protobuf::UnknownFields\")\n    Hold \u201cunknown\u201d fields in parsed message.\n\n[UnknownFieldsIter](https://docs.rs/protobuf/latest/protobuf/struct.UnknownFieldsIter.html \"struct protobuf::UnknownFieldsIter\")\n    Iterator over [`UnknownFields`](https://docs.rs/protobuf/latest/protobuf/struct.UnknownFields.html \"struct protobuf::UnknownFields\")\n## Enums[\u00a7](https://docs.rs/protobuf/latest/protobuf/#enums)\n\n[UnknownValue](https://docs.rs/protobuf/latest/protobuf/enum.UnknownValue.html \"enum protobuf::UnknownValue\")\n    Unknown value.\n\n[UnknownValueRef](https://docs.rs/protobuf/latest/protobuf/enum.UnknownValueRef.html \"enum protobuf::UnknownValueRef\")\n    Reference to unknown value.\n## Constants[\u00a7](https://docs.rs/protobuf/latest/protobuf/#constants)\n\n[VERSION](https://docs.rs/protobuf/latest/protobuf/constant.VERSION.html \"constant protobuf::VERSION\")\n    protobuf crate version\n\n[VERSION_3_7_2](https://docs.rs/protobuf/latest/protobuf/constant.VERSION_3_7_2.html \"constant protobuf::VERSION_3_7_2\")\n    This symbol can be referenced to assert that proper version of crate is used\n## Traits[\u00a7](https://docs.rs/protobuf/latest/protobuf/#traits)\n\n[Enum](https://docs.rs/protobuf/latest/protobuf/trait.Enum.html \"trait protobuf::Enum\")\n    Trait implemented by all protobuf enum types.\n\n[EnumFull](https://docs.rs/protobuf/latest/protobuf/trait.EnumFull.html \"trait protobuf::EnumFull\")\n    Trait is implemented for all enum types if lite runtime is not requested.\n\n[Message](https://docs.rs/protobuf/latest/protobuf/trait.Message.html \"trait protobuf::Message\")\n    Trait which is implemented by all generated message.\n\n[MessageDyn](https://docs.rs/protobuf/latest/protobuf/trait.MessageDyn.html \"trait protobuf::MessageDyn\")\n    Dynamic-dispatch version of either generated message or dynamic message.\n\n[MessageFull](https://docs.rs/protobuf/latest/protobuf/trait.MessageFull.html \"trait protobuf::MessageFull\")\n    Trait implemented for all the generated messages, except when lite runtime is enabled.\n\n[Oneof](https://docs.rs/protobuf/latest/protobuf/trait.Oneof.html \"trait protobuf::Oneof\")\n    Trait implemented by all oneof types in generated code.\n\n[OneofFull](https://docs.rs/protobuf/latest/protobuf/trait.OneofFull.html \"trait protobuf::OneofFull\")\n    Implemented by all oneof types when lite runtime is not enabled.\n## Type Aliases[\u00a7](https://docs.rs/protobuf/latest/protobuf/#types)\n\n[Result](https://docs.rs/protobuf/latest/protobuf/type.Result.html \"type protobuf::Result\")\n    [`Result`](https://docs.rs/protobuf/latest/protobuf/type.Result.html \"type protobuf::Result\") alias for [`Error`](https://docs.rs/protobuf/latest/protobuf/struct.Error.html \"struct protobuf::Error\").\n",
        "markdown_with_citations": "[](https://docs.rs/protobuf/latest/protobuf/all.html \"show sidebar\")\n# Crate protobufCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Library to read and write protocol buffers data\n### \u00a7\u27e85\u27e9Features\nThis crate has one feature, which is `with-bytes`.\n`with-bytes` enables `protobuf` crate support for `bytes` crate\u27e86\u27e9: when parsing bytes or strings from `bytes::Bytes`, `protobuf` will be able to reference the input instead of allocating subarrays.\nNote, codegen also need to be instructed to generate `Bytes` or `Chars` for `bytes` or `string` protobuf types instead of default `Vec<u8>` or `String`, just enabling option on this crate is not enough.\nSee `Customize` struct in `protobuf-codegen` crate\u27e87\u27e9.\n### \u00a7\u27e88\u27e9Accompanying crates\n  * `protobuf-json-mapping`\u27e89\u27e9 implements JSON parsing and serialization for protobuf messages.\n  * `protobuf-codegen`\u27e87\u27e9 can be used to generate rust code from `.proto` crates.\n  * `protoc-bin-vendored`\u27e810\u27e9 contains `protoc` command packed into the crate.\n  * `protobuf-parse`\u27e811\u27e9 contains `.proto` file parser. Rarely need to be used directly, but can be used for mechanical processing of `.proto` files.\n\n\n## Modules\u00a7\u27e812\u27e9\n\ndescriptor\u27e813\u27e9\n    Generated file from `google/protobuf/descriptor.proto`\n\next\u27e814\u27e9\n    Utilities to support \u201cextension\u201d fields.\n\nplugin\u27e815\u27e9\n    Generated file from `google/protobuf/compiler/plugin.proto`\n\nreflect\u27e816\u27e9\n    Reflection implementation for protobuf data\n\nrt\u27e817\u27e9\n    Functions and types used by generated protobuf code\n\nrustproto\u27e818\u27e9\n    Generated file from `rustproto.proto`\n\ntext_format\u27e819\u27e9\n    Protobuf \u201ctext format\u201d implementation.\n\nwell_known_types\u27e820\u27e9\n    Generated code for \u201cwell known types\u201d\n## Structs\u00a7\u27e821\u27e9\n\nChars\u27e822\u27e9\n    Thin wrapper around `Bytes` which guarantees that bytes are valid UTF-8 string. Should be API-compatible to `String`.\n\nCodedInputStream\u27e823\u27e9\n    Buffered read with handy utilities.\n\nCodedOutputStream\u27e824\u27e9\n    Buffered write with handy utilities\n\nEnumOrUnknown\u27e825\u27e9\n    Protobuf enums with possibly unknown values are preserved in this struct.\n\nError\u27e826\u27e9\n    Error type for protobuf operations.\n\nMessageField\u27e827\u27e9\n    Wrapper around `Option<Box<T>>`, convenient newtype.\n\nSpecialFields\u27e828\u27e9\n    Special fields included in each generated message.\n\nUnknownFields\u27e829\u27e9\n    Hold \u201cunknown\u201d fields in parsed message.\n\nUnknownFieldsIter\u27e830\u27e9\n    Iterator over `UnknownFields`\u27e829\u27e9\n## Enums\u00a7\u27e831\u27e9\n\nUnknownValue\u27e832\u27e9\n    Unknown value.\n\nUnknownValueRef\u27e833\u27e9\n    Reference to unknown value.\n## Constants\u00a7\u27e834\u27e9\n\nVERSION\u27e835\u27e9\n    protobuf crate version\n\nVERSION_3_7_2\u27e836\u27e9\n    This symbol can be referenced to assert that proper version of crate is used\n## Traits\u00a7\u27e837\u27e9\n\nEnum\u27e838\u27e9\n    Trait implemented by all protobuf enum types.\n\nEnumFull\u27e839\u27e9\n    Trait is implemented for all enum types if lite runtime is not requested.\n\nMessage\u27e840\u27e9\n    Trait which is implemented by all generated message.\n\nMessageDyn\u27e841\u27e9\n    Dynamic-dispatch version of either generated message or dynamic message.\n\nMessageFull\u27e842\u27e9\n    Trait implemented for all the generated messages, except when lite runtime is enabled.\n\nOneof\u27e843\u27e9\n    Trait implemented by all oneof types in generated code.\n\nOneofFull\u27e844\u27e9\n    Implemented by all oneof types when lite runtime is not enabled.\n## Type Aliases\u00a7\u27e845\u27e9\n\nResult\u27e846\u27e9\n    `Result`\u27e846\u27e9 alias for `Error`\u27e826\u27e9.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/protobuf/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/protobuf/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/protobuf/latest/src/protobuf/lib.rs.html#1-108: Source\n\u27e84\u27e9 https://docs.rs/protobuf/latest/protobuf/#library-to-read-and-write-protocol-buffers-data: \u00a7\n\u27e85\u27e9 https://docs.rs/protobuf/latest/protobuf/#features: \u00a7\n\u27e86\u27e9 https://github.com/tokio-rs/bytes: `bytes` crate\n\u27e87\u27e9 https://docs.rs/protobuf-codegen: `protobuf-codegen` crate\n\u27e88\u27e9 https://docs.rs/protobuf/latest/protobuf/#accompanying-crates: \u00a7\n\u27e89\u27e9 https://docs.rs/protobuf-json-mapping: `protobuf-json-mapping`\n\u27e810\u27e9 https://docs.rs/protoc-bin-vendored: `protoc-bin-vendored`\n\u27e811\u27e9 https://docs.rs/protobuf-parse: `protobuf-parse`\n\u27e812\u27e9 https://docs.rs/protobuf/latest/protobuf/#modules: \u00a7\n\u27e813\u27e9 https://docs.rs/protobuf/latest/protobuf/descriptor/index.html: mod protobuf::descriptor - descriptor\n\u27e814\u27e9 https://docs.rs/protobuf/latest/protobuf/ext/index.html: mod protobuf::ext - ext\n\u27e815\u27e9 https://docs.rs/protobuf/latest/protobuf/plugin/index.html: mod protobuf::plugin - plugin\n\u27e816\u27e9 https://docs.rs/protobuf/latest/protobuf/reflect/index.html: mod protobuf::reflect - reflect\n\u27e817\u27e9 https://docs.rs/protobuf/latest/protobuf/rt/index.html: mod protobuf::rt - rt\n\u27e818\u27e9 https://docs.rs/protobuf/latest/protobuf/rustproto/index.html: mod protobuf::rustproto - rustproto\n\u27e819\u27e9 https://docs.rs/protobuf/latest/protobuf/text_format/index.html: mod protobuf::text_format - text_format\n\u27e820\u27e9 https://docs.rs/protobuf/latest/protobuf/well_known_types/index.html: mod protobuf::well_known_types - well_known_types\n\u27e821\u27e9 https://docs.rs/protobuf/latest/protobuf/#structs: \u00a7\n\u27e822\u27e9 https://docs.rs/protobuf/latest/protobuf/struct.Chars.html: struct protobuf::Chars - Chars\n\u27e823\u27e9 https://docs.rs/protobuf/latest/protobuf/struct.CodedInputStream.html: struct protobuf::CodedInputStream - CodedInputStream\n\u27e824\u27e9 https://docs.rs/protobuf/latest/protobuf/struct.CodedOutputStream.html: struct protobuf::CodedOutputStream - CodedOutputStream\n\u27e825\u27e9 https://docs.rs/protobuf/latest/protobuf/struct.EnumOrUnknown.html: struct protobuf::EnumOrUnknown - EnumOrUnknown\n\u27e826\u27e9 https://docs.rs/protobuf/latest/protobuf/struct.Error.html: struct protobuf::Error - Error\n\u27e827\u27e9 https://docs.rs/protobuf/latest/protobuf/struct.MessageField.html: struct protobuf::MessageField - MessageField\n\u27e828\u27e9 https://docs.rs/protobuf/latest/protobuf/struct.SpecialFields.html: struct protobuf::SpecialFields - SpecialFields\n\u27e829\u27e9 https://docs.rs/protobuf/latest/protobuf/struct.UnknownFields.html: struct protobuf::UnknownFields - UnknownFields\n\u27e830\u27e9 https://docs.rs/protobuf/latest/protobuf/struct.UnknownFieldsIter.html: struct protobuf::UnknownFieldsIter - UnknownFieldsIter\n\u27e831\u27e9 https://docs.rs/protobuf/latest/protobuf/#enums: \u00a7\n\u27e832\u27e9 https://docs.rs/protobuf/latest/protobuf/enum.UnknownValue.html: enum protobuf::UnknownValue - UnknownValue\n\u27e833\u27e9 https://docs.rs/protobuf/latest/protobuf/enum.UnknownValueRef.html: enum protobuf::UnknownValueRef - UnknownValueRef\n\u27e834\u27e9 https://docs.rs/protobuf/latest/protobuf/#constants: \u00a7\n\u27e835\u27e9 https://docs.rs/protobuf/latest/protobuf/constant.VERSION.html: constant protobuf::VERSION - VERSION\n\u27e836\u27e9 https://docs.rs/protobuf/latest/protobuf/constant.VERSION_3_7_2.html: constant protobuf::VERSION_3_7_2 - VERSION_3_7_2\n\u27e837\u27e9 https://docs.rs/protobuf/latest/protobuf/#traits: \u00a7\n\u27e838\u27e9 https://docs.rs/protobuf/latest/protobuf/trait.Enum.html: trait protobuf::Enum - Enum\n\u27e839\u27e9 https://docs.rs/protobuf/latest/protobuf/trait.EnumFull.html: trait protobuf::EnumFull - EnumFull\n\u27e840\u27e9 https://docs.rs/protobuf/latest/protobuf/trait.Message.html: trait protobuf::Message - Message\n\u27e841\u27e9 https://docs.rs/protobuf/latest/protobuf/trait.MessageDyn.html: trait protobuf::MessageDyn - MessageDyn\n\u27e842\u27e9 https://docs.rs/protobuf/latest/protobuf/trait.MessageFull.html: trait protobuf::MessageFull - MessageFull\n\u27e843\u27e9 https://docs.rs/protobuf/latest/protobuf/trait.Oneof.html: trait protobuf::Oneof - Oneof\n\u27e844\u27e9 https://docs.rs/protobuf/latest/protobuf/trait.OneofFull.html: trait protobuf::OneofFull - OneofFull\n\u27e845\u27e9 https://docs.rs/protobuf/latest/protobuf/#types: \u00a7\n\u27e846\u27e9 https://docs.rs/protobuf/latest/protobuf/type.Result.html: type protobuf::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `protobuf` crate provides functionality to read and write Protocol Buffers data in Rust, supporting serialization, deserialization, and reflection of protobuf messages. It includes a `with-bytes` feature for efficient handling of `bytes::Bytes` without extra allocations and integrates with accompanying crates like `protobuf-codegen` for code generation and `protobuf-json-mapping` for JSON serialization. Additionally, it offers modules for descriptor parsing, reflection, and well-known types, along with traits and utilities for working with protobuf enums, messages, and fields.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Feature Support  \n\u2705 **Factual**: The `protobuf` crate supports the `with-bytes` feature, which allows it to reference input from `bytes::Bytes` without allocating subarrays, improving performance when handling large binary data.  \n\u274c **Counterfactual**: The `protobuf` crate automatically enables the `with-bytes` feature and generates `Bytes` or `Chars` types for protobuf fields without requiring additional configuration in the `protobuf-codegen` crate.  \n\n---\n\n### Pair 2: Accompanying Crates  \n\u2705 **Factual**: The `protobuf-codegen` crate can be used to generate Rust code from `.proto` files, enabling seamless integration of protocol buffers into Rust projects.  \n\u274c **Counterfactual**: The `protobuf-codegen` crate is required to parse `.proto` files at runtime, as the `protobuf` crate itself cannot handle `.proto` file parsing.  \n\n---\n\n### Pair 3: Error Handling  \n\u2705 **Factual**: The `protobuf` crate provides a dedicated `Error` type for handling errors that occur during protobuf operations, such as parsing and serialization.  \n\u274c **Counterfactual**: The `protobuf` crate uses the standard Rust `std::io::Error` type for all error handling, without defining its own specialized error type.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}