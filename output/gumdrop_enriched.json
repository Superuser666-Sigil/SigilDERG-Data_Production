{
    "name": "gumdrop",
    "version": "0.8.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/gumdrop/latest/gumdrop/all.html \"show sidebar\")\n# Crate gumdropCopy item path\n[Settings](https://docs.rs/gumdrop/latest/settings.html)\n[Help](https://docs.rs/gumdrop/latest/help.html)\nSummary[Source](https://docs.rs/gumdrop/latest/src/gumdrop/lib.rs.html#1-774)\nExpand description\nOption parser with custom derive support\nFor full documentation on customization of `derive(Options)`, please see the crate documentation for [`gumdrop_derive`](https://docs.rs/crate/gumdrop_derive/).\n## [\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#examples)Examples\n```\nuse gumdrop::Options;\n// Defines options that can be parsed from the command line.\n//\n// `derive(Options)` will generate an implementation of the trait `Options`.\n// Each field must either have a `Default` implementation or an inline\n// default value provided.\n//\n// (`Debug` is derived here only for demonstration purposes.)\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Contains \"free\" arguments -- those that are not options.\n  // If no `free` field is declared, free arguments will result in an error.\n  #[options(free)]\n  free: Vec<String>,\n  // Boolean options are treated as flags, taking no additional values.\n  // The optional `help` attribute is displayed in `usage` text.\n  //\n  // A boolean field named `help` is automatically given the `help_flag` attribute.\n  // The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags\n  // to automatically display usage to the user.\n  #[options(help = \"print help message\")]\n  help: bool,\n  // Non-boolean fields will take a value from the command line.\n  // Wrapping the type in an `Option` is not necessary, but provides clarity.\n  #[options(help = \"give a string argument\")]\n  string: Option<String>,\n  // A field can be any type that implements `FromStr`.\n  // The optional `meta` attribute is displayed in `usage` text.\n  #[options(help = \"give a number as an argument\", meta = \"N\")]\n  number: Option<i32>,\n  // A `Vec` field will accumulate all values received from the command line.\n  #[options(help = \"give a list of string items\")]\n  item: Vec<String>,\n  // The `count` flag will treat the option as a counter.\n  // Each time the option is encountered, the field is incremented.\n  #[options(count, help = \"increase a counting value\")]\n  count: u32,\n  // Option names are automatically generated from field names, but these\n  // can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,\n  // `no_short`, and `no_long` are used to control option names.\n  #[options(no_short, help = \"this option has no short form\")]\n  long_option_only: bool,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n`derive(Options)` can also be used on `enum`s to produce a subcommand option parser.\n```\nuse gumdrop::Options;\n// Define options for the program.\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Options here can be accepted with any command (or none at all),\n  // but they must come before the command name.\n  #[options(help = \"print help message\")]\n  help: bool,\n  #[options(help = \"be verbose\")]\n  verbose: bool,\n  // The `command` option will delegate option parsing to the command type,\n  // starting at the first free argument.\n  #[options(command)]\n  command: Option<Command>,\n}\n// The set of commands and the options each one accepts.\n//\n// Each variant of a command enum should be a unary tuple variant with only\n// one field. This field must implement `Options` and is used to parse arguments\n// that are given after the command name.\n#[derive(Debug, Options)]\nenum Command {\n  // Command names are generated from variant names.\n  // By default, a CamelCase name will be converted into a lowercase,\n  // hyphen-separated name; e.g. `FooBar` becomes `foo-bar`.\n  //\n  // Names can be explicitly specified using `#[options(name = \"...\")]`\n  #[options(help = \"show help for a command\")]\n  Help(HelpOpts),\n  #[options(help = \"make stuff\")]\n  Make(MakeOpts),\n  #[options(help = \"install stuff\")]\n  Install(InstallOpts),\n}\n// Options accepted for the `help` command\n#[derive(Debug, Options)]\nstruct HelpOpts {\n  #[options(free)]\n  free: Vec<String>,\n}\n// Options accepted for the `make` command\n#[derive(Debug, Options)]\nstruct MakeOpts {\n  #[options(free)]\n  free: Vec<String>,\n  #[options(help = \"number of jobs\", meta = \"N\")]\n  jobs: Option<u32>,\n}\n// Options accepted for the `install` command\n#[derive(Debug, Options)]\nstruct InstallOpts {\n  #[options(help = \"target directory\")]\n  dir: Option<String>,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\nA custom parsing function can be supplied for each option field.\n```\nuse gumdrop::Options;\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // `try_from_str = \"...\"` supplies a conversion function that may fail\n  #[options(help = \"a hexadecimal value\", parse(try_from_str = \"parse_hex\"))]\n  hex: u32,\n  // `from_str = \"...\"` supplies a conversion function that always succeeds\n  #[options(help = \"a string that becomes uppercase\", parse(from_str = \"to_upper\"))]\n  upper: String,\n}\nfn parse_hex(s: &str) -> Result<u32, std::num::ParseIntError> {\n  u32::from_str_radix(s, 16)\n}\nfn to_upper(s: &str) -> String {\n  s.to_uppercase()\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n## Structs[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#structs)\n\n[Error](https://docs.rs/gumdrop/latest/gumdrop/struct.Error.html \"struct gumdrop::Error\")\n    Represents an error encountered during argument parsing\n\n[Parser](https://docs.rs/gumdrop/latest/gumdrop/struct.Parser.html \"struct gumdrop::Parser\")\n    Parses options from a series of `&str`-like values.\n## Enums[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#enums)\n\n[Opt](https://docs.rs/gumdrop/latest/gumdrop/enum.Opt.html \"enum gumdrop::Opt\")\n    Represents an option parsed from a `Parser`\n\n[ParsingStyle](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html \"enum gumdrop::ParsingStyle\")\n    Controls behavior of free arguments in `Parser`\n## Traits[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#traits)\n\n[Options](https://docs.rs/gumdrop/latest/gumdrop/trait.Options.html \"trait gumdrop::Options\")\n    Implements a set of options parsed from command line arguments.\n## Functions[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#functions)\n\n[parse_args](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args.html \"fn gumdrop::parse_args\")\n    Parses arguments from the command line.\n\n[parse_args_default](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default.html \"fn gumdrop::parse_args_default\")\n    Parses arguments from the command line using the default [parsing style](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html).\n\n[parse_args_default_or_exit](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default_or_exit.html \"fn gumdrop::parse_args_default_or_exit\")\n    Parses arguments from the environment, using the default [parsing style](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html).\n\n[parse_args_or_exit](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_or_exit.html \"fn gumdrop::parse_args_or_exit\")\n    Parses arguments from the environment.\n## Derive Macros[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#derives)\n\n[Options](https://docs.rs/gumdrop/latest/gumdrop/derive.Options.html \"derive gumdrop::Options\")\n    Derives the `gumdrop::Options` trait for `struct` and `enum` items.\n",
        "markdown_with_citations": "[](https://docs.rs/gumdrop/latest/gumdrop/all.html \"show sidebar\")\n# Crate gumdropCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nOption parser with custom derive support\nFor full documentation on customization of `derive(Options)`, please see the crate documentation for `gumdrop_derive`\u27e84\u27e9.\n## \u00a7\u27e85\u27e9Examples\n```\nuse gumdrop::Options;\n// Defines options that can be parsed from the command line.\n//\n// `derive(Options)` will generate an implementation of the trait `Options`.\n// Each field must either have a `Default` implementation or an inline\n// default value provided.\n//\n// (`Debug` is derived here only for demonstration purposes.)\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Contains \"free\" arguments -- those that are not options.\n  // If no `free` field is declared, free arguments will result in an error.\n  #[options(free)]\n  free: Vec<String>,\n  // Boolean options are treated as flags, taking no additional values.\n  // The optional `help` attribute is displayed in `usage` text.\n  //\n  // A boolean field named `help` is automatically given the `help_flag` attribute.\n  // The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags\n  // to automatically display usage to the user.\n  #[options(help = \"print help message\")]\n  help: bool,\n  // Non-boolean fields will take a value from the command line.\n  // Wrapping the type in an `Option` is not necessary, but provides clarity.\n  #[options(help = \"give a string argument\")]\n  string: Option<String>,\n  // A field can be any type that implements `FromStr`.\n  // The optional `meta` attribute is displayed in `usage` text.\n  #[options(help = \"give a number as an argument\", meta = \"N\")]\n  number: Option<i32>,\n  // A `Vec` field will accumulate all values received from the command line.\n  #[options(help = \"give a list of string items\")]\n  item: Vec<String>,\n  // The `count` flag will treat the option as a counter.\n  // Each time the option is encountered, the field is incremented.\n  #[options(count, help = \"increase a counting value\")]\n  count: u32,\n  // Option names are automatically generated from field names, but these\n  // can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,\n  // `no_short`, and `no_long` are used to control option names.\n  #[options(no_short, help = \"this option has no short form\")]\n  long_option_only: bool,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n`derive(Options)` can also be used on `enum`s to produce a subcommand option parser.\n```\nuse gumdrop::Options;\n// Define options for the program.\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Options here can be accepted with any command (or none at all),\n  // but they must come before the command name.\n  #[options(help = \"print help message\")]\n  help: bool,\n  #[options(help = \"be verbose\")]\n  verbose: bool,\n  // The `command` option will delegate option parsing to the command type,\n  // starting at the first free argument.\n  #[options(command)]\n  command: Option<Command>,\n}\n// The set of commands and the options each one accepts.\n//\n// Each variant of a command enum should be a unary tuple variant with only\n// one field. This field must implement `Options` and is used to parse arguments\n// that are given after the command name.\n#[derive(Debug, Options)]\nenum Command {\n  // Command names are generated from variant names.\n  // By default, a CamelCase name will be converted into a lowercase,\n  // hyphen-separated name; e.g. `FooBar` becomes `foo-bar`.\n  //\n  // Names can be explicitly specified using `#[options(name = \"...\")]`\n  #[options(help = \"show help for a command\")]\n  Help(HelpOpts),\n  #[options(help = \"make stuff\")]\n  Make(MakeOpts),\n  #[options(help = \"install stuff\")]\n  Install(InstallOpts),\n}\n// Options accepted for the `help` command\n#[derive(Debug, Options)]\nstruct HelpOpts {\n  #[options(free)]\n  free: Vec<String>,\n}\n// Options accepted for the `make` command\n#[derive(Debug, Options)]\nstruct MakeOpts {\n  #[options(free)]\n  free: Vec<String>,\n  #[options(help = \"number of jobs\", meta = \"N\")]\n  jobs: Option<u32>,\n}\n// Options accepted for the `install` command\n#[derive(Debug, Options)]\nstruct InstallOpts {\n  #[options(help = \"target directory\")]\n  dir: Option<String>,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\nA custom parsing function can be supplied for each option field.\n```\nuse gumdrop::Options;\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // `try_from_str = \"...\"` supplies a conversion function that may fail\n  #[options(help = \"a hexadecimal value\", parse(try_from_str = \"parse_hex\"))]\n  hex: u32,\n  // `from_str = \"...\"` supplies a conversion function that always succeeds\n  #[options(help = \"a string that becomes uppercase\", parse(from_str = \"to_upper\"))]\n  upper: String,\n}\nfn parse_hex(s: &str) -> Result<u32, std::num::ParseIntError> {\n  u32::from_str_radix(s, 16)\n}\nfn to_upper(s: &str) -> String {\n  s.to_uppercase()\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n## Structs\u00a7\u27e86\u27e9\n\nError\u27e87\u27e9\n    Represents an error encountered during argument parsing\n\nParser\u27e88\u27e9\n    Parses options from a series of `&str`-like values.\n## Enums\u00a7\u27e89\u27e9\n\nOpt\u27e810\u27e9\n    Represents an option parsed from a `Parser`\n\nParsingStyle\u27e811\u27e9\n    Controls behavior of free arguments in `Parser`\n## Traits\u00a7\u27e812\u27e9\n\nOptions\u27e813\u27e9\n    Implements a set of options parsed from command line arguments.\n## Functions\u00a7\u27e814\u27e9\n\nparse_args\u27e815\u27e9\n    Parses arguments from the command line.\n\nparse_args_default\u27e816\u27e9\n    Parses arguments from the command line using the default parsing style\u27e811\u27e9.\n\nparse_args_default_or_exit\u27e817\u27e9\n    Parses arguments from the environment, using the default parsing style\u27e811\u27e9.\n\nparse_args_or_exit\u27e818\u27e9\n    Parses arguments from the environment.\n## Derive Macros\u00a7\u27e819\u27e9\n\nOptions\u27e820\u27e9\n    Derives the `gumdrop::Options` trait for `struct` and `enum` items.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/gumdrop/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/gumdrop/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/gumdrop/latest/src/gumdrop/lib.rs.html#1-774: Source\n\u27e84\u27e9 https://docs.rs/crate/gumdrop_derive/: `gumdrop_derive`\n\u27e85\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/gumdrop/latest/gumdrop/struct.Error.html: struct gumdrop::Error - Error\n\u27e88\u27e9 https://docs.rs/gumdrop/latest/gumdrop/struct.Parser.html: struct gumdrop::Parser - Parser\n\u27e89\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#enums: \u00a7\n\u27e810\u27e9 https://docs.rs/gumdrop/latest/gumdrop/enum.Opt.html: enum gumdrop::Opt - Opt\n\u27e811\u27e9 https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html: enum gumdrop::ParsingStyle - ParsingStyle\n\u27e812\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#traits: \u00a7\n\u27e813\u27e9 https://docs.rs/gumdrop/latest/gumdrop/trait.Options.html: trait gumdrop::Options - Options\n\u27e814\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#functions: \u00a7\n\u27e815\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args.html: fn gumdrop::parse_args - parse_args\n\u27e816\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default.html: fn gumdrop::parse_args_default - parse_args_default\n\u27e817\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default_or_exit.html: fn gumdrop::parse_args_default_or_exit - parse_args_default_or_exit\n\u27e818\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_or_exit.html: fn gumdrop::parse_args_or_exit - parse_args_or_exit\n\u27e819\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#derives: \u00a7\n\u27e820\u27e9 https://docs.rs/gumdrop/latest/gumdrop/derive.Options.html: derive gumdrop::Options - Options\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `gumdrop` crate is a command-line argument parser with custom derive support, allowing developers to define options using the `derive(Options)` macro. It supports parsing structured arguments for both structs and enums, including free arguments, flags, counters, and custom parsing logic. Key features include subcommand handling, automatic help message generation, and flexible customization of option names and parsing behavior.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Option Parsing Capabilities  \n\u2705 **Factual:** The `gumdrop` crate allows you to define custom parsing functions for individual fields using attributes like `parse(from_str)` or `parse(try_from_str)`.  \n\u274c **Counterfactual:** The `gumdrop` crate automatically provides built-in parsing for complex data types like JSON or XML without requiring custom parsing functions.  \n\n---\n\n### Pair 2: Subcommand Support  \n\u2705 **Factual:** The `derive(Options)` macro in `gumdrop` supports enums to define subcommands, where each variant can have its own set of options.  \n\u274c **Counterfactual:** The `gumdrop` crate does not support subcommands and only works with flat, single-level option parsing.  \n\n---\n\n### Pair 3: Error Handling  \n\u2705 **Factual:** The `gumdrop::Error` struct represents errors encountered during argument parsing, such as invalid input or missing required options.  \n\u274c **Counterfactual:** The `gumdrop` crate silently ignores parsing errors and does not provide any mechanism for handling or reporting them.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}