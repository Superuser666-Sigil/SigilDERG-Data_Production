{
    "name": "enum-iterator",
    "version": "2.1.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/enum-iterator/latest/enum_iterator/all.html \"show sidebar\")\n# Crate enum_iteratorCopy item path\n[Settings](https://docs.rs/enum-iterator/latest/settings.html)\n[Help](https://docs.rs/enum-iterator/latest/help.html)\nSummary[Source](https://docs.rs/enum-iterator/latest/src/enum_iterator/lib.rs.html#3-1069)\nExpand description\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#overview)Overview\n  * [\ud83d\udce6 crates.io](https://crates.io/crates/enum-iterator)\n  * [\ud83d\udcd6 Documentation](https://docs.rs/enum-iterator)\n  * [\u2696 0BSD license](https://spdx.org/licenses/0BSD.html)\n\n\nTools to iterate over the values of a type.\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#examples)Examples\n```\nuse enum_iterator::{all, cardinality, first, last, next, previous, reverse_all, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nenum Day { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }\nassert_eq!(cardinality::<Day>(), 7);\nassert_eq!(all::<Day>().collect::<Vec<_>>(), [\n  Day::Monday,\n  Day::Tuesday,\n  Day::Wednesday,\n  Day::Thursday,\n  Day::Friday,\n  Day::Saturday,\n  Day::Sunday,\n]);\nassert_eq!(first::<Day>(), Some(Day::Monday));\nassert_eq!(last::<Day>(), Some(Day::Sunday));\nassert_eq!(next(&Day::Tuesday), Some(Day::Wednesday));\nassert_eq!(previous(&Day::Wednesday), Some(Day::Tuesday));\nassert_eq!(reverse_all::<Day>().collect::<Vec<_>>(), [\n  Day::Sunday,\n  Day::Saturday,\n  Day::Friday,\n  Day::Thursday,\n  Day::Wednesday,\n  Day::Tuesday,\n  Day::Monday,\n]);\n```\n\n```\nuse enum_iterator::{cardinality, first, last, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nstruct Foo {\n  a: bool,\n  b: u8,\n}\nassert_eq!(cardinality::<Foo>(), 512);\nassert_eq!(first::<Foo>(), Some(Foo { a: false, b: 0 }));\nassert_eq!(last::<Foo>(), Some(Foo { a: true, b: 255 }));\n```\n\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#rust-version)Rust version\nThis crate tracks stable Rust. Minor releases may require a newer Rust version. Patch releases must not require a newer Rust version.\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#contribute)Contribute\nAll contributions shall be licensed under the [0BSD license](https://spdx.org/licenses/0BSD.html).\n## Structs[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#structs)\n\n[All](https://docs.rs/enum-iterator/latest/enum_iterator/struct.All.html \"struct enum_iterator::All\")\n    Iterator over the values of type `T`.\n\n[ReverseAll](https://docs.rs/enum-iterator/latest/enum_iterator/struct.ReverseAll.html \"struct enum_iterator::ReverseAll\")\n    Iterator over the values of type `T` in reverse order.\n## Traits[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#traits)\n\n[Sequence](https://docs.rs/enum-iterator/latest/enum_iterator/trait.Sequence.html \"trait enum_iterator::Sequence\")\n    Trait to iterate over the values of a type.\n## Functions[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#functions)\n\n[all](https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html \"fn enum_iterator::all\")\n    Returns an iterator over all values of type `T`.\n\n[cardinality](https://docs.rs/enum-iterator/latest/enum_iterator/fn.cardinality.html \"fn enum_iterator::cardinality\")\n    Returns the cardinality (number of values) of `T`\n\n[first](https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html \"fn enum_iterator::first\")\n    Returns the first value of type `T`.\n\n[last](https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html \"fn enum_iterator::last\")\n    Returns the last value of type `T`.\n\n[next](https://docs.rs/enum-iterator/latest/enum_iterator/fn.next.html \"fn enum_iterator::next\")\n    Returns the next value of type `T` or `None` if this was the end.\n\n[next_cycle](https://docs.rs/enum-iterator/latest/enum_iterator/fn.next_cycle.html \"fn enum_iterator::next_cycle\")\n    Returns the next value of type `T` or [`first()`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html \"fn enum_iterator::first\") if this was the end.\n\n[previous](https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous.html \"fn enum_iterator::previous\")\n    Returns the previous value of type `T` or `None` if this was the beginning.\n\n[previous_cycle](https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous_cycle.html \"fn enum_iterator::previous_cycle\")\n    Returns the previous value of type `T` or [`last()`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html \"fn enum_iterator::last\") if this was the beginning.\n\n[reverse_all](https://docs.rs/enum-iterator/latest/enum_iterator/fn.reverse_all.html \"fn enum_iterator::reverse_all\")\n    Returns an iterator over all values of type `T` in the reverse order of [`all`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html \"fn enum_iterator::all\").\n## Derive Macros[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#derives)\n\n[Sequence](https://docs.rs/enum-iterator/latest/enum_iterator/derive.Sequence.html \"derive enum_iterator::Sequence\")\n    Derives `Sequence`.\n",
        "markdown_with_citations": "[](https://docs.rs/enum-iterator/latest/enum_iterator/all.html \"show sidebar\")\n# Crate enum_iteratorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Overview\n  * \ud83d\udce6 crates.io\u27e85\u27e9\n  * \ud83d\udcd6 Documentation\u27e86\u27e9\n  * \u2696 0BSD license\u27e87\u27e9\n\n\nTools to iterate over the values of a type.\n## \u00a7\u27e88\u27e9Examples\n```\nuse enum_iterator::{all, cardinality, first, last, next, previous, reverse_all, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nenum Day { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }\nassert_eq!(cardinality::<Day>(), 7);\nassert_eq!(all::<Day>().collect::<Vec<_>>(), [\n  Day::Monday,\n  Day::Tuesday,\n  Day::Wednesday,\n  Day::Thursday,\n  Day::Friday,\n  Day::Saturday,\n  Day::Sunday,\n]);\nassert_eq!(first::<Day>(), Some(Day::Monday));\nassert_eq!(last::<Day>(), Some(Day::Sunday));\nassert_eq!(next(&Day::Tuesday), Some(Day::Wednesday));\nassert_eq!(previous(&Day::Wednesday), Some(Day::Tuesday));\nassert_eq!(reverse_all::<Day>().collect::<Vec<_>>(), [\n  Day::Sunday,\n  Day::Saturday,\n  Day::Friday,\n  Day::Thursday,\n  Day::Wednesday,\n  Day::Tuesday,\n  Day::Monday,\n]);\n```\n\n```\nuse enum_iterator::{cardinality, first, last, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nstruct Foo {\n  a: bool,\n  b: u8,\n}\nassert_eq!(cardinality::<Foo>(), 512);\nassert_eq!(first::<Foo>(), Some(Foo { a: false, b: 0 }));\nassert_eq!(last::<Foo>(), Some(Foo { a: true, b: 255 }));\n```\n\n## \u00a7\u27e89\u27e9Rust version\nThis crate tracks stable Rust. Minor releases may require a newer Rust version. Patch releases must not require a newer Rust version.\n## \u00a7\u27e810\u27e9Contribute\nAll contributions shall be licensed under the 0BSD license\u27e87\u27e9.\n## Structs\u00a7\u27e811\u27e9\n\nAll\u27e812\u27e9\n    Iterator over the values of type `T`.\n\nReverseAll\u27e813\u27e9\n    Iterator over the values of type `T` in reverse order.\n## Traits\u00a7\u27e814\u27e9\n\nSequence\u27e815\u27e9\n    Trait to iterate over the values of a type.\n## Functions\u00a7\u27e816\u27e9\n\nall\u27e817\u27e9\n    Returns an iterator over all values of type `T`.\n\ncardinality\u27e818\u27e9\n    Returns the cardinality (number of values) of `T`\n\nfirst\u27e819\u27e9\n    Returns the first value of type `T`.\n\nlast\u27e820\u27e9\n    Returns the last value of type `T`.\n\nnext\u27e821\u27e9\n    Returns the next value of type `T` or `None` if this was the end.\n\nnext_cycle\u27e822\u27e9\n    Returns the next value of type `T` or `first()`\u27e819\u27e9 if this was the end.\n\nprevious\u27e823\u27e9\n    Returns the previous value of type `T` or `None` if this was the beginning.\n\nprevious_cycle\u27e824\u27e9\n    Returns the previous value of type `T` or `last()`\u27e820\u27e9 if this was the beginning.\n\nreverse_all\u27e825\u27e9\n    Returns an iterator over all values of type `T` in the reverse order of `all`\u27e817\u27e9.\n## Derive Macros\u00a7\u27e826\u27e9\n\nSequence\u27e827\u27e9\n    Derives `Sequence`.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/enum-iterator/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/enum-iterator/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/enum-iterator/latest/src/enum_iterator/lib.rs.html#3-1069: Source\n\u27e84\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#overview: \u00a7\n\u27e85\u27e9 https://crates.io/crates/enum-iterator: \ud83d\udce6 crates.io\n\u27e86\u27e9 https://docs.rs/enum-iterator: \ud83d\udcd6 Documentation\n\u27e87\u27e9 https://spdx.org/licenses/0BSD.html: \u2696 0BSD license\n\u27e88\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#examples: \u00a7\n\u27e89\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#rust-version: \u00a7\n\u27e810\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#contribute: \u00a7\n\u27e811\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/struct.All.html: struct enum_iterator::All - All\n\u27e813\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/struct.ReverseAll.html: struct enum_iterator::ReverseAll - ReverseAll\n\u27e814\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#traits: \u00a7\n\u27e815\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/trait.Sequence.html: trait enum_iterator::Sequence - Sequence\n\u27e816\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#functions: \u00a7\n\u27e817\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html: fn enum_iterator::all - all\n\u27e818\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.cardinality.html: fn enum_iterator::cardinality - cardinality\n\u27e819\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html: fn enum_iterator::first - first\n\u27e820\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html: fn enum_iterator::last - last\n\u27e821\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.next.html: fn enum_iterator::next - next\n\u27e822\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.next_cycle.html: fn enum_iterator::next_cycle - next_cycle\n\u27e823\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous.html: fn enum_iterator::previous - previous\n\u27e824\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous_cycle.html: fn enum_iterator::previous_cycle - previous_cycle\n\u27e825\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.reverse_all.html: fn enum_iterator::reverse_all - reverse_all\n\u27e826\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#derives: \u00a7\n\u27e827\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/derive.Sequence.html: derive enum_iterator::Sequence - Sequence\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `enum-iterator` crate provides tools to iterate over all possible values of a type, particularly enums, and supports operations like retrieving the first, last, next, previous, and reverse order of values. It includes functions such as `all`, `cardinality`, `next_cycle`, and `previous_cycle`, and derives the `Sequence` trait for seamless enumeration. The crate is lightweight, licensed under 0BSD, and compatible with stable Rust.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Iterating over enum variants\n\u2705 Factual: The `enum-iterator` crate provides the `all` function, which returns an iterator over all variants of an enum in their defined order.  \n\u274c Counterfactual: The `enum-iterator` crate automatically generates an iterator for enums without requiring the `Sequence` derive macro.\n\n---\n\n### Pair 2: Cardinality of types\n\u2705 Factual: The `cardinality` function in `enum-iterator` calculates the number of distinct values for a type, such as the number of variants in an enum.  \n\u274c Counterfactual: The `cardinality` function can dynamically compute the number of values for runtime-generated types, such as dynamically constructed enums.\n\n---\n\n### Pair 3: Reverse iteration\n\u2705 Factual: The `reverse_all` function provides an iterator that traverses all variants of an enum in reverse order.  \n\u274c Counterfactual: The `reverse_all` function can reverse the order of any iterator, not just those over enum variants.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}