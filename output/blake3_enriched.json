{
    "name": "blake3",
    "version": "1.8.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/blake3/latest/blake3/all.html \"show sidebar\")\n# Crate blake3Copy item path\n[Settings](https://docs.rs/blake3/latest/settings.html)\n[Help](https://docs.rs/blake3/latest/help.html)\nSummary[Source](https://docs.rs/blake3/latest/src/blake3/lib.rs.html#1-1835)\nExpand description\nThe official Rust implementation of the [BLAKE3](https://blake3.io) cryptographic hash function.\n## [\u00a7](https://docs.rs/blake3/latest/blake3/#examples)Examples\n```\n// Hash an input all at once.\nlet hash1 = blake3::hash(b\"foobarbaz\");\n// Hash an input incrementally.\nlet mut hasher = blake3::Hasher::new();\nhasher.update(b\"foo\");\nhasher.update(b\"bar\");\nhasher.update(b\"baz\");\nlet hash2 = hasher.finalize();\nassert_eq!(hash1, hash2);\n// Extended output. OutputReader also implements Read and Seek.\nlet mut output = [0; 1000];\nlet mut output_reader = hasher.finalize_xof();\noutput_reader.fill(&mut output);\nassert_eq!(hash1, output[..32]);\n// Print a hash as hex.\nprintln!(\"{}\", hash1);\n```\n\n## [\u00a7](https://docs.rs/blake3/latest/blake3/#cargo-features)Cargo Features\nThe `std` feature (the only feature enabled by default) is required for implementations of the [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) and [`Seek`](https://doc.rust-lang.org/std/io/trait.Seek.html) traits, the [`update_reader`](https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.update_reader \"method blake3::Hasher::update_reader\") helper method, and runtime CPU feature detection on x86. If this feature is disabled, the only way to use the x86 SIMD implementations is to enable the corresponding instruction sets globally, with e.g. `RUSTFLAGS=\"-C target-cpu=native\"`. The resulting binary will not be portable to other machines.\nThe `rayon` feature (disabled by default, but enabled for [docs.rs](https://docs.rs/)) adds the [`update_rayon`](https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.update_rayon \"method blake3::Hasher::update_rayon\") and (in combination with `mmap` below) [`update_mmap_rayon`](https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.update_mmap_rayon \"method blake3::Hasher::update_mmap_rayon\") methods, for multithreaded hashing. However, even if this feature is enabled, all other APIs remain single-threaded.\nThe `mmap` feature (disabled by default, but enabled for [docs.rs](https://docs.rs/)) adds the [`update_mmap`](https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.update_mmap \"method blake3::Hasher::update_mmap\") and (in combination with `rayon` above) [`update_mmap_rayon`](https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.update_mmap_rayon \"method blake3::Hasher::update_mmap_rayon\") helper methods for memory-mapped IO.\nThe `zeroize` feature (disabled by default, but enabled for [docs.rs](https://docs.rs/)) implements [`Zeroize`](https://docs.rs/zeroize/latest/zeroize/trait.Zeroize.html) for this crate\u2019s types.\nThe `serde` feature (disabled by default, but enabled for [docs.rs](https://docs.rs/)) implements [`serde::Serialize`](https://docs.rs/serde/latest/serde/trait.Serialize.html) and [`serde::Deserialize`](https://docs.rs/serde/latest/serde/trait.Deserialize.html) for [`Hash`](https://docs.rs/blake3/latest/blake3/struct.Hash.html \"struct blake3::Hash\").\nThe NEON implementation is enabled by default for AArch64 but requires the `neon` feature for other ARM targets. Not all ARMv7 CPUs support NEON, and enabling this feature will produce a binary that\u2019s not portable to CPUs without NEON support.\nThe `wasm32_simd` feature enables the WASM SIMD implementation for all `wasm32-` targets. Similar to the `neon` feature, if `wasm32_simd` is enabled, WASM SIMD support is assumed. This may become the default in the future.\nThe `traits-preview` feature enables implementations of traits from the RustCrypto [`digest`](https://crates.io/crates/digest) crate, and re-exports that crate as `traits::digest`. However, the traits aren\u2019t stable, and they\u2019re expected to change in incompatible ways before that crate reaches 1.0. For that reason, this crate makes no SemVer guarantees for this feature, and callers who use it should expect breaking changes between patch versions. (The \u201c-preview\u201d feature name follows the conventions of the RustCrypto [`signature`](https://crates.io/crates/signature) crate.)\n## Modules[\u00a7](https://docs.rs/blake3/latest/blake3/#modules)\n\n[hazmat](https://docs.rs/blake3/latest/blake3/hazmat/index.html \"mod blake3::hazmat\")\n    Low-level tree manipulations and other sharp tools\n## Structs[\u00a7](https://docs.rs/blake3/latest/blake3/#structs)\n\n[Hash](https://docs.rs/blake3/latest/blake3/struct.Hash.html \"struct blake3::Hash\")\n    An output of the default size, 32 bytes, which provides constant-time equality checking.\n\n[Hasher](https://docs.rs/blake3/latest/blake3/struct.Hasher.html \"struct blake3::Hasher\")\n    An incremental hash state that can accept any number of writes.\n\n[HexError](https://docs.rs/blake3/latest/blake3/struct.HexError.html \"struct blake3::HexError\")\n    The error type for [`Hash::from_hex`](https://docs.rs/blake3/latest/blake3/struct.Hash.html#method.from_hex \"associated function blake3::Hash::from_hex\").\n\n[OutputReader](https://docs.rs/blake3/latest/blake3/struct.OutputReader.html \"struct blake3::OutputReader\")\n    An incremental reader for extended output, returned by [`Hasher::finalize_xof`](https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.finalize_xof).\n## Constants[\u00a7](https://docs.rs/blake3/latest/blake3/#constants)\n\n[BLOCK_LEN](https://docs.rs/blake3/latest/blake3/constant.BLOCK_LEN.html \"constant blake3::BLOCK_LEN\")\n    The number of bytes in a block, 64.\n\n[CHUNK_LEN](https://docs.rs/blake3/latest/blake3/constant.CHUNK_LEN.html \"constant blake3::CHUNK_LEN\")\n    The number of bytes in a chunk, 1024.\n\n[KEY_LEN](https://docs.rs/blake3/latest/blake3/constant.KEY_LEN.html \"constant blake3::KEY_LEN\")\n    The number of bytes in a key, 32.\n\n[OUT_LEN](https://docs.rs/blake3/latest/blake3/constant.OUT_LEN.html \"constant blake3::OUT_LEN\")\n    The number of bytes in a [`Hash`](https://docs.rs/blake3/latest/blake3/struct.Hash.html), 32.\n## Functions[\u00a7](https://docs.rs/blake3/latest/blake3/#functions)\n\n[derive_key](https://docs.rs/blake3/latest/blake3/fn.derive_key.html \"fn blake3::derive_key\")\n    The key derivation function.\n\n[hash](https://docs.rs/blake3/latest/blake3/fn.hash.html \"fn blake3::hash\")\n    The default hash function.\n\n[keyed_hash](https://docs.rs/blake3/latest/blake3/fn.keyed_hash.html \"fn blake3::keyed_hash\")\n    The keyed hash function.\n",
        "markdown_with_citations": "[](https://docs.rs/blake3/latest/blake3/all.html \"show sidebar\")\n# Crate blake3Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThe official Rust implementation of the BLAKE3\u27e84\u27e9 cryptographic hash function.\n## \u00a7\u27e85\u27e9Examples\n```\n// Hash an input all at once.\nlet hash1 = blake3::hash(b\"foobarbaz\");\n// Hash an input incrementally.\nlet mut hasher = blake3::Hasher::new();\nhasher.update(b\"foo\");\nhasher.update(b\"bar\");\nhasher.update(b\"baz\");\nlet hash2 = hasher.finalize();\nassert_eq!(hash1, hash2);\n// Extended output. OutputReader also implements Read and Seek.\nlet mut output = [0; 1000];\nlet mut output_reader = hasher.finalize_xof();\noutput_reader.fill(&mut output);\nassert_eq!(hash1, output[..32]);\n// Print a hash as hex.\nprintln!(\"{}\", hash1);\n```\n\n## \u00a7\u27e86\u27e9Cargo Features\nThe `std` feature (the only feature enabled by default) is required for implementations of the `Write`\u27e87\u27e9 and `Seek`\u27e88\u27e9 traits, the `update_reader`\u27e89\u27e9 helper method, and runtime CPU feature detection on x86. If this feature is disabled, the only way to use the x86 SIMD implementations is to enable the corresponding instruction sets globally, with e.g. `RUSTFLAGS=\"-C target-cpu=native\"`. The resulting binary will not be portable to other machines.\nThe `rayon` feature (disabled by default, but enabled for docs.rs\u27e810\u27e9) adds the `update_rayon`\u27e811\u27e9 and (in combination with `mmap` below) `update_mmap_rayon`\u27e812\u27e9 methods, for multithreaded hashing. However, even if this feature is enabled, all other APIs remain single-threaded.\nThe `mmap` feature (disabled by default, but enabled for docs.rs\u27e810\u27e9) adds the `update_mmap`\u27e813\u27e9 and (in combination with `rayon` above) `update_mmap_rayon`\u27e812\u27e9 helper methods for memory-mapped IO.\nThe `zeroize` feature (disabled by default, but enabled for docs.rs\u27e810\u27e9) implements `Zeroize`\u27e814\u27e9 for this crate\u2019s types.\nThe `serde` feature (disabled by default, but enabled for docs.rs\u27e810\u27e9) implements `serde::Serialize`\u27e815\u27e9 and `serde::Deserialize`\u27e816\u27e9 for `Hash`\u27e817\u27e9.\nThe NEON implementation is enabled by default for AArch64 but requires the `neon` feature for other ARM targets. Not all ARMv7 CPUs support NEON, and enabling this feature will produce a binary that\u2019s not portable to CPUs without NEON support.\nThe `wasm32_simd` feature enables the WASM SIMD implementation for all `wasm32-` targets. Similar to the `neon` feature, if `wasm32_simd` is enabled, WASM SIMD support is assumed. This may become the default in the future.\nThe `traits-preview` feature enables implementations of traits from the RustCrypto `digest`\u27e818\u27e9 crate, and re-exports that crate as `traits::digest`. However, the traits aren\u2019t stable, and they\u2019re expected to change in incompatible ways before that crate reaches 1.0. For that reason, this crate makes no SemVer guarantees for this feature, and callers who use it should expect breaking changes between patch versions. (The \u201c-preview\u201d feature name follows the conventions of the RustCrypto `signature`\u27e819\u27e9 crate.)\n## Modules\u00a7\u27e820\u27e9\n\nhazmat\u27e821\u27e9\n    Low-level tree manipulations and other sharp tools\n## Structs\u00a7\u27e822\u27e9\n\nHash\u27e817\u27e9\n    An output of the default size, 32 bytes, which provides constant-time equality checking.\n\nHasher\u27e823\u27e9\n    An incremental hash state that can accept any number of writes.\n\nHexError\u27e824\u27e9\n    The error type for `Hash::from_hex`\u27e825\u27e9.\n\nOutputReader\u27e826\u27e9\n    An incremental reader for extended output, returned by `Hasher::finalize_xof`\u27e827\u27e9.\n## Constants\u00a7\u27e828\u27e9\n\nBLOCK_LEN\u27e829\u27e9\n    The number of bytes in a block, 64.\n\nCHUNK_LEN\u27e830\u27e9\n    The number of bytes in a chunk, 1024.\n\nKEY_LEN\u27e831\u27e9\n    The number of bytes in a key, 32.\n\nOUT_LEN\u27e832\u27e9\n    The number of bytes in a `Hash`\u27e817\u27e9, 32.\n## Functions\u00a7\u27e833\u27e9\n\nderive_key\u27e834\u27e9\n    The key derivation function.\n\nhash\u27e835\u27e9\n    The default hash function.\n\nkeyed_hash\u27e836\u27e9\n    The keyed hash function.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/blake3/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/blake3/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/blake3/latest/src/blake3/lib.rs.html#1-1835: Source\n\u27e84\u27e9 https://blake3.io: BLAKE3\n\u27e85\u27e9 https://docs.rs/blake3/latest/blake3/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/blake3/latest/blake3/#cargo-features: \u00a7\n\u27e87\u27e9 https://doc.rust-lang.org/std/io/trait.Write.html: `Write`\n\u27e88\u27e9 https://doc.rust-lang.org/std/io/trait.Seek.html: `Seek`\n\u27e89\u27e9 https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.update_reader: method blake3::Hasher::update_reader - `update_reader`\n\u27e810\u27e9 https://docs.rs/: docs.rs\n\u27e811\u27e9 https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.update_rayon: method blake3::Hasher::update_rayon - `update_rayon`\n\u27e812\u27e9 https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.update_mmap_rayon: method blake3::Hasher::update_mmap_rayon - `update_mmap_rayon`\n\u27e813\u27e9 https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.update_mmap: method blake3::Hasher::update_mmap - `update_mmap`\n\u27e814\u27e9 https://docs.rs/zeroize/latest/zeroize/trait.Zeroize.html: `Zeroize`\n\u27e815\u27e9 https://docs.rs/serde/latest/serde/trait.Serialize.html: `serde::Serialize`\n\u27e816\u27e9 https://docs.rs/serde/latest/serde/trait.Deserialize.html: `serde::Deserialize`\n\u27e817\u27e9 https://docs.rs/blake3/latest/blake3/struct.Hash.html: struct blake3::Hash - `Hash`\n\u27e818\u27e9 https://crates.io/crates/digest: `digest`\n\u27e819\u27e9 https://crates.io/crates/signature: `signature`\n\u27e820\u27e9 https://docs.rs/blake3/latest/blake3/#modules: \u00a7\n\u27e821\u27e9 https://docs.rs/blake3/latest/blake3/hazmat/index.html: mod blake3::hazmat - hazmat\n\u27e822\u27e9 https://docs.rs/blake3/latest/blake3/#structs: \u00a7\n\u27e823\u27e9 https://docs.rs/blake3/latest/blake3/struct.Hasher.html: struct blake3::Hasher - Hasher\n\u27e824\u27e9 https://docs.rs/blake3/latest/blake3/struct.HexError.html: struct blake3::HexError - HexError\n\u27e825\u27e9 https://docs.rs/blake3/latest/blake3/struct.Hash.html#method.from_hex: associated function blake3::Hash::from_hex - `Hash::from_hex`\n\u27e826\u27e9 https://docs.rs/blake3/latest/blake3/struct.OutputReader.html: struct blake3::OutputReader - OutputReader\n\u27e827\u27e9 https://docs.rs/blake3/latest/blake3/struct.Hasher.html#method.finalize_xof: `Hasher::finalize_xof`\n\u27e828\u27e9 https://docs.rs/blake3/latest/blake3/#constants: \u00a7\n\u27e829\u27e9 https://docs.rs/blake3/latest/blake3/constant.BLOCK_LEN.html: constant blake3::BLOCK_LEN - BLOCK_LEN\n\u27e830\u27e9 https://docs.rs/blake3/latest/blake3/constant.CHUNK_LEN.html: constant blake3::CHUNK_LEN - CHUNK_LEN\n\u27e831\u27e9 https://docs.rs/blake3/latest/blake3/constant.KEY_LEN.html: constant blake3::KEY_LEN - KEY_LEN\n\u27e832\u27e9 https://docs.rs/blake3/latest/blake3/constant.OUT_LEN.html: constant blake3::OUT_LEN - OUT_LEN\n\u27e833\u27e9 https://docs.rs/blake3/latest/blake3/#functions: \u00a7\n\u27e834\u27e9 https://docs.rs/blake3/latest/blake3/fn.derive_key.html: fn blake3::derive_key - derive_key\n\u27e835\u27e9 https://docs.rs/blake3/latest/blake3/fn.hash.html: fn blake3::hash - hash\n\u27e836\u27e9 https://docs.rs/blake3/latest/blake3/fn.keyed_hash.html: fn blake3::keyed_hash - keyed_hash\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `blake3` crate is the official Rust implementation of the BLAKE3 cryptographic hash function, offering high performance and versatility. It supports incremental and multithreaded hashing, extended output, keyed hashing, and key derivation. Key features include optional SIMD optimizations, memory-mapped I/O, Serde serialization, Zeroize integration, and compatibility with RustCrypto traits (via the `traits-preview` feature).",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Incremental Hashing  \n\u2705 Factual: The `blake3` crate allows incremental hashing using the `Hasher` struct, enabling users to update the hash state with multiple inputs before finalizing the hash.  \n\u274c Counterfactual: The `blake3` crate does not support incremental hashing, requiring all input data to be provided at once for hashing.  \n\n---\n\n### Pair 2: Multithreaded Hashing  \n\u2705 Factual: The `rayon` feature in the `blake3` crate enables multithreaded hashing via methods like `update_rayon`, which can improve performance for large inputs.  \n\u274c Counterfactual: The `rayon` feature is enabled by default in the `blake3` crate, and all hashing operations automatically use multithreading without additional configuration.  \n\n---\n\n### Pair 3: WASM SIMD Support  \n\u2705 Factual: The `wasm32_simd` feature in the `blake3` crate enables SIMD optimizations for WebAssembly targets, improving performance for supported environments.  \n\u274c Counterfactual: The `wasm32_simd` feature is mandatory for all WebAssembly targets and cannot be disabled.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}