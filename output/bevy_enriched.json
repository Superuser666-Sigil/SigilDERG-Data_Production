{
    "name": "bevy",
    "version": "0.16.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/bevy/latest/bevy/all.html \"show sidebar\")\n# Crate bevyCopy item path\n[Settings](https://docs.rs/bevy/latest/settings.html)\n[Help](https://docs.rs/bevy/latest/help.html)\nSummary[Source](https://docs.rs/bevy/latest/src/bevy/lib.rs.html#1-58)\nExpand description\n[![Bevy Logo](https://bevyengine.org/assets/bevy_logo_docs.svg)](https://bevyengine.org)\nBevy is an open-source modular game engine built in Rust, with a focus on developer productivity and performance.\nCheck out the [Bevy website](https://bevyengine.org) for more information, read the [Quick Start Guide](https://bevyengine.org/learn/quick-start/introduction) for a step-by-step introduction, and [engage with our community](https://bevyengine.org/community/) if you have any questions or ideas!\n### [\u00a7](https://docs.rs/bevy/latest/bevy/#example)Example\nHere is a simple \u201cHello World\u201d Bevy app:\n```\nuse bevy::prelude::*;\nfn main() {\n  App::new()\n    .add_systems(Update, hello_world_system)\n    .run();\n}\nfn hello_world_system() {\n  println!(\"hello world\");\n}\n```\n\nDon\u2019t let the simplicity of the example above fool you. Bevy is a [fully featured game engine](https://bevyengine.org) and it gets more powerful every day!\n### [\u00a7](https://docs.rs/bevy/latest/bevy/#this-crate)This Crate\nThe `bevy` crate is just a container crate that makes it easier to consume Bevy subcrates. The defaults provide a \u201cfull\u201d engine experience, but you can easily enable / disable features in your project\u2019s `Cargo.toml` to meet your specific needs. See Bevy\u2019s `Cargo.toml` for a full list of features available.\nIf you prefer, you can also consume the individual bevy crates directly. Each module in the root of this crate, except for the prelude, can be found on crates.io with `bevy_` appended to the front, e.g. `app` -> [`bevy_app`](https://docs.rs/bevy_app/*/bevy_app/).\n### [\u00a7](https://docs.rs/bevy/latest/bevy/#cargo-features)Cargo Features\nBevy exposes many features to customize the engine. Enabling them add functionalities but often come at the cost of longer compilation times and extra dependencies.\n#### [\u00a7](https://docs.rs/bevy/latest/bevy/#default-features)Default Features\nThe default feature set enables most of the expected features of a game engine, like rendering in both 2D and 3D, asset loading, audio and UI. To help reduce compilation time, consider disabling default features and enabling only those you need.\nfeature name| description  \n---|---  \nandroid-game-activity| Android GameActivity support. Default, choose between this and `android-native-activity`.  \nandroid_shared_stdcxx| Enable using a shared stdlib for cxx on Android  \nanimation| Enable animation support, and glTF animation loading  \nasync_executor| Uses `async-executor` as a task execution backend.  \nbevy_animation| Provides animation functionality  \nbevy_asset| Provides asset functionality  \nbevy_audio| Provides audio functionality  \nbevy_color| Provides shared color types and operations  \nbevy_core_pipeline| Provides cameras and other basic render pipeline features  \nbevy_gilrs| Adds gamepad support  \nbevy_gizmos| Adds support for rendering gizmos  \nbevy_gltf| [glTF](https://www.khronos.org/gltf/) support  \nbevy_input_focus| Enable input focus subsystem  \nbevy_log| Enable integration with `tracing` and `log`  \nbevy_mesh_picking_backend| Provides an implementation for picking meshes  \nbevy_pbr| Adds PBR rendering  \nbevy_picking| Provides picking functionality  \nbevy_render| Provides rendering functionality  \nbevy_scene| Provides scene functionality  \nbevy_sprite| Provides sprite functionality  \nbevy_sprite_picking_backend| Provides an implementation for picking sprites  \nbevy_state| Enable built in global state machines  \nbevy_text| Provides text functionality  \nbevy_ui| A custom ECS-driven UI framework  \nbevy_ui_picking_backend| Provides an implementation for picking UI  \nbevy_window| Windowing layer  \nbevy_winit| winit window and input backend  \ncustom_cursor| Enable winit custom cursor support  \ndefault_font| Include a default font, containing only ASCII characters, at the cost of a 20kB binary size increase  \nhdr| HDR image format support  \nktx2| KTX2 compressed texture support  \nmulti_threaded| Enables multithreaded parallelism in the engine. Disabling it forces all engine tasks to run on a single thread.  \npng| PNG image format support  \nsmaa_luts| Include SMAA Look Up Tables KTX2 Files  \nstd| Allows access to the `std` crate.  \nsysinfo_plugin| Enables system information diagnostic plugin  \ntonemapping_luts| Include tonemapping Look Up Tables KTX2 files. If everything is pink, you need to enable this feature or change the `Tonemapping` method for your `Camera2d` or `Camera3d`.  \nvorbis| OGG/VORBIS audio format support  \nwebgl2| Enable some limitations to be able to use WebGL2. Please refer to the [WebGL2 and WebGPU](https://github.com/bevyengine/bevy/tree/latest/examples#webgl2-and-webgpu) section of the examples README for more information on how to run Wasm builds with WebGPU.  \nx11| X11 display server support  \nzstd| For KTX2 supercompression  \n#### [\u00a7](https://docs.rs/bevy/latest/bevy/#optional-features)Optional Features\nfeature name| description  \n---|---  \naccesskit_unix| Enable AccessKit on Unix backends (currently only works with experimental screen readers and forks.)  \nandroid-native-activity| Android NativeActivity support. Legacy, should be avoided for most new Android games.  \nasset_processor| Enables the built-in asset processor for processed assets.  \nasync-io| Use async-io\u2019s implementation of block_on instead of futures-lite\u2019s implementation. This is preferred if your application uses async-io.  \nbasis-universal| Basis Universal compressed texture support  \nbevy_ci_testing| Enable systems that allow for automated testing on CI  \nbevy_debug_stepping| Enable stepping-based debugging of Bevy systems  \nbevy_dev_tools| Provides a collection of developer tools  \nbevy_image| Load and access image data. Usually added by an image format  \nbevy_remote| Enable the Bevy Remote Protocol  \nbevy_ui_debug| Provides a debug overlay for bevy UI  \nbmp| BMP image format support  \nconfigurable_error_handler| Use the configurable global error handler as the default error handler.  \ncritical-section| `critical-section` provides the building blocks for synchronization primitives on all platforms, including `no_std`.  \ndds| DDS compressed texture support  \ndebug_glam_assert| Enable assertions in debug builds to check the validity of parameters passed to glam  \ndefault_no_std| Recommended defaults for no_std applications  \ndetailed_trace| Enable detailed trace event logging. These trace events are expensive even when off, thus they require compile time opt-in  \ndynamic_linking| Force dynamic linking, which improves iterative compile times  \nembedded_watcher| Enables watching in memory asset providers for Bevy Asset hot-reloading  \nexperimental_pbr_pcss| Enable support for PCSS, at the risk of blowing past the global, per-shader sampler limit on older/lower-end GPUs  \nexr| EXR image format support  \nff| Farbfeld image format support  \nfile_watcher| Enables watching the filesystem for Bevy Asset hot-reloading  \nflac| FLAC audio format support  \nghost_nodes| Experimental support for nodes that are ignored for UI layouting  \ngif| GIF image format support  \nglam_assert| Enable assertions to check the validity of parameters passed to glam  \nico| ICO image format support  \njpeg| JPEG image format support  \nlibm| Uses the `libm` maths library instead of the one provided in `std` and `core`.  \nmeshlet| Enables the meshlet renderer for dense high-poly scenes (experimental)  \nmeshlet_processor| Enables processing meshes into meshlet meshes for bevy_pbr  \nminimp3| MP3 audio format support (through minimp3)  \nmp3| MP3 audio format support  \npbr_anisotropy_texture| Enable support for anisotropy texture in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs  \npbr_multi_layer_material_textures| Enable support for multi-layer material textures in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs  \npbr_specular_textures| Enable support for specular textures in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs  \npbr_transmission_textures| Enable support for transmission-related textures in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs  \npnm| PNM image format support, includes pam, pbm, pgm and ppm  \nqoi| QOI image format support  \nreflect_documentation| Enable documentation reflection  \nreflect_functions| Enable function reflection  \nserialize| Enable serialization support through serde  \nshader_format_glsl| Enable support for shaders in GLSL  \nshader_format_spirv| Enable support for shaders in SPIR-V  \nshader_format_wesl| Enable support for shaders in WESL  \nspirv_shader_passthrough| Enable passthrough loading for SPIR-V shaders (Only supported on Vulkan, shader capabilities and extensions must agree with the platform implementation)  \nstatically-linked-dxc| Statically linked DXC shader compiler for DirectX 12  \nsymphonia-aac| AAC audio format support (through symphonia)  \nsymphonia-all| AAC, FLAC, MP3, MP4, OGG/VORBIS, and WAV audio formats support (through symphonia)  \nsymphonia-flac| FLAC audio format support (through symphonia)  \nsymphonia-isomp4| MP4 audio format support (through symphonia)  \nsymphonia-vorbis| OGG/VORBIS audio format support (through symphonia)  \nsymphonia-wav| WAV audio format support (through symphonia)  \ntga| TGA image format support  \ntiff| TIFF image format support  \ntrace| Tracing support  \ntrace_chrome| Tracing support, saving a file in Chrome Tracing format  \ntrace_tracy| Tracing support, exposing a port for Tracy  \ntrace_tracy_memory| Tracing support, with memory profiling, exposing a port for Tracy  \ntrack_location| Enables source location tracking for change detection and spawning/despawning, which can assist with debugging  \nwav| WAV audio format support  \nwayland| Wayland display server support  \nweb| Enables use of browser APIs. Note this is currently only applicable on `wasm32` architectures.  \nwebgpu| Enable support for WebGPU in Wasm. When enabled, this feature will override the `webgl2` feature and you won\u2019t be able to run Wasm builds with WebGL2, only with WebGPU.  \nwebp| WebP image format support  \nzlib| For KTX2 supercompression  \n## Modules[\u00a7](https://docs.rs/bevy/latest/bevy/#modules)\n\n[a11y](https://docs.rs/bevy/latest/bevy/a11y/index.html \"mod bevy::a11y\")\n    Accessibility for Bevy\n\n[animation](https://docs.rs/bevy/latest/bevy/animation/index.html \"mod bevy::animation\")\n    Animation for the game engine Bevy\n\n[app](https://docs.rs/bevy/latest/bevy/app/index.html \"mod bevy::app\")\n    This crate is about everything concerning the highest-level, application layer of a Bevy app.\n\n[asset](https://docs.rs/bevy/latest/bevy/asset/index.html \"mod bevy::asset\")\n    In the context of game development, an \u201casset\u201d is a piece of content that is loaded from disk and displayed in the game. Typically, these are authored by artists and designers (in contrast to code), are relatively large in size, and include everything from textures and models to sounds and music to levels and scripts.\n\n[audio](https://docs.rs/bevy/latest/bevy/audio/index.html \"mod bevy::audio\")\n    Audio support for the game engine Bevy\n\n[color](https://docs.rs/bevy/latest/bevy/color/index.html \"mod bevy::color\")\n    Representations of colors in various color spaces.\n\n[core_pipeline](https://docs.rs/bevy/latest/bevy/core_pipeline/index.html \"mod bevy::core_pipeline\")\n\n\n[dev_tools](https://docs.rs/bevy/latest/bevy/dev_tools/index.html \"mod bevy::dev_tools\")\n    This crate provides additional utilities for the [Bevy game engine](https://bevyengine.org), focused on improving developer experience.\n\n[diagnostic](https://docs.rs/bevy/latest/bevy/diagnostic/index.html \"mod bevy::diagnostic\")\n    This crate provides a straightforward solution for integrating diagnostics in the [Bevy game engine](https://bevyengine.org/). It allows users to easily add diagnostic functionality to their Bevy applications, enhancing their ability to monitor and optimize their game\u2019s.\n\n[ecs](https://docs.rs/bevy/latest/bevy/ecs/index.html \"mod bevy::ecs\")\n    Bevy ECS\n\n[gilrs](https://docs.rs/bevy/latest/bevy/gilrs/index.html \"mod bevy::gilrs\")\n    Systems and type definitions for gamepad handling in Bevy.\n\n[gizmos](https://docs.rs/bevy/latest/bevy/gizmos/index.html \"mod bevy::gizmos\")\n    This crate adds an immediate mode drawing api to Bevy for visual debugging.\n\n[gltf](https://docs.rs/bevy/latest/bevy/gltf/index.html \"mod bevy::gltf\")\n    Plugin providing an [`AssetLoader`](https://docs.rs/bevy/latest/bevy/asset/trait.AssetLoader.html \"trait bevy::asset::AssetLoader\") and type definitions for loading glTF 2.0 (a standard 3D scene definition format) files in Bevy.\n\n[image](https://docs.rs/bevy/latest/bevy/image/index.html \"mod bevy::image\")\n\n\n[input](https://docs.rs/bevy/latest/bevy/input/index.html \"mod bevy::input\")\n    Input functionality for the [Bevy game engine](https://bevyengine.org/).\n\n[input_focus](https://docs.rs/bevy/latest/bevy/input_focus/index.html \"mod bevy::input_focus\")\n    A UI-centric focus system for Bevy.\n\n[log](https://docs.rs/bevy/latest/bevy/log/index.html \"mod bevy::log\")\n    This crate provides logging functions and configuration for [Bevy](https://bevyengine.org) apps, and automatically configures platform specific log handlers (i.e. Wasm or Android).\n\n[math](https://docs.rs/bevy/latest/bevy/math/index.html \"mod bevy::math\")\n    Provides math types and functionality for the Bevy game engine.\n\n[pbr](https://docs.rs/bevy/latest/bevy/pbr/index.html \"mod bevy::pbr\")\n\n\n[picking](https://docs.rs/bevy/latest/bevy/picking/index.html \"mod bevy::picking\")\n    This crate provides \u2018picking\u2019 capabilities for the Bevy game engine, allowing pointers to interact with entities using hover, click, and drag events.\n\n[platform](https://docs.rs/bevy/latest/bevy/platform/index.html \"mod bevy::platform\")\n    Platform compatibility support for first-party [Bevy](https://bevyengine.org/) engine crates.\n\n[prelude](https://docs.rs/bevy/latest/bevy/prelude/index.html \"mod bevy::prelude\")\n    `use bevy::prelude::*;` to import common components, bundles, and plugins.\n\n[reflect](https://docs.rs/bevy/latest/bevy/reflect/index.html \"mod bevy::reflect\")\n    Reflection in Rust.\n\n[remote](https://docs.rs/bevy/latest/bevy/remote/index.html \"mod bevy::remote\")\n    An implementation of the Bevy Remote Protocol, to allow for remote control of a Bevy app.\n\n[render](https://docs.rs/bevy/latest/bevy/render/index.html \"mod bevy::render\")\n\n\n[scene](https://docs.rs/bevy/latest/bevy/scene/index.html \"mod bevy::scene\")\n    Provides scene definition, instantiation and serialization/deserialization.\n\n[sprite](https://docs.rs/bevy/latest/bevy/sprite/index.html \"mod bevy::sprite\")\n    Provides 2D sprite rendering functionality.\n\n[state](https://docs.rs/bevy/latest/bevy/state/index.html \"mod bevy::state\")\n    In Bevy, states are app-wide interdependent, finite state machines that are generally used to model the large scale structure of your program: whether a game is paused, if the player is in combat, if assets are loaded and so on.\n\n[tasks](https://docs.rs/bevy/latest/bevy/tasks/index.html \"mod bevy::tasks\")\n    Bevy Tasks\n\n[text](https://docs.rs/bevy/latest/bevy/text/index.html \"mod bevy::text\")\n    This crate provides the tools for positioning and rendering text in Bevy.\n\n[time](https://docs.rs/bevy/latest/bevy/time/index.html \"mod bevy::time\")\n    Bevy Time\n\n[transform](https://docs.rs/bevy/latest/bevy/transform/index.html \"mod bevy::transform\")\n    Bevy Transform\n\n[ui](https://docs.rs/bevy/latest/bevy/ui/index.html \"mod bevy::ui\")\n    This crate contains Bevy\u2019s UI system, which can be used to create UI for both 2D and 3D games\n\n[utils](https://docs.rs/bevy/latest/bevy/utils/index.html \"mod bevy::utils\")\n    General utilities for first-party [Bevy](https://bevyengine.org/) engine crates.\n\n[window](https://docs.rs/bevy/latest/bevy/window/index.html \"mod bevy::window\")\n    `bevy_window` provides a platform-agnostic interface for windowing in Bevy.\n\n[winit](https://docs.rs/bevy/latest/bevy/winit/index.html \"mod bevy::winit\")\n    `bevy_winit` provides utilities to handle window creation and the eventloop through [`winit`](https://docs.rs/winit/0.30.10/x86_64-unknown-linux-gnu/winit/index.html \"mod winit\")\n## Structs[\u00a7](https://docs.rs/bevy/latest/bevy/#structs)\n\n[DefaultPlugins](https://docs.rs/bevy/latest/bevy/struct.DefaultPlugins.html \"struct bevy::DefaultPlugins\")\n    This plugin group will add all the default plugins for a _Bevy_ application:\n\n[MinimalPlugins](https://docs.rs/bevy/latest/bevy/struct.MinimalPlugins.html \"struct bevy::MinimalPlugins\")\n    This plugin group will add the minimal plugins for a _Bevy_ application:\n",
        "markdown_with_citations": "[](https://docs.rs/bevy/latest/bevy/all.html \"show sidebar\")\n# Crate bevyCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![Bevy Logo\u27e84\u27e9](https://bevyengine.org)\nBevy is an open-source modular game engine built in Rust, with a focus on developer productivity and performance.\nCheck out the Bevy website\u27e85\u27e9 for more information, read the Quick Start Guide\u27e86\u27e9 for a step-by-step introduction, and engage with our community\u27e87\u27e9 if you have any questions or ideas!\n### \u00a7\u27e88\u27e9Example\nHere is a simple \u201cHello World\u201d Bevy app:\n```\nuse bevy::prelude::*;\nfn main() {\n  App::new()\n    .add_systems(Update, hello_world_system)\n    .run();\n}\nfn hello_world_system() {\n  println!(\"hello world\");\n}\n```\n\nDon\u2019t let the simplicity of the example above fool you. Bevy is a fully featured game engine\u27e85\u27e9 and it gets more powerful every day!\n### \u00a7\u27e89\u27e9This Crate\nThe `bevy` crate is just a container crate that makes it easier to consume Bevy subcrates. The defaults provide a \u201cfull\u201d engine experience, but you can easily enable / disable features in your project\u2019s `Cargo.toml` to meet your specific needs. See Bevy\u2019s `Cargo.toml` for a full list of features available.\nIf you prefer, you can also consume the individual bevy crates directly. Each module in the root of this crate, except for the prelude, can be found on crates.io with `bevy_` appended to the front, e.g. `app` -> `bevy_app`\u27e810\u27e9.\n### \u00a7\u27e811\u27e9Cargo Features\nBevy exposes many features to customize the engine. Enabling them add functionalities but often come at the cost of longer compilation times and extra dependencies.\n#### \u00a7\u27e812\u27e9Default Features\nThe default feature set enables most of the expected features of a game engine, like rendering in both 2D and 3D, asset loading, audio and UI. To help reduce compilation time, consider disabling default features and enabling only those you need.\nfeature name| description  \n---|---  \nandroid-game-activity| Android GameActivity support. Default, choose between this and `android-native-activity`.  \nandroid_shared_stdcxx| Enable using a shared stdlib for cxx on Android  \nanimation| Enable animation support, and glTF animation loading  \nasync_executor| Uses `async-executor` as a task execution backend.  \nbevy_animation| Provides animation functionality  \nbevy_asset| Provides asset functionality  \nbevy_audio| Provides audio functionality  \nbevy_color| Provides shared color types and operations  \nbevy_core_pipeline| Provides cameras and other basic render pipeline features  \nbevy_gilrs| Adds gamepad support  \nbevy_gizmos| Adds support for rendering gizmos  \nbevy_gltf| glTF\u27e813\u27e9 support  \nbevy_input_focus| Enable input focus subsystem  \nbevy_log| Enable integration with `tracing` and `log`  \nbevy_mesh_picking_backend| Provides an implementation for picking meshes  \nbevy_pbr| Adds PBR rendering  \nbevy_picking| Provides picking functionality  \nbevy_render| Provides rendering functionality  \nbevy_scene| Provides scene functionality  \nbevy_sprite| Provides sprite functionality  \nbevy_sprite_picking_backend| Provides an implementation for picking sprites  \nbevy_state| Enable built in global state machines  \nbevy_text| Provides text functionality  \nbevy_ui| A custom ECS-driven UI framework  \nbevy_ui_picking_backend| Provides an implementation for picking UI  \nbevy_window| Windowing layer  \nbevy_winit| winit window and input backend  \ncustom_cursor| Enable winit custom cursor support  \ndefault_font| Include a default font, containing only ASCII characters, at the cost of a 20kB binary size increase  \nhdr| HDR image format support  \nktx2| KTX2 compressed texture support  \nmulti_threaded| Enables multithreaded parallelism in the engine. Disabling it forces all engine tasks to run on a single thread.  \npng| PNG image format support  \nsmaa_luts| Include SMAA Look Up Tables KTX2 Files  \nstd| Allows access to the `std` crate.  \nsysinfo_plugin| Enables system information diagnostic plugin  \ntonemapping_luts| Include tonemapping Look Up Tables KTX2 files. If everything is pink, you need to enable this feature or change the `Tonemapping` method for your `Camera2d` or `Camera3d`.  \nvorbis| OGG/VORBIS audio format support  \nwebgl2| Enable some limitations to be able to use WebGL2. Please refer to the WebGL2 and WebGPU\u27e814\u27e9 section of the examples README for more information on how to run Wasm builds with WebGPU.  \nx11| X11 display server support  \nzstd| For KTX2 supercompression  \n#### \u00a7\u27e815\u27e9Optional Features\nfeature name| description  \n---|---  \naccesskit_unix| Enable AccessKit on Unix backends (currently only works with experimental screen readers and forks.)  \nandroid-native-activity| Android NativeActivity support. Legacy, should be avoided for most new Android games.  \nasset_processor| Enables the built-in asset processor for processed assets.  \nasync-io| Use async-io\u2019s implementation of block_on instead of futures-lite\u2019s implementation. This is preferred if your application uses async-io.  \nbasis-universal| Basis Universal compressed texture support  \nbevy_ci_testing| Enable systems that allow for automated testing on CI  \nbevy_debug_stepping| Enable stepping-based debugging of Bevy systems  \nbevy_dev_tools| Provides a collection of developer tools  \nbevy_image| Load and access image data. Usually added by an image format  \nbevy_remote| Enable the Bevy Remote Protocol  \nbevy_ui_debug| Provides a debug overlay for bevy UI  \nbmp| BMP image format support  \nconfigurable_error_handler| Use the configurable global error handler as the default error handler.  \ncritical-section| `critical-section` provides the building blocks for synchronization primitives on all platforms, including `no_std`.  \ndds| DDS compressed texture support  \ndebug_glam_assert| Enable assertions in debug builds to check the validity of parameters passed to glam  \ndefault_no_std| Recommended defaults for no_std applications  \ndetailed_trace| Enable detailed trace event logging. These trace events are expensive even when off, thus they require compile time opt-in  \ndynamic_linking| Force dynamic linking, which improves iterative compile times  \nembedded_watcher| Enables watching in memory asset providers for Bevy Asset hot-reloading  \nexperimental_pbr_pcss| Enable support for PCSS, at the risk of blowing past the global, per-shader sampler limit on older/lower-end GPUs  \nexr| EXR image format support  \nff| Farbfeld image format support  \nfile_watcher| Enables watching the filesystem for Bevy Asset hot-reloading  \nflac| FLAC audio format support  \nghost_nodes| Experimental support for nodes that are ignored for UI layouting  \ngif| GIF image format support  \nglam_assert| Enable assertions to check the validity of parameters passed to glam  \nico| ICO image format support  \njpeg| JPEG image format support  \nlibm| Uses the `libm` maths library instead of the one provided in `std` and `core`.  \nmeshlet| Enables the meshlet renderer for dense high-poly scenes (experimental)  \nmeshlet_processor| Enables processing meshes into meshlet meshes for bevy_pbr  \nminimp3| MP3 audio format support (through minimp3)  \nmp3| MP3 audio format support  \npbr_anisotropy_texture| Enable support for anisotropy texture in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs  \npbr_multi_layer_material_textures| Enable support for multi-layer material textures in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs  \npbr_specular_textures| Enable support for specular textures in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs  \npbr_transmission_textures| Enable support for transmission-related textures in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs  \npnm| PNM image format support, includes pam, pbm, pgm and ppm  \nqoi| QOI image format support  \nreflect_documentation| Enable documentation reflection  \nreflect_functions| Enable function reflection  \nserialize| Enable serialization support through serde  \nshader_format_glsl| Enable support for shaders in GLSL  \nshader_format_spirv| Enable support for shaders in SPIR-V  \nshader_format_wesl| Enable support for shaders in WESL  \nspirv_shader_passthrough| Enable passthrough loading for SPIR-V shaders (Only supported on Vulkan, shader capabilities and extensions must agree with the platform implementation)  \nstatically-linked-dxc| Statically linked DXC shader compiler for DirectX 12  \nsymphonia-aac| AAC audio format support (through symphonia)  \nsymphonia-all| AAC, FLAC, MP3, MP4, OGG/VORBIS, and WAV audio formats support (through symphonia)  \nsymphonia-flac| FLAC audio format support (through symphonia)  \nsymphonia-isomp4| MP4 audio format support (through symphonia)  \nsymphonia-vorbis| OGG/VORBIS audio format support (through symphonia)  \nsymphonia-wav| WAV audio format support (through symphonia)  \ntga| TGA image format support  \ntiff| TIFF image format support  \ntrace| Tracing support  \ntrace_chrome| Tracing support, saving a file in Chrome Tracing format  \ntrace_tracy| Tracing support, exposing a port for Tracy  \ntrace_tracy_memory| Tracing support, with memory profiling, exposing a port for Tracy  \ntrack_location| Enables source location tracking for change detection and spawning/despawning, which can assist with debugging  \nwav| WAV audio format support  \nwayland| Wayland display server support  \nweb| Enables use of browser APIs. Note this is currently only applicable on `wasm32` architectures.  \nwebgpu| Enable support for WebGPU in Wasm. When enabled, this feature will override the `webgl2` feature and you won\u2019t be able to run Wasm builds with WebGL2, only with WebGPU.  \nwebp| WebP image format support  \nzlib| For KTX2 supercompression  \n## Modules\u00a7\u27e816\u27e9\n\na11y\u27e817\u27e9\n    Accessibility for Bevy\n\nanimation\u27e818\u27e9\n    Animation for the game engine Bevy\n\napp\u27e819\u27e9\n    This crate is about everything concerning the highest-level, application layer of a Bevy app.\n\nasset\u27e820\u27e9\n    In the context of game development, an \u201casset\u201d is a piece of content that is loaded from disk and displayed in the game. Typically, these are authored by artists and designers (in contrast to code), are relatively large in size, and include everything from textures and models to sounds and music to levels and scripts.\n\naudio\u27e821\u27e9\n    Audio support for the game engine Bevy\n\ncolor\u27e822\u27e9\n    Representations of colors in various color spaces.\n\ncore_pipeline\u27e823\u27e9\n\n\ndev_tools\u27e824\u27e9\n    This crate provides additional utilities for the Bevy game engine\u27e85\u27e9, focused on improving developer experience.\n\ndiagnostic\u27e825\u27e9\n    This crate provides a straightforward solution for integrating diagnostics in the Bevy game engine\u27e826\u27e9. It allows users to easily add diagnostic functionality to their Bevy applications, enhancing their ability to monitor and optimize their game\u2019s.\n\necs\u27e827\u27e9\n    Bevy ECS\n\ngilrs\u27e828\u27e9\n    Systems and type definitions for gamepad handling in Bevy.\n\ngizmos\u27e829\u27e9\n    This crate adds an immediate mode drawing api to Bevy for visual debugging.\n\ngltf\u27e830\u27e9\n    Plugin providing an `AssetLoader`\u27e831\u27e9 and type definitions for loading glTF 2.0 (a standard 3D scene definition format) files in Bevy.\n\nimage\u27e832\u27e9\n\n\ninput\u27e833\u27e9\n    Input functionality for the Bevy game engine\u27e826\u27e9.\n\ninput_focus\u27e834\u27e9\n    A UI-centric focus system for Bevy.\n\nlog\u27e835\u27e9\n    This crate provides logging functions and configuration for Bevy\u27e85\u27e9 apps, and automatically configures platform specific log handlers (i.e. Wasm or Android).\n\nmath\u27e836\u27e9\n    Provides math types and functionality for the Bevy game engine.\n\npbr\u27e837\u27e9\n\n\npicking\u27e838\u27e9\n    This crate provides \u2018picking\u2019 capabilities for the Bevy game engine, allowing pointers to interact with entities using hover, click, and drag events.\n\nplatform\u27e839\u27e9\n    Platform compatibility support for first-party Bevy\u27e826\u27e9 engine crates.\n\nprelude\u27e840\u27e9\n    `use bevy::prelude::*;` to import common components, bundles, and plugins.\n\nreflect\u27e841\u27e9\n    Reflection in Rust.\n\nremote\u27e842\u27e9\n    An implementation of the Bevy Remote Protocol, to allow for remote control of a Bevy app.\n\nrender\u27e843\u27e9\n\n\nscene\u27e844\u27e9\n    Provides scene definition, instantiation and serialization/deserialization.\n\nsprite\u27e845\u27e9\n    Provides 2D sprite rendering functionality.\n\nstate\u27e846\u27e9\n    In Bevy, states are app-wide interdependent, finite state machines that are generally used to model the large scale structure of your program: whether a game is paused, if the player is in combat, if assets are loaded and so on.\n\ntasks\u27e847\u27e9\n    Bevy Tasks\n\ntext\u27e848\u27e9\n    This crate provides the tools for positioning and rendering text in Bevy.\n\ntime\u27e849\u27e9\n    Bevy Time\n\ntransform\u27e850\u27e9\n    Bevy Transform\n\nui\u27e851\u27e9\n    This crate contains Bevy\u2019s UI system, which can be used to create UI for both 2D and 3D games\n\nutils\u27e852\u27e9\n    General utilities for first-party Bevy\u27e826\u27e9 engine crates.\n\nwindow\u27e853\u27e9\n    `bevy_window` provides a platform-agnostic interface for windowing in Bevy.\n\nwinit\u27e854\u27e9\n    `bevy_winit` provides utilities to handle window creation and the eventloop through `winit`\u27e855\u27e9\n## Structs\u00a7\u27e856\u27e9\n\nDefaultPlugins\u27e857\u27e9\n    This plugin group will add all the default plugins for a _Bevy_ application:\n\nMinimalPlugins\u27e858\u27e9\n    This plugin group will add the minimal plugins for a _Bevy_ application:\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bevy/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bevy/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bevy/latest/src/bevy/lib.rs.html#1-58: Source\n\u27e84\u27e9 https://bevyengine.org/assets/bevy_logo_docs.svg: ![Bevy Logo\n\u27e85\u27e9 https://bevyengine.org: Bevy website\n\u27e86\u27e9 https://bevyengine.org/learn/quick-start/introduction: Quick Start Guide\n\u27e87\u27e9 https://bevyengine.org/community/: engage with our community\n\u27e88\u27e9 https://docs.rs/bevy/latest/bevy/#example: \u00a7\n\u27e89\u27e9 https://docs.rs/bevy/latest/bevy/#this-crate: \u00a7\n\u27e810\u27e9 https://docs.rs/bevy_app/*/bevy_app/: `bevy_app`\n\u27e811\u27e9 https://docs.rs/bevy/latest/bevy/#cargo-features: \u00a7\n\u27e812\u27e9 https://docs.rs/bevy/latest/bevy/#default-features: \u00a7\n\u27e813\u27e9 https://www.khronos.org/gltf/: glTF\n\u27e814\u27e9 https://github.com/bevyengine/bevy/tree/latest/examples#webgl2-and-webgpu: WebGL2 and WebGPU\n\u27e815\u27e9 https://docs.rs/bevy/latest/bevy/#optional-features: \u00a7\n\u27e816\u27e9 https://docs.rs/bevy/latest/bevy/#modules: \u00a7\n\u27e817\u27e9 https://docs.rs/bevy/latest/bevy/a11y/index.html: mod bevy::a11y - a11y\n\u27e818\u27e9 https://docs.rs/bevy/latest/bevy/animation/index.html: mod bevy::animation - animation\n\u27e819\u27e9 https://docs.rs/bevy/latest/bevy/app/index.html: mod bevy::app - app\n\u27e820\u27e9 https://docs.rs/bevy/latest/bevy/asset/index.html: mod bevy::asset - asset\n\u27e821\u27e9 https://docs.rs/bevy/latest/bevy/audio/index.html: mod bevy::audio - audio\n\u27e822\u27e9 https://docs.rs/bevy/latest/bevy/color/index.html: mod bevy::color - color\n\u27e823\u27e9 https://docs.rs/bevy/latest/bevy/core_pipeline/index.html: mod bevy::core_pipeline - core_pipeline\n\u27e824\u27e9 https://docs.rs/bevy/latest/bevy/dev_tools/index.html: mod bevy::dev_tools - dev_tools\n\u27e825\u27e9 https://docs.rs/bevy/latest/bevy/diagnostic/index.html: mod bevy::diagnostic - diagnostic\n\u27e826\u27e9 https://bevyengine.org/: Bevy game engine\n\u27e827\u27e9 https://docs.rs/bevy/latest/bevy/ecs/index.html: mod bevy::ecs - ecs\n\u27e828\u27e9 https://docs.rs/bevy/latest/bevy/gilrs/index.html: mod bevy::gilrs - gilrs\n\u27e829\u27e9 https://docs.rs/bevy/latest/bevy/gizmos/index.html: mod bevy::gizmos - gizmos\n\u27e830\u27e9 https://docs.rs/bevy/latest/bevy/gltf/index.html: mod bevy::gltf - gltf\n\u27e831\u27e9 https://docs.rs/bevy/latest/bevy/asset/trait.AssetLoader.html: trait bevy::asset::AssetLoader - `AssetLoader`\n\u27e832\u27e9 https://docs.rs/bevy/latest/bevy/image/index.html: mod bevy::image - image\n\u27e833\u27e9 https://docs.rs/bevy/latest/bevy/input/index.html: mod bevy::input - input\n\u27e834\u27e9 https://docs.rs/bevy/latest/bevy/input_focus/index.html: mod bevy::input_focus - input_focus\n\u27e835\u27e9 https://docs.rs/bevy/latest/bevy/log/index.html: mod bevy::log - log\n\u27e836\u27e9 https://docs.rs/bevy/latest/bevy/math/index.html: mod bevy::math - math\n\u27e837\u27e9 https://docs.rs/bevy/latest/bevy/pbr/index.html: mod bevy::pbr - pbr\n\u27e838\u27e9 https://docs.rs/bevy/latest/bevy/picking/index.html: mod bevy::picking - picking\n\u27e839\u27e9 https://docs.rs/bevy/latest/bevy/platform/index.html: mod bevy::platform - platform\n\u27e840\u27e9 https://docs.rs/bevy/latest/bevy/prelude/index.html: mod bevy::prelude - prelude\n\u27e841\u27e9 https://docs.rs/bevy/latest/bevy/reflect/index.html: mod bevy::reflect - reflect\n\u27e842\u27e9 https://docs.rs/bevy/latest/bevy/remote/index.html: mod bevy::remote - remote\n\u27e843\u27e9 https://docs.rs/bevy/latest/bevy/render/index.html: mod bevy::render - render\n\u27e844\u27e9 https://docs.rs/bevy/latest/bevy/scene/index.html: mod bevy::scene - scene\n\u27e845\u27e9 https://docs.rs/bevy/latest/bevy/sprite/index.html: mod bevy::sprite - sprite\n\u27e846\u27e9 https://docs.rs/bevy/latest/bevy/state/index.html: mod bevy::state - state\n\u27e847\u27e9 https://docs.rs/bevy/latest/bevy/tasks/index.html: mod bevy::tasks - tasks\n\u27e848\u27e9 https://docs.rs/bevy/latest/bevy/text/index.html: mod bevy::text - text\n\u27e849\u27e9 https://docs.rs/bevy/latest/bevy/time/index.html: mod bevy::time - time\n\u27e850\u27e9 https://docs.rs/bevy/latest/bevy/transform/index.html: mod bevy::transform - transform\n\u27e851\u27e9 https://docs.rs/bevy/latest/bevy/ui/index.html: mod bevy::ui - ui\n\u27e852\u27e9 https://docs.rs/bevy/latest/bevy/utils/index.html: mod bevy::utils - utils\n\u27e853\u27e9 https://docs.rs/bevy/latest/bevy/window/index.html: mod bevy::window - window\n\u27e854\u27e9 https://docs.rs/bevy/latest/bevy/winit/index.html: mod bevy::winit - winit\n\u27e855\u27e9 https://docs.rs/winit/0.30.10/x86_64-unknown-linux-gnu/winit/index.html: mod winit - `winit`\n\u27e856\u27e9 https://docs.rs/bevy/latest/bevy/#structs: \u00a7\n\u27e857\u27e9 https://docs.rs/bevy/latest/bevy/struct.DefaultPlugins.html: struct bevy::DefaultPlugins - DefaultPlugins\n\u27e858\u27e9 https://docs.rs/bevy/latest/bevy/struct.MinimalPlugins.html: struct bevy::MinimalPlugins - MinimalPlugins\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `bevy` crate is a modular, open-source game engine built in Rust, emphasizing developer productivity and performance. It provides a full-featured engine experience with support for 2D/3D rendering, asset management, audio, UI, animation, and an ECS-based architecture. Bevy is highly customizable, offering numerous optional features and plugins to tailor functionality for specific project needs.",
    "feature_summary": null,
    "use_case": "Unknown",
    "score": 9.0,
    "factual_counterfactual": "### Pair 1: Game Engine Features  \n\u2705 **Factual:** Bevy supports both 2D and 3D rendering out of the box, providing a modular architecture for game development.  \n\u274c **Counterfactual:** Bevy is exclusively a 2D game engine and does not support 3D rendering capabilities.  \n\n---\n\n### Pair 2: Plugin System  \n\u2705 **Factual:** Bevy's `DefaultPlugins` group includes essential features such as rendering, input handling, and asset management, making it suitable for most game development scenarios.  \n\u274c **Counterfactual:** Bevy requires developers to manually configure every plugin, as it does not provide a default plugin group for common functionalities.  \n\n---\n\n### Pair 3: Multithreading Support  \n\u2705 **Factual:** Bevy supports multithreaded parallelism, allowing game systems to execute efficiently across multiple threads for improved performance.  \n\u274c **Counterfactual:** Bevy does not support multithreading, and all game systems must run sequentially on a single thread.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}