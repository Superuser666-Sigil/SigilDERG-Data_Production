{
    "name": "kiss3d",
    "version": "0.35.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/kiss3d/latest/kiss3d/all.html \"show sidebar\")\n# Crate kiss3dCopy item path\n[Settings](https://docs.rs/kiss3d/latest/settings.html)\n[Help](https://docs.rs/kiss3d/latest/help.html)\nSummary[Source](https://docs.rs/kiss3d/latest/src/kiss3d/lib.rs.html#1-172)\nExpand description\n## [\u00a7](https://docs.rs/kiss3d/latest/kiss3d/#kiss3d)Kiss3d\nKeep It Simple, Stupid 3d graphics engine.\nThis library is born from the frustration in front of the fact that today\u2019s 3D graphics library are:\n  * either too low level: you have to write your own shaders and opening a window steals you 8 hours, 300 lines of code and 10L of coffee.\n  * or high level but too hard to understand/use: those are libraries made to write beautiful animations or games. They have a lot of feature; too much feature if you only want to draw a few geometries on the screen.\n\n\n**kiss3d** is not designed to be feature-complete or fast. It is designed to be able to draw simple geometric figures and play with them with one-liners.\nAn on-line version of this documentation is available [here](http://kiss3d.org).\n### [\u00a7](https://docs.rs/kiss3d/latest/kiss3d/#features)Features\nMost features are one-liners.\n  * WASM compatibility.\n  * open a window with a default arc-ball camera and a point light.\n  * a first-person camera is available too and user-defined cameras are possible.\n  * display boxes, spheres, cones, cylinders, quads and lines.\n  * change an object color or texture.\n  * change an object transform (we use the [nalgebra](http://nalgebra.org) library to do that).\n  * create basic post-processing effects.\n\n\nAs an example, having a red, rotating cube with the light attached to the camera is as simple as (NOTE: this will **not** compile when targeting WASM):\n```\nextern crate kiss3d;\nextern crate nalgebra as na;\nuse na::{Vector3, UnitQuaternion};\nuse kiss3d::window::Window;\nuse kiss3d::light::Light;\nfn main() {\n  let mut window = Window::new(\"Kiss3d: cube\");\n  let mut c   = window.add_cube(1.0, 1.0, 1.0);\n  c.set_color(1.0, 0.0, 0.0);\n  window.set_light(Light::StickToCamera);\n  let rot = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), 0.014);\n  while window.render() {\n    c.prepend_to_local_rotation(&rot);\n  }\n}\n```\n\nThe same example, but that will compile for both WASM and native platforms is slightly more complicated because **kiss3d** must control the render loop:\n```\nextern crate kiss3d;\nextern crate nalgebra as na;\nuse kiss3d::light::Light;\nuse kiss3d::scene::SceneNode;\nuse kiss3d::window::{State, Window};\nuse na::{UnitQuaternion, Vector3};\nstruct AppState {\n  c: SceneNode,\n  rot: UnitQuaternion<f32>,\n}\nimpl State for AppState {\n  fn step(&mut self, _: &mut Window) {\n    self.c.prepend_to_local_rotation(&self.rot)\n  }\n}\nfn main() {\n  let mut window = Window::new(\"Kiss3d: wasm example\");\n  let mut c = window.add_cube(1.0, 1.0, 1.0);\n  c.set_color(1.0, 0.0, 0.0);\n  window.set_light(Light::StickToCamera);\n  let rot = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), 0.014);\n  let state = AppState { c, rot };\n  window.render_loop(state)\n}\n```\n\nSome controls are handled by default by the engine (they can be overridden by the user):\n  * `scroll`: zoom in / zoom out.\n  * `left click + drag`: look around.\n  * `right click + drag`: translate the view point.\n  * `enter`: look at the origin (0.0, 0.0, 0.0).\n\n\n### [\u00a7](https://docs.rs/kiss3d/latest/kiss3d/#compilation)Compilation\nYou will need the last stable build of the [rust compiler](http://www.rust-lang.org) and the official package manager: [cargo](https://github.com/rust-lang/cargo).\nSimply add the following to your `Cargo.toml` file:\n```\n[dependencies]\nkiss3d = \"0.24\"\n```\n\n### [\u00a7](https://docs.rs/kiss3d/latest/kiss3d/#contributions)Contributions\nI\u2019d love to see people improving this library for their own needs. However, keep in mind that **kiss3d** is KISS. One-liner features (from the user point of view) are preferred.\n### [\u00a7](https://docs.rs/kiss3d/latest/kiss3d/#acknowledgements)Acknowledgements\nThanks to all the Rustaceans for their help, and their OpenGL bindings.\n## Re-exports[\u00a7](https://docs.rs/kiss3d/latest/kiss3d/#reexports)\n\n`pub use crate::renderer::line_renderer[](https://docs.rs/kiss3d/latest/kiss3d/renderer/line_renderer/index.html \"mod kiss3d::renderer::line_renderer\");`\n\n\n`pub use crate::renderer::point_renderer[](https://docs.rs/kiss3d/latest/kiss3d/renderer/point_renderer/index.html \"mod kiss3d::renderer::point_renderer\");`\n\n\n`pub use nalgebra[](https://docs.rs/nalgebra/0.30.1/x86_64-unknown-linux-gnu/nalgebra/index.html \"mod nalgebra\");`\n\n\n`pub use ncollide3d[](https://docs.rs/ncollide3d/0.33.0/x86_64-unknown-linux-gnu/ncollide3d/index.html \"mod ncollide3d\");`\n\n## Modules[\u00a7](https://docs.rs/kiss3d/latest/kiss3d/#modules)\n\n[builtin](https://docs.rs/kiss3d/latest/kiss3d/builtin/index.html \"mod kiss3d::builtin\")\n    Built-in geometries, shaders and effects.\n\n[camera](https://docs.rs/kiss3d/latest/kiss3d/camera/index.html \"mod kiss3d::camera\")\n    Camera trait with some common implementations.\n\n[context](https://docs.rs/kiss3d/latest/kiss3d/context/index.html \"mod kiss3d::context\")\n    Abstractions over OpenGL/WebGL contexts.\n\n[event](https://docs.rs/kiss3d/latest/kiss3d/event/index.html \"mod kiss3d::event\")\n    Window event handling.\n\n[light](https://docs.rs/kiss3d/latest/kiss3d/light/index.html \"mod kiss3d::light\")\n    Lights.\n\n[loader](https://docs.rs/kiss3d/latest/kiss3d/loader/index.html \"mod kiss3d::loader\")\n    File loading.\n\n[planar_camera](https://docs.rs/kiss3d/latest/kiss3d/planar_camera/index.html \"mod kiss3d::planar_camera\")\n    Cameras for 2D rendering.\n\n[planar_line_renderer](https://docs.rs/kiss3d/latest/kiss3d/planar_line_renderer/index.html \"mod kiss3d::planar_line_renderer\")\n    A batched line renderer.\n\n[post_processing](https://docs.rs/kiss3d/latest/kiss3d/post_processing/index.html \"mod kiss3d::post_processing\")\n    Post-processing effects.\n\n[renderer](https://docs.rs/kiss3d/latest/kiss3d/renderer/index.html \"mod kiss3d::renderer\")\n    Structures responsible for rendering elements other than kiss3d\u2019s meshes.\n\n[resource](https://docs.rs/kiss3d/latest/kiss3d/resource/index.html \"mod kiss3d::resource\")\n    GPU resource managers\n\n[scene](https://docs.rs/kiss3d/latest/kiss3d/scene/index.html \"mod kiss3d::scene\")\n    Everything related to the scene graph.\n\n[text](https://docs.rs/kiss3d/latest/kiss3d/text/index.html \"mod kiss3d::text\")\n    Text rendering.\n\n[window](https://docs.rs/kiss3d/latest/kiss3d/window/index.html \"mod kiss3d::window\")\n    The window, and things to handle the rendering loop and events.\n",
        "markdown_with_citations": "[](https://docs.rs/kiss3d/latest/kiss3d/all.html \"show sidebar\")\n# Crate kiss3dCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Kiss3d\nKeep It Simple, Stupid 3d graphics engine.\nThis library is born from the frustration in front of the fact that today\u2019s 3D graphics library are:\n  * either too low level: you have to write your own shaders and opening a window steals you 8 hours, 300 lines of code and 10L of coffee.\n  * or high level but too hard to understand/use: those are libraries made to write beautiful animations or games. They have a lot of feature; too much feature if you only want to draw a few geometries on the screen.\n\n\n**kiss3d** is not designed to be feature-complete or fast. It is designed to be able to draw simple geometric figures and play with them with one-liners.\nAn on-line version of this documentation is available here\u27e85\u27e9.\n### \u00a7\u27e86\u27e9Features\nMost features are one-liners.\n  * WASM compatibility.\n  * open a window with a default arc-ball camera and a point light.\n  * a first-person camera is available too and user-defined cameras are possible.\n  * display boxes, spheres, cones, cylinders, quads and lines.\n  * change an object color or texture.\n  * change an object transform (we use the nalgebra\u27e87\u27e9 library to do that).\n  * create basic post-processing effects.\n\n\nAs an example, having a red, rotating cube with the light attached to the camera is as simple as (NOTE: this will **not** compile when targeting WASM):\n```\nextern crate kiss3d;\nextern crate nalgebra as na;\nuse na::{Vector3, UnitQuaternion};\nuse kiss3d::window::Window;\nuse kiss3d::light::Light;\nfn main() {\n  let mut window = Window::new(\"Kiss3d: cube\");\n  let mut c   = window.add_cube(1.0, 1.0, 1.0);\n  c.set_color(1.0, 0.0, 0.0);\n  window.set_light(Light::StickToCamera);\n  let rot = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), 0.014);\n  while window.render() {\n    c.prepend_to_local_rotation(&rot);\n  }\n}\n```\n\nThe same example, but that will compile for both WASM and native platforms is slightly more complicated because **kiss3d** must control the render loop:\n```\nextern crate kiss3d;\nextern crate nalgebra as na;\nuse kiss3d::light::Light;\nuse kiss3d::scene::SceneNode;\nuse kiss3d::window::{State, Window};\nuse na::{UnitQuaternion, Vector3};\nstruct AppState {\n  c: SceneNode,\n  rot: UnitQuaternion<f32>,\n}\nimpl State for AppState {\n  fn step(&mut self, _: &mut Window) {\n    self.c.prepend_to_local_rotation(&self.rot)\n  }\n}\nfn main() {\n  let mut window = Window::new(\"Kiss3d: wasm example\");\n  let mut c = window.add_cube(1.0, 1.0, 1.0);\n  c.set_color(1.0, 0.0, 0.0);\n  window.set_light(Light::StickToCamera);\n  let rot = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), 0.014);\n  let state = AppState { c, rot };\n  window.render_loop(state)\n}\n```\n\nSome controls are handled by default by the engine (they can be overridden by the user):\n  * `scroll`: zoom in / zoom out.\n  * `left click + drag`: look around.\n  * `right click + drag`: translate the view point.\n  * `enter`: look at the origin (0.0, 0.0, 0.0).\n\n\n### \u00a7\u27e88\u27e9Compilation\nYou will need the last stable build of the rust compiler\u27e89\u27e9 and the official package manager: cargo\u27e810\u27e9.\nSimply add the following to your `Cargo.toml` file:\n```\n[dependencies]\nkiss3d = \"0.24\"\n```\n\n### \u00a7\u27e811\u27e9Contributions\nI\u2019d love to see people improving this library for their own needs. However, keep in mind that **kiss3d** is KISS. One-liner features (from the user point of view) are preferred.\n### \u00a7\u27e812\u27e9Acknowledgements\nThanks to all the Rustaceans for their help, and their OpenGL bindings.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use crate::renderer::line_renderer[](https://docs.rs/kiss3d/latest/kiss3d/renderer/line_renderer/index.html \"mod kiss3d::renderer::line_renderer\");`\n\n\n`pub use crate::renderer::point_renderer[](https://docs.rs/kiss3d/latest/kiss3d/renderer/point_renderer/index.html \"mod kiss3d::renderer::point_renderer\");`\n\n\n`pub use nalgebra[](https://docs.rs/nalgebra/0.30.1/x86_64-unknown-linux-gnu/nalgebra/index.html \"mod nalgebra\");`\n\n\n`pub use ncollide3d[](https://docs.rs/ncollide3d/0.33.0/x86_64-unknown-linux-gnu/ncollide3d/index.html \"mod ncollide3d\");`\n\n## Modules\u00a7\u27e814\u27e9\n\nbuiltin\u27e815\u27e9\n    Built-in geometries, shaders and effects.\n\ncamera\u27e816\u27e9\n    Camera trait with some common implementations.\n\ncontext\u27e817\u27e9\n    Abstractions over OpenGL/WebGL contexts.\n\nevent\u27e818\u27e9\n    Window event handling.\n\nlight\u27e819\u27e9\n    Lights.\n\nloader\u27e820\u27e9\n    File loading.\n\nplanar_camera\u27e821\u27e9\n    Cameras for 2D rendering.\n\nplanar_line_renderer\u27e822\u27e9\n    A batched line renderer.\n\npost_processing\u27e823\u27e9\n    Post-processing effects.\n\nrenderer\u27e824\u27e9\n    Structures responsible for rendering elements other than kiss3d\u2019s meshes.\n\nresource\u27e825\u27e9\n    GPU resource managers\n\nscene\u27e826\u27e9\n    Everything related to the scene graph.\n\ntext\u27e827\u27e9\n    Text rendering.\n\nwindow\u27e828\u27e9\n    The window, and things to handle the rendering loop and events.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/kiss3d/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/kiss3d/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/kiss3d/latest/src/kiss3d/lib.rs.html#1-172: Source\n\u27e84\u27e9 https://docs.rs/kiss3d/latest/kiss3d/#kiss3d: \u00a7\n\u27e85\u27e9 http://kiss3d.org: here\n\u27e86\u27e9 https://docs.rs/kiss3d/latest/kiss3d/#features: \u00a7\n\u27e87\u27e9 http://nalgebra.org: nalgebra\n\u27e88\u27e9 https://docs.rs/kiss3d/latest/kiss3d/#compilation: \u00a7\n\u27e89\u27e9 http://www.rust-lang.org: rust compiler\n\u27e810\u27e9 https://github.com/rust-lang/cargo: cargo\n\u27e811\u27e9 https://docs.rs/kiss3d/latest/kiss3d/#contributions: \u00a7\n\u27e812\u27e9 https://docs.rs/kiss3d/latest/kiss3d/#acknowledgements: \u00a7\n\u27e813\u27e9 https://docs.rs/kiss3d/latest/kiss3d/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/kiss3d/latest/kiss3d/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/kiss3d/latest/kiss3d/builtin/index.html: mod kiss3d::builtin - builtin\n\u27e816\u27e9 https://docs.rs/kiss3d/latest/kiss3d/camera/index.html: mod kiss3d::camera - camera\n\u27e817\u27e9 https://docs.rs/kiss3d/latest/kiss3d/context/index.html: mod kiss3d::context - context\n\u27e818\u27e9 https://docs.rs/kiss3d/latest/kiss3d/event/index.html: mod kiss3d::event - event\n\u27e819\u27e9 https://docs.rs/kiss3d/latest/kiss3d/light/index.html: mod kiss3d::light - light\n\u27e820\u27e9 https://docs.rs/kiss3d/latest/kiss3d/loader/index.html: mod kiss3d::loader - loader\n\u27e821\u27e9 https://docs.rs/kiss3d/latest/kiss3d/planar_camera/index.html: mod kiss3d::planar_camera - planar_camera\n\u27e822\u27e9 https://docs.rs/kiss3d/latest/kiss3d/planar_line_renderer/index.html: mod kiss3d::planar_line_renderer - planar_line_renderer\n\u27e823\u27e9 https://docs.rs/kiss3d/latest/kiss3d/post_processing/index.html: mod kiss3d::post_processing - post_processing\n\u27e824\u27e9 https://docs.rs/kiss3d/latest/kiss3d/renderer/index.html: mod kiss3d::renderer - renderer\n\u27e825\u27e9 https://docs.rs/kiss3d/latest/kiss3d/resource/index.html: mod kiss3d::resource - resource\n\u27e826\u27e9 https://docs.rs/kiss3d/latest/kiss3d/scene/index.html: mod kiss3d::scene - scene\n\u27e827\u27e9 https://docs.rs/kiss3d/latest/kiss3d/text/index.html: mod kiss3d::text - text\n\u27e828\u27e9 https://docs.rs/kiss3d/latest/kiss3d/window/index.html: mod kiss3d::window - window\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `kiss3d` crate is a lightweight 3D graphics engine designed for simplicity, enabling users to render basic geometric shapes and manipulate them with minimal code. Key features include WASM compatibility, built-in cameras (arc-ball, first-person, or user-defined), support for rendering boxes, spheres, cones, and lines, object color/texture manipulation, transformations via `nalgebra`, and basic post-processing effects. It prioritizes ease of use with one-liner functionalities and is ideal for quick visualizations rather than complex or high-performance applications.",
    "feature_summary": null,
    "use_case": "Unknown",
    "score": 6.5,
    "factual_counterfactual": "### Pair 1: WASM Compatibility  \n\u2705 Factual: The `kiss3d` crate supports WebAssembly (WASM) compatibility, allowing users to create 3D graphics applications that run in web browsers.  \n\u274c Counterfactual: The `kiss3d` crate does not support WebAssembly (WASM) compatibility, making it unsuitable for web-based applications.  \n\n---\n\n### Pair 2: Camera Features  \n\u2705 Factual: `kiss3d` provides a default arc-ball camera and a first-person camera, with the option for users to define custom camera implementations.  \n\u274c Counterfactual: `kiss3d` only supports a single camera type, limiting its flexibility for different use cases.  \n\n---\n\n### Pair 3: Performance Characteristics  \n\u2705 Factual: `kiss3d` is not optimized for performance or feature completeness; it is designed to be simple and suitable for basic 3D graphics tasks.  \n\u274c Counterfactual: `kiss3d` is a high-performance 3D graphics engine optimized for complex game development and large-scale simulations.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}