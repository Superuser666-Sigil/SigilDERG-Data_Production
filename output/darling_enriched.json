{
    "name": "darling",
    "version": "0.20.11",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/darling/latest/darling/all.html \"show sidebar\")\n# Crate darlingCopy item path\n[Settings](https://docs.rs/darling/latest/settings.html)\n[Help](https://docs.rs/darling/latest/help.html)\nSummary[Source](https://docs.rs/darling/latest/src/darling/lib.rs.html#1-117)\nExpand description\n## [\u00a7](https://docs.rs/darling/latest/darling/#darling)Darling\nDarling is a tool for declarative attribute parsing in proc macro implementations.\n### [\u00a7](https://docs.rs/darling/latest/darling/#design)Design\nDarling takes considerable design inspiration from [`serde`](https://serde.rs). A data structure that can be read from any attribute implements `FromMeta` (or has an implementation automatically generated using `derive`). Any crate can provide `FromMeta` implementations, even one not specifically geared towards proc-macro authors.\nProc-macro crates should provide their own structs which implement or derive `FromDeriveInput`, `FromField`, `FromVariant`, `FromGenerics`, _et alia_ to gather settings relevant to their operation.\n### [\u00a7](https://docs.rs/darling/latest/darling/#attributes)Attributes\nThere are a number of attributes that `darling` exposes to enable finer-grained control over the code it generates.\n  * **Field renaming** : You can use `#[darling(rename=\"new_name\")]` on a field to change the name Darling looks for. You can also use `#[darling(rename_all=\"...\")]` at the struct or enum level to apply a casing rule to all fields or variants.\n  * **Map function** : You can use `#[darling(map=\"path::to::function\")]` to run code on a field before its stored in the struct.\n  * **Default values** : You can use `#[darling(default)]` at the type or field level to use that type\u2019s default value to fill in values not specified by the caller.\n  * **Skipped fields** : You can skip a variant or field using `#[darling(skip)]`. Fields marked with this will fall back to `Default::default()` for their value, but you can override that with an explicit default or a value from the type-level default.\n  * **Custom shorthand** : Use `#[darling(from_word = ...)]` on a struct or enum to override how a simple word is interpreted. By default, it is an error for your macro\u2019s user to fail to specify the fields of your struct, but with this you can choose to instead produce a set of default values. This takes either a path or a closure whose signature matches `FromMeta::from_word`.\n  * **Custom handling for missing fields** : When a field is not present and `#[darling(default)]` is not used, derived impls will call `FromMeta::from_none` on that field\u2019s type to try and get the fallback value for the field. Usually, there is not a fallback value, so a missing field error is generated. `Option<T: FromMeta>` uses this to make options optional without requiring `#[darling(default)]` declarations, and structs and enums can use this themselves with `#[darling(from_none = ...)]`. This takes either a path or a closure whose signature matches `FromMeta::from_none`.\n\n\n### [\u00a7](https://docs.rs/darling/latest/darling/#forwarded-fields)Forwarded Fields\nAll derivable traits except `FromMeta` support forwarding some fields from the input AST to the derived struct. These fields are matched up by identifier **before** `rename` attribute values are considered, allowing you to use their names for your own properties. The deriving struct is responsible for making sure the types of fields it chooses to declare are compatible with this table.\nA deriving struct is free to include or exclude any of the fields below.\n#### [\u00a7](https://docs.rs/darling/latest/darling/#fromderiveinput)`FromDeriveInput`\nField name| Type| Meaning  \n---|---|---  \n`ident`| `syn::Ident`| The identifier of the passed-in type  \n`vis`| `syn::Visibility`| The visibility of the passed-in type  \n`generics`| `T: darling::FromGenerics`| The generics of the passed-in type. This can be `syn::Generics`, `darling::ast::Generics`, or any compatible type.  \n`data` (or anything, using `#[darling(with = ...)]`)| `darling::ast::Data`| The body of the passed-in type  \n`attrs`| `Vec<syn::Attribute>` (or anything, using `#[darling(with = ...)]`)| The forwarded attributes from the passed in type. These are controlled using the `forward_attrs` attribute.  \n#### [\u00a7](https://docs.rs/darling/latest/darling/#fromfield)`FromField`\nField name| Type| Meaning  \n---|---|---  \n`ident`| `Option<syn::Ident>`| The identifier of the passed-in field, or `None` for tuple fields  \n`vis`| `syn::Visibility`| The visibility of the passed-in field  \n`ty`| `syn::Type`| The type of the passed-in field  \n`attrs`| `Vec<syn::Attribute>` (or anything, using `#[darling(with = ...)]`)| The forwarded attributes from the passed in field. These are controlled using the `forward_attrs` attribute.  \n#### [\u00a7](https://docs.rs/darling/latest/darling/#fromtypeparam)`FromTypeParam`\nField name| Type| Meaning  \n---|---|---  \n`ident`| `syn::Ident`| The identifier of the passed-in type param  \n`bounds`| `Vec<syn::TypeParamBound>`| The bounds applied to the type param  \n`default`| `Option<syn::Type>`| The default type of the parameter, if one exists  \n`attrs`| `Vec<syn::Attribute>` (or anything, using `#[darling(with = ...)]`)| The forwarded attributes from the passed in type param. These are controlled using the `forward_attrs` attribute.  \n#### [\u00a7](https://docs.rs/darling/latest/darling/#fromvariant)`FromVariant`\nField name| Type| Meaning  \n---|---|---  \n`ident`| `syn::Ident`| The identifier of the passed-in variant  \n`discriminant`| `Option<syn::Expr>`| For a variant such as `Example = 2`, the `2`  \n`fields`| `darling::ast::Fields<T> where T: FromField`| The fields associated with the variant  \n`attrs`| `Vec<syn::Attribute>` (or anything, using `#[darling(with = ...)]`)| The forwarded attributes from the passed in variant. These are controlled using the `forward_attrs` attribute.  \n## Modules[\u00a7](https://docs.rs/darling/latest/darling/#modules)\n\n[ast](https://docs.rs/darling/latest/darling/ast/index.html \"mod darling::ast\")\n    Utility types for working with the AST.\n\n[error](https://docs.rs/darling/latest/darling/error/index.html \"mod darling::error\")\n    The `darling::Error` type, the multiple error `Accumulator`, and their internals.\n\n[usage](https://docs.rs/darling/latest/darling/usage/index.html \"mod darling::usage\")\n    Traits and types used for tracking the usage of generic parameters through a proc-macro input.\n\n[util](https://docs.rs/darling/latest/darling/util/index.html \"mod darling::util\")\n    Utility types for attribute parsing.\n## Macros[\u00a7](https://docs.rs/darling/latest/darling/#macros)\n\n[uses_lifetimes](https://docs.rs/darling/latest/darling/macro.uses_lifetimes.html \"macro darling::uses_lifetimes\")\n    Generator for `UsesLifetimes` impls that unions the used lifetimes of the selected fields.\n\n[uses_type_params](https://docs.rs/darling/latest/darling/macro.uses_type_params.html \"macro darling::uses_type_params\")\n    Generator for `UsesTypeParam` impls that unions the used type parameters of the selected fields.\n## Structs[\u00a7](https://docs.rs/darling/latest/darling/#structs)\n\n[Error](https://docs.rs/darling/latest/darling/struct.Error.html \"struct darling::Error\")\n    An error encountered during attribute parsing.\n## Traits[\u00a7](https://docs.rs/darling/latest/darling/#traits)\n\n[FromAttributes](https://docs.rs/darling/latest/darling/trait.FromAttributes.html \"trait darling::FromAttributes\")\n    Create an instance by parsing a list of attributes.\n\n[FromDeriveInput](https://docs.rs/darling/latest/darling/trait.FromDeriveInput.html \"trait darling::FromDeriveInput\")\n    Creates an instance by parsing an entire proc-macro `derive` input, including the, identity, generics, and visibility of the type.\n\n[FromField](https://docs.rs/darling/latest/darling/trait.FromField.html \"trait darling::FromField\")\n    Creates an instance by parsing an individual field and its attributes.\n\n[FromGenericParam](https://docs.rs/darling/latest/darling/trait.FromGenericParam.html \"trait darling::FromGenericParam\")\n    Creates an instance by parsing a specific `syn::GenericParam`. This can be a type param, a lifetime, or a const param.\n\n[FromGenerics](https://docs.rs/darling/latest/darling/trait.FromGenerics.html \"trait darling::FromGenerics\")\n    Creates an instance by parsing an entire generics declaration, including the `where` clause.\n\n[FromMeta](https://docs.rs/darling/latest/darling/trait.FromMeta.html \"trait darling::FromMeta\")\n    Create an instance from an item in an attribute declaration.\n\n[FromTypeParam](https://docs.rs/darling/latest/darling/trait.FromTypeParam.html \"trait darling::FromTypeParam\")\n    Creates an instance by parsing an individual type_param and its attributes.\n\n[FromVariant](https://docs.rs/darling/latest/darling/trait.FromVariant.html \"trait darling::FromVariant\")\n    Creates an instance from a specified `syn::Variant`.\n## Type Aliases[\u00a7](https://docs.rs/darling/latest/darling/#types)\n\n[Result](https://docs.rs/darling/latest/darling/type.Result.html \"type darling::Result\")\n    An alias of `Result` specific to attribute parsing.\n",
        "markdown_with_citations": "[](https://docs.rs/darling/latest/darling/all.html \"show sidebar\")\n# Crate darlingCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Darling\nDarling is a tool for declarative attribute parsing in proc macro implementations.\n### \u00a7\u27e85\u27e9Design\nDarling takes considerable design inspiration from `serde`\u27e86\u27e9. A data structure that can be read from any attribute implements `FromMeta` (or has an implementation automatically generated using `derive`). Any crate can provide `FromMeta` implementations, even one not specifically geared towards proc-macro authors.\nProc-macro crates should provide their own structs which implement or derive `FromDeriveInput`, `FromField`, `FromVariant`, `FromGenerics`, _et alia_ to gather settings relevant to their operation.\n### \u00a7\u27e87\u27e9Attributes\nThere are a number of attributes that `darling` exposes to enable finer-grained control over the code it generates.\n  * **Field renaming** : You can use `#[darling(rename=\"new_name\")]` on a field to change the name Darling looks for. You can also use `#[darling(rename_all=\"...\")]` at the struct or enum level to apply a casing rule to all fields or variants.\n  * **Map function** : You can use `#[darling(map=\"path::to::function\")]` to run code on a field before its stored in the struct.\n  * **Default values** : You can use `#[darling(default)]` at the type or field level to use that type\u2019s default value to fill in values not specified by the caller.\n  * **Skipped fields** : You can skip a variant or field using `#[darling(skip)]`. Fields marked with this will fall back to `Default::default()` for their value, but you can override that with an explicit default or a value from the type-level default.\n  * **Custom shorthand** : Use `#[darling(from_word = ...)]` on a struct or enum to override how a simple word is interpreted. By default, it is an error for your macro\u2019s user to fail to specify the fields of your struct, but with this you can choose to instead produce a set of default values. This takes either a path or a closure whose signature matches `FromMeta::from_word`.\n  * **Custom handling for missing fields** : When a field is not present and `#[darling(default)]` is not used, derived impls will call `FromMeta::from_none` on that field\u2019s type to try and get the fallback value for the field. Usually, there is not a fallback value, so a missing field error is generated. `Option<T: FromMeta>` uses this to make options optional without requiring `#[darling(default)]` declarations, and structs and enums can use this themselves with `#[darling(from_none = ...)]`. This takes either a path or a closure whose signature matches `FromMeta::from_none`.\n\n\n### \u00a7\u27e88\u27e9Forwarded Fields\nAll derivable traits except `FromMeta` support forwarding some fields from the input AST to the derived struct. These fields are matched up by identifier **before** `rename` attribute values are considered, allowing you to use their names for your own properties. The deriving struct is responsible for making sure the types of fields it chooses to declare are compatible with this table.\nA deriving struct is free to include or exclude any of the fields below.\n#### \u00a7\u27e89\u27e9`FromDeriveInput`\nField name| Type| Meaning  \n---|---|---  \n`ident`| `syn::Ident`| The identifier of the passed-in type  \n`vis`| `syn::Visibility`| The visibility of the passed-in type  \n`generics`| `T: darling::FromGenerics`| The generics of the passed-in type. This can be `syn::Generics`, `darling::ast::Generics`, or any compatible type.  \n`data` (or anything, using `#[darling(with = ...)]`)| `darling::ast::Data`| The body of the passed-in type  \n`attrs`| `Vec<syn::Attribute>` (or anything, using `#[darling(with = ...)]`)| The forwarded attributes from the passed in type. These are controlled using the `forward_attrs` attribute.  \n#### \u00a7\u27e810\u27e9`FromField`\nField name| Type| Meaning  \n---|---|---  \n`ident`| `Option<syn::Ident>`| The identifier of the passed-in field, or `None` for tuple fields  \n`vis`| `syn::Visibility`| The visibility of the passed-in field  \n`ty`| `syn::Type`| The type of the passed-in field  \n`attrs`| `Vec<syn::Attribute>` (or anything, using `#[darling(with = ...)]`)| The forwarded attributes from the passed in field. These are controlled using the `forward_attrs` attribute.  \n#### \u00a7\u27e811\u27e9`FromTypeParam`\nField name| Type| Meaning  \n---|---|---  \n`ident`| `syn::Ident`| The identifier of the passed-in type param  \n`bounds`| `Vec<syn::TypeParamBound>`| The bounds applied to the type param  \n`default`| `Option<syn::Type>`| The default type of the parameter, if one exists  \n`attrs`| `Vec<syn::Attribute>` (or anything, using `#[darling(with = ...)]`)| The forwarded attributes from the passed in type param. These are controlled using the `forward_attrs` attribute.  \n#### \u00a7\u27e812\u27e9`FromVariant`\nField name| Type| Meaning  \n---|---|---  \n`ident`| `syn::Ident`| The identifier of the passed-in variant  \n`discriminant`| `Option<syn::Expr>`| For a variant such as `Example = 2`, the `2`  \n`fields`| `darling::ast::Fields<T> where T: FromField`| The fields associated with the variant  \n`attrs`| `Vec<syn::Attribute>` (or anything, using `#[darling(with = ...)]`)| The forwarded attributes from the passed in variant. These are controlled using the `forward_attrs` attribute.  \n## Modules\u00a7\u27e813\u27e9\n\nast\u27e814\u27e9\n    Utility types for working with the AST.\n\nerror\u27e815\u27e9\n    The `darling::Error` type, the multiple error `Accumulator`, and their internals.\n\nusage\u27e816\u27e9\n    Traits and types used for tracking the usage of generic parameters through a proc-macro input.\n\nutil\u27e817\u27e9\n    Utility types for attribute parsing.\n## Macros\u00a7\u27e818\u27e9\n\nuses_lifetimes\u27e819\u27e9\n    Generator for `UsesLifetimes` impls that unions the used lifetimes of the selected fields.\n\nuses_type_params\u27e820\u27e9\n    Generator for `UsesTypeParam` impls that unions the used type parameters of the selected fields.\n## Structs\u00a7\u27e821\u27e9\n\nError\u27e822\u27e9\n    An error encountered during attribute parsing.\n## Traits\u00a7\u27e823\u27e9\n\nFromAttributes\u27e824\u27e9\n    Create an instance by parsing a list of attributes.\n\nFromDeriveInput\u27e825\u27e9\n    Creates an instance by parsing an entire proc-macro `derive` input, including the, identity, generics, and visibility of the type.\n\nFromField\u27e826\u27e9\n    Creates an instance by parsing an individual field and its attributes.\n\nFromGenericParam\u27e827\u27e9\n    Creates an instance by parsing a specific `syn::GenericParam`. This can be a type param, a lifetime, or a const param.\n\nFromGenerics\u27e828\u27e9\n    Creates an instance by parsing an entire generics declaration, including the `where` clause.\n\nFromMeta\u27e829\u27e9\n    Create an instance from an item in an attribute declaration.\n\nFromTypeParam\u27e830\u27e9\n    Creates an instance by parsing an individual type_param and its attributes.\n\nFromVariant\u27e831\u27e9\n    Creates an instance from a specified `syn::Variant`.\n## Type Aliases\u00a7\u27e832\u27e9\n\nResult\u27e833\u27e9\n    An alias of `Result` specific to attribute parsing.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/darling/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/darling/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/darling/latest/src/darling/lib.rs.html#1-117: Source\n\u27e84\u27e9 https://docs.rs/darling/latest/darling/#darling: \u00a7\n\u27e85\u27e9 https://docs.rs/darling/latest/darling/#design: \u00a7\n\u27e86\u27e9 https://serde.rs: `serde`\n\u27e87\u27e9 https://docs.rs/darling/latest/darling/#attributes: \u00a7\n\u27e88\u27e9 https://docs.rs/darling/latest/darling/#forwarded-fields: \u00a7\n\u27e89\u27e9 https://docs.rs/darling/latest/darling/#fromderiveinput: \u00a7\n\u27e810\u27e9 https://docs.rs/darling/latest/darling/#fromfield: \u00a7\n\u27e811\u27e9 https://docs.rs/darling/latest/darling/#fromtypeparam: \u00a7\n\u27e812\u27e9 https://docs.rs/darling/latest/darling/#fromvariant: \u00a7\n\u27e813\u27e9 https://docs.rs/darling/latest/darling/#modules: \u00a7\n\u27e814\u27e9 https://docs.rs/darling/latest/darling/ast/index.html: mod darling::ast - ast\n\u27e815\u27e9 https://docs.rs/darling/latest/darling/error/index.html: mod darling::error - error\n\u27e816\u27e9 https://docs.rs/darling/latest/darling/usage/index.html: mod darling::usage - usage\n\u27e817\u27e9 https://docs.rs/darling/latest/darling/util/index.html: mod darling::util - util\n\u27e818\u27e9 https://docs.rs/darling/latest/darling/#macros: \u00a7\n\u27e819\u27e9 https://docs.rs/darling/latest/darling/macro.uses_lifetimes.html: macro darling::uses_lifetimes - uses_lifetimes\n\u27e820\u27e9 https://docs.rs/darling/latest/darling/macro.uses_type_params.html: macro darling::uses_type_params - uses_type_params\n\u27e821\u27e9 https://docs.rs/darling/latest/darling/#structs: \u00a7\n\u27e822\u27e9 https://docs.rs/darling/latest/darling/struct.Error.html: struct darling::Error - Error\n\u27e823\u27e9 https://docs.rs/darling/latest/darling/#traits: \u00a7\n\u27e824\u27e9 https://docs.rs/darling/latest/darling/trait.FromAttributes.html: trait darling::FromAttributes - FromAttributes\n\u27e825\u27e9 https://docs.rs/darling/latest/darling/trait.FromDeriveInput.html: trait darling::FromDeriveInput - FromDeriveInput\n\u27e826\u27e9 https://docs.rs/darling/latest/darling/trait.FromField.html: trait darling::FromField - FromField\n\u27e827\u27e9 https://docs.rs/darling/latest/darling/trait.FromGenericParam.html: trait darling::FromGenericParam - FromGenericParam\n\u27e828\u27e9 https://docs.rs/darling/latest/darling/trait.FromGenerics.html: trait darling::FromGenerics - FromGenerics\n\u27e829\u27e9 https://docs.rs/darling/latest/darling/trait.FromMeta.html: trait darling::FromMeta - FromMeta\n\u27e830\u27e9 https://docs.rs/darling/latest/darling/trait.FromTypeParam.html: trait darling::FromTypeParam - FromTypeParam\n\u27e831\u27e9 https://docs.rs/darling/latest/darling/trait.FromVariant.html: trait darling::FromVariant - FromVariant\n\u27e832\u27e9 https://docs.rs/darling/latest/darling/#types: \u00a7\n\u27e833\u27e9 https://docs.rs/darling/latest/darling/type.Result.html: type darling::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `darling` crate simplifies declarative attribute parsing for Rust procedural macros, drawing inspiration from `serde`. It provides traits like `FromMeta`, `FromDeriveInput`, and `FromField` to parse attributes, derive input, and fields, along with customizable attributes for renaming, default values, mapping functions, and handling missing fields. Additionally, it supports forwarding fields from the input AST and offers utilities for error handling and generic parameter tracking.",
    "feature_summary": null,
    "use_case": "DevTools",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Attribute Parsing Capabilities  \n\u2705 Factual: `darling` allows proc-macro authors to parse attributes declaratively using traits like `FromMeta`, which can be derived automatically for structs and enums.  \n\u274c Counterfactual: `darling` requires all attribute parsing logic to be implemented manually, as it does not support deriving traits like `FromMeta`.  \n\n---\n\n### Pair 2: Handling Default Values  \n\u2705 Factual: The `#[darling(default)]` attribute can be used to specify default values for fields or types when the caller does not provide them explicitly.  \n\u274c Counterfactual: The `#[darling(default)]` attribute automatically generates fallback values for fields even if no default is defined in the type or field-level declaration.  \n\n---\n\n### Pair 3: Field Renaming  \n\u2705 Factual: `darling` supports field renaming with `#[darling(rename = \"new_name\")]` or casing rules at the struct level using `#[darling(rename_all = \"snake_case\")]`.  \n\u274c Counterfactual: `darling` does not support field renaming, requiring users to use the original field names in all attribute parsing scenarios.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}