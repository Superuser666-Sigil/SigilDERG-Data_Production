{
    "name": "embassy-sync",
    "version": "0.7.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/embassy-sync/latest/embassy_sync/all.html \"show sidebar\")\n# Crate embassy_syncCopy item path\n[Settings](https://docs.rs/embassy-sync/latest/settings.html)\n[Help](https://docs.rs/embassy-sync/latest/help.html)\nSummary[Source](https://docs.rs/embassy-sync/latest/src/embassy_sync/lib.rs.html#1-26)\nExpand description\n## [\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#embassy-sync)embassy-sync\nAn [Embassy](https://embassy.dev) project.\nSynchronization primitives and data structures with async support:\n  * [`Channel`](https://docs.rs/embassy-sync/latest/embassy_sync/channel/struct.Channel.html \"struct embassy_sync::channel::Channel\") - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer.\n  * [`PriorityChannel`](https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/struct.PriorityChannel.html \"struct embassy_sync::priority_channel::PriorityChannel\") - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer. Higher priority items are shifted to the front of the channel.\n  * [`PubSubChannel`](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html \"struct embassy_sync::pubsub::PubSubChannel\") - A broadcast channel (publish-subscribe) channel. Each message is received by all consumers.\n  * [`Signal`](https://docs.rs/embassy-sync/latest/embassy_sync/signal/struct.Signal.html \"struct embassy_sync::signal::Signal\") - Signalling latest value to a single consumer.\n  * [`Watch`](https://docs.rs/embassy-sync/latest/embassy_sync/watch/struct.Watch.html \"struct embassy_sync::watch::Watch\") - Signalling latest value to multiple consumers.\n  * [`Mutex`](https://docs.rs/embassy-sync/latest/embassy_sync/mutex/struct.Mutex.html \"struct embassy_sync::mutex::Mutex\") - Mutex for synchronizing state between asynchronous tasks.\n  * [`Pipe`](https://docs.rs/embassy-sync/latest/embassy_sync/pipe/struct.Pipe.html \"struct embassy_sync::pipe::Pipe\") - Byte stream implementing `embedded_io` traits.\n  * [`WakerRegistration`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.WakerRegistration.html \"struct embassy_sync::waitqueue::WakerRegistration\") - Utility to register and wake a `Waker`.\n  * [`AtomicWaker`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.AtomicWaker.html \"struct embassy_sync::waitqueue::AtomicWaker\") - Utility to register and wake a `Waker` from interrupt context.\n  * [`MultiWakerRegistration`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.MultiWakerRegistration.html \"struct embassy_sync::waitqueue::MultiWakerRegistration\") - Utility registering and waking multiple `Waker`\u2019s.\n  * [`LazyLock`](https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/struct.LazyLock.html \"struct embassy_sync::lazy_lock::LazyLock\") - A value which is initialized on the first access\n\n\n### [\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#interoperability)Interoperability\nFutures from this crate can run on any executor.\n## Modules[\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#modules)\n\n[blocking_mutex](https://docs.rs/embassy-sync/latest/embassy_sync/blocking_mutex/index.html \"mod embassy_sync::blocking_mutex\")\n    Blocking mutex.\n\n[channel](https://docs.rs/embassy-sync/latest/embassy_sync/channel/index.html \"mod embassy_sync::channel\")\n    A queue for sending values between asynchronous tasks.\n\n[lazy_lock](https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/index.html \"mod embassy_sync::lazy_lock\")\n    Synchronization primitive for initializing a value once, allowing others to get a reference to the value.\n\n[mutex](https://docs.rs/embassy-sync/latest/embassy_sync/mutex/index.html \"mod embassy_sync::mutex\")\n    Async mutex.\n\n[once_lock](https://docs.rs/embassy-sync/latest/embassy_sync/once_lock/index.html \"mod embassy_sync::once_lock\")\n    Synchronization primitive for initializing a value once, allowing others to await a reference to the value.\n\n[pipe](https://docs.rs/embassy-sync/latest/embassy_sync/pipe/index.html \"mod embassy_sync::pipe\")\n    Async byte stream pipe.\n\n[priority_channel](https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/index.html \"mod embassy_sync::priority_channel\")\n    A queue for sending values between asynchronous tasks.\n\n[pubsub](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/index.html \"mod embassy_sync::pubsub\")\n    Implementation of [PubSubChannel](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html \"struct embassy_sync::pubsub::PubSubChannel\"), a queue where published messages get received by all subscribers.\n\n[rwlock](https://docs.rs/embassy-sync/latest/embassy_sync/rwlock/index.html \"mod embassy_sync::rwlock\")\n    Async read-write lock.\n\n[semaphore](https://docs.rs/embassy-sync/latest/embassy_sync/semaphore/index.html \"mod embassy_sync::semaphore\")\n    A synchronization primitive for controlling access to a pool of resources.\n\n[signal](https://docs.rs/embassy-sync/latest/embassy_sync/signal/index.html \"mod embassy_sync::signal\")\n    A synchronization primitive for passing the latest value to a task.\n\n[waitqueue](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/index.html \"mod embassy_sync::waitqueue\")\n    Async low-level wait queues\n\n[watch](https://docs.rs/embassy-sync/latest/embassy_sync/watch/index.html \"mod embassy_sync::watch\")\n    A synchronization primitive for passing the latest value to **multiple** receivers.\n\n[zerocopy_channel](https://docs.rs/embassy-sync/latest/embassy_sync/zerocopy_channel/index.html \"mod embassy_sync::zerocopy_channel\")\n    A zero-copy queue for sending values between asynchronous tasks.\n",
        "markdown_with_citations": "[](https://docs.rs/embassy-sync/latest/embassy_sync/all.html \"show sidebar\")\n# Crate embassy_syncCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9embassy-sync\nAn Embassy\u27e85\u27e9 project.\nSynchronization primitives and data structures with async support:\n  * `Channel`\u27e86\u27e9 - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer.\n  * `PriorityChannel`\u27e87\u27e9 - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer. Higher priority items are shifted to the front of the channel.\n  * `PubSubChannel`\u27e88\u27e9 - A broadcast channel (publish-subscribe) channel. Each message is received by all consumers.\n  * `Signal`\u27e89\u27e9 - Signalling latest value to a single consumer.\n  * `Watch`\u27e810\u27e9 - Signalling latest value to multiple consumers.\n  * `Mutex`\u27e811\u27e9 - Mutex for synchronizing state between asynchronous tasks.\n  * `Pipe`\u27e812\u27e9 - Byte stream implementing `embedded_io` traits.\n  * `WakerRegistration`\u27e813\u27e9 - Utility to register and wake a `Waker`.\n  * `AtomicWaker`\u27e814\u27e9 - Utility to register and wake a `Waker` from interrupt context.\n  * `MultiWakerRegistration`\u27e815\u27e9 - Utility registering and waking multiple `Waker`\u2019s.\n  * `LazyLock`\u27e816\u27e9 - A value which is initialized on the first access\n\n\n### \u00a7\u27e817\u27e9Interoperability\nFutures from this crate can run on any executor.\n## Modules\u00a7\u27e818\u27e9\n\nblocking_mutex\u27e819\u27e9\n    Blocking mutex.\n\nchannel\u27e820\u27e9\n    A queue for sending values between asynchronous tasks.\n\nlazy_lock\u27e821\u27e9\n    Synchronization primitive for initializing a value once, allowing others to get a reference to the value.\n\nmutex\u27e822\u27e9\n    Async mutex.\n\nonce_lock\u27e823\u27e9\n    Synchronization primitive for initializing a value once, allowing others to await a reference to the value.\n\npipe\u27e824\u27e9\n    Async byte stream pipe.\n\npriority_channel\u27e825\u27e9\n    A queue for sending values between asynchronous tasks.\n\npubsub\u27e826\u27e9\n    Implementation of PubSubChannel\u27e88\u27e9, a queue where published messages get received by all subscribers.\n\nrwlock\u27e827\u27e9\n    Async read-write lock.\n\nsemaphore\u27e828\u27e9\n    A synchronization primitive for controlling access to a pool of resources.\n\nsignal\u27e829\u27e9\n    A synchronization primitive for passing the latest value to a task.\n\nwaitqueue\u27e830\u27e9\n    Async low-level wait queues\n\nwatch\u27e831\u27e9\n    A synchronization primitive for passing the latest value to **multiple** receivers.\n\nzerocopy_channel\u27e832\u27e9\n    A zero-copy queue for sending values between asynchronous tasks.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/embassy-sync/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/embassy-sync/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/embassy-sync/latest/src/embassy_sync/lib.rs.html#1-26: Source\n\u27e84\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#embassy-sync: \u00a7\n\u27e85\u27e9 https://embassy.dev: Embassy\n\u27e86\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/channel/struct.Channel.html: struct embassy_sync::channel::Channel - `Channel`\n\u27e87\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/struct.PriorityChannel.html: struct embassy_sync::priority_channel::PriorityChannel - `PriorityChannel`\n\u27e88\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html: struct embassy_sync::pubsub::PubSubChannel - `PubSubChannel`\n\u27e89\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/signal/struct.Signal.html: struct embassy_sync::signal::Signal - `Signal`\n\u27e810\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/watch/struct.Watch.html: struct embassy_sync::watch::Watch - `Watch`\n\u27e811\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/mutex/struct.Mutex.html: struct embassy_sync::mutex::Mutex - `Mutex`\n\u27e812\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pipe/struct.Pipe.html: struct embassy_sync::pipe::Pipe - `Pipe`\n\u27e813\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.WakerRegistration.html: struct embassy_sync::waitqueue::WakerRegistration - `WakerRegistration`\n\u27e814\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.AtomicWaker.html: struct embassy_sync::waitqueue::AtomicWaker - `AtomicWaker`\n\u27e815\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.MultiWakerRegistration.html: struct embassy_sync::waitqueue::MultiWakerRegistration - `MultiWakerRegistration`\n\u27e816\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/struct.LazyLock.html: struct embassy_sync::lazy_lock::LazyLock - `LazyLock`\n\u27e817\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#interoperability: \u00a7\n\u27e818\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#modules: \u00a7\n\u27e819\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/blocking_mutex/index.html: mod embassy_sync::blocking_mutex - blocking_mutex\n\u27e820\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/channel/index.html: mod embassy_sync::channel - channel\n\u27e821\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/index.html: mod embassy_sync::lazy_lock - lazy_lock\n\u27e822\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/mutex/index.html: mod embassy_sync::mutex - mutex\n\u27e823\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/once_lock/index.html: mod embassy_sync::once_lock - once_lock\n\u27e824\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pipe/index.html: mod embassy_sync::pipe - pipe\n\u27e825\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/index.html: mod embassy_sync::priority_channel - priority_channel\n\u27e826\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/index.html: mod embassy_sync::pubsub - pubsub\n\u27e827\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/rwlock/index.html: mod embassy_sync::rwlock - rwlock\n\u27e828\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/semaphore/index.html: mod embassy_sync::semaphore - semaphore\n\u27e829\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/signal/index.html: mod embassy_sync::signal - signal\n\u27e830\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/index.html: mod embassy_sync::waitqueue - waitqueue\n\u27e831\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/watch/index.html: mod embassy_sync::watch - watch\n\u27e832\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/zerocopy_channel/index.html: mod embassy_sync::zerocopy_channel - zerocopy_channel\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `embassy-sync` crate provides a collection of asynchronous synchronization primitives and data structures designed for embedded systems, including channels (MPMC, priority, pub-sub), mutexes, locks, pipes, and signaling mechanisms. It supports features like zero-copy communication, waker utilities, and lazy initialization, enabling efficient task coordination in async environments. The crate is executor-agnostic, ensuring broad compatibility across async runtimes.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.5,
    "factual_counterfactual": "### Pair 1: Synchronization Primitives  \n\u2705 **Factual:** The `embassy-sync` crate provides an asynchronous `Mutex` for synchronizing state between tasks, allowing safe access to shared data in concurrent environments.  \n\u274c **Counterfactual:** The `embassy-sync` crate's `Mutex` supports recursive locking, allowing the same task to acquire the lock multiple times without deadlocking.  \n\n---\n\n### Pair 2: Channel Types  \n\u2705 **Factual:** The `Channel` in `embassy-sync` is a Multiple Producer Multiple Consumer (MPMC) channel where each message is received by only one consumer.  \n\u274c **Counterfactual:** The `Channel` in `embassy-sync` guarantees that every message sent will be received by all consumers, similar to a broadcast mechanism.  \n\n---\n\n### Pair 3: Priority Handling  \n\u2705 **Factual:** The `PriorityChannel` in `embassy-sync` ensures that higher-priority items are shifted to the front of the channel, enabling prioritized message handling.  \n\u274c **Counterfactual:** The `PriorityChannel` in `embassy-sync` supports dynamic priority adjustment for messages already enqueued, allowing their priority to be updated after insertion.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}