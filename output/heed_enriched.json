{
    "name": "heed",
    "version": "0.22.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/heed/latest/heed/all.html \"show sidebar\")\n# Crate heedCopy item path\n[Settings](https://docs.rs/heed/latest/settings.html)\n[Help](https://docs.rs/heed/latest/help.html)\nSummary[Source](https://docs.rs/heed/latest/src/heed/lib.rs.html#1-251)\nExpand description\n`heed` and `heed3` are high-level wrappers of [LMDB](https://en.wikipedia.org/wiki/Lightning_Memory-Mapped_Database).\n  * `heed` is a wrapper around LMDB on the `mdb.master` branch,\n  * `heed3` derives from the `heed` wrapper but on the `mdb.master3` branch.\n\n\nThe `heed3` crate will be stable once the LMDB version on the `mdb.master3` branch will be officially released. It features encryption-at-rest and checksumming features that the `heed` crate doesn\u2019t.\nThe [cookbook](https://docs.rs/heed/latest/heed/cookbook/index.html \"mod heed::cookbook\") will give you a variety of complete Rust programs to use with `heed`.\nThis crate simply facilitates the use of LMDB by providing a mechanism to store and retrieve Rust types. It abstracts away some of the complexities of the raw LMDB usage while retaining its performance characteristics. The functionality is achieved with the help of the serde library for data serialization concerns.\nLMDB stands for Lightning Memory-Mapped Database, which utilizes memory-mapped files for efficient data storage and retrieval by mapping file content directly into the virtual address space. `heed` derives its efficiency from the underlying LMDB without imposing additional runtime costs.\n## [\u00a7](https://docs.rs/heed/latest/heed/#examples)Examples\nOpen a database that will support some typed key/data and ensure, at compile time, that you\u2019ll write those types and not others.\n```\nuse std::fs;\nuse std::path::Path;\nuse heed::{EnvOpenOptions, Database};\nuse heed::types::*;\nlet dir = tempfile::tempdir()?;\nlet env = unsafe { EnvOpenOptions::new().open(dir.path())? };\n// we will open the default unnamed database\nlet mut wtxn = env.write_txn()?;\nlet db: Database<Str, U32<byteorder::NativeEndian>> = env.create_database(&mut wtxn, None)?;\n// opening a write transaction\ndb.put(&mut wtxn, \"seven\", &7)?;\ndb.put(&mut wtxn, \"zero\", &0)?;\ndb.put(&mut wtxn, \"five\", &5)?;\ndb.put(&mut wtxn, \"three\", &3)?;\nwtxn.commit()?;\n// opening a read transaction\n// to check if those values are now available\nlet mut rtxn = env.read_txn()?;\nlet ret = db.get(&rtxn, \"zero\")?;\nassert_eq!(ret, Some(0));\nlet ret = db.get(&rtxn, \"five\")?;\nassert_eq!(ret, Some(5));\n```\n\n## Re-exports[\u00a7](https://docs.rs/heed/latest/heed/#reexports)\n\n`pub use byteorder[](https://docs.rs/byteorder/1.5.0/x86_64-unknown-linux-gnu/byteorder/index.html \"mod byteorder\");`\n\n\n`pub use heed_types[](https://docs.rs/heed-types/0.21.0/x86_64-unknown-linux-gnu/heed_types/index.html \"mod heed_types\") as types;`\n\n## Modules[\u00a7](https://docs.rs/heed/latest/heed/#modules)\n\n[cookbook](https://docs.rs/heed/latest/heed/cookbook/index.html \"mod heed::cookbook\")\n    A cookbook of examples on how to use heed. Here is the list of the different topics you can learn about:\n\n[iteration_method](https://docs.rs/heed/latest/heed/iteration_method/index.html \"mod heed::iteration_method\")\n    The set of possible iteration methods for the different iterators.\n## Structs[\u00a7](https://docs.rs/heed/latest/heed/#structs)\n\n[Database](https://docs.rs/heed/latest/heed/struct.Database.html \"struct heed::Database\")\n    A typed database that accepts only the types it was created with.\n\n[DatabaseFlags](https://docs.rs/heed/latest/heed/struct.DatabaseFlags.html \"struct heed::DatabaseFlags\")\n    LMDB database flags (see <http://www.lmdb.tech/doc/group__mdb__dbi__open.html> for more details).\n\n[DatabaseOpenOptions](https://docs.rs/heed/latest/heed/struct.DatabaseOpenOptions.html \"struct heed::DatabaseOpenOptions\")\n    Options and flags which can be used to configure how a [`Database`](https://docs.rs/heed/latest/heed/struct.Database.html \"struct heed::Database\") is opened.\n\n[DatabaseStat](https://docs.rs/heed/latest/heed/struct.DatabaseStat.html \"struct heed::DatabaseStat\")\n    Statistics for a database in the environment.\n\n[Env](https://docs.rs/heed/latest/heed/struct.Env.html \"struct heed::Env\")\n    An environment handle constructed by using [`EnvOpenOptions::open`](https://docs.rs/heed/latest/heed/struct.EnvOpenOptions.html#method.open \"method heed::EnvOpenOptions::open\").\n\n[EnvClosingEvent](https://docs.rs/heed/latest/heed/struct.EnvClosingEvent.html \"struct heed::EnvClosingEvent\")\n    A structure that can be used to wait for the closing event. Multiple threads can wait on this event.\n\n[EnvFlags](https://docs.rs/heed/latest/heed/struct.EnvFlags.html \"struct heed::EnvFlags\")\n    LMDB environment flags (see <http://www.lmdb.tech/doc/group__mdb__env.html> for more details).\n\n[EnvInfo](https://docs.rs/heed/latest/heed/struct.EnvInfo.html \"struct heed::EnvInfo\")\n    Contains information about the environment.\n\n[EnvOpenOptions](https://docs.rs/heed/latest/heed/struct.EnvOpenOptions.html \"struct heed::EnvOpenOptions\")\n    Options and flags which can be used to configure how an environment is opened.\n\n[LmdbVersion](https://docs.rs/heed/latest/heed/struct.LmdbVersion.html \"struct heed::LmdbVersion\")\n    The underlying LMDB library version information.\n\n[PutFlags](https://docs.rs/heed/latest/heed/struct.PutFlags.html \"struct heed::PutFlags\")\n    LMDB put flags (see <http://www.lmdb.tech/doc/group__mdb.html#ga4fa8573d9236d54687c61827ebf8cac0> or <http://www.lmdb.tech/doc/group__mdb.html#ga1f83ccb40011837ff37cc32be01ad91e> for more details).\n\n[ReservedSpace](https://docs.rs/heed/latest/heed/struct.ReservedSpace.html \"struct heed::ReservedSpace\")\n    A structure that is used to improve the write speed in LMDB.\n\n[RoIter](https://docs.rs/heed/latest/heed/struct.RoIter.html \"struct heed::RoIter\")\n    A read-only iterator structure.\n\n[RoPrefix](https://docs.rs/heed/latest/heed/struct.RoPrefix.html \"struct heed::RoPrefix\")\n    A read-only prefix iterator structure.\n\n[RoRange](https://docs.rs/heed/latest/heed/struct.RoRange.html \"struct heed::RoRange\")\n    A read-only range iterator structure.\n\n[RoRevIter](https://docs.rs/heed/latest/heed/struct.RoRevIter.html \"struct heed::RoRevIter\")\n    A reverse read-only iterator structure.\n\n[RoRevPrefix](https://docs.rs/heed/latest/heed/struct.RoRevPrefix.html \"struct heed::RoRevPrefix\")\n    A reverse read-only prefix iterator structure.\n\n[RoRevRange](https://docs.rs/heed/latest/heed/struct.RoRevRange.html \"struct heed::RoRevRange\")\n    A reverse read-only range iterator structure.\n\n[RoTxn](https://docs.rs/heed/latest/heed/struct.RoTxn.html \"struct heed::RoTxn\")\n    A read-only transaction.\n\n[RwIter](https://docs.rs/heed/latest/heed/struct.RwIter.html \"struct heed::RwIter\")\n    A read-write iterator structure.\n\n[RwPrefix](https://docs.rs/heed/latest/heed/struct.RwPrefix.html \"struct heed::RwPrefix\")\n    A read-write prefix iterator structure.\n\n[RwRange](https://docs.rs/heed/latest/heed/struct.RwRange.html \"struct heed::RwRange\")\n    A read-write range iterator structure.\n\n[RwRevIter](https://docs.rs/heed/latest/heed/struct.RwRevIter.html \"struct heed::RwRevIter\")\n    A reverse read-write iterator structure.\n\n[RwRevPrefix](https://docs.rs/heed/latest/heed/struct.RwRevPrefix.html \"struct heed::RwRevPrefix\")\n    A reverse read-write prefix iterator structure.\n\n[RwRevRange](https://docs.rs/heed/latest/heed/struct.RwRevRange.html \"struct heed::RwRevRange\")\n    A reverse read-write range iterator structure.\n\n[RwTxn](https://docs.rs/heed/latest/heed/struct.RwTxn.html \"struct heed::RwTxn\")\n    A read-write transaction.\n## Enums[\u00a7](https://docs.rs/heed/latest/heed/#enums)\n\n[AnyTls](https://docs.rs/heed/latest/heed/enum.AnyTls.html \"enum heed::AnyTls\")\n    Parameter defining that read transactions might have been opened with or without Thread Local Storage (TLS).\n\n[CompactionOption](https://docs.rs/heed/latest/heed/enum.CompactionOption.html \"enum heed::CompactionOption\")\n    Whether to perform compaction while copying an environment.\n\n[DefaultComparator](https://docs.rs/heed/latest/heed/enum.DefaultComparator.html \"enum heed::DefaultComparator\")\n    A representation of LMDB\u2019s default comparator behavior.\n\n[Error](https://docs.rs/heed/latest/heed/enum.Error.html \"enum heed::Error\")\n    An error that encapsulates all possible errors in this crate.\n\n[FlagSetMode](https://docs.rs/heed/latest/heed/enum.FlagSetMode.html \"enum heed::FlagSetMode\")\n    Whether to enable or disable flags in [`Env::set_flags`](https://docs.rs/heed/latest/heed/struct.Env.html#method.set_flags \"method heed::Env::set_flags\").\n\n[IntegerComparator](https://docs.rs/heed/latest/heed/enum.IntegerComparator.html \"enum heed::IntegerComparator\")\n    A representation of LMDB\u2019s `MDB_INTEGERKEY` and `MDB_INTEGERDUP` comparator behavior.\n\n[MdbError](https://docs.rs/heed/latest/heed/enum.MdbError.html \"enum heed::MdbError\")\n    An LMDB error kind.\n\n[Unspecified](https://docs.rs/heed/latest/heed/enum.Unspecified.html \"enum heed::Unspecified\")\n    An unspecified type.\n\n[WithTls](https://docs.rs/heed/latest/heed/enum.WithTls.html \"enum heed::WithTls\")\n    Parameter defining that read transactions are opened with Thread Local Storage (TLS) and cannot be sent between threads `!Send`. It is often faster to open TLS-backed transactions.\n\n[WithoutTls](https://docs.rs/heed/latest/heed/enum.WithoutTls.html \"enum heed::WithoutTls\")\n    Parameter defining that read transactions are opened without Thread Local Storage (TLS) and are therefore `Send`.\n## Traits[\u00a7](https://docs.rs/heed/latest/heed/#traits)\n\n[BytesDecode](https://docs.rs/heed/latest/heed/trait.BytesDecode.html \"trait heed::BytesDecode\")\n    A trait that represents a decoding structure.\n\n[BytesEncode](https://docs.rs/heed/latest/heed/trait.BytesEncode.html \"trait heed::BytesEncode\")\n    A trait that represents an encoding structure.\n\n[Comparator](https://docs.rs/heed/latest/heed/trait.Comparator.html \"trait heed::Comparator\")\n    Define a custom key comparison function for a database.\n\n[LexicographicComparator](https://docs.rs/heed/latest/heed/trait.LexicographicComparator.html \"trait heed::LexicographicComparator\")\n    Define a lexicographic comparator, which is a special case of [`Comparator`](https://docs.rs/heed/latest/heed/trait.Comparator.html \"trait heed::Comparator\").\n\n[TlsUsage](https://docs.rs/heed/latest/heed/trait.TlsUsage.html \"trait heed::TlsUsage\")\n    Specificies if Thread Local Storage (TLS) must be used when opening transactions. It is often faster to open TLS-backed transactions but makes them `!Send`.\n## Functions[\u00a7](https://docs.rs/heed/latest/heed/#functions)\n\n[env_closing_event](https://docs.rs/heed/latest/heed/fn.env_closing_event.html \"fn heed::env_closing_event\")\n    Returns a struct that allows to wait for the effective closing of an environment.\n\n[lmdb_version](https://docs.rs/heed/latest/heed/fn.lmdb_version.html \"fn heed::lmdb_version\")\n    Return the LMDB library version information.\n## Type Aliases[\u00a7](https://docs.rs/heed/latest/heed/#types)\n\n[BoxedError](https://docs.rs/heed/latest/heed/type.BoxedError.html \"type heed::BoxedError\")\n    A boxed `Send + Sync + 'static` error.\n\n[Result](https://docs.rs/heed/latest/heed/type.Result.html \"type heed::Result\")\n    Either a success or an [`Error`](https://docs.rs/heed/latest/heed/enum.Error.html \"enum heed::Error\").\n",
        "markdown_with_citations": "[](https://docs.rs/heed/latest/heed/all.html \"show sidebar\")\n# Crate heedCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`heed` and `heed3` are high-level wrappers of LMDB\u27e84\u27e9.\n  * `heed` is a wrapper around LMDB on the `mdb.master` branch,\n  * `heed3` derives from the `heed` wrapper but on the `mdb.master3` branch.\n\n\nThe `heed3` crate will be stable once the LMDB version on the `mdb.master3` branch will be officially released. It features encryption-at-rest and checksumming features that the `heed` crate doesn\u2019t.\nThe cookbook\u27e85\u27e9 will give you a variety of complete Rust programs to use with `heed`.\nThis crate simply facilitates the use of LMDB by providing a mechanism to store and retrieve Rust types. It abstracts away some of the complexities of the raw LMDB usage while retaining its performance characteristics. The functionality is achieved with the help of the serde library for data serialization concerns.\nLMDB stands for Lightning Memory-Mapped Database, which utilizes memory-mapped files for efficient data storage and retrieval by mapping file content directly into the virtual address space. `heed` derives its efficiency from the underlying LMDB without imposing additional runtime costs.\n## \u00a7\u27e86\u27e9Examples\nOpen a database that will support some typed key/data and ensure, at compile time, that you\u2019ll write those types and not others.\n```\nuse std::fs;\nuse std::path::Path;\nuse heed::{EnvOpenOptions, Database};\nuse heed::types::*;\nlet dir = tempfile::tempdir()?;\nlet env = unsafe { EnvOpenOptions::new().open(dir.path())? };\n// we will open the default unnamed database\nlet mut wtxn = env.write_txn()?;\nlet db: Database<Str, U32<byteorder::NativeEndian>> = env.create_database(&mut wtxn, None)?;\n// opening a write transaction\ndb.put(&mut wtxn, \"seven\", &7)?;\ndb.put(&mut wtxn, \"zero\", &0)?;\ndb.put(&mut wtxn, \"five\", &5)?;\ndb.put(&mut wtxn, \"three\", &3)?;\nwtxn.commit()?;\n// opening a read transaction\n// to check if those values are now available\nlet mut rtxn = env.read_txn()?;\nlet ret = db.get(&rtxn, \"zero\")?;\nassert_eq!(ret, Some(0));\nlet ret = db.get(&rtxn, \"five\")?;\nassert_eq!(ret, Some(5));\n```\n\n## Re-exports\u00a7\u27e87\u27e9\n\n`pub use byteorder[](https://docs.rs/byteorder/1.5.0/x86_64-unknown-linux-gnu/byteorder/index.html \"mod byteorder\");`\n\n\n`pub use heed_types[](https://docs.rs/heed-types/0.21.0/x86_64-unknown-linux-gnu/heed_types/index.html \"mod heed_types\") as types;`\n\n## Modules\u00a7\u27e88\u27e9\n\ncookbook\u27e85\u27e9\n    A cookbook of examples on how to use heed. Here is the list of the different topics you can learn about:\n\niteration_method\u27e89\u27e9\n    The set of possible iteration methods for the different iterators.\n## Structs\u00a7\u27e810\u27e9\n\nDatabase\u27e811\u27e9\n    A typed database that accepts only the types it was created with.\n\nDatabaseFlags\u27e812\u27e9\n    LMDB database flags (see <http://www.lmdb.tech/doc/group__mdb__dbi__open.html> for more details).\n\nDatabaseOpenOptions\u27e813\u27e9\n    Options and flags which can be used to configure how a `Database`\u27e811\u27e9 is opened.\n\nDatabaseStat\u27e814\u27e9\n    Statistics for a database in the environment.\n\nEnv\u27e815\u27e9\n    An environment handle constructed by using `EnvOpenOptions::open`\u27e816\u27e9.\n\nEnvClosingEvent\u27e817\u27e9\n    A structure that can be used to wait for the closing event. Multiple threads can wait on this event.\n\nEnvFlags\u27e818\u27e9\n    LMDB environment flags (see <http://www.lmdb.tech/doc/group__mdb__env.html> for more details).\n\nEnvInfo\u27e819\u27e9\n    Contains information about the environment.\n\nEnvOpenOptions\u27e820\u27e9\n    Options and flags which can be used to configure how an environment is opened.\n\nLmdbVersion\u27e821\u27e9\n    The underlying LMDB library version information.\n\nPutFlags\u27e822\u27e9\n    LMDB put flags (see <http://www.lmdb.tech/doc/group__mdb.html#ga4fa8573d9236d54687c61827ebf8cac0> or <http://www.lmdb.tech/doc/group__mdb.html#ga1f83ccb40011837ff37cc32be01ad91e> for more details).\n\nReservedSpace\u27e823\u27e9\n    A structure that is used to improve the write speed in LMDB.\n\nRoIter\u27e824\u27e9\n    A read-only iterator structure.\n\nRoPrefix\u27e825\u27e9\n    A read-only prefix iterator structure.\n\nRoRange\u27e826\u27e9\n    A read-only range iterator structure.\n\nRoRevIter\u27e827\u27e9\n    A reverse read-only iterator structure.\n\nRoRevPrefix\u27e828\u27e9\n    A reverse read-only prefix iterator structure.\n\nRoRevRange\u27e829\u27e9\n    A reverse read-only range iterator structure.\n\nRoTxn\u27e830\u27e9\n    A read-only transaction.\n\nRwIter\u27e831\u27e9\n    A read-write iterator structure.\n\nRwPrefix\u27e832\u27e9\n    A read-write prefix iterator structure.\n\nRwRange\u27e833\u27e9\n    A read-write range iterator structure.\n\nRwRevIter\u27e834\u27e9\n    A reverse read-write iterator structure.\n\nRwRevPrefix\u27e835\u27e9\n    A reverse read-write prefix iterator structure.\n\nRwRevRange\u27e836\u27e9\n    A reverse read-write range iterator structure.\n\nRwTxn\u27e837\u27e9\n    A read-write transaction.\n## Enums\u00a7\u27e838\u27e9\n\nAnyTls\u27e839\u27e9\n    Parameter defining that read transactions might have been opened with or without Thread Local Storage (TLS).\n\nCompactionOption\u27e840\u27e9\n    Whether to perform compaction while copying an environment.\n\nDefaultComparator\u27e841\u27e9\n    A representation of LMDB\u2019s default comparator behavior.\n\nError\u27e842\u27e9\n    An error that encapsulates all possible errors in this crate.\n\nFlagSetMode\u27e843\u27e9\n    Whether to enable or disable flags in `Env::set_flags`\u27e844\u27e9.\n\nIntegerComparator\u27e845\u27e9\n    A representation of LMDB\u2019s `MDB_INTEGERKEY` and `MDB_INTEGERDUP` comparator behavior.\n\nMdbError\u27e846\u27e9\n    An LMDB error kind.\n\nUnspecified\u27e847\u27e9\n    An unspecified type.\n\nWithTls\u27e848\u27e9\n    Parameter defining that read transactions are opened with Thread Local Storage (TLS) and cannot be sent between threads `!Send`. It is often faster to open TLS-backed transactions.\n\nWithoutTls\u27e849\u27e9\n    Parameter defining that read transactions are opened without Thread Local Storage (TLS) and are therefore `Send`.\n## Traits\u00a7\u27e850\u27e9\n\nBytesDecode\u27e851\u27e9\n    A trait that represents a decoding structure.\n\nBytesEncode\u27e852\u27e9\n    A trait that represents an encoding structure.\n\nComparator\u27e853\u27e9\n    Define a custom key comparison function for a database.\n\nLexicographicComparator\u27e854\u27e9\n    Define a lexicographic comparator, which is a special case of `Comparator`\u27e853\u27e9.\n\nTlsUsage\u27e855\u27e9\n    Specificies if Thread Local Storage (TLS) must be used when opening transactions. It is often faster to open TLS-backed transactions but makes them `!Send`.\n## Functions\u00a7\u27e856\u27e9\n\nenv_closing_event\u27e857\u27e9\n    Returns a struct that allows to wait for the effective closing of an environment.\n\nlmdb_version\u27e858\u27e9\n    Return the LMDB library version information.\n## Type Aliases\u00a7\u27e859\u27e9\n\nBoxedError\u27e860\u27e9\n    A boxed `Send + Sync + 'static` error.\n\nResult\u27e861\u27e9\n    Either a success or an `Error`\u27e842\u27e9.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/heed/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/heed/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/heed/latest/src/heed/lib.rs.html#1-251: Source\n\u27e84\u27e9 https://en.wikipedia.org/wiki/Lightning_Memory-Mapped_Database: LMDB\n\u27e85\u27e9 https://docs.rs/heed/latest/heed/cookbook/index.html: mod heed::cookbook - cookbook\n\u27e86\u27e9 https://docs.rs/heed/latest/heed/#examples: \u00a7\n\u27e87\u27e9 https://docs.rs/heed/latest/heed/#reexports: \u00a7\n\u27e88\u27e9 https://docs.rs/heed/latest/heed/#modules: \u00a7\n\u27e89\u27e9 https://docs.rs/heed/latest/heed/iteration_method/index.html: mod heed::iteration_method - iteration_method\n\u27e810\u27e9 https://docs.rs/heed/latest/heed/#structs: \u00a7\n\u27e811\u27e9 https://docs.rs/heed/latest/heed/struct.Database.html: struct heed::Database - Database\n\u27e812\u27e9 https://docs.rs/heed/latest/heed/struct.DatabaseFlags.html: struct heed::DatabaseFlags - DatabaseFlags\n\u27e813\u27e9 https://docs.rs/heed/latest/heed/struct.DatabaseOpenOptions.html: struct heed::DatabaseOpenOptions - DatabaseOpenOptions\n\u27e814\u27e9 https://docs.rs/heed/latest/heed/struct.DatabaseStat.html: struct heed::DatabaseStat - DatabaseStat\n\u27e815\u27e9 https://docs.rs/heed/latest/heed/struct.Env.html: struct heed::Env - Env\n\u27e816\u27e9 https://docs.rs/heed/latest/heed/struct.EnvOpenOptions.html#method.open: method heed::EnvOpenOptions::open - `EnvOpenOptions::open`\n\u27e817\u27e9 https://docs.rs/heed/latest/heed/struct.EnvClosingEvent.html: struct heed::EnvClosingEvent - EnvClosingEvent\n\u27e818\u27e9 https://docs.rs/heed/latest/heed/struct.EnvFlags.html: struct heed::EnvFlags - EnvFlags\n\u27e819\u27e9 https://docs.rs/heed/latest/heed/struct.EnvInfo.html: struct heed::EnvInfo - EnvInfo\n\u27e820\u27e9 https://docs.rs/heed/latest/heed/struct.EnvOpenOptions.html: struct heed::EnvOpenOptions - EnvOpenOptions\n\u27e821\u27e9 https://docs.rs/heed/latest/heed/struct.LmdbVersion.html: struct heed::LmdbVersion - LmdbVersion\n\u27e822\u27e9 https://docs.rs/heed/latest/heed/struct.PutFlags.html: struct heed::PutFlags - PutFlags\n\u27e823\u27e9 https://docs.rs/heed/latest/heed/struct.ReservedSpace.html: struct heed::ReservedSpace - ReservedSpace\n\u27e824\u27e9 https://docs.rs/heed/latest/heed/struct.RoIter.html: struct heed::RoIter - RoIter\n\u27e825\u27e9 https://docs.rs/heed/latest/heed/struct.RoPrefix.html: struct heed::RoPrefix - RoPrefix\n\u27e826\u27e9 https://docs.rs/heed/latest/heed/struct.RoRange.html: struct heed::RoRange - RoRange\n\u27e827\u27e9 https://docs.rs/heed/latest/heed/struct.RoRevIter.html: struct heed::RoRevIter - RoRevIter\n\u27e828\u27e9 https://docs.rs/heed/latest/heed/struct.RoRevPrefix.html: struct heed::RoRevPrefix - RoRevPrefix\n\u27e829\u27e9 https://docs.rs/heed/latest/heed/struct.RoRevRange.html: struct heed::RoRevRange - RoRevRange\n\u27e830\u27e9 https://docs.rs/heed/latest/heed/struct.RoTxn.html: struct heed::RoTxn - RoTxn\n\u27e831\u27e9 https://docs.rs/heed/latest/heed/struct.RwIter.html: struct heed::RwIter - RwIter\n\u27e832\u27e9 https://docs.rs/heed/latest/heed/struct.RwPrefix.html: struct heed::RwPrefix - RwPrefix\n\u27e833\u27e9 https://docs.rs/heed/latest/heed/struct.RwRange.html: struct heed::RwRange - RwRange\n\u27e834\u27e9 https://docs.rs/heed/latest/heed/struct.RwRevIter.html: struct heed::RwRevIter - RwRevIter\n\u27e835\u27e9 https://docs.rs/heed/latest/heed/struct.RwRevPrefix.html: struct heed::RwRevPrefix - RwRevPrefix\n\u27e836\u27e9 https://docs.rs/heed/latest/heed/struct.RwRevRange.html: struct heed::RwRevRange - RwRevRange\n\u27e837\u27e9 https://docs.rs/heed/latest/heed/struct.RwTxn.html: struct heed::RwTxn - RwTxn\n\u27e838\u27e9 https://docs.rs/heed/latest/heed/#enums: \u00a7\n\u27e839\u27e9 https://docs.rs/heed/latest/heed/enum.AnyTls.html: enum heed::AnyTls - AnyTls\n\u27e840\u27e9 https://docs.rs/heed/latest/heed/enum.CompactionOption.html: enum heed::CompactionOption - CompactionOption\n\u27e841\u27e9 https://docs.rs/heed/latest/heed/enum.DefaultComparator.html: enum heed::DefaultComparator - DefaultComparator\n\u27e842\u27e9 https://docs.rs/heed/latest/heed/enum.Error.html: enum heed::Error - Error\n\u27e843\u27e9 https://docs.rs/heed/latest/heed/enum.FlagSetMode.html: enum heed::FlagSetMode - FlagSetMode\n\u27e844\u27e9 https://docs.rs/heed/latest/heed/struct.Env.html#method.set_flags: method heed::Env::set_flags - `Env::set_flags`\n\u27e845\u27e9 https://docs.rs/heed/latest/heed/enum.IntegerComparator.html: enum heed::IntegerComparator - IntegerComparator\n\u27e846\u27e9 https://docs.rs/heed/latest/heed/enum.MdbError.html: enum heed::MdbError - MdbError\n\u27e847\u27e9 https://docs.rs/heed/latest/heed/enum.Unspecified.html: enum heed::Unspecified - Unspecified\n\u27e848\u27e9 https://docs.rs/heed/latest/heed/enum.WithTls.html: enum heed::WithTls - WithTls\n\u27e849\u27e9 https://docs.rs/heed/latest/heed/enum.WithoutTls.html: enum heed::WithoutTls - WithoutTls\n\u27e850\u27e9 https://docs.rs/heed/latest/heed/#traits: \u00a7\n\u27e851\u27e9 https://docs.rs/heed/latest/heed/trait.BytesDecode.html: trait heed::BytesDecode - BytesDecode\n\u27e852\u27e9 https://docs.rs/heed/latest/heed/trait.BytesEncode.html: trait heed::BytesEncode - BytesEncode\n\u27e853\u27e9 https://docs.rs/heed/latest/heed/trait.Comparator.html: trait heed::Comparator - Comparator\n\u27e854\u27e9 https://docs.rs/heed/latest/heed/trait.LexicographicComparator.html: trait heed::LexicographicComparator - LexicographicComparator\n\u27e855\u27e9 https://docs.rs/heed/latest/heed/trait.TlsUsage.html: trait heed::TlsUsage - TlsUsage\n\u27e856\u27e9 https://docs.rs/heed/latest/heed/#functions: \u00a7\n\u27e857\u27e9 https://docs.rs/heed/latest/heed/fn.env_closing_event.html: fn heed::env_closing_event - env_closing_event\n\u27e858\u27e9 https://docs.rs/heed/latest/heed/fn.lmdb_version.html: fn heed::lmdb_version - lmdb_version\n\u27e859\u27e9 https://docs.rs/heed/latest/heed/#types: \u00a7\n\u27e860\u27e9 https://docs.rs/heed/latest/heed/type.BoxedError.html: type heed::BoxedError - BoxedError\n\u27e861\u27e9 https://docs.rs/heed/latest/heed/type.Result.html: type heed::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `heed` crate is a high-level wrapper around LMDB (Lightning Memory-Mapped Database) that simplifies storing and retrieving Rust types with strong type safety, leveraging `serde` for serialization. It provides efficient database operations without additional runtime overhead, supports typed key-value pairs, and includes features like custom comparators, iteration methods, and transaction management. The crate also offers a cookbook with practical examples for usage.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Typed Database Support\n\u2705 **Factual:** The `heed` crate allows you to create typed databases that ensure, at compile time, that only the specified types of keys and values can be used.  \n\u274c **Counterfactual:** The `heed` crate supports dynamically typed databases, allowing any type of key or value to be stored without compile-time checks.\n\n---\n\n### Pair 2: LMDB Integration\n\u2705 **Factual:** The `heed` crate is a high-level wrapper around LMDB, which uses memory-mapped files for efficient data storage and retrieval.  \n\u274c **Counterfactual:** The `heed` crate provides its own custom database implementation and does not rely on LMDB for underlying data storage.\n\n---\n\n### Pair 3: Encryption and Checksumming\n\u2705 **Factual:** The `heed3` variant of the crate introduces encryption-at-rest and checksumming features, making it suitable for secure applications.  \n\u274c **Counterfactual:** The `heed` crate itself includes built-in encryption and checksumming features, eliminating the need for the `heed3` variant.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}