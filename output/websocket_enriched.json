{
    "name": "websocket",
    "version": "0.27.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/websocket/latest/websocket/all.html \"show sidebar\")\n# Crate websocketCopy item path\n[Settings](https://docs.rs/websocket/latest/settings.html)\n[Help](https://docs.rs/websocket/latest/help.html)\nSummary[Source](https://docs.rs/websocket/latest/src/websocket/lib.rs.html#1-164)\nExpand description\nRust-WebSocket is a WebSocket (RFC6455) library written in Rust.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#synchronous-and-asynchronous)Synchronous and Asynchronous\nThis crate has both async and sync implementations of websockets, you are free to choose which one you would like to use by switching on the `async` or `sync` features for this crate. By default both are switched on since they do not conflict with each other.\nYou\u2019ll find many modules with `::sync` and `::async` submodules that separate these behaviours. Since it gets tedious to add these on when appropriate, a top-level convenience module called `websocket::sync` and `websocket::async` has been added that groups all the sync and async stuff, respectively.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#clients)Clients\nTo make a client use the `ClientBuilder` struct, this builder has methods for creating both synchronous and asynchronous clients.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#servers)Servers\nWebSocket servers act similarly to the `TcpListener`, and listen for connections. See the `Server` struct documentation for more information. The `bind()` and `bind_secure()` functions will bind the server to the given `SocketAddr`.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#extending-rust-websocket)Extending Rust-WebSocket\nThe `ws` module contains the traits and functions used by Rust-WebSocket at a lower level. Their usage is explained in the module documentation.\n## Re-exports[\u00a7](https://docs.rs/websocket/latest/websocket/#reexports)\n\n`pub extern crate futures[](https://docs.rs/futures/0.1.31/x86_64-unknown-linux-gnu/futures/index.html \"mod futures\");`\n\n\n`pub extern crate native_tls[](https://docs.rs/native-tls/0.2.14/x86_64-unknown-linux-gnu/native_tls/index.html \"mod native_tls\");`\n\n\n`pub extern crate url[](https://docs.rs/url/1.7.2/x86_64-unknown-linux-gnu/url/index.html \"mod url\");`\n\n\n`pub extern crate websocket_base[](https://docs.rs/websocket-base/0.26.5/x86_64-unknown-linux-gnu/websocket_base/index.html \"mod websocket_base\");`\n\n\n`pub use self::client::builder::ClientBuilder[](https://docs.rs/websocket/latest/websocket/client/builder/struct.ClientBuilder.html \"struct websocket::client::builder::ClientBuilder\");`\n\n\n`pub use self::result::WebSocketResult[](https://docs.rs/websocket/latest/websocket/result/type.WebSocketResult.html \"type websocket::result::WebSocketResult\");`\n\n## Modules[\u00a7](https://docs.rs/websocket/latest/websocket/#modules)\n\n[async](https://docs.rs/websocket/latest/websocket/async/index.html \"mod websocket::async\")\n    A collection of handy asynchronous-only parts of the crate.\n\n[client](https://docs.rs/websocket/latest/websocket/client/index.html \"mod websocket::client\")\n    Build and use asynchronously or synchronous websocket clients.\n\n[codec](https://docs.rs/websocket/latest/websocket/codec/index.html \"mod websocket::codec\")\n    Useful `Codec` types for asynchronously encoding and decoding messages.\n\n[dataframe](https://docs.rs/websocket/latest/websocket/dataframe/index.html \"mod websocket::dataframe\")\n    Module containing the default implementation of data frames.\n\n[header](https://docs.rs/websocket/latest/websocket/header/index.html \"mod websocket::header\")\n    Structs representing headers relevant in a WebSocket context.\n\n[message](https://docs.rs/websocket/latest/websocket/message/index.html \"mod websocket::message\")\n    Module containing the default implementation for messages.\n\n[receiver](https://docs.rs/websocket/latest/websocket/receiver/index.html \"mod websocket::receiver\")\n    The default implementation of a WebSocket Receiver.\n\n[result](https://docs.rs/websocket/latest/websocket/result/index.html \"mod websocket::result\")\n    The result type used within Rust-WebSocket\n\n[sender](https://docs.rs/websocket/latest/websocket/sender/index.html \"mod websocket::sender\")\n    The default implementation of a WebSocket Sender.\n\n[server](https://docs.rs/websocket/latest/websocket/server/index.html \"mod websocket::server\")\n    Provides an implementation of a WebSocket server\n\n[stream](https://docs.rs/websocket/latest/websocket/stream/index.html \"mod websocket::stream\")\n    Provides the default stream type for WebSocket connections.\n\n[sync](https://docs.rs/websocket/latest/websocket/sync/index.html \"mod websocket::sync\")\n    A collection of handy synchronous-only parts of the crate.\n\n[ws](https://docs.rs/websocket/latest/websocket/ws/index.html \"mod websocket::ws\")\n    A module containing the traits and structs that lower layer of Rust-WebSocket is based on.\n## Structs[\u00a7](https://docs.rs/websocket/latest/websocket/#structs)\n\n[CloseData](https://docs.rs/websocket/latest/websocket/struct.CloseData.html \"struct websocket::CloseData\")\n    Represents data contained in a Close message\n\n[Message](https://docs.rs/websocket/latest/websocket/struct.Message.html \"struct websocket::Message\")\n    Represents a WebSocket message.\n## Enums[\u00a7](https://docs.rs/websocket/latest/websocket/#enums)\n\n[OwnedMessage](https://docs.rs/websocket/latest/websocket/enum.OwnedMessage.html \"enum websocket::OwnedMessage\")\n    Represents an owned WebSocket message.\n\n[WebSocketError](https://docs.rs/websocket/latest/websocket/enum.WebSocketError.html \"enum websocket::WebSocketError\")\n    Represents a WebSocket error\n",
        "markdown_with_citations": "[](https://docs.rs/websocket/latest/websocket/all.html \"show sidebar\")\n# Crate websocketCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRust-WebSocket is a WebSocket (RFC6455) library written in Rust.\n## \u00a7\u27e84\u27e9Synchronous and Asynchronous\nThis crate has both async and sync implementations of websockets, you are free to choose which one you would like to use by switching on the `async` or `sync` features for this crate. By default both are switched on since they do not conflict with each other.\nYou\u2019ll find many modules with `::sync` and `::async` submodules that separate these behaviours. Since it gets tedious to add these on when appropriate, a top-level convenience module called `websocket::sync` and `websocket::async` has been added that groups all the sync and async stuff, respectively.\n## \u00a7\u27e85\u27e9Clients\nTo make a client use the `ClientBuilder` struct, this builder has methods for creating both synchronous and asynchronous clients.\n## \u00a7\u27e86\u27e9Servers\nWebSocket servers act similarly to the `TcpListener`, and listen for connections. See the `Server` struct documentation for more information. The `bind()` and `bind_secure()` functions will bind the server to the given `SocketAddr`.\n## \u00a7\u27e87\u27e9Extending Rust-WebSocket\nThe `ws` module contains the traits and functions used by Rust-WebSocket at a lower level. Their usage is explained in the module documentation.\n## Re-exports\u00a7\u27e88\u27e9\n\n`pub extern crate futures[](https://docs.rs/futures/0.1.31/x86_64-unknown-linux-gnu/futures/index.html \"mod futures\");`\n\n\n`pub extern crate native_tls[](https://docs.rs/native-tls/0.2.14/x86_64-unknown-linux-gnu/native_tls/index.html \"mod native_tls\");`\n\n\n`pub extern crate url[](https://docs.rs/url/1.7.2/x86_64-unknown-linux-gnu/url/index.html \"mod url\");`\n\n\n`pub extern crate websocket_base[](https://docs.rs/websocket-base/0.26.5/x86_64-unknown-linux-gnu/websocket_base/index.html \"mod websocket_base\");`\n\n\n`pub use self::client::builder::ClientBuilder[](https://docs.rs/websocket/latest/websocket/client/builder/struct.ClientBuilder.html \"struct websocket::client::builder::ClientBuilder\");`\n\n\n`pub use self::result::WebSocketResult[](https://docs.rs/websocket/latest/websocket/result/type.WebSocketResult.html \"type websocket::result::WebSocketResult\");`\n\n## Modules\u00a7\u27e89\u27e9\n\nasync\u27e810\u27e9\n    A collection of handy asynchronous-only parts of the crate.\n\nclient\u27e811\u27e9\n    Build and use asynchronously or synchronous websocket clients.\n\ncodec\u27e812\u27e9\n    Useful `Codec` types for asynchronously encoding and decoding messages.\n\ndataframe\u27e813\u27e9\n    Module containing the default implementation of data frames.\n\nheader\u27e814\u27e9\n    Structs representing headers relevant in a WebSocket context.\n\nmessage\u27e815\u27e9\n    Module containing the default implementation for messages.\n\nreceiver\u27e816\u27e9\n    The default implementation of a WebSocket Receiver.\n\nresult\u27e817\u27e9\n    The result type used within Rust-WebSocket\n\nsender\u27e818\u27e9\n    The default implementation of a WebSocket Sender.\n\nserver\u27e819\u27e9\n    Provides an implementation of a WebSocket server\n\nstream\u27e820\u27e9\n    Provides the default stream type for WebSocket connections.\n\nsync\u27e821\u27e9\n    A collection of handy synchronous-only parts of the crate.\n\nws\u27e822\u27e9\n    A module containing the traits and structs that lower layer of Rust-WebSocket is based on.\n## Structs\u00a7\u27e823\u27e9\n\nCloseData\u27e824\u27e9\n    Represents data contained in a Close message\n\nMessage\u27e825\u27e9\n    Represents a WebSocket message.\n## Enums\u00a7\u27e826\u27e9\n\nOwnedMessage\u27e827\u27e9\n    Represents an owned WebSocket message.\n\nWebSocketError\u27e828\u27e9\n    Represents a WebSocket error\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/websocket/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/websocket/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/websocket/latest/src/websocket/lib.rs.html#1-164: Source\n\u27e84\u27e9 https://docs.rs/websocket/latest/websocket/#synchronous-and-asynchronous: \u00a7\n\u27e85\u27e9 https://docs.rs/websocket/latest/websocket/#clients: \u00a7\n\u27e86\u27e9 https://docs.rs/websocket/latest/websocket/#servers: \u00a7\n\u27e87\u27e9 https://docs.rs/websocket/latest/websocket/#extending-rust-websocket: \u00a7\n\u27e88\u27e9 https://docs.rs/websocket/latest/websocket/#reexports: \u00a7\n\u27e89\u27e9 https://docs.rs/websocket/latest/websocket/#modules: \u00a7\n\u27e810\u27e9 https://docs.rs/websocket/latest/websocket/async/index.html: mod websocket::async - async\n\u27e811\u27e9 https://docs.rs/websocket/latest/websocket/client/index.html: mod websocket::client - client\n\u27e812\u27e9 https://docs.rs/websocket/latest/websocket/codec/index.html: mod websocket::codec - codec\n\u27e813\u27e9 https://docs.rs/websocket/latest/websocket/dataframe/index.html: mod websocket::dataframe - dataframe\n\u27e814\u27e9 https://docs.rs/websocket/latest/websocket/header/index.html: mod websocket::header - header\n\u27e815\u27e9 https://docs.rs/websocket/latest/websocket/message/index.html: mod websocket::message - message\n\u27e816\u27e9 https://docs.rs/websocket/latest/websocket/receiver/index.html: mod websocket::receiver - receiver\n\u27e817\u27e9 https://docs.rs/websocket/latest/websocket/result/index.html: mod websocket::result - result\n\u27e818\u27e9 https://docs.rs/websocket/latest/websocket/sender/index.html: mod websocket::sender - sender\n\u27e819\u27e9 https://docs.rs/websocket/latest/websocket/server/index.html: mod websocket::server - server\n\u27e820\u27e9 https://docs.rs/websocket/latest/websocket/stream/index.html: mod websocket::stream - stream\n\u27e821\u27e9 https://docs.rs/websocket/latest/websocket/sync/index.html: mod websocket::sync - sync\n\u27e822\u27e9 https://docs.rs/websocket/latest/websocket/ws/index.html: mod websocket::ws - ws\n\u27e823\u27e9 https://docs.rs/websocket/latest/websocket/#structs: \u00a7\n\u27e824\u27e9 https://docs.rs/websocket/latest/websocket/struct.CloseData.html: struct websocket::CloseData - CloseData\n\u27e825\u27e9 https://docs.rs/websocket/latest/websocket/struct.Message.html: struct websocket::Message - Message\n\u27e826\u27e9 https://docs.rs/websocket/latest/websocket/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/websocket/latest/websocket/enum.OwnedMessage.html: enum websocket::OwnedMessage - OwnedMessage\n\u27e828\u27e9 https://docs.rs/websocket/latest/websocket/enum.WebSocketError.html: enum websocket::WebSocketError - WebSocketError\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `websocket` crate is a Rust library implementing the WebSocket protocol (RFC6455) with both synchronous and asynchronous support. It provides tools for building WebSocket clients and servers, including `ClientBuilder` for client creation and `Server` for managing connections. Key features include modular implementations for message handling, codecs, streams, and extensibility via the `ws` module, along with re-exports for dependencies like `futures` and `native_tls`.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 4.0,
    "factual_counterfactual": "### Pair 1: Synchronous and Asynchronous Support  \n\u2705 **Factual:** The `websocket` crate provides both synchronous and asynchronous implementations, allowing developers to choose their preferred mode by enabling the corresponding feature flags (`sync` or `async`).  \n\u274c **Counterfactual:** The `websocket` crate only supports asynchronous WebSocket connections and does not provide any synchronous implementation.  \n\n---\n\n### Pair 2: Client and Server Functionality  \n\u2705 **Factual:** The `websocket` crate includes functionality for both WebSocket clients and servers, with the `ClientBuilder` struct for creating clients and the `Server` struct for managing server-side connections.  \n\u274c **Counterfactual:** The `websocket` crate only supports WebSocket clients and does not include any server-side functionality.  \n\n---\n\n### Pair 3: Extensibility via the `ws` Module  \n\u2705 **Factual:** The `ws` module in the `websocket` crate provides traits and functions for extending or customizing WebSocket functionality at a lower level.  \n\u274c **Counterfactual:** The `websocket` crate does not provide any mechanisms for extending or customizing its functionality, and all features are fixed and non-extensible.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}