{
    "name": "rocksdb",
    "version": "0.23.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/rocksdb/latest/rocksdb/all.html \"show sidebar\")\n# Crate rocksdbCopy item path\n[Settings](https://docs.rs/rocksdb/latest/settings.html)\n[Help](https://docs.rs/rocksdb/latest/help.html)\nSummary[Source](https://docs.rs/rocksdb/latest/src/rocksdb/lib.rs.html#16-322)\nExpand description\nRust wrapper for RocksDB.\n## [\u00a7](https://docs.rs/rocksdb/latest/rocksdb/#examples)Examples\n```\nuse rocksdb::{DB, Options};\n// NB: db is automatically closed at end of lifetime\nlet tempdir = tempfile::Builder::new()\n  .prefix(\"_path_for_rocksdb_storage\")\n  .tempdir()\n  .expect(\"Failed to create temporary path for the _path_for_rocksdb_storage\");\nlet path = tempdir.path();\n{\n  let db = DB::open_default(path).unwrap();\n  db.put(b\"my key\", b\"my value\").unwrap();\n  match db.get(b\"my key\") {\n    Ok(Some(value)) => println!(\"retrieved value {}\", String::from_utf8(value).unwrap()),\n    Ok(None) => println!(\"value not found\"),\n    Err(e) => println!(\"operational problem encountered: {}\", e),\n  }\n  db.delete(b\"my key\").unwrap();\n}\nlet _ = DB::destroy(&Options::default(), path);\n```\n\nOpening a database and a single column family with custom options:\n```\nuse rocksdb::{DB, ColumnFamilyDescriptor, Options};\nlet tempdir = tempfile::Builder::new()\n  .prefix(\"_path_for_rocksdb_storage_with_cfs\")\n  .tempdir()\n  .expect(\"Failed to create temporary path for the _path_for_rocksdb_storage_with_cfs.\");\nlet path = tempdir.path();\nlet mut cf_opts = Options::default();\ncf_opts.set_max_write_buffer_number(16);\nlet cf = ColumnFamilyDescriptor::new(\"cf1\", cf_opts);\nlet mut db_opts = Options::default();\ndb_opts.create_missing_column_families(true);\ndb_opts.create_if_missing(true);\n{\n  let db = DB::open_cf_descriptors(&db_opts, path, vec![cf]).unwrap();\n}\nlet _ = DB::destroy(&db_opts, path);\n```\n\n## Re-exports[\u00a7](https://docs.rs/rocksdb/latest/rocksdb/#reexports)\n\n`pub use crate::compaction_filter::Decision[](https://docs.rs/rocksdb/latest/rocksdb/compaction_filter/enum.Decision.html \"enum rocksdb::compaction_filter::Decision\") as CompactionDecision;`\n\n\n`pub use crate::merge_operator::MergeOperands[](https://docs.rs/rocksdb/latest/rocksdb/merge_operator/struct.MergeOperands.html \"struct rocksdb::merge_operator::MergeOperands\");`\n\n\n`pub use crate::perf::PerfContext[](https://docs.rs/rocksdb/latest/rocksdb/perf/struct.PerfContext.html \"struct rocksdb::perf::PerfContext\");`\n\n\n`pub use crate::perf::PerfMetric[](https://docs.rs/rocksdb/latest/rocksdb/perf/enum.PerfMetric.html \"enum rocksdb::perf::PerfMetric\");`\n\n\n`pub use crate::perf::PerfStatsLevel[](https://docs.rs/rocksdb/latest/rocksdb/perf/enum.PerfStatsLevel.html \"enum rocksdb::perf::PerfStatsLevel\");`\n\n## Modules[\u00a7](https://docs.rs/rocksdb/latest/rocksdb/#modules)\n\n[backup](https://docs.rs/rocksdb/latest/rocksdb/backup/index.html \"mod rocksdb::backup\")\n\n\n[checkpoint](https://docs.rs/rocksdb/latest/rocksdb/checkpoint/index.html \"mod rocksdb::checkpoint\")\n    Implementation of bindings to RocksDB Checkpoint[1](https://github.com/facebook/rocksdb/wiki/Checkpoints) API\n\n[compaction_filter](https://docs.rs/rocksdb/latest/rocksdb/compaction_filter/index.html \"mod rocksdb::compaction_filter\")\n\n\n[compaction_filter_factory](https://docs.rs/rocksdb/latest/rocksdb/compaction_filter_factory/index.html \"mod rocksdb::compaction_filter_factory\")\n\n\n[merge_operator](https://docs.rs/rocksdb/latest/rocksdb/merge_operator/index.html \"mod rocksdb::merge_operator\")\n    rustic merge operator\n\n[perf](https://docs.rs/rocksdb/latest/rocksdb/perf/index.html \"mod rocksdb::perf\")\n\n\n[properties](https://docs.rs/rocksdb/latest/rocksdb/properties/index.html \"mod rocksdb::properties\")\n    Properties\n\n[statistics](https://docs.rs/rocksdb/latest/rocksdb/statistics/index.html \"mod rocksdb::statistics\")\n\n## Structs[\u00a7](https://docs.rs/rocksdb/latest/rocksdb/#structs)\n\n[BlockBasedOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.BlockBasedOptions.html \"struct rocksdb::BlockBasedOptions\")\n    For configuring block-based file storage.\n\n[BoundColumnFamily](https://docs.rs/rocksdb/latest/rocksdb/struct.BoundColumnFamily.html \"struct rocksdb::BoundColumnFamily\")\n    A specialized opaque type used to represent a column family by the [`MultiThreaded`](https://docs.rs/rocksdb/latest/rocksdb/struct.MultiThreaded.html \"struct rocksdb::MultiThreaded\") mode. Clone (and Copy) is derived to behave like `&ColumnFamily` (this is used for single-threaded mode). `Clone`/`Copy` is safe because this lifetime is bound to DB like iterators/snapshots. On top of it, this is as cheap and small as `&ColumnFamily` because this only has a single pointer-wide field.\n\n[Cache](https://docs.rs/rocksdb/latest/rocksdb/struct.Cache.html \"struct rocksdb::Cache\")\n\n\n[ColumnFamily](https://docs.rs/rocksdb/latest/rocksdb/struct.ColumnFamily.html \"struct rocksdb::ColumnFamily\")\n    An opaque type used to represent a column family. Returned from some functions, and used in others\n\n[ColumnFamilyDescriptor](https://docs.rs/rocksdb/latest/rocksdb/struct.ColumnFamilyDescriptor.html \"struct rocksdb::ColumnFamilyDescriptor\")\n    A descriptor for a RocksDB column family.\n\n[CompactOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.CompactOptions.html \"struct rocksdb::CompactOptions\")\n\n\n[CuckooTableOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.CuckooTableOptions.html \"struct rocksdb::CuckooTableOptions\")\n    Configuration of cuckoo-based storage.\n\n[DBCommon](https://docs.rs/rocksdb/latest/rocksdb/struct.DBCommon.html \"struct rocksdb::DBCommon\")\n    A helper type to implement some common methods for [`DBWithThreadMode`](https://docs.rs/rocksdb/latest/rocksdb/type.DBWithThreadMode.html \"type rocksdb::DBWithThreadMode\") and [`OptimisticTransactionDB`](https://docs.rs/rocksdb/latest/rocksdb/type.OptimisticTransactionDB.html \"type rocksdb::OptimisticTransactionDB\").\n\n[DBIteratorWithThreadMode](https://docs.rs/rocksdb/latest/rocksdb/struct.DBIteratorWithThreadMode.html \"struct rocksdb::DBIteratorWithThreadMode\")\n    An iterator over a database or column family, with specifiable ranges and direction.\n\n[DBPath](https://docs.rs/rocksdb/latest/rocksdb/struct.DBPath.html \"struct rocksdb::DBPath\")\n    Represents a path where sst files can be put into\n\n[DBPinnableSlice](https://docs.rs/rocksdb/latest/rocksdb/struct.DBPinnableSlice.html \"struct rocksdb::DBPinnableSlice\")\n    Wrapper around RocksDB PinnableSlice struct.\n\n[DBRawIteratorWithThreadMode](https://docs.rs/rocksdb/latest/rocksdb/struct.DBRawIteratorWithThreadMode.html \"struct rocksdb::DBRawIteratorWithThreadMode\")\n    An iterator over a database or column family, with specifiable ranges and direction.\n\n[DBWALIterator](https://docs.rs/rocksdb/latest/rocksdb/struct.DBWALIterator.html \"struct rocksdb::DBWALIterator\")\n    Iterates the batches of writes since a given sequence number.\n\n[Env](https://docs.rs/rocksdb/latest/rocksdb/struct.Env.html \"struct rocksdb::Env\")\n    An Env is an interface used by the rocksdb implementation to access operating system functionality like the filesystem etc. Callers may wish to provide a custom Env object when opening a database to get fine gain control; e.g., to rate limit file system operations.\n\n[Error](https://docs.rs/rocksdb/latest/rocksdb/struct.Error.html \"struct rocksdb::Error\")\n    A simple wrapper round a string, used for errors reported from ffi calls.\n\n[FifoCompactOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.FifoCompactOptions.html \"struct rocksdb::FifoCompactOptions\")\n\n\n[FlushOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.FlushOptions.html \"struct rocksdb::FlushOptions\")\n    Optionally wait for the memtable flush to be performed.\n\n[IngestExternalFileOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.IngestExternalFileOptions.html \"struct rocksdb::IngestExternalFileOptions\")\n    For configuring external files ingestion.\n\n[LiveFile](https://docs.rs/rocksdb/latest/rocksdb/struct.LiveFile.html \"struct rocksdb::LiveFile\")\n    The metadata that describes a SST file\n\n[LruCacheOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.LruCacheOptions.html \"struct rocksdb::LruCacheOptions\")\n\n\n[MultiThreaded](https://docs.rs/rocksdb/latest/rocksdb/struct.MultiThreaded.html \"struct rocksdb::MultiThreaded\")\n    Actual marker type for the marker trait `ThreadMode`, which holds a collection of column families wrapped in a RwLock to be mutated concurrently. The other mode is [`SingleThreaded`](https://docs.rs/rocksdb/latest/rocksdb/struct.SingleThreaded.html \"struct rocksdb::SingleThreaded\").\n\n[OptimisticTransactionOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.OptimisticTransactionOptions.html \"struct rocksdb::OptimisticTransactionOptions\")\n\n\n[Options](https://docs.rs/rocksdb/latest/rocksdb/struct.Options.html \"struct rocksdb::Options\")\n    Database-wide options around performance and behavior.\n\n[PlainTableFactoryOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.PlainTableFactoryOptions.html \"struct rocksdb::PlainTableFactoryOptions\")\n    Used with DBOptions::set_plain_table_factory. See official [wiki](https://github.com/facebook/rocksdb/wiki/PlainTable-Format) for more information.\n\n[PrefixRange](https://docs.rs/rocksdb/latest/rocksdb/struct.PrefixRange.html \"struct rocksdb::PrefixRange\")\n    Representation of a range of keys starting with given prefix.\n\n[ReadOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.ReadOptions.html \"struct rocksdb::ReadOptions\")\n\n\n[SingleThreaded](https://docs.rs/rocksdb/latest/rocksdb/struct.SingleThreaded.html \"struct rocksdb::SingleThreaded\")\n    Actual marker type for the marker trait `ThreadMode`, which holds a collection of column families without synchronization primitive, providing no overhead for the single-threaded column family alternations. The other mode is [`MultiThreaded`](https://docs.rs/rocksdb/latest/rocksdb/struct.MultiThreaded.html \"struct rocksdb::MultiThreaded\").\n\n[SliceTransform](https://docs.rs/rocksdb/latest/rocksdb/struct.SliceTransform.html \"struct rocksdb::SliceTransform\")\n    A `SliceTransform` is a generic pluggable way of transforming one string to another. Its primary use-case is in configuring rocksdb to store prefix blooms by setting prefix_extractor in ColumnFamilyOptions.\n\n[SnapshotWithThreadMode](https://docs.rs/rocksdb/latest/rocksdb/struct.SnapshotWithThreadMode.html \"struct rocksdb::SnapshotWithThreadMode\")\n    A consistent view of the database at the point of creation.\n\n[SstFileWriter](https://docs.rs/rocksdb/latest/rocksdb/struct.SstFileWriter.html \"struct rocksdb::SstFileWriter\")\n    SstFileWriter is used to create sst files that can be added to database later All keys in files generated by SstFileWriter will have sequence number = 0.\n\n[Transaction](https://docs.rs/rocksdb/latest/rocksdb/struct.Transaction.html \"struct rocksdb::Transaction\")\n    RocksDB Transaction.\n\n[TransactionDB](https://docs.rs/rocksdb/latest/rocksdb/struct.TransactionDB.html \"struct rocksdb::TransactionDB\")\n    RocksDB TransactionDB.\n\n[TransactionDBOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.TransactionDBOptions.html \"struct rocksdb::TransactionDBOptions\")\n\n\n[TransactionOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.TransactionOptions.html \"struct rocksdb::TransactionOptions\")\n\n\n[UniversalCompactOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.UniversalCompactOptions.html \"struct rocksdb::UniversalCompactOptions\")\n\n\n[WaitForCompactOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.WaitForCompactOptions.html \"struct rocksdb::WaitForCompactOptions\")\n\n\n[WriteBatchWithTransaction](https://docs.rs/rocksdb/latest/rocksdb/struct.WriteBatchWithTransaction.html \"struct rocksdb::WriteBatchWithTransaction\")\n    An atomic batch of write operations.\n\n[WriteBufferManager](https://docs.rs/rocksdb/latest/rocksdb/struct.WriteBufferManager.html \"struct rocksdb::WriteBufferManager\")\n\n\n[WriteOptions](https://docs.rs/rocksdb/latest/rocksdb/struct.WriteOptions.html \"struct rocksdb::WriteOptions\")\n    Optionally disable WAL or sync for this write.\n## Enums[\u00a7](https://docs.rs/rocksdb/latest/rocksdb/#enums)\n\n[BlockBasedIndexType](https://docs.rs/rocksdb/latest/rocksdb/enum.BlockBasedIndexType.html \"enum rocksdb::BlockBasedIndexType\")\n    Used by BlockBasedOptions::set_index_type.\n\n[BottommostLevelCompaction](https://docs.rs/rocksdb/latest/rocksdb/enum.BottommostLevelCompaction.html \"enum rocksdb::BottommostLevelCompaction\")\n\n\n[ChecksumType](https://docs.rs/rocksdb/latest/rocksdb/enum.ChecksumType.html \"enum rocksdb::ChecksumType\")\n    Used by BlockBasedOptions::set_checksum_type.\n\n[ColumnFamilyTtl](https://docs.rs/rocksdb/latest/rocksdb/enum.ColumnFamilyTtl.html \"enum rocksdb::ColumnFamilyTtl\")\n    Specifies the TTL behavior for a column family. <https://github.com/facebook/rocksdb/blob/18cecb9c46b4c2a8b148659dac2fcab5a843d32b/include/rocksdb/utilities/db_ttl.h#L16-L46>\n\n[CompactionPri](https://docs.rs/rocksdb/latest/rocksdb/enum.CompactionPri.html \"enum rocksdb::CompactionPri\")\n\n\n[DBCompactionStyle](https://docs.rs/rocksdb/latest/rocksdb/enum.DBCompactionStyle.html \"enum rocksdb::DBCompactionStyle\")\n\n\n[DBCompressionType](https://docs.rs/rocksdb/latest/rocksdb/enum.DBCompressionType.html \"enum rocksdb::DBCompressionType\")\n\n\n[DBRecoveryMode](https://docs.rs/rocksdb/latest/rocksdb/enum.DBRecoveryMode.html \"enum rocksdb::DBRecoveryMode\")\n\n\n[DataBlockIndexType](https://docs.rs/rocksdb/latest/rocksdb/enum.DataBlockIndexType.html \"enum rocksdb::DataBlockIndexType\")\n    Used by BlockBasedOptions::set_data_block_index_type.\n\n[Direction](https://docs.rs/rocksdb/latest/rocksdb/enum.Direction.html \"enum rocksdb::Direction\")\n\n\n[ErrorKind](https://docs.rs/rocksdb/latest/rocksdb/enum.ErrorKind.html \"enum rocksdb::ErrorKind\")\n    RocksDB error kind.\n\n[IteratorMode](https://docs.rs/rocksdb/latest/rocksdb/enum.IteratorMode.html \"enum rocksdb::IteratorMode\")\n\n\n[KeyEncodingType](https://docs.rs/rocksdb/latest/rocksdb/enum.KeyEncodingType.html \"enum rocksdb::KeyEncodingType\")\n    Used in [`PlainTableFactoryOptions`](https://docs.rs/rocksdb/latest/rocksdb/struct.PlainTableFactoryOptions.html \"struct rocksdb::PlainTableFactoryOptions\").\n\n[LogLevel](https://docs.rs/rocksdb/latest/rocksdb/enum.LogLevel.html \"enum rocksdb::LogLevel\")\n\n\n[MemtableFactory](https://docs.rs/rocksdb/latest/rocksdb/enum.MemtableFactory.html \"enum rocksdb::MemtableFactory\")\n    Defines the underlying memtable implementation. See official [wiki](https://github.com/facebook/rocksdb/wiki/MemTable) for more information.\n\n[ReadTier](https://docs.rs/rocksdb/latest/rocksdb/enum.ReadTier.html \"enum rocksdb::ReadTier\")\n\n\n[UniversalCompactionStopStyle](https://docs.rs/rocksdb/latest/rocksdb/enum.UniversalCompactionStopStyle.html \"enum rocksdb::UniversalCompactionStopStyle\")\n\n## Constants[\u00a7](https://docs.rs/rocksdb/latest/rocksdb/#constants)\n\n[DEFAULT_COLUMN_FAMILY_NAME](https://docs.rs/rocksdb/latest/rocksdb/constant.DEFAULT_COLUMN_FAMILY_NAME.html \"constant rocksdb::DEFAULT_COLUMN_FAMILY_NAME\")\n    The name of the default column family.\n## Traits[\u00a7](https://docs.rs/rocksdb/latest/rocksdb/#traits)\n\n[AsColumnFamilyRef](https://docs.rs/rocksdb/latest/rocksdb/trait.AsColumnFamilyRef.html \"trait rocksdb::AsColumnFamilyRef\")\n    Utility trait to accept both supported references to `ColumnFamily` (`&ColumnFamily` and `BoundColumnFamily`)\n\n[CStrLike](https://docs.rs/rocksdb/latest/rocksdb/trait.CStrLike.html \"trait rocksdb::CStrLike\")\n    Value which can be converted into a C string.\n\n[DBAccess](https://docs.rs/rocksdb/latest/rocksdb/trait.DBAccess.html \"trait rocksdb::DBAccess\")\n    Minimal set of DB-related methods, intended to be generic over `DBWithThreadMode<T>`. Mainly used internally\n\n[IterateBounds](https://docs.rs/rocksdb/latest/rocksdb/trait.IterateBounds.html \"trait rocksdb::IterateBounds\")\n    A range which can be set as iterate bounds on [`crate::ReadOptions`](https://docs.rs/rocksdb/latest/rocksdb/struct.ReadOptions.html \"struct rocksdb::ReadOptions\").\n\n[ThreadMode](https://docs.rs/rocksdb/latest/rocksdb/trait.ThreadMode.html \"trait rocksdb::ThreadMode\")\n    Marker trait to specify single or multi threaded column family alternations for [`DBWithThreadMode<T>`](https://docs.rs/rocksdb/latest/rocksdb/type.DBWithThreadMode.html \"type rocksdb::DBWithThreadMode\")\n\n[WriteBatchIterator](https://docs.rs/rocksdb/latest/rocksdb/trait.WriteBatchIterator.html \"trait rocksdb::WriteBatchIterator\")\n    Receives the puts and deletes of a write batch.\n## Type Aliases[\u00a7](https://docs.rs/rocksdb/latest/rocksdb/#types)\n\n[ColumnFamilyRef](https://docs.rs/rocksdb/latest/rocksdb/type.ColumnFamilyRef.html \"type rocksdb::ColumnFamilyRef\")\n    Handy type alias to hide actual type difference to reference [`ColumnFamily`](https://docs.rs/rocksdb/latest/rocksdb/struct.ColumnFamily.html \"struct rocksdb::ColumnFamily\") depending on the `multi-threaded-cf` crate feature.\n\n[DB](https://docs.rs/rocksdb/latest/rocksdb/type.DB.html \"type rocksdb::DB\")\n    A type alias to DB instance type with the single-threaded column family creations/deletions\n\n[DBIterator](https://docs.rs/rocksdb/latest/rocksdb/type.DBIterator.html \"type rocksdb::DBIterator\")\n    A type alias to keep compatibility. See [`DBIteratorWithThreadMode`](https://docs.rs/rocksdb/latest/rocksdb/struct.DBIteratorWithThreadMode.html \"struct rocksdb::DBIteratorWithThreadMode\") for details\n\n[DBRawIterator](https://docs.rs/rocksdb/latest/rocksdb/type.DBRawIterator.html \"type rocksdb::DBRawIterator\")\n    A type alias to keep compatibility. See [`DBRawIteratorWithThreadMode`](https://docs.rs/rocksdb/latest/rocksdb/struct.DBRawIteratorWithThreadMode.html \"struct rocksdb::DBRawIteratorWithThreadMode\") for details\n\n[DBWithThreadMode](https://docs.rs/rocksdb/latest/rocksdb/type.DBWithThreadMode.html \"type rocksdb::DBWithThreadMode\")\n    A type alias to RocksDB database.\n\n[OptimisticTransactionDB](https://docs.rs/rocksdb/latest/rocksdb/type.OptimisticTransactionDB.html \"type rocksdb::OptimisticTransactionDB\")\n    A type alias to RocksDB Optimistic Transaction DB.\n\n[Snapshot](https://docs.rs/rocksdb/latest/rocksdb/type.Snapshot.html \"type rocksdb::Snapshot\")\n    A type alias to keep compatibility. See [`SnapshotWithThreadMode`](https://docs.rs/rocksdb/latest/rocksdb/struct.SnapshotWithThreadMode.html \"struct rocksdb::SnapshotWithThreadMode\") for details\n\n[WriteBatch](https://docs.rs/rocksdb/latest/rocksdb/type.WriteBatch.html \"type rocksdb::WriteBatch\")\n    A type alias to keep compatibility. See [`WriteBatchWithTransaction`](https://docs.rs/rocksdb/latest/rocksdb/struct.WriteBatchWithTransaction.html \"struct rocksdb::WriteBatchWithTransaction\") for details\n",
        "markdown_with_citations": "[](https://docs.rs/rocksdb/latest/rocksdb/all.html \"show sidebar\")\n# Crate rocksdbCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRust wrapper for RocksDB.\n## \u00a7\u27e84\u27e9Examples\n```\nuse rocksdb::{DB, Options};\n// NB: db is automatically closed at end of lifetime\nlet tempdir = tempfile::Builder::new()\n  .prefix(\"_path_for_rocksdb_storage\")\n  .tempdir()\n  .expect(\"Failed to create temporary path for the _path_for_rocksdb_storage\");\nlet path = tempdir.path();\n{\n  let db = DB::open_default(path).unwrap();\n  db.put(b\"my key\", b\"my value\").unwrap();\n  match db.get(b\"my key\") {\n    Ok(Some(value)) => println!(\"retrieved value {}\", String::from_utf8(value).unwrap()),\n    Ok(None) => println!(\"value not found\"),\n    Err(e) => println!(\"operational problem encountered: {}\", e),\n  }\n  db.delete(b\"my key\").unwrap();\n}\nlet _ = DB::destroy(&Options::default(), path);\n```\n\nOpening a database and a single column family with custom options:\n```\nuse rocksdb::{DB, ColumnFamilyDescriptor, Options};\nlet tempdir = tempfile::Builder::new()\n  .prefix(\"_path_for_rocksdb_storage_with_cfs\")\n  .tempdir()\n  .expect(\"Failed to create temporary path for the _path_for_rocksdb_storage_with_cfs.\");\nlet path = tempdir.path();\nlet mut cf_opts = Options::default();\ncf_opts.set_max_write_buffer_number(16);\nlet cf = ColumnFamilyDescriptor::new(\"cf1\", cf_opts);\nlet mut db_opts = Options::default();\ndb_opts.create_missing_column_families(true);\ndb_opts.create_if_missing(true);\n{\n  let db = DB::open_cf_descriptors(&db_opts, path, vec![cf]).unwrap();\n}\nlet _ = DB::destroy(&db_opts, path);\n```\n\n## Re-exports\u00a7\u27e85\u27e9\n\n`pub use crate::compaction_filter::Decision[](https://docs.rs/rocksdb/latest/rocksdb/compaction_filter/enum.Decision.html \"enum rocksdb::compaction_filter::Decision\") as CompactionDecision;`\n\n\n`pub use crate::merge_operator::MergeOperands[](https://docs.rs/rocksdb/latest/rocksdb/merge_operator/struct.MergeOperands.html \"struct rocksdb::merge_operator::MergeOperands\");`\n\n\n`pub use crate::perf::PerfContext[](https://docs.rs/rocksdb/latest/rocksdb/perf/struct.PerfContext.html \"struct rocksdb::perf::PerfContext\");`\n\n\n`pub use crate::perf::PerfMetric[](https://docs.rs/rocksdb/latest/rocksdb/perf/enum.PerfMetric.html \"enum rocksdb::perf::PerfMetric\");`\n\n\n`pub use crate::perf::PerfStatsLevel[](https://docs.rs/rocksdb/latest/rocksdb/perf/enum.PerfStatsLevel.html \"enum rocksdb::perf::PerfStatsLevel\");`\n\n## Modules\u00a7\u27e86\u27e9\n\nbackup\u27e87\u27e9\n\n\ncheckpoint\u27e88\u27e9\n    Implementation of bindings to RocksDB Checkpoint1\u27e89\u27e9 API\n\ncompaction_filter\u27e810\u27e9\n\n\ncompaction_filter_factory\u27e811\u27e9\n\n\nmerge_operator\u27e812\u27e9\n    rustic merge operator\n\nperf\u27e813\u27e9\n\n\nproperties\u27e814\u27e9\n    Properties\n\nstatistics\u27e815\u27e9\n\n## Structs\u00a7\u27e816\u27e9\n\nBlockBasedOptions\u27e817\u27e9\n    For configuring block-based file storage.\n\nBoundColumnFamily\u27e818\u27e9\n    A specialized opaque type used to represent a column family by the `MultiThreaded`\u27e819\u27e9 mode. Clone (and Copy) is derived to behave like `&ColumnFamily` (this is used for single-threaded mode). `Clone`/`Copy` is safe because this lifetime is bound to DB like iterators/snapshots. On top of it, this is as cheap and small as `&ColumnFamily` because this only has a single pointer-wide field.\n\nCache\u27e820\u27e9\n\n\nColumnFamily\u27e821\u27e9\n    An opaque type used to represent a column family. Returned from some functions, and used in others\n\nColumnFamilyDescriptor\u27e822\u27e9\n    A descriptor for a RocksDB column family.\n\nCompactOptions\u27e823\u27e9\n\n\nCuckooTableOptions\u27e824\u27e9\n    Configuration of cuckoo-based storage.\n\nDBCommon\u27e825\u27e9\n    A helper type to implement some common methods for `DBWithThreadMode`\u27e826\u27e9 and `OptimisticTransactionDB`\u27e827\u27e9.\n\nDBIteratorWithThreadMode\u27e828\u27e9\n    An iterator over a database or column family, with specifiable ranges and direction.\n\nDBPath\u27e829\u27e9\n    Represents a path where sst files can be put into\n\nDBPinnableSlice\u27e830\u27e9\n    Wrapper around RocksDB PinnableSlice struct.\n\nDBRawIteratorWithThreadMode\u27e831\u27e9\n    An iterator over a database or column family, with specifiable ranges and direction.\n\nDBWALIterator\u27e832\u27e9\n    Iterates the batches of writes since a given sequence number.\n\nEnv\u27e833\u27e9\n    An Env is an interface used by the rocksdb implementation to access operating system functionality like the filesystem etc. Callers may wish to provide a custom Env object when opening a database to get fine gain control; e.g., to rate limit file system operations.\n\nError\u27e834\u27e9\n    A simple wrapper round a string, used for errors reported from ffi calls.\n\nFifoCompactOptions\u27e835\u27e9\n\n\nFlushOptions\u27e836\u27e9\n    Optionally wait for the memtable flush to be performed.\n\nIngestExternalFileOptions\u27e837\u27e9\n    For configuring external files ingestion.\n\nLiveFile\u27e838\u27e9\n    The metadata that describes a SST file\n\nLruCacheOptions\u27e839\u27e9\n\n\nMultiThreaded\u27e819\u27e9\n    Actual marker type for the marker trait `ThreadMode`, which holds a collection of column families wrapped in a RwLock to be mutated concurrently. The other mode is `SingleThreaded`\u27e840\u27e9.\n\nOptimisticTransactionOptions\u27e841\u27e9\n\n\nOptions\u27e842\u27e9\n    Database-wide options around performance and behavior.\n\nPlainTableFactoryOptions\u27e843\u27e9\n    Used with DBOptions::set_plain_table_factory. See official wiki\u27e844\u27e9 for more information.\n\nPrefixRange\u27e845\u27e9\n    Representation of a range of keys starting with given prefix.\n\nReadOptions\u27e846\u27e9\n\n\nSingleThreaded\u27e840\u27e9\n    Actual marker type for the marker trait `ThreadMode`, which holds a collection of column families without synchronization primitive, providing no overhead for the single-threaded column family alternations. The other mode is `MultiThreaded`\u27e819\u27e9.\n\nSliceTransform\u27e847\u27e9\n    A `SliceTransform` is a generic pluggable way of transforming one string to another. Its primary use-case is in configuring rocksdb to store prefix blooms by setting prefix_extractor in ColumnFamilyOptions.\n\nSnapshotWithThreadMode\u27e848\u27e9\n    A consistent view of the database at the point of creation.\n\nSstFileWriter\u27e849\u27e9\n    SstFileWriter is used to create sst files that can be added to database later All keys in files generated by SstFileWriter will have sequence number = 0.\n\nTransaction\u27e850\u27e9\n    RocksDB Transaction.\n\nTransactionDB\u27e851\u27e9\n    RocksDB TransactionDB.\n\nTransactionDBOptions\u27e852\u27e9\n\n\nTransactionOptions\u27e853\u27e9\n\n\nUniversalCompactOptions\u27e854\u27e9\n\n\nWaitForCompactOptions\u27e855\u27e9\n\n\nWriteBatchWithTransaction\u27e856\u27e9\n    An atomic batch of write operations.\n\nWriteBufferManager\u27e857\u27e9\n\n\nWriteOptions\u27e858\u27e9\n    Optionally disable WAL or sync for this write.\n## Enums\u00a7\u27e859\u27e9\n\nBlockBasedIndexType\u27e860\u27e9\n    Used by BlockBasedOptions::set_index_type.\n\nBottommostLevelCompaction\u27e861\u27e9\n\n\nChecksumType\u27e862\u27e9\n    Used by BlockBasedOptions::set_checksum_type.\n\nColumnFamilyTtl\u27e863\u27e9\n    Specifies the TTL behavior for a column family. <https://github.com/facebook/rocksdb/blob/18cecb9c46b4c2a8b148659dac2fcab5a843d32b/include/rocksdb/utilities/db_ttl.h#L16-L46>\n\nCompactionPri\u27e864\u27e9\n\n\nDBCompactionStyle\u27e865\u27e9\n\n\nDBCompressionType\u27e866\u27e9\n\n\nDBRecoveryMode\u27e867\u27e9\n\n\nDataBlockIndexType\u27e868\u27e9\n    Used by BlockBasedOptions::set_data_block_index_type.\n\nDirection\u27e869\u27e9\n\n\nErrorKind\u27e870\u27e9\n    RocksDB error kind.\n\nIteratorMode\u27e871\u27e9\n\n\nKeyEncodingType\u27e872\u27e9\n    Used in `PlainTableFactoryOptions`\u27e843\u27e9.\n\nLogLevel\u27e873\u27e9\n\n\nMemtableFactory\u27e874\u27e9\n    Defines the underlying memtable implementation. See official wiki\u27e875\u27e9 for more information.\n\nReadTier\u27e876\u27e9\n\n\nUniversalCompactionStopStyle\u27e877\u27e9\n\n## Constants\u00a7\u27e878\u27e9\n\nDEFAULT_COLUMN_FAMILY_NAME\u27e879\u27e9\n    The name of the default column family.\n## Traits\u00a7\u27e880\u27e9\n\nAsColumnFamilyRef\u27e881\u27e9\n    Utility trait to accept both supported references to `ColumnFamily` (`&ColumnFamily` and `BoundColumnFamily`)\n\nCStrLike\u27e882\u27e9\n    Value which can be converted into a C string.\n\nDBAccess\u27e883\u27e9\n    Minimal set of DB-related methods, intended to be generic over `DBWithThreadMode<T>`. Mainly used internally\n\nIterateBounds\u27e884\u27e9\n    A range which can be set as iterate bounds on `crate::ReadOptions`\u27e846\u27e9.\n\nThreadMode\u27e885\u27e9\n    Marker trait to specify single or multi threaded column family alternations for `DBWithThreadMode<T>`\u27e826\u27e9\n\nWriteBatchIterator\u27e886\u27e9\n    Receives the puts and deletes of a write batch.\n## Type Aliases\u00a7\u27e887\u27e9\n\nColumnFamilyRef\u27e888\u27e9\n    Handy type alias to hide actual type difference to reference `ColumnFamily`\u27e821\u27e9 depending on the `multi-threaded-cf` crate feature.\n\nDB\u27e889\u27e9\n    A type alias to DB instance type with the single-threaded column family creations/deletions\n\nDBIterator\u27e890\u27e9\n    A type alias to keep compatibility. See `DBIteratorWithThreadMode`\u27e828\u27e9 for details\n\nDBRawIterator\u27e891\u27e9\n    A type alias to keep compatibility. See `DBRawIteratorWithThreadMode`\u27e831\u27e9 for details\n\nDBWithThreadMode\u27e826\u27e9\n    A type alias to RocksDB database.\n\nOptimisticTransactionDB\u27e827\u27e9\n    A type alias to RocksDB Optimistic Transaction DB.\n\nSnapshot\u27e892\u27e9\n    A type alias to keep compatibility. See `SnapshotWithThreadMode`\u27e848\u27e9 for details\n\nWriteBatch\u27e893\u27e9\n    A type alias to keep compatibility. See `WriteBatchWithTransaction`\u27e856\u27e9 for details\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rocksdb/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rocksdb/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rocksdb/latest/src/rocksdb/lib.rs.html#16-322: Source\n\u27e84\u27e9 https://docs.rs/rocksdb/latest/rocksdb/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/rocksdb/latest/rocksdb/#reexports: \u00a7\n\u27e86\u27e9 https://docs.rs/rocksdb/latest/rocksdb/#modules: \u00a7\n\u27e87\u27e9 https://docs.rs/rocksdb/latest/rocksdb/backup/index.html: mod rocksdb::backup - backup\n\u27e88\u27e9 https://docs.rs/rocksdb/latest/rocksdb/checkpoint/index.html: mod rocksdb::checkpoint - checkpoint\n\u27e89\u27e9 https://github.com/facebook/rocksdb/wiki/Checkpoints: 1\n\u27e810\u27e9 https://docs.rs/rocksdb/latest/rocksdb/compaction_filter/index.html: mod rocksdb::compaction_filter - compaction_filter\n\u27e811\u27e9 https://docs.rs/rocksdb/latest/rocksdb/compaction_filter_factory/index.html: mod rocksdb::compaction_filter_factory - compaction_filter_factory\n\u27e812\u27e9 https://docs.rs/rocksdb/latest/rocksdb/merge_operator/index.html: mod rocksdb::merge_operator - merge_operator\n\u27e813\u27e9 https://docs.rs/rocksdb/latest/rocksdb/perf/index.html: mod rocksdb::perf - perf\n\u27e814\u27e9 https://docs.rs/rocksdb/latest/rocksdb/properties/index.html: mod rocksdb::properties - properties\n\u27e815\u27e9 https://docs.rs/rocksdb/latest/rocksdb/statistics/index.html: mod rocksdb::statistics - statistics\n\u27e816\u27e9 https://docs.rs/rocksdb/latest/rocksdb/#structs: \u00a7\n\u27e817\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.BlockBasedOptions.html: struct rocksdb::BlockBasedOptions - BlockBasedOptions\n\u27e818\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.BoundColumnFamily.html: struct rocksdb::BoundColumnFamily - BoundColumnFamily\n\u27e819\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.MultiThreaded.html: struct rocksdb::MultiThreaded - `MultiThreaded`\n\u27e820\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.Cache.html: struct rocksdb::Cache - Cache\n\u27e821\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.ColumnFamily.html: struct rocksdb::ColumnFamily - ColumnFamily\n\u27e822\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.ColumnFamilyDescriptor.html: struct rocksdb::ColumnFamilyDescriptor - ColumnFamilyDescriptor\n\u27e823\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.CompactOptions.html: struct rocksdb::CompactOptions - CompactOptions\n\u27e824\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.CuckooTableOptions.html: struct rocksdb::CuckooTableOptions - CuckooTableOptions\n\u27e825\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.DBCommon.html: struct rocksdb::DBCommon - DBCommon\n\u27e826\u27e9 https://docs.rs/rocksdb/latest/rocksdb/type.DBWithThreadMode.html: type rocksdb::DBWithThreadMode - `DBWithThreadMode`\n\u27e827\u27e9 https://docs.rs/rocksdb/latest/rocksdb/type.OptimisticTransactionDB.html: type rocksdb::OptimisticTransactionDB - `OptimisticTransactionDB`\n\u27e828\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.DBIteratorWithThreadMode.html: struct rocksdb::DBIteratorWithThreadMode - DBIteratorWithThreadMode\n\u27e829\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.DBPath.html: struct rocksdb::DBPath - DBPath\n\u27e830\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.DBPinnableSlice.html: struct rocksdb::DBPinnableSlice - DBPinnableSlice\n\u27e831\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.DBRawIteratorWithThreadMode.html: struct rocksdb::DBRawIteratorWithThreadMode - DBRawIteratorWithThreadMode\n\u27e832\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.DBWALIterator.html: struct rocksdb::DBWALIterator - DBWALIterator\n\u27e833\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.Env.html: struct rocksdb::Env - Env\n\u27e834\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.Error.html: struct rocksdb::Error - Error\n\u27e835\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.FifoCompactOptions.html: struct rocksdb::FifoCompactOptions - FifoCompactOptions\n\u27e836\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.FlushOptions.html: struct rocksdb::FlushOptions - FlushOptions\n\u27e837\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.IngestExternalFileOptions.html: struct rocksdb::IngestExternalFileOptions - IngestExternalFileOptions\n\u27e838\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.LiveFile.html: struct rocksdb::LiveFile - LiveFile\n\u27e839\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.LruCacheOptions.html: struct rocksdb::LruCacheOptions - LruCacheOptions\n\u27e840\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.SingleThreaded.html: struct rocksdb::SingleThreaded - `SingleThreaded`\n\u27e841\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.OptimisticTransactionOptions.html: struct rocksdb::OptimisticTransactionOptions - OptimisticTransactionOptions\n\u27e842\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.Options.html: struct rocksdb::Options - Options\n\u27e843\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.PlainTableFactoryOptions.html: struct rocksdb::PlainTableFactoryOptions - PlainTableFactoryOptions\n\u27e844\u27e9 https://github.com/facebook/rocksdb/wiki/PlainTable-Format: wiki\n\u27e845\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.PrefixRange.html: struct rocksdb::PrefixRange - PrefixRange\n\u27e846\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.ReadOptions.html: struct rocksdb::ReadOptions - ReadOptions\n\u27e847\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.SliceTransform.html: struct rocksdb::SliceTransform - SliceTransform\n\u27e848\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.SnapshotWithThreadMode.html: struct rocksdb::SnapshotWithThreadMode - SnapshotWithThreadMode\n\u27e849\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.SstFileWriter.html: struct rocksdb::SstFileWriter - SstFileWriter\n\u27e850\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.Transaction.html: struct rocksdb::Transaction - Transaction\n\u27e851\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.TransactionDB.html: struct rocksdb::TransactionDB - TransactionDB\n\u27e852\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.TransactionDBOptions.html: struct rocksdb::TransactionDBOptions - TransactionDBOptions\n\u27e853\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.TransactionOptions.html: struct rocksdb::TransactionOptions - TransactionOptions\n\u27e854\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.UniversalCompactOptions.html: struct rocksdb::UniversalCompactOptions - UniversalCompactOptions\n\u27e855\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.WaitForCompactOptions.html: struct rocksdb::WaitForCompactOptions - WaitForCompactOptions\n\u27e856\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.WriteBatchWithTransaction.html: struct rocksdb::WriteBatchWithTransaction - WriteBatchWithTransaction\n\u27e857\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.WriteBufferManager.html: struct rocksdb::WriteBufferManager - WriteBufferManager\n\u27e858\u27e9 https://docs.rs/rocksdb/latest/rocksdb/struct.WriteOptions.html: struct rocksdb::WriteOptions - WriteOptions\n\u27e859\u27e9 https://docs.rs/rocksdb/latest/rocksdb/#enums: \u00a7\n\u27e860\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.BlockBasedIndexType.html: enum rocksdb::BlockBasedIndexType - BlockBasedIndexType\n\u27e861\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.BottommostLevelCompaction.html: enum rocksdb::BottommostLevelCompaction - BottommostLevelCompaction\n\u27e862\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.ChecksumType.html: enum rocksdb::ChecksumType - ChecksumType\n\u27e863\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.ColumnFamilyTtl.html: enum rocksdb::ColumnFamilyTtl - ColumnFamilyTtl\n\u27e864\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.CompactionPri.html: enum rocksdb::CompactionPri - CompactionPri\n\u27e865\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.DBCompactionStyle.html: enum rocksdb::DBCompactionStyle - DBCompactionStyle\n\u27e866\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.DBCompressionType.html: enum rocksdb::DBCompressionType - DBCompressionType\n\u27e867\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.DBRecoveryMode.html: enum rocksdb::DBRecoveryMode - DBRecoveryMode\n\u27e868\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.DataBlockIndexType.html: enum rocksdb::DataBlockIndexType - DataBlockIndexType\n\u27e869\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.Direction.html: enum rocksdb::Direction - Direction\n\u27e870\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.ErrorKind.html: enum rocksdb::ErrorKind - ErrorKind\n\u27e871\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.IteratorMode.html: enum rocksdb::IteratorMode - IteratorMode\n\u27e872\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.KeyEncodingType.html: enum rocksdb::KeyEncodingType - KeyEncodingType\n\u27e873\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.LogLevel.html: enum rocksdb::LogLevel - LogLevel\n\u27e874\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.MemtableFactory.html: enum rocksdb::MemtableFactory - MemtableFactory\n\u27e875\u27e9 https://github.com/facebook/rocksdb/wiki/MemTable: wiki\n\u27e876\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.ReadTier.html: enum rocksdb::ReadTier - ReadTier\n\u27e877\u27e9 https://docs.rs/rocksdb/latest/rocksdb/enum.UniversalCompactionStopStyle.html: enum rocksdb::UniversalCompactionStopStyle - UniversalCompactionStopStyle\n\u27e878\u27e9 https://docs.rs/rocksdb/latest/rocksdb/#constants: \u00a7\n\u27e879\u27e9 https://docs.rs/rocksdb/latest/rocksdb/constant.DEFAULT_COLUMN_FAMILY_NAME.html: constant rocksdb::DEFAULT_COLUMN_FAMILY_NAME - DEFAULT_COLUMN_FAMILY_NAME\n\u27e880\u27e9 https://docs.rs/rocksdb/latest/rocksdb/#traits: \u00a7\n\u27e881\u27e9 https://docs.rs/rocksdb/latest/rocksdb/trait.AsColumnFamilyRef.html: trait rocksdb::AsColumnFamilyRef - AsColumnFamilyRef\n\u27e882\u27e9 https://docs.rs/rocksdb/latest/rocksdb/trait.CStrLike.html: trait rocksdb::CStrLike - CStrLike\n\u27e883\u27e9 https://docs.rs/rocksdb/latest/rocksdb/trait.DBAccess.html: trait rocksdb::DBAccess - DBAccess\n\u27e884\u27e9 https://docs.rs/rocksdb/latest/rocksdb/trait.IterateBounds.html: trait rocksdb::IterateBounds - IterateBounds\n\u27e885\u27e9 https://docs.rs/rocksdb/latest/rocksdb/trait.ThreadMode.html: trait rocksdb::ThreadMode - ThreadMode\n\u27e886\u27e9 https://docs.rs/rocksdb/latest/rocksdb/trait.WriteBatchIterator.html: trait rocksdb::WriteBatchIterator - WriteBatchIterator\n\u27e887\u27e9 https://docs.rs/rocksdb/latest/rocksdb/#types: \u00a7\n\u27e888\u27e9 https://docs.rs/rocksdb/latest/rocksdb/type.ColumnFamilyRef.html: type rocksdb::ColumnFamilyRef - ColumnFamilyRef\n\u27e889\u27e9 https://docs.rs/rocksdb/latest/rocksdb/type.DB.html: type rocksdb::DB - DB\n\u27e890\u27e9 https://docs.rs/rocksdb/latest/rocksdb/type.DBIterator.html: type rocksdb::DBIterator - DBIterator\n\u27e891\u27e9 https://docs.rs/rocksdb/latest/rocksdb/type.DBRawIterator.html: type rocksdb::DBRawIterator - DBRawIterator\n\u27e892\u27e9 https://docs.rs/rocksdb/latest/rocksdb/type.Snapshot.html: type rocksdb::Snapshot - Snapshot\n\u27e893\u27e9 https://docs.rs/rocksdb/latest/rocksdb/type.WriteBatch.html: type rocksdb::WriteBatch - WriteBatch\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `rocksdb` crate is a Rust wrapper for RocksDB, a high-performance key-value store optimized for SSDs. It supports features like column families, transactions, snapshots, and custom configurations for compaction, caching, and write buffers. The crate provides tools for efficient data management, including iterators, batch writes, and external file ingestion, with options for single-threaded or multi-threaded modes.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Database Operations  \n\u2705 **Factual:** The `rocksdb` crate allows users to perform atomic batch write operations using the `WriteBatchWithTransaction` struct, ensuring transactional consistency.  \n\u274c **Counterfactual:** The `rocksdb` crate does not support batch write operations, requiring each write to be performed individually.  \n\n---\n\n### Pair 2: Column Families  \n\u2705 **Factual:** The `rocksdb` crate supports creating and managing multiple column families within a single database, enabling logical separation of data.  \n\u274c **Counterfactual:** The `rocksdb` crate only supports a single column family per database, making it unsuitable for applications requiring data separation.  \n\n---\n\n### Pair 3: Compression  \n\u2705 **Factual:** The `rocksdb` crate provides support for multiple compression algorithms, including Snappy and Zlib, which can be configured using the `DBCompressionType` enum.  \n\u274c **Counterfactual:** The `rocksdb` crate does not support compression, requiring all data to be stored uncompressed in the database.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}