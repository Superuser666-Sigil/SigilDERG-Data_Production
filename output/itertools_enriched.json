{
    "name": "itertools",
    "version": "0.14.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/itertools/latest/itertools/all.html \"show sidebar\")\n# Crate itertoolsCopy item path\n[Settings](https://docs.rs/itertools/latest/settings.html)\n[Help](https://docs.rs/itertools/latest/help.html)\nSummary[Source](https://docs.rs/itertools/latest/src/itertools/lib.rs.html#1-4713)\nExpand description\nExtra iterator adaptors, functions and macros.\nTo extend [`Iterator`](https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html \"trait core::iter::traits::iterator::Iterator\") with methods in this crate, import the [`Itertools`](https://docs.rs/itertools/latest/itertools/trait.Itertools.html \"trait itertools::Itertools\") trait:\n```\nuse itertools::Itertools;\n```\n\nNow, new methods like [`interleave`](https://docs.rs/itertools/latest/itertools/trait.Itertools.html#method.interleave \"method itertools::Itertools::interleave\") are available on all iterators:\n```\nuse itertools::Itertools;\nlet it = (1..3).interleave(vec![-1, -2]);\nitertools::assert_equal(it, vec![1, -1, 2, -2]);\n```\n\nMost iterator methods are also provided as functions (with the benefit that they convert parameters using [`IntoIterator`](https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html \"trait core::iter::traits::collect::IntoIterator\")):\n```\nuse itertools::interleave;\nfor elt in interleave(&[1, 2, 3], &[2, 3, 4]) {\n  /* loop body */\n}\n```\n\n### [\u00a7](https://docs.rs/itertools/latest/itertools/#crate-features)Crate Features\n  * `use_std`\n    * Enabled by default.\n    * Disable to compile itertools using `#![no_std]`. This disables any item that depend on allocations (see the `use_alloc` feature) and hash maps (like `unique`, `counts`, `into_grouping_map` and more).\n  * `use_alloc`\n    * Enabled by default.\n    * Enables any item that depend on allocations (like `chunk_by`, `kmerge`, `join` and many more).\n\n\n### [\u00a7](https://docs.rs/itertools/latest/itertools/#rust-version)Rust Version\nThis version of itertools requires Rust 1.63.0 or later.\n## Re-exports[\u00a7](https://docs.rs/itertools/latest/itertools/#reexports)\n\n`pub use crate::structs[](https://docs.rs/itertools/latest/itertools/structs/index.html \"mod itertools::structs\")::*;`\n\n## Modules[\u00a7](https://docs.rs/itertools/latest/itertools/#modules)\n\n[structs](https://docs.rs/itertools/latest/itertools/structs/index.html \"mod itertools::structs\")\n    The concrete iterator types.\n\n[traits](https://docs.rs/itertools/latest/itertools/traits/index.html \"mod itertools::traits\")\n    Traits helpful for using certain `Itertools` methods in generic contexts.\n## Macros[\u00a7](https://docs.rs/itertools/latest/itertools/#macros)\n\n[chain](https://docs.rs/itertools/latest/itertools/macro.chain.html \"macro itertools::chain\")\n    [Chain](https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.chain \"method core::iter::traits::iterator::Iterator::chain\") zero or more iterators together into one sequence.\n\n[iproduct](https://docs.rs/itertools/latest/itertools/macro.iproduct.html \"macro itertools::iproduct\")\n    Create an iterator over the \u201ccartesian product\u201d of iterators.\n\n[izip](https://docs.rs/itertools/latest/itertools/macro.izip.html \"macro itertools::izip\")\n    Create an iterator running multiple iterators in lockstep.\n## Enums[\u00a7](https://docs.rs/itertools/latest/itertools/#enums)\n\n[Diff](https://docs.rs/itertools/latest/itertools/enum.Diff.html \"enum itertools::Diff\")\n    A type returned by the [`diff_with`](https://docs.rs/itertools/latest/itertools/fn.diff_with.html \"fn itertools::diff_with\") function.\n\n[Either](https://docs.rs/itertools/latest/itertools/enum.Either.html \"enum itertools::Either\")\n    The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.\n\n[EitherOrBoth](https://docs.rs/itertools/latest/itertools/enum.EitherOrBoth.html \"enum itertools::EitherOrBoth\")\n    Value that either holds a single A or B, or both.\n\n[FoldWhile](https://docs.rs/itertools/latest/itertools/enum.FoldWhile.html \"enum itertools::FoldWhile\")\n    An enum used for controlling the execution of `fold_while`.\n\n[MinMaxResult](https://docs.rs/itertools/latest/itertools/enum.MinMaxResult.html \"enum itertools::MinMaxResult\")\n    `MinMaxResult` is an enum returned by `minmax`.\n\n[Position](https://docs.rs/itertools/latest/itertools/enum.Position.html \"enum itertools::Position\")\n    The first component of the value yielded by `WithPosition`. Indicates the position of this element in the iterator results.\n## Traits[\u00a7](https://docs.rs/itertools/latest/itertools/#traits)\n\n[Itertools](https://docs.rs/itertools/latest/itertools/trait.Itertools.html \"trait itertools::Itertools\")\n    An [`Iterator`](https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html \"trait core::iter::traits::iterator::Iterator\") blanket implementation that provides extra adaptors and methods.\n\n[MultiUnzip](https://docs.rs/itertools/latest/itertools/trait.MultiUnzip.html \"trait itertools::MultiUnzip\")\n    An iterator that can be unzipped into multiple collections.\n\n[PeekingNext](https://docs.rs/itertools/latest/itertools/trait.PeekingNext.html \"trait itertools::PeekingNext\")\n    An iterator that allows peeking at an element before deciding to accept it.\n## Functions[\u00a7](https://docs.rs/itertools/latest/itertools/#functions)\n\n[all](https://docs.rs/itertools/latest/itertools/fn.all.html \"fn itertools::all\")\n    Test whether the predicate holds for all elements in the iterable.\n\n[any](https://docs.rs/itertools/latest/itertools/fn.any.html \"fn itertools::any\")\n    Test whether the predicate holds for any elements in the iterable.\n\n[assert_equal](https://docs.rs/itertools/latest/itertools/fn.assert_equal.html \"fn itertools::assert_equal\")\n    Assert that two iterables produce equal sequences, with the same semantics as [`equal(a, b)`](https://docs.rs/itertools/latest/itertools/fn.equal.html \"fn itertools::equal\").\n\n[chain](https://docs.rs/itertools/latest/itertools/fn.chain.html \"fn itertools::chain\")\n    Takes two iterables and creates a new iterator over both in sequence.\n\n[cloned](https://docs.rs/itertools/latest/itertools/fn.cloned.html \"fn itertools::cloned\")\n    Create an iterator that clones each element from `&T` to `T`.\n\n[concat](https://docs.rs/itertools/latest/itertools/fn.concat.html \"fn itertools::concat\")\n    Combine all an iterator\u2019s elements into one element by using [`Extend`](https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html \"trait core::iter::traits::collect::Extend\").\n\n[cons_tuples](https://docs.rs/itertools/latest/itertools/fn.cons_tuples.html \"fn itertools::cons_tuples\")\n    Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.\n\n[diff_with](https://docs.rs/itertools/latest/itertools/fn.diff_with.html \"fn itertools::diff_with\")\n    Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a [`Diff`](https://docs.rs/itertools/latest/itertools/enum.Diff.html \"enum itertools::Diff\") which describes how `j` differs from `i`.\n\n[enumerate](https://docs.rs/itertools/latest/itertools/fn.enumerate.html \"fn itertools::enumerate\")\n    Iterate `iterable` with a running index.\n\n[equal](https://docs.rs/itertools/latest/itertools/fn.equal.html \"fn itertools::equal\")\n    Return `true` if both iterables produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.\n\n[fold](https://docs.rs/itertools/latest/itertools/fn.fold.html \"fn itertools::fold\")\n    Perform a fold operation over the iterable.\n\n[interleave](https://docs.rs/itertools/latest/itertools/fn.interleave.html \"fn itertools::interleave\")\n    Create an iterator that interleaves elements in `i` and `j`.\n\n[intersperse](https://docs.rs/itertools/latest/itertools/fn.intersperse.html \"fn itertools::intersperse\")\n    Iterate `iterable` with a particular value inserted between each element.\n\n[intersperse_with](https://docs.rs/itertools/latest/itertools/fn.intersperse_with.html \"fn itertools::intersperse_with\")\n    Iterate `iterable` with a particular value created by a function inserted between each element.\n\n[iterate](https://docs.rs/itertools/latest/itertools/fn.iterate.html \"fn itertools::iterate\")\n    Creates a new iterator that infinitely applies function to value and yields results.\n\n[join](https://docs.rs/itertools/latest/itertools/fn.join.html \"fn itertools::join\")\n    Combine all iterator elements into one `String`, separated by `sep`.\n\n[kmerge](https://docs.rs/itertools/latest/itertools/fn.kmerge.html \"fn itertools::kmerge\")\n    Create an iterator that merges elements of the contained iterators using the ordering function.\n\n[kmerge_by](https://docs.rs/itertools/latest/itertools/fn.kmerge_by.html \"fn itertools::kmerge_by\")\n    Create an iterator that merges elements of the contained iterators.\n\n[max](https://docs.rs/itertools/latest/itertools/fn.max.html \"fn itertools::max\")\n    Return the maximum value of the iterable.\n\n[merge](https://docs.rs/itertools/latest/itertools/fn.merge.html \"fn itertools::merge\")\n    Create an iterator that merges elements in `i` and `j`.\n\n[merge_join_by](https://docs.rs/itertools/latest/itertools/fn.merge_join_by.html \"fn itertools::merge_join_by\")\n    Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.\n\n[min](https://docs.rs/itertools/latest/itertools/fn.min.html \"fn itertools::min\")\n    Return the minimum value of the iterable.\n\n[multipeek](https://docs.rs/itertools/latest/itertools/fn.multipeek.html \"fn itertools::multipeek\")\n    An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.\n\n[multiunzip](https://docs.rs/itertools/latest/itertools/fn.multiunzip.html \"fn itertools::multiunzip\")\n    Converts an iterator of tuples into a tuple of containers.\n\n[multizip](https://docs.rs/itertools/latest/itertools/fn.multizip.html \"fn itertools::multizip\")\n    An iterator that generalizes `.zip()` and allows running multiple iterators in lockstep.\n\n[partition](https://docs.rs/itertools/latest/itertools/fn.partition.html \"fn itertools::partition\")\n    Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.\n\n[peek_nth](https://docs.rs/itertools/latest/itertools/fn.peek_nth.html \"fn itertools::peek_nth\")\n    A drop-in replacement for [`std::iter::Peekable`](https://doc.rust-lang.org/nightly/core/iter/adapters/peekable/struct.Peekable.html \"struct core::iter::adapters::peekable::Peekable\") which adds a `peek_nth` method allowing the user to `peek` at a value several iterations forward without advancing the base iterator.\n\n[process_results](https://docs.rs/itertools/latest/itertools/fn.process_results.html \"fn itertools::process_results\")\n    \u201cLift\u201d a function of the values of an iterator so that it can process an iterator of `Result` values instead.\n\n[put_back](https://docs.rs/itertools/latest/itertools/fn.put_back.html \"fn itertools::put_back\")\n    Create an iterator where you can put back a single item\n\n[put_back_n](https://docs.rs/itertools/latest/itertools/fn.put_back_n.html \"fn itertools::put_back_n\")\n    Create an iterator where you can put back multiple values to the front of the iteration.\n\n[rciter](https://docs.rs/itertools/latest/itertools/fn.rciter.html \"fn itertools::rciter\")\n    Return an iterator inside a `Rc<RefCell<_>>` wrapper.\n\n[repeat_n](https://docs.rs/itertools/latest/itertools/fn.repeat_n.html \"fn itertools::repeat_n\")\n    Create an iterator that produces `n` repetitions of `element`.\n\n[rev](https://docs.rs/itertools/latest/itertools/fn.rev.html \"fn itertools::rev\")\n    Iterate `iterable` in reverse.\n\n[sorted](https://docs.rs/itertools/latest/itertools/fn.sorted.html \"fn itertools::sorted\")\n    Sort all iterator elements into a new iterator in ascending order.\n\n[sorted_unstable](https://docs.rs/itertools/latest/itertools/fn.sorted_unstable.html \"fn itertools::sorted_unstable\")\n    Sort all iterator elements into a new iterator in ascending order. This sort is unstable (i.e., may reorder equal elements).\n\n[unfold](https://docs.rs/itertools/latest/itertools/fn.unfold.html \"fn itertools::unfold\")Deprecated\n    Creates a new unfold source with the specified closure as the \u201citerator function\u201d and an initial state to eventually pass to the closure\n\n[zip](https://docs.rs/itertools/latest/itertools/fn.zip.html \"fn itertools::zip\")Deprecated\n    Converts the arguments to iterators and zips them.\n\n[zip_eq](https://docs.rs/itertools/latest/itertools/fn.zip_eq.html \"fn itertools::zip_eq\")\n    Zips two iterators but **panics** if they are not of the same length.\n",
        "markdown_with_citations": "[](https://docs.rs/itertools/latest/itertools/all.html \"show sidebar\")\n# Crate itertoolsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nExtra iterator adaptors, functions and macros.\nTo extend `Iterator`\u27e84\u27e9 with methods in this crate, import the `Itertools`\u27e85\u27e9 trait:\n```\nuse itertools::Itertools;\n```\n\nNow, new methods like `interleave`\u27e86\u27e9 are available on all iterators:\n```\nuse itertools::Itertools;\nlet it = (1..3).interleave(vec![-1, -2]);\nitertools::assert_equal(it, vec![1, -1, 2, -2]);\n```\n\nMost iterator methods are also provided as functions (with the benefit that they convert parameters using `IntoIterator`\u27e87\u27e9):\n```\nuse itertools::interleave;\nfor elt in interleave(&[1, 2, 3], &[2, 3, 4]) {\n  /* loop body */\n}\n```\n\n### \u00a7\u27e88\u27e9Crate Features\n  * `use_std`\n    * Enabled by default.\n    * Disable to compile itertools using `#![no_std]`. This disables any item that depend on allocations (see the `use_alloc` feature) and hash maps (like `unique`, `counts`, `into_grouping_map` and more).\n  * `use_alloc`\n    * Enabled by default.\n    * Enables any item that depend on allocations (like `chunk_by`, `kmerge`, `join` and many more).\n\n\n### \u00a7\u27e89\u27e9Rust Version\nThis version of itertools requires Rust 1.63.0 or later.\n## Re-exports\u00a7\u27e810\u27e9\n\n`pub use crate::structs[](https://docs.rs/itertools/latest/itertools/structs/index.html \"mod itertools::structs\")::*;`\n\n## Modules\u00a7\u27e811\u27e9\n\nstructs\u27e812\u27e9\n    The concrete iterator types.\n\ntraits\u27e813\u27e9\n    Traits helpful for using certain `Itertools` methods in generic contexts.\n## Macros\u00a7\u27e814\u27e9\n\nchain\u27e815\u27e9\n    Chain\u27e816\u27e9 zero or more iterators together into one sequence.\n\niproduct\u27e817\u27e9\n    Create an iterator over the \u201ccartesian product\u201d of iterators.\n\nizip\u27e818\u27e9\n    Create an iterator running multiple iterators in lockstep.\n## Enums\u00a7\u27e819\u27e9\n\nDiff\u27e820\u27e9\n    A type returned by the `diff_with`\u27e821\u27e9 function.\n\nEither\u27e822\u27e9\n    The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.\n\nEitherOrBoth\u27e823\u27e9\n    Value that either holds a single A or B, or both.\n\nFoldWhile\u27e824\u27e9\n    An enum used for controlling the execution of `fold_while`.\n\nMinMaxResult\u27e825\u27e9\n    `MinMaxResult` is an enum returned by `minmax`.\n\nPosition\u27e826\u27e9\n    The first component of the value yielded by `WithPosition`. Indicates the position of this element in the iterator results.\n## Traits\u00a7\u27e827\u27e9\n\nItertools\u27e85\u27e9\n    An `Iterator`\u27e84\u27e9 blanket implementation that provides extra adaptors and methods.\n\nMultiUnzip\u27e828\u27e9\n    An iterator that can be unzipped into multiple collections.\n\nPeekingNext\u27e829\u27e9\n    An iterator that allows peeking at an element before deciding to accept it.\n## Functions\u00a7\u27e830\u27e9\n\nall\u27e831\u27e9\n    Test whether the predicate holds for all elements in the iterable.\n\nany\u27e832\u27e9\n    Test whether the predicate holds for any elements in the iterable.\n\nassert_equal\u27e833\u27e9\n    Assert that two iterables produce equal sequences, with the same semantics as `equal(a, b)`\u27e834\u27e9.\n\nchain\u27e835\u27e9\n    Takes two iterables and creates a new iterator over both in sequence.\n\ncloned\u27e836\u27e9\n    Create an iterator that clones each element from `&T` to `T`.\n\nconcat\u27e837\u27e9\n    Combine all an iterator\u2019s elements into one element by using `Extend`\u27e838\u27e9.\n\ncons_tuples\u27e839\u27e9\n    Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.\n\ndiff_with\u27e821\u27e9\n    Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff`\u27e820\u27e9 which describes how `j` differs from `i`.\n\nenumerate\u27e840\u27e9\n    Iterate `iterable` with a running index.\n\nequal\u27e834\u27e9\n    Return `true` if both iterables produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.\n\nfold\u27e841\u27e9\n    Perform a fold operation over the iterable.\n\ninterleave\u27e842\u27e9\n    Create an iterator that interleaves elements in `i` and `j`.\n\nintersperse\u27e843\u27e9\n    Iterate `iterable` with a particular value inserted between each element.\n\nintersperse_with\u27e844\u27e9\n    Iterate `iterable` with a particular value created by a function inserted between each element.\n\niterate\u27e845\u27e9\n    Creates a new iterator that infinitely applies function to value and yields results.\n\njoin\u27e846\u27e9\n    Combine all iterator elements into one `String`, separated by `sep`.\n\nkmerge\u27e847\u27e9\n    Create an iterator that merges elements of the contained iterators using the ordering function.\n\nkmerge_by\u27e848\u27e9\n    Create an iterator that merges elements of the contained iterators.\n\nmax\u27e849\u27e9\n    Return the maximum value of the iterable.\n\nmerge\u27e850\u27e9\n    Create an iterator that merges elements in `i` and `j`.\n\nmerge_join_by\u27e851\u27e9\n    Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.\n\nmin\u27e852\u27e9\n    Return the minimum value of the iterable.\n\nmultipeek\u27e853\u27e9\n    An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.\n\nmultiunzip\u27e854\u27e9\n    Converts an iterator of tuples into a tuple of containers.\n\nmultizip\u27e855\u27e9\n    An iterator that generalizes `.zip()` and allows running multiple iterators in lockstep.\n\npartition\u27e856\u27e9\n    Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.\n\npeek_nth\u27e857\u27e9\n    A drop-in replacement for `std::iter::Peekable`\u27e858\u27e9 which adds a `peek_nth` method allowing the user to `peek` at a value several iterations forward without advancing the base iterator.\n\nprocess_results\u27e859\u27e9\n    \u201cLift\u201d a function of the values of an iterator so that it can process an iterator of `Result` values instead.\n\nput_back\u27e860\u27e9\n    Create an iterator where you can put back a single item\n\nput_back_n\u27e861\u27e9\n    Create an iterator where you can put back multiple values to the front of the iteration.\n\nrciter\u27e862\u27e9\n    Return an iterator inside a `Rc<RefCell<_>>` wrapper.\n\nrepeat_n\u27e863\u27e9\n    Create an iterator that produces `n` repetitions of `element`.\n\nrev\u27e864\u27e9\n    Iterate `iterable` in reverse.\n\nsorted\u27e865\u27e9\n    Sort all iterator elements into a new iterator in ascending order.\n\nsorted_unstable\u27e866\u27e9\n    Sort all iterator elements into a new iterator in ascending order. This sort is unstable (i.e., may reorder equal elements).\n\nunfold\u27e867\u27e9Deprecated\n    Creates a new unfold source with the specified closure as the \u201citerator function\u201d and an initial state to eventually pass to the closure\n\nzip\u27e868\u27e9Deprecated\n    Converts the arguments to iterators and zips them.\n\nzip_eq\u27e869\u27e9\n    Zips two iterators but **panics** if they are not of the same length.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/itertools/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/itertools/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/itertools/latest/src/itertools/lib.rs.html#1-4713: Source\n\u27e84\u27e9 https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html: trait core::iter::traits::iterator::Iterator - `Iterator`\n\u27e85\u27e9 https://docs.rs/itertools/latest/itertools/trait.Itertools.html: trait itertools::Itertools - `Itertools`\n\u27e86\u27e9 https://docs.rs/itertools/latest/itertools/trait.Itertools.html#method.interleave: method itertools::Itertools::interleave - `interleave`\n\u27e87\u27e9 https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html: trait core::iter::traits::collect::IntoIterator - `IntoIterator`\n\u27e88\u27e9 https://docs.rs/itertools/latest/itertools/#crate-features: \u00a7\n\u27e89\u27e9 https://docs.rs/itertools/latest/itertools/#rust-version: \u00a7\n\u27e810\u27e9 https://docs.rs/itertools/latest/itertools/#reexports: \u00a7\n\u27e811\u27e9 https://docs.rs/itertools/latest/itertools/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/itertools/latest/itertools/structs/index.html: mod itertools::structs - structs\n\u27e813\u27e9 https://docs.rs/itertools/latest/itertools/traits/index.html: mod itertools::traits - traits\n\u27e814\u27e9 https://docs.rs/itertools/latest/itertools/#macros: \u00a7\n\u27e815\u27e9 https://docs.rs/itertools/latest/itertools/macro.chain.html: macro itertools::chain - chain\n\u27e816\u27e9 https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.chain: method core::iter::traits::iterator::Iterator::chain - Chain\n\u27e817\u27e9 https://docs.rs/itertools/latest/itertools/macro.iproduct.html: macro itertools::iproduct - iproduct\n\u27e818\u27e9 https://docs.rs/itertools/latest/itertools/macro.izip.html: macro itertools::izip - izip\n\u27e819\u27e9 https://docs.rs/itertools/latest/itertools/#enums: \u00a7\n\u27e820\u27e9 https://docs.rs/itertools/latest/itertools/enum.Diff.html: enum itertools::Diff - Diff\n\u27e821\u27e9 https://docs.rs/itertools/latest/itertools/fn.diff_with.html: fn itertools::diff_with - `diff_with`\n\u27e822\u27e9 https://docs.rs/itertools/latest/itertools/enum.Either.html: enum itertools::Either - Either\n\u27e823\u27e9 https://docs.rs/itertools/latest/itertools/enum.EitherOrBoth.html: enum itertools::EitherOrBoth - EitherOrBoth\n\u27e824\u27e9 https://docs.rs/itertools/latest/itertools/enum.FoldWhile.html: enum itertools::FoldWhile - FoldWhile\n\u27e825\u27e9 https://docs.rs/itertools/latest/itertools/enum.MinMaxResult.html: enum itertools::MinMaxResult - MinMaxResult\n\u27e826\u27e9 https://docs.rs/itertools/latest/itertools/enum.Position.html: enum itertools::Position - Position\n\u27e827\u27e9 https://docs.rs/itertools/latest/itertools/#traits: \u00a7\n\u27e828\u27e9 https://docs.rs/itertools/latest/itertools/trait.MultiUnzip.html: trait itertools::MultiUnzip - MultiUnzip\n\u27e829\u27e9 https://docs.rs/itertools/latest/itertools/trait.PeekingNext.html: trait itertools::PeekingNext - PeekingNext\n\u27e830\u27e9 https://docs.rs/itertools/latest/itertools/#functions: \u00a7\n\u27e831\u27e9 https://docs.rs/itertools/latest/itertools/fn.all.html: fn itertools::all - all\n\u27e832\u27e9 https://docs.rs/itertools/latest/itertools/fn.any.html: fn itertools::any - any\n\u27e833\u27e9 https://docs.rs/itertools/latest/itertools/fn.assert_equal.html: fn itertools::assert_equal - assert_equal\n\u27e834\u27e9 https://docs.rs/itertools/latest/itertools/fn.equal.html: fn itertools::equal - `equal(a, b)`\n\u27e835\u27e9 https://docs.rs/itertools/latest/itertools/fn.chain.html: fn itertools::chain - chain\n\u27e836\u27e9 https://docs.rs/itertools/latest/itertools/fn.cloned.html: fn itertools::cloned - cloned\n\u27e837\u27e9 https://docs.rs/itertools/latest/itertools/fn.concat.html: fn itertools::concat - concat\n\u27e838\u27e9 https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html: trait core::iter::traits::collect::Extend - `Extend`\n\u27e839\u27e9 https://docs.rs/itertools/latest/itertools/fn.cons_tuples.html: fn itertools::cons_tuples - cons_tuples\n\u27e840\u27e9 https://docs.rs/itertools/latest/itertools/fn.enumerate.html: fn itertools::enumerate - enumerate\n\u27e841\u27e9 https://docs.rs/itertools/latest/itertools/fn.fold.html: fn itertools::fold - fold\n\u27e842\u27e9 https://docs.rs/itertools/latest/itertools/fn.interleave.html: fn itertools::interleave - interleave\n\u27e843\u27e9 https://docs.rs/itertools/latest/itertools/fn.intersperse.html: fn itertools::intersperse - intersperse\n\u27e844\u27e9 https://docs.rs/itertools/latest/itertools/fn.intersperse_with.html: fn itertools::intersperse_with - intersperse_with\n\u27e845\u27e9 https://docs.rs/itertools/latest/itertools/fn.iterate.html: fn itertools::iterate - iterate\n\u27e846\u27e9 https://docs.rs/itertools/latest/itertools/fn.join.html: fn itertools::join - join\n\u27e847\u27e9 https://docs.rs/itertools/latest/itertools/fn.kmerge.html: fn itertools::kmerge - kmerge\n\u27e848\u27e9 https://docs.rs/itertools/latest/itertools/fn.kmerge_by.html: fn itertools::kmerge_by - kmerge_by\n\u27e849\u27e9 https://docs.rs/itertools/latest/itertools/fn.max.html: fn itertools::max - max\n\u27e850\u27e9 https://docs.rs/itertools/latest/itertools/fn.merge.html: fn itertools::merge - merge\n\u27e851\u27e9 https://docs.rs/itertools/latest/itertools/fn.merge_join_by.html: fn itertools::merge_join_by - merge_join_by\n\u27e852\u27e9 https://docs.rs/itertools/latest/itertools/fn.min.html: fn itertools::min - min\n\u27e853\u27e9 https://docs.rs/itertools/latest/itertools/fn.multipeek.html: fn itertools::multipeek - multipeek\n\u27e854\u27e9 https://docs.rs/itertools/latest/itertools/fn.multiunzip.html: fn itertools::multiunzip - multiunzip\n\u27e855\u27e9 https://docs.rs/itertools/latest/itertools/fn.multizip.html: fn itertools::multizip - multizip\n\u27e856\u27e9 https://docs.rs/itertools/latest/itertools/fn.partition.html: fn itertools::partition - partition\n\u27e857\u27e9 https://docs.rs/itertools/latest/itertools/fn.peek_nth.html: fn itertools::peek_nth - peek_nth\n\u27e858\u27e9 https://doc.rust-lang.org/nightly/core/iter/adapters/peekable/struct.Peekable.html: struct core::iter::adapters::peekable::Peekable - `std::iter::Peekable`\n\u27e859\u27e9 https://docs.rs/itertools/latest/itertools/fn.process_results.html: fn itertools::process_results - process_results\n\u27e860\u27e9 https://docs.rs/itertools/latest/itertools/fn.put_back.html: fn itertools::put_back - put_back\n\u27e861\u27e9 https://docs.rs/itertools/latest/itertools/fn.put_back_n.html: fn itertools::put_back_n - put_back_n\n\u27e862\u27e9 https://docs.rs/itertools/latest/itertools/fn.rciter.html: fn itertools::rciter - rciter\n\u27e863\u27e9 https://docs.rs/itertools/latest/itertools/fn.repeat_n.html: fn itertools::repeat_n - repeat_n\n\u27e864\u27e9 https://docs.rs/itertools/latest/itertools/fn.rev.html: fn itertools::rev - rev\n\u27e865\u27e9 https://docs.rs/itertools/latest/itertools/fn.sorted.html: fn itertools::sorted - sorted\n\u27e866\u27e9 https://docs.rs/itertools/latest/itertools/fn.sorted_unstable.html: fn itertools::sorted_unstable - sorted_unstable\n\u27e867\u27e9 https://docs.rs/itertools/latest/itertools/fn.unfold.html: fn itertools::unfold - unfold\n\u27e868\u27e9 https://docs.rs/itertools/latest/itertools/fn.zip.html: fn itertools::zip - zip\n\u27e869\u27e9 https://docs.rs/itertools/latest/itertools/fn.zip_eq.html: fn itertools::zip_eq - zip_eq\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `itertools` crate extends Rust's standard `Iterator` trait with a rich set of additional iterator adaptors, functions, and macros for advanced iteration tasks. Key features include methods like `interleave`, `sorted`, and `multiunzip`, macros like `iproduct` and `izip`, and utilities for merging, peeking, partitioning, and more. It supports `std` and `no_std` environments and requires Rust 1.63.0 or later.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 9.0,
    "factual_counterfactual": "### Pair 1: Iterator Extension  \n\u2705 **Factual**: The `itertools` crate extends the standard `Iterator` trait with additional methods, such as `interleave`, which allows interleaving elements from two iterators.  \n\u274c **Counterfactual**: The `itertools` crate replaces the standard `Iterator` trait entirely, requiring developers to use `Itertools` instead of `Iterator` for all iterator-related functionality.  \n\n---\n\n### Pair 2: `no_std` Compatibility  \n\u2705 **Factual**: The `itertools` crate supports `#![no_std]` environments by disabling the default `use_std` feature, although this limits certain methods like `unique` and `counts` that rely on allocations.  \n\u274c **Counterfactual**: The `itertools` crate does not support `#![no_std]` environments, making it incompatible with embedded systems or other allocation-free contexts.  \n\n---\n\n### Pair 3: Cartesian Product  \n\u2705 **Factual**: The `iproduct!` macro in `itertools` generates an iterator over the Cartesian product of multiple iterators, enabling nested loops in a concise syntax.  \n\u274c **Counterfactual**: The `iproduct!` macro in `itertools` is used to merge multiple iterators into a single sequence, similar to the `chain!` macro.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}