{
    "name": "failure",
    "version": "0.1.8",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/failure/latest/failure/all.html \"show sidebar\")\n# Crate failureCopy item path\n[Settings](https://docs.rs/failure/latest/settings.html)\n[Help](https://docs.rs/failure/latest/help.html)\nSummary[Source](https://docs.rs/failure/latest/src/failure/lib.rs.html#1-307)\nExpand description\nAn experimental new error-handling library. Guide-style introduction is available [here](https://boats.gitlab.io/failure/).\nThe primary items exported by this library are:\n  * `Fail`: a new trait for custom error types in Rust.\n  * `Error`: a wrapper around `Fail` types to make it easy to coalesce them at higher levels.\n\n\nAs a general rule, library authors should create their own error types and implement `Fail` for them, whereas application authors should primarily deal with the `Error` type. There are exceptions to this rule, though, in both directions, and users should do whatever seems most appropriate to their situation.\n### [\u00a7](https://docs.rs/failure/latest/failure/#backtraces)Backtraces\nBacktraces are disabled by default. To turn backtraces on, enable the `backtrace` Cargo feature and set the `RUST_BACKTRACE` environment variable to a non-zero value (this also enables backtraces for panics). Use the `RUST_FAILURE_BACKTRACE` variable to enable or disable backtraces for `failure` specifically.\n## Macros[\u00a7](https://docs.rs/failure/latest/failure/#macros)\n\n[bail](https://docs.rs/failure/latest/failure/macro.bail.html \"macro failure::bail\")\n    Exits a function early with an `Error`.\n\n[ensure](https://docs.rs/failure/latest/failure/macro.ensure.html \"macro failure::ensure\")\n    Exits a function early with an `Error` if the condition is not satisfied.\n\n[format_err](https://docs.rs/failure/latest/failure/macro.format_err.html \"macro failure::format_err\")\n    Constructs an `Error` using the standard string interpolation syntax.\n## Structs[\u00a7](https://docs.rs/failure/latest/failure/#structs)\n\n[Backtrace](https://docs.rs/failure/latest/failure/struct.Backtrace.html \"struct failure::Backtrace\")\n    A `Backtrace`.\n\n[Causes](https://docs.rs/failure/latest/failure/struct.Causes.html \"struct failure::Causes\")\n    A iterator over the causes of a `Fail`\n\n[Compat](https://docs.rs/failure/latest/failure/struct.Compat.html \"struct failure::Compat\")\n    A compatibility wrapper around an error type from this crate.\n\n[Context](https://docs.rs/failure/latest/failure/struct.Context.html \"struct failure::Context\")\n    An error with context around it.\n\n[Error](https://docs.rs/failure/latest/failure/struct.Error.html \"struct failure::Error\")\n    The `Error` type, which can contain any failure.\n\n[SyncFailure](https://docs.rs/failure/latest/failure/struct.SyncFailure.html \"struct failure::SyncFailure\")\n    Wrapper for `std` errors to make them `Sync`.\n## Traits[\u00a7](https://docs.rs/failure/latest/failure/#traits)\n\n[AsFail](https://docs.rs/failure/latest/failure/trait.AsFail.html \"trait failure::AsFail\")\n    The `AsFail` trait\n\n[Fail](https://docs.rs/failure/latest/failure/trait.Fail.html \"trait failure::Fail\")\n    The `Fail` trait.\n\n[ResultExt](https://docs.rs/failure/latest/failure/trait.ResultExt.html \"trait failure::ResultExt\")\n    Extension methods for `Result`.\n## Functions[\u00a7](https://docs.rs/failure/latest/failure/#functions)\n\n[err_msg](https://docs.rs/failure/latest/failure/fn.err_msg.html \"fn failure::err_msg\")\n    Constructs a `Fail` type from a string.\n## Type Aliases[\u00a7](https://docs.rs/failure/latest/failure/#types)\n\n[Fallible](https://docs.rs/failure/latest/failure/type.Fallible.html \"type failure::Fallible\")\n    A common result with an `Error`.\n",
        "markdown_with_citations": "[](https://docs.rs/failure/latest/failure/all.html \"show sidebar\")\n# Crate failureCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn experimental new error-handling library. Guide-style introduction is available here\u27e84\u27e9.\nThe primary items exported by this library are:\n  * `Fail`: a new trait for custom error types in Rust.\n  * `Error`: a wrapper around `Fail` types to make it easy to coalesce them at higher levels.\n\n\nAs a general rule, library authors should create their own error types and implement `Fail` for them, whereas application authors should primarily deal with the `Error` type. There are exceptions to this rule, though, in both directions, and users should do whatever seems most appropriate to their situation.\n### \u00a7\u27e85\u27e9Backtraces\nBacktraces are disabled by default. To turn backtraces on, enable the `backtrace` Cargo feature and set the `RUST_BACKTRACE` environment variable to a non-zero value (this also enables backtraces for panics). Use the `RUST_FAILURE_BACKTRACE` variable to enable or disable backtraces for `failure` specifically.\n## Macros\u00a7\u27e86\u27e9\n\nbail\u27e87\u27e9\n    Exits a function early with an `Error`.\n\nensure\u27e88\u27e9\n    Exits a function early with an `Error` if the condition is not satisfied.\n\nformat_err\u27e89\u27e9\n    Constructs an `Error` using the standard string interpolation syntax.\n## Structs\u00a7\u27e810\u27e9\n\nBacktrace\u27e811\u27e9\n    A `Backtrace`.\n\nCauses\u27e812\u27e9\n    A iterator over the causes of a `Fail`\n\nCompat\u27e813\u27e9\n    A compatibility wrapper around an error type from this crate.\n\nContext\u27e814\u27e9\n    An error with context around it.\n\nError\u27e815\u27e9\n    The `Error` type, which can contain any failure.\n\nSyncFailure\u27e816\u27e9\n    Wrapper for `std` errors to make them `Sync`.\n## Traits\u00a7\u27e817\u27e9\n\nAsFail\u27e818\u27e9\n    The `AsFail` trait\n\nFail\u27e819\u27e9\n    The `Fail` trait.\n\nResultExt\u27e820\u27e9\n    Extension methods for `Result`.\n## Functions\u00a7\u27e821\u27e9\n\nerr_msg\u27e822\u27e9\n    Constructs a `Fail` type from a string.\n## Type Aliases\u00a7\u27e823\u27e9\n\nFallible\u27e824\u27e9\n    A common result with an `Error`.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/failure/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/failure/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/failure/latest/src/failure/lib.rs.html#1-307: Source\n\u27e84\u27e9 https://boats.gitlab.io/failure/: here\n\u27e85\u27e9 https://docs.rs/failure/latest/failure/#backtraces: \u00a7\n\u27e86\u27e9 https://docs.rs/failure/latest/failure/#macros: \u00a7\n\u27e87\u27e9 https://docs.rs/failure/latest/failure/macro.bail.html: macro failure::bail - bail\n\u27e88\u27e9 https://docs.rs/failure/latest/failure/macro.ensure.html: macro failure::ensure - ensure\n\u27e89\u27e9 https://docs.rs/failure/latest/failure/macro.format_err.html: macro failure::format_err - format_err\n\u27e810\u27e9 https://docs.rs/failure/latest/failure/#structs: \u00a7\n\u27e811\u27e9 https://docs.rs/failure/latest/failure/struct.Backtrace.html: struct failure::Backtrace - Backtrace\n\u27e812\u27e9 https://docs.rs/failure/latest/failure/struct.Causes.html: struct failure::Causes - Causes\n\u27e813\u27e9 https://docs.rs/failure/latest/failure/struct.Compat.html: struct failure::Compat - Compat\n\u27e814\u27e9 https://docs.rs/failure/latest/failure/struct.Context.html: struct failure::Context - Context\n\u27e815\u27e9 https://docs.rs/failure/latest/failure/struct.Error.html: struct failure::Error - Error\n\u27e816\u27e9 https://docs.rs/failure/latest/failure/struct.SyncFailure.html: struct failure::SyncFailure - SyncFailure\n\u27e817\u27e9 https://docs.rs/failure/latest/failure/#traits: \u00a7\n\u27e818\u27e9 https://docs.rs/failure/latest/failure/trait.AsFail.html: trait failure::AsFail - AsFail\n\u27e819\u27e9 https://docs.rs/failure/latest/failure/trait.Fail.html: trait failure::Fail - Fail\n\u27e820\u27e9 https://docs.rs/failure/latest/failure/trait.ResultExt.html: trait failure::ResultExt - ResultExt\n\u27e821\u27e9 https://docs.rs/failure/latest/failure/#functions: \u00a7\n\u27e822\u27e9 https://docs.rs/failure/latest/failure/fn.err_msg.html: fn failure::err_msg - err_msg\n\u27e823\u27e9 https://docs.rs/failure/latest/failure/#types: \u00a7\n\u27e824\u27e9 https://docs.rs/failure/latest/failure/type.Fallible.html: type failure::Fallible - Fallible\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `failure` crate is an experimental error-handling library for Rust that introduces the `Fail` trait for creating custom error types and the `Error` wrapper for managing errors at higher levels. It provides utilities like backtrace support (optional via Cargo features), macros (`bail`, `ensure`, `format_err`), and structs for error context and compatibility. The crate is designed to simplify error management for both library and application authors.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 5.0,
    "factual_counterfactual": "### Pair 1: Error Handling Capabilities  \n\u2705 **Factual:** The `failure` crate provides the `Fail` trait, which allows library authors to define custom error types with rich context and backtrace support.  \n\u274c **Counterfactual:** The `failure` crate automatically derives the `Fail` trait for all types implementing the `std::error::Error` trait.  \n\n---\n\n### Pair 2: Backtrace Configuration  \n\u2705 **Factual:** Backtraces in the `failure` crate are disabled by default but can be enabled by using the `backtrace` Cargo feature and setting the `RUST_BACKTRACE` environment variable to a non-zero value.  \n\u274c **Counterfactual:** Backtraces in the `failure` crate are enabled by default and require no additional configuration to use.  \n\n---\n\n### Pair 3: Macros for Error Creation  \n\u2705 **Factual:** The `failure` crate provides macros like `bail`, `ensure`, and `format_err` to simplify error creation and early exits in functions.  \n\u274c **Counterfactual:** The `failure` crate requires manual construction of error types and does not include any macros for error creation or handling.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}