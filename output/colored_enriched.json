{
    "name": "colored",
    "version": "3.0.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/colored/latest/colored/all.html \"show sidebar\")\n# Crate coloredCopy item path\n[Settings](https://docs.rs/colored/latest/settings.html)\n[Help](https://docs.rs/colored/latest/help.html)\nSummary[Source](https://docs.rs/colored/latest/src/colored/lib.rs.html#1-985)\nExpand description\nColoring terminal so simple, you already know how to do it !\n```\nuse colored::Colorize;\n\"this is blue\".blue();\n\"this is red\".red();\n\"this is red on blue\".red().on_blue();\n\"this is also red on blue\".on_blue().red();\n\"you can use truecolor values too!\".truecolor(0, 255, 136);\n\"background truecolor also works :)\".on_truecolor(135, 28, 167);\n\"you can also make bold comments\".bold();\nprintln!(\"{} {} {}\", \"or use\".cyan(), \"any\".italic().yellow(), \"string type\".cyan());\n\"or change advice. This is red\".yellow().blue().red();\n\"or clear things up. This is default color and style\".red().bold().clear();\n\"purple and magenta are the same\".purple().magenta();\n\"bright colors are also allowed\".bright_blue().on_bright_white();\n\"you can specify color by string\".color(\"blue\").on_color(\"red\");\n\"and so are normal and clear\".normal().clear();\nString::from(\"this also works!\").green().bold();\nformat!(\"{:30}\", \"format works as expected. This will be padded\".blue());\nformat!(\"{:.3}\", \"and this will be green but truncated to 3 chars\".green());\n```\n\nSee [the `Colorize` trait](https://docs.rs/colored/latest/colored/trait.Colorize.html) for all the methods.\nNote: The methods of [`Colorize`](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\"), when used on [`str`](https://doc.rust-lang.org/nightly/std/primitive.str.html \"primitive str\")\u2019s, return [`ColoredString`](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\")\u2019s. See [`ColoredString`](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\") to learn more about them and what you can do with them beyond continue to use [`Colorize`](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\") to further modify them.\n## Re-exports[\u00a7](https://docs.rs/colored/latest/colored/#reexports)\n\n`pub use self::customcolors::CustomColor[](https://docs.rs/colored/latest/colored/customcolors/struct.CustomColor.html \"struct colored::customcolors::CustomColor\");`\n\n## Modules[\u00a7](https://docs.rs/colored/latest/colored/#modules)\n\n[control](https://docs.rs/colored/latest/colored/control/index.html \"mod colored::control\")\n    A couple of functions to enable and disable coloring.\n\n[customcolors](https://docs.rs/colored/latest/colored/customcolors/index.html \"mod colored::customcolors\")\n    Custom colors support.\n## Structs[\u00a7](https://docs.rs/colored/latest/colored/#structs)\n\n[ColoredString](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\")\n    A string that may have color and/or style applied to it.\n\n[Style](https://docs.rs/colored/latest/colored/struct.Style.html \"struct colored::Style\")\n    A combinatorial style such as bold, italics, dimmed, etc.\n## Enums[\u00a7](https://docs.rs/colored/latest/colored/#enums)\n\n[Color](https://docs.rs/colored/latest/colored/enum.Color.html \"enum colored::Color\")\n    The 8 standard colors.\n\n[Styles](https://docs.rs/colored/latest/colored/enum.Styles.html \"enum colored::Styles\")\n    Enum containing all of the available style settings that can be applied to a [`Styles`](https://docs.rs/colored/latest/colored/enum.Styles.html \"enum colored::Styles\") and by extension, a colrized type.\n## Traits[\u00a7](https://docs.rs/colored/latest/colored/#traits)\n\n[Colorize](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\")\n    The trait that enables something to be given color.\n",
        "markdown_with_citations": "[](https://docs.rs/colored/latest/colored/all.html \"show sidebar\")\n# Crate coloredCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nColoring terminal so simple, you already know how to do it !\n```\nuse colored::Colorize;\n\"this is blue\".blue();\n\"this is red\".red();\n\"this is red on blue\".red().on_blue();\n\"this is also red on blue\".on_blue().red();\n\"you can use truecolor values too!\".truecolor(0, 255, 136);\n\"background truecolor also works :)\".on_truecolor(135, 28, 167);\n\"you can also make bold comments\".bold();\nprintln!(\"{} {} {}\", \"or use\".cyan(), \"any\".italic().yellow(), \"string type\".cyan());\n\"or change advice. This is red\".yellow().blue().red();\n\"or clear things up. This is default color and style\".red().bold().clear();\n\"purple and magenta are the same\".purple().magenta();\n\"bright colors are also allowed\".bright_blue().on_bright_white();\n\"you can specify color by string\".color(\"blue\").on_color(\"red\");\n\"and so are normal and clear\".normal().clear();\nString::from(\"this also works!\").green().bold();\nformat!(\"{:30}\", \"format works as expected. This will be padded\".blue());\nformat!(\"{:.3}\", \"and this will be green but truncated to 3 chars\".green());\n```\n\nSee the `Colorize` trait\u27e84\u27e9 for all the methods.\nNote: The methods of `Colorize`\u27e84\u27e9, when used on `str`\u27e85\u27e9\u2019s, return `ColoredString`\u27e86\u27e9\u2019s. See `ColoredString`\u27e86\u27e9 to learn more about them and what you can do with them beyond continue to use `Colorize`\u27e84\u27e9 to further modify them.\n## Re-exports\u00a7\u27e87\u27e9\n\n`pub use self::customcolors::CustomColor[](https://docs.rs/colored/latest/colored/customcolors/struct.CustomColor.html \"struct colored::customcolors::CustomColor\");`\n\n## Modules\u00a7\u27e88\u27e9\n\ncontrol\u27e89\u27e9\n    A couple of functions to enable and disable coloring.\n\ncustomcolors\u27e810\u27e9\n    Custom colors support.\n## Structs\u00a7\u27e811\u27e9\n\nColoredString\u27e86\u27e9\n    A string that may have color and/or style applied to it.\n\nStyle\u27e812\u27e9\n    A combinatorial style such as bold, italics, dimmed, etc.\n## Enums\u00a7\u27e813\u27e9\n\nColor\u27e814\u27e9\n    The 8 standard colors.\n\nStyles\u27e815\u27e9\n    Enum containing all of the available style settings that can be applied to a `Styles`\u27e815\u27e9 and by extension, a colrized type.\n## Traits\u00a7\u27e816\u27e9\n\nColorize\u27e84\u27e9\n    The trait that enables something to be given color.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/colored/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/colored/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/colored/latest/src/colored/lib.rs.html#1-985: Source\n\u27e84\u27e9 https://docs.rs/colored/latest/colored/trait.Colorize.html: the `Colorize` trait\n\u27e85\u27e9 https://doc.rust-lang.org/nightly/std/primitive.str.html: primitive str - `str`\n\u27e86\u27e9 https://docs.rs/colored/latest/colored/struct.ColoredString.html: struct colored::ColoredString - `ColoredString`\n\u27e87\u27e9 https://docs.rs/colored/latest/colored/#reexports: \u00a7\n\u27e88\u27e9 https://docs.rs/colored/latest/colored/#modules: \u00a7\n\u27e89\u27e9 https://docs.rs/colored/latest/colored/control/index.html: mod colored::control - control\n\u27e810\u27e9 https://docs.rs/colored/latest/colored/customcolors/index.html: mod colored::customcolors - customcolors\n\u27e811\u27e9 https://docs.rs/colored/latest/colored/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/colored/latest/colored/struct.Style.html: struct colored::Style - Style\n\u27e813\u27e9 https://docs.rs/colored/latest/colored/#enums: \u00a7\n\u27e814\u27e9 https://docs.rs/colored/latest/colored/enum.Color.html: enum colored::Color - Color\n\u27e815\u27e9 https://docs.rs/colored/latest/colored/enum.Styles.html: enum colored::Styles - Styles\n\u27e816\u27e9 https://docs.rs/colored/latest/colored/#traits: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `colored` crate simplifies terminal text styling by enabling easy application of colors, styles (e.g., bold, italic), and truecolor values to strings. It provides the `Colorize` trait for chaining methods to customize text appearance, returning `ColoredString` objects for further modifications. Additional features include support for custom colors, bright colors, and toggling coloring via the `control` module.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Trait and Method Usage  \n\u2705 **Factual**: The `Colorize` trait in the `colored` crate allows methods like `.blue()`, `.red()`, and `.bold()` to be applied to string slices (`&str`), returning a `ColoredString`.  \n\u274c **Counterfactual**: The `Colorize` trait directly modifies string slices (`&str`) in place, changing their color and style without returning a new type like `ColoredString`.  \n\n---\n\n### Pair 2: Truecolor Support  \n\u2705 **Factual**: The `colored` crate supports truecolor values, enabling users to specify custom RGB values for both foreground and background colors using methods like `.truecolor(r, g, b)` and `.on_truecolor(r, g, b)`.  \n\u274c **Counterfactual**: The `colored` crate only supports the 8 standard ANSI colors and does not allow specifying custom RGB values for truecolor styling.  \n\n---\n\n### Pair 3: Formatting Compatibility  \n\u2705 **Factual**: The `colored` crate integrates seamlessly with Rust's `format!` macro, allowing users to style strings and then format them with padding or truncation, as demonstrated by `format!(\"{:30}\", \"text\".blue())`.  \n\u274c **Counterfactual**: The `colored` crate does not work with Rust's `format!` macro, and attempting to format styled strings will result in a runtime error",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}