{
    "name": "cfg-if",
    "version": "1.0.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/cfg-if/latest/cfg_if/all.html \"show sidebar\")\n# Crate cfg_ifCopy item path\n[Settings](https://docs.rs/cfg-if/latest/settings.html)\n[Help](https://docs.rs/cfg-if/latest/help.html)\nSummary[Source](https://docs.rs/cfg-if/latest/src/cfg_if/lib.rs.html#1-191)\nExpand description\nA macro for defining `#[cfg]` if-else statements.\nThe macro provided by this crate, `cfg_if`, is similar to the `if/elif` C preprocessor macro by allowing definition of a cascade of `#[cfg]` cases, emitting the implementation which matches first.\nThis allows you to conveniently provide a long list `#[cfg]`\u2019d blocks of code without having to rewrite each clause multiple times.\n## [\u00a7](https://docs.rs/cfg-if/latest/cfg_if/#example)Example\n```\ncfg_if::cfg_if! {\n  if #[cfg(unix)] {\n    fn foo() { /* unix specific functionality */ }\n  } else if #[cfg(target_pointer_width = \"32\")] {\n    fn foo() { /* non-unix, 32-bit functionality */ }\n  } else {\n    fn foo() { /* fallback implementation */ }\n  }\n}\n\n```\n\n## Macros[\u00a7](https://docs.rs/cfg-if/latest/cfg_if/#macros)\n\n[cfg_if](https://docs.rs/cfg-if/latest/cfg_if/macro.cfg_if.html \"macro cfg_if::cfg_if\")\n    The main macro provided by this crate. See crate documentation for more information.\n",
        "markdown_with_citations": "[](https://docs.rs/cfg-if/latest/cfg_if/all.html \"show sidebar\")\n# Crate cfg_ifCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA macro for defining `#[cfg]` if-else statements.\nThe macro provided by this crate, `cfg_if`, is similar to the `if/elif` C preprocessor macro by allowing definition of a cascade of `#[cfg]` cases, emitting the implementation which matches first.\nThis allows you to conveniently provide a long list `#[cfg]`\u2019d blocks of code without having to rewrite each clause multiple times.\n## \u00a7\u27e84\u27e9Example\n```\ncfg_if::cfg_if! {\n  if #[cfg(unix)] {\n    fn foo() { /* unix specific functionality */ }\n  } else if #[cfg(target_pointer_width = \"32\")] {\n    fn foo() { /* non-unix, 32-bit functionality */ }\n  } else {\n    fn foo() { /* fallback implementation */ }\n  }\n}\n\n```\n\n## Macros\u00a7\u27e85\u27e9\n\ncfg_if\u27e86\u27e9\n    The main macro provided by this crate. See crate documentation for more information.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/cfg-if/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/cfg-if/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/cfg-if/latest/src/cfg_if/lib.rs.html#1-191: Source\n\u27e84\u27e9 https://docs.rs/cfg-if/latest/cfg_if/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/cfg-if/latest/cfg_if/#macros: \u00a7\n\u27e86\u27e9 https://docs.rs/cfg-if/latest/cfg_if/macro.cfg_if.html: macro cfg_if::cfg_if - cfg_if\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `cfg-if` crate provides a macro for simplifying conditional compilation in Rust using `#[cfg]` attributes. It allows you to define cascading `#[cfg]` if-else statements, emitting the first matching implementation, which is particularly useful for managing platform-specific or configuration-specific code without redundancy. The `cfg_if!` macro is the primary feature of the crate.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1: Macro Functionality  \n\u2705 **Factual**: The `cfg_if` crate provides a macro that simplifies writing conditional compilation blocks by allowing cascading `#[cfg]` cases, similar to the `if/elif` structure in C preprocessor macros.  \n\u274c **Counterfactual**: The `cfg_if` crate automatically detects the target platform and generates platform-specific code without requiring `#[cfg]` annotations.  \n\n---\n\n### Pair 2: Supported Use Cases  \n\u2705 **Factual**: The `cfg_if` macro can be used to define platform-specific functionality, such as Unix-specific or fallback implementations, based on compile-time conditions.  \n\u274c **Counterfactual**: The `cfg_if` macro enables runtime detection of system properties, allowing dynamic changes to the code's behavior during program execution.  \n\n---\n\n### Pair 3: Performance Characteristics  \n\u2705 **Factual**: The `cfg_if` macro operates entirely at compile time, meaning it introduces no runtime overhead to the compiled program.  \n\u274c **Counterfactual**: The `cfg_if` macro introduces a slight runtime overhead due to its conditional evaluation logic during program execution.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}