{
    "name": "wiremock",
    "version": "0.6.4",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/wiremock/latest/wiremock/all.html \"show sidebar\")\n# Crate wiremockCopy item path\n[Settings](https://docs.rs/wiremock/latest/settings.html)\n[Help](https://docs.rs/wiremock/latest/help.html)\nSummary[Source](https://docs.rs/wiremock/latest/src/wiremock/lib.rs.html#1-164)\nExpand description\n`wiremock` provides HTTP mocking to perform black-box testing of Rust applications that interact with third-party APIs.\nIt provides mocking of HTTP responses using request matching and response templating.\n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#how-to-install)How to install\nAdd `wiremock` to your development dependencies:\n```\n[dev-dependencies]\n# ...\nwiremock = \"0.5\"\n```\n\nIf you are using [`cargo-edit`](https://github.com/killercup/cargo-edit), run\n```\ncargo add wiremock --dev\n```\n\n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#getting-started)Getting started\n```\nuse wiremock::{MockServer, Mock, ResponseTemplate};\nuse wiremock::matchers::{method, path};\n#[async_std::main]\nasync fn main() {\n  // Start a background HTTP server on a random local port\n  let mock_server = MockServer::start().await;\n  // Arrange the behaviour of the MockServer adding a Mock:\n  // when it receives a GET request on '/hello' it will respond with a 200.\n  Mock::given(method(\"GET\"))\n    .and(path(\"/hello\"))\n    .respond_with(ResponseTemplate::new(200))\n    // Mounting the mock on the mock server - it's now effective!\n    .mount(&mock_server)\n    .await;\n   \n  // If we probe the MockServer using any HTTP client it behaves as expected.\n  let status = reqwest::get(format!(\"{}/hello\", &mock_server.uri()))\n    .await\n    .unwrap()\n    .status();\n  assert_eq!(status, 200);\n  // If the request doesn't match any `Mock` mounted on our `MockServer` a 404 is returned.\n  let status = reqwest::get(format!(\"{}/missing\", &mock_server.uri()))\n    .await\n    .unwrap()\n    .status();\n  assert_eq!(status, 404);\n}\n```\n\n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#matchers)Matchers\n`wiremock` provides a set of matching strategies out of the box - check the [`matchers`](https://docs.rs/wiremock/latest/wiremock/matchers/index.html \"mod wiremock::matchers\") module for a complete list.\nYou can define your own matchers using the [`Match`](https://docs.rs/wiremock/latest/wiremock/trait.Match.html \"trait wiremock::Match\") trait, as well as using `Fn` closures. Check [`Match`](https://docs.rs/wiremock/latest/wiremock/trait.Match.html \"trait wiremock::Match\")\u2019s documentation for more details and examples.\n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#spying)Spying\n`wiremock` empowers you to set expectations on the number of invocations to your [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\")s - check the [`expect`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html#method.expect \"method wiremock::Mock::expect\") method for more details.\nExpectations can be used to verify that a side-effect has (or has not) taken place!\nExpectations are automatically verified during the shutdown of each [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\") instance, at the end of your test. A failed verification will trigger a panic. By default, no expectations are set on your [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\")s.\n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#responses)Responses\n`wiremock` lets you specify pre-determined responses using [`ResponseTemplate`](https://docs.rs/wiremock/latest/wiremock/struct.ResponseTemplate.html \"struct wiremock::ResponseTemplate\") and [`respond_with`](https://docs.rs/wiremock/latest/wiremock/struct.MockBuilder.html#method.respond_with \"method wiremock::MockBuilder::respond_with\").\nYou also given the option to have [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\")s that return different responses based on the matched [`Request`](https://docs.rs/wiremock/latest/wiremock/struct.Request.html \"struct wiremock::Request\") using the [`Respond`](https://docs.rs/wiremock/latest/wiremock/trait.Respond.html \"trait wiremock::Respond\") trait. Check [`Respond`](https://docs.rs/wiremock/latest/wiremock/trait.Respond.html \"trait wiremock::Respond\")\u2019s documentation for more details and examples.\n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#test-isolation)Test isolation\nEach instance of [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\") is fully isolated: [`start`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html#method.start \"associated function wiremock::MockServer::start\") takes care of finding a random port available on your local machine which is assigned to the new [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\").\nTo ensure full isolation and no cross-test interference, [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\")s shouldn\u2019t be shared between tests. Instead, [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\")s should be created in the test where they are used.\nWhen a [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\") instance goes out of scope (e.g. the test finishes), the corresponding HTTP server running in the background is shut down to free up the port it was using.\n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#runtime-compatibility)Runtime compatibility\n`wiremock` can be used (and it is tested to work) with both [`async_std`](https://docs.rs/async-std/) and [`tokio`](https://docs.rs/tokio/) as futures runtimes. If you encounter any compatibility bug, please open an issue on our [GitHub repository](https://github.com/LukeMathWalker/wiremock-rs).\n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#efficiency)Efficiency\n`wiremock` maintains a pool of mock servers in the background to minimise the number of connections and the time spent starting up a new [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\"). Pooling reduces the likelihood of you having to tune your OS configurations (e.g. ulimit).\nThe pool is designed to be invisible: it makes your life easier and your tests faster. If you end up having to worry about it, it\u2019s a bug: open an issue!\n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#prior-art)Prior art\n[`mockito`](https://docs.rs/mockito/) and [`httpmock`](https://docs.rs/httpmock/) provide HTTP mocking for Rust.\nCheck the table below to see how `wiremock` compares to them across the following dimensions:\n  * Test execution strategy (do tests have to be executed sequentially or can they be executed in parallel?);\n  * How many APIs can I mock in a test?\n  * Out-of-the-box request matchers;\n  * Extensible request matching (i.e. you can define your own matchers);\n  * Sync/Async API;\n  * Spying (e.g. verify that a mock has/hasn\u2019t been called in a test);\n  * Standalone mode (i.e. can I launch an HTTP mock server outside of a test suite?).\n\n\n| Test execution strategy| How many APIs can I mock?| Out-of-the-box request matchers| Extensible request matching| API| Spying| Standalone mode  \n---|---|---|---|---|---|---|---  \nmockito| \u274c Sequential| \u274c 1| \u2714| \u274c| Sync| \u2714| \u274c  \nhttpmock| \u2714 Parallel| \u2714 Unbounded| \u2714| \u2714| Async/Sync| \u2714| \u2714  \nwiremock| \u2714 Parallel \ufe0f| \u2714 Unbounded| \u2714| \u2714| Async| \u2714| \u274c  \n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#future-evolution)Future evolution\nMore request matchers can be added to those provided out-of-the-box to handle common usecases.\n### [\u00a7](https://docs.rs/wiremock/latest/wiremock/#related-projects)Related projects\n  * [`stubr`](https://github.com/beltram/stubr) for mounting [`Wiremock`](http://wiremock.org/) json stubs in a [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\"). Also works as a cli.\n\n\n## Modules[\u00a7](https://docs.rs/wiremock/latest/wiremock/#modules)\n\n[http](https://docs.rs/wiremock/latest/wiremock/http/index.html \"mod wiremock::http\")\n    Convenient re-exports of http types that are part of `wiremock`\u2019s public API.\n\n[matchers](https://docs.rs/wiremock/latest/wiremock/matchers/index.html \"mod wiremock::matchers\")\n    A collection of different matching strategies provided out-of-the-box by `wiremock`.\n## Structs[\u00a7](https://docs.rs/wiremock/latest/wiremock/#structs)\n\n[Mock](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\")\n    Given a set of matchers, a `Mock` instructs an instance of [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\") to return a pre-determined response if the matching conditions are satisfied.\n\n[MockBuilder](https://docs.rs/wiremock/latest/wiremock/struct.MockBuilder.html \"struct wiremock::MockBuilder\")\n    A fluent builder to construct a [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\") instance given matchers and a [`ResponseTemplate`](https://docs.rs/wiremock/latest/wiremock/struct.ResponseTemplate.html \"struct wiremock::ResponseTemplate\").\n\n[MockGuard](https://docs.rs/wiremock/latest/wiremock/struct.MockGuard.html \"struct wiremock::MockGuard\")\n    You get a `MockGuard` when registering a **scoped** [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\") using [`MockServer::register_as_scoped`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html#method.register_as_scoped \"method wiremock::MockServer::register_as_scoped\") or [`Mock::mount_as_scoped`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html#method.mount_as_scoped \"method wiremock::Mock::mount_as_scoped\").\n\n[MockServer](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\")\n    An HTTP web-server running in the background to behave as one of your dependencies using [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\")s for testing purposes.\n\n[MockServerBuilder](https://docs.rs/wiremock/latest/wiremock/struct.MockServerBuilder.html \"struct wiremock::MockServerBuilder\")\n    A builder providing a fluent API to assemble a [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\") step-by-step. Use [`MockServer::builder`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html#method.builder \"associated function wiremock::MockServer::builder\") to get started.\n\n[Request](https://docs.rs/wiremock/latest/wiremock/struct.Request.html \"struct wiremock::Request\")\n    An incoming request to an instance of [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\").\n\n[ResponseTemplate](https://docs.rs/wiremock/latest/wiremock/struct.ResponseTemplate.html \"struct wiremock::ResponseTemplate\")\n    The blueprint for the response returned by a [`MockServer`](https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html \"struct wiremock::MockServer\") when a [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\") matches on an incoming request.\n\n[Times](https://docs.rs/wiremock/latest/wiremock/struct.Times.html \"struct wiremock::Times\")\n    Specify how many times we expect a [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\") to match via [`expect`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html#method.expect \"method wiremock::Mock::expect\"). It is used to set expectations on the usage of a [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\") in a test case.\n## Traits[\u00a7](https://docs.rs/wiremock/latest/wiremock/#traits)\n\n[Match](https://docs.rs/wiremock/latest/wiremock/trait.Match.html \"trait wiremock::Match\")\n    Anything that implements `Match` can be used to constrain when a [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\") is activated.\n\n[Respond](https://docs.rs/wiremock/latest/wiremock/trait.Respond.html \"trait wiremock::Respond\")\n    Anything that implements `Respond` can be used to reply to an incoming request when a [`Mock`](https://docs.rs/wiremock/latest/wiremock/struct.Mock.html \"struct wiremock::Mock\") is activated.\n## Type Aliases[\u00a7](https://docs.rs/wiremock/latest/wiremock/#types)\n\n[ErrorResponse](https://docs.rs/wiremock/latest/wiremock/type.ErrorResponse.html \"type wiremock::ErrorResponse\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/wiremock/latest/wiremock/all.html \"show sidebar\")\n# Crate wiremockCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`wiremock` provides HTTP mocking to perform black-box testing of Rust applications that interact with third-party APIs.\nIt provides mocking of HTTP responses using request matching and response templating.\n### \u00a7\u27e84\u27e9How to install\nAdd `wiremock` to your development dependencies:\n```\n[dev-dependencies]\n# ...\nwiremock = \"0.5\"\n```\n\nIf you are using `cargo-edit`\u27e85\u27e9, run\n```\ncargo add wiremock --dev\n```\n\n### \u00a7\u27e86\u27e9Getting started\n```\nuse wiremock::{MockServer, Mock, ResponseTemplate};\nuse wiremock::matchers::{method, path};\n#[async_std::main]\nasync fn main() {\n  // Start a background HTTP server on a random local port\n  let mock_server = MockServer::start().await;\n  // Arrange the behaviour of the MockServer adding a Mock:\n  // when it receives a GET request on '/hello' it will respond with a 200.\n  Mock::given(method(\"GET\"))\n    .and(path(\"/hello\"))\n    .respond_with(ResponseTemplate::new(200))\n    // Mounting the mock on the mock server - it's now effective!\n    .mount(&mock_server)\n    .await;\n   \n  // If we probe the MockServer using any HTTP client it behaves as expected.\n  let status = reqwest::get(format!(\"{}/hello\", &mock_server.uri()))\n    .await\n    .unwrap()\n    .status();\n  assert_eq!(status, 200);\n  // If the request doesn't match any `Mock` mounted on our `MockServer` a 404 is returned.\n  let status = reqwest::get(format!(\"{}/missing\", &mock_server.uri()))\n    .await\n    .unwrap()\n    .status();\n  assert_eq!(status, 404);\n}\n```\n\n### \u00a7\u27e87\u27e9Matchers\n`wiremock` provides a set of matching strategies out of the box - check the `matchers`\u27e88\u27e9 module for a complete list.\nYou can define your own matchers using the `Match`\u27e89\u27e9 trait, as well as using `Fn` closures. Check `Match`\u27e89\u27e9\u2019s documentation for more details and examples.\n### \u00a7\u27e810\u27e9Spying\n`wiremock` empowers you to set expectations on the number of invocations to your `Mock`\u27e811\u27e9s - check the `expect`\u27e812\u27e9 method for more details.\nExpectations can be used to verify that a side-effect has (or has not) taken place!\nExpectations are automatically verified during the shutdown of each `MockServer`\u27e813\u27e9 instance, at the end of your test. A failed verification will trigger a panic. By default, no expectations are set on your `Mock`\u27e811\u27e9s.\n### \u00a7\u27e814\u27e9Responses\n`wiremock` lets you specify pre-determined responses using `ResponseTemplate`\u27e815\u27e9 and `respond_with`\u27e816\u27e9.\nYou also given the option to have `Mock`\u27e811\u27e9s that return different responses based on the matched `Request`\u27e817\u27e9 using the `Respond`\u27e818\u27e9 trait. Check `Respond`\u27e818\u27e9\u2019s documentation for more details and examples.\n### \u00a7\u27e819\u27e9Test isolation\nEach instance of `MockServer`\u27e813\u27e9 is fully isolated: `start`\u27e820\u27e9 takes care of finding a random port available on your local machine which is assigned to the new `MockServer`\u27e813\u27e9.\nTo ensure full isolation and no cross-test interference, `MockServer`\u27e813\u27e9s shouldn\u2019t be shared between tests. Instead, `MockServer`\u27e813\u27e9s should be created in the test where they are used.\nWhen a `MockServer`\u27e813\u27e9 instance goes out of scope (e.g. the test finishes), the corresponding HTTP server running in the background is shut down to free up the port it was using.\n### \u00a7\u27e821\u27e9Runtime compatibility\n`wiremock` can be used (and it is tested to work) with both `async_std`\u27e822\u27e9 and `tokio`\u27e823\u27e9 as futures runtimes. If you encounter any compatibility bug, please open an issue on our GitHub repository\u27e824\u27e9.\n### \u00a7\u27e825\u27e9Efficiency\n`wiremock` maintains a pool of mock servers in the background to minimise the number of connections and the time spent starting up a new `MockServer`\u27e813\u27e9. Pooling reduces the likelihood of you having to tune your OS configurations (e.g. ulimit).\nThe pool is designed to be invisible: it makes your life easier and your tests faster. If you end up having to worry about it, it\u2019s a bug: open an issue!\n### \u00a7\u27e826\u27e9Prior art\n`mockito`\u27e827\u27e9 and `httpmock`\u27e828\u27e9 provide HTTP mocking for Rust.\nCheck the table below to see how `wiremock` compares to them across the following dimensions:\n  * Test execution strategy (do tests have to be executed sequentially or can they be executed in parallel?);\n  * How many APIs can I mock in a test?\n  * Out-of-the-box request matchers;\n  * Extensible request matching (i.e. you can define your own matchers);\n  * Sync/Async API;\n  * Spying (e.g. verify that a mock has/hasn\u2019t been called in a test);\n  * Standalone mode (i.e. can I launch an HTTP mock server outside of a test suite?).\n\n\n| Test execution strategy| How many APIs can I mock?| Out-of-the-box request matchers| Extensible request matching| API| Spying| Standalone mode  \n---|---|---|---|---|---|---|---  \nmockito| \u274c Sequential| \u274c 1| \u2714| \u274c| Sync| \u2714| \u274c  \nhttpmock| \u2714 Parallel| \u2714 Unbounded| \u2714| \u2714| Async/Sync| \u2714| \u2714  \nwiremock| \u2714 Parallel \ufe0f| \u2714 Unbounded| \u2714| \u2714| Async| \u2714| \u274c  \n### \u00a7\u27e829\u27e9Future evolution\nMore request matchers can be added to those provided out-of-the-box to handle common usecases.\n### \u00a7\u27e830\u27e9Related projects\n  * `stubr`\u27e831\u27e9 for mounting `Wiremock`\u27e832\u27e9 json stubs in a `MockServer`\u27e813\u27e9. Also works as a cli.\n\n\n## Modules\u00a7\u27e833\u27e9\n\nhttp\u27e834\u27e9\n    Convenient re-exports of http types that are part of `wiremock`\u2019s public API.\n\nmatchers\u27e88\u27e9\n    A collection of different matching strategies provided out-of-the-box by `wiremock`.\n## Structs\u00a7\u27e835\u27e9\n\nMock\u27e811\u27e9\n    Given a set of matchers, a `Mock` instructs an instance of `MockServer`\u27e813\u27e9 to return a pre-determined response if the matching conditions are satisfied.\n\nMockBuilder\u27e836\u27e9\n    A fluent builder to construct a `Mock`\u27e811\u27e9 instance given matchers and a `ResponseTemplate`\u27e815\u27e9.\n\nMockGuard\u27e837\u27e9\n    You get a `MockGuard` when registering a **scoped** `Mock`\u27e811\u27e9 using `MockServer::register_as_scoped`\u27e838\u27e9 or `Mock::mount_as_scoped`\u27e839\u27e9.\n\nMockServer\u27e813\u27e9\n    An HTTP web-server running in the background to behave as one of your dependencies using `Mock`\u27e811\u27e9s for testing purposes.\n\nMockServerBuilder\u27e840\u27e9\n    A builder providing a fluent API to assemble a `MockServer`\u27e813\u27e9 step-by-step. Use `MockServer::builder`\u27e841\u27e9 to get started.\n\nRequest\u27e817\u27e9\n    An incoming request to an instance of `MockServer`\u27e813\u27e9.\n\nResponseTemplate\u27e815\u27e9\n    The blueprint for the response returned by a `MockServer`\u27e813\u27e9 when a `Mock`\u27e811\u27e9 matches on an incoming request.\n\nTimes\u27e842\u27e9\n    Specify how many times we expect a `Mock`\u27e811\u27e9 to match via `expect`\u27e812\u27e9. It is used to set expectations on the usage of a `Mock`\u27e811\u27e9 in a test case.\n## Traits\u00a7\u27e843\u27e9\n\nMatch\u27e89\u27e9\n    Anything that implements `Match` can be used to constrain when a `Mock`\u27e811\u27e9 is activated.\n\nRespond\u27e818\u27e9\n    Anything that implements `Respond` can be used to reply to an incoming request when a `Mock`\u27e811\u27e9 is activated.\n## Type Aliases\u00a7\u27e844\u27e9\n\nErrorResponse\u27e845\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/wiremock/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/wiremock/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/wiremock/latest/src/wiremock/lib.rs.html#1-164: Source\n\u27e84\u27e9 https://docs.rs/wiremock/latest/wiremock/#how-to-install: \u00a7\n\u27e85\u27e9 https://github.com/killercup/cargo-edit: `cargo-edit`\n\u27e86\u27e9 https://docs.rs/wiremock/latest/wiremock/#getting-started: \u00a7\n\u27e87\u27e9 https://docs.rs/wiremock/latest/wiremock/#matchers: \u00a7\n\u27e88\u27e9 https://docs.rs/wiremock/latest/wiremock/matchers/index.html: mod wiremock::matchers - `matchers`\n\u27e89\u27e9 https://docs.rs/wiremock/latest/wiremock/trait.Match.html: trait wiremock::Match - `Match`\n\u27e810\u27e9 https://docs.rs/wiremock/latest/wiremock/#spying: \u00a7\n\u27e811\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.Mock.html: struct wiremock::Mock - `Mock`\n\u27e812\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.Mock.html#method.expect: method wiremock::Mock::expect - `expect`\n\u27e813\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html: struct wiremock::MockServer - `MockServer`\n\u27e814\u27e9 https://docs.rs/wiremock/latest/wiremock/#responses: \u00a7\n\u27e815\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.ResponseTemplate.html: struct wiremock::ResponseTemplate - `ResponseTemplate`\n\u27e816\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.MockBuilder.html#method.respond_with: method wiremock::MockBuilder::respond_with - `respond_with`\n\u27e817\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.Request.html: struct wiremock::Request - `Request`\n\u27e818\u27e9 https://docs.rs/wiremock/latest/wiremock/trait.Respond.html: trait wiremock::Respond - `Respond`\n\u27e819\u27e9 https://docs.rs/wiremock/latest/wiremock/#test-isolation: \u00a7\n\u27e820\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html#method.start: associated function wiremock::MockServer::start - `start`\n\u27e821\u27e9 https://docs.rs/wiremock/latest/wiremock/#runtime-compatibility: \u00a7\n\u27e822\u27e9 https://docs.rs/async-std/: `async_std`\n\u27e823\u27e9 https://docs.rs/tokio/: `tokio`\n\u27e824\u27e9 https://github.com/LukeMathWalker/wiremock-rs: GitHub repository\n\u27e825\u27e9 https://docs.rs/wiremock/latest/wiremock/#efficiency: \u00a7\n\u27e826\u27e9 https://docs.rs/wiremock/latest/wiremock/#prior-art: \u00a7\n\u27e827\u27e9 https://docs.rs/mockito/: `mockito`\n\u27e828\u27e9 https://docs.rs/httpmock/: `httpmock`\n\u27e829\u27e9 https://docs.rs/wiremock/latest/wiremock/#future-evolution: \u00a7\n\u27e830\u27e9 https://docs.rs/wiremock/latest/wiremock/#related-projects: \u00a7\n\u27e831\u27e9 https://github.com/beltram/stubr: `stubr`\n\u27e832\u27e9 http://wiremock.org/: `Wiremock`\n\u27e833\u27e9 https://docs.rs/wiremock/latest/wiremock/#modules: \u00a7\n\u27e834\u27e9 https://docs.rs/wiremock/latest/wiremock/http/index.html: mod wiremock::http - http\n\u27e835\u27e9 https://docs.rs/wiremock/latest/wiremock/#structs: \u00a7\n\u27e836\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.MockBuilder.html: struct wiremock::MockBuilder - MockBuilder\n\u27e837\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.MockGuard.html: struct wiremock::MockGuard - MockGuard\n\u27e838\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html#method.register_as_scoped: method wiremock::MockServer::register_as_scoped - `MockServer::register_as_scoped`\n\u27e839\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.Mock.html#method.mount_as_scoped: method wiremock::Mock::mount_as_scoped - `Mock::mount_as_scoped`\n\u27e840\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.MockServerBuilder.html: struct wiremock::MockServerBuilder - MockServerBuilder\n\u27e841\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.MockServer.html#method.builder: associated function wiremock::MockServer::builder - `MockServer::builder`\n\u27e842\u27e9 https://docs.rs/wiremock/latest/wiremock/struct.Times.html: struct wiremock::Times - Times\n\u27e843\u27e9 https://docs.rs/wiremock/latest/wiremock/#traits: \u00a7\n\u27e844\u27e9 https://docs.rs/wiremock/latest/wiremock/#types: \u00a7\n\u27e845\u27e9 https://docs.rs/wiremock/latest/wiremock/type.ErrorResponse.html: type wiremock::ErrorResponse - ErrorResponse\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `wiremock` crate provides HTTP mocking for black-box testing of Rust applications that interact with third-party APIs. It enables request matching, response templating, spying on mock invocations, and test isolation using lightweight, parallelizable mock servers. Compatible with both `async_std` and `tokio`, it supports extensible matchers, efficient server pooling, and automatic cleanup after tests.",
    "feature_summary": null,
    "use_case": "DevTools",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Mocking HTTP Responses  \n\u2705 Factual: `wiremock` allows users to define HTTP mocks that match incoming requests based on criteria such as HTTP method and path, and respond with pre-defined templates.  \n\u274c Counterfactual: `wiremock` requires users to write custom HTTP server implementations to handle mocked responses.  \n\n---\n\n### Pair 2: Test Isolation  \n\u2705 Factual: Each `MockServer` instance in `wiremock` is fully isolated, running on a random local port to prevent cross-test interference.  \n\u274c Counterfactual: Multiple `MockServer` instances in `wiremock` share the same port, leading to potential conflicts during parallel test execution.  \n\n---\n\n### Pair 3: Runtime Compatibility  \n\u2705 Factual: `wiremock` is compatible with both `async_std` and `tokio` runtimes, making it versatile for different asynchronous programming environments in Rust.  \n\u274c Counterfactual: `wiremock` is only compatible with the `tokio` runtime and cannot be used with `async_std`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}