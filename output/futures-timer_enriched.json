{
    "name": "futures-timer",
    "version": "3.0.3",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/futures-timer/latest/futures_timer/all.html \"show sidebar\")\n# Crate futures_timerCopy item path\n[Settings](https://docs.rs/futures-timer/latest/settings.html)\n[Help](https://docs.rs/futures-timer/latest/help.html)\nSummary[Source](https://docs.rs/futures-timer/latest/src/futures_timer/lib.rs.html#1-27)\nExpand description\nA general purpose crate for working with timeouts and delays with futures.\n## [\u00a7](https://docs.rs/futures-timer/latest/futures_timer/#examples)Examples\n```\nuse std::time::Duration;\nuse futures_timer::Delay;\nlet now = Delay::new(Duration::from_secs(3)).await;\nprintln!(\"waited for 3 secs\");\n```\n\n## Structs[\u00a7](https://docs.rs/futures-timer/latest/futures_timer/#structs)\n\n[Delay](https://docs.rs/futures-timer/latest/futures_timer/struct.Delay.html \"struct futures_timer::Delay\")\n    A future representing the notification that an elapsed duration has occurred.\n",
        "markdown_with_citations": "[](https://docs.rs/futures-timer/latest/futures_timer/all.html \"show sidebar\")\n# Crate futures_timerCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA general purpose crate for working with timeouts and delays with futures.\n## \u00a7\u27e84\u27e9Examples\n```\nuse std::time::Duration;\nuse futures_timer::Delay;\nlet now = Delay::new(Duration::from_secs(3)).await;\nprintln!(\"waited for 3 secs\");\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nDelay\u27e86\u27e9\n    A future representing the notification that an elapsed duration has occurred.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-timer/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-timer/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-timer/latest/src/futures_timer/lib.rs.html#1-27: Source\n\u27e84\u27e9 https://docs.rs/futures-timer/latest/futures_timer/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/futures-timer/latest/futures_timer/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/futures-timer/latest/futures_timer/struct.Delay.html: struct futures_timer::Delay - Delay\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `futures-timer` crate provides utilities for working with timeouts and delays in asynchronous Rust code. Its primary feature is the `Delay` struct, which represents a future that completes after a specified duration. This makes it useful for scheduling timed operations or implementing time-based logic in async contexts.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 4.0,
    "factual_counterfactual": "### Pair 1: Timeout and Delay Functionality\n\u2705 Factual: The `futures-timer` crate provides a `Delay` struct that allows users to create futures that resolve after a specified duration, enabling timeout and delay functionality in asynchronous Rust applications.  \n\u274c Counterfactual: The `futures-timer` crate includes a `Delay` struct that can interrupt ongoing asynchronous tasks when the specified duration elapses.\n\n---\n\n### Pair 2: Integration with `std::time::Duration`\n\u2705 Factual: The `futures-timer` crate leverages `std::time::Duration` to specify the length of delays, making it straightforward to define timeouts using standard Rust time primitives.  \n\u274c Counterfactual: The `futures-timer` crate requires a custom time duration type instead of `std::time::Duration` to define delays, making it incompatible with standard Rust time primitives.\n\n---\n\n### Pair 3: Performance Characteristics\n\u2705 Factual: The `futures-timer` crate is designed to work efficiently in asynchronous contexts, ensuring minimal overhead when scheduling delays or timeouts.  \n\u274c Counterfactual: The `futures-timer` crate introduces significant performance overhead in asynchronous applications due to its reliance on blocking operations for delay implementation.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}