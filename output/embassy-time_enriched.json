{
    "name": "embassy-time",
    "version": "0.4.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/embassy-time/latest/embassy_time/all.html \"show sidebar\")\n# Crate embassy_timeCopy item path\n[Settings](https://docs.rs/embassy-time/latest/settings.html)\n[Help](https://docs.rs/embassy-time/latest/help.html)\nSummary[Source](https://docs.rs/embassy-time/latest/src/embassy_time/lib.rs.html#1-63)\nExpand description\n## [\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#embassy-time)embassy-time\nTimekeeping, delays and timeouts.\nTimekeeping is done with elapsed time since system boot. Time is represented in ticks, where the tick rate is defined either by the driver (in the case of a fixed-rate tick) or chosen by the user with a [tick rate](https://docs.rs/embassy-time/latest/embassy_time/#tick-rate) feature. The chosen tick rate applies to everything in `embassy-time` and thus determines the maximum timing resolution of `(1 / tick_rate) seconds`.\nTick counts are 64 bits. The default tick rate of 1Mhz supports representing time spans of up to ~584558 years, which is big enough for all practical purposes and allows not having to worry about overflows.\n### [\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#global-time-driver)Global time driver\nThe `time` module is backed by a global \u201ctime driver\u201d specified at build time. Only one driver can be active in a program.\nAll methods and structs transparently call into the active driver. This makes it possible for libraries to use `embassy_time` in a driver-agnostic way without requiring generic parameters.\nFor more details, check the [`embassy_time_driver`](https://crates.io/crates/embassy-time-driver) crate.\n### [\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#instants-and-durations)Instants and Durations\n[`Instant`](https://docs.rs/embassy-time/latest/embassy_time/struct.Instant.html \"struct embassy_time::Instant\") represents a given instant of time (relative to system boot), and [`Duration`](https://docs.rs/embassy-time/latest/embassy_time/struct.Duration.html \"struct embassy_time::Duration\") represents the duration of a span of time. They implement the math operations you\u2019d expect, like addition and substraction.\n### [\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#delays-and-timeouts)Delays and timeouts\n[`Timer`](https://docs.rs/embassy-time/latest/embassy_time/struct.Timer.html \"struct embassy_time::Timer\") allows performing async delays. [`Ticker`](https://docs.rs/embassy-time/latest/embassy_time/struct.Ticker.html \"struct embassy_time::Ticker\") allows periodic delays without drifting over time.\nAn implementation of the `embedded-hal` delay traits is provided by [`Delay`](https://docs.rs/embassy-time/latest/embassy_time/struct.Delay.html \"struct embassy_time::Delay\"), for compatibility with libraries from the ecosystem.\n### [\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#wall-clock-time)Wall-clock time\nThe `time` module deals exclusively with a monotonically increasing tick count. Therefore it has no direct support for wall-clock time (\u201creal life\u201d datetimes like `2021-08-24 13:33:21`).\nIf persistence across reboots is not needed, support can be built on top of `embassy_time` by storing the offset between \u201cseconds elapsed since boot\u201d and \u201cseconds since unix epoch\u201d.\n### [\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#feature-flags)Feature flags\n  * `defmt-timestamp-uptime` \u2014 Display the time since startup next to defmt log messages. At most 1 `defmt-timestamp-uptime-*` feature can be used. `defmt-timestamp-uptime` is provided for backwards compatibility (provides the same format as `uptime-us`). To use this you must have a time driver provided.\n  * `mock-driver` \u2014 Create a `MockDriver` that can be manually advanced for testing purposes.\n\n\n#### [\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#generic-queue)Generic Queue\nBy default embassy-time uses a timer queue implementation that is faster but depends on `embassy-executor`. It will panic if you try to await any timer when using another executor.\nAlternatively, you can choose to use a \u201cgeneric\u201d timer queue implementation that works on any executor. To enable it, enable any of the features below.\nThe features also set how many timers are used for the generic queue. At most one `generic-queue-*` feature can be enabled. If none is enabled, a default of 64 timers is used.\nWhen using embassy-time from libraries, you should _not_ enable any `generic-queue-*` feature, to allow the end user to pick.\n  * `generic-queue-8` \u2014 Generic Queue with 8 timers\n  * `generic-queue-16` \u2014 Generic Queue with 16 timers\n  * `generic-queue-32` \u2014 Generic Queue with 32 timers\n  * `generic-queue-64` \u2014 Generic Queue with 64 timers\n  * `generic-queue-128` \u2014 Generic Queue with 128 timers\n\n\n#### [\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#tick-rate)Tick Rate\nAt most 1 `tick-*` feature can be enabled. If none is enabled, a default of 1MHz is used.\nIf the time driver in use supports using arbitrary tick rates, you can enable one `tick-*` feature from your binary crate to set the tick rate. The driver will use configured tick rate. If the time driver supports a fixed tick rate, it will enable one feature itself, so you should not enable one. Check the time driver documentation for details.\nWhen using embassy-time from libraries, you should _not_ enable any `tick-*` feature, to allow the end user or the driver to pick.\nAvailable tick rates:\n  * `tick-hz-1` \u2014 1Hz Tick Rate\n  * `tick-hz-2` \u2014 2Hz Tick Rate\n  * `tick-hz-4` \u2014 4Hz Tick Rate\n  * `tick-hz-8` \u2014 8Hz Tick Rate\n  * `tick-hz-10` \u2014 10Hz Tick Rate\n  * `tick-hz-16` \u2014 16Hz Tick Rate\n  * `tick-hz-32` \u2014 32Hz Tick Rate\n  * `tick-hz-64` \u2014 64Hz Tick Rate\n  * `tick-hz-100` \u2014 100Hz Tick Rate\n  * `tick-hz-128` \u2014 128Hz Tick Rate\n  * `tick-hz-256` \u2014 256Hz Tick Rate\n  * `tick-hz-512` \u2014 512Hz Tick Rate\n  * `tick-hz-1_000` \u2014 1.0kHz Tick Rate\n  * `tick-hz-1_024` \u2014 1.024kHz Tick Rate\n  * `tick-hz-2_000` \u2014 2.0kHz Tick Rate\n  * `tick-hz-2_048` \u2014 2.048kHz Tick Rate\n  * `tick-hz-4_000` \u2014 4.0kHz Tick Rate\n  * `tick-hz-4_096` \u2014 4.096kHz Tick Rate\n  * `tick-hz-8_000` \u2014 8.0kHz Tick Rate\n  * `tick-hz-8_192` \u2014 8.192kHz Tick Rate\n  * `tick-hz-10_000` \u2014 10.0kHz Tick Rate\n  * `tick-hz-16_000` \u2014 16.0kHz Tick Rate\n  * `tick-hz-16_384` \u2014 16.384kHz Tick Rate\n  * `tick-hz-20_000` \u2014 20.0kHz Tick Rate\n  * `tick-hz-32_000` \u2014 32.0kHz Tick Rate\n  * `tick-hz-32_768` \u2014 32.768kHz Tick Rate\n  * `tick-hz-40_000` \u2014 40.0kHz Tick Rate\n  * `tick-hz-64_000` \u2014 64.0kHz Tick Rate\n  * `tick-hz-65_536` \u2014 65.536kHz Tick Rate\n  * `tick-hz-80_000` \u2014 80.0kHz Tick Rate\n  * `tick-hz-100_000` \u2014 100.0kHz Tick Rate\n  * `tick-hz-128_000` \u2014 128.0kHz Tick Rate\n  * `tick-hz-131_072` \u2014 131.072kHz Tick Rate\n  * `tick-hz-160_000` \u2014 160.0kHz Tick Rate\n  * `tick-hz-256_000` \u2014 256.0kHz Tick Rate\n  * `tick-hz-262_144` \u2014 262.144kHz Tick Rate\n  * `tick-hz-320_000` \u2014 320.0kHz Tick Rate\n  * `tick-hz-512_000` \u2014 512.0kHz Tick Rate\n  * `tick-hz-524_288` \u2014 524.288kHz Tick Rate\n  * `tick-hz-640_000` \u2014 640.0kHz Tick Rate\n  * `tick-hz-1_000_000` \u2014 1.0MHz Tick Rate\n  * `tick-hz-1_024_000` \u2014 1.024MHz Tick Rate\n  * `tick-hz-1_048_576` \u2014 1.048576MHz Tick Rate\n  * `tick-hz-1_280_000` \u2014 1.28MHz Tick Rate\n  * `tick-hz-2_000_000` \u2014 2.0MHz Tick Rate\n  * `tick-hz-2_048_000` \u2014 2.048MHz Tick Rate\n  * `tick-hz-2_097_152` \u2014 2.097152MHz Tick Rate\n  * `tick-hz-2_560_000` \u2014 2.56MHz Tick Rate\n  * `tick-hz-3_000_000` \u2014 3.0MHz Tick Rate\n  * `tick-hz-4_000_000` \u2014 4.0MHz Tick Rate\n  * `tick-hz-4_096_000` \u2014 4.096MHz Tick Rate\n  * `tick-hz-4_194_304` \u2014 4.194304MHz Tick Rate\n  * `tick-hz-5_120_000` \u2014 5.12MHz Tick Rate\n  * `tick-hz-6_000_000` \u2014 6.0MHz Tick Rate\n  * `tick-hz-8_000_000` \u2014 8.0MHz Tick Rate\n  * `tick-hz-8_192_000` \u2014 8.192MHz Tick Rate\n  * `tick-hz-8_388_608` \u2014 8.388608MHz Tick Rate\n  * `tick-hz-9_000_000` \u2014 9.0MHz Tick Rate\n  * `tick-hz-10_000_000` \u2014 10.0MHz Tick Rate\n  * `tick-hz-10_240_000` \u2014 10.24MHz Tick Rate\n  * `tick-hz-12_000_000` \u2014 12.0MHz Tick Rate\n  * `tick-hz-16_000_000` \u2014 16.0MHz Tick Rate\n  * `tick-hz-16_384_000` \u2014 16.384MHz Tick Rate\n  * `tick-hz-16_777_216` \u2014 16.777216MHz Tick Rate\n  * `tick-hz-18_000_000` \u2014 18.0MHz Tick Rate\n  * `tick-hz-20_000_000` \u2014 20.0MHz Tick Rate\n  * `tick-hz-20_480_000` \u2014 20.48MHz Tick Rate\n  * `tick-hz-24_000_000` \u2014 24.0MHz Tick Rate\n  * `tick-hz-30_000_000` \u2014 30.0MHz Tick Rate\n  * `tick-hz-32_000_000` \u2014 32.0MHz Tick Rate\n  * `tick-hz-32_768_000` \u2014 32.768MHz Tick Rate\n  * `tick-hz-36_000_000` \u2014 36.0MHz Tick Rate\n  * `tick-hz-40_000_000` \u2014 40.0MHz Tick Rate\n  * `tick-hz-40_960_000` \u2014 40.96MHz Tick Rate\n  * `tick-hz-48_000_000` \u2014 48.0MHz Tick Rate\n  * `tick-hz-50_000_000` \u2014 50.0MHz Tick Rate\n  * `tick-hz-60_000_000` \u2014 60.0MHz Tick Rate\n  * `tick-hz-64_000_000` \u2014 64.0MHz Tick Rate\n  * `tick-hz-65_536_000` \u2014 65.536MHz Tick Rate\n  * `tick-hz-70_000_000` \u2014 70.0MHz Tick Rate\n  * `tick-hz-72_000_000` \u2014 72.0MHz Tick Rate\n  * `tick-hz-80_000_000` \u2014 80.0MHz Tick Rate\n  * `tick-hz-81_920_000` \u2014 81.92MHz Tick Rate\n  * `tick-hz-90_000_000` \u2014 90.0MHz Tick Rate\n  * `tick-hz-96_000_000` \u2014 96.0MHz Tick Rate\n  * `tick-hz-100_000_000` \u2014 100.0MHz Tick Rate\n  * `tick-hz-110_000_000` \u2014 110.0MHz Tick Rate\n  * `tick-hz-120_000_000` \u2014 120.0MHz Tick Rate\n  * `tick-hz-128_000_000` \u2014 128.0MHz Tick Rate\n  * `tick-hz-130_000_000` \u2014 130.0MHz Tick Rate\n  * `tick-hz-131_072_000` \u2014 131.072MHz Tick Rate\n  * `tick-hz-140_000_000` \u2014 140.0MHz Tick Rate\n  * `tick-hz-144_000_000` \u2014 144.0MHz Tick Rate\n  * `tick-hz-150_000_000` \u2014 150.0MHz Tick Rate\n  * `tick-hz-160_000_000` \u2014 160.0MHz Tick Rate\n  * `tick-hz-163_840_000` \u2014 163.84MHz Tick Rate\n  * `tick-hz-170_000_000` \u2014 170.0MHz Tick Rate\n  * `tick-hz-180_000_000` \u2014 180.0MHz Tick Rate\n  * `tick-hz-190_000_000` \u2014 190.0MHz Tick Rate\n  * `tick-hz-192_000_000` \u2014 192.0MHz Tick Rate\n  * `tick-hz-200_000_000` \u2014 200.0MHz Tick Rate\n  * `tick-hz-210_000_000` \u2014 210.0MHz Tick Rate\n  * `tick-hz-220_000_000` \u2014 220.0MHz Tick Rate\n  * `tick-hz-230_000_000` \u2014 230.0MHz Tick Rate\n  * `tick-hz-240_000_000` \u2014 240.0MHz Tick Rate\n  * `tick-hz-250_000_000` \u2014 250.0MHz Tick Rate\n  * `tick-hz-256_000_000` \u2014 256.0MHz Tick Rate\n  * `tick-hz-260_000_000` \u2014 260.0MHz Tick Rate\n  * `tick-hz-262_144_000` \u2014 262.144MHz Tick Rate\n  * `tick-hz-270_000_000` \u2014 270.0MHz Tick Rate\n  * `tick-hz-280_000_000` \u2014 280.0MHz Tick Rate\n  * `tick-hz-288_000_000` \u2014 288.0MHz Tick Rate\n  * `tick-hz-290_000_000` \u2014 290.0MHz Tick Rate\n  * `tick-hz-300_000_000` \u2014 300.0MHz Tick Rate\n  * `tick-hz-320_000_000` \u2014 320.0MHz Tick Rate\n  * `tick-hz-327_680_000` \u2014 327.68MHz Tick Rate\n  * `tick-hz-340_000_000` \u2014 340.0MHz Tick Rate\n  * `tick-hz-360_000_000` \u2014 360.0MHz Tick Rate\n  * `tick-hz-380_000_000` \u2014 380.0MHz Tick Rate\n  * `tick-hz-384_000_000` \u2014 384.0MHz Tick Rate\n  * `tick-hz-400_000_000` \u2014 400.0MHz Tick Rate\n  * `tick-hz-420_000_000` \u2014 420.0MHz Tick Rate\n  * `tick-hz-440_000_000` \u2014 440.0MHz Tick Rate\n  * `tick-hz-460_000_000` \u2014 460.0MHz Tick Rate\n  * `tick-hz-480_000_000` \u2014 480.0MHz Tick Rate\n  * `tick-hz-500_000_000` \u2014 500.0MHz Tick Rate\n  * `tick-hz-512_000_000` \u2014 512.0MHz Tick Rate\n  * `tick-hz-520_000_000` \u2014 520.0MHz Tick Rate\n  * `tick-hz-524_288_000` \u2014 524.288MHz Tick Rate\n  * `tick-hz-540_000_000` \u2014 540.0MHz Tick Rate\n  * `tick-hz-560_000_000` \u2014 560.0MHz Tick Rate\n  * `tick-hz-576_000_000` \u2014 576.0MHz Tick Rate\n  * `tick-hz-580_000_000` \u2014 580.0MHz Tick Rate\n  * `tick-hz-600_000_000` \u2014 600.0MHz Tick Rate\n  * `tick-hz-620_000_000` \u2014 620.0MHz Tick Rate\n  * `tick-hz-640_000_000` \u2014 640.0MHz Tick Rate\n  * `tick-hz-655_360_000` \u2014 655.36MHz Tick Rate\n  * `tick-hz-660_000_000` \u2014 660.0MHz Tick Rate\n  * `tick-hz-680_000_000` \u2014 680.0MHz Tick Rate\n  * `tick-hz-700_000_000` \u2014 700.0MHz Tick Rate\n  * `tick-hz-720_000_000` \u2014 720.0MHz Tick Rate\n  * `tick-hz-740_000_000` \u2014 740.0MHz Tick Rate\n  * `tick-hz-760_000_000` \u2014 760.0MHz Tick Rate\n  * `tick-hz-768_000_000` \u2014 768.0MHz Tick Rate\n  * `tick-hz-780_000_000` \u2014 780.0MHz Tick Rate\n  * `tick-hz-800_000_000` \u2014 800.0MHz Tick Rate\n  * `tick-hz-820_000_000` \u2014 820.0MHz Tick Rate\n  * `tick-hz-840_000_000` \u2014 840.0MHz Tick Rate\n  * `tick-hz-860_000_000` \u2014 860.0MHz Tick Rate\n  * `tick-hz-880_000_000` \u2014 880.0MHz Tick Rate\n  * `tick-hz-900_000_000` \u2014 900.0MHz Tick Rate\n  * `tick-hz-920_000_000` \u2014 920.0MHz Tick Rate\n  * `tick-hz-940_000_000` \u2014 940.0MHz Tick Rate\n  * `tick-hz-960_000_000` \u2014 960.0MHz Tick Rate\n  * `tick-hz-980_000_000` \u2014 980.0MHz Tick Rate\n  * `tick-hz-1_000_000_000` \u2014 1.0GHz Tick Rate\n  * `tick-hz-1_310_720_000` \u2014 1.31072GHz Tick Rate\n  * `tick-hz-2_621_440_000` \u2014 2.62144GHz Tick Rate\n  * `tick-hz-5_242_880_000` \u2014 5.24288GHz Tick Rate\n\n\n## Structs[\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#structs)\n\n[Delay](https://docs.rs/embassy-time/latest/embassy_time/struct.Delay.html \"struct embassy_time::Delay\")\n    Type implementing async delays and blocking `embedded-hal` delays.\n\n[Duration](https://docs.rs/embassy-time/latest/embassy_time/struct.Duration.html \"struct embassy_time::Duration\")\n    Represents the difference between two [Instant](https://docs.rs/embassy-time/latest/embassy_time/struct.Instant.html)s\n\n[Instant](https://docs.rs/embassy-time/latest/embassy_time/struct.Instant.html \"struct embassy_time::Instant\")\n    An Instant in time, based on the MCU\u2019s clock ticks since startup.\n\n[Ticker](https://docs.rs/embassy-time/latest/embassy_time/struct.Ticker.html \"struct embassy_time::Ticker\")\n    Asynchronous stream that yields every Duration, indefinitely.\n\n[TimeoutError](https://docs.rs/embassy-time/latest/embassy_time/struct.TimeoutError.html \"struct embassy_time::TimeoutError\")\n    Error returned by [`with_timeout`](https://docs.rs/embassy-time/latest/embassy_time/fn.with_timeout.html \"fn embassy_time::with_timeout\") and [`with_deadline`](https://docs.rs/embassy-time/latest/embassy_time/fn.with_deadline.html \"fn embassy_time::with_deadline\") on timeout.\n\n[Timer](https://docs.rs/embassy-time/latest/embassy_time/struct.Timer.html \"struct embassy_time::Timer\")\n    A future that completes at a specified [Instant](https://docs.rs/embassy-time/latest/embassy_time/struct.Instant.html).\n## Constants[\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#constants)\n\n[TICK_HZ](https://docs.rs/embassy-time/latest/embassy_time/constant.TICK_HZ.html \"constant embassy_time::TICK_HZ\")\n    Ticks per second of the global timebase.\n## Traits[\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#traits)\n\n[WithTimeout](https://docs.rs/embassy-time/latest/embassy_time/trait.WithTimeout.html \"trait embassy_time::WithTimeout\")\n    Provides functions to run a given future with a timeout or a deadline.\n## Functions[\u00a7](https://docs.rs/embassy-time/latest/embassy_time/#functions)\n\n[block_for](https://docs.rs/embassy-time/latest/embassy_time/fn.block_for.html \"fn embassy_time::block_for\")\n    Blocks for at least `duration`.\n\n[with_deadline](https://docs.rs/embassy-time/latest/embassy_time/fn.with_deadline.html \"fn embassy_time::with_deadline\")\n    Runs a given future with a deadline time.\n\n[with_timeout](https://docs.rs/embassy-time/latest/embassy_time/fn.with_timeout.html \"fn embassy_time::with_timeout\")\n    Runs a given future with a timeout.\n",
        "markdown_with_citations": "[](https://docs.rs/embassy-time/latest/embassy_time/all.html \"show sidebar\")\n# Crate embassy_timeCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9embassy-time\nTimekeeping, delays and timeouts.\nTimekeeping is done with elapsed time since system boot. Time is represented in ticks, where the tick rate is defined either by the driver (in the case of a fixed-rate tick) or chosen by the user with a tick rate\u27e85\u27e9 feature. The chosen tick rate applies to everything in `embassy-time` and thus determines the maximum timing resolution of `(1 / tick_rate) seconds`.\nTick counts are 64 bits. The default tick rate of 1Mhz supports representing time spans of up to ~584558 years, which is big enough for all practical purposes and allows not having to worry about overflows.\n### \u00a7\u27e86\u27e9Global time driver\nThe `time` module is backed by a global \u201ctime driver\u201d specified at build time. Only one driver can be active in a program.\nAll methods and structs transparently call into the active driver. This makes it possible for libraries to use `embassy_time` in a driver-agnostic way without requiring generic parameters.\nFor more details, check the `embassy_time_driver`\u27e87\u27e9 crate.\n### \u00a7\u27e88\u27e9Instants and Durations\n`Instant`\u27e89\u27e9 represents a given instant of time (relative to system boot), and `Duration`\u27e810\u27e9 represents the duration of a span of time. They implement the math operations you\u2019d expect, like addition and substraction.\n### \u00a7\u27e811\u27e9Delays and timeouts\n`Timer`\u27e812\u27e9 allows performing async delays. `Ticker`\u27e813\u27e9 allows periodic delays without drifting over time.\nAn implementation of the `embedded-hal` delay traits is provided by `Delay`\u27e814\u27e9, for compatibility with libraries from the ecosystem.\n### \u00a7\u27e815\u27e9Wall-clock time\nThe `time` module deals exclusively with a monotonically increasing tick count. Therefore it has no direct support for wall-clock time (\u201creal life\u201d datetimes like `2021-08-24 13:33:21`).\nIf persistence across reboots is not needed, support can be built on top of `embassy_time` by storing the offset between \u201cseconds elapsed since boot\u201d and \u201cseconds since unix epoch\u201d.\n### \u00a7\u27e816\u27e9Feature flags\n  * `defmt-timestamp-uptime` \u2014 Display the time since startup next to defmt log messages. At most 1 `defmt-timestamp-uptime-*` feature can be used. `defmt-timestamp-uptime` is provided for backwards compatibility (provides the same format as `uptime-us`). To use this you must have a time driver provided.\n  * `mock-driver` \u2014 Create a `MockDriver` that can be manually advanced for testing purposes.\n\n\n#### \u00a7\u27e817\u27e9Generic Queue\nBy default embassy-time uses a timer queue implementation that is faster but depends on `embassy-executor`. It will panic if you try to await any timer when using another executor.\nAlternatively, you can choose to use a \u201cgeneric\u201d timer queue implementation that works on any executor. To enable it, enable any of the features below.\nThe features also set how many timers are used for the generic queue. At most one `generic-queue-*` feature can be enabled. If none is enabled, a default of 64 timers is used.\nWhen using embassy-time from libraries, you should _not_ enable any `generic-queue-*` feature, to allow the end user to pick.\n  * `generic-queue-8` \u2014 Generic Queue with 8 timers\n  * `generic-queue-16` \u2014 Generic Queue with 16 timers\n  * `generic-queue-32` \u2014 Generic Queue with 32 timers\n  * `generic-queue-64` \u2014 Generic Queue with 64 timers\n  * `generic-queue-128` \u2014 Generic Queue with 128 timers\n\n\n#### \u00a7\u27e85\u27e9Tick Rate\nAt most 1 `tick-*` feature can be enabled. If none is enabled, a default of 1MHz is used.\nIf the time driver in use supports using arbitrary tick rates, you can enable one `tick-*` feature from your binary crate to set the tick rate. The driver will use configured tick rate. If the time driver supports a fixed tick rate, it will enable one feature itself, so you should not enable one. Check the time driver documentation for details.\nWhen using embassy-time from libraries, you should _not_ enable any `tick-*` feature, to allow the end user or the driver to pick.\nAvailable tick rates:\n  * `tick-hz-1` \u2014 1Hz Tick Rate\n  * `tick-hz-2` \u2014 2Hz Tick Rate\n  * `tick-hz-4` \u2014 4Hz Tick Rate\n  * `tick-hz-8` \u2014 8Hz Tick Rate\n  * `tick-hz-10` \u2014 10Hz Tick Rate\n  * `tick-hz-16` \u2014 16Hz Tick Rate\n  * `tick-hz-32` \u2014 32Hz Tick Rate\n  * `tick-hz-64` \u2014 64Hz Tick Rate\n  * `tick-hz-100` \u2014 100Hz Tick Rate\n  * `tick-hz-128` \u2014 128Hz Tick Rate\n  * `tick-hz-256` \u2014 256Hz Tick Rate\n  * `tick-hz-512` \u2014 512Hz Tick Rate\n  * `tick-hz-1_000` \u2014 1.0kHz Tick Rate\n  * `tick-hz-1_024` \u2014 1.024kHz Tick Rate\n  * `tick-hz-2_000` \u2014 2.0kHz Tick Rate\n  * `tick-hz-2_048` \u2014 2.048kHz Tick Rate\n  * `tick-hz-4_000` \u2014 4.0kHz Tick Rate\n  * `tick-hz-4_096` \u2014 4.096kHz Tick Rate\n  * `tick-hz-8_000` \u2014 8.0kHz Tick Rate\n  * `tick-hz-8_192` \u2014 8.192kHz Tick Rate\n  * `tick-hz-10_000` \u2014 10.0kHz Tick Rate\n  * `tick-hz-16_000` \u2014 16.0kHz Tick Rate\n  * `tick-hz-16_384` \u2014 16.384kHz Tick Rate\n  * `tick-hz-20_000` \u2014 20.0kHz Tick Rate\n  * `tick-hz-32_000` \u2014 32.0kHz Tick Rate\n  * `tick-hz-32_768` \u2014 32.768kHz Tick Rate\n  * `tick-hz-40_000` \u2014 40.0kHz Tick Rate\n  * `tick-hz-64_000` \u2014 64.0kHz Tick Rate\n  * `tick-hz-65_536` \u2014 65.536kHz Tick Rate\n  * `tick-hz-80_000` \u2014 80.0kHz Tick Rate\n  * `tick-hz-100_000` \u2014 100.0kHz Tick Rate\n  * `tick-hz-128_000` \u2014 128.0kHz Tick Rate\n  * `tick-hz-131_072` \u2014 131.072kHz Tick Rate\n  * `tick-hz-160_000` \u2014 160.0kHz Tick Rate\n  * `tick-hz-256_000` \u2014 256.0kHz Tick Rate\n  * `tick-hz-262_144` \u2014 262.144kHz Tick Rate\n  * `tick-hz-320_000` \u2014 320.0kHz Tick Rate\n  * `tick-hz-512_000` \u2014 512.0kHz Tick Rate\n  * `tick-hz-524_288` \u2014 524.288kHz Tick Rate\n  * `tick-hz-640_000` \u2014 640.0kHz Tick Rate\n  * `tick-hz-1_000_000` \u2014 1.0MHz Tick Rate\n  * `tick-hz-1_024_000` \u2014 1.024MHz Tick Rate\n  * `tick-hz-1_048_576` \u2014 1.048576MHz Tick Rate\n  * `tick-hz-1_280_000` \u2014 1.28MHz Tick Rate\n  * `tick-hz-2_000_000` \u2014 2.0MHz Tick Rate\n  * `tick-hz-2_048_000` \u2014 2.048MHz Tick Rate\n  * `tick-hz-2_097_152` \u2014 2.097152MHz Tick Rate\n  * `tick-hz-2_560_000` \u2014 2.56MHz Tick Rate\n  * `tick-hz-3_000_000` \u2014 3.0MHz Tick Rate\n  * `tick-hz-4_000_000` \u2014 4.0MHz Tick Rate\n  * `tick-hz-4_096_000` \u2014 4.096MHz Tick Rate\n  * `tick-hz-4_194_304` \u2014 4.194304MHz Tick Rate\n  * `tick-hz-5_120_000` \u2014 5.12MHz Tick Rate\n  * `tick-hz-6_000_000` \u2014 6.0MHz Tick Rate\n  * `tick-hz-8_000_000` \u2014 8.0MHz Tick Rate\n  * `tick-hz-8_192_000` \u2014 8.192MHz Tick Rate\n  * `tick-hz-8_388_608` \u2014 8.388608MHz Tick Rate\n  * `tick-hz-9_000_000` \u2014 9.0MHz Tick Rate\n  * `tick-hz-10_000_000` \u2014 10.0MHz Tick Rate\n  * `tick-hz-10_240_000` \u2014 10.24MHz Tick Rate\n  * `tick-hz-12_000_000` \u2014 12.0MHz Tick Rate\n  * `tick-hz-16_000_000` \u2014 16.0MHz Tick Rate\n  * `tick-hz-16_384_000` \u2014 16.384MHz Tick Rate\n  * `tick-hz-16_777_216` \u2014 16.777216MHz Tick Rate\n  * `tick-hz-18_000_000` \u2014 18.0MHz Tick Rate\n  * `tick-hz-20_000_000` \u2014 20.0MHz Tick Rate\n  * `tick-hz-20_480_000` \u2014 20.48MHz Tick Rate\n  * `tick-hz-24_000_000` \u2014 24.0MHz Tick Rate\n  * `tick-hz-30_000_000` \u2014 30.0MHz Tick Rate\n  * `tick-hz-32_000_000` \u2014 32.0MHz Tick Rate\n  * `tick-hz-32_768_000` \u2014 32.768MHz Tick Rate\n  * `tick-hz-36_000_000` \u2014 36.0MHz Tick Rate\n  * `tick-hz-40_000_000` \u2014 40.0MHz Tick Rate\n  * `tick-hz-40_960_000` \u2014 40.96MHz Tick Rate\n  * `tick-hz-48_000_000` \u2014 48.0MHz Tick Rate\n  * `tick-hz-50_000_000` \u2014 50.0MHz Tick Rate\n  * `tick-hz-60_000_000` \u2014 60.0MHz Tick Rate\n  * `tick-hz-64_000_000` \u2014 64.0MHz Tick Rate\n  * `tick-hz-65_536_000` \u2014 65.536MHz Tick Rate\n  * `tick-hz-70_000_000` \u2014 70.0MHz Tick Rate\n  * `tick-hz-72_000_000` \u2014 72.0MHz Tick Rate\n  * `tick-hz-80_000_000` \u2014 80.0MHz Tick Rate\n  * `tick-hz-81_920_000` \u2014 81.92MHz Tick Rate\n  * `tick-hz-90_000_000` \u2014 90.0MHz Tick Rate\n  * `tick-hz-96_000_000` \u2014 96.0MHz Tick Rate\n  * `tick-hz-100_000_000` \u2014 100.0MHz Tick Rate\n  * `tick-hz-110_000_000` \u2014 110.0MHz Tick Rate\n  * `tick-hz-120_000_000` \u2014 120.0MHz Tick Rate\n  * `tick-hz-128_000_000` \u2014 128.0MHz Tick Rate\n  * `tick-hz-130_000_000` \u2014 130.0MHz Tick Rate\n  * `tick-hz-131_072_000` \u2014 131.072MHz Tick Rate\n  * `tick-hz-140_000_000` \u2014 140.0MHz Tick Rate\n  * `tick-hz-144_000_000` \u2014 144.0MHz Tick Rate\n  * `tick-hz-150_000_000` \u2014 150.0MHz Tick Rate\n  * `tick-hz-160_000_000` \u2014 160.0MHz Tick Rate\n  * `tick-hz-163_840_000` \u2014 163.84MHz Tick Rate\n  * `tick-hz-170_000_000` \u2014 170.0MHz Tick Rate\n  * `tick-hz-180_000_000` \u2014 180.0MHz Tick Rate\n  * `tick-hz-190_000_000` \u2014 190.0MHz Tick Rate\n  * `tick-hz-192_000_000` \u2014 192.0MHz Tick Rate\n  * `tick-hz-200_000_000` \u2014 200.0MHz Tick Rate\n  * `tick-hz-210_000_000` \u2014 210.0MHz Tick Rate\n  * `tick-hz-220_000_000` \u2014 220.0MHz Tick Rate\n  * `tick-hz-230_000_000` \u2014 230.0MHz Tick Rate\n  * `tick-hz-240_000_000` \u2014 240.0MHz Tick Rate\n  * `tick-hz-250_000_000` \u2014 250.0MHz Tick Rate\n  * `tick-hz-256_000_000` \u2014 256.0MHz Tick Rate\n  * `tick-hz-260_000_000` \u2014 260.0MHz Tick Rate\n  * `tick-hz-262_144_000` \u2014 262.144MHz Tick Rate\n  * `tick-hz-270_000_000` \u2014 270.0MHz Tick Rate\n  * `tick-hz-280_000_000` \u2014 280.0MHz Tick Rate\n  * `tick-hz-288_000_000` \u2014 288.0MHz Tick Rate\n  * `tick-hz-290_000_000` \u2014 290.0MHz Tick Rate\n  * `tick-hz-300_000_000` \u2014 300.0MHz Tick Rate\n  * `tick-hz-320_000_000` \u2014 320.0MHz Tick Rate\n  * `tick-hz-327_680_000` \u2014 327.68MHz Tick Rate\n  * `tick-hz-340_000_000` \u2014 340.0MHz Tick Rate\n  * `tick-hz-360_000_000` \u2014 360.0MHz Tick Rate\n  * `tick-hz-380_000_000` \u2014 380.0MHz Tick Rate\n  * `tick-hz-384_000_000` \u2014 384.0MHz Tick Rate\n  * `tick-hz-400_000_000` \u2014 400.0MHz Tick Rate\n  * `tick-hz-420_000_000` \u2014 420.0MHz Tick Rate\n  * `tick-hz-440_000_000` \u2014 440.0MHz Tick Rate\n  * `tick-hz-460_000_000` \u2014 460.0MHz Tick Rate\n  * `tick-hz-480_000_000` \u2014 480.0MHz Tick Rate\n  * `tick-hz-500_000_000` \u2014 500.0MHz Tick Rate\n  * `tick-hz-512_000_000` \u2014 512.0MHz Tick Rate\n  * `tick-hz-520_000_000` \u2014 520.0MHz Tick Rate\n  * `tick-hz-524_288_000` \u2014 524.288MHz Tick Rate\n  * `tick-hz-540_000_000` \u2014 540.0MHz Tick Rate\n  * `tick-hz-560_000_000` \u2014 560.0MHz Tick Rate\n  * `tick-hz-576_000_000` \u2014 576.0MHz Tick Rate\n  * `tick-hz-580_000_000` \u2014 580.0MHz Tick Rate\n  * `tick-hz-600_000_000` \u2014 600.0MHz Tick Rate\n  * `tick-hz-620_000_000` \u2014 620.0MHz Tick Rate\n  * `tick-hz-640_000_000` \u2014 640.0MHz Tick Rate\n  * `tick-hz-655_360_000` \u2014 655.36MHz Tick Rate\n  * `tick-hz-660_000_000` \u2014 660.0MHz Tick Rate\n  * `tick-hz-680_000_000` \u2014 680.0MHz Tick Rate\n  * `tick-hz-700_000_000` \u2014 700.0MHz Tick Rate\n  * `tick-hz-720_000_000` \u2014 720.0MHz Tick Rate\n  * `tick-hz-740_000_000` \u2014 740.0MHz Tick Rate\n  * `tick-hz-760_000_000` \u2014 760.0MHz Tick Rate\n  * `tick-hz-768_000_000` \u2014 768.0MHz Tick Rate\n  * `tick-hz-780_000_000` \u2014 780.0MHz Tick Rate\n  * `tick-hz-800_000_000` \u2014 800.0MHz Tick Rate\n  * `tick-hz-820_000_000` \u2014 820.0MHz Tick Rate\n  * `tick-hz-840_000_000` \u2014 840.0MHz Tick Rate\n  * `tick-hz-860_000_000` \u2014 860.0MHz Tick Rate\n  * `tick-hz-880_000_000` \u2014 880.0MHz Tick Rate\n  * `tick-hz-900_000_000` \u2014 900.0MHz Tick Rate\n  * `tick-hz-920_000_000` \u2014 920.0MHz Tick Rate\n  * `tick-hz-940_000_000` \u2014 940.0MHz Tick Rate\n  * `tick-hz-960_000_000` \u2014 960.0MHz Tick Rate\n  * `tick-hz-980_000_000` \u2014 980.0MHz Tick Rate\n  * `tick-hz-1_000_000_000` \u2014 1.0GHz Tick Rate\n  * `tick-hz-1_310_720_000` \u2014 1.31072GHz Tick Rate\n  * `tick-hz-2_621_440_000` \u2014 2.62144GHz Tick Rate\n  * `tick-hz-5_242_880_000` \u2014 5.24288GHz Tick Rate\n\n\n## Structs\u00a7\u27e818\u27e9\n\nDelay\u27e814\u27e9\n    Type implementing async delays and blocking `embedded-hal` delays.\n\nDuration\u27e810\u27e9\n    Represents the difference between two Instant\u27e89\u27e9s\n\nInstant\u27e89\u27e9\n    An Instant in time, based on the MCU\u2019s clock ticks since startup.\n\nTicker\u27e813\u27e9\n    Asynchronous stream that yields every Duration, indefinitely.\n\nTimeoutError\u27e819\u27e9\n    Error returned by `with_timeout`\u27e820\u27e9 and `with_deadline`\u27e821\u27e9 on timeout.\n\nTimer\u27e812\u27e9\n    A future that completes at a specified Instant\u27e89\u27e9.\n## Constants\u00a7\u27e822\u27e9\n\nTICK_HZ\u27e823\u27e9\n    Ticks per second of the global timebase.\n## Traits\u00a7\u27e824\u27e9\n\nWithTimeout\u27e825\u27e9\n    Provides functions to run a given future with a timeout or a deadline.\n## Functions\u00a7\u27e826\u27e9\n\nblock_for\u27e827\u27e9\n    Blocks for at least `duration`.\n\nwith_deadline\u27e821\u27e9\n    Runs a given future with a deadline time.\n\nwith_timeout\u27e820\u27e9\n    Runs a given future with a timeout.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/embassy-time/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/embassy-time/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/embassy-time/latest/src/embassy_time/lib.rs.html#1-63: Source\n\u27e84\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#embassy-time: \u00a7\n\u27e85\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#tick-rate: tick rate\n\u27e86\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#global-time-driver: \u00a7\n\u27e87\u27e9 https://crates.io/crates/embassy-time-driver: `embassy_time_driver`\n\u27e88\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#instants-and-durations: \u00a7\n\u27e89\u27e9 https://docs.rs/embassy-time/latest/embassy_time/struct.Instant.html: struct embassy_time::Instant - `Instant`\n\u27e810\u27e9 https://docs.rs/embassy-time/latest/embassy_time/struct.Duration.html: struct embassy_time::Duration - `Duration`\n\u27e811\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#delays-and-timeouts: \u00a7\n\u27e812\u27e9 https://docs.rs/embassy-time/latest/embassy_time/struct.Timer.html: struct embassy_time::Timer - `Timer`\n\u27e813\u27e9 https://docs.rs/embassy-time/latest/embassy_time/struct.Ticker.html: struct embassy_time::Ticker - `Ticker`\n\u27e814\u27e9 https://docs.rs/embassy-time/latest/embassy_time/struct.Delay.html: struct embassy_time::Delay - `Delay`\n\u27e815\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#wall-clock-time: \u00a7\n\u27e816\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#feature-flags: \u00a7\n\u27e817\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#generic-queue: \u00a7\n\u27e818\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/embassy-time/latest/embassy_time/struct.TimeoutError.html: struct embassy_time::TimeoutError - TimeoutError\n\u27e820\u27e9 https://docs.rs/embassy-time/latest/embassy_time/fn.with_timeout.html: fn embassy_time::with_timeout - `with_timeout`\n\u27e821\u27e9 https://docs.rs/embassy-time/latest/embassy_time/fn.with_deadline.html: fn embassy_time::with_deadline - `with_deadline`\n\u27e822\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#constants: \u00a7\n\u27e823\u27e9 https://docs.rs/embassy-time/latest/embassy_time/constant.TICK_HZ.html: constant embassy_time::TICK_HZ - TICK_HZ\n\u27e824\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#traits: \u00a7\n\u27e825\u27e9 https://docs.rs/embassy-time/latest/embassy_time/trait.WithTimeout.html: trait embassy_time::WithTimeout - WithTimeout\n\u27e826\u27e9 https://docs.rs/embassy-time/latest/embassy_time/#functions: \u00a7\n\u27e827\u27e9 https://docs.rs/embassy-time/latest/embassy_time/fn.block_for.html: fn embassy_time::block_for - block_for\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `embassy-time` crate provides timekeeping, delays, and timeout functionality based on ticks since system boot, with configurable tick rates for precise timing resolution. It supports asynchronous operations with `Timer` and `Ticker`, blocking delays via `Delay`, and timeout management through traits like `WithTimeout`. The crate is driver-agnostic, integrates with `embedded-hal`, and offers feature flags for customization, including mock drivers and generic timer queues.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Tick Rate Configuration  \n\u2705 **Factual**: The default tick rate for `embassy-time` is 1 MHz, which allows representing time spans of up to approximately 584,558 years without overflow.  \n\u274c **Counterfactual**: The default tick rate for `embassy-time` is 1 GHz, enabling nanosecond-level precision for all time-related operations.  \n\n---\n\n### Pair 2: Wall-Clock Time Support  \n\u2705 **Factual**: `embassy-time` does not directly support wall-clock time, but it can be implemented by storing the offset between \"seconds elapsed since boot\" and \"seconds since the Unix epoch.\"  \n\u274c **Counterfactual**: `embassy-time` provides built-in support for wall-clock time, including automatic synchronization with internet-based time servers.  \n\n---\n\n### Pair 3: Timer Queue Implementation  \n\u2705 **Factual**: By default, `embassy-time` uses a timer queue implementation that is optimized for `embassy-executor` but will panic if used with other executors unless the \"generic queue\" feature is enabled.  \n\u274c **Counterfactual**: `embassy-time` automatically detects and adapts to any executor without requiring feature flags or configuration changes.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}