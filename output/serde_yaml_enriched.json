{
    "name": "serde_yaml",
    "version": "0.9.34+deprecated",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/serde_yaml/latest/serde_yaml/all.html \"show sidebar\")\n# Crate serde_yamlCopy item path\n[Settings](https://docs.rs/serde_yaml/latest/settings.html)\n[Help](https://docs.rs/serde_yaml/latest/help.html)\nSummary[Source](https://docs.rs/serde_yaml/latest/src/serde_yaml/lib.rs.html#1-191)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/serde-yaml) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/serde-yaml) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/serde-yaml)\nRust library for using the [Serde](https://github.com/serde-rs/serde) serialization framework with data in [YAML](https://yaml.org/) file format. _(This project is no longer maintained.)_\n## [\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#examples)Examples\n```\nuse std::collections::BTreeMap;\nfn main() -> Result<(), serde_yaml::Error> {\n  // You have some type.\n  let mut map = BTreeMap::new();\n  map.insert(\"x\".to_string(), 1.0);\n  map.insert(\"y\".to_string(), 2.0);\n  // Serialize it to a YAML string.\n  let yaml = serde_yaml::to_string(&map)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  // Deserialize it back to a Rust type.\n  let deserialized_map: BTreeMap<String, f64> = serde_yaml::from_str(&yaml)?;\n  assert_eq!(map, deserialized_map);\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#using-serde-derive)Using Serde derive\nIt can also be used with Serde\u2019s derive macros to handle structs and enums defined in your program.\nStructs serialize in the obvious way:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nstruct Point {\n  x: f64,\n  y: f64,\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let point = Point { x: 1.0, y: 2.0 };\n  let yaml = serde_yaml::to_string(&point)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  let deserialized_point: Point = serde_yaml::from_str(&yaml)?;\n  assert_eq!(point, deserialized_point);\n  Ok(())\n}\n```\n\nEnums serialize using YAML\u2019s `!tag` syntax to identify the variant name.\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nenum Enum {\n  Unit,\n  Newtype(usize),\n  Tuple(usize, usize, usize),\n  Struct { x: f64, y: f64 },\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let yaml = \"\n    - !Newtype 1\n    - !Tuple [0, 0, 0]\n    - !Struct {x: 1.0, y: 2.0}\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Newtype(1));\n  assert_eq!(values[1], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[2], Enum::Struct { x: 1.0, y: 2.0 });\n  // The last two in YAML's block style instead:\n  let yaml = \"\n    - !Tuple\n     - 0\n     - 0\n     - 0\n    - !Struct\n     x: 1.0\n     y: 2.0\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[1], Enum::Struct { x: 1.0, y: 2.0 });\n  // Variants with no data can be written using !Tag or just the string name.\n  let yaml = \"\n    - Unit # serialization produces this one\n    - !Unit\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Unit);\n  assert_eq!(values[1], Enum::Unit);\n  Ok(())\n}\n```\n\n## Modules[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#modules)\n\n[mapping](https://docs.rs/serde_yaml/latest/serde_yaml/mapping/index.html \"mod serde_yaml::mapping\")\n    A YAML mapping and its iterator types.\n\n[value](https://docs.rs/serde_yaml/latest/serde_yaml/value/index.html \"mod serde_yaml::value\")\n    The Value enum, a loosely typed way of representing any valid YAML value.\n\n[with](https://docs.rs/serde_yaml/latest/serde_yaml/with/index.html \"mod serde_yaml::with\")\n    Customizations to use with Serde\u2019s `#[serde(with = \u2026)]` attribute.\n## Structs[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#structs)\n\n[Deserializer](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Deserializer.html \"struct serde_yaml::Deserializer\")\n    A structure that deserializes YAML into Rust values.\n\n[Error](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Error.html \"struct serde_yaml::Error\")\n    An error that happened serializing or deserializing YAML data.\n\n[Location](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Location.html \"struct serde_yaml::Location\")\n    The input location that an error occured.\n\n[Mapping](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Mapping.html \"struct serde_yaml::Mapping\")\n    A YAML mapping in which the keys and values are both `serde_yaml::Value`.\n\n[Number](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Number.html \"struct serde_yaml::Number\")\n    Represents a YAML number, whether integer or floating point.\n\n[Serializer](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Serializer.html \"struct serde_yaml::Serializer\")\n    A structure for serializing Rust values into YAML.\n## Enums[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#enums)\n\n[Value](https://docs.rs/serde_yaml/latest/serde_yaml/enum.Value.html \"enum serde_yaml::Value\")\n    Represents any valid YAML value.\n## Traits[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#traits)\n\n[Index](https://docs.rs/serde_yaml/latest/serde_yaml/trait.Index.html \"trait serde_yaml::Index\")\n    A type that can be used to index into a `serde_yaml::Value`. See the `get` and `get_mut` methods of `Value`.\n## Functions[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#functions)\n\n[from_reader](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_reader.html \"fn serde_yaml::from_reader\")\n    Deserialize an instance of type `T` from an IO stream of YAML.\n\n[from_slice](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_slice.html \"fn serde_yaml::from_slice\")\n    Deserialize an instance of type `T` from bytes of YAML text.\n\n[from_str](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_str.html \"fn serde_yaml::from_str\")\n    Deserialize an instance of type `T` from a string of YAML text.\n\n[from_value](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_value.html \"fn serde_yaml::from_value\")\n    Interpret a `serde_yaml::Value` as an instance of type `T`.\n\n[to_string](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_string.html \"fn serde_yaml::to_string\")\n    Serialize the given data structure as a String of YAML.\n\n[to_value](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_value.html \"fn serde_yaml::to_value\")\n    Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.\n\n[to_writer](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_writer.html \"fn serde_yaml::to_writer\")\n    Serialize the given data structure as YAML into the IO stream.\n## Type Aliases[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#types)\n\n[Result](https://docs.rs/serde_yaml/latest/serde_yaml/type.Result.html \"type serde_yaml::Result\")\n    Alias for a `Result` with the error type `serde_yaml::Error`.\n\n[Sequence](https://docs.rs/serde_yaml/latest/serde_yaml/type.Sequence.html \"type serde_yaml::Sequence\")\n    A YAML sequence in which the elements are `serde_yaml::Value`.\n",
        "markdown_with_citations": "[](https://docs.rs/serde_yaml/latest/serde_yaml/all.html \"show sidebar\")\n# Crate serde_yamlCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/serde-yaml) ![crates-io\u27e85\u27e9](https://crates.io/crates/serde-yaml) ![docs-rs\u27e86\u27e9](https://docs.rs/serde-yaml)\nRust library for using the Serde\u27e87\u27e9 serialization framework with data in YAML\u27e88\u27e9 file format. _(This project is no longer maintained.)_\n## \u00a7\u27e89\u27e9Examples\n```\nuse std::collections::BTreeMap;\nfn main() -> Result<(), serde_yaml::Error> {\n  // You have some type.\n  let mut map = BTreeMap::new();\n  map.insert(\"x\".to_string(), 1.0);\n  map.insert(\"y\".to_string(), 2.0);\n  // Serialize it to a YAML string.\n  let yaml = serde_yaml::to_string(&map)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  // Deserialize it back to a Rust type.\n  let deserialized_map: BTreeMap<String, f64> = serde_yaml::from_str(&yaml)?;\n  assert_eq!(map, deserialized_map);\n  Ok(())\n}\n```\n\n### \u00a7\u27e810\u27e9Using Serde derive\nIt can also be used with Serde\u2019s derive macros to handle structs and enums defined in your program.\nStructs serialize in the obvious way:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nstruct Point {\n  x: f64,\n  y: f64,\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let point = Point { x: 1.0, y: 2.0 };\n  let yaml = serde_yaml::to_string(&point)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  let deserialized_point: Point = serde_yaml::from_str(&yaml)?;\n  assert_eq!(point, deserialized_point);\n  Ok(())\n}\n```\n\nEnums serialize using YAML\u2019s `!tag` syntax to identify the variant name.\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nenum Enum {\n  Unit,\n  Newtype(usize),\n  Tuple(usize, usize, usize),\n  Struct { x: f64, y: f64 },\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let yaml = \"\n    - !Newtype 1\n    - !Tuple [0, 0, 0]\n    - !Struct {x: 1.0, y: 2.0}\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Newtype(1));\n  assert_eq!(values[1], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[2], Enum::Struct { x: 1.0, y: 2.0 });\n  // The last two in YAML's block style instead:\n  let yaml = \"\n    - !Tuple\n     - 0\n     - 0\n     - 0\n    - !Struct\n     x: 1.0\n     y: 2.0\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[1], Enum::Struct { x: 1.0, y: 2.0 });\n  // Variants with no data can be written using !Tag or just the string name.\n  let yaml = \"\n    - Unit # serialization produces this one\n    - !Unit\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Unit);\n  assert_eq!(values[1], Enum::Unit);\n  Ok(())\n}\n```\n\n## Modules\u00a7\u27e811\u27e9\n\nmapping\u27e812\u27e9\n    A YAML mapping and its iterator types.\n\nvalue\u27e813\u27e9\n    The Value enum, a loosely typed way of representing any valid YAML value.\n\nwith\u27e814\u27e9\n    Customizations to use with Serde\u2019s `#[serde(with = \u2026)]` attribute.\n## Structs\u00a7\u27e815\u27e9\n\nDeserializer\u27e816\u27e9\n    A structure that deserializes YAML into Rust values.\n\nError\u27e817\u27e9\n    An error that happened serializing or deserializing YAML data.\n\nLocation\u27e818\u27e9\n    The input location that an error occured.\n\nMapping\u27e819\u27e9\n    A YAML mapping in which the keys and values are both `serde_yaml::Value`.\n\nNumber\u27e820\u27e9\n    Represents a YAML number, whether integer or floating point.\n\nSerializer\u27e821\u27e9\n    A structure for serializing Rust values into YAML.\n## Enums\u00a7\u27e822\u27e9\n\nValue\u27e823\u27e9\n    Represents any valid YAML value.\n## Traits\u00a7\u27e824\u27e9\n\nIndex\u27e825\u27e9\n    A type that can be used to index into a `serde_yaml::Value`. See the `get` and `get_mut` methods of `Value`.\n## Functions\u00a7\u27e826\u27e9\n\nfrom_reader\u27e827\u27e9\n    Deserialize an instance of type `T` from an IO stream of YAML.\n\nfrom_slice\u27e828\u27e9\n    Deserialize an instance of type `T` from bytes of YAML text.\n\nfrom_str\u27e829\u27e9\n    Deserialize an instance of type `T` from a string of YAML text.\n\nfrom_value\u27e830\u27e9\n    Interpret a `serde_yaml::Value` as an instance of type `T`.\n\nto_string\u27e831\u27e9\n    Serialize the given data structure as a String of YAML.\n\nto_value\u27e832\u27e9\n    Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.\n\nto_writer\u27e833\u27e9\n    Serialize the given data structure as YAML into the IO stream.\n## Type Aliases\u00a7\u27e834\u27e9\n\nResult\u27e835\u27e9\n    Alias for a `Result` with the error type `serde_yaml::Error`.\n\nSequence\u27e836\u27e9\n    A YAML sequence in which the elements are `serde_yaml::Value`.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_yaml/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_yaml/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_yaml/latest/src/serde_yaml/lib.rs.html#1-191: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://github.com/serde-rs/serde: Serde\n\u27e88\u27e9 https://yaml.org/: YAML\n\u27e89\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#examples: \u00a7\n\u27e810\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#using-serde-derive: \u00a7\n\u27e811\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/mapping/index.html: mod serde_yaml::mapping - mapping\n\u27e813\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/value/index.html: mod serde_yaml::value - value\n\u27e814\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/with/index.html: mod serde_yaml::with - with\n\u27e815\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#structs: \u00a7\n\u27e816\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Deserializer.html: struct serde_yaml::Deserializer - Deserializer\n\u27e817\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Error.html: struct serde_yaml::Error - Error\n\u27e818\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Location.html: struct serde_yaml::Location - Location\n\u27e819\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Mapping.html: struct serde_yaml::Mapping - Mapping\n\u27e820\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Number.html: struct serde_yaml::Number - Number\n\u27e821\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Serializer.html: struct serde_yaml::Serializer - Serializer\n\u27e822\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#enums: \u00a7\n\u27e823\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/enum.Value.html: enum serde_yaml::Value - Value\n\u27e824\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#traits: \u00a7\n\u27e825\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/trait.Index.html: trait serde_yaml::Index - Index\n\u27e826\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#functions: \u00a7\n\u27e827\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_reader.html: fn serde_yaml::from_reader - from_reader\n\u27e828\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_slice.html: fn serde_yaml::from_slice - from_slice\n\u27e829\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_str.html: fn serde_yaml::from_str - from_str\n\u27e830\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_value.html: fn serde_yaml::from_value - from_value\n\u27e831\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_string.html: fn serde_yaml::to_string - to_string\n\u27e832\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_value.html: fn serde_yaml::to_value - to_value\n\u27e833\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_writer.html: fn serde_yaml::to_writer - to_writer\n\u27e834\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#types: \u00a7\n\u27e835\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/type.Result.html: type serde_yaml::Result - Result\n\u27e836\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/type.Sequence.html: type serde_yaml::Sequence - Sequence\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `serde_yaml` crate integrates the Serde framework with YAML, enabling seamless serialization and deserialization of Rust data structures to and from YAML. It supports custom mappings, enums with YAML `!tag` syntax, and loosely typed representation using the `Value` enum. Despite its rich feature set, the crate is no longer actively maintained.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 4.0,
    "factual_counterfactual": "### Pair 1: Serialization and Deserialization\n\u2705 Factual: The `serde_yaml` crate allows serialization of Rust data structures into YAML format and deserialization of YAML data back into Rust types using functions like `to_string` and `from_str`.  \n\u274c Counterfactual: The `serde_yaml` crate can directly serialize and deserialize YAML data into JSON format without any intermediate transformation.\n\n---\n\n### Pair 2: Enum Serialization\n\u2705 Factual: The `serde_yaml` crate supports serialization of enums using YAML\u2019s `!tag` syntax to identify variant names, which allows complex enum variants like structs and tuples to be represented.  \n\u274c Counterfactual: The `serde_yaml` crate does not support serialization of enums with complex variants, such as structs or tuples, and only handles unit variants.\n\n---\n\n### Pair 3: Project Status\n\u2705 Factual: The `serde_yaml` crate is no longer actively maintained, as indicated in its documentation, but it remains functional for existing use cases.  \n\u274c Counterfactual: The `serde_yaml` crate is actively maintained and receives regular updates to support new YAML features and Rust versions.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}