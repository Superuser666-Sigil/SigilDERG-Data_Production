{
    "name": "tokio-stream",
    "version": "0.1.17",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/tokio-stream/latest/tokio_stream/all.html \"show sidebar\")\n# Crate tokio_streamCopy item path\n[Settings](https://docs.rs/tokio-stream/latest/settings.html)\n[Help](https://docs.rs/tokio-stream/latest/help.html)\nSummary[Source](https://docs.rs/tokio-stream/latest/src/tokio_stream/lib.rs.html#1-118)\nExpand description\nStream utilities for Tokio.\nA `Stream` is an asynchronous sequence of values. It can be thought of as an asynchronous version of the standard library\u2019s `Iterator` trait.\nThis crate provides helpers to work with them. For examples of usage and a more in-depth description of streams you can also refer to the [streams tutorial](https://tokio.rs/tokio/tutorial/streams) on the tokio website.\n## [\u00a7](https://docs.rs/tokio-stream/latest/tokio_stream/#iterating-over-a-stream)Iterating over a Stream\nDue to similarities with the standard library\u2019s `Iterator` trait, some new users may assume that they can use `for in` syntax to iterate over a `Stream`, but this is unfortunately not possible. Instead, you can use a `while let` loop as follows:\n```\nuse tokio_stream::{self as stream, StreamExt};\n#[tokio::main]\nasync fn main() {\n  let mut stream = stream::iter(vec![0, 1, 2]);\n  while let Some(value) = stream.next().await {\n    println!(\"Got {}\", value);\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/tokio-stream/latest/tokio_stream/#returning-a-stream-from-a-function)Returning a Stream from a function\nA common way to stream values from a function is to pass in the sender half of a channel and use the receiver as the stream. This requires awaiting both futures to ensure progress is made. Another alternative is the [async-stream](https://docs.rs/async-stream) crate, which contains macros that provide a `yield` keyword and allow you to return an `impl Stream`.\n## [\u00a7](https://docs.rs/tokio-stream/latest/tokio_stream/#conversion-to-and-from-asyncreadasyncwrite)Conversion to and from `AsyncRead`/`AsyncWrite`\nIt is often desirable to convert a `Stream` into an [`AsyncRead`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html), especially when dealing with plaintext formats streamed over the network. The opposite conversion from an [`AsyncRead`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html) into a `Stream` is also another commonly required feature. To enable these conversions, [`tokio-util`](https://docs.rs/tokio-util/latest/tokio_util/codec/index.html) provides the [`StreamReader`](https://docs.rs/tokio-util/latest/tokio_util/io/struct.StreamReader.html) and [`ReaderStream`](https://docs.rs/tokio-util/latest/tokio_util/io/struct.ReaderStream.html) types when the io feature is enabled.\n## Re-exports[\u00a7](https://docs.rs/tokio-stream/latest/tokio_stream/#reexports)\n\n`pub use futures_core::Stream[](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html \"trait futures_core::stream::Stream\");`\n\n## Modules[\u00a7](https://docs.rs/tokio-stream/latest/tokio_stream/#modules)\n\n[adapters](https://docs.rs/tokio-stream/latest/tokio_stream/adapters/index.html \"mod tokio_stream::adapters\")\n    Adapters for [`Stream`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html \"trait futures_core::stream::Stream\")s created by methods in [`StreamExt`](https://docs.rs/tokio-stream/latest/tokio_stream/trait.StreamExt.html \"trait tokio_stream::StreamExt\").\n\n[wrappers](https://docs.rs/tokio-stream/latest/tokio_stream/wrappers/index.html \"mod tokio_stream::wrappers\")\n    Wrappers for Tokio types that implement `Stream`.\n## Structs[\u00a7](https://docs.rs/tokio-stream/latest/tokio_stream/#structs)\n\n[Elapsed](https://docs.rs/tokio-stream/latest/tokio_stream/struct.Elapsed.html \"struct tokio_stream::Elapsed\")`time`\n    Error returned by `Timeout` and `TimeoutRepeating`.\n\n[Empty](https://docs.rs/tokio-stream/latest/tokio_stream/struct.Empty.html \"struct tokio_stream::Empty\")\n    Stream for the [`empty`](https://docs.rs/tokio-stream/latest/tokio_stream/fn.empty.html \"fn tokio_stream::empty\") function.\n\n[Iter](https://docs.rs/tokio-stream/latest/tokio_stream/struct.Iter.html \"struct tokio_stream::Iter\")\n    Stream for the [`iter`](https://docs.rs/tokio-stream/latest/tokio_stream/fn.iter.html \"fn tokio_stream::iter\") function.\n\n[Once](https://docs.rs/tokio-stream/latest/tokio_stream/struct.Once.html \"struct tokio_stream::Once\")\n    Stream for the [`once`](https://docs.rs/tokio-stream/latest/tokio_stream/fn.once.html \"fn tokio_stream::once\") function.\n\n[Pending](https://docs.rs/tokio-stream/latest/tokio_stream/struct.Pending.html \"struct tokio_stream::Pending\")\n    Stream for the [`pending`](https://docs.rs/tokio-stream/latest/tokio_stream/fn.pending.html \"fn tokio_stream::pending\") function.\n\n[StreamMap](https://docs.rs/tokio-stream/latest/tokio_stream/struct.StreamMap.html \"struct tokio_stream::StreamMap\")\n    Combine many streams into one, indexing each source stream with a unique key.\n\n[StreamNotifyClose](https://docs.rs/tokio-stream/latest/tokio_stream/struct.StreamNotifyClose.html \"struct tokio_stream::StreamNotifyClose\")\n    A `Stream` that wraps the values in an `Option`.\n## Traits[\u00a7](https://docs.rs/tokio-stream/latest/tokio_stream/#traits)\n\n[FromStream](https://docs.rs/tokio-stream/latest/tokio_stream/trait.FromStream.html \"trait tokio_stream::FromStream\")\n    Convert from a [`Stream`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html \"trait futures_core::stream::Stream\").\n\n[StreamExt](https://docs.rs/tokio-stream/latest/tokio_stream/trait.StreamExt.html \"trait tokio_stream::StreamExt\")\n    An extension trait for the [`Stream`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html \"trait futures_core::stream::Stream\") trait that provides a variety of convenient combinator functions.\n## Functions[\u00a7](https://docs.rs/tokio-stream/latest/tokio_stream/#functions)\n\n[empty](https://docs.rs/tokio-stream/latest/tokio_stream/fn.empty.html \"fn tokio_stream::empty\")\n    Creates a stream that yields nothing.\n\n[iter](https://docs.rs/tokio-stream/latest/tokio_stream/fn.iter.html \"fn tokio_stream::iter\")\n    Converts an `Iterator` into a `Stream` which is always ready to yield the next value.\n\n[once](https://docs.rs/tokio-stream/latest/tokio_stream/fn.once.html \"fn tokio_stream::once\")\n    Creates a stream that emits an element exactly once.\n\n[pending](https://docs.rs/tokio-stream/latest/tokio_stream/fn.pending.html \"fn tokio_stream::pending\")\n    Creates a stream that is never ready\n",
        "markdown_with_citations": "[](https://docs.rs/tokio-stream/latest/tokio_stream/all.html \"show sidebar\")\n# Crate tokio_streamCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nStream utilities for Tokio.\nA `Stream` is an asynchronous sequence of values. It can be thought of as an asynchronous version of the standard library\u2019s `Iterator` trait.\nThis crate provides helpers to work with them. For examples of usage and a more in-depth description of streams you can also refer to the streams tutorial\u27e84\u27e9 on the tokio website.\n## \u00a7\u27e85\u27e9Iterating over a Stream\nDue to similarities with the standard library\u2019s `Iterator` trait, some new users may assume that they can use `for in` syntax to iterate over a `Stream`, but this is unfortunately not possible. Instead, you can use a `while let` loop as follows:\n```\nuse tokio_stream::{self as stream, StreamExt};\n#[tokio::main]\nasync fn main() {\n  let mut stream = stream::iter(vec![0, 1, 2]);\n  while let Some(value) = stream.next().await {\n    println!(\"Got {}\", value);\n  }\n}\n```\n\n## \u00a7\u27e86\u27e9Returning a Stream from a function\nA common way to stream values from a function is to pass in the sender half of a channel and use the receiver as the stream. This requires awaiting both futures to ensure progress is made. Another alternative is the async-stream\u27e87\u27e9 crate, which contains macros that provide a `yield` keyword and allow you to return an `impl Stream`.\n## \u00a7\u27e88\u27e9Conversion to and from `AsyncRead`/`AsyncWrite`\nIt is often desirable to convert a `Stream` into an `AsyncRead`\u27e89\u27e9, especially when dealing with plaintext formats streamed over the network. The opposite conversion from an `AsyncRead`\u27e89\u27e9 into a `Stream` is also another commonly required feature. To enable these conversions, `tokio-util`\u27e810\u27e9 provides the `StreamReader`\u27e811\u27e9 and `ReaderStream`\u27e812\u27e9 types when the io feature is enabled.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use futures_core::Stream[](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html \"trait futures_core::stream::Stream\");`\n\n## Modules\u00a7\u27e814\u27e9\n\nadapters\u27e815\u27e9\n    Adapters for `Stream`\u27e816\u27e9s created by methods in `StreamExt`\u27e817\u27e9.\n\nwrappers\u27e818\u27e9\n    Wrappers for Tokio types that implement `Stream`.\n## Structs\u00a7\u27e819\u27e9\n\nElapsed\u27e820\u27e9`time`\n    Error returned by `Timeout` and `TimeoutRepeating`.\n\nEmpty\u27e821\u27e9\n    Stream for the `empty`\u27e822\u27e9 function.\n\nIter\u27e823\u27e9\n    Stream for the `iter`\u27e824\u27e9 function.\n\nOnce\u27e825\u27e9\n    Stream for the `once`\u27e826\u27e9 function.\n\nPending\u27e827\u27e9\n    Stream for the `pending`\u27e828\u27e9 function.\n\nStreamMap\u27e829\u27e9\n    Combine many streams into one, indexing each source stream with a unique key.\n\nStreamNotifyClose\u27e830\u27e9\n    A `Stream` that wraps the values in an `Option`.\n## Traits\u00a7\u27e831\u27e9\n\nFromStream\u27e832\u27e9\n    Convert from a `Stream`\u27e816\u27e9.\n\nStreamExt\u27e817\u27e9\n    An extension trait for the `Stream`\u27e816\u27e9 trait that provides a variety of convenient combinator functions.\n## Functions\u00a7\u27e833\u27e9\n\nempty\u27e822\u27e9\n    Creates a stream that yields nothing.\n\niter\u27e824\u27e9\n    Converts an `Iterator` into a `Stream` which is always ready to yield the next value.\n\nonce\u27e826\u27e9\n    Creates a stream that emits an element exactly once.\n\npending\u27e828\u27e9\n    Creates a stream that is never ready\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tokio-stream/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tokio-stream/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tokio-stream/latest/src/tokio_stream/lib.rs.html#1-118: Source\n\u27e84\u27e9 https://tokio.rs/tokio/tutorial/streams: streams tutorial\n\u27e85\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/#iterating-over-a-stream: \u00a7\n\u27e86\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/#returning-a-stream-from-a-function: \u00a7\n\u27e87\u27e9 https://docs.rs/async-stream: async-stream\n\u27e88\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/#conversion-to-and-from-asyncreadasyncwrite: \u00a7\n\u27e89\u27e9 https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html: `AsyncRead`\n\u27e810\u27e9 https://docs.rs/tokio-util/latest/tokio_util/codec/index.html: `tokio-util`\n\u27e811\u27e9 https://docs.rs/tokio-util/latest/tokio_util/io/struct.StreamReader.html: `StreamReader`\n\u27e812\u27e9 https://docs.rs/tokio-util/latest/tokio_util/io/struct.ReaderStream.html: `ReaderStream`\n\u27e813\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/adapters/index.html: mod tokio_stream::adapters - adapters\n\u27e816\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html: trait futures_core::stream::Stream - `Stream`\n\u27e817\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/trait.StreamExt.html: trait tokio_stream::StreamExt - `StreamExt`\n\u27e818\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/wrappers/index.html: mod tokio_stream::wrappers - wrappers\n\u27e819\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/#structs: \u00a7\n\u27e820\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/struct.Elapsed.html: struct tokio_stream::Elapsed - Elapsed\n\u27e821\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/struct.Empty.html: struct tokio_stream::Empty - Empty\n\u27e822\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/fn.empty.html: fn tokio_stream::empty - `empty`\n\u27e823\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/struct.Iter.html: struct tokio_stream::Iter - Iter\n\u27e824\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/fn.iter.html: fn tokio_stream::iter - `iter`\n\u27e825\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/struct.Once.html: struct tokio_stream::Once - Once\n\u27e826\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/fn.once.html: fn tokio_stream::once - `once`\n\u27e827\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/struct.Pending.html: struct tokio_stream::Pending - Pending\n\u27e828\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/fn.pending.html: fn tokio_stream::pending - `pending`\n\u27e829\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/struct.StreamMap.html: struct tokio_stream::StreamMap - StreamMap\n\u27e830\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/struct.StreamNotifyClose.html: struct tokio_stream::StreamNotifyClose - StreamNotifyClose\n\u27e831\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/#traits: \u00a7\n\u27e832\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/trait.FromStream.html: trait tokio_stream::FromStream - FromStream\n\u27e833\u27e9 https://docs.rs/tokio-stream/latest/tokio_stream/#functions: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `tokio-stream` crate provides utilities for working with asynchronous streams in the Tokio ecosystem, serving as an async counterpart to the standard library's `Iterator` trait. It includes tools for iterating over streams, converting between `Stream` and `AsyncRead`/`AsyncWrite`, and creating streams from iterators or single values. Additionally, it offers combinators via the `StreamExt` trait, adapters, and specialized stream types like `StreamMap` and `StreamNotifyClose`.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Iterating over a Stream\n\u2705 **Factual:** The `tokio-stream` crate does not support `for in` syntax for iterating over a `Stream`, and instead requires using a `while let` loop with `.next().await` for asynchronous iteration.  \n\u274c **Counterfactual:** The `tokio-stream` crate allows the use of `for in` syntax to iterate over a `Stream`, just like the standard library's `Iterator` trait.\n\n---\n\n### Pair 2: Conversion to `AsyncRead`/`AsyncWrite`\n\u2705 **Factual:** The `tokio-util` crate provides `StreamReader` and `ReaderStream` types to enable conversion between `Stream` and `AsyncRead`/`AsyncWrite` when the `io` feature is enabled.  \n\u274c **Counterfactual:** The `tokio-stream` crate itself directly provides `StreamReader` and `ReaderStream` types for converting between `Stream` and `AsyncRead`/`AsyncWrite`.\n\n---\n\n### Pair 3: Returning a Stream from a Function\n\u2705 **Factual:** The `tokio-stream` crate supports returning a `Stream` from a function by using the sender half of a channel or by leveraging macros from the `async-stream` crate to yield values asynchronously.  \n\u274c **Counterfactual:** The `tokio-stream` crate includes built-in macros for yielding values asynchronously, eliminating the need for external crates like",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}