{
    "name": "displaydoc",
    "version": "0.2.5",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/displaydoc/latest/displaydoc/all.html \"show sidebar\")\n# Crate displaydocCopy item path\n[Settings](https://docs.rs/displaydoc/latest/settings.html)\n[Help](https://docs.rs/displaydoc/latest/help.html)\nSummary[Source](https://docs.rs/displaydoc/latest/src/displaydoc/lib.rs.html#1-186)\nExpand description\nThis library provides a convenient derive macro for the standard library\u2019s [`core::fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html) trait.\n```\n[dependencies]\ndisplaydoc = \"0.2\"\n```\n\n_Compiler support: requires rustc 1.56+_\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#example)Example\n_Demonstration alongside the[`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") derive macro from [`thiserror`](https://docs.rs/thiserror/1.0.25/thiserror/index.html), to propagate source locations from [`io::Error`](https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html \"struct std::io::error::Error\") with the `#[source]` attribute:_\n```\nuse std::io;\nuse displaydoc::Display;\nuse thiserror::Error;\n#[derive(Display, Error, Debug)]\npub enum DataStoreError {\n  /// data store disconnected\n  Disconnect(#[source] io::Error),\n  /// the data for key `{0}` is not available\n  Redaction(String),\n  /// invalid header (expected {expected:?}, found {found:?})\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  /// unknown data store error\n  Unknown,\n}\nlet error = DataStoreError::Redaction(\"CLASSIFIED CONTENT\".to_string());\nassert!(\"the data for key `CLASSIFIED CONTENT` is not available\" == &format!(\"{}\", error));\n```\n\n_Note that although[`io::Error`](https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html \"struct std::io::error::Error\") implements `Display`, we do not add it to the generated message for `DataStoreError::Disconnect`, since it is already made available via `#[source]`. See further context on avoiding duplication in error reports at the rust blog [here](https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-05-15-What-the-error-handling-project-group-is-working-towards.md#duplicate-information-issue)._\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#details)Details\n  * A `fmt::Display` impl is generated for your enum if you provide a docstring comment on each variant as shown above in the example. The `Display` derive macro supports a shorthand for interpolating fields from the error: \n    * `/// {var}` \u27f6 `write!(\"{}\", self.var)`\n    * `/// {0}` \u27f6 `write!(\"{}\", self.0)`\n    * `/// {var:?}` \u27f6 `write!(\"{:?}\", self.var)`\n    * `/// {0:?}` \u27f6 `write!(\"{:?}\", self.0)`\n  * This also works with structs and [generic types](https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html#generic-type-parameters \"derive displaydoc::Display\"):\n\n\n```\n/// oh no, an error: {0}\n#[derive(Display)]\npub struct Error<E>(pub E);\nlet error: Error<&str> = Error(\"muahaha i am an error\");\nassert!(\"oh no, an error: muahaha i am an error\" == &format!(\"{}\", error));\n```\n\n  * Two optional attributes can be added to your types next to the derive:\n    * `#[ignore_extra_doc_attributes]` makes the macro ignore any doc comment attributes (or `///` lines) after the first. Multi-line comments using `///` are otherwise treated as an error, so use this attribute or consider switching to block doc comments (`/** */`).\n    * `#[prefix_enum_doc_attributes]` combines the doc comment message on your enum itself with the messages for each variant, in the format \u201cenum: variant\u201d. When added to an enum, the doc comment on the enum becomes mandatory. When added to any other type, it has no effect.\n  * In case you want to have an independent doc comment, the `#[displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#faq)FAQ\n  1. **Is this crate`no_std` compatible?**\n     * Yes! This crate implements the [`core::fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html) trait, not the [`std::fmt::Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") trait, so it should work in `std` and `no_std` environments. Just add `default-features = false`.\n  2. **Does this crate work with`Path` and `PathBuf` via the `Display` trait?**\n     * Yuuup. This crate uses @dtolnay\u2019s [autoref specialization technique](https://github.com/dtolnay/case-studies/blob/master/autoref-specialization/README.md) to add a special trait for types to get the display impl. It then specializes for `Path` and `PathBuf`, and when either of these types are found, it calls `self.display()` to get a `std::path::Display<'_>` type which can be used with the `Display` format specifier!\n\n\n## Derive Macros[\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#derives)\n\n[Display](https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html \"derive displaydoc::Display\")\n    [Custom `#[derive(...)]` macro](https://doc.rust-lang.org/edition-guide/rust-2018/macros/custom-derive.html) for implementing [`fmt::Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") via doc comment attributes.\n",
        "markdown_with_citations": "[](https://docs.rs/displaydoc/latest/displaydoc/all.html \"show sidebar\")\n# Crate displaydocCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis library provides a convenient derive macro for the standard library\u2019s `core::fmt::Display`\u27e84\u27e9 trait.\n```\n[dependencies]\ndisplaydoc = \"0.2\"\n```\n\n_Compiler support: requires rustc 1.56+_\n### \u00a7\u27e85\u27e9Example\n_Demonstration alongside the`Error`\u27e86\u27e9 derive macro from `thiserror`\u27e87\u27e9, to propagate source locations from `io::Error`\u27e88\u27e9 with the `#[source]` attribute:_\n```\nuse std::io;\nuse displaydoc::Display;\nuse thiserror::Error;\n#[derive(Display, Error, Debug)]\npub enum DataStoreError {\n  /// data store disconnected\n  Disconnect(#[source] io::Error),\n  /// the data for key `{0}` is not available\n  Redaction(String),\n  /// invalid header (expected {expected:?}, found {found:?})\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  /// unknown data store error\n  Unknown,\n}\nlet error = DataStoreError::Redaction(\"CLASSIFIED CONTENT\".to_string());\nassert!(\"the data for key `CLASSIFIED CONTENT` is not available\" == &format!(\"{}\", error));\n```\n\n_Note that although`io::Error`\u27e88\u27e9 implements `Display`, we do not add it to the generated message for `DataStoreError::Disconnect`, since it is already made available via `#[source]`. See further context on avoiding duplication in error reports at the rust blog here\u27e89\u27e9._\n### \u00a7\u27e810\u27e9Details\n  * A `fmt::Display` impl is generated for your enum if you provide a docstring comment on each variant as shown above in the example. The `Display` derive macro supports a shorthand for interpolating fields from the error: \n    * `/// {var}` \u27f6 `write!(\"{}\", self.var)`\n    * `/// {0}` \u27f6 `write!(\"{}\", self.0)`\n    * `/// {var:?}` \u27f6 `write!(\"{:?}\", self.var)`\n    * `/// {0:?}` \u27f6 `write!(\"{:?}\", self.0)`\n  * This also works with structs and generic types\u27e811\u27e9:\n\n\n```\n/// oh no, an error: {0}\n#[derive(Display)]\npub struct Error<E>(pub E);\nlet error: Error<&str> = Error(\"muahaha i am an error\");\nassert!(\"oh no, an error: muahaha i am an error\" == &format!(\"{}\", error));\n```\n\n  * Two optional attributes can be added to your types next to the derive:\n    * `#[ignore_extra_doc_attributes]` makes the macro ignore any doc comment attributes (or `///` lines) after the first. Multi-line comments using `///` are otherwise treated as an error, so use this attribute or consider switching to block doc comments (`/** */`).\n    * `#[prefix_enum_doc_attributes]` combines the doc comment message on your enum itself with the messages for each variant, in the format \u201cenum: variant\u201d. When added to an enum, the doc comment on the enum becomes mandatory. When added to any other type, it has no effect.\n  * In case you want to have an independent doc comment, the `#displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7\u27e812\u27e9FAQ\n  1. **Is this crate`no_std` compatible?**\n     * Yes! This crate implements the `core::fmt::Display`\u27e84\u27e9 trait, not the `std::fmt::Display`\u27e813\u27e9 trait, so it should work in `std` and `no_std` environments. Just add `default-features = false`.\n  2. **Does this crate work with`Path` and `PathBuf` via the `Display` trait?**\n     * Yuuup. This crate uses @dtolnay\u2019s autoref specialization technique\u27e814\u27e9 to add a special trait for types to get the display impl. It then specializes for `Path` and `PathBuf`, and when either of these types are found, it calls `self.display()` to get a `std::path::Display<'_>` type which can be used with the `Display` format specifier!\n\n\n## Derive Macros\u00a7\u27e815\u27e9\n\nDisplay\u27e816\u27e9\n    [Custom `#[derive(...)]` macro](https://doc.rust-lang.org/edition-guide/rust-2018/macros/custom-derive.html) for implementing `fmt::Display`\u27e813\u27e9 via doc comment attributes.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/displaydoc/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/displaydoc/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/displaydoc/latest/src/displaydoc/lib.rs.html#1-186: Source\n\u27e84\u27e9 https://doc.rust-lang.org/std/fmt/trait.Display.html: `core::fmt::Display`\n\u27e85\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#example: \u00a7\n\u27e86\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html: trait core::error::Error - `Error`\n\u27e87\u27e9 https://docs.rs/thiserror/1.0.25/thiserror/index.html: `thiserror`\n\u27e88\u27e9 https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html: struct std::io::error::Error - `io::Error`\n\u27e89\u27e9 https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-05-15-What-the-error-handling-project-group-is-working-towards.md#duplicate-information-issue: here\n\u27e810\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#details: \u00a7\n\u27e811\u27e9 https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html#generic-type-parameters: derive displaydoc::Display - generic types\n\u27e812\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#faq: displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7\n\u27e813\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `std::fmt::Display`\n\u27e814\u27e9 https://github.com/dtolnay/case-studies/blob/master/autoref-specialization/README.md: autoref specialization technique\n\u27e815\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#derives: \u00a7\n\u27e816\u27e9 https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html: derive displaydoc::Display - Display\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `displaydoc` crate provides a custom `#[derive(Display)]` macro to implement the `core::fmt::Display` trait using doc comments. It allows interpolation of enum variant fields and struct fields directly in docstrings, supports generic types, and offers optional attributes for customizing behavior (e.g., ignoring extra doc comments or combining enum-level and variant-level messages). The crate is `no_std` compatible and includes specialized support for `Path` and `PathBuf` types.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Compatibility and Environment  \n\u2705 **Factual:** The `displaydoc` crate is compatible with `no_std` environments because it implements the `core::fmt::Display` trait instead of `std::fmt::Display`.  \n\u274c **Counterfactual:** The `displaydoc` crate requires the standard library (`std`) and cannot be used in `no_std` environments.  \n\n---\n\n### Pair 2: Field Interpolation in Doc Comments  \n\u2705 **Factual:** The `displaydoc` crate supports shorthand interpolation of fields in doc comments, such as `/// {var}` for `write!(\"{}\", self.var)` and `/// {var:?}` for `write!(\"{:?}\", self.var)`.  \n\u274c **Counterfactual:** The `displaydoc` crate requires manual implementation of the `fmt::Display` trait for interpolating fields and does not support shorthand syntax in doc comments.  \n\n---\n\n### Pair 3: Error Handling Integration  \n\u2705 **Factual:** The `displaydoc` crate can be used alongside the `thiserror` crate to derive both `Display` and `Error` implementations for enums, allowing propagation of source errors using the `#[source]` attribute.  \n\u274c **Counterfactual:** The `displaydoc` crate cannot be used with the `thiserror` crate, as it does not support integration with error handling traits like `Error`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}