{
    "name": "r2d2",
    "version": "0.8.10",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/r2d2/latest/r2d2/all.html \"show sidebar\")\n# Crate r2d2Copy item path\n[Settings](https://docs.rs/r2d2/latest/settings.html)\n[Help](https://docs.rs/r2d2/latest/help.html)\nSummary[Source](https://docs.rs/r2d2/latest/src/r2d2/lib.rs.html#1-653)\nExpand description\nA generic connection pool.\nOpening a new database connection every time one is needed is both inefficient and can lead to resource exhaustion under high traffic conditions. A connection pool maintains a set of open connections to a database, handing them out for repeated use.\nr2d2 is agnostic to the connection type it is managing. Implementors of the `ManageConnection` trait provide the database-specific logic to create and check the health of connections.\n## [\u00a7](https://docs.rs/r2d2/latest/r2d2/#example)Example\nUsing an imaginary \u201cfoodb\u201d database.\n[\u24d8](https://docs.rs/r2d2/latest/r2d2/ \"This example is not tested\")```\nuse std::thread;\nextern crate r2d2;\nextern crate r2d2_foodb;\nfn main() {\n  let manager = r2d2_foodb::FooConnectionManager::new(\"localhost:1234\");\n  let pool = r2d2::Pool::builder()\n    .max_size(15)\n    .build(manager)\n    .unwrap();\n  for _ in 0..20 {\n    let pool = pool.clone();\n    thread::spawn(move || {\n      let conn = pool.get().unwrap();\n      // use the connection\n      // it will be returned to the pool when it falls out of scope.\n    })\n  }\n}\n```\n\n## Re-exports[\u00a7](https://docs.rs/r2d2/latest/r2d2/#reexports)\n\n`pub use crate::event::HandleEvent[](https://docs.rs/r2d2/latest/r2d2/event/trait.HandleEvent.html \"trait r2d2::event::HandleEvent\");`\n\n\n`pub use crate::event::NopEventHandler[](https://docs.rs/r2d2/latest/r2d2/event/struct.NopEventHandler.html \"struct r2d2::event::NopEventHandler\");`\n\n## Modules[\u00a7](https://docs.rs/r2d2/latest/r2d2/#modules)\n\n[event](https://docs.rs/r2d2/latest/r2d2/event/index.html \"mod r2d2::event\")\n    Event subscriptions.\n## Structs[\u00a7](https://docs.rs/r2d2/latest/r2d2/#structs)\n\n[Builder](https://docs.rs/r2d2/latest/r2d2/struct.Builder.html \"struct r2d2::Builder\")\n    A builder for a connection pool.\n\n[Error](https://docs.rs/r2d2/latest/r2d2/struct.Error.html \"struct r2d2::Error\")\n    The error type returned by methods in this crate.\n\n[Extensions](https://docs.rs/r2d2/latest/r2d2/struct.Extensions.html \"struct r2d2::Extensions\")\n    A \u201ctype map\u201d used to associate data with pooled connections.\n\n[LoggingErrorHandler](https://docs.rs/r2d2/latest/r2d2/struct.LoggingErrorHandler.html \"struct r2d2::LoggingErrorHandler\")\n    A `HandleError` implementation which logs at the error level.\n\n[NopConnectionCustomizer](https://docs.rs/r2d2/latest/r2d2/struct.NopConnectionCustomizer.html \"struct r2d2::NopConnectionCustomizer\")\n    A `CustomizeConnection` which does nothing.\n\n[NopErrorHandler](https://docs.rs/r2d2/latest/r2d2/struct.NopErrorHandler.html \"struct r2d2::NopErrorHandler\")\n    A `HandleError` implementation which does nothing.\n\n[Pool](https://docs.rs/r2d2/latest/r2d2/struct.Pool.html \"struct r2d2::Pool\")\n    A generic connection pool.\n\n[PooledConnection](https://docs.rs/r2d2/latest/r2d2/struct.PooledConnection.html \"struct r2d2::PooledConnection\")\n    A smart pointer wrapping a connection.\n\n[State](https://docs.rs/r2d2/latest/r2d2/struct.State.html \"struct r2d2::State\")\n    Information about the state of a `Pool`.\n## Traits[\u00a7](https://docs.rs/r2d2/latest/r2d2/#traits)\n\n[CustomizeConnection](https://docs.rs/r2d2/latest/r2d2/trait.CustomizeConnection.html \"trait r2d2::CustomizeConnection\")\n    A trait which allows for customization of connections.\n\n[HandleError](https://docs.rs/r2d2/latest/r2d2/trait.HandleError.html \"trait r2d2::HandleError\")\n    A trait which handles errors reported by the `ManageConnection`.\n\n[ManageConnection](https://docs.rs/r2d2/latest/r2d2/trait.ManageConnection.html \"trait r2d2::ManageConnection\")\n    A trait which provides connection-specific functionality.\n",
        "markdown_with_citations": "[](https://docs.rs/r2d2/latest/r2d2/all.html \"show sidebar\")\n# Crate r2d2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA generic connection pool.\nOpening a new database connection every time one is needed is both inefficient and can lead to resource exhaustion under high traffic conditions. A connection pool maintains a set of open connections to a database, handing them out for repeated use.\nr2d2 is agnostic to the connection type it is managing. Implementors of the `ManageConnection` trait provide the database-specific logic to create and check the health of connections.\n## \u00a7\u27e84\u27e9Example\nUsing an imaginary \u201cfoodb\u201d database.\n\u24d8\u27e85\u27e9```\nuse std::thread;\nextern crate r2d2;\nextern crate r2d2_foodb;\nfn main() {\n  let manager = r2d2_foodb::FooConnectionManager::new(\"localhost:1234\");\n  let pool = r2d2::Pool::builder()\n    .max_size(15)\n    .build(manager)\n    .unwrap();\n  for _ in 0..20 {\n    let pool = pool.clone();\n    thread::spawn(move || {\n      let conn = pool.get().unwrap();\n      // use the connection\n      // it will be returned to the pool when it falls out of scope.\n    })\n  }\n}\n```\n\n## Re-exports\u00a7\u27e86\u27e9\n\n`pub use crate::event::HandleEvent[](https://docs.rs/r2d2/latest/r2d2/event/trait.HandleEvent.html \"trait r2d2::event::HandleEvent\");`\n\n\n`pub use crate::event::NopEventHandler[](https://docs.rs/r2d2/latest/r2d2/event/struct.NopEventHandler.html \"struct r2d2::event::NopEventHandler\");`\n\n## Modules\u00a7\u27e87\u27e9\n\nevent\u27e88\u27e9\n    Event subscriptions.\n## Structs\u00a7\u27e89\u27e9\n\nBuilder\u27e810\u27e9\n    A builder for a connection pool.\n\nError\u27e811\u27e9\n    The error type returned by methods in this crate.\n\nExtensions\u27e812\u27e9\n    A \u201ctype map\u201d used to associate data with pooled connections.\n\nLoggingErrorHandler\u27e813\u27e9\n    A `HandleError` implementation which logs at the error level.\n\nNopConnectionCustomizer\u27e814\u27e9\n    A `CustomizeConnection` which does nothing.\n\nNopErrorHandler\u27e815\u27e9\n    A `HandleError` implementation which does nothing.\n\nPool\u27e816\u27e9\n    A generic connection pool.\n\nPooledConnection\u27e817\u27e9\n    A smart pointer wrapping a connection.\n\nState\u27e818\u27e9\n    Information about the state of a `Pool`.\n## Traits\u00a7\u27e819\u27e9\n\nCustomizeConnection\u27e820\u27e9\n    A trait which allows for customization of connections.\n\nHandleError\u27e821\u27e9\n    A trait which handles errors reported by the `ManageConnection`.\n\nManageConnection\u27e822\u27e9\n    A trait which provides connection-specific functionality.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/r2d2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/r2d2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/r2d2/latest/src/r2d2/lib.rs.html#1-653: Source\n\u27e84\u27e9 https://docs.rs/r2d2/latest/r2d2/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/r2d2/latest/r2d2/: This example is not tested - \u24d8\n\u27e86\u27e9 https://docs.rs/r2d2/latest/r2d2/#reexports: \u00a7\n\u27e87\u27e9 https://docs.rs/r2d2/latest/r2d2/#modules: \u00a7\n\u27e88\u27e9 https://docs.rs/r2d2/latest/r2d2/event/index.html: mod r2d2::event - event\n\u27e89\u27e9 https://docs.rs/r2d2/latest/r2d2/#structs: \u00a7\n\u27e810\u27e9 https://docs.rs/r2d2/latest/r2d2/struct.Builder.html: struct r2d2::Builder - Builder\n\u27e811\u27e9 https://docs.rs/r2d2/latest/r2d2/struct.Error.html: struct r2d2::Error - Error\n\u27e812\u27e9 https://docs.rs/r2d2/latest/r2d2/struct.Extensions.html: struct r2d2::Extensions - Extensions\n\u27e813\u27e9 https://docs.rs/r2d2/latest/r2d2/struct.LoggingErrorHandler.html: struct r2d2::LoggingErrorHandler - LoggingErrorHandler\n\u27e814\u27e9 https://docs.rs/r2d2/latest/r2d2/struct.NopConnectionCustomizer.html: struct r2d2::NopConnectionCustomizer - NopConnectionCustomizer\n\u27e815\u27e9 https://docs.rs/r2d2/latest/r2d2/struct.NopErrorHandler.html: struct r2d2::NopErrorHandler - NopErrorHandler\n\u27e816\u27e9 https://docs.rs/r2d2/latest/r2d2/struct.Pool.html: struct r2d2::Pool - Pool\n\u27e817\u27e9 https://docs.rs/r2d2/latest/r2d2/struct.PooledConnection.html: struct r2d2::PooledConnection - PooledConnection\n\u27e818\u27e9 https://docs.rs/r2d2/latest/r2d2/struct.State.html: struct r2d2::State - State\n\u27e819\u27e9 https://docs.rs/r2d2/latest/r2d2/#traits: \u00a7\n\u27e820\u27e9 https://docs.rs/r2d2/latest/r2d2/trait.CustomizeConnection.html: trait r2d2::CustomizeConnection - CustomizeConnection\n\u27e821\u27e9 https://docs.rs/r2d2/latest/r2d2/trait.HandleError.html: trait r2d2::HandleError - HandleError\n\u27e822\u27e9 https://docs.rs/r2d2/latest/r2d2/trait.ManageConnection.html: trait r2d2::ManageConnection - ManageConnection\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `r2d2` crate provides a generic connection pooling solution to efficiently manage database connections, reducing overhead and preventing resource exhaustion under high traffic. It is agnostic to connection types, relying on the `ManageConnection` trait for database-specific logic. Key features include customizable connection handling, error management, and a builder for configuring pool properties like maximum size.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Connection Pooling  \n\u2705 **Factual:** The `r2d2` crate provides a generic connection pool that can manage connections to any type of database, as long as the database-specific logic is implemented using the `ManageConnection` trait.  \n\u274c **Counterfactual:** The `r2d2` crate is limited to managing connections only for SQL-based databases and cannot be used with NoSQL databases like MongoDB or Redis.  \n\n---\n\n### Pair 2: Thread-Safety  \n\u2705 **Factual:** The `r2d2` connection pool is designed to be thread-safe, allowing connections to be safely shared across multiple threads without risking data races or corruption.  \n\u274c **Counterfactual:** The `r2d2` connection pool is not thread-safe and requires manual synchronization when used in multi-threaded applications.  \n\n---\n\n### Pair 3: Pool Configuration  \n\u2705 **Factual:** The `r2d2::Pool::builder()` method allows developers to configure the maximum size of the connection pool, enabling fine-grained control over resource allocation.  \n\u274c **Counterfactual:** The `r2d2` crate does not allow customization of the connection pool size and always uses a fixed default size of 10 connections.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}