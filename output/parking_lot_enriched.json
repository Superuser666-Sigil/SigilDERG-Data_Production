{
    "name": "parking_lot",
    "version": "0.12.4",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/parking_lot/latest/parking_lot/all.html \"show sidebar\")\n# Crate parking_lotCopy item path\n[Settings](https://docs.rs/parking_lot/latest/settings.html)\n[Help](https://docs.rs/parking_lot/latest/help.html)\nSummary[Source](https://docs.rs/parking_lot/latest/src/parking_lot/lib.rs.html#8-59)\nExpand description\nThis library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.\n## Re-exports[\u00a7](https://docs.rs/parking_lot/latest/parking_lot/#reexports)\n\n`pub use ::lock_api[](https://docs.rs/lock_api/0.4.13/x86_64-unknown-linux-gnu/lock_api/index.html \"mod lock_api\");`\n\n## Modules[\u00a7](https://docs.rs/parking_lot/latest/parking_lot/#modules)\n\n[deadlock](https://docs.rs/parking_lot/latest/parking_lot/deadlock/index.html \"mod parking_lot::deadlock\")\n    [Experimental] Deadlock detection\n## Structs[\u00a7](https://docs.rs/parking_lot/latest/parking_lot/#structs)\n\n[ArcMutexGuard](https://docs.rs/parking_lot/latest/parking_lot/struct.ArcMutexGuard.html \"struct parking_lot::ArcMutexGuard\")\n    An RAII mutex guard returned by the `Arc` locking operations on `Mutex`.\n\n[ArcReentrantMutexGuard](https://docs.rs/parking_lot/latest/parking_lot/struct.ArcReentrantMutexGuard.html \"struct parking_lot::ArcReentrantMutexGuard\")\n    An RAII mutex guard returned by the `Arc` locking operations on `ReentrantMutex`.\n\n[ArcRwLockReadGuard](https://docs.rs/parking_lot/latest/parking_lot/struct.ArcRwLockReadGuard.html \"struct parking_lot::ArcRwLockReadGuard\")\n    An RAII rwlock guard returned by the `Arc` locking operations on `RwLock`.\n\n[ArcRwLockUpgradableReadGuard](https://docs.rs/parking_lot/latest/parking_lot/struct.ArcRwLockUpgradableReadGuard.html \"struct parking_lot::ArcRwLockUpgradableReadGuard\")\n    An RAII rwlock guard returned by the `Arc` locking operations on `RwLock`. This is similar to the `RwLockUpgradableReadGuard` struct, except instead of using a reference to unlock the `RwLock` it uses an `Arc<RwLock>`. This has several advantages, most notably that it has an `'static` lifetime.\n\n[ArcRwLockWriteGuard](https://docs.rs/parking_lot/latest/parking_lot/struct.ArcRwLockWriteGuard.html \"struct parking_lot::ArcRwLockWriteGuard\")\n    An RAII rwlock guard returned by the `Arc` locking operations on `RwLock`. This is similar to the `RwLockWriteGuard` struct, except instead of using a reference to unlock the `RwLock` it uses an `Arc<RwLock>`. This has several advantages, most notably that it has an `'static` lifetime.\n\n[Condvar](https://docs.rs/parking_lot/latest/parking_lot/struct.Condvar.html \"struct parking_lot::Condvar\")\n    A Condition Variable\n\n[Once](https://docs.rs/parking_lot/latest/parking_lot/struct.Once.html \"struct parking_lot::Once\")\n    A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.\n\n[RawFairMutex](https://docs.rs/parking_lot/latest/parking_lot/struct.RawFairMutex.html \"struct parking_lot::RawFairMutex\")\n    Raw fair mutex type backed by the parking lot.\n\n[RawMutex](https://docs.rs/parking_lot/latest/parking_lot/struct.RawMutex.html \"struct parking_lot::RawMutex\")\n    Raw mutex type backed by the parking lot.\n\n[RawRwLock](https://docs.rs/parking_lot/latest/parking_lot/struct.RawRwLock.html \"struct parking_lot::RawRwLock\")\n    Raw reader-writer lock type backed by the parking lot.\n\n[RawThreadId](https://docs.rs/parking_lot/latest/parking_lot/struct.RawThreadId.html \"struct parking_lot::RawThreadId\")\n    Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.\n\n[WaitTimeoutResult](https://docs.rs/parking_lot/latest/parking_lot/struct.WaitTimeoutResult.html \"struct parking_lot::WaitTimeoutResult\")\n    A type indicating whether a timed wait on a condition variable returned due to a time out or not.\n## Enums[\u00a7](https://docs.rs/parking_lot/latest/parking_lot/#enums)\n\n[OnceState](https://docs.rs/parking_lot/latest/parking_lot/enum.OnceState.html \"enum parking_lot::OnceState\")\n    Current state of a `Once`.\n## Functions[\u00a7](https://docs.rs/parking_lot/latest/parking_lot/#functions)\n\n[const_fair_mutex](https://docs.rs/parking_lot/latest/parking_lot/fn.const_fair_mutex.html \"fn parking_lot::const_fair_mutex\")\n    Creates a new fair mutex in an unlocked state ready for use.\n\n[const_mutex](https://docs.rs/parking_lot/latest/parking_lot/fn.const_mutex.html \"fn parking_lot::const_mutex\")\n    Creates a new mutex in an unlocked state ready for use.\n\n[const_reentrant_mutex](https://docs.rs/parking_lot/latest/parking_lot/fn.const_reentrant_mutex.html \"fn parking_lot::const_reentrant_mutex\")\n    Creates a new reentrant mutex in an unlocked state ready for use.\n\n[const_rwlock](https://docs.rs/parking_lot/latest/parking_lot/fn.const_rwlock.html \"fn parking_lot::const_rwlock\")\n    Creates a new instance of an `RwLock<T>` which is unlocked.\n## Type Aliases[\u00a7](https://docs.rs/parking_lot/latest/parking_lot/#types)\n\n[FairMutex](https://docs.rs/parking_lot/latest/parking_lot/type.FairMutex.html \"type parking_lot::FairMutex\")\n    A mutual exclusive primitive that is always fair, useful for protecting shared data\n\n[FairMutexGuard](https://docs.rs/parking_lot/latest/parking_lot/type.FairMutexGuard.html \"type parking_lot::FairMutexGuard\")\n    An RAII implementation of a \u201cscoped lock\u201d of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.\n\n[MappedFairMutexGuard](https://docs.rs/parking_lot/latest/parking_lot/type.MappedFairMutexGuard.html \"type parking_lot::MappedFairMutexGuard\")\n    An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a subfield of the protected data.\n\n[MappedMutexGuard](https://docs.rs/parking_lot/latest/parking_lot/type.MappedMutexGuard.html \"type parking_lot::MappedMutexGuard\")\n    An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.\n\n[MappedReentrantMutexGuard](https://docs.rs/parking_lot/latest/parking_lot/type.MappedReentrantMutexGuard.html \"type parking_lot::MappedReentrantMutexGuard\")\n    An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.\n\n[MappedRwLockReadGuard](https://docs.rs/parking_lot/latest/parking_lot/type.MappedRwLockReadGuard.html \"type parking_lot::MappedRwLockReadGuard\")\n    An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.\n\n[MappedRwLockWriteGuard](https://docs.rs/parking_lot/latest/parking_lot/type.MappedRwLockWriteGuard.html \"type parking_lot::MappedRwLockWriteGuard\")\n    An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.\n\n[Mutex](https://docs.rs/parking_lot/latest/parking_lot/type.Mutex.html \"type parking_lot::Mutex\")\n    A mutual exclusion primitive useful for protecting shared data\n\n[MutexGuard](https://docs.rs/parking_lot/latest/parking_lot/type.MutexGuard.html \"type parking_lot::MutexGuard\")\n    An RAII implementation of a \u201cscoped lock\u201d of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.\n\n[ReentrantMutex](https://docs.rs/parking_lot/latest/parking_lot/type.ReentrantMutex.html \"type parking_lot::ReentrantMutex\")\n    A mutex which can be recursively locked by a single thread.\n\n[ReentrantMutexGuard](https://docs.rs/parking_lot/latest/parking_lot/type.ReentrantMutexGuard.html \"type parking_lot::ReentrantMutexGuard\")\n    An RAII implementation of a \u201cscoped lock\u201d of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.\n\n[RwLock](https://docs.rs/parking_lot/latest/parking_lot/type.RwLock.html \"type parking_lot::RwLock\")\n    A reader-writer lock\n\n[RwLockReadGuard](https://docs.rs/parking_lot/latest/parking_lot/type.RwLockReadGuard.html \"type parking_lot::RwLockReadGuard\")\n    RAII structure used to release the shared read access of a lock when dropped.\n\n[RwLockUpgradableReadGuard](https://docs.rs/parking_lot/latest/parking_lot/type.RwLockUpgradableReadGuard.html \"type parking_lot::RwLockUpgradableReadGuard\")\n    RAII structure used to release the upgradable read access of a lock when dropped.\n\n[RwLockWriteGuard](https://docs.rs/parking_lot/latest/parking_lot/type.RwLockWriteGuard.html \"type parking_lot::RwLockWriteGuard\")\n    RAII structure used to release the exclusive write access of a lock when dropped.\n",
        "markdown_with_citations": "[](https://docs.rs/parking_lot/latest/parking_lot/all.html \"show sidebar\")\n# Crate parking_lotCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.\n## Re-exports\u00a7\u27e84\u27e9\n\n`pub use ::lock_api[](https://docs.rs/lock_api/0.4.13/x86_64-unknown-linux-gnu/lock_api/index.html \"mod lock_api\");`\n\n## Modules\u00a7\u27e85\u27e9\n\ndeadlock\u27e86\u27e9\n    [Experimental] Deadlock detection\n## Structs\u00a7\u27e87\u27e9\n\nArcMutexGuard\u27e88\u27e9\n    An RAII mutex guard returned by the `Arc` locking operations on `Mutex`.\n\nArcReentrantMutexGuard\u27e89\u27e9\n    An RAII mutex guard returned by the `Arc` locking operations on `ReentrantMutex`.\n\nArcRwLockReadGuard\u27e810\u27e9\n    An RAII rwlock guard returned by the `Arc` locking operations on `RwLock`.\n\nArcRwLockUpgradableReadGuard\u27e811\u27e9\n    An RAII rwlock guard returned by the `Arc` locking operations on `RwLock`. This is similar to the `RwLockUpgradableReadGuard` struct, except instead of using a reference to unlock the `RwLock` it uses an `Arc<RwLock>`. This has several advantages, most notably that it has an `'static` lifetime.\n\nArcRwLockWriteGuard\u27e812\u27e9\n    An RAII rwlock guard returned by the `Arc` locking operations on `RwLock`. This is similar to the `RwLockWriteGuard` struct, except instead of using a reference to unlock the `RwLock` it uses an `Arc<RwLock>`. This has several advantages, most notably that it has an `'static` lifetime.\n\nCondvar\u27e813\u27e9\n    A Condition Variable\n\nOnce\u27e814\u27e9\n    A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.\n\nRawFairMutex\u27e815\u27e9\n    Raw fair mutex type backed by the parking lot.\n\nRawMutex\u27e816\u27e9\n    Raw mutex type backed by the parking lot.\n\nRawRwLock\u27e817\u27e9\n    Raw reader-writer lock type backed by the parking lot.\n\nRawThreadId\u27e818\u27e9\n    Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.\n\nWaitTimeoutResult\u27e819\u27e9\n    A type indicating whether a timed wait on a condition variable returned due to a time out or not.\n## Enums\u00a7\u27e820\u27e9\n\nOnceState\u27e821\u27e9\n    Current state of a `Once`.\n## Functions\u00a7\u27e822\u27e9\n\nconst_fair_mutex\u27e823\u27e9\n    Creates a new fair mutex in an unlocked state ready for use.\n\nconst_mutex\u27e824\u27e9\n    Creates a new mutex in an unlocked state ready for use.\n\nconst_reentrant_mutex\u27e825\u27e9\n    Creates a new reentrant mutex in an unlocked state ready for use.\n\nconst_rwlock\u27e826\u27e9\n    Creates a new instance of an `RwLock<T>` which is unlocked.\n## Type Aliases\u00a7\u27e827\u27e9\n\nFairMutex\u27e828\u27e9\n    A mutual exclusive primitive that is always fair, useful for protecting shared data\n\nFairMutexGuard\u27e829\u27e9\n    An RAII implementation of a \u201cscoped lock\u201d of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.\n\nMappedFairMutexGuard\u27e830\u27e9\n    An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a subfield of the protected data.\n\nMappedMutexGuard\u27e831\u27e9\n    An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.\n\nMappedReentrantMutexGuard\u27e832\u27e9\n    An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.\n\nMappedRwLockReadGuard\u27e833\u27e9\n    An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.\n\nMappedRwLockWriteGuard\u27e834\u27e9\n    An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.\n\nMutex\u27e835\u27e9\n    A mutual exclusion primitive useful for protecting shared data\n\nMutexGuard\u27e836\u27e9\n    An RAII implementation of a \u201cscoped lock\u201d of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.\n\nReentrantMutex\u27e837\u27e9\n    A mutex which can be recursively locked by a single thread.\n\nReentrantMutexGuard\u27e838\u27e9\n    An RAII implementation of a \u201cscoped lock\u201d of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.\n\nRwLock\u27e839\u27e9\n    A reader-writer lock\n\nRwLockReadGuard\u27e840\u27e9\n    RAII structure used to release the shared read access of a lock when dropped.\n\nRwLockUpgradableReadGuard\u27e841\u27e9\n    RAII structure used to release the upgradable read access of a lock when dropped.\n\nRwLockWriteGuard\u27e842\u27e9\n    RAII structure used to release the exclusive write access of a lock when dropped.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/parking_lot/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/parking_lot/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/parking_lot/latest/src/parking_lot/lib.rs.html#8-59: Source\n\u27e84\u27e9 https://docs.rs/parking_lot/latest/parking_lot/#reexports: \u00a7\n\u27e85\u27e9 https://docs.rs/parking_lot/latest/parking_lot/#modules: \u00a7\n\u27e86\u27e9 https://docs.rs/parking_lot/latest/parking_lot/deadlock/index.html: mod parking_lot::deadlock - deadlock\n\u27e87\u27e9 https://docs.rs/parking_lot/latest/parking_lot/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.ArcMutexGuard.html: struct parking_lot::ArcMutexGuard - ArcMutexGuard\n\u27e89\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.ArcReentrantMutexGuard.html: struct parking_lot::ArcReentrantMutexGuard - ArcReentrantMutexGuard\n\u27e810\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.ArcRwLockReadGuard.html: struct parking_lot::ArcRwLockReadGuard - ArcRwLockReadGuard\n\u27e811\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.ArcRwLockUpgradableReadGuard.html: struct parking_lot::ArcRwLockUpgradableReadGuard - ArcRwLockUpgradableReadGuard\n\u27e812\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.ArcRwLockWriteGuard.html: struct parking_lot::ArcRwLockWriteGuard - ArcRwLockWriteGuard\n\u27e813\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.Condvar.html: struct parking_lot::Condvar - Condvar\n\u27e814\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.Once.html: struct parking_lot::Once - Once\n\u27e815\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.RawFairMutex.html: struct parking_lot::RawFairMutex - RawFairMutex\n\u27e816\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.RawMutex.html: struct parking_lot::RawMutex - RawMutex\n\u27e817\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.RawRwLock.html: struct parking_lot::RawRwLock - RawRwLock\n\u27e818\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.RawThreadId.html: struct parking_lot::RawThreadId - RawThreadId\n\u27e819\u27e9 https://docs.rs/parking_lot/latest/parking_lot/struct.WaitTimeoutResult.html: struct parking_lot::WaitTimeoutResult - WaitTimeoutResult\n\u27e820\u27e9 https://docs.rs/parking_lot/latest/parking_lot/#enums: \u00a7\n\u27e821\u27e9 https://docs.rs/parking_lot/latest/parking_lot/enum.OnceState.html: enum parking_lot::OnceState - OnceState\n\u27e822\u27e9 https://docs.rs/parking_lot/latest/parking_lot/#functions: \u00a7\n\u27e823\u27e9 https://docs.rs/parking_lot/latest/parking_lot/fn.const_fair_mutex.html: fn parking_lot::const_fair_mutex - const_fair_mutex\n\u27e824\u27e9 https://docs.rs/parking_lot/latest/parking_lot/fn.const_mutex.html: fn parking_lot::const_mutex - const_mutex\n\u27e825\u27e9 https://docs.rs/parking_lot/latest/parking_lot/fn.const_reentrant_mutex.html: fn parking_lot::const_reentrant_mutex - const_reentrant_mutex\n\u27e826\u27e9 https://docs.rs/parking_lot/latest/parking_lot/fn.const_rwlock.html: fn parking_lot::const_rwlock - const_rwlock\n\u27e827\u27e9 https://docs.rs/parking_lot/latest/parking_lot/#types: \u00a7\n\u27e828\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.FairMutex.html: type parking_lot::FairMutex - FairMutex\n\u27e829\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.FairMutexGuard.html: type parking_lot::FairMutexGuard - FairMutexGuard\n\u27e830\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.MappedFairMutexGuard.html: type parking_lot::MappedFairMutexGuard - MappedFairMutexGuard\n\u27e831\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.MappedMutexGuard.html: type parking_lot::MappedMutexGuard - MappedMutexGuard\n\u27e832\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.MappedReentrantMutexGuard.html: type parking_lot::MappedReentrantMutexGuard - MappedReentrantMutexGuard\n\u27e833\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.MappedRwLockReadGuard.html: type parking_lot::MappedRwLockReadGuard - MappedRwLockReadGuard\n\u27e834\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.MappedRwLockWriteGuard.html: type parking_lot::MappedRwLockWriteGuard - MappedRwLockWriteGuard\n\u27e835\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.Mutex.html: type parking_lot::Mutex - Mutex\n\u27e836\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.MutexGuard.html: type parking_lot::MutexGuard - MutexGuard\n\u27e837\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.ReentrantMutex.html: type parking_lot::ReentrantMutex - ReentrantMutex\n\u27e838\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.ReentrantMutexGuard.html: type parking_lot::ReentrantMutexGuard - ReentrantMutexGuard\n\u27e839\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.RwLock.html: type parking_lot::RwLock - RwLock\n\u27e840\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.RwLockReadGuard.html: type parking_lot::RwLockReadGuard - RwLockReadGuard\n\u27e841\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.RwLockUpgradableReadGuard.html: type parking_lot::RwLockUpgradableReadGuard - RwLockUpgradableReadGuard\n\u27e842\u27e9 https://docs.rs/parking_lot/latest/parking_lot/type.RwLockWriteGuard.html: type parking_lot::RwLockWriteGuard - RwLockWriteGuard\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `parking_lot` crate provides high-performance implementations of synchronization primitives such as `Mutex`, `RwLock`, `Condvar`, and `Once`, which are smaller, faster, and more flexible than their standard library counterparts. It includes advanced features like `ReentrantMutex`, fair locking mechanisms, and experimental deadlock detection. Additionally, it offers RAII guards and `Arc`-based locking for enhanced usability and lifetime management.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Mutex Implementation  \n\u2705 **Factual**: The `parking_lot` crate provides a `Mutex` implementation that is smaller and faster than the standard library's `std::sync::Mutex`, making it ideal for performance-critical applications.  \n\u274c **Counterfactual**: The `parking_lot` crate's `Mutex` implementation is slower than `std::sync::Mutex` because it prioritizes fairness over performance.  \n\n---\n\n### Pair 2: Deadlock Detection  \n\u2705 **Factual**: The `parking_lot` crate includes an experimental `deadlock` module for detecting deadlocks in multi-threaded applications.  \n\u274c **Counterfactual**: The `parking_lot` crate's `deadlock` module is a production-ready feature that guarantees deadlock prevention.  \n\n---\n\n### Pair 3: Reentrant Mutex  \n\u2705 **Factual**: The `parking_lot` crate provides a `ReentrantMutex` type, which allows the same thread to acquire the lock multiple times without causing a deadlock.  \n\u274c **Counterfactual**: The `parking_lot` crate does not support reentrant locks, requiring developers to use external libraries for recursive locking.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}