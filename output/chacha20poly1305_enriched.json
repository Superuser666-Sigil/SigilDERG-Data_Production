{
    "name": "chacha20poly1305",
    "version": "0.11.0-rc.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/all.html \"show sidebar\")\n# Crate chacha20poly1305Copy item path\n[Settings](https://docs.rs/chacha20poly1305/latest/settings.html)\n[Help](https://docs.rs/chacha20poly1305/latest/help.html)\nSummary[Source](https://docs.rs/chacha20poly1305/latest/src/chacha20poly1305/lib.rs.html#1-301)\nExpand description\n## [\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#rustcrypto-chacha20poly1305)RustCrypto: ChaCha20Poly1305\n[![crate](https://buildstats.info/crate/chacha20poly1305)](https://crates.io/crates/chacha20poly1305) [![Docs](https://docs.rs/chacha20poly1305/badge.svg)](https://docs.rs/chacha20poly1305/) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.56+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260038-AEADs) [![Build Status](https://github.com/RustCrypto/AEADs/workflows/chacha20poly1305/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/AEADs/actions)\nPure Rust implementation of **ChaCha20Poly1305** ([RFC 8439](https://tools.ietf.org/html/rfc8439)): an [Authenticated Encryption with Associated Data (AEAD)](https://en.wikipedia.org/wiki/Authenticated_encryption) cipher amenable to fast, constant-time implementations in software, based on the [ChaCha20](https://github.com/RustCrypto/stream-ciphers/tree/master/chacha20) stream cipher and [Poly1305](https://github.com/RustCrypto/universal-hashes/tree/master/poly1305) universal hash function.\nThis crate also contains an implementation of **XChaCha20Poly1305** : a variant of ChaCha20Poly1305 with an extended 192-bit (24-byte) nonce.\n[Documentation](https://docs.rs/chacha20poly1305/)\n### [\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#about)About\nChaCha20Poly1305 is notable for being simple and fast when implemented in pure software. The underlying ChaCha20 stream cipher uses a simple combination of add, rotate, and XOR instructions (a.k.a. \u201cARX\u201d), and the Poly1305 hash function is likewise extremely simple.\nWhile it hasn\u2019t received approval from certain standards bodies (i.e. NIST) the algorithm is widely used and deployed. Notably it\u2019s mandatory to implement in the Transport Layer Security (TLS) protocol. The underlying ChaCha20 cipher is also widely used as a cryptographically secure random number generator, including internal use by the Rust standard library.\n### [\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#security-notes)Security Notes\nThis crate has received one [security audit by NCC Group](https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/), with no significant findings. We would like to thank [MobileCoin](https://www.mobilecoin.com/) for funding the audit.\nAll implementations contained in the crate are designed to execute in constant time, either by relying on hardware intrinsics (i.e. AVX2 on x86/x86_64), or using a portable implementation which is only constant time on processors which implement constant-time multiplication.\nIt is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\n### [\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#license)License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### [\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#supported-algorithms)Supported Algorithms\nThis crate contains pure Rust implementations of [`ChaCha20Poly1305`](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.ChaCha20Poly1305.html \"type chacha20poly1305::ChaCha20Poly1305\") (with optional AVX2 acceleration) as well as the following variants thereof:\n  * [`XChaCha20Poly1305`](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XChaCha20Poly1305.html \"type chacha20poly1305::XChaCha20Poly1305\") - ChaCha20Poly1305 variant with an extended 192-bit (24-byte) nonce.\n  * [`ChaCha8Poly1305`](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.ChaCha8Poly1305.html \"type chacha20poly1305::ChaCha8Poly1305\") / [`ChaCha12Poly1305`](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.ChaCha12Poly1305.html \"type chacha20poly1305::ChaCha12Poly1305\") - non-standard, reduced-round variants (gated under the `reduced-round` Cargo feature). See the [Too Much Crypto](https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/) paper for background and rationale on when these constructions could be used. When in doubt, prefer [`ChaCha20Poly1305`](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.ChaCha20Poly1305.html \"type chacha20poly1305::ChaCha20Poly1305\").\n  * [`XChaCha8Poly1305`](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XChaCha8Poly1305.html \"type chacha20poly1305::XChaCha8Poly1305\") / [`XChaCha12Poly1305`](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XChaCha12Poly1305.html \"type chacha20poly1305::XChaCha12Poly1305\") - same as above, but with an extended 192-bit (24-byte) nonce.\n\n\n## [\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#usage)Usage\n```\nuse chacha20poly1305::{\n  aead::{Aead, AeadCore, KeyInit, OsRng},\n  ChaCha20Poly1305, Nonce\n};\nlet key = ChaCha20Poly1305::generate_key(&mut OsRng);\nlet cipher = ChaCha20Poly1305::new(&key);\nlet nonce = ChaCha20Poly1305::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet ciphertext = cipher.encrypt(&nonce, b\"plaintext message\".as_ref())?;\nlet plaintext = cipher.decrypt(&nonce, ciphertext.as_ref())?;\nassert_eq!(&plaintext, b\"plaintext message\");\n```\n\n### [\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#in-place-usage-eliminates-alloc-requirement)In-place Usage (eliminates `alloc` requirement)\nThis crate has an optional `alloc` feature which can be disabled in e.g. microcontroller environments that don\u2019t have a heap.\nThe [`AeadInPlace::encrypt_in_place`](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.AeadInPlace.html#method.encrypt_in_place \"method chacha20poly1305::AeadInPlace::encrypt_in_place\") and [`AeadInPlace::decrypt_in_place`](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.AeadInPlace.html#method.decrypt_in_place \"method chacha20poly1305::AeadInPlace::decrypt_in_place\") methods accept any type that impls the [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") trait which contains the plaintext for encryption or ciphertext for decryption.\nNote that if you enable the `heapless` feature of this crate, you will receive an impl of [`aead::Buffer`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html \"trait aead::Buffer\") for `heapless::Vec` (re-exported from the [`aead`](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\") crate as [`aead::heapless::Vec`](https://docs.rs/heapless/0.7.17/x86_64-unknown-linux-gnu/heapless/vec/struct.Vec.html \"struct heapless::vec::Vec\")), which can then be passed as the `buffer` parameter to the in-place encrypt and decrypt methods:\n```\nuse chacha20poly1305::{\n  aead::{AeadCore, AeadInPlace, KeyInit, OsRng, heapless::Vec},\n  ChaCha20Poly1305, Nonce,\n};\nlet key = ChaCha20Poly1305::generate_key(&mut OsRng);\nlet cipher = ChaCha20Poly1305::new(&key);\nlet nonce = ChaCha20Poly1305::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet mut buffer: Vec<u8, 128> = Vec::new(); // Note: buffer needs 16-bytes overhead for auth tag\nbuffer.extend_from_slice(b\"plaintext message\");\n// Encrypt `buffer` in-place, replacing the plaintext contents with ciphertext\ncipher.encrypt_in_place(&nonce, b\"\", &mut buffer)?;\n// `buffer` now contains the message ciphertext\nassert_ne!(&buffer, b\"plaintext message\");\n// Decrypt `buffer` in-place, replacing its ciphertext context with the original plaintext\ncipher.decrypt_in_place(&nonce, b\"\", &mut buffer)?;\nassert_eq!(&buffer, b\"plaintext message\");\n```\n\n### [\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#xchacha20poly1305)[`XChaCha20Poly1305`](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XChaCha20Poly1305.html \"type chacha20poly1305::XChaCha20Poly1305\")\nChaCha20Poly1305 variant with an extended 192-bit (24-byte) nonce.\nThe construction is an adaptation of the same techniques used by XSalsa20 as described in the paper \u201cExtending the Salsa20 Nonce\u201d to the 96-bit nonce variant of ChaCha20, which derive a separate subkey/nonce for each extended nonce:\n<https://cr.yp.to/snuffle/xsalsa-20081128.pdf>\nNo authoritative specification exists for XChaCha20Poly1305, however the construction has \u201crough consensus and running code\u201d in the form of several interoperable libraries and protocols (e.g. libsodium, WireGuard) and is documented in an (expired) IETF draft, which also applies the proof from the XSalsa20 paper to the construction in order to demonstrate that XChaCha20 is secure if ChaCha20 is secure (see Section 3.1):\n<https://tools.ietf.org/html/draft-arciszewski-xchacha-03>\nIt is worth noting that NaCl/libsodium\u2019s default \u201csecretbox\u201d algorithm is XSalsa20Poly1305, not XChaCha20Poly1305, and thus not compatible with this library. If you are interested in that construction, please see the `xsalsa20poly1305` crate:\n<https://docs.rs/xsalsa20poly1305/>\n## [\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#usage-1)Usage\n```\nuse chacha20poly1305::{\n  aead::{Aead, AeadCore, KeyInit, OsRng},\n  XChaCha20Poly1305, XNonce\n};\nlet key = XChaCha20Poly1305::generate_key(&mut OsRng);\nlet cipher = XChaCha20Poly1305::new(&key);\nlet nonce = XChaCha20Poly1305::generate_nonce(&mut OsRng); // 192-bits; unique per message\nlet ciphertext = cipher.encrypt(&nonce, b\"plaintext message\".as_ref())?;\nlet plaintext = cipher.decrypt(&nonce, ciphertext.as_ref())?;\nassert_eq!(&plaintext, b\"plaintext message\");\n```\n\n## Re-exports[\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#reexports)\n\n`pub use aead[](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\");`\n\n## Modules[\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#modules)\n\n[consts](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/consts/index.html \"mod chacha20poly1305::consts\")\n\n## Structs[\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#structs)\n\n[ChaChaPoly1305](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/struct.ChaChaPoly1305.html \"struct chacha20poly1305::ChaChaPoly1305\")\n    Generic ChaCha+Poly1305 Authenticated Encryption with Additional Data (AEAD) construction.\n\n[Error](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/struct.Error.html \"struct chacha20poly1305::Error\")\n    Error type.\n## Traits[\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#traits)\n\n[AeadCore](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.AeadCore.html \"trait chacha20poly1305::AeadCore\")\n    Authenticated Encryption with Associated Data (AEAD) algorithm core trait.\n\n[AeadInPlace](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.AeadInPlace.html \"trait chacha20poly1305::AeadInPlace\")\n    In-place stateless AEAD trait.\n\n[KeyInit](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.KeyInit.html \"trait chacha20poly1305::KeyInit\")\n    Types which can be initialized from key.\n\n[KeySizeUser](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.KeySizeUser.html \"trait chacha20poly1305::KeySizeUser\")\n    Types which use key for initialization.\n## Type Aliases[\u00a7](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#types)\n\n[ChaCha8Poly1305](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.ChaCha8Poly1305.html \"type chacha20poly1305::ChaCha8Poly1305\")`reduced-round`\n    ChaCha8Poly1305 (reduced round variant) Authenticated Encryption with Additional Data (AEAD).\n\n[ChaCha12Poly1305](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.ChaCha12Poly1305.html \"type chacha20poly1305::ChaCha12Poly1305\")`reduced-round`\n    ChaCha12Poly1305 (reduced round variant) Authenticated Encryption with Additional Data (AEAD).\n\n[ChaCha20Poly1305](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.ChaCha20Poly1305.html \"type chacha20poly1305::ChaCha20Poly1305\")\n    ChaCha20Poly1305 Authenticated Encryption with Additional Data (AEAD).\n\n[Key](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.Key.html \"type chacha20poly1305::Key\")\n    Key type (256-bits/32-bytes).\n\n[Nonce](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.Nonce.html \"type chacha20poly1305::Nonce\")\n    Nonce type (96-bits/12-bytes).\n\n[Tag](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.Tag.html \"type chacha20poly1305::Tag\")\n    Poly1305 tag.\n\n[XChaCha8Poly1305](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XChaCha8Poly1305.html \"type chacha20poly1305::XChaCha8Poly1305\")`reduced-round`\n    XChaCha8Poly1305 (reduced round variant) Authenticated Encryption with Additional Data (AEAD).\n\n[XChaCha12Poly1305](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XChaCha12Poly1305.html \"type chacha20poly1305::XChaCha12Poly1305\")`reduced-round`\n    XChaCha12Poly1305 (reduced round variant) Authenticated Encryption with Additional Data (AEAD).\n\n[XChaCha20Poly1305](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XChaCha20Poly1305.html \"type chacha20poly1305::XChaCha20Poly1305\")\n    XChaCha20Poly1305 Authenticated Encryption with Additional Data (AEAD).\n\n[XNonce](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XNonce.html \"type chacha20poly1305::XNonce\")\n    XNonce type (192-bits/24-bytes).\n",
        "markdown_with_citations": "[](https://docs.rs/chacha20poly1305/latest/chacha20poly1305/all.html \"show sidebar\")\n# Crate chacha20poly1305Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto: ChaCha20Poly1305\n![crate\u27e85\u27e9](https://crates.io/crates/chacha20poly1305) ![Docs\u27e86\u27e9](https://docs.rs/chacha20poly1305/) ![Apache2/MIT licensed\u27e87\u27e9] ![Rust Version\u27e88\u27e9] ![Project Chat\u27e89\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260038-AEADs) ![Build Status\u27e810\u27e9](https://github.com/RustCrypto/AEADs/actions)\nPure Rust implementation of **ChaCha20Poly1305** (RFC 8439\u27e811\u27e9): an Authenticated Encryption with Associated Data (AEAD)\u27e812\u27e9 cipher amenable to fast, constant-time implementations in software, based on the ChaCha20\u27e813\u27e9 stream cipher and Poly1305\u27e814\u27e9 universal hash function.\nThis crate also contains an implementation of **XChaCha20Poly1305** : a variant of ChaCha20Poly1305 with an extended 192-bit (24-byte) nonce.\nDocumentation\u27e815\u27e9\n### \u00a7\u27e816\u27e9About\nChaCha20Poly1305 is notable for being simple and fast when implemented in pure software. The underlying ChaCha20 stream cipher uses a simple combination of add, rotate, and XOR instructions (a.k.a. \u201cARX\u201d), and the Poly1305 hash function is likewise extremely simple.\nWhile it hasn\u2019t received approval from certain standards bodies (i.e. NIST) the algorithm is widely used and deployed. Notably it\u2019s mandatory to implement in the Transport Layer Security (TLS) protocol. The underlying ChaCha20 cipher is also widely used as a cryptographically secure random number generator, including internal use by the Rust standard library.\n### \u00a7\u27e817\u27e9Security Notes\nThis crate has received one security audit by NCC Group\u27e818\u27e9, with no significant findings. We would like to thank MobileCoin\u27e819\u27e9 for funding the audit.\nAll implementations contained in the crate are designed to execute in constant time, either by relying on hardware intrinsics (i.e. AVX2 on x86/x86_64), or using a portable implementation which is only constant time on processors which implement constant-time multiplication.\nIt is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\n### \u00a7\u27e820\u27e9License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e821\u27e9\n  * MIT license\u27e822\u27e9\n\n\nat your option.\n#### \u00a7\u27e823\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### \u00a7\u27e824\u27e9Supported Algorithms\nThis crate contains pure Rust implementations of `ChaCha20Poly1305`\u27e825\u27e9 (with optional AVX2 acceleration) as well as the following variants thereof:\n  * `XChaCha20Poly1305`\u27e826\u27e9 - ChaCha20Poly1305 variant with an extended 192-bit (24-byte) nonce.\n  * `ChaCha8Poly1305`\u27e827\u27e9 / `ChaCha12Poly1305`\u27e828\u27e9 - non-standard, reduced-round variants (gated under the `reduced-round` Cargo feature). See the Too Much Crypto\u27e818\u27e9 paper for background and rationale on when these constructions could be used. When in doubt, prefer `ChaCha20Poly1305`\u27e825\u27e9.\n  * `XChaCha8Poly1305`\u27e829\u27e9 / `XChaCha12Poly1305`\u27e830\u27e9 - same as above, but with an extended 192-bit (24-byte) nonce.\n\n\n## \u00a7\u27e831\u27e9Usage\n```\nuse chacha20poly1305::{\n  aead::{Aead, AeadCore, KeyInit, OsRng},\n  ChaCha20Poly1305, Nonce\n};\nlet key = ChaCha20Poly1305::generate_key(&mut OsRng);\nlet cipher = ChaCha20Poly1305::new(&key);\nlet nonce = ChaCha20Poly1305::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet ciphertext = cipher.encrypt(&nonce, b\"plaintext message\".as_ref())?;\nlet plaintext = cipher.decrypt(&nonce, ciphertext.as_ref())?;\nassert_eq!(&plaintext, b\"plaintext message\");\n```\n\n### \u00a7\u27e832\u27e9In-place Usage (eliminates `alloc` requirement)\nThis crate has an optional `alloc` feature which can be disabled in e.g. microcontroller environments that don\u2019t have a heap.\nThe `AeadInPlace::encrypt_in_place`\u27e833\u27e9 and `AeadInPlace::decrypt_in_place`\u27e834\u27e9 methods accept any type that impls the `aead::Buffer`\u27e835\u27e9 trait which contains the plaintext for encryption or ciphertext for decryption.\nNote that if you enable the `heapless` feature of this crate, you will receive an impl of `aead::Buffer`\u27e835\u27e9 for `heapless::Vec` (re-exported from the `aead`\u27e836\u27e9 crate as `aead::heapless::Vec`\u27e837\u27e9), which can then be passed as the `buffer` parameter to the in-place encrypt and decrypt methods:\n```\nuse chacha20poly1305::{\n  aead::{AeadCore, AeadInPlace, KeyInit, OsRng, heapless::Vec},\n  ChaCha20Poly1305, Nonce,\n};\nlet key = ChaCha20Poly1305::generate_key(&mut OsRng);\nlet cipher = ChaCha20Poly1305::new(&key);\nlet nonce = ChaCha20Poly1305::generate_nonce(&mut OsRng); // 96-bits; unique per message\nlet mut buffer: Vec<u8, 128> = Vec::new(); // Note: buffer needs 16-bytes overhead for auth tag\nbuffer.extend_from_slice(b\"plaintext message\");\n// Encrypt `buffer` in-place, replacing the plaintext contents with ciphertext\ncipher.encrypt_in_place(&nonce, b\"\", &mut buffer)?;\n// `buffer` now contains the message ciphertext\nassert_ne!(&buffer, b\"plaintext message\");\n// Decrypt `buffer` in-place, replacing its ciphertext context with the original plaintext\ncipher.decrypt_in_place(&nonce, b\"\", &mut buffer)?;\nassert_eq!(&buffer, b\"plaintext message\");\n```\n\n### \u00a7\u27e838\u27e9`XChaCha20Poly1305`\u27e826\u27e9\nChaCha20Poly1305 variant with an extended 192-bit (24-byte) nonce.\nThe construction is an adaptation of the same techniques used by XSalsa20 as described in the paper \u201cExtending the Salsa20 Nonce\u201d to the 96-bit nonce variant of ChaCha20, which derive a separate subkey/nonce for each extended nonce:\n<https://cr.yp.to/snuffle/xsalsa-20081128.pdf>\nNo authoritative specification exists for XChaCha20Poly1305, however the construction has \u201crough consensus and running code\u201d in the form of several interoperable libraries and protocols (e.g. libsodium, WireGuard) and is documented in an (expired) IETF draft, which also applies the proof from the XSalsa20 paper to the construction in order to demonstrate that XChaCha20 is secure if ChaCha20 is secure (see Section 3.1):\n<https://tools.ietf.org/html/draft-arciszewski-xchacha-03>\nIt is worth noting that NaCl/libsodium\u2019s default \u201csecretbox\u201d algorithm is XSalsa20Poly1305, not XChaCha20Poly1305, and thus not compatible with this library. If you are interested in that construction, please see the `xsalsa20poly1305` crate:\n<https://docs.rs/xsalsa20poly1305/>\n## \u00a7\u27e839\u27e9Usage\n```\nuse chacha20poly1305::{\n  aead::{Aead, AeadCore, KeyInit, OsRng},\n  XChaCha20Poly1305, XNonce\n};\nlet key = XChaCha20Poly1305::generate_key(&mut OsRng);\nlet cipher = XChaCha20Poly1305::new(&key);\nlet nonce = XChaCha20Poly1305::generate_nonce(&mut OsRng); // 192-bits; unique per message\nlet ciphertext = cipher.encrypt(&nonce, b\"plaintext message\".as_ref())?;\nlet plaintext = cipher.decrypt(&nonce, ciphertext.as_ref())?;\nassert_eq!(&plaintext, b\"plaintext message\");\n```\n\n## Re-exports\u00a7\u27e840\u27e9\n\n`pub use aead[](https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html \"mod aead\");`\n\n## Modules\u00a7\u27e841\u27e9\n\nconsts\u27e842\u27e9\n\n## Structs\u00a7\u27e843\u27e9\n\nChaChaPoly1305\u27e844\u27e9\n    Generic ChaCha+Poly1305 Authenticated Encryption with Additional Data (AEAD) construction.\n\nError\u27e845\u27e9\n    Error type.\n## Traits\u00a7\u27e846\u27e9\n\nAeadCore\u27e847\u27e9\n    Authenticated Encryption with Associated Data (AEAD) algorithm core trait.\n\nAeadInPlace\u27e848\u27e9\n    In-place stateless AEAD trait.\n\nKeyInit\u27e849\u27e9\n    Types which can be initialized from key.\n\nKeySizeUser\u27e850\u27e9\n    Types which use key for initialization.\n## Type Aliases\u00a7\u27e851\u27e9\n\nChaCha8Poly1305\u27e827\u27e9`reduced-round`\n    ChaCha8Poly1305 (reduced round variant) Authenticated Encryption with Additional Data (AEAD).\n\nChaCha12Poly1305\u27e828\u27e9`reduced-round`\n    ChaCha12Poly1305 (reduced round variant) Authenticated Encryption with Additional Data (AEAD).\n\nChaCha20Poly1305\u27e825\u27e9\n    ChaCha20Poly1305 Authenticated Encryption with Additional Data (AEAD).\n\nKey\u27e852\u27e9\n    Key type (256-bits/32-bytes).\n\nNonce\u27e853\u27e9\n    Nonce type (96-bits/12-bytes).\n\nTag\u27e854\u27e9\n    Poly1305 tag.\n\nXChaCha8Poly1305\u27e829\u27e9`reduced-round`\n    XChaCha8Poly1305 (reduced round variant) Authenticated Encryption with Additional Data (AEAD).\n\nXChaCha12Poly1305\u27e830\u27e9`reduced-round`\n    XChaCha12Poly1305 (reduced round variant) Authenticated Encryption with Additional Data (AEAD).\n\nXChaCha20Poly1305\u27e826\u27e9\n    XChaCha20Poly1305 Authenticated Encryption with Additional Data (AEAD).\n\nXNonce\u27e855\u27e9\n    XNonce type (192-bits/24-bytes).\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/chacha20poly1305/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/chacha20poly1305/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/chacha20poly1305/latest/src/chacha20poly1305/lib.rs.html#1-301: Source\n\u27e84\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#rustcrypto-chacha20poly1305: \u00a7\n\u27e85\u27e9 https://buildstats.info/crate/chacha20poly1305: ![crate\n\u27e86\u27e9 https://docs.rs/chacha20poly1305/badge.svg: ![Docs\n\u27e87\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e88\u27e9 https://img.shields.io/badge/rustc-1.56+-blue.svg: Rust Version\n\u27e89\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e810\u27e9 https://github.com/RustCrypto/AEADs/workflows/chacha20poly1305/badge.svg?branch=master&event=push: ![Build Status\n\u27e811\u27e9 https://tools.ietf.org/html/rfc8439: RFC 8439\n\u27e812\u27e9 https://en.wikipedia.org/wiki/Authenticated_encryption: Authenticated Encryption with Associated Data (AEAD)\n\u27e813\u27e9 https://github.com/RustCrypto/stream-ciphers/tree/master/chacha20: ChaCha20\n\u27e814\u27e9 https://github.com/RustCrypto/universal-hashes/tree/master/poly1305: Poly1305\n\u27e815\u27e9 https://docs.rs/chacha20poly1305/: Documentation\n\u27e816\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#about: \u00a7\n\u27e817\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#security-notes: \u00a7\n\u27e818\u27e9 https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/: security audit by NCC Group\n\u27e819\u27e9 https://www.mobilecoin.com/: MobileCoin\n\u27e820\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#license: \u00a7\n\u27e821\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e822\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e823\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#contribution: \u00a7\n\u27e824\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#supported-algorithms: \u00a7\n\u27e825\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.ChaCha20Poly1305.html: type chacha20poly1305::ChaCha20Poly1305 - `ChaCha20Poly1305`\n\u27e826\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XChaCha20Poly1305.html: type chacha20poly1305::XChaCha20Poly1305 - `XChaCha20Poly1305`\n\u27e827\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.ChaCha8Poly1305.html: type chacha20poly1305::ChaCha8Poly1305 - `ChaCha8Poly1305`\n\u27e828\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.ChaCha12Poly1305.html: type chacha20poly1305::ChaCha12Poly1305 - `ChaCha12Poly1305`\n\u27e829\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XChaCha8Poly1305.html: type chacha20poly1305::XChaCha8Poly1305 - `XChaCha8Poly1305`\n\u27e830\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XChaCha12Poly1305.html: type chacha20poly1305::XChaCha12Poly1305 - `XChaCha12Poly1305`\n\u27e831\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#usage: \u00a7\n\u27e832\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#in-place-usage-eliminates-alloc-requirement: \u00a7\n\u27e833\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.AeadInPlace.html#method.encrypt_in_place: method chacha20poly1305::AeadInPlace::encrypt_in_place - `AeadInPlace::encrypt_in_place`\n\u27e834\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.AeadInPlace.html#method.decrypt_in_place: method chacha20poly1305::AeadInPlace::decrypt_in_place - `AeadInPlace::decrypt_in_place`\n\u27e835\u27e9 https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/trait.Buffer.html: trait aead::Buffer - `aead::Buffer`\n\u27e836\u27e9 https://docs.rs/aead/0.5.2/x86_64-unknown-linux-gnu/aead/index.html: mod aead - `aead`\n\u27e837\u27e9 https://docs.rs/heapless/0.7.17/x86_64-unknown-linux-gnu/heapless/vec/struct.Vec.html: struct heapless::vec::Vec - `aead::heapless::Vec`\n\u27e838\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#xchacha20poly1305: \u00a7\n\u27e839\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#usage-1: \u00a7\n\u27e840\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#reexports: \u00a7\n\u27e841\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#modules: \u00a7\n\u27e842\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/consts/index.html: mod chacha20poly1305::consts - consts\n\u27e843\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#structs: \u00a7\n\u27e844\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/struct.ChaChaPoly1305.html: struct chacha20poly1305::ChaChaPoly1305 - ChaChaPoly1305\n\u27e845\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/struct.Error.html: struct chacha20poly1305::Error - Error\n\u27e846\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#traits: \u00a7\n\u27e847\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.AeadCore.html: trait chacha20poly1305::AeadCore - AeadCore\n\u27e848\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.AeadInPlace.html: trait chacha20poly1305::AeadInPlace - AeadInPlace\n\u27e849\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.KeyInit.html: trait chacha20poly1305::KeyInit - KeyInit\n\u27e850\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/trait.KeySizeUser.html: trait chacha20poly1305::KeySizeUser - KeySizeUser\n\u27e851\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/#types: \u00a7\n\u27e852\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.Key.html: type chacha20poly1305::Key - Key\n\u27e853\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.Nonce.html: type chacha20poly1305::Nonce - Nonce\n\u27e854\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.Tag.html: type chacha20poly1305::Tag - Tag\n\u27e855\u27e9 https://docs.rs/chacha20poly1305/latest/chacha20poly1305/type.XNonce.html: type chacha20poly1305::XNonce - XNonce\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `chacha20poly1305` crate provides a pure Rust implementation of the ChaCha20Poly1305 AEAD cipher, as defined in RFC 8439, known for its simplicity, speed, and constant-time execution. It supports standard ChaCha20Poly1305, its extended nonce variant XChaCha20Poly1305, and reduced-round variants (ChaCha8/12Poly1305), with optional in-place encryption/decryption to eliminate heap allocation. The crate is audited for security and offers features like AVX2 acceleration and compatibility with constrained environments via the `heapless` feature.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Supported Algorithms  \n\u2705 Factual: The `chacha20poly1305` crate provides implementations of `ChaCha20Poly1305` and `XChaCha20Poly1305`, with the latter supporting a 192-bit extended nonce for enhanced security.  \n\u274c Counterfactual: The `chacha20poly1305` crate supports the XSalsa20Poly1305 algorithm, which is the default \"secretbox\" construction used by libsodium.  \n\n---\n\n### Pair 2: Security and Performance  \n\u2705 Factual: The `chacha20poly1305` crate is designed to execute in constant time, ensuring resistance to timing attacks, and includes AVX2 acceleration for x86/x86_64 processors.  \n\u274c Counterfactual: The `chacha20poly1305` crate relies entirely on hardware-specific optimizations and does not provide portable constant-time implementations for non-AVX2 processors.  \n\n---\n\n### Pair 3: In-Place Usage  \n\u2705 Factual: The `chacha20poly1305` crate supports in-place encryption and decryption using the `AeadInPlace` trait, which eliminates the need for heap allocation when the `alloc` feature is disabled.  \n\u274c Counterfactual: In-place encryption and decryption in the `chacha20poly1305` crate require the `alloc` feature to be enabled, making it unsuitable for microcontroller environments without a heap.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}