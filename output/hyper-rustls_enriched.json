{
    "name": "hyper-rustls",
    "version": "0.27.7",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/hyper-rustls/latest/hyper_rustls/all.html \"show sidebar\")\n# Crate hyper_rustlsCopy item path\n[Settings](https://docs.rs/hyper-rustls/latest/settings.html)\n[Help](https://docs.rs/hyper-rustls/latest/help.html)\nSummary[Source](https://docs.rs/hyper-rustls/latest/src/hyper_rustls/lib.rs.html#1-76)\nExpand description\n## [\u00a7](https://docs.rs/hyper-rustls/latest/hyper_rustls/#hyper-rustls)hyper-rustls\nA pure-Rust HTTPS connector for [hyper](https://hyper.rs), based on [Rustls](https://github.com/rustls/rustls).\n### [\u00a7](https://docs.rs/hyper-rustls/latest/hyper_rustls/#example-client)Example client\n```\nuse http::StatusCode;\nuse http_body_util::Empty;\nuse hyper::body::Bytes;\nuse hyper_util::client::legacy::Client;\nuse hyper_util::rt::TokioExecutor;\nlet mut rt = tokio::runtime::Runtime::new().unwrap();\nlet url = (\"https://hyper.rs\").parse().unwrap();\nlet https = hyper_rustls::HttpsConnectorBuilder::new()\n  .with_native_roots()\n  .expect(\"no native root CA certificates found\")\n  .https_only()\n  .enable_http1()\n  .build();\nlet client: Client<_, Empty<Bytes>> = Client::builder(TokioExecutor::new()).build(https);\nlet res = rt.block_on(client.get(url)).unwrap();\nassert_eq!(res.status(), StatusCode::OK);\n```\n\n## Modules[\u00a7](https://docs.rs/hyper-rustls/latest/hyper_rustls/#modules)\n\n[builderstates](https://docs.rs/hyper-rustls/latest/hyper_rustls/builderstates/index.html \"mod hyper_rustls::builderstates\")\n    The various states of the [`HttpsConnectorBuilder`](https://docs.rs/hyper-rustls/latest/hyper_rustls/struct.HttpsConnectorBuilder.html \"struct hyper_rustls::HttpsConnectorBuilder\")\n## Structs[\u00a7](https://docs.rs/hyper-rustls/latest/hyper_rustls/#structs)\n\n[DefaultServerNameResolver](https://docs.rs/hyper-rustls/latest/hyper_rustls/struct.DefaultServerNameResolver.html \"struct hyper_rustls::DefaultServerNameResolver\")\n    The default server name resolver, which uses the hostname in the URI.\n\n[FixedServerNameResolver](https://docs.rs/hyper-rustls/latest/hyper_rustls/struct.FixedServerNameResolver.html \"struct hyper_rustls::FixedServerNameResolver\")\n    A server name resolver which always returns the same fixed name.\n\n[HttpsConnector](https://docs.rs/hyper-rustls/latest/hyper_rustls/struct.HttpsConnector.html \"struct hyper_rustls::HttpsConnector\")\n    A Connector for the `https` scheme.\n\n[HttpsConnectorBuilder](https://docs.rs/hyper-rustls/latest/hyper_rustls/struct.HttpsConnectorBuilder.html \"struct hyper_rustls::HttpsConnectorBuilder\")\n    A builder for an [`HttpsConnector`](https://docs.rs/hyper-rustls/latest/hyper_rustls/struct.HttpsConnector.html \"struct hyper_rustls::HttpsConnector\")\n## Enums[\u00a7](https://docs.rs/hyper-rustls/latest/hyper_rustls/#enums)\n\n[MaybeHttpsStream](https://docs.rs/hyper-rustls/latest/hyper_rustls/enum.MaybeHttpsStream.html \"enum hyper_rustls::MaybeHttpsStream\")\n    A stream that might be protected with TLS.\n## Traits[\u00a7](https://docs.rs/hyper-rustls/latest/hyper_rustls/#traits)\n\n[ConfigBuilderExt](https://docs.rs/hyper-rustls/latest/hyper_rustls/trait.ConfigBuilderExt.html \"trait hyper_rustls::ConfigBuilderExt\")\n    Methods for configuring roots\n\n[ResolveServerName](https://docs.rs/hyper-rustls/latest/hyper_rustls/trait.ResolveServerName.html \"trait hyper_rustls::ResolveServerName\")\n    A trait implemented by types that can resolve a [`ServerName`](https://docs.rs/rustls-pki-types/1.12.0/x86_64-unknown-linux-gnu/rustls_pki_types/server_name/enum.ServerName.html \"enum rustls_pki_types::server_name::ServerName\") for a request.\n",
        "markdown_with_citations": "[](https://docs.rs/hyper-rustls/latest/hyper_rustls/all.html \"show sidebar\")\n# Crate hyper_rustlsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9hyper-rustls\nA pure-Rust HTTPS connector for hyper\u27e85\u27e9, based on Rustls\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Example client\n```\nuse http::StatusCode;\nuse http_body_util::Empty;\nuse hyper::body::Bytes;\nuse hyper_util::client::legacy::Client;\nuse hyper_util::rt::TokioExecutor;\nlet mut rt = tokio::runtime::Runtime::new().unwrap();\nlet url = (\"https://hyper.rs\").parse().unwrap();\nlet https = hyper_rustls::HttpsConnectorBuilder::new()\n  .with_native_roots()\n  .expect(\"no native root CA certificates found\")\n  .https_only()\n  .enable_http1()\n  .build();\nlet client: Client<_, Empty<Bytes>> = Client::builder(TokioExecutor::new()).build(https);\nlet res = rt.block_on(client.get(url)).unwrap();\nassert_eq!(res.status(), StatusCode::OK);\n```\n\n## Modules\u00a7\u27e88\u27e9\n\nbuilderstates\u27e89\u27e9\n    The various states of the `HttpsConnectorBuilder`\u27e810\u27e9\n## Structs\u00a7\u27e811\u27e9\n\nDefaultServerNameResolver\u27e812\u27e9\n    The default server name resolver, which uses the hostname in the URI.\n\nFixedServerNameResolver\u27e813\u27e9\n    A server name resolver which always returns the same fixed name.\n\nHttpsConnector\u27e814\u27e9\n    A Connector for the `https` scheme.\n\nHttpsConnectorBuilder\u27e810\u27e9\n    A builder for an `HttpsConnector`\u27e814\u27e9\n## Enums\u00a7\u27e815\u27e9\n\nMaybeHttpsStream\u27e816\u27e9\n    A stream that might be protected with TLS.\n## Traits\u00a7\u27e817\u27e9\n\nConfigBuilderExt\u27e818\u27e9\n    Methods for configuring roots\n\nResolveServerName\u27e819\u27e9\n    A trait implemented by types that can resolve a `ServerName`\u27e820\u27e9 for a request.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/hyper-rustls/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/hyper-rustls/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/hyper-rustls/latest/src/hyper_rustls/lib.rs.html#1-76: Source\n\u27e84\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/#hyper-rustls: \u00a7\n\u27e85\u27e9 https://hyper.rs: hyper\n\u27e86\u27e9 https://github.com/rustls/rustls: Rustls\n\u27e87\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/#example-client: \u00a7\n\u27e88\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/#modules: \u00a7\n\u27e89\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/builderstates/index.html: mod hyper_rustls::builderstates - builderstates\n\u27e810\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/struct.HttpsConnectorBuilder.html: struct hyper_rustls::HttpsConnectorBuilder - `HttpsConnectorBuilder`\n\u27e811\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/struct.DefaultServerNameResolver.html: struct hyper_rustls::DefaultServerNameResolver - DefaultServerNameResolver\n\u27e813\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/struct.FixedServerNameResolver.html: struct hyper_rustls::FixedServerNameResolver - FixedServerNameResolver\n\u27e814\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/struct.HttpsConnector.html: struct hyper_rustls::HttpsConnector - HttpsConnector\n\u27e815\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/#enums: \u00a7\n\u27e816\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/enum.MaybeHttpsStream.html: enum hyper_rustls::MaybeHttpsStream - MaybeHttpsStream\n\u27e817\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/#traits: \u00a7\n\u27e818\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/trait.ConfigBuilderExt.html: trait hyper_rustls::ConfigBuilderExt - ConfigBuilderExt\n\u27e819\u27e9 https://docs.rs/hyper-rustls/latest/hyper_rustls/trait.ResolveServerName.html: trait hyper_rustls::ResolveServerName - ResolveServerName\n\u27e820\u27e9 https://docs.rs/rustls-pki-types/1.12.0/x86_64-unknown-linux-gnu/rustls_pki_types/server_name/enum.ServerName.html: enum rustls_pki_types::server_name::ServerName - `ServerName`\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `hyper-rustls` crate provides a pure-Rust HTTPS connector for the `hyper` HTTP library, leveraging `rustls` for TLS functionality. It includes an `HttpsConnectorBuilder` for flexible configuration (e.g., native root certificates, HTTP/1 support), server name resolvers, and traits for customizing TLS settings. This crate is ideal for secure, lightweight, and configurable HTTPS client implementations in Rust.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: HTTPS Connector Capabilities  \n\u2705 **Factual:** The `hyper-rustls` crate provides a pure-Rust HTTPS connector for the `hyper` library, leveraging `Rustls` for TLS functionality.  \n\u274c **Counterfactual:** The `hyper-rustls` crate supports both HTTPS and FTP connectors, allowing seamless integration with multiple protocols.  \n\n---\n\n### Pair 2: Root Certificate Handling  \n\u2705 **Factual:** The `HttpsConnectorBuilder` in `hyper-rustls` allows configuration with native root certificates using the `.with_native_roots()` method.  \n\u274c **Counterfactual:** The `HttpsConnectorBuilder` requires manual configuration of root certificates and does not support automatic detection of native root certificates.  \n\n---\n\n### Pair 3: HTTP/1 and HTTP/2 Support  \n\u2705 **Factual:** The `hyper-rustls` crate supports HTTP/1 by enabling it explicitly through the `.enable_http1()` method in the `HttpsConnectorBuilder`.  \n\u274c **Counterfactual:** The `hyper-rustls` crate only supports HTTP/2 and does not provide any functionality for HTTP/1 connections.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}