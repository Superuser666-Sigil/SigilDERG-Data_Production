{
    "name": "tower",
    "version": "0.5.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/tower/latest/tower/all.html \"show sidebar\")\n# Crate towerCopy item path\n[Settings](https://docs.rs/tower/latest/settings.html)\n[Help](https://docs.rs/tower/latest/help.html)\nSummary[Source](https://docs.rs/tower/latest/src/tower/lib.rs.html#1-228)\nExpand description\n`async fn(Request) -> Result<Response, Error>`\n## [\u00a7](https://docs.rs/tower/latest/tower/#overview)Overview\nTower is a library of modular and reusable components for building robust networking clients and servers.\nTower provides a simple core abstraction, the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.\nGeneric components, like [`timeout`](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\"), [rate limiting](https://docs.rs/tower/latest/tower/limit/rate/index.html \"mod tower::limit::rate\"), and [load balancing](https://docs.rs/tower/latest/tower/balance/index.html \"mod tower::balance\"), can be modeled as [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s that wrap some inner service and apply additional behavior before or after the inner service is called. This allows implementing these components in a protocol-agnostic, composable way. Typically, such services are referred to as _middleware_.\nAn additional abstraction, the [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") trait, is used to compose middleware with [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s. If a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") can be thought of as an asynchronous function from a request type to a response type, a [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") is a function taking a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") of one type and returning a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") of a different type. The [`ServiceBuilder`](https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html \"struct tower::ServiceBuilder\") type is used to add middleware to a service by composing it with multiple [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")s.\n### [\u00a7](https://docs.rs/tower/latest/tower/#the-tower-ecosystem)The Tower Ecosystem\nTower is made up of the following crates:\n  * [`tower`](https://crates.io/crates/tower) (this crate)\n  * [`tower-service`](https://crates.io/crates/tower-service)\n  * [`tower-layer`](https://crates.io/crates/tower-layer)\n  * [`tower-test`](https://crates.io/crates/tower-test)\n\n\nSince the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") and [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") traits are important integration points for all libraries using Tower, they are kept as stable as possible, and breaking changes are made rarely. Therefore, they are defined in separate crates, [`tower-service`](https://crates.io/crates/tower-service) and [`tower-layer`](https://crates.io/crates/tower-layer). This crate contains re-exports of those core traits, implementations of commonly-used middleware, and [utilities](https://docs.rs/tower/latest/tower/trait.ServiceExt.html \"trait tower::ServiceExt\") for working with [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s and [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")s. Finally, the [`tower-test`](https://crates.io/crates/tower-test) crate provides tools for testing programs using Tower.\n## [\u00a7](https://docs.rs/tower/latest/tower/#usage)Usage\nTower provides an abstraction layer, and generic implementations of various middleware. This means that the `tower` crate on its own does _not_ provide a working implementation of a network client or server. Instead, Tower\u2019s [`Service` trait](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") provides an integration point between application code, libraries providing middleware implementations, and libraries that implement servers and/or clients for various network protocols.\nDepending on your particular use case, you might use Tower in several ways:\n  * **Implementing application logic** for a networked program. You might use the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait to model your application\u2019s behavior, and use the middleware [provided by this crate](https://docs.rs/tower/latest/tower/#modules) and by other libraries to add functionality to clients and servers provided by one or more protocol implementations.\n  * **Implementing middleware** to add custom behavior to network clients and servers in a reusable manner. This might be general-purpose middleware (and if it is, please consider releasing your middleware as a library for other Tower users!) or application-specific behavior that needs to be shared between multiple clients or servers.\n  * **Implementing a network protocol**. Libraries that implement network protocols (such as HTTP) can depend on `tower-service` to use the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait as an integration point between the protocol and user code. For example, a client for some protocol might implement [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\"), allowing users to add arbitrary Tower middleware to those clients. Similarly, a server might be created from a user-provided [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\").\nAdditionally, when a network protocol requires functionality already provided by existing Tower middleware, a protocol implementation might use Tower middleware internally, as well as as an integration point.\n\n\n### [\u00a7](https://docs.rs/tower/latest/tower/#library-support)Library Support\nA number of third-party libraries support Tower and the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait. The following is an incomplete list of such libraries:\n  * [`hyper`](https://crates.io/crates/hyper): A fast and correct low-level HTTP implementation.\n  * [`tonic`](https://crates.io/crates/tonic): A [gRPC-over-HTTP/2](https://grpc.io) implementation built on top of [`hyper`](https://crates.io/crates/hyper). See [here](https://github.com/hyperium/tonic/tree/master/examples/src/tower) for examples of using [`tonic`](https://crates.io/crates/tonic) with Tower.\n  * [`warp`](https://crates.io/crates/warp): A lightweight, composable web framework. See [here](https://docs.rs/warp/0.2.5/warp/fn.service.html) for details on using [`warp`](https://crates.io/crates/warp) with Tower.\n  * [`tower-lsp`](https://crates.io/crates/tower-lsp): implementations of the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) based on Tower.\n\n\nIf you\u2019re the maintainer of a crate that supports Tower, we\u2019d love to add your crate to this list! Please [open a PR](https://github.com/tower-rs/tower/compare) adding a brief description of your library!\n### [\u00a7](https://docs.rs/tower/latest/tower/#getting-started)Getting Started\nIf you\u2019re brand new to Tower and want to start with the basics, we recommend you check out some of our [guides](https://github.com/tower-rs/tower/tree/master/guides).\nThe various middleware implementations provided by this crate are feature flagged, so that users can only compile the parts of Tower they need. By default, all the optional middleware are disabled.\nTo get started using all of Tower\u2019s optional middleware, add this to your `Cargo.toml`:\n```\ntower = { version = \"0.4\", features = [\"full\"] }\n```\n\nAlternatively, you can only enable some features. For example, to enable only the [`retry`](https://docs.rs/tower/latest/tower/retry/index.html \"mod tower::retry\") and [`timeout`](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\") middleware, write:\n```\ntower = { version = \"0.4\", features = [\"retry\", \"timeout\"] }\n```\n\nSee [here](https://docs.rs/tower/latest/tower/#modules) for a complete list of all middleware provided by Tower.\n### [\u00a7](https://docs.rs/tower/latest/tower/#supported-rust-versions)Supported Rust Versions\nTower will keep a rolling MSRV (minimum supported Rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.64.0.\n## Modules[\u00a7](https://docs.rs/tower/latest/tower/#modules)\n\n[balance](https://docs.rs/tower/latest/tower/balance/index.html \"mod tower::balance\")`balance`\n    Middleware that allows balancing load among multiple services.\n\n[buffer](https://docs.rs/tower/latest/tower/buffer/index.html \"mod tower::buffer\")`buffer`\n    Middleware that provides a buffered mpsc channel to a service.\n\n[builder](https://docs.rs/tower/latest/tower/builder/index.html \"mod tower::builder\")\n    Builder types to compose layers and services\n\n[discover](https://docs.rs/tower/latest/tower/discover/index.html \"mod tower::discover\")`discover`\n    Service discovery\n\n[filter](https://docs.rs/tower/latest/tower/filter/index.html \"mod tower::filter\")`filter`\n    Conditionally dispatch requests to the inner service based on the result of a predicate.\n\n[hedge](https://docs.rs/tower/latest/tower/hedge/index.html \"mod tower::hedge\")`hedge`\n    Pre-emptively retry requests which have been outstanding for longer than a given latency percentile.\n\n[layer](https://docs.rs/tower/latest/tower/layer/index.html \"mod tower::layer\")\n    A collection of [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") based tower services\n\n[limit](https://docs.rs/tower/latest/tower/limit/index.html \"mod tower::limit\")`limit`\n    Tower middleware for limiting requests.\n\n[load](https://docs.rs/tower/latest/tower/load/index.html \"mod tower::load\")`load`\n    Service load measurement\n\n[load_shed](https://docs.rs/tower/latest/tower/load_shed/index.html \"mod tower::load_shed\")`load-shed`\n    Middleware for shedding load when inner services aren\u2019t ready.\n\n[make](https://docs.rs/tower/latest/tower/make/index.html \"mod tower::make\")`make`\n    Trait aliases for Services that produce specific types of Responses.\n\n[ready_cache](https://docs.rs/tower/latest/tower/ready_cache/index.html \"mod tower::ready_cache\")`ready-cache`\n    A cache of services\n\n[reconnect](https://docs.rs/tower/latest/tower/reconnect/index.html \"mod tower::reconnect\")`reconnect`\n    Reconnect services when they fail.\n\n[retry](https://docs.rs/tower/latest/tower/retry/index.html \"mod tower::retry\")`retry`\n    Middleware for retrying \u201cfailed\u201d requests.\n\n[spawn_ready](https://docs.rs/tower/latest/tower/spawn_ready/index.html \"mod tower::spawn_ready\")`spawn-ready`\n    When an underlying service is not ready, drive it to readiness on a background task.\n\n[steer](https://docs.rs/tower/latest/tower/steer/index.html \"mod tower::steer\")`steer`\n    This module provides functionality to aid managing routing requests between [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s.\n\n[timeout](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\")`timeout`\n    Middleware that applies a timeout to requests.\n\n[util](https://docs.rs/tower/latest/tower/util/index.html \"mod tower::util\")`util`\n    Various utility types and functions that are generally used with Tower.\n## Structs[\u00a7](https://docs.rs/tower/latest/tower/#structs)\n\n[ServiceBuilder](https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html \"struct tower::ServiceBuilder\")\n    Declaratively construct [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") values.\n## Traits[\u00a7](https://docs.rs/tower/latest/tower/#traits)\n\n[Layer](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")\n    Decorates a [`Service`](https://docs.rs/tower/*/tower/trait.Service.html), transforming either the request or the response.\n\n[MakeService](https://docs.rs/tower/latest/tower/trait.MakeService.html \"trait tower::MakeService\")`make`\n    Creates new [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") values.\n\n[Service](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")\n    An asynchronous function from a `Request` to a `Response`.\n\n[ServiceExt](https://docs.rs/tower/latest/tower/trait.ServiceExt.html \"trait tower::ServiceExt\")`util`\n    An extension trait for `Service`s that provides a variety of convenient adapters\n## Functions[\u00a7](https://docs.rs/tower/latest/tower/#functions)\n\n[service_fn](https://docs.rs/tower/latest/tower/fn.service_fn.html \"fn tower::service_fn\")`util`\n    Returns a new [`ServiceFn`](https://docs.rs/tower/latest/tower/util/struct.ServiceFn.html \"struct tower::util::ServiceFn\") with the given closure.\n## Type Aliases[\u00a7](https://docs.rs/tower/latest/tower/#types)\n\n[BoxError](https://docs.rs/tower/latest/tower/type.BoxError.html \"type tower::BoxError\")\n    Alias for a type-erased error type.\n",
        "markdown_with_citations": "[](https://docs.rs/tower/latest/tower/all.html \"show sidebar\")\n# Crate towerCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`async fn(Request) -> Result<Response, Error>`\n## \u00a7\u27e84\u27e9Overview\nTower is a library of modular and reusable components for building robust networking clients and servers.\nTower provides a simple core abstraction, the `Service`\u27e85\u27e9 trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.\nGeneric components, like `timeout`\u27e86\u27e9, rate limiting\u27e87\u27e9, and load balancing\u27e88\u27e9, can be modeled as `Service`\u27e85\u27e9s that wrap some inner service and apply additional behavior before or after the inner service is called. This allows implementing these components in a protocol-agnostic, composable way. Typically, such services are referred to as _middleware_.\nAn additional abstraction, the `Layer`\u27e89\u27e9 trait, is used to compose middleware with `Service`\u27e85\u27e9s. If a `Service`\u27e85\u27e9 can be thought of as an asynchronous function from a request type to a response type, a `Layer`\u27e89\u27e9 is a function taking a `Service`\u27e85\u27e9 of one type and returning a `Service`\u27e85\u27e9 of a different type. The `ServiceBuilder`\u27e810\u27e9 type is used to add middleware to a service by composing it with multiple `Layer`\u27e89\u27e9s.\n### \u00a7\u27e811\u27e9The Tower Ecosystem\nTower is made up of the following crates:\n  * `tower`\u27e812\u27e9 (this crate)\n  * `tower-service`\u27e813\u27e9\n  * `tower-layer`\u27e814\u27e9\n  * `tower-test`\u27e815\u27e9\n\n\nSince the `Service`\u27e85\u27e9 and `Layer`\u27e89\u27e9 traits are important integration points for all libraries using Tower, they are kept as stable as possible, and breaking changes are made rarely. Therefore, they are defined in separate crates, `tower-service`\u27e813\u27e9 and `tower-layer`\u27e814\u27e9. This crate contains re-exports of those core traits, implementations of commonly-used middleware, and utilities\u27e816\u27e9 for working with `Service`\u27e85\u27e9s and `Layer`\u27e89\u27e9s. Finally, the `tower-test`\u27e815\u27e9 crate provides tools for testing programs using Tower.\n## \u00a7\u27e817\u27e9Usage\nTower provides an abstraction layer, and generic implementations of various middleware. This means that the `tower` crate on its own does _not_ provide a working implementation of a network client or server. Instead, Tower\u2019s `Service` trait\u27e85\u27e9 provides an integration point between application code, libraries providing middleware implementations, and libraries that implement servers and/or clients for various network protocols.\nDepending on your particular use case, you might use Tower in several ways:\n  * **Implementing application logic** for a networked program. You might use the `Service`\u27e85\u27e9 trait to model your application\u2019s behavior, and use the middleware provided by this crate\u27e818\u27e9 and by other libraries to add functionality to clients and servers provided by one or more protocol implementations.\n  * **Implementing middleware** to add custom behavior to network clients and servers in a reusable manner. This might be general-purpose middleware (and if it is, please consider releasing your middleware as a library for other Tower users!) or application-specific behavior that needs to be shared between multiple clients or servers.\n  * **Implementing a network protocol**. Libraries that implement network protocols (such as HTTP) can depend on `tower-service` to use the `Service`\u27e85\u27e9 trait as an integration point between the protocol and user code. For example, a client for some protocol might implement `Service`\u27e85\u27e9, allowing users to add arbitrary Tower middleware to those clients. Similarly, a server might be created from a user-provided `Service`\u27e85\u27e9.\nAdditionally, when a network protocol requires functionality already provided by existing Tower middleware, a protocol implementation might use Tower middleware internally, as well as as an integration point.\n\n\n### \u00a7\u27e819\u27e9Library Support\nA number of third-party libraries support Tower and the `Service`\u27e85\u27e9 trait. The following is an incomplete list of such libraries:\n  * `hyper`\u27e820\u27e9: A fast and correct low-level HTTP implementation.\n  * `tonic`\u27e821\u27e9: A gRPC-over-HTTP/2\u27e822\u27e9 implementation built on top of `hyper`\u27e820\u27e9. See here\u27e823\u27e9 for examples of using `tonic`\u27e821\u27e9 with Tower.\n  * `warp`\u27e824\u27e9: A lightweight, composable web framework. See here\u27e825\u27e9 for details on using `warp`\u27e824\u27e9 with Tower.\n  * `tower-lsp`\u27e826\u27e9: implementations of the Language Server Protocol\u27e827\u27e9 based on Tower.\n\n\nIf you\u2019re the maintainer of a crate that supports Tower, we\u2019d love to add your crate to this list! Please open a PR\u27e828\u27e9 adding a brief description of your library!\n### \u00a7\u27e829\u27e9Getting Started\nIf you\u2019re brand new to Tower and want to start with the basics, we recommend you check out some of our guides\u27e830\u27e9.\nThe various middleware implementations provided by this crate are feature flagged, so that users can only compile the parts of Tower they need. By default, all the optional middleware are disabled.\nTo get started using all of Tower\u2019s optional middleware, add this to your `Cargo.toml`:\n```\ntower = { version = \"0.4\", features = [\"full\"] }\n```\n\nAlternatively, you can only enable some features. For example, to enable only the `retry`\u27e831\u27e9 and `timeout`\u27e86\u27e9 middleware, write:\n```\ntower = { version = \"0.4\", features = [\"retry\", \"timeout\"] }\n```\n\nSee here\u27e818\u27e9 for a complete list of all middleware provided by Tower.\n### \u00a7\u27e832\u27e9Supported Rust Versions\nTower will keep a rolling MSRV (minimum supported Rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.64.0.\n## Modules\u00a7\u27e818\u27e9\n\nbalance\u27e88\u27e9`balance`\n    Middleware that allows balancing load among multiple services.\n\nbuffer\u27e833\u27e9`buffer`\n    Middleware that provides a buffered mpsc channel to a service.\n\nbuilder\u27e834\u27e9\n    Builder types to compose layers and services\n\ndiscover\u27e835\u27e9`discover`\n    Service discovery\n\nfilter\u27e836\u27e9`filter`\n    Conditionally dispatch requests to the inner service based on the result of a predicate.\n\nhedge\u27e837\u27e9`hedge`\n    Pre-emptively retry requests which have been outstanding for longer than a given latency percentile.\n\nlayer\u27e838\u27e9\n    A collection of `Layer`\u27e89\u27e9 based tower services\n\nlimit\u27e839\u27e9`limit`\n    Tower middleware for limiting requests.\n\nload\u27e840\u27e9`load`\n    Service load measurement\n\nload_shed\u27e841\u27e9`load-shed`\n    Middleware for shedding load when inner services aren\u2019t ready.\n\nmake\u27e842\u27e9`make`\n    Trait aliases for Services that produce specific types of Responses.\n\nready_cache\u27e843\u27e9`ready-cache`\n    A cache of services\n\nreconnect\u27e844\u27e9`reconnect`\n    Reconnect services when they fail.\n\nretry\u27e831\u27e9`retry`\n    Middleware for retrying \u201cfailed\u201d requests.\n\nspawn_ready\u27e845\u27e9`spawn-ready`\n    When an underlying service is not ready, drive it to readiness on a background task.\n\nsteer\u27e846\u27e9`steer`\n    This module provides functionality to aid managing routing requests between `Service`\u27e85\u27e9s.\n\ntimeout\u27e86\u27e9`timeout`\n    Middleware that applies a timeout to requests.\n\nutil\u27e847\u27e9`util`\n    Various utility types and functions that are generally used with Tower.\n## Structs\u00a7\u27e848\u27e9\n\nServiceBuilder\u27e810\u27e9\n    Declaratively construct `Service`\u27e85\u27e9 values.\n## Traits\u00a7\u27e849\u27e9\n\nLayer\u27e89\u27e9\n    Decorates a `Service`\u27e850\u27e9, transforming either the request or the response.\n\nMakeService\u27e851\u27e9`make`\n    Creates new `Service`\u27e85\u27e9 values.\n\nService\u27e85\u27e9\n    An asynchronous function from a `Request` to a `Response`.\n\nServiceExt\u27e816\u27e9`util`\n    An extension trait for `Service`s that provides a variety of convenient adapters\n## Functions\u00a7\u27e852\u27e9\n\nservice_fn\u27e853\u27e9`util`\n    Returns a new `ServiceFn`\u27e854\u27e9 with the given closure.\n## Type Aliases\u00a7\u27e855\u27e9\n\nBoxError\u27e856\u27e9\n    Alias for a type-erased error type.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tower/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tower/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tower/latest/src/tower/lib.rs.html#1-228: Source\n\u27e84\u27e9 https://docs.rs/tower/latest/tower/#overview: \u00a7\n\u27e85\u27e9 https://docs.rs/tower/latest/tower/trait.Service.html: trait tower::Service - `Service`\n\u27e86\u27e9 https://docs.rs/tower/latest/tower/timeout/index.html: mod tower::timeout - `timeout`\n\u27e87\u27e9 https://docs.rs/tower/latest/tower/limit/rate/index.html: mod tower::limit::rate - rate limiting\n\u27e88\u27e9 https://docs.rs/tower/latest/tower/balance/index.html: mod tower::balance - load balancing\n\u27e89\u27e9 https://docs.rs/tower/latest/tower/trait.Layer.html: trait tower::Layer - `Layer`\n\u27e810\u27e9 https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html: struct tower::ServiceBuilder - `ServiceBuilder`\n\u27e811\u27e9 https://docs.rs/tower/latest/tower/#the-tower-ecosystem: \u00a7\n\u27e812\u27e9 https://crates.io/crates/tower: `tower`\n\u27e813\u27e9 https://crates.io/crates/tower-service: `tower-service`\n\u27e814\u27e9 https://crates.io/crates/tower-layer: `tower-layer`\n\u27e815\u27e9 https://crates.io/crates/tower-test: `tower-test`\n\u27e816\u27e9 https://docs.rs/tower/latest/tower/trait.ServiceExt.html: trait tower::ServiceExt - utilities\n\u27e817\u27e9 https://docs.rs/tower/latest/tower/#usage: \u00a7\n\u27e818\u27e9 https://docs.rs/tower/latest/tower/#modules: provided by this crate\n\u27e819\u27e9 https://docs.rs/tower/latest/tower/#library-support: \u00a7\n\u27e820\u27e9 https://crates.io/crates/hyper: `hyper`\n\u27e821\u27e9 https://crates.io/crates/tonic: `tonic`\n\u27e822\u27e9 https://grpc.io: gRPC-over-HTTP/2\n\u27e823\u27e9 https://github.com/hyperium/tonic/tree/master/examples/src/tower: here\n\u27e824\u27e9 https://crates.io/crates/warp: `warp`\n\u27e825\u27e9 https://docs.rs/warp/0.2.5/warp/fn.service.html: here\n\u27e826\u27e9 https://crates.io/crates/tower-lsp: `tower-lsp`\n\u27e827\u27e9 https://microsoft.github.io/language-server-protocol/: Language Server Protocol\n\u27e828\u27e9 https://github.com/tower-rs/tower/compare: open a PR\n\u27e829\u27e9 https://docs.rs/tower/latest/tower/#getting-started: \u00a7\n\u27e830\u27e9 https://github.com/tower-rs/tower/tree/master/guides: guides\n\u27e831\u27e9 https://docs.rs/tower/latest/tower/retry/index.html: mod tower::retry - `retry`\n\u27e832\u27e9 https://docs.rs/tower/latest/tower/#supported-rust-versions: \u00a7\n\u27e833\u27e9 https://docs.rs/tower/latest/tower/buffer/index.html: mod tower::buffer - buffer\n\u27e834\u27e9 https://docs.rs/tower/latest/tower/builder/index.html: mod tower::builder - builder\n\u27e835\u27e9 https://docs.rs/tower/latest/tower/discover/index.html: mod tower::discover - discover\n\u27e836\u27e9 https://docs.rs/tower/latest/tower/filter/index.html: mod tower::filter - filter\n\u27e837\u27e9 https://docs.rs/tower/latest/tower/hedge/index.html: mod tower::hedge - hedge\n\u27e838\u27e9 https://docs.rs/tower/latest/tower/layer/index.html: mod tower::layer - layer\n\u27e839\u27e9 https://docs.rs/tower/latest/tower/limit/index.html: mod tower::limit - limit\n\u27e840\u27e9 https://docs.rs/tower/latest/tower/load/index.html: mod tower::load - load\n\u27e841\u27e9 https://docs.rs/tower/latest/tower/load_shed/index.html: mod tower::load_shed - load_shed\n\u27e842\u27e9 https://docs.rs/tower/latest/tower/make/index.html: mod tower::make - make\n\u27e843\u27e9 https://docs.rs/tower/latest/tower/ready_cache/index.html: mod tower::ready_cache - ready_cache\n\u27e844\u27e9 https://docs.rs/tower/latest/tower/reconnect/index.html: mod tower::reconnect - reconnect\n\u27e845\u27e9 https://docs.rs/tower/latest/tower/spawn_ready/index.html: mod tower::spawn_ready - spawn_ready\n\u27e846\u27e9 https://docs.rs/tower/latest/tower/steer/index.html: mod tower::steer - steer\n\u27e847\u27e9 https://docs.rs/tower/latest/tower/util/index.html: mod tower::util - util\n\u27e848\u27e9 https://docs.rs/tower/latest/tower/#structs: \u00a7\n\u27e849\u27e9 https://docs.rs/tower/latest/tower/#traits: \u00a7\n\u27e850\u27e9 https://docs.rs/tower/*/tower/trait.Service.html: `Service`\n\u27e851\u27e9 https://docs.rs/tower/latest/tower/trait.MakeService.html: trait tower::MakeService - MakeService\n\u27e852\u27e9 https://docs.rs/tower/latest/tower/#functions: \u00a7\n\u27e853\u27e9 https://docs.rs/tower/latest/tower/fn.service_fn.html: fn tower::service_fn - service_fn\n\u27e854\u27e9 https://docs.rs/tower/latest/tower/util/struct.ServiceFn.html: struct tower::util::ServiceFn - `ServiceFn`\n\u27e855\u27e9 https://docs.rs/tower/latest/tower/#types: \u00a7\n\u27e856\u27e9 https://docs.rs/tower/latest/tower/type.BoxError.html: type tower::BoxError - BoxError\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `tower` crate provides modular and reusable components for building robust networking clients and servers in Rust. Its core abstraction is the `Service` trait, which models asynchronous functions for handling requests and responses, and the `Layer` trait for composing middleware. It includes middleware for features like timeouts, retries, load balancing, and rate limiting, along with utilities for service composition and testing.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Core Abstraction  \n\u2705 Factual: The `tower` crate provides the `Service` trait as a core abstraction, which represents an asynchronous function taking a request and returning either a response or an error.  \n\u274c Counterfactual: The `tower` crate provides a synchronous `Service` trait designed for blocking operations rather than asynchronous ones.  \n\n---\n\n### Pair 2: Middleware Composition  \n\u2705 Factual: The `Layer` trait in the `tower` crate is used to compose middleware with `Service` implementations, enabling transformation of requests and responses in a modular way.  \n\u274c Counterfactual: Middleware composition in the `tower` crate is achieved directly by chaining `Service` traits without the need for a `Layer` abstraction.  \n\n---\n\n### Pair 3: Network Protocol Support  \n\u2705 Factual: The `tower` crate does not implement specific network protocols but provides abstractions like `Service` and middleware that can be integrated into protocol-specific libraries such as `hyper` or `tonic`.  \n\u274c Counterfactual: The `tower` crate includes built-in implementations for popular network protocols, such as HTTP and gRPC, alongside its core abstractions.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}