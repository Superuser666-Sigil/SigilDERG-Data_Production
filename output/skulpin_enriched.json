{
    "name": "skulpin",
    "version": "0.14.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "###  [36 releases](https://lib.rs/crates/skulpin/versions)\n0.14.1 |  Oct 31, 2021   \n---|---  \n0.14.0 |  May 27, 2021   \n0.13.1 |  Apr 3, 2021   \n0.13.0 |  Mar 14, 2021   \n0.2.2 |  Nov 24, 2019   \n#**355** in [GUI](https://lib.rs/gui \"Crates to help you create a graphical user interface.\")\nDownload history 24/week @ 2025-01-15 10/week @ 2025-01-22 9/week @ 2025-01-29 124/week @ 2025-02-05 83/week @ 2025-02-12 16/week @ 2025-02-19 44/week @ 2025-02-26 8/week @ 2025-03-05 26/week @ 2025-03-12 10/week @ 2025-03-19 16/week @ 2025-03-26 16/week @ 2025-04-09 8/week @ 2025-04-16 24/week @ 2025-04-23 15/week @ 2025-04-30\n**63** downloads per month Used in [ **2** crates](https://lib.rs/crates/skulpin/rev)\n**MIT/Apache**\n87KB  1K  SLoC\n# skulpin\nSkia + Vulkan = Skulpin\nThis crate provides an easy option for drawing hardware-accelerated 2D by combining vulkan and skia.\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.org/aclysma/skulpin.svg?branch=master)](https://travis-ci.org/aclysma/skulpin) ![Crates.io](https://img.shields.io/crates/v/skulpin)\n![Example Screenshot](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/aclysma/skulpin/8db0559d020473faed498bcaf9de2eb859280235/screenshot.png)\nThis crate mainly depends on:\n  * [rafx](https://github.com/aclysma/rafx) - A rendering framework with easy access to the vulkan backend\n  * [skia-safe](https://github.com/rust-skia/rust-skia) - [Skia](https://skia.org) bindings for Rust\n\n\nNOTE: See [skia-bindings](https://lib.rs/crates/skia-bindings) for more info on how a skia binary acquired. In many cases, this crate will download a binary created by their project's CI.\nThis crate integrates with [raw-window-handle](https://lib.rs/crates/raw-window-handle), which allows it to be used with sdl2, winit, and any other windowing framework that supports raw-window-handle.\n## Running the Examples\nFirst, ensure that the below requirements are met depending on OS. Afterwards, the examples can be run normally.\nThe [interactive](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/interactive_winit_app.rs) example is good to look at for an easy way to get keyboard/mouse input.\n```\n``#` winit `0.``24`\ncargo run `-``-`example interactive_winit_app `-``-`features winit`-`app`,`winit`-``25`\n`#` sdl2\ncargo run `-``-`example interactive_sdl2\n`\n```\n\nThe [physics](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/physics.rs) demo is fun too.\n```\n```cargo``` run`` --`example` physics`` --`features` winit-app,winit-25`\n`\n```\n\nHere's a video of the physics and interactive examples.\n[![IMAGE ALT TEXT](https://img.gs/czjpqfbdkz/full/http://img.youtube.com/vi/El99FgGSzfg/0.jpg)](https://www.youtube.com/watch?v=El99FgGSzfg \"Video of Skulpin\")\n## Status\nThis crate is in \"maintenance\" mode - I'm not adding features or planning any API reworks, but I do plan to make fixes as necessary to address issues that might come up and maintain compatibility with the broader rust ecosystem.\nOriginally this was just a proof-of-concept, but it is now being used by [neovide](https://github.com/Kethku/neovide).\nFlutter, Google's new UI framework, uses a Skia + Vulkan stack to achieve 60+ FPS on mobile devices. Because Google is deeply invested in this stack, I anticipate relatively long term support of this type of usage in Skia.\n## Usage\nCurrently there are two ways to use this library with ``winit``.\n  * [app](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit_app.rs) - Implement the AppHandler trait and launch the app. It's simple but not as flexible. This is currently only supported when using winit.\n  * [renderer_only](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit.rs) - You manage the window and event loop yourself. Then add the renderer to draw to it. The window should be wrapped in an implementation of ```skulpin`::``Window``. Implementations for ``sdl2`` and ``winit`` are provided.\n\n\nIf you prefer ``sdl2`` you'll need to use the renderer directly. See [sdl2 renderer only](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_sdl2.rs)\nDon't forget to install the prerequisites below appropriate to your platform! (See \"Requirements\")\n## Feature Flags\n### Skia-related features:\n  * ``skia-complete`` - Includes all the below skia features. ** This is on by default **\n  * ``skia-shaper`` - Enables text shaping with Harfbuzz and ICU\n  * ``skia-svg`` - This feature enables the SVG rendering backend\n  * ``skia-textlayout`` - Makes the Skia module skparagraph available, which contains types that are used to lay out paragraphs\n  * More information on these flags is available in the [skia-safe readme](https://lib.rs/crates/skia-safe)\n\n\nThe ``skia-bindings`` prebuilt binaries are only available for certain combinations of features. As of this writing, it is available for none, each feature individually, or all features enabled. The ``vulkan`` feature is required and implicitly used, so enabling any features individually will substantially increase build times. It's recommended to use all features (default behavior), or disable all features. (use ``default`-`features `=` `false```)\n### Skulpin features:\n  * ``winit-app`` - Include the winit app wrapper. It's less flexbile than using the renderer directly but is easy to use.\n\n\nIf using winit-app, you MUST specify a winit version feature flag (see below)\n### Winit version feature flags:\n  * ``winit-21``\n  * ``winit-22``\n  * ``winit-23``\n  * ``winit-24``\n  * ``winit-25``\n  * ``winit-latest``\n\n\n(These feature names match the imgui-rs crate.)\n### Examples of Feature Flag Usage\n```\n``#` Pull `in` all skia features and support `for` all backends `(`sdl2 and winit`)`\nskulpin `=` ``\"`0`\"``\n`#` Pull `in` all skia features but not the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```]` ```}``\n`#` Pull `in` all skia features and include the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```,` ``\"`winit-app`\"```]` ```}``\n`\n```\n\n### Upstream Versioning of skia-safe\nSkulpin can be built and used with many versions of skia-safe. In order to be accomodating to users of the library, the required version has been left open-ended. This allows new projects to use more recent versions of these libraries while not forcing old projects to update.\nYou can force a particular version of skia safe by using ````cargo``` update```\n```\n```cargo``` update`` -`p` skia-safe`` --`precise` 0.32`\n`\n```\n\n## Documentation\nDocumentation fails to build on docs.rs because the skia_safe crate requires an internet connection to build. (It will either grab skia source code, or grab a prebuilt binary.) So the best way to view docs is to build them yourself:\n````cargo``` doc`` -`p` skulpin`` --`open````\n## Requirements\nMinimum required rust version: **1.43.0**\n### Windows\n  * If you're using the GNU toolchain (MSVC is the default) you might run into an issue building curl. (Curl is a dependency of skia-safe bindings, which is used to download prebuilt skia binaries.) There are some [workarounds listed here](https://github.com/alexcrichton/curl-rust/issues/239). Again, this should only affect you if you are running the non-default GNU toolchain.\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### MacOS\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### Linux\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * On linux you'll also need to link against bz2, GL, fontconfig, and freetype. \n    * On ubuntu, you could use ``libbz2-dev``, ``libfreetype6-dev``, ``libfontconfig1-dev``, and ``libgl-dev``. (And ``libvulkan-dev`` to pick up the Vulkan SDK)\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### Other Platforms\nIt may be possible to build this for mobile platforms, but I've not investigated this yet.\n## A note on High-DPI Display Support\nFor the common case, you can draw to the skia canvas using \"logical\" coordinates and not worry about dpi/scaling issues.\nInternally, the skia surface will match the swapchain size, but this size is not necessarily LogicalSize or PhysicalSize of the window. In order to produce consistently-sized results, the renderer will apply a scaling factor to the skia canvas before handing it off to your draw implementation.\n## Important configuration choices\nThere are a few primary choices you should consider when configuring how your app runs\n  * Coordinate System - This library can be configured to use a few different coordinate systems. \n    * ``Logical`` - Use logical coordinates, which are pixels with a factor applied to count for high resolution displays\n    * ``Physical`` - Use raw pixels for coordinates\n    * ``VisibleRange`` - Try to fit the given range to the window\n    * ``FixedWidth`` - Use the given X extents and aspect ratio to calculate Y extents\n    * ```None``` - Do not modify the canvas matrix\n  * Presentation Mode - You'll likely either want Fifo (default) or Mailbox \n    * ``Fifo`` (``VK_PRESENT_MODE_FIFO_KHR``) is the default behavior and is always present on devices that fully comply to spec. This will be VSync,shouldn't ever screen tear, and will generally run at display refresh rate.\n    * ``Mailbox`` (``VK_PRESENT_MODE_MAILBOX_KHR``) will render as quickly as possible. The frames are queued and the latest complete frame will be drawn. Other frames will be dropped. This rendering method will produce the lowest latency, but is not always available, and could be an unnecessary drain on battery life for laptops and mobile devices.\n    * See ``prefer_fifo_present_mode``/``prefer_mailbox_present_mode`` for a simple way to choose between the two recommended options or ``present_mode_priority`` for full control.\n    * For full details see documentation for ``PresentMode`` and the Vulkan spec.\n  * Device Type - The most common device types will be Dedicated or Integrated. By default, a Dedicated device is chosen when available. \n    * ``Discrete`` (``VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU``) - When available, this is likely to be the device with best performance\n    * ``Integrated`` (``VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU``) - This will generally be more power efficient that a Discrete GPU.\n    * I suspect the most likely case of having both would be a laptop with a discrete GPU. I would expect that favoring the integrated GPU would be better for battery life, at the cost of some performance. However I don't have a suitable device to test this.\n    * See ``prefer_integrated_gpu``/``prefer_discrete_gpu`` for a simple way to choose between the two recommended options or ``physical_device_type_priority`` for full control\n    * For full details see documentation for ``PhysicalDeviceType`` and the Vulkan spec.\n  * Vulkan Debug Layer - Debug logging is not enabled by default \n    * ``use_vulkan_debug_layer`` turns all logging on/off\n    * ``validation_layer_debug_report_flags`` allows choosing specific log levels\n    * If the Vulkan SDK is not installed, the app will fail to start if any vulkan debugging is enabled\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\nThe fonts directory contains several fonts under their own licenses:\n  * [Feather](https://github.com/AT-UI/feather-font), MIT\n  * [Material Design Icons](https://materialdesignicons.com), SIL OFL 1.1\n  * [FontAwesome 4.7.0](https://fontawesome.com/v4.7.0/license/), available under SIL OFL 1.1\n  * [``mplus`-`1p`-`regular`.`ttf``](http://mplus-fonts.osdn.jp), available under its own license.\n\n\n[``sdl2`` uses the zlib license.](https://www.libsdl.org/license.php)\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nSee [LICENSE-APACHE](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE) and [LICENSE-MIT](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT).\n#### Dependencies\n~19\u201339MB  ~761K SLoC\n  * [log](https://lib.rs/crates/log \"0.4\")\n  * [winit-21?](https://lib.rs/crates/skulpin/features#feature-winit-21 \"optional feature\") [winit-22?](https://lib.rs/crates/skulpin/features#feature-winit-22 \"optional feature\") [winit-23?](https://lib.rs/crates/skulpin/features#feature-winit-23 \"optional feature\") [winit-24?](https://lib.rs/crates/skulpin/features#feature-winit-24 \"optional feature\") [winit-25?](https://lib.rs/crates/skulpin/features#feature-winit-25 \"optional feature\") [winit-latest?](https://lib.rs/crates/skulpin/features#feature-winit-latest \"optional feature\") [skulpin-app-winit](https://lib.rs/crates/skulpin-app-winit \"0.14.1\")\n  * [skulpin-renderer](https://lib.rs/crates/skulpin-renderer \"new\") 0.14.1\n\n\n  * dev  [env_logger](https://lib.rs/crates/env_logger \"obsolete\") 0.6\n  * dev  [rapier2d](https://lib.rs/crates/rapier2d \"obsolete\") 0.5\n  * dev  [sdl2](https://lib.rs/crates/sdl2 \"obsolete\") >=0.33,<0.34.3[+bundled](https://lib.rs/crates/sdl2/features#feature-bundled)[+static-link](https://lib.rs/crates/sdl2/features#feature-static-link)[+raw\u2026handle](https://lib.rs/crates/sdl2/features#feature-raw-window-handle)\n  * dev  [sdl2-sys](https://lib.rs/crates/sdl2-sys \"obsolete\") >=0.33, <=0.34.2\n\n\n#### [Other features](https://lib.rs/crates/skulpin/features)\n  * [skia-complete](https://lib.rs/crates/skulpin/features#feature-skia-complete)\n  * [skia-shaper](https://lib.rs/crates/skulpin/features#feature-skia-shaper)\n  * [skia-svg](https://lib.rs/crates/skulpin/features#feature-skia-svg)\n  * [skia-textlayout](https://lib.rs/crates/skulpin/features#feature-skia-textlayout)\n  * [winit-app](https://lib.rs/crates/skulpin/features#feature-winit-app)\n\n\n  *[SLoC]: approx. additional lines of code\n",
        "markdown_with_citations": "###  36 releases\u27e81\u27e9\n0.14.1 |  Oct 31, 2021   \n---|---  \n0.14.0 |  May 27, 2021   \n0.13.1 |  Apr 3, 2021   \n0.13.0 |  Mar 14, 2021   \n0.2.2 |  Nov 24, 2019   \n#**355** in GUI\u27e82\u27e9\nDownload history 24/week @ 2025-01-15 10/week @ 2025-01-22 9/week @ 2025-01-29 124/week @ 2025-02-05 83/week @ 2025-02-12 16/week @ 2025-02-19 44/week @ 2025-02-26 8/week @ 2025-03-05 26/week @ 2025-03-12 10/week @ 2025-03-19 16/week @ 2025-03-26 16/week @ 2025-04-09 8/week @ 2025-04-16 24/week @ 2025-04-23 15/week @ 2025-04-30\n**63** downloads per month Used in  **2** crates\u27e83\u27e9\n**MIT/Apache**\n87KB  1K  SLoC\n# skulpin\nSkia + Vulkan = Skulpin\nThis crate provides an easy option for drawing hardware-accelerated 2D by combining vulkan and skia.\n![Build Status\u27e84\u27e9](https://travis-ci.org/aclysma/skulpin) ![Crates.io\u27e85\u27e9]\n![Example Screenshot\u27e86\u27e9]\nThis crate mainly depends on:\n  * rafx\u27e87\u27e9 - A rendering framework with easy access to the vulkan backend\n  * skia-safe\u27e88\u27e9 - Skia\u27e89\u27e9 bindings for Rust\n\n\nNOTE: See skia-bindings\u27e810\u27e9 for more info on how a skia binary acquired. In many cases, this crate will download a binary created by their project's CI.\nThis crate integrates with raw-window-handle\u27e811\u27e9, which allows it to be used with sdl2, winit, and any other windowing framework that supports raw-window-handle.\n## Running the Examples\nFirst, ensure that the below requirements are met depending on OS. Afterwards, the examples can be run normally.\nThe interactive\u27e812\u27e9 example is good to look at for an easy way to get keyboard/mouse input.\n```\n``#` winit `0.``24`\ncargo run `-``-`example interactive_winit_app `-``-`features winit`-`app`,`winit`-``25`\n`#` sdl2\ncargo run `-``-`example interactive_sdl2\n`\n```\n\nThe physics\u27e813\u27e9 demo is fun too.\n```\n```cargo``` run`` --`example` physics`` --`features` winit-app,winit-25`\n`\n```\n\nHere's a video of the physics and interactive examples.\n![IMAGE ALT TEXT\u27e814\u27e9](https://www.youtube.com/watch?v=El99FgGSzfg \"Video of Skulpin\")\n## Status\nThis crate is in \"maintenance\" mode - I'm not adding features or planning any API reworks, but I do plan to make fixes as necessary to address issues that might come up and maintain compatibility with the broader rust ecosystem.\nOriginally this was just a proof-of-concept, but it is now being used by neovide\u27e815\u27e9.\nFlutter, Google's new UI framework, uses a Skia + Vulkan stack to achieve 60+ FPS on mobile devices. Because Google is deeply invested in this stack, I anticipate relatively long term support of this type of usage in Skia.\n## Usage\nCurrently there are two ways to use this library with ``winit``.\n  * app\u27e816\u27e9 - Implement the AppHandler trait and launch the app. It's simple but not as flexible. This is currently only supported when using winit.\n  * renderer_only\u27e817\u27e9 - You manage the window and event loop yourself. Then add the renderer to draw to it. The window should be wrapped in an implementation of ```skulpin`::``Window``. Implementations for ``sdl2`` and ``winit`` are provided.\n\n\nIf you prefer ``sdl2`` you'll need to use the renderer directly. See sdl2 renderer only\u27e818\u27e9\nDon't forget to install the prerequisites below appropriate to your platform! (See \"Requirements\")\n## Feature Flags\n### Skia-related features:\n  * ``skia-complete`` - Includes all the below skia features. ** This is on by default **\n  * ``skia-shaper`` - Enables text shaping with Harfbuzz and ICU\n  * ``skia-svg`` - This feature enables the SVG rendering backend\n  * ``skia-textlayout`` - Makes the Skia module skparagraph available, which contains types that are used to lay out paragraphs\n  * More information on these flags is available in the skia-safe readme\u27e819\u27e9\n\n\nThe ``skia-bindings`` prebuilt binaries are only available for certain combinations of features. As of this writing, it is available for none, each feature individually, or all features enabled. The ``vulkan`` feature is required and implicitly used, so enabling any features individually will substantially increase build times. It's recommended to use all features (default behavior), or disable all features. (use ``default`-`features `=` `false```)\n### Skulpin features:\n  * ``winit-app`` - Include the winit app wrapper. It's less flexbile than using the renderer directly but is easy to use.\n\n\nIf using winit-app, you MUST specify a winit version feature flag (see below)\n### Winit version feature flags:\n  * ``winit-21``\n  * ``winit-22``\n  * ``winit-23``\n  * ``winit-24``\n  * ``winit-25``\n  * ``winit-latest``\n\n\n(These feature names match the imgui-rs crate.)\n### Examples of Feature Flag Usage\n```\n``#` Pull `in` all skia features and support `for` all backends `(`sdl2 and winit`)`\nskulpin `=` ``\"`0`\"``\n`#` Pull `in` all skia features but not the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```]` ```}``\n`#` Pull `in` all skia features and include the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```,` ``\"`winit-app`\"```]` ```}``\n`\n```\n\n### Upstream Versioning of skia-safe\nSkulpin can be built and used with many versions of skia-safe. In order to be accomodating to users of the library, the required version has been left open-ended. This allows new projects to use more recent versions of these libraries while not forcing old projects to update.\nYou can force a particular version of skia safe by using ````cargo``` update```\n```\n```cargo``` update`` -`p` skia-safe`` --`precise` 0.32`\n`\n```\n\n## Documentation\nDocumentation fails to build on docs.rs because the skia_safe crate requires an internet connection to build. (It will either grab skia source code, or grab a prebuilt binary.) So the best way to view docs is to build them yourself:\n````cargo``` doc`` -`p` skulpin`` --`open````\n## Requirements\nMinimum required rust version: **1.43.0**\n### Windows\n  * If you're using the GNU toolchain (MSVC is the default) you might run into an issue building curl. (Curl is a dependency of skia-safe bindings, which is used to download prebuilt skia binaries.) There are some workarounds listed here\u27e820\u27e9. Again, this should only affect you if you are running the non-default GNU toolchain.\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### MacOS\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### Linux\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * On linux you'll also need to link against bz2, GL, fontconfig, and freetype. \n    * On ubuntu, you could use ``libbz2-dev``, ``libfreetype6-dev``, ``libfontconfig1-dev``, and ``libgl-dev``. (And ``libvulkan-dev`` to pick up the Vulkan SDK)\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### Other Platforms\nIt may be possible to build this for mobile platforms, but I've not investigated this yet.\n## A note on High-DPI Display Support\nFor the common case, you can draw to the skia canvas using \"logical\" coordinates and not worry about dpi/scaling issues.\nInternally, the skia surface will match the swapchain size, but this size is not necessarily LogicalSize or PhysicalSize of the window. In order to produce consistently-sized results, the renderer will apply a scaling factor to the skia canvas before handing it off to your draw implementation.\n## Important configuration choices\nThere are a few primary choices you should consider when configuring how your app runs\n  * Coordinate System - This library can be configured to use a few different coordinate systems. \n    * ``Logical`` - Use logical coordinates, which are pixels with a factor applied to count for high resolution displays\n    * ``Physical`` - Use raw pixels for coordinates\n    * ``VisibleRange`` - Try to fit the given range to the window\n    * ``FixedWidth`` - Use the given X extents and aspect ratio to calculate Y extents\n    * ```None``` - Do not modify the canvas matrix\n  * Presentation Mode - You'll likely either want Fifo (default) or Mailbox \n    * ``Fifo`` (``VK_PRESENT_MODE_FIFO_KHR``) is the default behavior and is always present on devices that fully comply to spec. This will be VSync,shouldn't ever screen tear, and will generally run at display refresh rate.\n    * ``Mailbox`` (``VK_PRESENT_MODE_MAILBOX_KHR``) will render as quickly as possible. The frames are queued and the latest complete frame will be drawn. Other frames will be dropped. This rendering method will produce the lowest latency, but is not always available, and could be an unnecessary drain on battery life for laptops and mobile devices.\n    * See ``prefer_fifo_present_mode``/``prefer_mailbox_present_mode`` for a simple way to choose between the two recommended options or ``present_mode_priority`` for full control.\n    * For full details see documentation for ``PresentMode`` and the Vulkan spec.\n  * Device Type - The most common device types will be Dedicated or Integrated. By default, a Dedicated device is chosen when available. \n    * ``Discrete`` (``VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU``) - When available, this is likely to be the device with best performance\n    * ``Integrated`` (``VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU``) - This will generally be more power efficient that a Discrete GPU.\n    * I suspect the most likely case of having both would be a laptop with a discrete GPU. I would expect that favoring the integrated GPU would be better for battery life, at the cost of some performance. However I don't have a suitable device to test this.\n    * See ``prefer_integrated_gpu``/``prefer_discrete_gpu`` for a simple way to choose between the two recommended options or ``physical_device_type_priority`` for full control\n    * For full details see documentation for ``PhysicalDeviceType`` and the Vulkan spec.\n  * Vulkan Debug Layer - Debug logging is not enabled by default \n    * ``use_vulkan_debug_layer`` turns all logging on/off\n    * ``validation_layer_debug_report_flags`` allows choosing specific log levels\n    * If the Vulkan SDK is not installed, the app will fail to start if any vulkan debugging is enabled\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0, (LICENSE-APACHE\u27e823\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e824\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\nThe fonts directory contains several fonts under their own licenses:\n  * Feather\u27e825\u27e9, MIT\n  * Material Design Icons\u27e826\u27e9, SIL OFL 1.1\n  * FontAwesome 4.7.0\u27e827\u27e9, available under SIL OFL 1.1\n  * ``mplus`-`1p`-`regular`.`ttf``\u27e828\u27e9, available under its own license.\n\n\n``sdl2`` uses the zlib license.\u27e829\u27e9\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nSee LICENSE-APACHE\u27e823\u27e9 and LICENSE-MIT\u27e824\u27e9.\n#### Dependencies\n~19\u201339MB  ~761K SLoC\n  * log\u27e830\u27e9\n  * winit-21?\u27e831\u27e9 winit-22?\u27e832\u27e9 winit-23?\u27e833\u27e9 winit-24?\u27e834\u27e9 winit-25?\u27e835\u27e9 winit-latest?\u27e836\u27e9 skulpin-app-winit\u27e837\u27e9\n  * skulpin-renderer\u27e838\u27e9 0.14.1\n\n\n  * dev  env_logger\u27e839\u27e9 0.6\n  * dev  rapier2d\u27e840\u27e9 0.5\n  * dev  sdl2\u27e841\u27e9 >=0.33,<0.34.3+bundled\u27e842\u27e9+static-link\u27e843\u27e9+raw\u2026handle\u27e844\u27e9\n  * dev  sdl2-sys\u27e845\u27e9 >=0.33, <=0.34.2\n\n\n#### Other features\u27e846\u27e9\n  * skia-complete\u27e847\u27e9\n  * skia-shaper\u27e848\u27e9\n  * skia-svg\u27e849\u27e9\n  * skia-textlayout\u27e850\u27e9\n  * winit-app\u27e851\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/skulpin/versions: 36 releases\n\u27e82\u27e9 https://lib.rs/gui: Crates to help you create a graphical user interface. - GUI\n\u27e83\u27e9 https://lib.rs/crates/skulpin/rev:  **2** crates\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.org/aclysma/skulpin.svg?branch=master: ![Build Status\n\u27e85\u27e9 https://img.shields.io/crates/v/skulpin: Crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/aclysma/skulpin/8db0559d020473faed498bcaf9de2eb859280235/screenshot.png: Example Screenshot\n\u27e87\u27e9 https://github.com/aclysma/rafx: rafx\n\u27e88\u27e9 https://github.com/rust-skia/rust-skia: skia-safe\n\u27e89\u27e9 https://skia.org: Skia\n\u27e810\u27e9 https://lib.rs/crates/skia-bindings: skia-bindings\n\u27e811\u27e9 https://lib.rs/crates/raw-window-handle: raw-window-handle\n\u27e812\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/interactive_winit_app.rs: interactive\n\u27e813\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/physics.rs: physics\n\u27e814\u27e9 https://img.gs/czjpqfbdkz/full/http://img.youtube.com/vi/El99FgGSzfg/0.jpg: ![IMAGE ALT TEXT\n\u27e815\u27e9 https://github.com/Kethku/neovide: neovide\n\u27e816\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit_app.rs: app\n\u27e817\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit.rs: renderer_only\n\u27e818\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_sdl2.rs: sdl2 renderer only\n\u27e819\u27e9 https://lib.rs/crates/skia-safe: skia-safe readme\n\u27e820\u27e9 https://github.com/alexcrichton/curl-rust/issues/239: workarounds listed here\n\u27e821\u27e9 https://github.com/Rust-SDL2/rust-sdl2: requirements for the SDL2 bindings\n\u27e822\u27e9 https://lunarg.com/vulkan-sdk/: LunarG Vulkan SDK\n\u27e823\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE: LICENSE-APACHE\n\u27e824\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT: LICENSE-MIT\n\u27e825\u27e9 https://github.com/AT-UI/feather-font: Feather\n\u27e826\u27e9 https://materialdesignicons.com: Material Design Icons\n\u27e827\u27e9 https://fontawesome.com/v4.7.0/license/: FontAwesome 4.7.0\n\u27e828\u27e9 http://mplus-fonts.osdn.jp: ``mplus`-`1p`-`regular`.`ttf``\n\u27e829\u27e9 https://www.libsdl.org/license.php: ``sdl2`` uses the zlib license.\n\u27e830\u27e9 https://lib.rs/crates/log: 0.4 - log\n\u27e831\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-21: optional feature - winit-21?\n\u27e832\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-22: optional feature - winit-22?\n\u27e833\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-23: optional feature - winit-23?\n\u27e834\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-24: optional feature - winit-24?\n\u27e835\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-25: optional feature - winit-25?\n\u27e836\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-latest: optional feature - winit-latest?\n\u27e837\u27e9 https://lib.rs/crates/skulpin-app-winit: 0.14.1 - skulpin-app-winit\n\u27e838\u27e9 https://lib.rs/crates/skulpin-renderer: new - skulpin-renderer\n\u27e839\u27e9 https://lib.rs/crates/env_logger: obsolete - env_logger\n\u27e840\u27e9 https://lib.rs/crates/rapier2d: obsolete - rapier2d\n\u27e841\u27e9 https://lib.rs/crates/sdl2: obsolete - sdl2\n\u27e842\u27e9 https://lib.rs/crates/sdl2/features#feature-bundled: +bundled\n\u27e843\u27e9 https://lib.rs/crates/sdl2/features#feature-static-link: +static-link\n\u27e844\u27e9 https://lib.rs/crates/sdl2/features#feature-raw-window-handle: +raw\u2026handle\n\u27e845\u27e9 https://lib.rs/crates/sdl2-sys: obsolete - sdl2-sys\n\u27e846\u27e9 https://lib.rs/crates/skulpin/features: Other features\n\u27e847\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-complete: skia-complete\n\u27e848\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-shaper: skia-shaper\n\u27e849\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-svg: skia-svg\n\u27e850\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-textlayout: skia-textlayout\n\u27e851\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-app: winit-app\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `skulpin` crate combines Skia and Vulkan to provide hardware-accelerated 2D rendering for Rust applications. It supports integration with windowing frameworks like `winit` and `sdl2` via `raw-window-handle`, offers flexible configuration for coordinate systems and presentation modes, and includes features like text shaping, SVG rendering, and paragraph layout. While in maintenance mode, it remains compatible with the broader Rust ecosystem and is used in projects like Neovide.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Integration with Skia and Vulkan  \n\u2705 **Factual:** The `skulpin` crate combines Skia and Vulkan to provide hardware-accelerated 2D rendering, making it suitable for applications requiring high-performance graphics.  \n\u274c **Counterfactual:** The `skulpin` crate uses OpenGL instead of Vulkan for rendering, as it is more widely supported across platforms.  \n\n---\n\n### Pair 2: Support for Windowing Frameworks  \n\u2705 **Factual:** `skulpin` integrates with `raw-window-handle`, allowing it to work seamlessly with windowing frameworks like `winit` and `sdl2`.  \n\u274c **Counterfactual:** `skulpin` is limited to working exclusively with `winit` and does not support other windowing frameworks such as `sdl2`.  \n\n---\n\n### Pair 3: Maintenance Status  \n\u2705 **Factual:** The `skulpin` crate is in maintenance mode, meaning no new features or API reworks are planned, but compatibility fixes with the Rust ecosystem are still being addressed.  \n\u274c **Counterfactual:** The `skulpin` crate is actively under development, with frequent updates introducing new features and major API changes.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}