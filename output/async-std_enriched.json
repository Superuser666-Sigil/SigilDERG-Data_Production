{
    "name": "async-std",
    "version": "1.13.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/async-std/latest/async_std/all.html \"show sidebar\")\n# Crate async_stdCopy item path\n[Settings](https://docs.rs/async-std/latest/settings.html)\n[Help](https://docs.rs/async-std/latest/help.html)\nSummary[Source](https://docs.rs/async-std/latest/src/async_std/lib.rs.html#1-338)\nExpand description\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#async-version-of-the-rust-standard-library)Async version of the Rust standard library\n`async-std` is a foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the [broader Rust ecosystem](https://crates.io). It offers std types, like [`Future`](https://docs.rs/async-std/latest/async_std/future/trait.Future.html) and [`Stream`](https://docs.rs/async-std/latest/async_std/stream/trait.Stream.html), library-defined [operations on language primitives](https://docs.rs/async-std/latest/async_std/#primitives), [standard macros](https://docs.rs/async-std/latest/async_std/#macros), [I/O](https://docs.rs/async-std/latest/async_std/io/index.html) and [multithreading](https://docs.rs/async-std/latest/async_std/task/index.html), among [many other things](https://docs.rs/async-std/latest/async_std/#what-is-in-the-standard-library-documentation).\n`async-std` is available from [crates.io](https://crates.io). Once included, `async-std` can be accessed in [`use`](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html) statements through the path `async_std`, as in [`use async_std::future`](https://docs.rs/async-std/latest/async_std/future/index.html).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#how-to-read-this-documentation)How to read this documentation\nIf you already know the name of what you are looking for, the fastest way to find it is to use the [search bar](https://docs.rs/async-std/latest/async_std/) at the top of the page.\nOtherwise, you may want to jump to one of these useful sections:\n  * [`async_std::*` modules](https://docs.rs/async-std/latest/async_std/#modules)\n  * [Async macros](https://docs.rs/async-std/latest/async_std/#macros)\n  * [The Async Prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html)\n  * [Cargo.toml feature flags](https://docs.rs/async-std/latest/async_std/#features)\n  * [Examples](https://docs.rs/async-std/latest/async_std/#examples)\n\n\nIf this is your first time, the documentation for `async-std` is written to be casually perused. Clicking on interesting things should generally lead you to interesting places. Still, there are important bits you don\u2019t want to miss, so read on for a tour of the `async-std` and its documentation!\nOnce you are familiar with the contents of `async-std` you may begin to find the verbosity of the prose distracting. At this stage in your development you may want to press the `[-]` button near the top of the page to collapse it into a more skimmable view.\nWhile you are looking at that `[-]` button also notice the `[src]` button. Rust\u2019s API documentation comes with the source code and you are encouraged to read it. The `async-std` source is generally high quality and a peek behind the curtains is often enlightening.\nModules in this crate are organized in the same way as in `std`, except blocking functions have been replaced with async functions and threads have been replaced with lightweight tasks.\nYou can find more information, reading materials, and other resources here:\n  * [The async-std website](https://async.rs/)\n  * [The async-std book](https://book.async.rs)\n  * [GitHub repository](https://github.com/async-rs/async-std)\n  * [List of code examples](https://github.com/async-rs/async-std/tree/HEAD/examples)\n  * [Discord chat](https://discord.gg/JvZeVNe)\n\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#what-is-in-the-async-std-documentation)What is in the `async-std` documentation?\nFirst, `async-std` is divided into a number of focused modules, [all listed further down this page](https://docs.rs/async-std/latest/async_std/#modules). These modules are the bedrock upon which async Rust is forged, and they have mighty names like [`async_std::os`](https://docs.rs/async-std/latest/async_std/os/index.html) and [`async_std::task`](https://docs.rs/async-std/latest/async_std/task/index.html). Modules\u2019 documentation typically includes an overview of the module along with examples, and are a smart place to start familiarizing yourself with the library.\nSecond, `async-std` defines [The Async Prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html), a small collection of items - mostly traits - that should be imported into every module of every async crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.\nAnd finally, `async-std` exports a number of async macros, and [lists them on this page](https://docs.rs/async-std/latest/async_std/#macros).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#contributing-changes-to-the-documentation)Contributing changes to the documentation\nCheck out `async-std`\u2019s contribution guidelines [here](https://async.rs/contribute). The source for this documentation can be found on [GitHub](https://github.com/async-rs). To contribute changes, make sure you read the guidelines first, then submit pull requests for your suggested changes.\nContributions are appreciated! If you see a part of the docs that can be improved, submit a PR, or chat with us first on [Discord](https://discord.gg/JvZeVNe).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#a-tour-of-async-std)A tour of `async-std`\nThe rest of this crate documentation is dedicated to pointing out notable features of `async-std`.\n### [\u00a7](https://docs.rs/async-std/latest/async_std/#platform-abstractions-and-io)Platform abstractions and I/O\nBesides basic data types, `async-std` is largely concerned with abstracting over differences in common platforms, most notably Windows and Unix derivatives.\nCommon types of I/O, including [files](https://docs.rs/async-std/latest/async_std/fs/struct.File.html), [TCP](https://docs.rs/async-std/latest/async_std/net/struct.TcpStream.html), [UDP](https://docs.rs/async-std/latest/async_std/net/struct.UdpSocket.html), are defined in the [`io`](https://docs.rs/async-std/latest/async_std/io/index.html), [`fs`](https://docs.rs/async-std/latest/async_std/fs/index.html \"mod async_std::fs\"), and [`net`](https://docs.rs/async-std/latest/async_std/net/index.html \"mod async_std::net\") modules.\nThe [`task`](https://docs.rs/async-std/latest/async_std/task/index.html \"mod async_std::task\") module contains `async-std`\u2019s task abstractions. [`sync`](https://docs.rs/async-std/latest/async_std/sync/index.html) contains further primitive shared memory types. [`channel`](https://docs.rs/async-std/latest/async_std/channel/index.html) contains the channel types for message passing.\n### [\u00a7](https://docs.rs/async-std/latest/async_std/#timeouts-intervals-and-delays)Timeouts, intervals, and delays\n`async-std` provides several methods to manipulate time:\n  * [`task::sleep`](https://docs.rs/async-std/latest/async_std/task/fn.sleep.html) to wait for a duration to pass without blocking.\n  * [`stream::interval`](https://docs.rs/async-std/latest/async_std/stream/fn.interval.html) for emitting an event at a set interval.\n  * [`future::timeout`](https://docs.rs/async-std/latest/async_std/future/fn.timeout.html) to time-out futures if they don\u2019t resolve within a set interval.\n\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#examples)Examples\nAll examples require the [`\"attributes\"` feature](https://docs.rs/async-std/latest/async_std/#features) to be enabled. This feature is not enabled by default because it significantly impacts compile times. See [`task::block_on`](https://docs.rs/async-std/latest/async_std/task/fn.block_on.html) for an alternative way to start executing tasks.\nCall an async function from the main function:\n```\nasync fn say_hello() {\n  println!(\"Hello, world!\");\n}\n#[async_std::main]\nasync fn main() {\n  say_hello().await;\n}\n```\n\nAwait two futures concurrently, and return a tuple of their output:\n```\nuse async_std::prelude::*;\n#[async_std::main]\nasync fn main() {\n  let a = async { 1u8 };\n  let b = async { 2u8 };\n  assert_eq!(a.join(b).await, (1u8, 2u8))\n}\n```\n\nCreate a UDP server that echoes back each received message to the sender:\n```\nuse async_std::net::UdpSocket;\n#[async_std::main]\nasync fn main() -> std::io::Result<()> {\n  let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;\n  println!(\"Listening on {}\", socket.local_addr()?);\n  let mut buf = vec![0u8; 1024];\n  loop {\n    let (recv, peer) = socket.recv_from(&mut buf).await?;\n    let sent = socket.send_to(&buf[..recv], &peer).await?;\n    println!(\"Sent {} out of {} bytes to {}\", sent, recv, peer);\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#features)Features\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `unstable` are available only when the `unstable` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"unstable\"]\n```\n\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `attributes` are available only when the `attributes` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"attributes\"]\n```\n\nCompatibility with the `tokio` 1.0 runtime is also simultaneously possible using the `tokio1` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio1\"]\n```\n\nCompatibility with the `tokio` 0.2 runtime is possible using the `tokio02` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio02\"]\n```\n\nCompatibility with the `tokio` 0.3 runtime is also simultaneously possible using the `tokio03` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio03\"]\n```\n\nAdditionally it\u2019s possible to only use the core traits and combinators by only enabling the `std` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"std\"]\n```\n\nAnd to use async-std on `no_std` targets that only support `alloc` only enable the `alloc` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"alloc\"]\n```\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#runtime-configuration)Runtime configuration\nSeveral environment variables are available to tune the async-std runtime:\n  * `ASYNC_STD_THREAD_COUNT`: The number of threads that the async-std runtime will start. By default, this is one per logical cpu as determined by [async-global-executor](https://docs.rs/async-global-executor/2.4.1/x86_64-unknown-linux-gnu/async_global_executor/index.html \"mod async_global_executor\"), which may be different than the number of physical cpus. Async-std _will panic_ if this is set to any value other than a positive integer.\n  * `ASYNC_STD_THREAD_NAME`: The name that async-std\u2019s runtime threads report to the operating system. The default value is `\"async-std/runtime\"`.\n\n\n## Modules[\u00a7](https://docs.rs/async-std/latest/async_std/#modules)\n\n[channel](https://docs.rs/async-std/latest/async_std/channel/index.html \"mod async_std::channel\")\n    Channels\n\n[fs](https://docs.rs/async-std/latest/async_std/fs/index.html \"mod async_std::fs\")\n    Filesystem manipulation operations.\n\n[future](https://docs.rs/async-std/latest/async_std/future/index.html \"mod async_std::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/async-std/latest/async_std/io/index.html \"mod async_std::io\")\n    Traits, helpers, and type definitions for core I/O functionality.\n\n[net](https://docs.rs/async-std/latest/async_std/net/index.html \"mod async_std::net\")\n    Networking primitives for TCP/UDP communication.\n\n[os](https://docs.rs/async-std/latest/async_std/os/index.html \"mod async_std::os\")\n    OS-specific extensions.\n\n[path](https://docs.rs/async-std/latest/async_std/path/index.html \"mod async_std::path\")\n    Cross-platform path manipulation.\n\n[pin](https://docs.rs/async-std/latest/async_std/pin/index.html \"mod async_std::pin\")`unstable`\n    Types that pin data to its location in memory.\n\n[prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html \"mod async_std::prelude\")\n    The async prelude.\n\n[process](https://docs.rs/async-std/latest/async_std/process/index.html \"mod async_std::process\")`unstable`\n    A module for working with processes.\n\n[stream](https://docs.rs/async-std/latest/async_std/stream/index.html \"mod async_std::stream\")\n    Composable asynchronous iteration.\n\n[sync](https://docs.rs/async-std/latest/async_std/sync/index.html \"mod async_std::sync\")\n    Synchronization primitives.\n\n[task](https://docs.rs/async-std/latest/async_std/task/index.html \"mod async_std::task\")\n    Types and traits for working with asynchronous tasks.\n## Macros[\u00a7](https://docs.rs/async-std/latest/async_std/#macros)\n\n[eprint](https://docs.rs/async-std/latest/async_std/macro.eprint.html \"macro async_std::eprint\")`unstable`\n    Prints to the standard error.\n\n[eprintln](https://docs.rs/async-std/latest/async_std/macro.eprintln.html \"macro async_std::eprintln\")`unstable`\n    Prints to the standard error, with a newline.\n\n[print](https://docs.rs/async-std/latest/async_std/macro.print.html \"macro async_std::print\")`unstable`\n    Prints to the standard output.\n\n[println](https://docs.rs/async-std/latest/async_std/macro.println.html \"macro async_std::println\")`unstable`\n    Prints to the standard output, with a newline.\n\n[task_local](https://docs.rs/async-std/latest/async_std/macro.task_local.html \"macro async_std::task_local\")\n    Declares task-local values.\n\n[write](https://docs.rs/async-std/latest/async_std/macro.write.html \"macro async_std::write\")`unstable`\n    Writes formatted data into a buffer.\n\n[writeln](https://docs.rs/async-std/latest/async_std/macro.writeln.html \"macro async_std::writeln\")`unstable`\n    Writes formatted data into a buffer, with a newline appended.\n## Attribute Macros[\u00a7](https://docs.rs/async-std/latest/async_std/#attributes)\n\n[main](https://docs.rs/async-std/latest/async_std/attr.main.html \"attr async_std::main\")`attributes`\n    Enables an async main function.\n\n[test](https://docs.rs/async-std/latest/async_std/attr.test.html \"attr async_std::test\")`attributes`\n    Enables an async test function.\n",
        "markdown_with_citations": "[](https://docs.rs/async-std/latest/async_std/all.html \"show sidebar\")\n# Crate async_stdCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Async version of the Rust standard library\n`async-std` is a foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem\u27e85\u27e9. It offers std types, like `Future`\u27e86\u27e9 and `Stream`\u27e87\u27e9, library-defined operations on language primitives\u27e88\u27e9, standard macros\u27e89\u27e9, I/O\u27e810\u27e9 and multithreading\u27e811\u27e9, among many other things\u27e812\u27e9.\n`async-std` is available from crates.io\u27e85\u27e9. Once included, `async-std` can be accessed in `use`\u27e813\u27e9 statements through the path `async_std`, as in `use async_std::future`\u27e814\u27e9.\n## \u00a7\u27e815\u27e9How to read this documentation\nIf you already know the name of what you are looking for, the fastest way to find it is to use the search bar\u27e816\u27e9 at the top of the page.\nOtherwise, you may want to jump to one of these useful sections:\n  * `async_std::*` modules\u27e817\u27e9\n  * Async macros\u27e89\u27e9\n  * The Async Prelude\u27e818\u27e9\n  * Cargo.toml feature flags\u27e819\u27e9\n  * Examples\u27e820\u27e9\n\n\nIf this is your first time, the documentation for `async-std` is written to be casually perused. Clicking on interesting things should generally lead you to interesting places. Still, there are important bits you don\u2019t want to miss, so read on for a tour of the `async-std` and its documentation!\nOnce you are familiar with the contents of `async-std` you may begin to find the verbosity of the prose distracting. At this stage in your development you may want to press the `[-]` button near the top of the page to collapse it into a more skimmable view.\nWhile you are looking at that `[-]` button also notice the `[src]` button. Rust\u2019s API documentation comes with the source code and you are encouraged to read it. The `async-std` source is generally high quality and a peek behind the curtains is often enlightening.\nModules in this crate are organized in the same way as in `std`, except blocking functions have been replaced with async functions and threads have been replaced with lightweight tasks.\nYou can find more information, reading materials, and other resources here:\n  * The async-std website\u27e821\u27e9\n  * The async-std book\u27e822\u27e9\n  * GitHub repository\u27e823\u27e9\n  * List of code examples\u27e824\u27e9\n  * Discord chat\u27e825\u27e9\n\n\n## \u00a7\u27e826\u27e9What is in the `async-std` documentation?\nFirst, `async-std` is divided into a number of focused modules, all listed further down this page\u27e817\u27e9. These modules are the bedrock upon which async Rust is forged, and they have mighty names like `async_std::os`\u27e827\u27e9 and `async_std::task`\u27e811\u27e9. Modules\u2019 documentation typically includes an overview of the module along with examples, and are a smart place to start familiarizing yourself with the library.\nSecond, `async-std` defines The Async Prelude\u27e818\u27e9, a small collection of items - mostly traits - that should be imported into every module of every async crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.\nAnd finally, `async-std` exports a number of async macros, and lists them on this page\u27e89\u27e9.\n## \u00a7\u27e828\u27e9Contributing changes to the documentation\nCheck out `async-std`\u2019s contribution guidelines here\u27e829\u27e9. The source for this documentation can be found on GitHub\u27e830\u27e9. To contribute changes, make sure you read the guidelines first, then submit pull requests for your suggested changes.\nContributions are appreciated! If you see a part of the docs that can be improved, submit a PR, or chat with us first on Discord\u27e825\u27e9.\n## \u00a7\u27e831\u27e9A tour of `async-std`\nThe rest of this crate documentation is dedicated to pointing out notable features of `async-std`.\n### \u00a7\u27e832\u27e9Platform abstractions and I/O\nBesides basic data types, `async-std` is largely concerned with abstracting over differences in common platforms, most notably Windows and Unix derivatives.\nCommon types of I/O, including files\u27e833\u27e9, TCP\u27e834\u27e9, UDP\u27e835\u27e9, are defined in the `io`\u27e810\u27e9, `fs`\u27e836\u27e9, and `net`\u27e837\u27e9 modules.\nThe `task`\u27e811\u27e9 module contains `async-std`\u2019s task abstractions. `sync`\u27e838\u27e9 contains further primitive shared memory types. `channel`\u27e839\u27e9 contains the channel types for message passing.\n### \u00a7\u27e840\u27e9Timeouts, intervals, and delays\n`async-std` provides several methods to manipulate time:\n  * `task::sleep`\u27e841\u27e9 to wait for a duration to pass without blocking.\n  * `stream::interval`\u27e842\u27e9 for emitting an event at a set interval.\n  * `future::timeout`\u27e843\u27e9 to time-out futures if they don\u2019t resolve within a set interval.\n\n\n## \u00a7\u27e820\u27e9Examples\nAll examples require the `\"attributes\"` feature\u27e819\u27e9 to be enabled. This feature is not enabled by default because it significantly impacts compile times. See `task::block_on`\u27e844\u27e9 for an alternative way to start executing tasks.\nCall an async function from the main function:\n```\nasync fn say_hello() {\n  println!(\"Hello, world!\");\n}\n#[async_std::main]\nasync fn main() {\n  say_hello().await;\n}\n```\n\nAwait two futures concurrently, and return a tuple of their output:\n```\nuse async_std::prelude::*;\n#[async_std::main]\nasync fn main() {\n  let a = async { 1u8 };\n  let b = async { 2u8 };\n  assert_eq!(a.join(b).await, (1u8, 2u8))\n}\n```\n\nCreate a UDP server that echoes back each received message to the sender:\n```\nuse async_std::net::UdpSocket;\n#[async_std::main]\nasync fn main() -> std::io::Result<()> {\n  let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;\n  println!(\"Listening on {}\", socket.local_addr()?);\n  let mut buf = vec![0u8; 1024];\n  loop {\n    let (recv, peer) = socket.recv_from(&mut buf).await?;\n    let sent = socket.send_to(&buf[..recv], &peer).await?;\n    println!(\"Sent {} out of {} bytes to {}\", sent, recv, peer);\n  }\n}\n```\n\n## \u00a7\u27e819\u27e9Features\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `unstable` are available only when the `unstable` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"unstable\"]\n```\n\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `attributes` are available only when the `attributes` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"attributes\"]\n```\n\nCompatibility with the `tokio` 1.0 runtime is also simultaneously possible using the `tokio1` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio1\"]\n```\n\nCompatibility with the `tokio` 0.2 runtime is possible using the `tokio02` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio02\"]\n```\n\nCompatibility with the `tokio` 0.3 runtime is also simultaneously possible using the `tokio03` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio03\"]\n```\n\nAdditionally it\u2019s possible to only use the core traits and combinators by only enabling the `std` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"std\"]\n```\n\nAnd to use async-std on `no_std` targets that only support `alloc` only enable the `alloc` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"alloc\"]\n```\n\n## \u00a7\u27e845\u27e9Runtime configuration\nSeveral environment variables are available to tune the async-std runtime:\n  * `ASYNC_STD_THREAD_COUNT`: The number of threads that the async-std runtime will start. By default, this is one per logical cpu as determined by async-global-executor\u27e846\u27e9, which may be different than the number of physical cpus. Async-std _will panic_ if this is set to any value other than a positive integer.\n  * `ASYNC_STD_THREAD_NAME`: The name that async-std\u2019s runtime threads report to the operating system. The default value is `\"async-std/runtime\"`.\n\n\n## Modules\u00a7\u27e817\u27e9\n\nchannel\u27e839\u27e9\n    Channels\n\nfs\u27e836\u27e9\n    Filesystem manipulation operations.\n\nfuture\u27e814\u27e9\n    Asynchronous values.\n\nio\u27e810\u27e9\n    Traits, helpers, and type definitions for core I/O functionality.\n\nnet\u27e837\u27e9\n    Networking primitives for TCP/UDP communication.\n\nos\u27e827\u27e9\n    OS-specific extensions.\n\npath\u27e847\u27e9\n    Cross-platform path manipulation.\n\npin\u27e848\u27e9`unstable`\n    Types that pin data to its location in memory.\n\nprelude\u27e818\u27e9\n    The async prelude.\n\nprocess\u27e849\u27e9`unstable`\n    A module for working with processes.\n\nstream\u27e850\u27e9\n    Composable asynchronous iteration.\n\nsync\u27e838\u27e9\n    Synchronization primitives.\n\ntask\u27e811\u27e9\n    Types and traits for working with asynchronous tasks.\n## Macros\u00a7\u27e89\u27e9\n\neprint\u27e851\u27e9`unstable`\n    Prints to the standard error.\n\neprintln\u27e852\u27e9`unstable`\n    Prints to the standard error, with a newline.\n\nprint\u27e853\u27e9`unstable`\n    Prints to the standard output.\n\nprintln\u27e854\u27e9`unstable`\n    Prints to the standard output, with a newline.\n\ntask_local\u27e855\u27e9\n    Declares task-local values.\n\nwrite\u27e856\u27e9`unstable`\n    Writes formatted data into a buffer.\n\nwriteln\u27e857\u27e9`unstable`\n    Writes formatted data into a buffer, with a newline appended.\n## Attribute Macros\u00a7\u27e858\u27e9\n\nmain\u27e859\u27e9`attributes`\n    Enables an async main function.\n\ntest\u27e860\u27e9`attributes`\n    Enables an async test function.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-std/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-std/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-std/latest/src/async_std/lib.rs.html#1-338: Source\n\u27e84\u27e9 https://docs.rs/async-std/latest/async_std/#async-version-of-the-rust-standard-library: \u00a7\n\u27e85\u27e9 https://crates.io: broader Rust ecosystem\n\u27e86\u27e9 https://docs.rs/async-std/latest/async_std/future/trait.Future.html: `Future`\n\u27e87\u27e9 https://docs.rs/async-std/latest/async_std/stream/trait.Stream.html: `Stream`\n\u27e88\u27e9 https://docs.rs/async-std/latest/async_std/#primitives: operations on language primitives\n\u27e89\u27e9 https://docs.rs/async-std/latest/async_std/#macros: standard macros\n\u27e810\u27e9 https://docs.rs/async-std/latest/async_std/io/index.html: I/O\n\u27e811\u27e9 https://docs.rs/async-std/latest/async_std/task/index.html: multithreading\n\u27e812\u27e9 https://docs.rs/async-std/latest/async_std/#what-is-in-the-standard-library-documentation: many other things\n\u27e813\u27e9 https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html: `use`\n\u27e814\u27e9 https://docs.rs/async-std/latest/async_std/future/index.html: `use async_std::future`\n\u27e815\u27e9 https://docs.rs/async-std/latest/async_std/#how-to-read-this-documentation: \u00a7\n\u27e816\u27e9 https://docs.rs/async-std/latest/async_std/: search bar\n\u27e817\u27e9 https://docs.rs/async-std/latest/async_std/#modules: `async_std::*` modules\n\u27e818\u27e9 https://docs.rs/async-std/latest/async_std/prelude/index.html: The Async Prelude\n\u27e819\u27e9 https://docs.rs/async-std/latest/async_std/#features: Cargo.toml feature flags\n\u27e820\u27e9 https://docs.rs/async-std/latest/async_std/#examples: Examples\n\u27e821\u27e9 https://async.rs/: The async-std website\n\u27e822\u27e9 https://book.async.rs: The async-std book\n\u27e823\u27e9 https://github.com/async-rs/async-std: GitHub repository\n\u27e824\u27e9 https://github.com/async-rs/async-std/tree/HEAD/examples: List of code examples\n\u27e825\u27e9 https://discord.gg/JvZeVNe: Discord chat\n\u27e826\u27e9 https://docs.rs/async-std/latest/async_std/#what-is-in-the-async-std-documentation: \u00a7\n\u27e827\u27e9 https://docs.rs/async-std/latest/async_std/os/index.html: `async_std::os`\n\u27e828\u27e9 https://docs.rs/async-std/latest/async_std/#contributing-changes-to-the-documentation: \u00a7\n\u27e829\u27e9 https://async.rs/contribute: here\n\u27e830\u27e9 https://github.com/async-rs: GitHub\n\u27e831\u27e9 https://docs.rs/async-std/latest/async_std/#a-tour-of-async-std: \u00a7\n\u27e832\u27e9 https://docs.rs/async-std/latest/async_std/#platform-abstractions-and-io: \u00a7\n\u27e833\u27e9 https://docs.rs/async-std/latest/async_std/fs/struct.File.html: files\n\u27e834\u27e9 https://docs.rs/async-std/latest/async_std/net/struct.TcpStream.html: TCP\n\u27e835\u27e9 https://docs.rs/async-std/latest/async_std/net/struct.UdpSocket.html: UDP\n\u27e836\u27e9 https://docs.rs/async-std/latest/async_std/fs/index.html: mod async_std::fs - `fs`\n\u27e837\u27e9 https://docs.rs/async-std/latest/async_std/net/index.html: mod async_std::net - `net`\n\u27e838\u27e9 https://docs.rs/async-std/latest/async_std/sync/index.html: `sync`\n\u27e839\u27e9 https://docs.rs/async-std/latest/async_std/channel/index.html: `channel`\n\u27e840\u27e9 https://docs.rs/async-std/latest/async_std/#timeouts-intervals-and-delays: \u00a7\n\u27e841\u27e9 https://docs.rs/async-std/latest/async_std/task/fn.sleep.html: `task::sleep`\n\u27e842\u27e9 https://docs.rs/async-std/latest/async_std/stream/fn.interval.html: `stream::interval`\n\u27e843\u27e9 https://docs.rs/async-std/latest/async_std/future/fn.timeout.html: `future::timeout`\n\u27e844\u27e9 https://docs.rs/async-std/latest/async_std/task/fn.block_on.html: `task::block_on`\n\u27e845\u27e9 https://docs.rs/async-std/latest/async_std/#runtime-configuration: \u00a7\n\u27e846\u27e9 https://docs.rs/async-global-executor/2.4.1/x86_64-unknown-linux-gnu/async_global_executor/index.html: mod async_global_executor - async-global-executor\n\u27e847\u27e9 https://docs.rs/async-std/latest/async_std/path/index.html: mod async_std::path - path\n\u27e848\u27e9 https://docs.rs/async-std/latest/async_std/pin/index.html: mod async_std::pin - pin\n\u27e849\u27e9 https://docs.rs/async-std/latest/async_std/process/index.html: mod async_std::process - process\n\u27e850\u27e9 https://docs.rs/async-std/latest/async_std/stream/index.html: mod async_std::stream - stream\n\u27e851\u27e9 https://docs.rs/async-std/latest/async_std/macro.eprint.html: macro async_std::eprint - eprint\n\u27e852\u27e9 https://docs.rs/async-std/latest/async_std/macro.eprintln.html: macro async_std::eprintln - eprintln\n\u27e853\u27e9 https://docs.rs/async-std/latest/async_std/macro.print.html: macro async_std::print - print\n\u27e854\u27e9 https://docs.rs/async-std/latest/async_std/macro.println.html: macro async_std::println - println\n\u27e855\u27e9 https://docs.rs/async-std/latest/async_std/macro.task_local.html: macro async_std::task_local - task_local\n\u27e856\u27e9 https://docs.rs/async-std/latest/async_std/macro.write.html: macro async_std::write - write\n\u27e857\u27e9 https://docs.rs/async-std/latest/async_std/macro.writeln.html: macro async_std::writeln - writeln\n\u27e858\u27e9 https://docs.rs/async-std/latest/async_std/#attributes: \u00a7\n\u27e859\u27e9 https://docs.rs/async-std/latest/async_std/attr.main.html: attr async_std::main - main\n\u27e860\u27e9 https://docs.rs/async-std/latest/async_std/attr.test.html: attr async_std::test - test\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "`async-std` is an asynchronous version of the Rust standard library, providing async equivalents of common types and operations, such as `Future`, `Stream`, I/O, multithreading, and synchronization primitives. It includes modules for filesystem manipulation, networking, and task management, along with async macros and prelude traits for streamlined usage. The crate supports feature flags for compatibility with `tokio` runtimes and `no_std` environments, making it versatile for various async programming needs.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Async Functions and Blocking Alternatives  \n\u2705 **Factual:** The `async-std` crate replaces blocking functions found in the Rust standard library with equivalent asynchronous functions, such as `task::sleep` for non-blocking delays.  \n\u274c **Counterfactual:** The `async-std` crate provides both blocking and asynchronous versions of functions, allowing users to choose between them depending on their use case.  \n\n---\n\n### Pair 2: Compatibility with Tokio Runtime  \n\u2705 **Factual:** The `async-std` crate includes optional feature flags (`tokio1`, `tokio02`, `tokio03`) for compatibility with various versions of the Tokio runtime.  \n\u274c **Counterfactual:** The `async-std` crate is incompatible with the Tokio runtime and requires users to exclusively use its own runtime for asynchronous tasks.  \n\n---\n\n### Pair 3: Prelude and Module Organization  \n\u2705 **Factual:** The `async-std` crate provides a prelude module (`async_std::prelude`) that includes commonly used traits and types for asynchronous programming, simplifying imports.  \n\u274c **Counterfactual:** The `async-std` crate does not include a prelude module, requiring users to manually import all necessary traits and types from individual modules.  \n\n---",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}