{
    "name": "console",
    "version": "0.16.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/console/latest/console/all.html \"show sidebar\")\n# Crate consoleCopy item path\n[Settings](https://docs.rs/console/latest/settings.html)\n[Help](https://docs.rs/console/latest/help.html)\nSummary[Source](https://docs.rs/console/latest/src/console/lib.rs.html#1-122)\nExpand description\nconsole is a library for Rust that provides access to various terminal features so you can build nicer looking command line interfaces. It comes with various tools and utilities for working with Terminals and formatting text.\nBest paired with other libraries in the family:\n  * [dialoguer](https://docs.rs/dialoguer)\n  * [indicatif](https://docs.rs/indicatif)\n\n\n## [\u00a7](https://docs.rs/console/latest/console/#terminal-access)Terminal Access\nThe terminal is abstracted through the `console::Term` type. It can either directly provide access to the connected terminal or by buffering up commands. A buffered terminal will however not be completely buffered on windows where cursor movements are currently directly passed through.\nExample usage:\n```\nuse std::thread;\nuse std::time::Duration;\nuse console::Term;\nlet term = Term::stdout();\nterm.write_line(\"Hello World!\")?;\nthread::sleep(Duration::from_millis(2000));\nterm.clear_line()?;\n```\n\n## [\u00a7](https://docs.rs/console/latest/console/#colors-and-styles)Colors and Styles\n`console` automatically detects when to use colors based on the tty flag. It also provides higher level wrappers for styling text and other things that can be displayed with the `style` function and utility types.\nExample usage:\n```\nuse console::style;\nprintln!(\"This is {} neat\", style(\"quite\").cyan());\n```\n\nYou can also store styles and apply them to text later:\n```\nuse console::Style;\nlet cyan = Style::new().cyan();\nprintln!(\"This is {} neat\", cyan.apply_to(\"quite\"));\n```\n\n## [\u00a7](https://docs.rs/console/latest/console/#working-with-ansi-codes)Working with ANSI Codes\nThe crate provides the function `strip_ansi_codes` to remove ANSI codes from a string as well as `measure_text_width` to calculate the width of a string as it would be displayed by the terminal. Both of those together are useful for more complex formatting.\n## [\u00a7](https://docs.rs/console/latest/console/#unicode-width-support)Unicode Width Support\nBy default this crate depends on the `unicode-width` crate to calculate the width of terminal characters. If you do not need this you can disable the `unicode-width` feature which will cut down on dependencies.\n## [\u00a7](https://docs.rs/console/latest/console/#features)Features\nBy default all features are enabled. The following features exist:\n  * `unicode-width`: adds support for unicode width calculations\n  * `ansi-parsing`: adds support for parsing ansi codes (this adds support for stripping and taking ansi escape codes into account for length calculations).\n\n\n## Structs[\u00a7](https://docs.rs/console/latest/console/#structs)\n\n[AnsiCodeIterator](https://docs.rs/console/latest/console/struct.AnsiCodeIterator.html \"struct console::AnsiCodeIterator\")\n    An iterator over ansi codes in a string.\n\n[Emoji](https://docs.rs/console/latest/console/struct.Emoji.html \"struct console::Emoji\")\n    \u201cIntelligent\u201d emoji formatter.\n\n[Style](https://docs.rs/console/latest/console/struct.Style.html \"struct console::Style\")\n    A stored style that can be applied.\n\n[StyledObject](https://docs.rs/console/latest/console/struct.StyledObject.html \"struct console::StyledObject\")\n    A formatting wrapper that can be styled for a terminal.\n\n[Term](https://docs.rs/console/latest/console/struct.Term.html \"struct console::Term\")\n    Abstraction around a terminal.\n\n[TermFeatures](https://docs.rs/console/latest/console/struct.TermFeatures.html \"struct console::TermFeatures\")\n    Gives access to the terminal features.\n## Enums[\u00a7](https://docs.rs/console/latest/console/#enums)\n\n[Alignment](https://docs.rs/console/latest/console/enum.Alignment.html \"enum console::Alignment\")\n    Defines the alignment for padding operations.\n\n[Attribute](https://docs.rs/console/latest/console/enum.Attribute.html \"enum console::Attribute\")\n    A terminal style attribute.\n\n[Color](https://docs.rs/console/latest/console/enum.Color.html \"enum console::Color\")\n    A terminal color.\n\n[Key](https://docs.rs/console/latest/console/enum.Key.html \"enum console::Key\")\n    Key mapping\n\n[TermFamily](https://docs.rs/console/latest/console/enum.TermFamily.html \"enum console::TermFamily\")\n    The family of the terminal.\n\n[TermTarget](https://docs.rs/console/latest/console/enum.TermTarget.html \"enum console::TermTarget\")\n    Where the term is writing.\n## Functions[\u00a7](https://docs.rs/console/latest/console/#functions)\n\n[colors_enabled](https://docs.rs/console/latest/console/fn.colors_enabled.html \"fn console::colors_enabled\")\n    Returns `true` if colors should be enabled for stdout.\n\n[colors_enabled_stderr](https://docs.rs/console/latest/console/fn.colors_enabled_stderr.html \"fn console::colors_enabled_stderr\")\n    Returns `true` if colors should be enabled for stderr.\n\n[measure_text_width](https://docs.rs/console/latest/console/fn.measure_text_width.html \"fn console::measure_text_width\")\n    Measure the width of a string in terminal characters.\n\n[pad_str](https://docs.rs/console/latest/console/fn.pad_str.html \"fn console::pad_str\")\n    Pads a string to fill a certain number of characters.\n\n[pad_str_with](https://docs.rs/console/latest/console/fn.pad_str_with.html \"fn console::pad_str_with\")\n    Pads a string with specific padding to fill a certain number of characters.\n\n[set_colors_enabled](https://docs.rs/console/latest/console/fn.set_colors_enabled.html \"fn console::set_colors_enabled\")\n    Forces colorization on or off for stdout.\n\n[set_colors_enabled_stderr](https://docs.rs/console/latest/console/fn.set_colors_enabled_stderr.html \"fn console::set_colors_enabled_stderr\")\n    Forces colorization on or off for stderr.\n\n[strip_ansi_codes](https://docs.rs/console/latest/console/fn.strip_ansi_codes.html \"fn console::strip_ansi_codes\")\n    Helper function to strip ansi codes.\n\n[style](https://docs.rs/console/latest/console/fn.style.html \"fn console::style\")\n    Wraps an object for formatting for styling.\n\n[truncate_str](https://docs.rs/console/latest/console/fn.truncate_str.html \"fn console::truncate_str\")\n    Truncates a string to a certain number of characters.\n\n[user_attended](https://docs.rs/console/latest/console/fn.user_attended.html \"fn console::user_attended\")\n    A fast way to check if the application has a user attended for stdout.\n\n[user_attended_stderr](https://docs.rs/console/latest/console/fn.user_attended_stderr.html \"fn console::user_attended_stderr\")\n    A fast way to check if the application has a user attended for stderr.\n",
        "markdown_with_citations": "[](https://docs.rs/console/latest/console/all.html \"show sidebar\")\n# Crate consoleCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nconsole is a library for Rust that provides access to various terminal features so you can build nicer looking command line interfaces. It comes with various tools and utilities for working with Terminals and formatting text.\nBest paired with other libraries in the family:\n  * dialoguer\u27e84\u27e9\n  * indicatif\u27e85\u27e9\n\n\n## \u00a7\u27e86\u27e9Terminal Access\nThe terminal is abstracted through the `console::Term` type. It can either directly provide access to the connected terminal or by buffering up commands. A buffered terminal will however not be completely buffered on windows where cursor movements are currently directly passed through.\nExample usage:\n```\nuse std::thread;\nuse std::time::Duration;\nuse console::Term;\nlet term = Term::stdout();\nterm.write_line(\"Hello World!\")?;\nthread::sleep(Duration::from_millis(2000));\nterm.clear_line()?;\n```\n\n## \u00a7\u27e87\u27e9Colors and Styles\n`console` automatically detects when to use colors based on the tty flag. It also provides higher level wrappers for styling text and other things that can be displayed with the `style` function and utility types.\nExample usage:\n```\nuse console::style;\nprintln!(\"This is {} neat\", style(\"quite\").cyan());\n```\n\nYou can also store styles and apply them to text later:\n```\nuse console::Style;\nlet cyan = Style::new().cyan();\nprintln!(\"This is {} neat\", cyan.apply_to(\"quite\"));\n```\n\n## \u00a7\u27e88\u27e9Working with ANSI Codes\nThe crate provides the function `strip_ansi_codes` to remove ANSI codes from a string as well as `measure_text_width` to calculate the width of a string as it would be displayed by the terminal. Both of those together are useful for more complex formatting.\n## \u00a7\u27e89\u27e9Unicode Width Support\nBy default this crate depends on the `unicode-width` crate to calculate the width of terminal characters. If you do not need this you can disable the `unicode-width` feature which will cut down on dependencies.\n## \u00a7\u27e810\u27e9Features\nBy default all features are enabled. The following features exist:\n  * `unicode-width`: adds support for unicode width calculations\n  * `ansi-parsing`: adds support for parsing ansi codes (this adds support for stripping and taking ansi escape codes into account for length calculations).\n\n\n## Structs\u00a7\u27e811\u27e9\n\nAnsiCodeIterator\u27e812\u27e9\n    An iterator over ansi codes in a string.\n\nEmoji\u27e813\u27e9\n    \u201cIntelligent\u201d emoji formatter.\n\nStyle\u27e814\u27e9\n    A stored style that can be applied.\n\nStyledObject\u27e815\u27e9\n    A formatting wrapper that can be styled for a terminal.\n\nTerm\u27e816\u27e9\n    Abstraction around a terminal.\n\nTermFeatures\u27e817\u27e9\n    Gives access to the terminal features.\n## Enums\u00a7\u27e818\u27e9\n\nAlignment\u27e819\u27e9\n    Defines the alignment for padding operations.\n\nAttribute\u27e820\u27e9\n    A terminal style attribute.\n\nColor\u27e821\u27e9\n    A terminal color.\n\nKey\u27e822\u27e9\n    Key mapping\n\nTermFamily\u27e823\u27e9\n    The family of the terminal.\n\nTermTarget\u27e824\u27e9\n    Where the term is writing.\n## Functions\u00a7\u27e825\u27e9\n\ncolors_enabled\u27e826\u27e9\n    Returns `true` if colors should be enabled for stdout.\n\ncolors_enabled_stderr\u27e827\u27e9\n    Returns `true` if colors should be enabled for stderr.\n\nmeasure_text_width\u27e828\u27e9\n    Measure the width of a string in terminal characters.\n\npad_str\u27e829\u27e9\n    Pads a string to fill a certain number of characters.\n\npad_str_with\u27e830\u27e9\n    Pads a string with specific padding to fill a certain number of characters.\n\nset_colors_enabled\u27e831\u27e9\n    Forces colorization on or off for stdout.\n\nset_colors_enabled_stderr\u27e832\u27e9\n    Forces colorization on or off for stderr.\n\nstrip_ansi_codes\u27e833\u27e9\n    Helper function to strip ansi codes.\n\nstyle\u27e834\u27e9\n    Wraps an object for formatting for styling.\n\ntruncate_str\u27e835\u27e9\n    Truncates a string to a certain number of characters.\n\nuser_attended\u27e836\u27e9\n    A fast way to check if the application has a user attended for stdout.\n\nuser_attended_stderr\u27e837\u27e9\n    A fast way to check if the application has a user attended for stderr.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/console/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/console/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/console/latest/src/console/lib.rs.html#1-122: Source\n\u27e84\u27e9 https://docs.rs/dialoguer: dialoguer\n\u27e85\u27e9 https://docs.rs/indicatif: indicatif\n\u27e86\u27e9 https://docs.rs/console/latest/console/#terminal-access: \u00a7\n\u27e87\u27e9 https://docs.rs/console/latest/console/#colors-and-styles: \u00a7\n\u27e88\u27e9 https://docs.rs/console/latest/console/#working-with-ansi-codes: \u00a7\n\u27e89\u27e9 https://docs.rs/console/latest/console/#unicode-width-support: \u00a7\n\u27e810\u27e9 https://docs.rs/console/latest/console/#features: \u00a7\n\u27e811\u27e9 https://docs.rs/console/latest/console/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/console/latest/console/struct.AnsiCodeIterator.html: struct console::AnsiCodeIterator - AnsiCodeIterator\n\u27e813\u27e9 https://docs.rs/console/latest/console/struct.Emoji.html: struct console::Emoji - Emoji\n\u27e814\u27e9 https://docs.rs/console/latest/console/struct.Style.html: struct console::Style - Style\n\u27e815\u27e9 https://docs.rs/console/latest/console/struct.StyledObject.html: struct console::StyledObject - StyledObject\n\u27e816\u27e9 https://docs.rs/console/latest/console/struct.Term.html: struct console::Term - Term\n\u27e817\u27e9 https://docs.rs/console/latest/console/struct.TermFeatures.html: struct console::TermFeatures - TermFeatures\n\u27e818\u27e9 https://docs.rs/console/latest/console/#enums: \u00a7\n\u27e819\u27e9 https://docs.rs/console/latest/console/enum.Alignment.html: enum console::Alignment - Alignment\n\u27e820\u27e9 https://docs.rs/console/latest/console/enum.Attribute.html: enum console::Attribute - Attribute\n\u27e821\u27e9 https://docs.rs/console/latest/console/enum.Color.html: enum console::Color - Color\n\u27e822\u27e9 https://docs.rs/console/latest/console/enum.Key.html: enum console::Key - Key\n\u27e823\u27e9 https://docs.rs/console/latest/console/enum.TermFamily.html: enum console::TermFamily - TermFamily\n\u27e824\u27e9 https://docs.rs/console/latest/console/enum.TermTarget.html: enum console::TermTarget - TermTarget\n\u27e825\u27e9 https://docs.rs/console/latest/console/#functions: \u00a7\n\u27e826\u27e9 https://docs.rs/console/latest/console/fn.colors_enabled.html: fn console::colors_enabled - colors_enabled\n\u27e827\u27e9 https://docs.rs/console/latest/console/fn.colors_enabled_stderr.html: fn console::colors_enabled_stderr - colors_enabled_stderr\n\u27e828\u27e9 https://docs.rs/console/latest/console/fn.measure_text_width.html: fn console::measure_text_width - measure_text_width\n\u27e829\u27e9 https://docs.rs/console/latest/console/fn.pad_str.html: fn console::pad_str - pad_str\n\u27e830\u27e9 https://docs.rs/console/latest/console/fn.pad_str_with.html: fn console::pad_str_with - pad_str_with\n\u27e831\u27e9 https://docs.rs/console/latest/console/fn.set_colors_enabled.html: fn console::set_colors_enabled - set_colors_enabled\n\u27e832\u27e9 https://docs.rs/console/latest/console/fn.set_colors_enabled_stderr.html: fn console::set_colors_enabled_stderr - set_colors_enabled_stderr\n\u27e833\u27e9 https://docs.rs/console/latest/console/fn.strip_ansi_codes.html: fn console::strip_ansi_codes - strip_ansi_codes\n\u27e834\u27e9 https://docs.rs/console/latest/console/fn.style.html: fn console::style - style\n\u27e835\u27e9 https://docs.rs/console/latest/console/fn.truncate_str.html: fn console::truncate_str - truncate_str\n\u27e836\u27e9 https://docs.rs/console/latest/console/fn.user_attended.html: fn console::user_attended - user_attended\n\u27e837\u27e9 https://docs.rs/console/latest/console/fn.user_attended_stderr.html: fn console::user_attended_stderr - user_attended_stderr\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `console` crate provides utilities for building rich command-line interfaces in Rust, including terminal abstraction (`console::Term`) for writing and clearing text, automatic color detection, and text styling via ANSI codes. It supports Unicode width calculations, ANSI code stripping, and text formatting, with configurable features like `unicode-width` and `ansi-parsing`. It pairs well with related libraries like `dialoguer` and `indicatif`.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Terminal Access  \n\u2705 Factual: The `console::Term` type provides an abstraction for terminal access, allowing commands to be buffered or directly passed through, though on Windows, cursor movements are not fully buffered.  \n\u274c Counterfactual: The `console::Term` type only supports direct terminal access and does not allow buffering commands for delayed execution.  \n\n---\n\n### Pair 2: Colors and Styles  \n\u2705 Factual: The `console` crate automatically detects whether to use colors based on the TTY flag and provides a `style` function for high-level text styling.  \n\u274c Counterfactual: The `console` crate requires manual configuration to enable color detection and does not provide built-in functions for text styling.  \n\n---\n\n### Pair 3: Unicode Width Support  \n\u2705 Factual: The `console` crate depends on the `unicode-width` crate by default for calculating the width of terminal characters, but this feature can be disabled to reduce dependencies.  \n\u274c Counterfactual: The `console` crate does not support Unicode width calculations, and developers must manually integrate the `unicode-width` crate for this functionality.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}