{
    "name": "ntex",
    "version": "2.14.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/ntex/latest/ntex/all.html \"show sidebar\")\n# Crate ntexCopy item path\n[Settings](https://docs.rs/ntex/latest/settings.html)\n[Help](https://docs.rs/ntex/latest/help.html)\nSummary[Source](https://docs.rs/ntex/latest/src/ntex/lib.rs.html#1-140)\nExpand description\nntex - framework for composable network services\n### [\u00a7](https://docs.rs/ntex/latest/ntex/#package-feature)Package feature\n  * `openssl` - enables ssl support via `openssl` crate\n  * `rustls` - enables ssl support via `rustls` crate\n  * `compress` - enables compression support in http and web modules\n  * `cookie` - enables cookie support in http and web modules\n\n\n## Modules[\u00a7](https://docs.rs/ntex/latest/ntex/#modules)\n\n[channel](https://docs.rs/ntex/latest/ntex/channel/index.html \"mod ntex::channel\")\n    Communication primitives\n\n[codec](https://docs.rs/ntex/latest/ntex/codec/index.html \"mod ntex::codec\")\n    Utilities for encoding and decoding frames.\n\n[connect](https://docs.rs/ntex/latest/ntex/connect/index.html \"mod ntex::connect\")\n    Tcp connector service\n\n[http](https://docs.rs/ntex/latest/ntex/http/index.html \"mod ntex::http\")\n    Http protocol support.\n\n[io](https://docs.rs/ntex/latest/ntex/io/index.html \"mod ntex::io\")\n    IO streaming utilities.\n\n[router](https://docs.rs/ntex/latest/ntex/router/index.html \"mod ntex::router\")\n    Resource path matching library.\n\n[rt](https://docs.rs/ntex/latest/ntex/rt/index.html \"mod ntex::rt\")\n    A runtime implementation that runs everything on the current thread.\n\n[server](https://docs.rs/ntex/latest/ntex/server/index.html \"mod ntex::server\")\n    General purpose tcp server\n\n[service](https://docs.rs/ntex/latest/ntex/service/index.html \"mod ntex::service\")\n\n\n[task](https://docs.rs/ntex/latest/ntex/task/index.html \"mod ntex::task\")\n    A synchronization primitive for task wakeup.\n\n[testing](https://docs.rs/ntex/latest/ntex/testing/index.html \"mod ntex::testing\")\n    IO testing utilities.\n\n[time](https://docs.rs/ntex/latest/ntex/time/index.html \"mod ntex::time\")\n    Utilities for tracking time.\n\n[tls](https://docs.rs/ntex/latest/ntex/tls/index.html \"mod ntex::tls\")\n    TLS support for ntex ecosystem.\n\n[util](https://docs.rs/ntex/latest/ntex/util/index.html \"mod ntex::util\")\n\n\n[web](https://docs.rs/ntex/latest/ntex/web/index.html \"mod ntex::web\")\n    Web framework for Rust.\n\n[ws](https://docs.rs/ntex/latest/ntex/ws/index.html \"mod ntex::ws\")\n    WebSocket protocol support.\n## Macros[\u00a7](https://docs.rs/ntex/latest/ntex/#macros)\n\n[forward_poll](https://docs.rs/ntex/latest/ntex/macro.forward_poll.html \"macro ntex::forward_poll\")\n    An implementation of [`crate::Service::poll`](https://docs.rs/ntex/latest/ntex/trait.Service.html#method.poll \"method ntex::Service::poll\") that forwards poll call to a field.\n\n[forward_ready](https://docs.rs/ntex/latest/ntex/macro.forward_ready.html \"macro ntex::forward_ready\")\n    An implementation of [`crate::Service::ready`](https://docs.rs/ntex/latest/ntex/trait.Service.html#method.ready \"method ntex::Service::ready\") that forwards readiness checks to a field.\n\n[forward_shutdown](https://docs.rs/ntex/latest/ntex/macro.forward_shutdown.html \"macro ntex::forward_shutdown\")\n    An implementation of [`crate::Service::shutdown`](https://docs.rs/ntex/latest/ntex/trait.Service.html#method.shutdown \"method ntex::Service::shutdown\") that forwards shutdown checks to a field.\n## Structs[\u00a7](https://docs.rs/ntex/latest/ntex/#structs)\n\n[Pipeline](https://docs.rs/ntex/latest/ntex/struct.Pipeline.html \"struct ntex::Pipeline\")\n    Container for a service.\n\n[ServiceCtx](https://docs.rs/ntex/latest/ntex/struct.ServiceCtx.html \"struct ntex::ServiceCtx\")\n\n## Traits[\u00a7](https://docs.rs/ntex/latest/ntex/#traits)\n\n[IntoService](https://docs.rs/ntex/latest/ntex/trait.IntoService.html \"trait ntex::IntoService\")\n    Trait for types that can be converted to a `Service`\n\n[IntoServiceFactory](https://docs.rs/ntex/latest/ntex/trait.IntoServiceFactory.html \"trait ntex::IntoServiceFactory\")\n    Trait for types that can be converted to a `ServiceFactory`\n\n[Middleware](https://docs.rs/ntex/latest/ntex/trait.Middleware.html \"trait ntex::Middleware\")\n    The `Middleware` trait defines the interface of a service factory that wraps inner service during construction.\n\n[Service](https://docs.rs/ntex/latest/ntex/trait.Service.html \"trait ntex::Service\")\n    An asynchronous function of `Request` to a `Response`.\n\n[ServiceFactory](https://docs.rs/ntex/latest/ntex/trait.ServiceFactory.html \"trait ntex::ServiceFactory\")\n    Factory for creating `Service`s.\n## Functions[\u00a7](https://docs.rs/ntex/latest/ntex/#functions)\n\n[chain](https://docs.rs/ntex/latest/ntex/fn.chain.html \"fn ntex::chain\")\n    Constructs new chain with one service.\n\n[chain_factory](https://docs.rs/ntex/latest/ntex/fn.chain_factory.html \"fn ntex::chain_factory\")\n    Constructs new chain factory with one service factory.\n\n[fn_service](https://docs.rs/ntex/latest/ntex/fn.fn_service.html \"fn ntex::fn_service\")\n    Create `ServiceFactory` for function that can act as a `Service`\n## Attribute Macros[\u00a7](https://docs.rs/ntex/latest/ntex/#attributes)\n\n[main](https://docs.rs/ntex/latest/ntex/attr.main.html \"attr ntex::main\")\n    Marks async function to be executed by ntex system.\n\n[test](https://docs.rs/ntex/latest/ntex/attr.test.html \"attr ntex::test\")\n    Marks async test function to be executed by ntex runtime.\n",
        "markdown_with_citations": "[](https://docs.rs/ntex/latest/ntex/all.html \"show sidebar\")\n# Crate ntexCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nntex - framework for composable network services\n### \u00a7\u27e84\u27e9Package feature\n  * `openssl` - enables ssl support via `openssl` crate\n  * `rustls` - enables ssl support via `rustls` crate\n  * `compress` - enables compression support in http and web modules\n  * `cookie` - enables cookie support in http and web modules\n\n\n## Modules\u00a7\u27e85\u27e9\n\nchannel\u27e86\u27e9\n    Communication primitives\n\ncodec\u27e87\u27e9\n    Utilities for encoding and decoding frames.\n\nconnect\u27e88\u27e9\n    Tcp connector service\n\nhttp\u27e89\u27e9\n    Http protocol support.\n\nio\u27e810\u27e9\n    IO streaming utilities.\n\nrouter\u27e811\u27e9\n    Resource path matching library.\n\nrt\u27e812\u27e9\n    A runtime implementation that runs everything on the current thread.\n\nserver\u27e813\u27e9\n    General purpose tcp server\n\nservice\u27e814\u27e9\n\n\ntask\u27e815\u27e9\n    A synchronization primitive for task wakeup.\n\ntesting\u27e816\u27e9\n    IO testing utilities.\n\ntime\u27e817\u27e9\n    Utilities for tracking time.\n\ntls\u27e818\u27e9\n    TLS support for ntex ecosystem.\n\nutil\u27e819\u27e9\n\n\nweb\u27e820\u27e9\n    Web framework for Rust.\n\nws\u27e821\u27e9\n    WebSocket protocol support.\n## Macros\u00a7\u27e822\u27e9\n\nforward_poll\u27e823\u27e9\n    An implementation of `crate::Service::poll`\u27e824\u27e9 that forwards poll call to a field.\n\nforward_ready\u27e825\u27e9\n    An implementation of `crate::Service::ready`\u27e826\u27e9 that forwards readiness checks to a field.\n\nforward_shutdown\u27e827\u27e9\n    An implementation of `crate::Service::shutdown`\u27e828\u27e9 that forwards shutdown checks to a field.\n## Structs\u00a7\u27e829\u27e9\n\nPipeline\u27e830\u27e9\n    Container for a service.\n\nServiceCtx\u27e831\u27e9\n\n## Traits\u00a7\u27e832\u27e9\n\nIntoService\u27e833\u27e9\n    Trait for types that can be converted to a `Service`\n\nIntoServiceFactory\u27e834\u27e9\n    Trait for types that can be converted to a `ServiceFactory`\n\nMiddleware\u27e835\u27e9\n    The `Middleware` trait defines the interface of a service factory that wraps inner service during construction.\n\nService\u27e836\u27e9\n    An asynchronous function of `Request` to a `Response`.\n\nServiceFactory\u27e837\u27e9\n    Factory for creating `Service`s.\n## Functions\u00a7\u27e838\u27e9\n\nchain\u27e839\u27e9\n    Constructs new chain with one service.\n\nchain_factory\u27e840\u27e9\n    Constructs new chain factory with one service factory.\n\nfn_service\u27e841\u27e9\n    Create `ServiceFactory` for function that can act as a `Service`\n## Attribute Macros\u00a7\u27e842\u27e9\n\nmain\u27e843\u27e9\n    Marks async function to be executed by ntex system.\n\ntest\u27e844\u27e9\n    Marks async test function to be executed by ntex runtime.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ntex/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ntex/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ntex/latest/src/ntex/lib.rs.html#1-140: Source\n\u27e84\u27e9 https://docs.rs/ntex/latest/ntex/#package-feature: \u00a7\n\u27e85\u27e9 https://docs.rs/ntex/latest/ntex/#modules: \u00a7\n\u27e86\u27e9 https://docs.rs/ntex/latest/ntex/channel/index.html: mod ntex::channel - channel\n\u27e87\u27e9 https://docs.rs/ntex/latest/ntex/codec/index.html: mod ntex::codec - codec\n\u27e88\u27e9 https://docs.rs/ntex/latest/ntex/connect/index.html: mod ntex::connect - connect\n\u27e89\u27e9 https://docs.rs/ntex/latest/ntex/http/index.html: mod ntex::http - http\n\u27e810\u27e9 https://docs.rs/ntex/latest/ntex/io/index.html: mod ntex::io - io\n\u27e811\u27e9 https://docs.rs/ntex/latest/ntex/router/index.html: mod ntex::router - router\n\u27e812\u27e9 https://docs.rs/ntex/latest/ntex/rt/index.html: mod ntex::rt - rt\n\u27e813\u27e9 https://docs.rs/ntex/latest/ntex/server/index.html: mod ntex::server - server\n\u27e814\u27e9 https://docs.rs/ntex/latest/ntex/service/index.html: mod ntex::service - service\n\u27e815\u27e9 https://docs.rs/ntex/latest/ntex/task/index.html: mod ntex::task - task\n\u27e816\u27e9 https://docs.rs/ntex/latest/ntex/testing/index.html: mod ntex::testing - testing\n\u27e817\u27e9 https://docs.rs/ntex/latest/ntex/time/index.html: mod ntex::time - time\n\u27e818\u27e9 https://docs.rs/ntex/latest/ntex/tls/index.html: mod ntex::tls - tls\n\u27e819\u27e9 https://docs.rs/ntex/latest/ntex/util/index.html: mod ntex::util - util\n\u27e820\u27e9 https://docs.rs/ntex/latest/ntex/web/index.html: mod ntex::web - web\n\u27e821\u27e9 https://docs.rs/ntex/latest/ntex/ws/index.html: mod ntex::ws - ws\n\u27e822\u27e9 https://docs.rs/ntex/latest/ntex/#macros: \u00a7\n\u27e823\u27e9 https://docs.rs/ntex/latest/ntex/macro.forward_poll.html: macro ntex::forward_poll - forward_poll\n\u27e824\u27e9 https://docs.rs/ntex/latest/ntex/trait.Service.html#method.poll: method ntex::Service::poll - `crate::Service::poll`\n\u27e825\u27e9 https://docs.rs/ntex/latest/ntex/macro.forward_ready.html: macro ntex::forward_ready - forward_ready\n\u27e826\u27e9 https://docs.rs/ntex/latest/ntex/trait.Service.html#method.ready: method ntex::Service::ready - `crate::Service::ready`\n\u27e827\u27e9 https://docs.rs/ntex/latest/ntex/macro.forward_shutdown.html: macro ntex::forward_shutdown - forward_shutdown\n\u27e828\u27e9 https://docs.rs/ntex/latest/ntex/trait.Service.html#method.shutdown: method ntex::Service::shutdown - `crate::Service::shutdown`\n\u27e829\u27e9 https://docs.rs/ntex/latest/ntex/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/ntex/latest/ntex/struct.Pipeline.html: struct ntex::Pipeline - Pipeline\n\u27e831\u27e9 https://docs.rs/ntex/latest/ntex/struct.ServiceCtx.html: struct ntex::ServiceCtx - ServiceCtx\n\u27e832\u27e9 https://docs.rs/ntex/latest/ntex/#traits: \u00a7\n\u27e833\u27e9 https://docs.rs/ntex/latest/ntex/trait.IntoService.html: trait ntex::IntoService - IntoService\n\u27e834\u27e9 https://docs.rs/ntex/latest/ntex/trait.IntoServiceFactory.html: trait ntex::IntoServiceFactory - IntoServiceFactory\n\u27e835\u27e9 https://docs.rs/ntex/latest/ntex/trait.Middleware.html: trait ntex::Middleware - Middleware\n\u27e836\u27e9 https://docs.rs/ntex/latest/ntex/trait.Service.html: trait ntex::Service - Service\n\u27e837\u27e9 https://docs.rs/ntex/latest/ntex/trait.ServiceFactory.html: trait ntex::ServiceFactory - ServiceFactory\n\u27e838\u27e9 https://docs.rs/ntex/latest/ntex/#functions: \u00a7\n\u27e839\u27e9 https://docs.rs/ntex/latest/ntex/fn.chain.html: fn ntex::chain - chain\n\u27e840\u27e9 https://docs.rs/ntex/latest/ntex/fn.chain_factory.html: fn ntex::chain_factory - chain_factory\n\u27e841\u27e9 https://docs.rs/ntex/latest/ntex/fn.fn_service.html: fn ntex::fn_service - fn_service\n\u27e842\u27e9 https://docs.rs/ntex/latest/ntex/#attributes: \u00a7\n\u27e843\u27e9 https://docs.rs/ntex/latest/ntex/attr.main.html: attr ntex::main - main\n\u27e844\u27e9 https://docs.rs/ntex/latest/ntex/attr.test.html: attr ntex::test - test\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `ntex` crate is a framework for building composable network services in Rust, offering modules for HTTP, WebSocket, TLS, and TCP server support. It includes utilities for encoding/decoding frames, resource routing, IO streaming, and task synchronization, along with a web framework and testing tools. Key features include SSL support via `openssl` or `rustls`, HTTP compression, cookie handling, and a runtime that operates on the current thread.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: SSL Support  \n\u2705 Factual: The `ntex` crate provides SSL support through two optional features: `openssl` and `rustls`, allowing developers to choose between these libraries for secure communication.  \n\u274c Counterfactual: The `ntex` crate only supports SSL through the `openssl` crate, with no option to use `rustls`.  \n\n---\n\n### Pair 2: HTTP Compression  \n\u2705 Factual: The `compress` feature in `ntex` enables HTTP compression support, making it suitable for optimizing web applications by reducing payload sizes.  \n\u274c Counterfactual: The `compress` feature in `ntex` is enabled by default and cannot be disabled, forcing all HTTP traffic to use compression.  \n\n---\n\n### Pair 3: Runtime Implementation  \n\u2705 Factual: The `rt` module in `ntex` provides a runtime implementation that runs everything on the current thread, making it lightweight and suitable for single-threaded environments.  \n\u274c Counterfactual: The `rt` module in `ntex` is designed for multi-threaded environments and automatically spawns threads for parallel execution.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}