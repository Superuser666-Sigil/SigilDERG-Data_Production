{
    "name": "ecdsa",
    "version": "0.17.0-rc.3",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/ecdsa/latest/ecdsa/all.html \"show sidebar\")\n# Crate ecdsaCopy item path\n[Settings](https://docs.rs/ecdsa/latest/settings.html)\n[Help](https://docs.rs/ecdsa/latest/help.html)\nSummary[Source](https://docs.rs/ecdsa/latest/src/ecdsa/lib.rs.html#1-709)\nExpand description\n## [\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#rustcrypto-ecdsa)[RustCrypto](https://github.com/RustCrypto): ECDSA\n[![crate](https://buildstats.info/crate/ecdsa)](https://crates.io/crates/ecdsa) [![Docs](https://docs.rs/ecdsa/badge.svg)](https://docs.rs/ecdsa/) [![Build Status](https://github.com/RustCrypto/signatures/actions/workflows/ecdsa.yml/badge.svg)](https://github.com/RustCrypto/signatures/actions/workflows/ecdsa.yml) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![MSRV](https://img.shields.io/badge/rustc-1.65+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260048-signatures)\n[Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) as specified in [FIPS 186-4](https://csrc.nist.gov/publications/detail/fips/186/4/final) (Digital Signature Standard).\n[Documentation](https://docs.rs/ecdsa/)\n### [\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#about)About\nThis crate provides generic ECDSA support which can be used in the following ways:\n  * Generic implementation of ECDSA usable with the following crates: \n    * [`k256`](https://docs.rs/k256) (secp256k1)\n    * [`p256`](https://docs.rs/p256) (NIST P-256)\n    * [`p384`](https://docs.rs/p384) (NIST P-384)\n  * Other crates which provide their own complete implementations of ECDSA can also leverage the types from this crate to export ECDSA functionality in a generic, interoperable way by leveraging [`ecdsa::Signature`](https://docs.rs/ecdsa/latest/ecdsa/struct.Signature.html) with the [`signature::Signer`](https://docs.rs/signature/latest/signature/trait.Signer.html) and [`signature::Verifier`](https://docs.rs/signature/latest/signature/trait.Verifier.html) traits.\n\n\n### [\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#-security-warning)\u26a0\ufe0f Security Warning\nThe ECDSA implementation contained in this crate has never been independently audited for security!\nThis crate contains a generic implementation of ECDSA which must be instantiated using a separate crate providing a concrete implementation of arithmetic for a particular curve. It\u2019s possible timing variability can exist in concrete curve implementations, and thus this crate\u2019s security can only be properly assessed for a specific elliptic curve.\nUSE AT YOUR OWN RISK!\n### [\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#minimum-supported-rust-version)Minimum Supported Rust Version\nThis crate requires **Rust 1.65** at a minimum.\nWe may change the MSRV in the future, but it will be accompanied by a minor version bump.\n### [\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#license)License\nAll crates licensed under either of\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### [\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#serde-support)`serde` support\nWhen the `serde` feature of this crate is enabled, `Serialize` and `Deserialize` impls are provided for the [`Signature`](https://docs.rs/ecdsa/latest/ecdsa/struct.Signature.html \"struct ecdsa::Signature\") and [`VerifyingKey`](https://docs.rs/ecdsa/latest/ecdsa/struct.VerifyingKey.html \"struct ecdsa::VerifyingKey\") types.\nPlease see type-specific documentation for more information.\n### [\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#interop)Interop\nAny crates which provide an implementation of ECDSA for a particular elliptic curve can leverage the types from this crate, along with the [`k256`](https://docs.rs/k256), [`p256`](https://docs.rs/p256), and/or [`p384`](https://docs.rs/p384) crates to expose ECDSA functionality in a generic, interoperable way by leveraging the [`Signature`](https://docs.rs/ecdsa/latest/ecdsa/struct.Signature.html \"struct ecdsa::Signature\") type with in conjunction with the [`signature::Signer`](https://docs.rs/signature/latest/signature/trait.Signer.html) and [`signature::Verifier`](https://docs.rs/signature/latest/signature/trait.Verifier.html) traits.\nFor example, the [`ring-compat`](https://docs.rs/ring-compat) crate implements the [`signature::Signer`](https://docs.rs/signature/latest/signature/trait.Signer.html) and [`signature::Verifier`](https://docs.rs/signature/latest/signature/trait.Verifier.html) traits in conjunction with the [`p256::ecdsa::Signature`](https://docs.rs/p256/latest/p256/ecdsa/type.Signature.html) and [`p384::ecdsa::Signature`](https://docs.rs/p384/latest/p384/ecdsa/type.Signature.html) types to wrap the ECDSA implementations from [_ring_](https://docs.rs/ring) in a generic, interoperable API.\n## Re-exports[\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#reexports)\n\n`pub use elliptic_curve[](https://docs.rs/elliptic-curve/0.13.8/x86_64-unknown-linux-gnu/elliptic_curve/index.html \"mod elliptic_curve\");`\n\n\n`pub use signature[](https://docs.rs/signature/2.2.0/x86_64-unknown-linux-gnu/signature/index.html \"mod signature\");`\n\n## Modules[\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#modules)\n\n[der](https://docs.rs/ecdsa/latest/ecdsa/der/index.html \"mod ecdsa::der\")`der`\n    Support for ASN.1 DER-encoded ECDSA signatures as specified in [RFC5912 Appendix A](https://www.rfc-editor.org/rfc/rfc5912#appendix-A).\n\n[dev](https://docs.rs/ecdsa/latest/ecdsa/dev/index.html \"mod ecdsa::dev\")`dev`\n    Development-related functionality.\n\n[hazmat](https://docs.rs/ecdsa/latest/ecdsa/hazmat/index.html \"mod ecdsa::hazmat\")`hazmat`\n    Low-level ECDSA primitives.\n## Macros[\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#macros)\n\n[new_signing_test](https://docs.rs/ecdsa/latest/ecdsa/macro.new_signing_test.html \"macro ecdsa::new_signing_test\")`dev`\n    Define ECDSA signing test.\n\n[new_verification_test](https://docs.rs/ecdsa/latest/ecdsa/macro.new_verification_test.html \"macro ecdsa::new_verification_test\")`dev`\n    Define ECDSA verification test.\n\n[new_wycheproof_test](https://docs.rs/ecdsa/latest/ecdsa/macro.new_wycheproof_test.html \"macro ecdsa::new_wycheproof_test\")`dev`\n    Define a Wycheproof verification test.\n## Structs[\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#structs)\n\n[Error](https://docs.rs/ecdsa/latest/ecdsa/struct.Error.html \"struct ecdsa::Error\")\n    Signature errors.\n\n[NormalizedSignature](https://docs.rs/ecdsa/latest/ecdsa/struct.NormalizedSignature.html \"struct ecdsa::NormalizedSignature\")\n    ECDSA signature with low-S normalization applied.\n\n[RecoveryId](https://docs.rs/ecdsa/latest/ecdsa/struct.RecoveryId.html \"struct ecdsa::RecoveryId\")\n    Recovery IDs, a.k.a. \u201crecid\u201d.\n\n[Signature](https://docs.rs/ecdsa/latest/ecdsa/struct.Signature.html \"struct ecdsa::Signature\")\n    ECDSA signature (fixed-size). Generic over elliptic curve types.\n\n[SignatureWithOid](https://docs.rs/ecdsa/latest/ecdsa/struct.SignatureWithOid.html \"struct ecdsa::SignatureWithOid\")`digest`\n    An extended [`Signature`](https://docs.rs/ecdsa/latest/ecdsa/struct.Signature.html \"struct ecdsa::Signature\") type which is parameterized by an `ObjectIdentifier` which identifies the ECDSA variant used by a particular signature.\n\n[SigningKey](https://docs.rs/ecdsa/latest/ecdsa/struct.SigningKey.html \"struct ecdsa::SigningKey\")`signing`\n    ECDSA secret key used for signing. Generic over prime order elliptic curves (e.g. NIST P-curves)\n\n[VerifyingKey](https://docs.rs/ecdsa/latest/ecdsa/struct.VerifyingKey.html \"struct ecdsa::VerifyingKey\")`verifying`\n    ECDSA public key used for verifying signatures. Generic over prime order elliptic curves (e.g. NIST P-curves)\n## Constants[\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#constants)\n\n[ECDSA_SHA224_OID](https://docs.rs/ecdsa/latest/ecdsa/constant.ECDSA_SHA224_OID.html \"constant ecdsa::ECDSA_SHA224_OID\")`digest`\n    OID for ECDSA with SHA-224 digests.\n\n[ECDSA_SHA256_OID](https://docs.rs/ecdsa/latest/ecdsa/constant.ECDSA_SHA256_OID.html \"constant ecdsa::ECDSA_SHA256_OID\")`digest`\n    OID for ECDSA with SHA-256 digests.\n\n[ECDSA_SHA384_OID](https://docs.rs/ecdsa/latest/ecdsa/constant.ECDSA_SHA384_OID.html \"constant ecdsa::ECDSA_SHA384_OID\")`digest`\n    OID for ECDSA with SHA-384 digests.\n\n[ECDSA_SHA512_OID](https://docs.rs/ecdsa/latest/ecdsa/constant.ECDSA_SHA512_OID.html \"constant ecdsa::ECDSA_SHA512_OID\")`digest`\n    OID for ECDSA with SHA-512 digests.\n## Traits[\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#traits)\n\n[PrimeCurve](https://docs.rs/ecdsa/latest/ecdsa/trait.PrimeCurve.html \"trait ecdsa::PrimeCurve\")\n    Marker trait for elliptic curves with prime order.\n\n[SignatureEncoding](https://docs.rs/ecdsa/latest/ecdsa/trait.SignatureEncoding.html \"trait ecdsa::SignatureEncoding\")\n    Support for decoding/encoding signatures as bytes.\n## Type Aliases[\u00a7](https://docs.rs/ecdsa/latest/ecdsa/#types)\n\n[EncodedPoint](https://docs.rs/ecdsa/latest/ecdsa/type.EncodedPoint.html \"type ecdsa::EncodedPoint\")\n    Encoded elliptic curve point sized appropriately for a given curve.\n\n[Result](https://docs.rs/ecdsa/latest/ecdsa/type.Result.html \"type ecdsa::Result\")\n    Result type.\n\n[SignatureBytes](https://docs.rs/ecdsa/latest/ecdsa/type.SignatureBytes.html \"type ecdsa::SignatureBytes\")\n    Fixed-size byte array containing an ECDSA signature\n\n[SignatureSize](https://docs.rs/ecdsa/latest/ecdsa/type.SignatureSize.html \"type ecdsa::SignatureSize\")\n    Size of a fixed sized signature for the given elliptic curve.\n",
        "markdown_with_citations": "[](https://docs.rs/ecdsa/latest/ecdsa/all.html \"show sidebar\")\n# Crate ecdsaCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto\u27e85\u27e9: ECDSA\n![crate\u27e86\u27e9](https://crates.io/crates/ecdsa) ![Docs\u27e87\u27e9](https://docs.rs/ecdsa/) ![Build Status\u27e88\u27e9](https://github.com/RustCrypto/signatures/actions/workflows/ecdsa.yml) ![Apache2/MIT licensed\u27e89\u27e9] ![MSRV\u27e810\u27e9] ![Project Chat\u27e811\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260048-signatures)\nElliptic Curve Digital Signature Algorithm (ECDSA)\u27e812\u27e9 as specified in FIPS 186-4\u27e813\u27e9 (Digital Signature Standard).\nDocumentation\u27e814\u27e9\n### \u00a7\u27e815\u27e9About\nThis crate provides generic ECDSA support which can be used in the following ways:\n  * Generic implementation of ECDSA usable with the following crates: \n    * `k256`\u27e816\u27e9 (secp256k1)\n    * `p256`\u27e817\u27e9 (NIST P-256)\n    * `p384`\u27e818\u27e9 (NIST P-384)\n  * Other crates which provide their own complete implementations of ECDSA can also leverage the types from this crate to export ECDSA functionality in a generic, interoperable way by leveraging `ecdsa::Signature`\u27e819\u27e9 with the `signature::Signer`\u27e820\u27e9 and `signature::Verifier`\u27e821\u27e9 traits.\n\n\n### \u00a7\u27e822\u27e9\u26a0\ufe0f Security Warning\nThe ECDSA implementation contained in this crate has never been independently audited for security!\nThis crate contains a generic implementation of ECDSA which must be instantiated using a separate crate providing a concrete implementation of arithmetic for a particular curve. It\u2019s possible timing variability can exist in concrete curve implementations, and thus this crate\u2019s security can only be properly assessed for a specific elliptic curve.\nUSE AT YOUR OWN RISK!\n### \u00a7\u27e823\u27e9Minimum Supported Rust Version\nThis crate requires **Rust 1.65** at a minimum.\nWe may change the MSRV in the future, but it will be accompanied by a minor version bump.\n### \u00a7\u27e824\u27e9License\nAll crates licensed under either of\n  * Apache License, Version 2.0\u27e825\u27e9\n  * MIT license\u27e826\u27e9\n\n\nat your option.\n#### \u00a7\u27e827\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### \u00a7\u27e828\u27e9`serde` support\nWhen the `serde` feature of this crate is enabled, `Serialize` and `Deserialize` impls are provided for the `Signature`\u27e819\u27e9 and `VerifyingKey`\u27e829\u27e9 types.\nPlease see type-specific documentation for more information.\n### \u00a7\u27e830\u27e9Interop\nAny crates which provide an implementation of ECDSA for a particular elliptic curve can leverage the types from this crate, along with the `k256`\u27e816\u27e9, `p256`\u27e817\u27e9, and/or `p384`\u27e818\u27e9 crates to expose ECDSA functionality in a generic, interoperable way by leveraging the `Signature`\u27e819\u27e9 type with in conjunction with the `signature::Signer`\u27e820\u27e9 and `signature::Verifier`\u27e821\u27e9 traits.\nFor example, the `ring-compat`\u27e831\u27e9 crate implements the `signature::Signer`\u27e820\u27e9 and `signature::Verifier`\u27e821\u27e9 traits in conjunction with the `p256::ecdsa::Signature`\u27e832\u27e9 and `p384::ecdsa::Signature`\u27e833\u27e9 types to wrap the ECDSA implementations from _ring_\u27e834\u27e9 in a generic, interoperable API.\n## Re-exports\u00a7\u27e835\u27e9\n\n`pub use elliptic_curve[](https://docs.rs/elliptic-curve/0.13.8/x86_64-unknown-linux-gnu/elliptic_curve/index.html \"mod elliptic_curve\");`\n\n\n`pub use signature[](https://docs.rs/signature/2.2.0/x86_64-unknown-linux-gnu/signature/index.html \"mod signature\");`\n\n## Modules\u00a7\u27e836\u27e9\n\nder\u27e837\u27e9`der`\n    Support for ASN.1 DER-encoded ECDSA signatures as specified in RFC5912 Appendix A\u27e838\u27e9.\n\ndev\u27e839\u27e9`dev`\n    Development-related functionality.\n\nhazmat\u27e840\u27e9`hazmat`\n    Low-level ECDSA primitives.\n## Macros\u00a7\u27e841\u27e9\n\nnew_signing_test\u27e842\u27e9`dev`\n    Define ECDSA signing test.\n\nnew_verification_test\u27e843\u27e9`dev`\n    Define ECDSA verification test.\n\nnew_wycheproof_test\u27e844\u27e9`dev`\n    Define a Wycheproof verification test.\n## Structs\u00a7\u27e845\u27e9\n\nError\u27e846\u27e9\n    Signature errors.\n\nNormalizedSignature\u27e847\u27e9\n    ECDSA signature with low-S normalization applied.\n\nRecoveryId\u27e848\u27e9\n    Recovery IDs, a.k.a. \u201crecid\u201d.\n\nSignature\u27e819\u27e9\n    ECDSA signature (fixed-size). Generic over elliptic curve types.\n\nSignatureWithOid\u27e849\u27e9`digest`\n    An extended `Signature`\u27e819\u27e9 type which is parameterized by an `ObjectIdentifier` which identifies the ECDSA variant used by a particular signature.\n\nSigningKey\u27e850\u27e9`signing`\n    ECDSA secret key used for signing. Generic over prime order elliptic curves (e.g. NIST P-curves)\n\nVerifyingKey\u27e829\u27e9`verifying`\n    ECDSA public key used for verifying signatures. Generic over prime order elliptic curves (e.g. NIST P-curves)\n## Constants\u00a7\u27e851\u27e9\n\nECDSA_SHA224_OID\u27e852\u27e9`digest`\n    OID for ECDSA with SHA-224 digests.\n\nECDSA_SHA256_OID\u27e853\u27e9`digest`\n    OID for ECDSA with SHA-256 digests.\n\nECDSA_SHA384_OID\u27e854\u27e9`digest`\n    OID for ECDSA with SHA-384 digests.\n\nECDSA_SHA512_OID\u27e855\u27e9`digest`\n    OID for ECDSA with SHA-512 digests.\n## Traits\u00a7\u27e856\u27e9\n\nPrimeCurve\u27e857\u27e9\n    Marker trait for elliptic curves with prime order.\n\nSignatureEncoding\u27e858\u27e9\n    Support for decoding/encoding signatures as bytes.\n## Type Aliases\u00a7\u27e859\u27e9\n\nEncodedPoint\u27e860\u27e9\n    Encoded elliptic curve point sized appropriately for a given curve.\n\nResult\u27e861\u27e9\n    Result type.\n\nSignatureBytes\u27e862\u27e9\n    Fixed-size byte array containing an ECDSA signature\n\nSignatureSize\u27e863\u27e9\n    Size of a fixed sized signature for the given elliptic curve.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ecdsa/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ecdsa/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ecdsa/latest/src/ecdsa/lib.rs.html#1-709: Source\n\u27e84\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#rustcrypto-ecdsa: \u00a7\n\u27e85\u27e9 https://github.com/RustCrypto: RustCrypto\n\u27e86\u27e9 https://buildstats.info/crate/ecdsa: ![crate\n\u27e87\u27e9 https://docs.rs/ecdsa/badge.svg: ![Docs\n\u27e88\u27e9 https://github.com/RustCrypto/signatures/actions/workflows/ecdsa.yml/badge.svg: ![Build Status\n\u27e89\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e810\u27e9 https://img.shields.io/badge/rustc-1.65+-blue.svg: MSRV\n\u27e811\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e812\u27e9 https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm: Elliptic Curve Digital Signature Algorithm (ECDSA)\n\u27e813\u27e9 https://csrc.nist.gov/publications/detail/fips/186/4/final: FIPS 186-4\n\u27e814\u27e9 https://docs.rs/ecdsa/: Documentation\n\u27e815\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#about: \u00a7\n\u27e816\u27e9 https://docs.rs/k256: `k256`\n\u27e817\u27e9 https://docs.rs/p256: `p256`\n\u27e818\u27e9 https://docs.rs/p384: `p384`\n\u27e819\u27e9 https://docs.rs/ecdsa/latest/ecdsa/struct.Signature.html: `ecdsa::Signature`\n\u27e820\u27e9 https://docs.rs/signature/latest/signature/trait.Signer.html: `signature::Signer`\n\u27e821\u27e9 https://docs.rs/signature/latest/signature/trait.Verifier.html: `signature::Verifier`\n\u27e822\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#-security-warning: \u00a7\n\u27e823\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#minimum-supported-rust-version: \u00a7\n\u27e824\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#license: \u00a7\n\u27e825\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e826\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e827\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#contribution: \u00a7\n\u27e828\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#serde-support: \u00a7\n\u27e829\u27e9 https://docs.rs/ecdsa/latest/ecdsa/struct.VerifyingKey.html: struct ecdsa::VerifyingKey - `VerifyingKey`\n\u27e830\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#interop: \u00a7\n\u27e831\u27e9 https://docs.rs/ring-compat: `ring-compat`\n\u27e832\u27e9 https://docs.rs/p256/latest/p256/ecdsa/type.Signature.html: `p256::ecdsa::Signature`\n\u27e833\u27e9 https://docs.rs/p384/latest/p384/ecdsa/type.Signature.html: `p384::ecdsa::Signature`\n\u27e834\u27e9 https://docs.rs/ring: _ring_\n\u27e835\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#reexports: \u00a7\n\u27e836\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#modules: \u00a7\n\u27e837\u27e9 https://docs.rs/ecdsa/latest/ecdsa/der/index.html: mod ecdsa::der - der\n\u27e838\u27e9 https://www.rfc-editor.org/rfc/rfc5912#appendix-A: RFC5912 Appendix A\n\u27e839\u27e9 https://docs.rs/ecdsa/latest/ecdsa/dev/index.html: mod ecdsa::dev - dev\n\u27e840\u27e9 https://docs.rs/ecdsa/latest/ecdsa/hazmat/index.html: mod ecdsa::hazmat - hazmat\n\u27e841\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#macros: \u00a7\n\u27e842\u27e9 https://docs.rs/ecdsa/latest/ecdsa/macro.new_signing_test.html: macro ecdsa::new_signing_test - new_signing_test\n\u27e843\u27e9 https://docs.rs/ecdsa/latest/ecdsa/macro.new_verification_test.html: macro ecdsa::new_verification_test - new_verification_test\n\u27e844\u27e9 https://docs.rs/ecdsa/latest/ecdsa/macro.new_wycheproof_test.html: macro ecdsa::new_wycheproof_test - new_wycheproof_test\n\u27e845\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#structs: \u00a7\n\u27e846\u27e9 https://docs.rs/ecdsa/latest/ecdsa/struct.Error.html: struct ecdsa::Error - Error\n\u27e847\u27e9 https://docs.rs/ecdsa/latest/ecdsa/struct.NormalizedSignature.html: struct ecdsa::NormalizedSignature - NormalizedSignature\n\u27e848\u27e9 https://docs.rs/ecdsa/latest/ecdsa/struct.RecoveryId.html: struct ecdsa::RecoveryId - RecoveryId\n\u27e849\u27e9 https://docs.rs/ecdsa/latest/ecdsa/struct.SignatureWithOid.html: struct ecdsa::SignatureWithOid - SignatureWithOid\n\u27e850\u27e9 https://docs.rs/ecdsa/latest/ecdsa/struct.SigningKey.html: struct ecdsa::SigningKey - SigningKey\n\u27e851\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#constants: \u00a7\n\u27e852\u27e9 https://docs.rs/ecdsa/latest/ecdsa/constant.ECDSA_SHA224_OID.html: constant ecdsa::ECDSA_SHA224_OID - ECDSA_SHA224_OID\n\u27e853\u27e9 https://docs.rs/ecdsa/latest/ecdsa/constant.ECDSA_SHA256_OID.html: constant ecdsa::ECDSA_SHA256_OID - ECDSA_SHA256_OID\n\u27e854\u27e9 https://docs.rs/ecdsa/latest/ecdsa/constant.ECDSA_SHA384_OID.html: constant ecdsa::ECDSA_SHA384_OID - ECDSA_SHA384_OID\n\u27e855\u27e9 https://docs.rs/ecdsa/latest/ecdsa/constant.ECDSA_SHA512_OID.html: constant ecdsa::ECDSA_SHA512_OID - ECDSA_SHA512_OID\n\u27e856\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#traits: \u00a7\n\u27e857\u27e9 https://docs.rs/ecdsa/latest/ecdsa/trait.PrimeCurve.html: trait ecdsa::PrimeCurve - PrimeCurve\n\u27e858\u27e9 https://docs.rs/ecdsa/latest/ecdsa/trait.SignatureEncoding.html: trait ecdsa::SignatureEncoding - SignatureEncoding\n\u27e859\u27e9 https://docs.rs/ecdsa/latest/ecdsa/#types: \u00a7\n\u27e860\u27e9 https://docs.rs/ecdsa/latest/ecdsa/type.EncodedPoint.html: type ecdsa::EncodedPoint - EncodedPoint\n\u27e861\u27e9 https://docs.rs/ecdsa/latest/ecdsa/type.Result.html: type ecdsa::Result - Result\n\u27e862\u27e9 https://docs.rs/ecdsa/latest/ecdsa/type.SignatureBytes.html: type ecdsa::SignatureBytes - SignatureBytes\n\u27e863\u27e9 https://docs.rs/ecdsa/latest/ecdsa/type.SignatureSize.html: type ecdsa::SignatureSize - SignatureSize\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `ecdsa` crate provides a generic implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) as specified in FIPS 186-4, supporting interoperability with elliptic curve crates like `k256`, `p256`, and `p384`. It offers types for signing and verifying keys, fixed-size signatures, and low-level primitives, with optional `serde` support for serialization. Note that the crate's security depends on the specific curve implementation and has not been independently audited.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Security and Auditing  \n\u2705 Factual: The `ecdsa` crate's implementation has never been independently audited for security, and its safety depends on the specific elliptic curve implementation used.  \n\u274c Counterfactual: The `ecdsa` crate has undergone extensive independent security audits and guarantees protection against timing attacks across all elliptic curve implementations.  \n\n---\n\n### Pair 2: Supported Elliptic Curves  \n\u2705 Factual: The `ecdsa` crate provides generic ECDSA support and is compatible with elliptic curve implementations such as `k256` (secp256k1), `p256` (NIST P-256), and `p384` (NIST P-384).  \n\u274c Counterfactual: The `ecdsa` crate includes built-in implementations of elliptic curve arithmetic for `k256`, `p256`, and `p384` without relying on external crates.  \n\n---\n\n### Pair 3: Serialization Support  \n\u2705 Factual: When the `serde` feature is enabled, the `ecdsa` crate provides `Serialize` and `Deserialize` implementations for the `Signature` and `VerifyingKey` types.  \n\u274c Counterfactual: The `ecdsa` crate always provides `Serialize` and `Deserialize` implementations for its types, regardless of whether the `serde` feature is enabled.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}