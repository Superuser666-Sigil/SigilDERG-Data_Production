{
    "name": "iron",
    "version": "0.6.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/iron/latest/iron/all.html \"show sidebar\")\n# Crate ironCopy item path\n[Settings](https://docs.rs/iron/latest/settings.html)\n[Help](https://docs.rs/iron/latest/help.html)\nSummary[Source](https://docs.rs/iron/latest/src/iron/lib.rs.html#1-172)\nExpand description\nThe main crate for Iron.\n### [\u00a7](https://docs.rs/iron/latest/iron/#overview)Overview\nIron is a high level web framework built in and for Rust, built on [hyper](https://github.com/hyperium/hyper). Iron is designed to take advantage of Rust\u2019s greatest features - its excellent type system and principled approach to ownership in both single threaded and multi threaded contexts.\nIron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework.\n### [\u00a7](https://docs.rs/iron/latest/iron/#hello-world)Hello World\n```\nextern crate iron;\nuse iron::prelude::*;\nuse iron::status;\nfn main() {\n  Iron::new(|_: &mut Request| {\n    Ok(Response::with((status::Ok, \"Hello World!\")))\n  }).http(\"localhost:3000\").unwrap();\n}\n```\n\n### [\u00a7](https://docs.rs/iron/latest/iron/#design-philosophy)Design Philosophy\nIron is meant to be as extensible and pluggable as possible; Iron\u2019s core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers.\nMiddleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems.\nModifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection.\nMiddleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging.\nIron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron.\n## Re-exports[\u00a7](https://docs.rs/iron/latest/iron/#reexports)\n\n`pub use request::Request[](https://docs.rs/iron/latest/iron/request/struct.Request.html \"struct iron::request::Request\");`\n\n\n`pub use request::Url[](https://docs.rs/iron/latest/iron/request/struct.Url.html \"struct iron::request::Url\");`\n\n\n`pub use response::Response[](https://docs.rs/iron/latest/iron/response/struct.Response.html \"struct iron::response::Response\");`\n\n\n`pub use middleware::BeforeMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.BeforeMiddleware.html \"trait iron::middleware::BeforeMiddleware\");`\n\n\n`pub use middleware::AfterMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AfterMiddleware.html \"trait iron::middleware::AfterMiddleware\");`\n\n\n`pub use middleware::AroundMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AroundMiddleware.html \"trait iron::middleware::AroundMiddleware\");`\n\n\n`pub use middleware::Handler[](https://docs.rs/iron/latest/iron/middleware/trait.Handler.html \"trait iron::middleware::Handler\");`\n\n\n`pub use middleware::Chain[](https://docs.rs/iron/latest/iron/middleware/struct.Chain.html \"struct iron::middleware::Chain\");`\n\n\n`pub use error::IronError[](https://docs.rs/iron/latest/iron/error/struct.IronError.html \"struct iron::error::IronError\");`\n\n## Modules[\u00a7](https://docs.rs/iron/latest/iron/#modules)\n\n[error](https://docs.rs/iron/latest/iron/error/index.html \"mod iron::error\")\n    Iron\u2019s error type and associated utilities.\n\n[headers](https://docs.rs/iron/latest/iron/headers/index.html \"mod iron::headers\")\n    Headers container, and common header fields.\n\n[method](https://docs.rs/iron/latest/iron/method/index.html \"mod iron::method\")\n    HTTP Methods\n\n[middleware](https://docs.rs/iron/latest/iron/middleware/index.html \"mod iron::middleware\")\n    This module contains Iron\u2019s middleware and handler system, the fundamental building blocks for handling HTTP requests and generating responses.\n\n[mime](https://docs.rs/iron/latest/iron/mime/index.html \"mod iron::mime\")\n    Re-exporting the mime crate, for convenience.\n\n[modifier](https://docs.rs/iron/latest/iron/modifier/index.html \"mod iron::modifier\")\n    Re-exports from the Modifier crate.\n\n[modifiers](https://docs.rs/iron/latest/iron/modifiers/index.html \"mod iron::modifiers\")\n    This module defines a series of convenience modifiers for changing Responses.\n\n[prelude](https://docs.rs/iron/latest/iron/prelude/index.html \"mod iron::prelude\")\n    A module meant to be glob imported when using Iron.\n\n[request](https://docs.rs/iron/latest/iron/request/index.html \"mod iron::request\")\n    Iron\u2019s HTTP Request representation and associated methods.\n\n[response](https://docs.rs/iron/latest/iron/response/index.html \"mod iron::response\")\n    Iron\u2019s HTTP Response representation and associated methods.\n\n[status](https://docs.rs/iron/latest/iron/status/index.html \"mod iron::status\")\n    Status Codes\n\n[typemap](https://docs.rs/iron/latest/iron/typemap/index.html \"mod iron::typemap\")\n    Re-exports from the `TypeMap` crate.\n\n[url](https://docs.rs/iron/latest/iron/url/index.html \"mod iron::url\")\n    Re-exports from the url crate.\n## Macros[\u00a7](https://docs.rs/iron/latest/iron/#macros)\n\n[headers](https://docs.rs/iron/latest/iron/macro.headers.html \"macro iron::headers\")\n\n\n[iexpect](https://docs.rs/iron/latest/iron/macro.iexpect.html \"macro iron::iexpect\")\n    Unwrap the given `Option` or return a `Ok(Response::new())` with the given modifier. The default modifier is `status::BadRequest`.\n\n[itry](https://docs.rs/iron/latest/iron/macro.itry.html \"macro iron::itry\")\n    Like `try!()`, but wraps the error value in `IronError`. To be used in request handlers.\n## Structs[\u00a7](https://docs.rs/iron/latest/iron/#structs)\n\n[Headers](https://docs.rs/iron/latest/iron/struct.Headers.html \"struct iron::Headers\")\n    A map of header fields on requests and responses.\n\n[Iron](https://docs.rs/iron/latest/iron/struct.Iron.html \"struct iron::Iron\")\n    The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n\n[Listening](https://docs.rs/iron/latest/iron/struct.Listening.html \"struct iron::Listening\")\n    A listening server, which can later be closed.\n\n[Protocol](https://docs.rs/iron/latest/iron/struct.Protocol.html \"struct iron::Protocol\")\n    Protocol used to serve content.\n\n[Timeouts](https://docs.rs/iron/latest/iron/struct.Timeouts.html \"struct iron::Timeouts\")\n    A settings struct containing a set of timeouts which can be applied to a server.\n\n[TypeMap](https://docs.rs/iron/latest/iron/struct.TypeMap.html \"struct iron::TypeMap\")\n    A map keyed by types.\n## Traits[\u00a7](https://docs.rs/iron/latest/iron/#traits)\n\n[Error](https://docs.rs/iron/latest/iron/trait.Error.html \"trait iron::Error\")\n    `Error` is a trait representing the basic expectations for error values, i.e., values of type `E` in [`Result<T, E>`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\").\n\n[Plugin](https://docs.rs/iron/latest/iron/trait.Plugin.html \"trait iron::Plugin\")\n    An interface for plugins that cache values between calls.\n\n[Set](https://docs.rs/iron/latest/iron/trait.Set.html \"trait iron::Set\")\n    A trait providing the set and set_mut methods for all types.\n## Type Aliases[\u00a7](https://docs.rs/iron/latest/iron/#types)\n\n[IronResult](https://docs.rs/iron/latest/iron/type.IronResult.html \"type iron::IronResult\")\n    The Result alias used throughout Iron and in clients of Iron.\n",
        "markdown_with_citations": "[](https://docs.rs/iron/latest/iron/all.html \"show sidebar\")\n# Crate ironCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThe main crate for Iron.\n### \u00a7\u27e84\u27e9Overview\nIron is a high level web framework built in and for Rust, built on hyper\u27e85\u27e9. Iron is designed to take advantage of Rust\u2019s greatest features - its excellent type system and principled approach to ownership in both single threaded and multi threaded contexts.\nIron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework.\n### \u00a7\u27e86\u27e9Hello World\n```\nextern crate iron;\nuse iron::prelude::*;\nuse iron::status;\nfn main() {\n  Iron::new(|_: &mut Request| {\n    Ok(Response::with((status::Ok, \"Hello World!\")))\n  }).http(\"localhost:3000\").unwrap();\n}\n```\n\n### \u00a7\u27e87\u27e9Design Philosophy\nIron is meant to be as extensible and pluggable as possible; Iron\u2019s core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers.\nMiddleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems.\nModifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection.\nMiddleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging.\nIron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron.\n## Re-exports\u00a7\u27e88\u27e9\n\n`pub use request::Request[](https://docs.rs/iron/latest/iron/request/struct.Request.html \"struct iron::request::Request\");`\n\n\n`pub use request::Url[](https://docs.rs/iron/latest/iron/request/struct.Url.html \"struct iron::request::Url\");`\n\n\n`pub use response::Response[](https://docs.rs/iron/latest/iron/response/struct.Response.html \"struct iron::response::Response\");`\n\n\n`pub use middleware::BeforeMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.BeforeMiddleware.html \"trait iron::middleware::BeforeMiddleware\");`\n\n\n`pub use middleware::AfterMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AfterMiddleware.html \"trait iron::middleware::AfterMiddleware\");`\n\n\n`pub use middleware::AroundMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AroundMiddleware.html \"trait iron::middleware::AroundMiddleware\");`\n\n\n`pub use middleware::Handler[](https://docs.rs/iron/latest/iron/middleware/trait.Handler.html \"trait iron::middleware::Handler\");`\n\n\n`pub use middleware::Chain[](https://docs.rs/iron/latest/iron/middleware/struct.Chain.html \"struct iron::middleware::Chain\");`\n\n\n`pub use error::IronError[](https://docs.rs/iron/latest/iron/error/struct.IronError.html \"struct iron::error::IronError\");`\n\n## Modules\u00a7\u27e89\u27e9\n\nerror\u27e810\u27e9\n    Iron\u2019s error type and associated utilities.\n\nheaders\u27e811\u27e9\n    Headers container, and common header fields.\n\nmethod\u27e812\u27e9\n    HTTP Methods\n\nmiddleware\u27e813\u27e9\n    This module contains Iron\u2019s middleware and handler system, the fundamental building blocks for handling HTTP requests and generating responses.\n\nmime\u27e814\u27e9\n    Re-exporting the mime crate, for convenience.\n\nmodifier\u27e815\u27e9\n    Re-exports from the Modifier crate.\n\nmodifiers\u27e816\u27e9\n    This module defines a series of convenience modifiers for changing Responses.\n\nprelude\u27e817\u27e9\n    A module meant to be glob imported when using Iron.\n\nrequest\u27e818\u27e9\n    Iron\u2019s HTTP Request representation and associated methods.\n\nresponse\u27e819\u27e9\n    Iron\u2019s HTTP Response representation and associated methods.\n\nstatus\u27e820\u27e9\n    Status Codes\n\ntypemap\u27e821\u27e9\n    Re-exports from the `TypeMap` crate.\n\nurl\u27e822\u27e9\n    Re-exports from the url crate.\n## Macros\u00a7\u27e823\u27e9\n\nheaders\u27e824\u27e9\n\n\niexpect\u27e825\u27e9\n    Unwrap the given `Option` or return a `Ok(Response::new())` with the given modifier. The default modifier is `status::BadRequest`.\n\nitry\u27e826\u27e9\n    Like `try!()`, but wraps the error value in `IronError`. To be used in request handlers.\n## Structs\u00a7\u27e827\u27e9\n\nHeaders\u27e828\u27e9\n    A map of header fields on requests and responses.\n\nIron\u27e829\u27e9\n    The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n\nListening\u27e830\u27e9\n    A listening server, which can later be closed.\n\nProtocol\u27e831\u27e9\n    Protocol used to serve content.\n\nTimeouts\u27e832\u27e9\n    A settings struct containing a set of timeouts which can be applied to a server.\n\nTypeMap\u27e833\u27e9\n    A map keyed by types.\n## Traits\u00a7\u27e834\u27e9\n\nError\u27e835\u27e9\n    `Error` is a trait representing the basic expectations for error values, i.e., values of type `E` in `Result<T, E>`\u27e836\u27e9.\n\nPlugin\u27e837\u27e9\n    An interface for plugins that cache values between calls.\n\nSet\u27e838\u27e9\n    A trait providing the set and set_mut methods for all types.\n## Type Aliases\u00a7\u27e839\u27e9\n\nIronResult\u27e840\u27e9\n    The Result alias used throughout Iron and in clients of Iron.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/iron/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/iron/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/iron/latest/src/iron/lib.rs.html#1-172: Source\n\u27e84\u27e9 https://docs.rs/iron/latest/iron/#overview: \u00a7\n\u27e85\u27e9 https://github.com/hyperium/hyper: hyper\n\u27e86\u27e9 https://docs.rs/iron/latest/iron/#hello-world: \u00a7\n\u27e87\u27e9 https://docs.rs/iron/latest/iron/#design-philosophy: \u00a7\n\u27e88\u27e9 https://docs.rs/iron/latest/iron/#reexports: \u00a7\n\u27e89\u27e9 https://docs.rs/iron/latest/iron/#modules: \u00a7\n\u27e810\u27e9 https://docs.rs/iron/latest/iron/error/index.html: mod iron::error - error\n\u27e811\u27e9 https://docs.rs/iron/latest/iron/headers/index.html: mod iron::headers - headers\n\u27e812\u27e9 https://docs.rs/iron/latest/iron/method/index.html: mod iron::method - method\n\u27e813\u27e9 https://docs.rs/iron/latest/iron/middleware/index.html: mod iron::middleware - middleware\n\u27e814\u27e9 https://docs.rs/iron/latest/iron/mime/index.html: mod iron::mime - mime\n\u27e815\u27e9 https://docs.rs/iron/latest/iron/modifier/index.html: mod iron::modifier - modifier\n\u27e816\u27e9 https://docs.rs/iron/latest/iron/modifiers/index.html: mod iron::modifiers - modifiers\n\u27e817\u27e9 https://docs.rs/iron/latest/iron/prelude/index.html: mod iron::prelude - prelude\n\u27e818\u27e9 https://docs.rs/iron/latest/iron/request/index.html: mod iron::request - request\n\u27e819\u27e9 https://docs.rs/iron/latest/iron/response/index.html: mod iron::response - response\n\u27e820\u27e9 https://docs.rs/iron/latest/iron/status/index.html: mod iron::status - status\n\u27e821\u27e9 https://docs.rs/iron/latest/iron/typemap/index.html: mod iron::typemap - typemap\n\u27e822\u27e9 https://docs.rs/iron/latest/iron/url/index.html: mod iron::url - url\n\u27e823\u27e9 https://docs.rs/iron/latest/iron/#macros: \u00a7\n\u27e824\u27e9 https://docs.rs/iron/latest/iron/macro.headers.html: macro iron::headers - headers\n\u27e825\u27e9 https://docs.rs/iron/latest/iron/macro.iexpect.html: macro iron::iexpect - iexpect\n\u27e826\u27e9 https://docs.rs/iron/latest/iron/macro.itry.html: macro iron::itry - itry\n\u27e827\u27e9 https://docs.rs/iron/latest/iron/#structs: \u00a7\n\u27e828\u27e9 https://docs.rs/iron/latest/iron/struct.Headers.html: struct iron::Headers - Headers\n\u27e829\u27e9 https://docs.rs/iron/latest/iron/struct.Iron.html: struct iron::Iron - Iron\n\u27e830\u27e9 https://docs.rs/iron/latest/iron/struct.Listening.html: struct iron::Listening - Listening\n\u27e831\u27e9 https://docs.rs/iron/latest/iron/struct.Protocol.html: struct iron::Protocol - Protocol\n\u27e832\u27e9 https://docs.rs/iron/latest/iron/struct.Timeouts.html: struct iron::Timeouts - Timeouts\n\u27e833\u27e9 https://docs.rs/iron/latest/iron/struct.TypeMap.html: struct iron::TypeMap - TypeMap\n\u27e834\u27e9 https://docs.rs/iron/latest/iron/#traits: \u00a7\n\u27e835\u27e9 https://docs.rs/iron/latest/iron/trait.Error.html: trait iron::Error - Error\n\u27e836\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result<T, E>`\n\u27e837\u27e9 https://docs.rs/iron/latest/iron/trait.Plugin.html: trait iron::Plugin - Plugin\n\u27e838\u27e9 https://docs.rs/iron/latest/iron/trait.Set.html: trait iron::Set - Set\n\u27e839\u27e9 https://docs.rs/iron/latest/iron/#types: \u00a7\n\u27e840\u27e9 https://docs.rs/iron/latest/iron/type.IronResult.html: type iron::IronResult - IronResult\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `iron` crate is a high-level, extensible web framework for Rust, built on `hyper`, designed to leverage Rust's type system and ownership model for both single-threaded and multi-threaded contexts. It emphasizes modularity through middleware, plugins, and modifiers, allowing developers to customize request handling, routing, and response generation. Key features include scalability, ergonomic request/response manipulation, and support for concurrency without shared writes or locking.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 4.0,
    "factual_counterfactual": "### Pair 1: Extensibility and Middleware\n\u2705 **Factual:** Iron is designed to be extensible and pluggable, relying on middleware, plugins, and modifiers to add functionality instead of bundling features directly into the core framework.  \n\u274c **Counterfactual:** Iron includes a comprehensive set of built-in middleware for routing, authentication, and logging, eliminating the need for third-party extensions.  \n\n---\n\n### Pair 2: Concurrency and Scalability\n\u2705 **Factual:** Iron is highly concurrent and avoids bottlenecks by minimizing shared writes and locking, allowing it to scale horizontally across multiple machines or vertically with more threads on a single machine.  \n\u274c **Counterfactual:** Iron relies heavily on shared writes and locking mechanisms to manage concurrency, which limits its scalability in high-load environments.  \n\n---\n\n### Pair 3: HTTP Request Handling\n\u2705 **Factual:** Iron provides ergonomic tools like modifiers and plugins to manipulate HTTP requests and responses, enabling lazy evaluation and automatic caching for efficient handling.  \n\u274c **Counterfactual:** Iron requires direct manipulation of HTTP requests and responses without any abstraction layers, making it less ergonomic for developers compared to other frameworks.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}