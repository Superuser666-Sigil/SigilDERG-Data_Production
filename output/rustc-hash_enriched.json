{
    "name": "rustc-hash",
    "version": "2.1.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/rustc-hash/latest/rustc_hash/all.html \"show sidebar\")\n# Crate rustc_hashCopy item path\n[Settings](https://docs.rs/rustc-hash/latest/settings.html)\n[Help](https://docs.rs/rustc-hash/latest/help.html)\nSummary[Source](https://docs.rs/rustc-hash/latest/src/rustc_hash/lib.rs.html#1-459)\nExpand description\nA speedy, non-cryptographic hashing algorithm used by `rustc`.\n## [\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#example)Example\n```\nuse rustc_hash::FxHashMap;\nlet mut map: FxHashMap<u32, u32> = FxHashMap::default();\nmap.insert(22, 44);\n```\n\n## Structs[\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#structs)\n\n[FxBuildHasher](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxBuildHasher.html \"struct rustc_hash::FxBuildHasher\")\n    An implementation of [`BuildHasher`](https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html \"trait core::hash::BuildHasher\") that produces [`FxHasher`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\")s.\n\n[FxHasher](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\")\n    A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn\u2019t quite as speedy as we want. In the compiler we\u2019re not really worried about DOS attempts, so we use a fast non-cryptographic hash.\n\n[FxSeededState](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\")\n    [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\") is an alternative state for `HashMap` types, allowing to use [`FxHasher`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\") with a set seed.\n## Type Aliases[\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#types)\n\n[FxHashMap](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMap.html \"type rustc_hash::FxHashMap\")\n    Type alias for a hash map that uses the Fx hashing algorithm.\n\n[FxHashMapSeed](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMapSeed.html \"type rustc_hash::FxHashMapSeed\")\n    Type alias for a hashmap using the `fx` hash algorithm with [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\").\n\n[FxHashSet](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSet.html \"type rustc_hash::FxHashSet\")\n    Type alias for a hash set that uses the Fx hashing algorithm.\n\n[FxHashSetSeed](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSetSeed.html \"type rustc_hash::FxHashSetSeed\")\n    Type alias for a hashmap using the `fx` hash algorithm with [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\").\n",
        "markdown_with_citations": "[](https://docs.rs/rustc-hash/latest/rustc_hash/all.html \"show sidebar\")\n# Crate rustc_hashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA speedy, non-cryptographic hashing algorithm used by `rustc`.\n## \u00a7\u27e84\u27e9Example\n```\nuse rustc_hash::FxHashMap;\nlet mut map: FxHashMap<u32, u32> = FxHashMap::default();\nmap.insert(22, 44);\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nFxBuildHasher\u27e86\u27e9\n    An implementation of `BuildHasher`\u27e87\u27e9 that produces `FxHasher`\u27e88\u27e9s.\n\nFxHasher\u27e88\u27e9\n    A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn\u2019t quite as speedy as we want. In the compiler we\u2019re not really worried about DOS attempts, so we use a fast non-cryptographic hash.\n\nFxSeededState\u27e89\u27e9\n    `FxSeededState`\u27e89\u27e9 is an alternative state for `HashMap` types, allowing to use `FxHasher`\u27e88\u27e9 with a set seed.\n## Type Aliases\u00a7\u27e810\u27e9\n\nFxHashMap\u27e811\u27e9\n    Type alias for a hash map that uses the Fx hashing algorithm.\n\nFxHashMapSeed\u27e812\u27e9\n    Type alias for a hashmap using the `fx` hash algorithm with `FxSeededState`\u27e89\u27e9.\n\nFxHashSet\u27e813\u27e9\n    Type alias for a hash set that uses the Fx hashing algorithm.\n\nFxHashSetSeed\u27e814\u27e9\n    Type alias for a hashmap using the `fx` hash algorithm with `FxSeededState`\u27e89\u27e9.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rustc-hash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rustc-hash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rustc-hash/latest/src/rustc_hash/lib.rs.html#1-459: Source\n\u27e84\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxBuildHasher.html: struct rustc_hash::FxBuildHasher - FxBuildHasher\n\u27e87\u27e9 https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html: trait core::hash::BuildHasher - `BuildHasher`\n\u27e88\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html: struct rustc_hash::FxHasher - `FxHasher`\n\u27e89\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html: struct rustc_hash::FxSeededState - FxSeededState\n\u27e810\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#types: \u00a7\n\u27e811\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMap.html: type rustc_hash::FxHashMap - FxHashMap\n\u27e812\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMapSeed.html: type rustc_hash::FxHashMapSeed - FxHashMapSeed\n\u27e813\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSet.html: type rustc_hash::FxHashSet - FxHashSet\n\u27e814\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSetSeed.html: type rustc_hash::FxHashSetSeed - FxHashSetSeed\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `rustc-hash` crate provides a fast, non-cryptographic hashing algorithm (`FxHasher`) optimized for performance, as used in the Rust compiler (`rustc`). It includes type aliases like `FxHashMap` and `FxHashSet` for hash maps and sets leveraging this algorithm, along with support for custom seeded states via `FxSeededState`. Ideal for scenarios where speed is prioritized over cryptographic security.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Hashing Algorithm\n\u2705 Factual: The `rustc-hash` crate provides the `FxHasher`, a fast, non-cryptographic hashing algorithm optimized for use in the Rust compiler (`rustc`), where performance is prioritized over security against hash collision attacks.  \n\u274c Counterfactual: The `rustc-hash` crate uses a cryptographic hashing algorithm designed to prevent hash collision attacks, making it suitable for security-sensitive applications.\n\n---\n\n### Pair 2: Default HashMap Integration\n\u2705 Factual: The `FxHashMap` type alias in `rustc-hash` uses the `FxHasher` for hashing, providing a faster alternative to the default `HashMap` implementation, which uses `SipHash`.  \n\u274c Counterfactual: The `FxHashMap` type alias in `rustc-hash` is a wrapper around the default `HashMap` implementation and does not change the hashing algorithm.\n\n---\n\n### Pair 3: Seeded State Support\n\u2705 Factual: The `rustc-hash` crate includes `FxSeededState`, which allows users to create `HashMap` or `HashSet` instances with a specific seed for deterministic hashing.  \n\u274c Counterfactual: The `rustc-hash` crate does not support seeded hashing and always uses a random seed for `HashMap` and `HashSet` instances.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}