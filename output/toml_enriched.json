{
    "name": "toml",
    "version": "0.8.23",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/toml/latest/toml/all.html \"show sidebar\")\n# Crate tomlCopy item path\n[Settings](https://docs.rs/toml/latest/settings.html)\n[Help](https://docs.rs/toml/latest/help.html)\nSummary[Source](https://docs.rs/toml/latest/src/toml/lib.rs.html#1-185)\nExpand description\nA [serde](https://serde.rs/)-compatible [TOML](https://github.com/toml-lang/toml)-parsing library\nTOML itself is a simple, ergonomic, and readable configuration format:\n```\n[package]\nname = \"toml\"\n[dependencies]\nserde = \"1.0\"\n```\n\nThe TOML format tends to be relatively common throughout the Rust community for configuration, notably being used by [Cargo](https://crates.io/), Rust\u2019s package manager.\n### [\u00a7](https://docs.rs/toml/latest/toml/#toml-values)TOML values\nA TOML document is represented with the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type which maps `String` to the [`Value`](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\") enum:\n```\npub enum Value {\n  String(String),\n  Integer(i64),\n  Float(f64),\n  Boolean(bool),\n  Datetime(Datetime),\n  Array(Array),\n  Table(Table),\n}\n```\n\n### [\u00a7](https://docs.rs/toml/latest/toml/#parsing-toml)Parsing TOML\nThe easiest way to parse a TOML document is via the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type:\n```\nuse toml::Table;\nlet value = \"foo = 'bar'\".parse::<Table>().unwrap();\nassert_eq!(value[\"foo\"].as_str(), Some(\"bar\"));\n```\n\nThe [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type implements a number of convenience methods and traits; the example above uses [`FromStr`](https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") to parse a [`str`](https://doc.rust-lang.org/nightly/std/primitive.str.html \"primitive str\") into a [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\").\n### [\u00a7](https://docs.rs/toml/latest/toml/#deserialization-and-serialization)Deserialization and Serialization\nThis crate supports [`serde`](https://serde.rs/) 1.0 with a number of implementations of the `Deserialize`, `Serialize`, `Deserializer`, and `Serializer` traits. Namely, you\u2019ll find:\n  * `Deserialize for Table`\n  * `Serialize for Table`\n  * `Deserialize for Value`\n  * `Serialize for Value`\n  * `Deserialize for Datetime`\n  * `Serialize for Datetime`\n  * `Deserializer for de::Deserializer`\n  * `Serializer for ser::Serializer`\n  * `Deserializer for Table`\n  * `Deserializer for Value`\n\n\nThis means that you can use Serde to deserialize/serialize the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type as well as [`Value`](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\") and [`Datetime`](https://docs.rs/toml/latest/toml/value/struct.Datetime.html \"struct toml::value::Datetime\") type in this crate. You can also use the [`Deserializer`](https://docs.rs/toml/latest/toml/struct.Deserializer.html \"struct toml::Deserializer\"), [`Serializer`](https://docs.rs/toml/latest/toml/struct.Serializer.html \"struct toml::Serializer\"), or [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type itself to act as a deserializer/serializer for arbitrary types.\nAn example of deserializing with TOML is:\n```\nuse serde::Deserialize;\n#[derive(Deserialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Deserialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config: Config = toml::from_str(r#\"\n  ip = '127.0.0.1'\n  [keys]\n  github = 'xxxxxxxxxxxxxxxxx'\n  travis = 'yyyyyyyyyyyyyyyyy'\n\"#).unwrap();\nassert_eq!(config.ip, \"127.0.0.1\");\nassert_eq!(config.port, None);\nassert_eq!(config.keys.github, \"xxxxxxxxxxxxxxxxx\");\nassert_eq!(config.keys.travis.as_ref().unwrap(), \"yyyyyyyyyyyyyyyyy\");\n```\n\nYou can serialize types in a similar fashion:\n```\nuse serde::Serialize;\n#[derive(Serialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Serialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config = Config {\n  ip: \"127.0.0.1\".to_string(),\n  port: None,\n  keys: Keys {\n    github: \"xxxxxxxxxxxxxxxxx\".to_string(),\n    travis: Some(\"yyyyyyyyyyyyyyyyy\".to_string()),\n  },\n};\nlet toml = toml::to_string(&config).unwrap();\n```\n\n## Modules[\u00a7](https://docs.rs/toml/latest/toml/#modules)\n\n[de](https://docs.rs/toml/latest/toml/de/index.html \"mod toml::de\")\n    Deserializing TOML into Rust structures.\n\n[map](https://docs.rs/toml/latest/toml/map/index.html \"mod toml::map\")\n    A map of `String` to [Value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\").\n\n[ser](https://docs.rs/toml/latest/toml/ser/index.html \"mod toml::ser\")\n    Serializing Rust structures into TOML.\n\n[value](https://docs.rs/toml/latest/toml/value/index.html \"mod toml::value\")\n    Definition of a TOML [value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\")\n## Macros[\u00a7](https://docs.rs/toml/latest/toml/#macros)\n\n[toml](https://docs.rs/toml/latest/toml/macro.toml.html \"macro toml::toml\")\n    Construct a [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") from TOML syntax.\n## Structs[\u00a7](https://docs.rs/toml/latest/toml/#structs)\n\n[Deserializer](https://docs.rs/toml/latest/toml/struct.Deserializer.html \"struct toml::Deserializer\")`parse`\n    Deserialization TOML document\n\n[Serializer](https://docs.rs/toml/latest/toml/struct.Serializer.html \"struct toml::Serializer\")`display`\n    Serialization for TOML documents.\n\n[Spanned](https://docs.rs/toml/latest/toml/struct.Spanned.html \"struct toml::Spanned\")\n    A spanned value, indicating the range at which it is defined in the source.\n## Enums[\u00a7](https://docs.rs/toml/latest/toml/#enums)\n\n[Value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\")\n    Representation of a TOML value.\n## Functions[\u00a7](https://docs.rs/toml/latest/toml/#functions)\n\n[from_str](https://docs.rs/toml/latest/toml/fn.from_str.html \"fn toml::from_str\")`parse`\n    Deserializes a string into a type.\n\n[to_string](https://docs.rs/toml/latest/toml/fn.to_string.html \"fn toml::to_string\")`display`\n    Serialize the given data structure as a String of TOML.\n\n[to_string_pretty](https://docs.rs/toml/latest/toml/fn.to_string_pretty.html \"fn toml::to_string_pretty\")`display`\n    Serialize the given data structure as a \u201cpretty\u201d String of TOML.\n## Type Aliases[\u00a7](https://docs.rs/toml/latest/toml/#types)\n\n[Table](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\")\n    Type representing a TOML table, payload of the `Value::Table` variant.\n",
        "markdown_with_citations": "[](https://docs.rs/toml/latest/toml/all.html \"show sidebar\")\n# Crate tomlCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA serde\u27e84\u27e9-compatible TOML\u27e85\u27e9-parsing library\nTOML itself is a simple, ergonomic, and readable configuration format:\n```\n[package]\nname = \"toml\"\n[dependencies]\nserde = \"1.0\"\n```\n\nThe TOML format tends to be relatively common throughout the Rust community for configuration, notably being used by Cargo\u27e86\u27e9, Rust\u2019s package manager.\n### \u00a7\u27e87\u27e9TOML values\nA TOML document is represented with the `Table`\u27e88\u27e9 type which maps `String` to the `Value`\u27e89\u27e9 enum:\n```\npub enum Value {\n  String(String),\n  Integer(i64),\n  Float(f64),\n  Boolean(bool),\n  Datetime(Datetime),\n  Array(Array),\n  Table(Table),\n}\n```\n\n### \u00a7\u27e810\u27e9Parsing TOML\nThe easiest way to parse a TOML document is via the `Table`\u27e88\u27e9 type:\n```\nuse toml::Table;\nlet value = \"foo = 'bar'\".parse::<Table>().unwrap();\nassert_eq!(value[\"foo\"].as_str(), Some(\"bar\"));\n```\n\nThe `Table`\u27e88\u27e9 type implements a number of convenience methods and traits; the example above uses `FromStr`\u27e811\u27e9 to parse a `str`\u27e812\u27e9 into a `Table`\u27e88\u27e9.\n### \u00a7\u27e813\u27e9Deserialization and Serialization\nThis crate supports `serde`\u27e84\u27e9 1.0 with a number of implementations of the `Deserialize`, `Serialize`, `Deserializer`, and `Serializer` traits. Namely, you\u2019ll find:\n  * `Deserialize for Table`\n  * `Serialize for Table`\n  * `Deserialize for Value`\n  * `Serialize for Value`\n  * `Deserialize for Datetime`\n  * `Serialize for Datetime`\n  * `Deserializer for de::Deserializer`\n  * `Serializer for ser::Serializer`\n  * `Deserializer for Table`\n  * `Deserializer for Value`\n\n\nThis means that you can use Serde to deserialize/serialize the `Table`\u27e88\u27e9 type as well as `Value`\u27e89\u27e9 and `Datetime`\u27e814\u27e9 type in this crate. You can also use the `Deserializer`\u27e815\u27e9, `Serializer`\u27e816\u27e9, or `Table`\u27e88\u27e9 type itself to act as a deserializer/serializer for arbitrary types.\nAn example of deserializing with TOML is:\n```\nuse serde::Deserialize;\n#[derive(Deserialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Deserialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config: Config = toml::from_str(r#\"\n  ip = '127.0.0.1'\n  [keys]\n  github = 'xxxxxxxxxxxxxxxxx'\n  travis = 'yyyyyyyyyyyyyyyyy'\n\"#).unwrap();\nassert_eq!(config.ip, \"127.0.0.1\");\nassert_eq!(config.port, None);\nassert_eq!(config.keys.github, \"xxxxxxxxxxxxxxxxx\");\nassert_eq!(config.keys.travis.as_ref().unwrap(), \"yyyyyyyyyyyyyyyyy\");\n```\n\nYou can serialize types in a similar fashion:\n```\nuse serde::Serialize;\n#[derive(Serialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Serialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config = Config {\n  ip: \"127.0.0.1\".to_string(),\n  port: None,\n  keys: Keys {\n    github: \"xxxxxxxxxxxxxxxxx\".to_string(),\n    travis: Some(\"yyyyyyyyyyyyyyyyy\".to_string()),\n  },\n};\nlet toml = toml::to_string(&config).unwrap();\n```\n\n## Modules\u00a7\u27e817\u27e9\n\nde\u27e818\u27e9\n    Deserializing TOML into Rust structures.\n\nmap\u27e819\u27e9\n    A map of `String` to Value\u27e89\u27e9.\n\nser\u27e820\u27e9\n    Serializing Rust structures into TOML.\n\nvalue\u27e821\u27e9\n    Definition of a TOML value\u27e89\u27e9\n## Macros\u00a7\u27e822\u27e9\n\ntoml\u27e823\u27e9\n    Construct a `Table`\u27e88\u27e9 from TOML syntax.\n## Structs\u00a7\u27e824\u27e9\n\nDeserializer\u27e815\u27e9`parse`\n    Deserialization TOML document\n\nSerializer\u27e816\u27e9`display`\n    Serialization for TOML documents.\n\nSpanned\u27e825\u27e9\n    A spanned value, indicating the range at which it is defined in the source.\n## Enums\u00a7\u27e826\u27e9\n\nValue\u27e89\u27e9\n    Representation of a TOML value.\n## Functions\u00a7\u27e827\u27e9\n\nfrom_str\u27e828\u27e9`parse`\n    Deserializes a string into a type.\n\nto_string\u27e829\u27e9`display`\n    Serialize the given data structure as a String of TOML.\n\nto_string_pretty\u27e830\u27e9`display`\n    Serialize the given data structure as a \u201cpretty\u201d String of TOML.\n## Type Aliases\u00a7\u27e831\u27e9\n\nTable\u27e88\u27e9\n    Type representing a TOML table, payload of the `Value::Table` variant.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/toml/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/toml/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/toml/latest/src/toml/lib.rs.html#1-185: Source\n\u27e84\u27e9 https://serde.rs/: serde\n\u27e85\u27e9 https://github.com/toml-lang/toml: TOML\n\u27e86\u27e9 https://crates.io/: Cargo\n\u27e87\u27e9 https://docs.rs/toml/latest/toml/#toml-values: \u00a7\n\u27e88\u27e9 https://docs.rs/toml/latest/toml/type.Table.html: type toml::Table - `Table`\n\u27e89\u27e9 https://docs.rs/toml/latest/toml/enum.Value.html: enum toml::Value - `Value`\n\u27e810\u27e9 https://docs.rs/toml/latest/toml/#parsing-toml: \u00a7\n\u27e811\u27e9 https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html: trait core::str::traits::FromStr - `FromStr`\n\u27e812\u27e9 https://doc.rust-lang.org/nightly/std/primitive.str.html: primitive str - `str`\n\u27e813\u27e9 https://docs.rs/toml/latest/toml/#deserialization-and-serialization: \u00a7\n\u27e814\u27e9 https://docs.rs/toml/latest/toml/value/struct.Datetime.html: struct toml::value::Datetime - `Datetime`\n\u27e815\u27e9 https://docs.rs/toml/latest/toml/struct.Deserializer.html: struct toml::Deserializer - `Deserializer`\n\u27e816\u27e9 https://docs.rs/toml/latest/toml/struct.Serializer.html: struct toml::Serializer - `Serializer`\n\u27e817\u27e9 https://docs.rs/toml/latest/toml/#modules: \u00a7\n\u27e818\u27e9 https://docs.rs/toml/latest/toml/de/index.html: mod toml::de - de\n\u27e819\u27e9 https://docs.rs/toml/latest/toml/map/index.html: mod toml::map - map\n\u27e820\u27e9 https://docs.rs/toml/latest/toml/ser/index.html: mod toml::ser - ser\n\u27e821\u27e9 https://docs.rs/toml/latest/toml/value/index.html: mod toml::value - value\n\u27e822\u27e9 https://docs.rs/toml/latest/toml/#macros: \u00a7\n\u27e823\u27e9 https://docs.rs/toml/latest/toml/macro.toml.html: macro toml::toml - toml\n\u27e824\u27e9 https://docs.rs/toml/latest/toml/#structs: \u00a7\n\u27e825\u27e9 https://docs.rs/toml/latest/toml/struct.Spanned.html: struct toml::Spanned - Spanned\n\u27e826\u27e9 https://docs.rs/toml/latest/toml/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/toml/latest/toml/#functions: \u00a7\n\u27e828\u27e9 https://docs.rs/toml/latest/toml/fn.from_str.html: fn toml::from_str - from_str\n\u27e829\u27e9 https://docs.rs/toml/latest/toml/fn.to_string.html: fn toml::to_string - to_string\n\u27e830\u27e9 https://docs.rs/toml/latest/toml/fn.to_string_pretty.html: fn toml::to_string_pretty - to_string_pretty\n\u27e831\u27e9 https://docs.rs/toml/latest/toml/#types: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `toml` crate is a Serde-compatible library for parsing, serializing, and deserializing TOML, a widely-used configuration format in the Rust ecosystem (e.g., by Cargo). It provides robust support for working with TOML documents through types like `Table` and `Value`, enabling easy manipulation of strings, integers, floats, booleans, arrays, and nested tables. Additionally, it integrates seamlessly with Serde for converting Rust data structures to/from TOML.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: Parsing TOML Documents  \n\u2705 Factual: The `toml` crate allows parsing TOML documents into a `Table` type using the `FromStr` trait, enabling convenient access to key-value pairs.  \n\u274c Counterfactual: The `toml` crate requires manual implementation of parsing logic for TOML documents, as it does not provide built-in support for converting strings into a `Table` type.  \n\n---\n\n### Pair 2: Serde Integration  \n\u2705 Factual: The `toml` crate supports Serde 1.0, enabling seamless serialization and deserialization of Rust data structures into and from TOML format.  \n\u274c Counterfactual: The `toml` crate does not integrate with Serde, requiring developers to write custom serialization and deserialization logic for TOML data.  \n\n---\n\n### Pair 3: Supported TOML Value Types  \n\u2705 Factual: The `toml::Value` enum supports multiple types, including `String`, `Integer`, `Float`, `Boolean`, `Datetime`, `Array`, and `Table`.  \n\u274c Counterfactual: The `toml::Value` enum only supports basic types like `String` and `Integer`, and does not include complex types like `Array` or `Datetime`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}