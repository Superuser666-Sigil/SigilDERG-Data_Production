{
    "name": "cgmath",
    "version": "0.18.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/cgmath/latest/cgmath/all.html \"show sidebar\")\n# Crate cgmathCopy item path\n[Settings](https://docs.rs/cgmath/latest/settings.html)\n[Help](https://docs.rs/cgmath/latest/help.html)\nSummary[Source](https://docs.rs/cgmath/latest/src/cgmath/lib.rs.html#16-117)\nExpand description\nA low-dimensional linear algebra library, targeted at computer graphics.\n## [\u00a7](https://docs.rs/cgmath/latest/cgmath/#trait-overview)Trait overview\nIn order to make a clean, composable API, we divide operations into traits that are roughly based on mathematical properties. The main ones that we concern ourselves with are listed below:\n  * `VectorSpace`: Specifies the main operators for vectors, quaternions, and matrices.\n  * `MetricSpace`: For types that have a distance function implemented.\n  * `InnerSpace`: For types that have a dot (or inner) product - ie. vectors or quaternions. This also allows for the definition of operations that are based on the dot product, like finding the magnitude or normalizing.\n  * `EuclideanSpace`: Points in euclidean space, with an associated space of displacement vectors.\n  * `Matrix`: Common operations for matrices of arbitrary dimensions.\n  * `SquareMatrix`: A special trait for matrices where the number of columns equal the number of rows.\n\n\nOther traits are included for practical convenience, for example:\n  * `Array`: For contiguous, indexable arrays of elements, specifically vectors.\n  * `ElementWise`: For element-wise addition, subtraction, multiplication, division, and remainder operations.\n\n\n## [\u00a7](https://docs.rs/cgmath/latest/cgmath/#the-prelude)The prelude\nImporting each trait individually can become a chore, so we provide a `prelude` module to allow you to import the main traits all at once. For example:\n```\nuse cgmath::prelude::*;\n```\n\n## Re-exports[\u00a7](https://docs.rs/cgmath/latest/cgmath/#reexports)\n\n`pub extern crate num_traits[](https://docs.rs/num-traits/0.2.19/x86_64-unknown-linux-gnu/num_traits/index.html \"mod num_traits\");`\n\n## Modules[\u00a7](https://docs.rs/cgmath/latest/cgmath/#modules)\n\n[conv](https://docs.rs/cgmath/latest/cgmath/conv/index.html \"mod cgmath::conv\")\n    Constrained conversion functions for assisting in situations where type inference is difficult.\n\n[prelude](https://docs.rs/cgmath/latest/cgmath/prelude/index.html \"mod cgmath::prelude\")\n    This module contains the most common traits used in `cgmath`. By glob-importing this module, you can avoid the need to import each trait individually, while still being selective about what types you import.\n## Macros[\u00a7](https://docs.rs/cgmath/latest/cgmath/#macros)\n\n[abs_diff_eq](https://docs.rs/cgmath/latest/cgmath/macro.abs_diff_eq.html \"macro cgmath::abs_diff_eq\")\n    Approximate equality of using the absolute difference.\n\n[abs_diff_ne](https://docs.rs/cgmath/latest/cgmath/macro.abs_diff_ne.html \"macro cgmath::abs_diff_ne\")\n    Approximate inequality of using the absolute difference.\n\n[assert_abs_diff_eq](https://docs.rs/cgmath/latest/cgmath/macro.assert_abs_diff_eq.html \"macro cgmath::assert_abs_diff_eq\")\n    An assertion that delegates to [`abs_diff_eq!`](https://docs.rs/cgmath/latest/cgmath/macro.abs_diff_eq.html \"macro cgmath::abs_diff_eq\"), and panics with a helpful error on failure.\n\n[assert_abs_diff_ne](https://docs.rs/cgmath/latest/cgmath/macro.assert_abs_diff_ne.html \"macro cgmath::assert_abs_diff_ne\")\n    An assertion that delegates to [`abs_diff_ne!`](https://docs.rs/cgmath/latest/cgmath/macro.abs_diff_ne.html \"macro cgmath::abs_diff_ne\"), and panics with a helpful error on failure.\n\n[assert_relative_eq](https://docs.rs/cgmath/latest/cgmath/macro.assert_relative_eq.html \"macro cgmath::assert_relative_eq\")\n    An assertion that delegates to [`relative_eq!`](https://docs.rs/cgmath/latest/cgmath/macro.relative_eq.html \"macro cgmath::relative_eq\"), and panics with a helpful error on failure.\n\n[assert_relative_ne](https://docs.rs/cgmath/latest/cgmath/macro.assert_relative_ne.html \"macro cgmath::assert_relative_ne\")\n    An assertion that delegates to [`relative_ne!`](https://docs.rs/cgmath/latest/cgmath/macro.relative_ne.html \"macro cgmath::relative_ne\"), and panics with a helpful error on failure.\n\n[assert_ulps_eq](https://docs.rs/cgmath/latest/cgmath/macro.assert_ulps_eq.html \"macro cgmath::assert_ulps_eq\")\n    An assertion that delegates to [`ulps_eq!`](https://docs.rs/cgmath/latest/cgmath/macro.ulps_eq.html \"macro cgmath::ulps_eq\"), and panics with a helpful error on failure.\n\n[assert_ulps_ne](https://docs.rs/cgmath/latest/cgmath/macro.assert_ulps_ne.html \"macro cgmath::assert_ulps_ne\")\n    An assertion that delegates to [`ulps_ne!`](https://docs.rs/cgmath/latest/cgmath/macro.ulps_ne.html \"macro cgmath::ulps_ne\"), and panics with a helpful error on failure.\n\n[relative_eq](https://docs.rs/cgmath/latest/cgmath/macro.relative_eq.html \"macro cgmath::relative_eq\")\n    Approximate equality using both the absolute difference and relative based comparisons.\n\n[relative_ne](https://docs.rs/cgmath/latest/cgmath/macro.relative_ne.html \"macro cgmath::relative_ne\")\n    Approximate inequality using both the absolute difference and relative based comparisons.\n\n[ulps_eq](https://docs.rs/cgmath/latest/cgmath/macro.ulps_eq.html \"macro cgmath::ulps_eq\")\n    Approximate equality using both the absolute difference and ULPs (Units in Last Place).\n\n[ulps_ne](https://docs.rs/cgmath/latest/cgmath/macro.ulps_ne.html \"macro cgmath::ulps_ne\")\n    Approximate inequality using both the absolute difference and ULPs (Units in Last Place).\n## Structs[\u00a7](https://docs.rs/cgmath/latest/cgmath/#structs)\n\n[AbsDiff](https://docs.rs/cgmath/latest/cgmath/struct.AbsDiff.html \"struct cgmath::AbsDiff\")\n    The requisite parameters for testing for approximate equality using a absolute difference based comparison.\n\n[Basis2](https://docs.rs/cgmath/latest/cgmath/struct.Basis2.html \"struct cgmath::Basis2\")\n    A two-dimensional rotation matrix.\n\n[Basis3](https://docs.rs/cgmath/latest/cgmath/struct.Basis3.html \"struct cgmath::Basis3\")\n    A three-dimensional rotation matrix.\n\n[Decomposed](https://docs.rs/cgmath/latest/cgmath/struct.Decomposed.html \"struct cgmath::Decomposed\")\n    A generic transformation consisting of a rotation, displacement vector and scale amount.\n\n[Deg](https://docs.rs/cgmath/latest/cgmath/struct.Deg.html \"struct cgmath::Deg\")\n    An angle, in degrees.\n\n[Euler](https://docs.rs/cgmath/latest/cgmath/struct.Euler.html \"struct cgmath::Euler\")\n    A set of [Euler angles](https://en.wikipedia.org/wiki/Euler_angles) representing a rotation in three-dimensional space.\n\n[Matrix2](https://docs.rs/cgmath/latest/cgmath/struct.Matrix2.html \"struct cgmath::Matrix2\")\n    A 2 x 2, column major matrix\n\n[Matrix3](https://docs.rs/cgmath/latest/cgmath/struct.Matrix3.html \"struct cgmath::Matrix3\")\n    A 3 x 3, column major matrix\n\n[Matrix4](https://docs.rs/cgmath/latest/cgmath/struct.Matrix4.html \"struct cgmath::Matrix4\")\n    A 4 x 4, column major matrix\n\n[Ortho](https://docs.rs/cgmath/latest/cgmath/struct.Ortho.html \"struct cgmath::Ortho\")\n    An orthographic projection with arbitrary left/right/bottom/top distances\n\n[Perspective](https://docs.rs/cgmath/latest/cgmath/struct.Perspective.html \"struct cgmath::Perspective\")\n    A perspective projection with arbitrary left/right/bottom/top distances\n\n[PerspectiveFov](https://docs.rs/cgmath/latest/cgmath/struct.PerspectiveFov.html \"struct cgmath::PerspectiveFov\")\n    A perspective projection based on a vertical field-of-view angle.\n\n[Point1](https://docs.rs/cgmath/latest/cgmath/struct.Point1.html \"struct cgmath::Point1\")\n    A point in 1-dimensional space.\n\n[Point2](https://docs.rs/cgmath/latest/cgmath/struct.Point2.html \"struct cgmath::Point2\")\n    A point in 2-dimensional space.\n\n[Point3](https://docs.rs/cgmath/latest/cgmath/struct.Point3.html \"struct cgmath::Point3\")\n    A point in 3-dimensional space.\n\n[Quaternion](https://docs.rs/cgmath/latest/cgmath/struct.Quaternion.html \"struct cgmath::Quaternion\")\n    A [quaternion](https://en.wikipedia.org/wiki/Quaternion) in scalar/vector form.\n\n[Rad](https://docs.rs/cgmath/latest/cgmath/struct.Rad.html \"struct cgmath::Rad\")\n    An angle, in radians.\n\n[Relative](https://docs.rs/cgmath/latest/cgmath/struct.Relative.html \"struct cgmath::Relative\")\n    The requisite parameters for testing for approximate equality using a relative based comparison.\n\n[Ulps](https://docs.rs/cgmath/latest/cgmath/struct.Ulps.html \"struct cgmath::Ulps\")\n    The requisite parameters for testing for approximate equality using an ULPs based comparison.\n\n[Vector1](https://docs.rs/cgmath/latest/cgmath/struct.Vector1.html \"struct cgmath::Vector1\")\n    A 1-dimensional vector.\n\n[Vector2](https://docs.rs/cgmath/latest/cgmath/struct.Vector2.html \"struct cgmath::Vector2\")\n    A 2-dimensional vector.\n\n[Vector3](https://docs.rs/cgmath/latest/cgmath/struct.Vector3.html \"struct cgmath::Vector3\")\n    A 3-dimensional vector.\n\n[Vector4](https://docs.rs/cgmath/latest/cgmath/struct.Vector4.html \"struct cgmath::Vector4\")\n    A 4-dimensional vector.\n## Traits[\u00a7](https://docs.rs/cgmath/latest/cgmath/#traits)\n\n[AbsDiffEq](https://docs.rs/cgmath/latest/cgmath/trait.AbsDiffEq.html \"trait cgmath::AbsDiffEq\")\n    Equality that is defined using the absolute difference of two numbers.\n\n[Angle](https://docs.rs/cgmath/latest/cgmath/trait.Angle.html \"trait cgmath::Angle\")\n    Angles and their associated trigonometric functions.\n\n[Array](https://docs.rs/cgmath/latest/cgmath/trait.Array.html \"trait cgmath::Array\")\n    An array containing elements of type `Element`\n\n[BaseFloat](https://docs.rs/cgmath/latest/cgmath/trait.BaseFloat.html \"trait cgmath::BaseFloat\")\n    Base floating point types\n\n[BaseNum](https://docs.rs/cgmath/latest/cgmath/trait.BaseNum.html \"trait cgmath::BaseNum\")\n    Base numeric types with partial ordering\n\n[Bounded](https://docs.rs/cgmath/latest/cgmath/trait.Bounded.html \"trait cgmath::Bounded\")\n    Numbers which have upper and lower bounds\n\n[ElementWise](https://docs.rs/cgmath/latest/cgmath/trait.ElementWise.html \"trait cgmath::ElementWise\")\n    Element-wise arithmetic operations. These are supplied for pragmatic reasons, but will usually fall outside of traditional algebraic properties.\n\n[EuclideanSpace](https://docs.rs/cgmath/latest/cgmath/trait.EuclideanSpace.html \"trait cgmath::EuclideanSpace\")\n    Points in a [Euclidean space](https://en.wikipedia.org/wiki/Euclidean_space) with an associated space of displacement vectors.\n\n[InnerSpace](https://docs.rs/cgmath/latest/cgmath/trait.InnerSpace.html \"trait cgmath::InnerSpace\")\n    Vectors that also have a [dot](https://en.wikipedia.org/wiki/Dot_product) (or [inner](https://en.wikipedia.org/wiki/Inner_product_space)) product.\n\n[Matrix](https://docs.rs/cgmath/latest/cgmath/trait.Matrix.html \"trait cgmath::Matrix\")\n    A column-major matrix of arbitrary dimensions.\n\n[MetricSpace](https://docs.rs/cgmath/latest/cgmath/trait.MetricSpace.html \"trait cgmath::MetricSpace\")\n    A type with a distance function between values.\n\n[One](https://docs.rs/cgmath/latest/cgmath/trait.One.html \"trait cgmath::One\")\n    Defines a multiplicative identity element for `Self`.\n\n[RelativeEq](https://docs.rs/cgmath/latest/cgmath/trait.RelativeEq.html \"trait cgmath::RelativeEq\")\n    Equality comparisons between two numbers using both the absolute difference and relative based comparisons.\n\n[Rotation](https://docs.rs/cgmath/latest/cgmath/trait.Rotation.html \"trait cgmath::Rotation\")\n    A trait for a generic rotation. A rotation is a transformation that creates a circular motion, and preserves at least one point in the space.\n\n[Rotation2](https://docs.rs/cgmath/latest/cgmath/trait.Rotation2.html \"trait cgmath::Rotation2\")\n    A two-dimensional rotation.\n\n[Rotation3](https://docs.rs/cgmath/latest/cgmath/trait.Rotation3.html \"trait cgmath::Rotation3\")\n    A three-dimensional rotation.\n\n[SquareMatrix](https://docs.rs/cgmath/latest/cgmath/trait.SquareMatrix.html \"trait cgmath::SquareMatrix\")\n    A column-major major matrix where the rows and column vectors are of the same dimensions.\n\n[Transform](https://docs.rs/cgmath/latest/cgmath/trait.Transform.html \"trait cgmath::Transform\")\n    A trait representing an [affine transformation](https://en.wikipedia.org/wiki/Affine_transformation) that can be applied to points or vectors. An affine transformation is one which\n\n[Transform2](https://docs.rs/cgmath/latest/cgmath/trait.Transform2.html \"trait cgmath::Transform2\")\n\n\n[Transform3](https://docs.rs/cgmath/latest/cgmath/trait.Transform3.html \"trait cgmath::Transform3\")\n\n\n[UlpsEq](https://docs.rs/cgmath/latest/cgmath/trait.UlpsEq.html \"trait cgmath::UlpsEq\")\n    Equality comparisons between two numbers using both the absolute difference and ULPs (Units in Last Place) based comparisons.\n\n[VectorSpace](https://docs.rs/cgmath/latest/cgmath/trait.VectorSpace.html \"trait cgmath::VectorSpace\")\n    Vectors that can be [added](http://mathworld.wolfram.com/VectorAddition.html) together and [multiplied](https://en.wikipedia.org/wiki/Scalar_multiplication) by scalars.\n\n[Zero](https://docs.rs/cgmath/latest/cgmath/trait.Zero.html \"trait cgmath::Zero\")\n    Defines an additive identity element for `Self`.\n## Functions[\u00a7](https://docs.rs/cgmath/latest/cgmath/#functions)\n\n[dot](https://docs.rs/cgmath/latest/cgmath/fn.dot.html \"fn cgmath::dot\")\n    Dot product of two vectors.\n\n[frustum](https://docs.rs/cgmath/latest/cgmath/fn.frustum.html \"fn cgmath::frustum\")\n    Create a perspective matrix from a view frustum.\n\n[ortho](https://docs.rs/cgmath/latest/cgmath/fn.ortho.html \"fn cgmath::ortho\")\n    Create an orthographic projection matrix.\n\n[perspective](https://docs.rs/cgmath/latest/cgmath/fn.perspective.html \"fn cgmath::perspective\")\n    Create a perspective projection matrix.\n\n[point1](https://docs.rs/cgmath/latest/cgmath/fn.point1.html \"fn cgmath::point1\")\n    The short constructor.\n\n[point2](https://docs.rs/cgmath/latest/cgmath/fn.point2.html \"fn cgmath::point2\")\n    The short constructor.\n\n[point3](https://docs.rs/cgmath/latest/cgmath/fn.point3.html \"fn cgmath::point3\")\n    The short constructor.\n\n[vec1](https://docs.rs/cgmath/latest/cgmath/fn.vec1.html \"fn cgmath::vec1\")\n    The short constructor.\n\n[vec2](https://docs.rs/cgmath/latest/cgmath/fn.vec2.html \"fn cgmath::vec2\")\n    The short constructor.\n\n[vec3](https://docs.rs/cgmath/latest/cgmath/fn.vec3.html \"fn cgmath::vec3\")\n    The short constructor.\n\n[vec4](https://docs.rs/cgmath/latest/cgmath/fn.vec4.html \"fn cgmath::vec4\")\n    The short constructor.\n",
        "markdown_with_citations": "[](https://docs.rs/cgmath/latest/cgmath/all.html \"show sidebar\")\n# Crate cgmathCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA low-dimensional linear algebra library, targeted at computer graphics.\n## \u00a7\u27e84\u27e9Trait overview\nIn order to make a clean, composable API, we divide operations into traits that are roughly based on mathematical properties. The main ones that we concern ourselves with are listed below:\n  * `VectorSpace`: Specifies the main operators for vectors, quaternions, and matrices.\n  * `MetricSpace`: For types that have a distance function implemented.\n  * `InnerSpace`: For types that have a dot (or inner) product - ie. vectors or quaternions. This also allows for the definition of operations that are based on the dot product, like finding the magnitude or normalizing.\n  * `EuclideanSpace`: Points in euclidean space, with an associated space of displacement vectors.\n  * `Matrix`: Common operations for matrices of arbitrary dimensions.\n  * `SquareMatrix`: A special trait for matrices where the number of columns equal the number of rows.\n\n\nOther traits are included for practical convenience, for example:\n  * `Array`: For contiguous, indexable arrays of elements, specifically vectors.\n  * `ElementWise`: For element-wise addition, subtraction, multiplication, division, and remainder operations.\n\n\n## \u00a7\u27e85\u27e9The prelude\nImporting each trait individually can become a chore, so we provide a `prelude` module to allow you to import the main traits all at once. For example:\n```\nuse cgmath::prelude::*;\n```\n\n## Re-exports\u00a7\u27e86\u27e9\n\n`pub extern crate num_traits[](https://docs.rs/num-traits/0.2.19/x86_64-unknown-linux-gnu/num_traits/index.html \"mod num_traits\");`\n\n## Modules\u00a7\u27e87\u27e9\n\nconv\u27e88\u27e9\n    Constrained conversion functions for assisting in situations where type inference is difficult.\n\nprelude\u27e89\u27e9\n    This module contains the most common traits used in `cgmath`. By glob-importing this module, you can avoid the need to import each trait individually, while still being selective about what types you import.\n## Macros\u00a7\u27e810\u27e9\n\nabs_diff_eq\u27e811\u27e9\n    Approximate equality of using the absolute difference.\n\nabs_diff_ne\u27e812\u27e9\n    Approximate inequality of using the absolute difference.\n\nassert_abs_diff_eq\u27e813\u27e9\n    An assertion that delegates to `abs_diff_eq!`\u27e811\u27e9, and panics with a helpful error on failure.\n\nassert_abs_diff_ne\u27e814\u27e9\n    An assertion that delegates to `abs_diff_ne!`\u27e812\u27e9, and panics with a helpful error on failure.\n\nassert_relative_eq\u27e815\u27e9\n    An assertion that delegates to `relative_eq!`\u27e816\u27e9, and panics with a helpful error on failure.\n\nassert_relative_ne\u27e817\u27e9\n    An assertion that delegates to `relative_ne!`\u27e818\u27e9, and panics with a helpful error on failure.\n\nassert_ulps_eq\u27e819\u27e9\n    An assertion that delegates to `ulps_eq!`\u27e820\u27e9, and panics with a helpful error on failure.\n\nassert_ulps_ne\u27e821\u27e9\n    An assertion that delegates to `ulps_ne!`\u27e822\u27e9, and panics with a helpful error on failure.\n\nrelative_eq\u27e816\u27e9\n    Approximate equality using both the absolute difference and relative based comparisons.\n\nrelative_ne\u27e818\u27e9\n    Approximate inequality using both the absolute difference and relative based comparisons.\n\nulps_eq\u27e820\u27e9\n    Approximate equality using both the absolute difference and ULPs (Units in Last Place).\n\nulps_ne\u27e822\u27e9\n    Approximate inequality using both the absolute difference and ULPs (Units in Last Place).\n## Structs\u00a7\u27e823\u27e9\n\nAbsDiff\u27e824\u27e9\n    The requisite parameters for testing for approximate equality using a absolute difference based comparison.\n\nBasis2\u27e825\u27e9\n    A two-dimensional rotation matrix.\n\nBasis3\u27e826\u27e9\n    A three-dimensional rotation matrix.\n\nDecomposed\u27e827\u27e9\n    A generic transformation consisting of a rotation, displacement vector and scale amount.\n\nDeg\u27e828\u27e9\n    An angle, in degrees.\n\nEuler\u27e829\u27e9\n    A set of Euler angles\u27e830\u27e9 representing a rotation in three-dimensional space.\n\nMatrix2\u27e831\u27e9\n    A 2 x 2, column major matrix\n\nMatrix3\u27e832\u27e9\n    A 3 x 3, column major matrix\n\nMatrix4\u27e833\u27e9\n    A 4 x 4, column major matrix\n\nOrtho\u27e834\u27e9\n    An orthographic projection with arbitrary left/right/bottom/top distances\n\nPerspective\u27e835\u27e9\n    A perspective projection with arbitrary left/right/bottom/top distances\n\nPerspectiveFov\u27e836\u27e9\n    A perspective projection based on a vertical field-of-view angle.\n\nPoint1\u27e837\u27e9\n    A point in 1-dimensional space.\n\nPoint2\u27e838\u27e9\n    A point in 2-dimensional space.\n\nPoint3\u27e839\u27e9\n    A point in 3-dimensional space.\n\nQuaternion\u27e840\u27e9\n    A quaternion\u27e841\u27e9 in scalar/vector form.\n\nRad\u27e842\u27e9\n    An angle, in radians.\n\nRelative\u27e843\u27e9\n    The requisite parameters for testing for approximate equality using a relative based comparison.\n\nUlps\u27e844\u27e9\n    The requisite parameters for testing for approximate equality using an ULPs based comparison.\n\nVector1\u27e845\u27e9\n    A 1-dimensional vector.\n\nVector2\u27e846\u27e9\n    A 2-dimensional vector.\n\nVector3\u27e847\u27e9\n    A 3-dimensional vector.\n\nVector4\u27e848\u27e9\n    A 4-dimensional vector.\n## Traits\u00a7\u27e849\u27e9\n\nAbsDiffEq\u27e850\u27e9\n    Equality that is defined using the absolute difference of two numbers.\n\nAngle\u27e851\u27e9\n    Angles and their associated trigonometric functions.\n\nArray\u27e852\u27e9\n    An array containing elements of type `Element`\n\nBaseFloat\u27e853\u27e9\n    Base floating point types\n\nBaseNum\u27e854\u27e9\n    Base numeric types with partial ordering\n\nBounded\u27e855\u27e9\n    Numbers which have upper and lower bounds\n\nElementWise\u27e856\u27e9\n    Element-wise arithmetic operations. These are supplied for pragmatic reasons, but will usually fall outside of traditional algebraic properties.\n\nEuclideanSpace\u27e857\u27e9\n    Points in a Euclidean space\u27e858\u27e9 with an associated space of displacement vectors.\n\nInnerSpace\u27e859\u27e9\n    Vectors that also have a dot\u27e860\u27e9 (or inner\u27e861\u27e9) product.\n\nMatrix\u27e862\u27e9\n    A column-major matrix of arbitrary dimensions.\n\nMetricSpace\u27e863\u27e9\n    A type with a distance function between values.\n\nOne\u27e864\u27e9\n    Defines a multiplicative identity element for `Self`.\n\nRelativeEq\u27e865\u27e9\n    Equality comparisons between two numbers using both the absolute difference and relative based comparisons.\n\nRotation\u27e866\u27e9\n    A trait for a generic rotation. A rotation is a transformation that creates a circular motion, and preserves at least one point in the space.\n\nRotation2\u27e867\u27e9\n    A two-dimensional rotation.\n\nRotation3\u27e868\u27e9\n    A three-dimensional rotation.\n\nSquareMatrix\u27e869\u27e9\n    A column-major major matrix where the rows and column vectors are of the same dimensions.\n\nTransform\u27e870\u27e9\n    A trait representing an affine transformation\u27e871\u27e9 that can be applied to points or vectors. An affine transformation is one which\n\nTransform2\u27e872\u27e9\n\n\nTransform3\u27e873\u27e9\n\n\nUlpsEq\u27e874\u27e9\n    Equality comparisons between two numbers using both the absolute difference and ULPs (Units in Last Place) based comparisons.\n\nVectorSpace\u27e875\u27e9\n    Vectors that can be added\u27e876\u27e9 together and multiplied\u27e877\u27e9 by scalars.\n\nZero\u27e878\u27e9\n    Defines an additive identity element for `Self`.\n## Functions\u00a7\u27e879\u27e9\n\ndot\u27e880\u27e9\n    Dot product of two vectors.\n\nfrustum\u27e881\u27e9\n    Create a perspective matrix from a view frustum.\n\northo\u27e882\u27e9\n    Create an orthographic projection matrix.\n\nperspective\u27e883\u27e9\n    Create a perspective projection matrix.\n\npoint1\u27e884\u27e9\n    The short constructor.\n\npoint2\u27e885\u27e9\n    The short constructor.\n\npoint3\u27e886\u27e9\n    The short constructor.\n\nvec1\u27e887\u27e9\n    The short constructor.\n\nvec2\u27e888\u27e9\n    The short constructor.\n\nvec3\u27e889\u27e9\n    The short constructor.\n\nvec4\u27e890\u27e9\n    The short constructor.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/cgmath/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/cgmath/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/cgmath/latest/src/cgmath/lib.rs.html#16-117: Source\n\u27e84\u27e9 https://docs.rs/cgmath/latest/cgmath/#trait-overview: \u00a7\n\u27e85\u27e9 https://docs.rs/cgmath/latest/cgmath/#the-prelude: \u00a7\n\u27e86\u27e9 https://docs.rs/cgmath/latest/cgmath/#reexports: \u00a7\n\u27e87\u27e9 https://docs.rs/cgmath/latest/cgmath/#modules: \u00a7\n\u27e88\u27e9 https://docs.rs/cgmath/latest/cgmath/conv/index.html: mod cgmath::conv - conv\n\u27e89\u27e9 https://docs.rs/cgmath/latest/cgmath/prelude/index.html: mod cgmath::prelude - prelude\n\u27e810\u27e9 https://docs.rs/cgmath/latest/cgmath/#macros: \u00a7\n\u27e811\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.abs_diff_eq.html: macro cgmath::abs_diff_eq - abs_diff_eq\n\u27e812\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.abs_diff_ne.html: macro cgmath::abs_diff_ne - abs_diff_ne\n\u27e813\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.assert_abs_diff_eq.html: macro cgmath::assert_abs_diff_eq - assert_abs_diff_eq\n\u27e814\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.assert_abs_diff_ne.html: macro cgmath::assert_abs_diff_ne - assert_abs_diff_ne\n\u27e815\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.assert_relative_eq.html: macro cgmath::assert_relative_eq - assert_relative_eq\n\u27e816\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.relative_eq.html: macro cgmath::relative_eq - `relative_eq!`\n\u27e817\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.assert_relative_ne.html: macro cgmath::assert_relative_ne - assert_relative_ne\n\u27e818\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.relative_ne.html: macro cgmath::relative_ne - `relative_ne!`\n\u27e819\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.assert_ulps_eq.html: macro cgmath::assert_ulps_eq - assert_ulps_eq\n\u27e820\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.ulps_eq.html: macro cgmath::ulps_eq - `ulps_eq!`\n\u27e821\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.assert_ulps_ne.html: macro cgmath::assert_ulps_ne - assert_ulps_ne\n\u27e822\u27e9 https://docs.rs/cgmath/latest/cgmath/macro.ulps_ne.html: macro cgmath::ulps_ne - `ulps_ne!`\n\u27e823\u27e9 https://docs.rs/cgmath/latest/cgmath/#structs: \u00a7\n\u27e824\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.AbsDiff.html: struct cgmath::AbsDiff - AbsDiff\n\u27e825\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Basis2.html: struct cgmath::Basis2 - Basis2\n\u27e826\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Basis3.html: struct cgmath::Basis3 - Basis3\n\u27e827\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Decomposed.html: struct cgmath::Decomposed - Decomposed\n\u27e828\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Deg.html: struct cgmath::Deg - Deg\n\u27e829\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Euler.html: struct cgmath::Euler - Euler\n\u27e830\u27e9 https://en.wikipedia.org/wiki/Euler_angles: Euler angles\n\u27e831\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Matrix2.html: struct cgmath::Matrix2 - Matrix2\n\u27e832\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Matrix3.html: struct cgmath::Matrix3 - Matrix3\n\u27e833\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Matrix4.html: struct cgmath::Matrix4 - Matrix4\n\u27e834\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Ortho.html: struct cgmath::Ortho - Ortho\n\u27e835\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Perspective.html: struct cgmath::Perspective - Perspective\n\u27e836\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.PerspectiveFov.html: struct cgmath::PerspectiveFov - PerspectiveFov\n\u27e837\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Point1.html: struct cgmath::Point1 - Point1\n\u27e838\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Point2.html: struct cgmath::Point2 - Point2\n\u27e839\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Point3.html: struct cgmath::Point3 - Point3\n\u27e840\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Quaternion.html: struct cgmath::Quaternion - Quaternion\n\u27e841\u27e9 https://en.wikipedia.org/wiki/Quaternion: quaternion\n\u27e842\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Rad.html: struct cgmath::Rad - Rad\n\u27e843\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Relative.html: struct cgmath::Relative - Relative\n\u27e844\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Ulps.html: struct cgmath::Ulps - Ulps\n\u27e845\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Vector1.html: struct cgmath::Vector1 - Vector1\n\u27e846\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Vector2.html: struct cgmath::Vector2 - Vector2\n\u27e847\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Vector3.html: struct cgmath::Vector3 - Vector3\n\u27e848\u27e9 https://docs.rs/cgmath/latest/cgmath/struct.Vector4.html: struct cgmath::Vector4 - Vector4\n\u27e849\u27e9 https://docs.rs/cgmath/latest/cgmath/#traits: \u00a7\n\u27e850\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.AbsDiffEq.html: trait cgmath::AbsDiffEq - AbsDiffEq\n\u27e851\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Angle.html: trait cgmath::Angle - Angle\n\u27e852\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Array.html: trait cgmath::Array - Array\n\u27e853\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.BaseFloat.html: trait cgmath::BaseFloat - BaseFloat\n\u27e854\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.BaseNum.html: trait cgmath::BaseNum - BaseNum\n\u27e855\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Bounded.html: trait cgmath::Bounded - Bounded\n\u27e856\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.ElementWise.html: trait cgmath::ElementWise - ElementWise\n\u27e857\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.EuclideanSpace.html: trait cgmath::EuclideanSpace - EuclideanSpace\n\u27e858\u27e9 https://en.wikipedia.org/wiki/Euclidean_space: Euclidean space\n\u27e859\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.InnerSpace.html: trait cgmath::InnerSpace - InnerSpace\n\u27e860\u27e9 https://en.wikipedia.org/wiki/Dot_product: dot\n\u27e861\u27e9 https://en.wikipedia.org/wiki/Inner_product_space: inner\n\u27e862\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Matrix.html: trait cgmath::Matrix - Matrix\n\u27e863\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.MetricSpace.html: trait cgmath::MetricSpace - MetricSpace\n\u27e864\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.One.html: trait cgmath::One - One\n\u27e865\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.RelativeEq.html: trait cgmath::RelativeEq - RelativeEq\n\u27e866\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Rotation.html: trait cgmath::Rotation - Rotation\n\u27e867\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Rotation2.html: trait cgmath::Rotation2 - Rotation2\n\u27e868\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Rotation3.html: trait cgmath::Rotation3 - Rotation3\n\u27e869\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.SquareMatrix.html: trait cgmath::SquareMatrix - SquareMatrix\n\u27e870\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Transform.html: trait cgmath::Transform - Transform\n\u27e871\u27e9 https://en.wikipedia.org/wiki/Affine_transformation: affine transformation\n\u27e872\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Transform2.html: trait cgmath::Transform2 - Transform2\n\u27e873\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Transform3.html: trait cgmath::Transform3 - Transform3\n\u27e874\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.UlpsEq.html: trait cgmath::UlpsEq - UlpsEq\n\u27e875\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.VectorSpace.html: trait cgmath::VectorSpace - VectorSpace\n\u27e876\u27e9 http://mathworld.wolfram.com/VectorAddition.html: added\n\u27e877\u27e9 https://en.wikipedia.org/wiki/Scalar_multiplication: multiplied\n\u27e878\u27e9 https://docs.rs/cgmath/latest/cgmath/trait.Zero.html: trait cgmath::Zero - Zero\n\u27e879\u27e9 https://docs.rs/cgmath/latest/cgmath/#functions: \u00a7\n\u27e880\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.dot.html: fn cgmath::dot - dot\n\u27e881\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.frustum.html: fn cgmath::frustum - frustum\n\u27e882\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.ortho.html: fn cgmath::ortho - ortho\n\u27e883\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.perspective.html: fn cgmath::perspective - perspective\n\u27e884\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.point1.html: fn cgmath::point1 - point1\n\u27e885\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.point2.html: fn cgmath::point2 - point2\n\u27e886\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.point3.html: fn cgmath::point3 - point3\n\u27e887\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.vec1.html: fn cgmath::vec1 - vec1\n\u27e888\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.vec2.html: fn cgmath::vec2 - vec2\n\u27e889\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.vec3.html: fn cgmath::vec3 - vec3\n\u27e890\u27e9 https://docs.rs/cgmath/latest/cgmath/fn.vec4.html: fn cgmath::vec4 - vec4\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `cgmath` crate is a lightweight linear algebra library designed for computer graphics applications. It provides traits and types for operations on vectors, matrices, quaternions, and points in Euclidean space, supporting features like dot products, transformations, projections, and rotations. Additionally, it includes convenience macros for approximate equality checks and a prelude module for streamlined imports.",
    "feature_summary": null,
    "use_case": "Unknown",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Trait System  \n\u2705 **Factual**: The `cgmath` crate provides a trait called `VectorSpace` that defines operations for vectors, quaternions, and matrices, enabling composable APIs for linear algebra.  \n\u274c **Counterfactual**: The `VectorSpace` trait in `cgmath` is limited to scalar multiplication and does not support vector addition.  \n\n---\n\n### Pair 2: Matrix Operations  \n\u2705 **Factual**: `cgmath` includes the `SquareMatrix` trait, which is specifically designed for matrices where the number of rows equals the number of columns, supporting operations like inversion and determinant calculation.  \n\u274c **Counterfactual**: The `SquareMatrix` trait in `cgmath` supports matrices of arbitrary dimensions, including non-square matrices.  \n\n---\n\n### Pair 3: Prelude Module  \n\u2705 **Factual**: The `cgmath::prelude` module allows users to import commonly used traits, such as `InnerSpace` and `MetricSpace`, with a single glob import, simplifying code organization.  \n\u274c **Counterfactual**: The `cgmath::prelude` module automatically imports all structs and functions from the crate, including `Matrix4` and `vec3`.  \n\n---",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}