{
    "name": "argon2",
    "version": "0.6.0-rc.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/argon2/latest/argon2/all.html \"show sidebar\")\n# Crate argon2Copy item path\n[Settings](https://docs.rs/argon2/latest/settings.html)\n[Help](https://docs.rs/argon2/latest/help.html)\nSummary[Source](https://docs.rs/argon2/latest/src/argon2/lib.rs.html#1-696)\nExpand description\n## [\u00a7](https://docs.rs/argon2/latest/argon2/#rustcrypto-argon2)RustCrypto: Argon2\n[![crate](https://buildstats.info/crate/argon2)](https://crates.io/crates/argon2) [![Docs](https://docs.rs/argon2/badge.svg)](https://docs.rs/argon2/) [![Build Status](https://github.com/RustCrypto/password-hashes/workflows/argon2/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Aargon2) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.65+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes)\nPure Rust implementation of the [Argon2](https://en.wikipedia.org/wiki/Argon2) password hashing function.\n[Documentation](https://docs.rs/argon2/)\n## [\u00a7](https://docs.rs/argon2/latest/argon2/#about)About\nArgon2 is a memory-hard [key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function) chosen as the winner of the [Password Hashing Competition](https://www.password-hashing.net/) in July 2015.\nIt implements the following three algorithmic variants:\n  * **Argon2d** : maximizes resistance to GPU cracking attacks\n  * **Argon2i** : optimized to resist side-channel attacks\n  * **Argon2id** : (default) hybrid version combining both Argon2i and Argon2d\n\n\nSupport is provided for embedded (i.e. `no_std`) environments, including ones without `alloc` support.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#minimum-supported-rust-version)Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#semver-policy)SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#license)License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#usage)Usage\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#password-hashing)Password Hashing\nThis API hashes a password to a \u201cPHC string\u201d suitable for the purposes of password-based authentication. Do not use this API to derive cryptographic keys: see the \u201ckey derivation\u201d usage example below.\n```\nuse argon2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Argon2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Argon2 with default params (Argon2id v19)\nlet argon2 = Argon2::default();\n// Hash password to PHC string ($argon2id$v=19$...)\nlet password_hash = argon2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string.\n//\n// NOTE: hash params from `parsed_hash` are used instead of what is configured in the\n// `Argon2` instance.\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Argon2::default().verify_password(password, &parsed_hash).is_ok());\n```\n\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#key-derivation)Key Derivation\nThis API is useful for transforming a password into cryptographic keys for e.g. password-based encryption.\n```\nuse argon2::Argon2;\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = b\"example salt\"; // Salt should be unique per password\nlet mut output_key_material = [0u8; 32]; // Can be any desired size\nArgon2::default().hash_password_into(password, salt, &mut output_key_material)?;\n```\n\n## Re-exports[\u00a7](https://docs.rs/argon2/latest/argon2/#reexports)\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``password-hash`\n\n## Structs[\u00a7](https://docs.rs/argon2/latest/argon2/#structs)\n\n[Argon2](https://docs.rs/argon2/latest/argon2/struct.Argon2.html \"struct argon2::Argon2\")\n    Argon2 context.\n\n[AssociatedData](https://docs.rs/argon2/latest/argon2/struct.AssociatedData.html \"struct argon2::AssociatedData\")\n    Associated data\n\n[Block](https://docs.rs/argon2/latest/argon2/struct.Block.html \"struct argon2::Block\")\n    Structure for the (1 KiB) memory block implemented as 128 64-bit words.\n\n[KeyId](https://docs.rs/argon2/latest/argon2/struct.KeyId.html \"struct argon2::KeyId\")\n    Key identifier\n\n[Params](https://docs.rs/argon2/latest/argon2/struct.Params.html \"struct argon2::Params\")\n    Argon2 password hash parameters.\n\n[ParamsBuilder](https://docs.rs/argon2/latest/argon2/struct.ParamsBuilder.html \"struct argon2::ParamsBuilder\")\n    Builder for Argon2 [`Params`](https://docs.rs/argon2/latest/argon2/struct.Params.html \"struct argon2::Params\").\n\n[PasswordHash](https://docs.rs/argon2/latest/argon2/struct.PasswordHash.html \"struct argon2::PasswordHash\")`password-hash`\n    Password hash.\n## Enums[\u00a7](https://docs.rs/argon2/latest/argon2/#enums)\n\n[Algorithm](https://docs.rs/argon2/latest/argon2/enum.Algorithm.html \"enum argon2::Algorithm\")\n    Argon2 primitive type: variants of the algorithm.\n\n[Error](https://docs.rs/argon2/latest/argon2/enum.Error.html \"enum argon2::Error\")\n    Error type.\n\n[Version](https://docs.rs/argon2/latest/argon2/enum.Version.html \"enum argon2::Version\")\n    Version of the algorithm.\n## Constants[\u00a7](https://docs.rs/argon2/latest/argon2/#constants)\n\n[ARGON2D_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2D_IDENT.html \"constant argon2::ARGON2D_IDENT\")`password-hash`\n    Argon2d algorithm identifier\n\n[ARGON2ID_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2ID_IDENT.html \"constant argon2::ARGON2ID_IDENT\")`password-hash`\n    Argon2id algorithm identifier\n\n[ARGON2I_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2I_IDENT.html \"constant argon2::ARGON2I_IDENT\")`password-hash`\n    Argon2i algorithm identifier\n\n[MAX_PWD_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_PWD_LEN.html \"constant argon2::MAX_PWD_LEN\")\n    Maximum password length in bytes.\n\n[MAX_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_SALT_LEN.html \"constant argon2::MAX_SALT_LEN\")\n    Maximum salt length in bytes.\n\n[MAX_SECRET_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_SECRET_LEN.html \"constant argon2::MAX_SECRET_LEN\")\n    Maximum secret key length in bytes.\n\n[MIN_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.MIN_SALT_LEN.html \"constant argon2::MIN_SALT_LEN\")\n    Minimum salt length in bytes.\n\n[RECOMMENDED_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.RECOMMENDED_SALT_LEN.html \"constant argon2::RECOMMENDED_SALT_LEN\")\n    Recommended salt length for password hashing in bytes.\n## Traits[\u00a7](https://docs.rs/argon2/latest/argon2/#traits)\n\n[PasswordHasher](https://docs.rs/argon2/latest/argon2/trait.PasswordHasher.html \"trait argon2::PasswordHasher\")`password-hash`\n    Trait for password hashing functions.\n\n[PasswordVerifier](https://docs.rs/argon2/latest/argon2/trait.PasswordVerifier.html \"trait argon2::PasswordVerifier\")`password-hash`\n    Trait for password verification.\n## Type Aliases[\u00a7](https://docs.rs/argon2/latest/argon2/#types)\n\n[Result](https://docs.rs/argon2/latest/argon2/type.Result.html \"type argon2::Result\")\n    Result with argon2\u2019s [`Error`](https://docs.rs/argon2/latest/argon2/enum.Error.html \"enum argon2::Error\") type.\n",
        "markdown_with_citations": "[](https://docs.rs/argon2/latest/argon2/all.html \"show sidebar\")\n# Crate argon2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto: Argon2\n![crate\u27e85\u27e9](https://crates.io/crates/argon2) ![Docs\u27e86\u27e9](https://docs.rs/argon2/) ![Build Status\u27e87\u27e9](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Aargon2) ![Apache2/MIT licensed\u27e88\u27e9] ![Rust Version\u27e89\u27e9] ![Project Chat\u27e810\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes)\nPure Rust implementation of the Argon2\u27e811\u27e9 password hashing function.\nDocumentation\u27e812\u27e9\n## \u00a7\u27e813\u27e9About\nArgon2 is a memory-hard key derivation function\u27e814\u27e9 chosen as the winner of the Password Hashing Competition\u27e815\u27e9 in July 2015.\nIt implements the following three algorithmic variants:\n  * **Argon2d** : maximizes resistance to GPU cracking attacks\n  * **Argon2i** : optimized to resist side-channel attacks\n  * **Argon2id** : (default) hybrid version combining both Argon2i and Argon2d\n\n\nSupport is provided for embedded (i.e. `no_std`) environments, including ones without `alloc` support.\n### \u00a7\u27e816\u27e9Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### \u00a7\u27e817\u27e9SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### \u00a7\u27e818\u27e9License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e819\u27e9\n  * MIT license\u27e820\u27e9\n\n\nat your option.\n#### \u00a7\u27e821\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### \u00a7\u27e822\u27e9Usage\n#### \u00a7\u27e823\u27e9Password Hashing\nThis API hashes a password to a \u201cPHC string\u201d suitable for the purposes of password-based authentication. Do not use this API to derive cryptographic keys: see the \u201ckey derivation\u201d usage example below.\n```\nuse argon2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Argon2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Argon2 with default params (Argon2id v19)\nlet argon2 = Argon2::default();\n// Hash password to PHC string ($argon2id$v=19$...)\nlet password_hash = argon2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string.\n//\n// NOTE: hash params from `parsed_hash` are used instead of what is configured in the\n// `Argon2` instance.\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Argon2::default().verify_password(password, &parsed_hash).is_ok());\n```\n\n#### \u00a7\u27e824\u27e9Key Derivation\nThis API is useful for transforming a password into cryptographic keys for e.g. password-based encryption.\n```\nuse argon2::Argon2;\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = b\"example salt\"; // Salt should be unique per password\nlet mut output_key_material = [0u8; 32]; // Can be any desired size\nArgon2::default().hash_password_into(password, salt, &mut output_key_material)?;\n```\n\n## Re-exports\u00a7\u27e825\u27e9\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``password-hash`\n\n## Structs\u00a7\u27e826\u27e9\n\nArgon2\u27e827\u27e9\n    Argon2 context.\n\nAssociatedData\u27e828\u27e9\n    Associated data\n\nBlock\u27e829\u27e9\n    Structure for the (1 KiB) memory block implemented as 128 64-bit words.\n\nKeyId\u27e830\u27e9\n    Key identifier\n\nParams\u27e831\u27e9\n    Argon2 password hash parameters.\n\nParamsBuilder\u27e832\u27e9\n    Builder for Argon2 `Params`\u27e831\u27e9.\n\nPasswordHash\u27e833\u27e9`password-hash`\n    Password hash.\n## Enums\u00a7\u27e834\u27e9\n\nAlgorithm\u27e835\u27e9\n    Argon2 primitive type: variants of the algorithm.\n\nError\u27e836\u27e9\n    Error type.\n\nVersion\u27e837\u27e9\n    Version of the algorithm.\n## Constants\u00a7\u27e838\u27e9\n\nARGON2D_IDENT\u27e839\u27e9`password-hash`\n    Argon2d algorithm identifier\n\nARGON2ID_IDENT\u27e840\u27e9`password-hash`\n    Argon2id algorithm identifier\n\nARGON2I_IDENT\u27e841\u27e9`password-hash`\n    Argon2i algorithm identifier\n\nMAX_PWD_LEN\u27e842\u27e9\n    Maximum password length in bytes.\n\nMAX_SALT_LEN\u27e843\u27e9\n    Maximum salt length in bytes.\n\nMAX_SECRET_LEN\u27e844\u27e9\n    Maximum secret key length in bytes.\n\nMIN_SALT_LEN\u27e845\u27e9\n    Minimum salt length in bytes.\n\nRECOMMENDED_SALT_LEN\u27e846\u27e9\n    Recommended salt length for password hashing in bytes.\n## Traits\u00a7\u27e847\u27e9\n\nPasswordHasher\u27e848\u27e9`password-hash`\n    Trait for password hashing functions.\n\nPasswordVerifier\u27e849\u27e9`password-hash`\n    Trait for password verification.\n## Type Aliases\u00a7\u27e850\u27e9\n\nResult\u27e851\u27e9\n    Result with argon2\u2019s `Error`\u27e836\u27e9 type.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/argon2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/argon2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/argon2/latest/src/argon2/lib.rs.html#1-696: Source\n\u27e84\u27e9 https://docs.rs/argon2/latest/argon2/#rustcrypto-argon2: \u00a7\n\u27e85\u27e9 https://buildstats.info/crate/argon2: ![crate\n\u27e86\u27e9 https://docs.rs/argon2/badge.svg: ![Docs\n\u27e87\u27e9 https://github.com/RustCrypto/password-hashes/workflows/argon2/badge.svg?branch=master&event=push: ![Build Status\n\u27e88\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e89\u27e9 https://img.shields.io/badge/rustc-1.65+-blue.svg: Rust Version\n\u27e810\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e811\u27e9 https://en.wikipedia.org/wiki/Argon2: Argon2\n\u27e812\u27e9 https://docs.rs/argon2/: Documentation\n\u27e813\u27e9 https://docs.rs/argon2/latest/argon2/#about: \u00a7\n\u27e814\u27e9 https://en.wikipedia.org/wiki/Key_derivation_function: key derivation function\n\u27e815\u27e9 https://www.password-hashing.net/: Password Hashing Competition\n\u27e816\u27e9 https://docs.rs/argon2/latest/argon2/#minimum-supported-rust-version: \u00a7\n\u27e817\u27e9 https://docs.rs/argon2/latest/argon2/#semver-policy: \u00a7\n\u27e818\u27e9 https://docs.rs/argon2/latest/argon2/#license: \u00a7\n\u27e819\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e820\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e821\u27e9 https://docs.rs/argon2/latest/argon2/#contribution: \u00a7\n\u27e822\u27e9 https://docs.rs/argon2/latest/argon2/#usage: \u00a7\n\u27e823\u27e9 https://docs.rs/argon2/latest/argon2/#password-hashing: \u00a7\n\u27e824\u27e9 https://docs.rs/argon2/latest/argon2/#key-derivation: \u00a7\n\u27e825\u27e9 https://docs.rs/argon2/latest/argon2/#reexports: \u00a7\n\u27e826\u27e9 https://docs.rs/argon2/latest/argon2/#structs: \u00a7\n\u27e827\u27e9 https://docs.rs/argon2/latest/argon2/struct.Argon2.html: struct argon2::Argon2 - Argon2\n\u27e828\u27e9 https://docs.rs/argon2/latest/argon2/struct.AssociatedData.html: struct argon2::AssociatedData - AssociatedData\n\u27e829\u27e9 https://docs.rs/argon2/latest/argon2/struct.Block.html: struct argon2::Block - Block\n\u27e830\u27e9 https://docs.rs/argon2/latest/argon2/struct.KeyId.html: struct argon2::KeyId - KeyId\n\u27e831\u27e9 https://docs.rs/argon2/latest/argon2/struct.Params.html: struct argon2::Params - Params\n\u27e832\u27e9 https://docs.rs/argon2/latest/argon2/struct.ParamsBuilder.html: struct argon2::ParamsBuilder - ParamsBuilder\n\u27e833\u27e9 https://docs.rs/argon2/latest/argon2/struct.PasswordHash.html: struct argon2::PasswordHash - PasswordHash\n\u27e834\u27e9 https://docs.rs/argon2/latest/argon2/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/argon2/latest/argon2/enum.Algorithm.html: enum argon2::Algorithm - Algorithm\n\u27e836\u27e9 https://docs.rs/argon2/latest/argon2/enum.Error.html: enum argon2::Error - Error\n\u27e837\u27e9 https://docs.rs/argon2/latest/argon2/enum.Version.html: enum argon2::Version - Version\n\u27e838\u27e9 https://docs.rs/argon2/latest/argon2/#constants: \u00a7\n\u27e839\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2D_IDENT.html: constant argon2::ARGON2D_IDENT - ARGON2D_IDENT\n\u27e840\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2ID_IDENT.html: constant argon2::ARGON2ID_IDENT - ARGON2ID_IDENT\n\u27e841\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2I_IDENT.html: constant argon2::ARGON2I_IDENT - ARGON2I_IDENT\n\u27e842\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_PWD_LEN.html: constant argon2::MAX_PWD_LEN - MAX_PWD_LEN\n\u27e843\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_SALT_LEN.html: constant argon2::MAX_SALT_LEN - MAX_SALT_LEN\n\u27e844\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_SECRET_LEN.html: constant argon2::MAX_SECRET_LEN - MAX_SECRET_LEN\n\u27e845\u27e9 https://docs.rs/argon2/latest/argon2/constant.MIN_SALT_LEN.html: constant argon2::MIN_SALT_LEN - MIN_SALT_LEN\n\u27e846\u27e9 https://docs.rs/argon2/latest/argon2/constant.RECOMMENDED_SALT_LEN.html: constant argon2::RECOMMENDED_SALT_LEN - RECOMMENDED_SALT_LEN\n\u27e847\u27e9 https://docs.rs/argon2/latest/argon2/#traits: \u00a7\n\u27e848\u27e9 https://docs.rs/argon2/latest/argon2/trait.PasswordHasher.html: trait argon2::PasswordHasher - PasswordHasher\n\u27e849\u27e9 https://docs.rs/argon2/latest/argon2/trait.PasswordVerifier.html: trait argon2::PasswordVerifier - PasswordVerifier\n\u27e850\u27e9 https://docs.rs/argon2/latest/argon2/#types: \u00a7\n\u27e851\u27e9 https://docs.rs/argon2/latest/argon2/type.Result.html: type argon2::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `argon2` crate provides a pure Rust implementation of the Argon2 password hashing function, a memory-hard key derivation algorithm that won the Password Hashing Competition in 2015. It supports three variants: Argon2d (resistant to GPU attacks), Argon2i (resistant to side-channel attacks), and Argon2id (a hybrid default). The crate is compatible with `no_std` environments, offers APIs for password hashing and cryptographic key derivation, and adheres to modern security standards.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Algorithm Variants  \n\u2705 Factual: The `argon2` crate implements three algorithmic variants: Argon2d, Argon2i, and Argon2id, with Argon2id being the default.  \n\u274c Counterfactual: The `argon2` crate only supports the Argon2i variant and does not implement Argon2d or Argon2id.  \n\n---\n\n### Pair 2: Embedded Support  \n\u2705 Factual: The `argon2` crate supports embedded environments (`no_std`), including those without `alloc` support.  \n\u274c Counterfactual: The `argon2` crate requires the standard library and does not support `no_std` environments.  \n\n---\n\n### Pair 3: Password Hashing and Key Derivation  \n\u2705 Factual: The `argon2` crate provides separate APIs for password hashing and key derivation, ensuring cryptographic keys are derived securely.  \n\u274c Counterfactual: The `argon2` crate uses the same API for password hashing and key derivation, making it unsuitable for cryptographic key generation.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}