{
    "name": "openssl",
    "version": "0.10.73",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/openssl/latest/openssl/all.html \"show sidebar\")\n# Crate opensslCopy item path\n[Settings](https://docs.rs/openssl/latest/settings.html)\n[Help](https://docs.rs/openssl/latest/help.html)\nSummary[Source](https://docs.rs/openssl/latest/src/openssl/lib.rs.html#1-257)\nExpand description\nBindings to OpenSSL\nThis crate provides a safe interface to the popular OpenSSL cryptography library. OpenSSL versions 1.0.1 through 3.x.x and LibreSSL versions 2.5 through 3.7.x are supported.\n## [\u00a7](https://docs.rs/openssl/latest/openssl/#building)Building\nBoth OpenSSL libraries and headers are required to build this crate. There are multiple options available to locate OpenSSL.\n### [\u00a7](https://docs.rs/openssl/latest/openssl/#vendored)Vendored\nIf the `vendored` Cargo feature is enabled, the `openssl-src` crate will be used to compile and statically link to a copy of OpenSSL. The build process requires a C compiler, perl (and perl-core), and make. The OpenSSL version will generally track the newest OpenSSL release, and changes to the version are _not_ considered breaking changes.\n```\n[dependencies]\nopenssl = { version = \"0.10\", features = [\"vendored\"] }\n```\n\nThe vendored copy will be configured to automatically find a configuration and root certificates at `/usr/local/ssl`. This path can be overridden with an environment variable (see the manual section below). Alternatively, the `openssl-probe` crate can be used to find root certificates at runtime.\n### [\u00a7](https://docs.rs/openssl/latest/openssl/#automatic)Automatic\nThe `openssl-sys` crate will automatically detect OpenSSL installations via Homebrew on macOS and vcpkg on Windows. Additionally, it will use `pkg-config` on Unix-like systems to find the system installation.\n```\n# macOS (Homebrew)\n$ brew install openssl@3\n# macOS (MacPorts)\n$ sudo port install openssl\n# macOS (pkgsrc)\n$ sudo pkgin install openssl\n# Arch Linux\n$ sudo pacman -S pkgconf openssl\n# Debian and Ubuntu\n$ sudo apt-get install pkg-config libssl-dev\n# Fedora\n$ sudo dnf install pkgconf perl-FindBin perl-IPC-Cmd openssl-devel\n# Alpine Linux\n$ apk add pkgconf openssl-dev\n# openSUSE\n$ sudo zypper in libopenssl-devel\n```\n\n### [\u00a7](https://docs.rs/openssl/latest/openssl/#manual)Manual\nA set of environment variables can be used to point `openssl-sys` towards an OpenSSL installation. They will override the automatic detection logic.\n  * `OPENSSL_DIR` - If specified, the directory of an OpenSSL installation. The directory should contain `lib` and `include` subdirectories containing the libraries and headers respectively.\n  * `OPENSSL_LIB_DIR` and `OPENSSL_INCLUDE_DIR` - If specified, the directories containing the OpenSSL libraries and headers respectively. This can be used if the OpenSSL installation is split in a nonstandard directory layout.\n  * `OPENSSL_STATIC` - If set, the crate will statically link to OpenSSL rather than dynamically link.\n  * `OPENSSL_LIBS` - If set, a `:`-separated list of library names to link to (e.g. `ssl:crypto`). This can be used if nonstandard library names were used for whatever reason.\n  * `OPENSSL_NO_VENDOR` - If set, always find OpenSSL in the system, even if the `vendored` feature is enabled.\n\n\nIf the `vendored` Cargo feature is enabled, the following environment variable can also be used to further configure the OpenSSL build.\n  * `OPENSSL_CONFIG_DIR` - If set, the copy of OpenSSL built by the `openssl-src` crate will be configured to look for configuration files and root certificates in this directory.\n\n\nAdditionally, these variables can be prefixed with the upper-cased target architecture (e.g. `X86_64_UNKNOWN_LINUX_GNU_OPENSSL_DIR`), which can be useful when cross compiling.\n## [\u00a7](https://docs.rs/openssl/latest/openssl/#feature-detection)Feature Detection\nAPIs have been added to and removed from the various supported OpenSSL versions, and this library exposes the functionality available in the version being linked against. This means that methods, constants, and even modules will be present when building against one version of OpenSSL but not when building against another! APIs will document any version-specific availability restrictions.\nA build script can be used to detect the OpenSSL or LibreSSL version at compile time if needed. The `openssl-sys` crate propagates the version via the `DEP_OPENSSL_VERSION_NUMBER` and `DEP_OPENSSL_LIBRESSL_VERSION_NUMBER` environment variables to build scripts. The version format is a hex-encoding of the OpenSSL release version: `0xMNNFFPPS`. For example, version 1.0.2g\u2019s encoding is `0x1_00_02_07_0`.\nFor example, let\u2019s say we want to adjust the TLSv1.3 cipher suites used by a client, but also want to compile against OpenSSL versions that don\u2019t support TLSv1.3:\nCargo.toml:\n```\n[dependencies]\nopenssl-sys = \"0.9\"\nopenssl = \"0.10\"\n```\n\nbuild.rs:\n```\nuse std::env;\nfn main() {\n  if let Ok(v) = env::var(\"DEP_OPENSSL_VERSION_NUMBER\") {\n    let version = u64::from_str_radix(&v, 16).unwrap();\n    if version >= 0x1_01_01_00_0 {\n      println!(\"cargo:rustc-cfg=openssl111\");\n    }\n  }\n}\n```\n\nlib.rs:\n```\nuse openssl::ssl::{SslConnector, SslMethod};\nlet mut ctx = SslConnector::builder(SslMethod::tls()).unwrap();\n// set_ciphersuites was added in OpenSSL 1.1.1, so we can only call it when linking against that version\n#[cfg(openssl111)]\nctx.set_ciphersuites(\"TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256\").unwrap();\n```\n\n## Modules[\u00a7](https://docs.rs/openssl/latest/openssl/#modules)\n\n[aes](https://docs.rs/openssl/latest/openssl/aes/index.html \"mod openssl::aes\")\n    Low level AES IGE and key wrapping functionality\n\n[asn1](https://docs.rs/openssl/latest/openssl/asn1/index.html \"mod openssl::asn1\")\n    Defines the format of certificates\n\n[base64](https://docs.rs/openssl/latest/openssl/base64/index.html \"mod openssl::base64\")\n    Base64 encoding support.\n\n[bn](https://docs.rs/openssl/latest/openssl/bn/index.html \"mod openssl::bn\")\n    BigNum implementation\n\n[cipher](https://docs.rs/openssl/latest/openssl/cipher/index.html \"mod openssl::cipher\")\n    Symmetric ciphers.\n\n[cipher_ctx](https://docs.rs/openssl/latest/openssl/cipher_ctx/index.html \"mod openssl::cipher_ctx\")\n    The symmetric encryption context.\n\n[cms](https://docs.rs/openssl/latest/openssl/cms/index.html \"mod openssl::cms\")\n    SMIME implementation using CMS\n\n[conf](https://docs.rs/openssl/latest/openssl/conf/index.html \"mod openssl::conf\")\n    Interface for processing OpenSSL configuration files.\n\n[derive](https://docs.rs/openssl/latest/openssl/derive/index.html \"mod openssl::derive\")\n    Shared secret derivation.\n\n[dh](https://docs.rs/openssl/latest/openssl/dh/index.html \"mod openssl::dh\")\n    Diffie-Hellman key agreement.\n\n[dsa](https://docs.rs/openssl/latest/openssl/dsa/index.html \"mod openssl::dsa\")\n    Digital Signatures\n\n[ec](https://docs.rs/openssl/latest/openssl/ec/index.html \"mod openssl::ec\")\n    Elliptic Curve\n\n[ecdsa](https://docs.rs/openssl/latest/openssl/ecdsa/index.html \"mod openssl::ecdsa\")\n    Low level Elliptic Curve Digital Signature Algorithm (ECDSA) functions.\n\n[encrypt](https://docs.rs/openssl/latest/openssl/encrypt/index.html \"mod openssl::encrypt\")\n    Message encryption.\n\n[envelope](https://docs.rs/openssl/latest/openssl/envelope/index.html \"mod openssl::envelope\")\n    Envelope encryption.\n\n[error](https://docs.rs/openssl/latest/openssl/error/index.html \"mod openssl::error\")\n    Errors returned by OpenSSL library.\n\n[ex_data](https://docs.rs/openssl/latest/openssl/ex_data/index.html \"mod openssl::ex_data\")\n\n\n[hash](https://docs.rs/openssl/latest/openssl/hash/index.html \"mod openssl::hash\")\n    Message digest (hash) computation support.\n\n[kdf](https://docs.rs/openssl/latest/openssl/kdf/index.html \"mod openssl::kdf\")\n\n\n[lib_ctx](https://docs.rs/openssl/latest/openssl/lib_ctx/index.html \"mod openssl::lib_ctx\")\n\n\n[md](https://docs.rs/openssl/latest/openssl/md/index.html \"mod openssl::md\")\n    Message digest algorithms.\n\n[md_ctx](https://docs.rs/openssl/latest/openssl/md_ctx/index.html \"mod openssl::md_ctx\")\n    The message digest context.\n\n[memcmp](https://docs.rs/openssl/latest/openssl/memcmp/index.html \"mod openssl::memcmp\")\n    Utilities to safely compare cryptographic values.\n\n[nid](https://docs.rs/openssl/latest/openssl/nid/index.html \"mod openssl::nid\")\n    A collection of numerical identifiers for OpenSSL objects.\n\n[ocsp](https://docs.rs/openssl/latest/openssl/ocsp/index.html \"mod openssl::ocsp\")\n\n\n[pkcs5](https://docs.rs/openssl/latest/openssl/pkcs5/index.html \"mod openssl::pkcs5\")\n\n\n[pkcs7](https://docs.rs/openssl/latest/openssl/pkcs7/index.html \"mod openssl::pkcs7\")\n\n\n[pkcs12](https://docs.rs/openssl/latest/openssl/pkcs12/index.html \"mod openssl::pkcs12\")\n    PKCS #12 archives.\n\n[pkey](https://docs.rs/openssl/latest/openssl/pkey/index.html \"mod openssl::pkey\")\n    Public/private key processing.\n\n[pkey_ctx](https://docs.rs/openssl/latest/openssl/pkey_ctx/index.html \"mod openssl::pkey_ctx\")\n    The asymmetric encryption context.\n\n[provider](https://docs.rs/openssl/latest/openssl/provider/index.html \"mod openssl::provider\")\n\n\n[rand](https://docs.rs/openssl/latest/openssl/rand/index.html \"mod openssl::rand\")\n    Utilities for secure random number generation.\n\n[rsa](https://docs.rs/openssl/latest/openssl/rsa/index.html \"mod openssl::rsa\")\n    Rivest\u2013Shamir\u2013Adleman cryptosystem\n\n[sha](https://docs.rs/openssl/latest/openssl/sha/index.html \"mod openssl::sha\")\n    The SHA family of hashes.\n\n[sign](https://docs.rs/openssl/latest/openssl/sign/index.html \"mod openssl::sign\")\n    Message signatures.\n\n[srtp](https://docs.rs/openssl/latest/openssl/srtp/index.html \"mod openssl::srtp\")\n\n\n[ssl](https://docs.rs/openssl/latest/openssl/ssl/index.html \"mod openssl::ssl\")\n    SSL/TLS support.\n\n[stack](https://docs.rs/openssl/latest/openssl/stack/index.html \"mod openssl::stack\")\n\n\n[string](https://docs.rs/openssl/latest/openssl/string/index.html \"mod openssl::string\")\n\n\n[symm](https://docs.rs/openssl/latest/openssl/symm/index.html \"mod openssl::symm\")\n    High level interface to certain symmetric ciphers.\n\n[version](https://docs.rs/openssl/latest/openssl/version/index.html \"mod openssl::version\")\n    Build and version information.\n\n[x509](https://docs.rs/openssl/latest/openssl/x509/index.html \"mod openssl::x509\")\n    The standard defining the format of public key certificates.\n## Functions[\u00a7](https://docs.rs/openssl/latest/openssl/#functions)\n\n[init](https://docs.rs/openssl/latest/openssl/fn.init.html \"fn openssl::init\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/openssl/latest/openssl/all.html \"show sidebar\")\n# Crate opensslCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nBindings to OpenSSL\nThis crate provides a safe interface to the popular OpenSSL cryptography library. OpenSSL versions 1.0.1 through 3.x.x and LibreSSL versions 2.5 through 3.7.x are supported.\n## \u00a7\u27e84\u27e9Building\nBoth OpenSSL libraries and headers are required to build this crate. There are multiple options available to locate OpenSSL.\n### \u00a7\u27e85\u27e9Vendored\nIf the `vendored` Cargo feature is enabled, the `openssl-src` crate will be used to compile and statically link to a copy of OpenSSL. The build process requires a C compiler, perl (and perl-core), and make. The OpenSSL version will generally track the newest OpenSSL release, and changes to the version are _not_ considered breaking changes.\n```\n[dependencies]\nopenssl = { version = \"0.10\", features = [\"vendored\"] }\n```\n\nThe vendored copy will be configured to automatically find a configuration and root certificates at `/usr/local/ssl`. This path can be overridden with an environment variable (see the manual section below). Alternatively, the `openssl-probe` crate can be used to find root certificates at runtime.\n### \u00a7\u27e86\u27e9Automatic\nThe `openssl-sys` crate will automatically detect OpenSSL installations via Homebrew on macOS and vcpkg on Windows. Additionally, it will use `pkg-config` on Unix-like systems to find the system installation.\n```\n# macOS (Homebrew)\n$ brew install openssl@3\n# macOS (MacPorts)\n$ sudo port install openssl\n# macOS (pkgsrc)\n$ sudo pkgin install openssl\n# Arch Linux\n$ sudo pacman -S pkgconf openssl\n# Debian and Ubuntu\n$ sudo apt-get install pkg-config libssl-dev\n# Fedora\n$ sudo dnf install pkgconf perl-FindBin perl-IPC-Cmd openssl-devel\n# Alpine Linux\n$ apk add pkgconf openssl-dev\n# openSUSE\n$ sudo zypper in libopenssl-devel\n```\n\n### \u00a7\u27e87\u27e9Manual\nA set of environment variables can be used to point `openssl-sys` towards an OpenSSL installation. They will override the automatic detection logic.\n  * `OPENSSL_DIR` - If specified, the directory of an OpenSSL installation. The directory should contain `lib` and `include` subdirectories containing the libraries and headers respectively.\n  * `OPENSSL_LIB_DIR` and `OPENSSL_INCLUDE_DIR` - If specified, the directories containing the OpenSSL libraries and headers respectively. This can be used if the OpenSSL installation is split in a nonstandard directory layout.\n  * `OPENSSL_STATIC` - If set, the crate will statically link to OpenSSL rather than dynamically link.\n  * `OPENSSL_LIBS` - If set, a `:`-separated list of library names to link to (e.g. `ssl:crypto`). This can be used if nonstandard library names were used for whatever reason.\n  * `OPENSSL_NO_VENDOR` - If set, always find OpenSSL in the system, even if the `vendored` feature is enabled.\n\n\nIf the `vendored` Cargo feature is enabled, the following environment variable can also be used to further configure the OpenSSL build.\n  * `OPENSSL_CONFIG_DIR` - If set, the copy of OpenSSL built by the `openssl-src` crate will be configured to look for configuration files and root certificates in this directory.\n\n\nAdditionally, these variables can be prefixed with the upper-cased target architecture (e.g. `X86_64_UNKNOWN_LINUX_GNU_OPENSSL_DIR`), which can be useful when cross compiling.\n## \u00a7\u27e88\u27e9Feature Detection\nAPIs have been added to and removed from the various supported OpenSSL versions, and this library exposes the functionality available in the version being linked against. This means that methods, constants, and even modules will be present when building against one version of OpenSSL but not when building against another! APIs will document any version-specific availability restrictions.\nA build script can be used to detect the OpenSSL or LibreSSL version at compile time if needed. The `openssl-sys` crate propagates the version via the `DEP_OPENSSL_VERSION_NUMBER` and `DEP_OPENSSL_LIBRESSL_VERSION_NUMBER` environment variables to build scripts. The version format is a hex-encoding of the OpenSSL release version: `0xMNNFFPPS`. For example, version 1.0.2g\u2019s encoding is `0x1_00_02_07_0`.\nFor example, let\u2019s say we want to adjust the TLSv1.3 cipher suites used by a client, but also want to compile against OpenSSL versions that don\u2019t support TLSv1.3:\nCargo.toml:\n```\n[dependencies]\nopenssl-sys = \"0.9\"\nopenssl = \"0.10\"\n```\n\nbuild.rs:\n```\nuse std::env;\nfn main() {\n  if let Ok(v) = env::var(\"DEP_OPENSSL_VERSION_NUMBER\") {\n    let version = u64::from_str_radix(&v, 16).unwrap();\n    if version >= 0x1_01_01_00_0 {\n      println!(\"cargo:rustc-cfg=openssl111\");\n    }\n  }\n}\n```\n\nlib.rs:\n```\nuse openssl::ssl::{SslConnector, SslMethod};\nlet mut ctx = SslConnector::builder(SslMethod::tls()).unwrap();\n// set_ciphersuites was added in OpenSSL 1.1.1, so we can only call it when linking against that version\n#[cfg(openssl111)]\nctx.set_ciphersuites(\"TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256\").unwrap();\n```\n\n## Modules\u00a7\u27e89\u27e9\n\naes\u27e810\u27e9\n    Low level AES IGE and key wrapping functionality\n\nasn1\u27e811\u27e9\n    Defines the format of certificates\n\nbase64\u27e812\u27e9\n    Base64 encoding support.\n\nbn\u27e813\u27e9\n    BigNum implementation\n\ncipher\u27e814\u27e9\n    Symmetric ciphers.\n\ncipher_ctx\u27e815\u27e9\n    The symmetric encryption context.\n\ncms\u27e816\u27e9\n    SMIME implementation using CMS\n\nconf\u27e817\u27e9\n    Interface for processing OpenSSL configuration files.\n\nderive\u27e818\u27e9\n    Shared secret derivation.\n\ndh\u27e819\u27e9\n    Diffie-Hellman key agreement.\n\ndsa\u27e820\u27e9\n    Digital Signatures\n\nec\u27e821\u27e9\n    Elliptic Curve\n\necdsa\u27e822\u27e9\n    Low level Elliptic Curve Digital Signature Algorithm (ECDSA) functions.\n\nencrypt\u27e823\u27e9\n    Message encryption.\n\nenvelope\u27e824\u27e9\n    Envelope encryption.\n\nerror\u27e825\u27e9\n    Errors returned by OpenSSL library.\n\nex_data\u27e826\u27e9\n\n\nhash\u27e827\u27e9\n    Message digest (hash) computation support.\n\nkdf\u27e828\u27e9\n\n\nlib_ctx\u27e829\u27e9\n\n\nmd\u27e830\u27e9\n    Message digest algorithms.\n\nmd_ctx\u27e831\u27e9\n    The message digest context.\n\nmemcmp\u27e832\u27e9\n    Utilities to safely compare cryptographic values.\n\nnid\u27e833\u27e9\n    A collection of numerical identifiers for OpenSSL objects.\n\nocsp\u27e834\u27e9\n\n\npkcs5\u27e835\u27e9\n\n\npkcs7\u27e836\u27e9\n\n\npkcs12\u27e837\u27e9\n    PKCS #12 archives.\n\npkey\u27e838\u27e9\n    Public/private key processing.\n\npkey_ctx\u27e839\u27e9\n    The asymmetric encryption context.\n\nprovider\u27e840\u27e9\n\n\nrand\u27e841\u27e9\n    Utilities for secure random number generation.\n\nrsa\u27e842\u27e9\n    Rivest\u2013Shamir\u2013Adleman cryptosystem\n\nsha\u27e843\u27e9\n    The SHA family of hashes.\n\nsign\u27e844\u27e9\n    Message signatures.\n\nsrtp\u27e845\u27e9\n\n\nssl\u27e846\u27e9\n    SSL/TLS support.\n\nstack\u27e847\u27e9\n\n\nstring\u27e848\u27e9\n\n\nsymm\u27e849\u27e9\n    High level interface to certain symmetric ciphers.\n\nversion\u27e850\u27e9\n    Build and version information.\n\nx509\u27e851\u27e9\n    The standard defining the format of public key certificates.\n## Functions\u00a7\u27e852\u27e9\n\ninit\u27e853\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/openssl/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/openssl/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/openssl/latest/src/openssl/lib.rs.html#1-257: Source\n\u27e84\u27e9 https://docs.rs/openssl/latest/openssl/#building: \u00a7\n\u27e85\u27e9 https://docs.rs/openssl/latest/openssl/#vendored: \u00a7\n\u27e86\u27e9 https://docs.rs/openssl/latest/openssl/#automatic: \u00a7\n\u27e87\u27e9 https://docs.rs/openssl/latest/openssl/#manual: \u00a7\n\u27e88\u27e9 https://docs.rs/openssl/latest/openssl/#feature-detection: \u00a7\n\u27e89\u27e9 https://docs.rs/openssl/latest/openssl/#modules: \u00a7\n\u27e810\u27e9 https://docs.rs/openssl/latest/openssl/aes/index.html: mod openssl::aes - aes\n\u27e811\u27e9 https://docs.rs/openssl/latest/openssl/asn1/index.html: mod openssl::asn1 - asn1\n\u27e812\u27e9 https://docs.rs/openssl/latest/openssl/base64/index.html: mod openssl::base64 - base64\n\u27e813\u27e9 https://docs.rs/openssl/latest/openssl/bn/index.html: mod openssl::bn - bn\n\u27e814\u27e9 https://docs.rs/openssl/latest/openssl/cipher/index.html: mod openssl::cipher - cipher\n\u27e815\u27e9 https://docs.rs/openssl/latest/openssl/cipher_ctx/index.html: mod openssl::cipher_ctx - cipher_ctx\n\u27e816\u27e9 https://docs.rs/openssl/latest/openssl/cms/index.html: mod openssl::cms - cms\n\u27e817\u27e9 https://docs.rs/openssl/latest/openssl/conf/index.html: mod openssl::conf - conf\n\u27e818\u27e9 https://docs.rs/openssl/latest/openssl/derive/index.html: mod openssl::derive - derive\n\u27e819\u27e9 https://docs.rs/openssl/latest/openssl/dh/index.html: mod openssl::dh - dh\n\u27e820\u27e9 https://docs.rs/openssl/latest/openssl/dsa/index.html: mod openssl::dsa - dsa\n\u27e821\u27e9 https://docs.rs/openssl/latest/openssl/ec/index.html: mod openssl::ec - ec\n\u27e822\u27e9 https://docs.rs/openssl/latest/openssl/ecdsa/index.html: mod openssl::ecdsa - ecdsa\n\u27e823\u27e9 https://docs.rs/openssl/latest/openssl/encrypt/index.html: mod openssl::encrypt - encrypt\n\u27e824\u27e9 https://docs.rs/openssl/latest/openssl/envelope/index.html: mod openssl::envelope - envelope\n\u27e825\u27e9 https://docs.rs/openssl/latest/openssl/error/index.html: mod openssl::error - error\n\u27e826\u27e9 https://docs.rs/openssl/latest/openssl/ex_data/index.html: mod openssl::ex_data - ex_data\n\u27e827\u27e9 https://docs.rs/openssl/latest/openssl/hash/index.html: mod openssl::hash - hash\n\u27e828\u27e9 https://docs.rs/openssl/latest/openssl/kdf/index.html: mod openssl::kdf - kdf\n\u27e829\u27e9 https://docs.rs/openssl/latest/openssl/lib_ctx/index.html: mod openssl::lib_ctx - lib_ctx\n\u27e830\u27e9 https://docs.rs/openssl/latest/openssl/md/index.html: mod openssl::md - md\n\u27e831\u27e9 https://docs.rs/openssl/latest/openssl/md_ctx/index.html: mod openssl::md_ctx - md_ctx\n\u27e832\u27e9 https://docs.rs/openssl/latest/openssl/memcmp/index.html: mod openssl::memcmp - memcmp\n\u27e833\u27e9 https://docs.rs/openssl/latest/openssl/nid/index.html: mod openssl::nid - nid\n\u27e834\u27e9 https://docs.rs/openssl/latest/openssl/ocsp/index.html: mod openssl::ocsp - ocsp\n\u27e835\u27e9 https://docs.rs/openssl/latest/openssl/pkcs5/index.html: mod openssl::pkcs5 - pkcs5\n\u27e836\u27e9 https://docs.rs/openssl/latest/openssl/pkcs7/index.html: mod openssl::pkcs7 - pkcs7\n\u27e837\u27e9 https://docs.rs/openssl/latest/openssl/pkcs12/index.html: mod openssl::pkcs12 - pkcs12\n\u27e838\u27e9 https://docs.rs/openssl/latest/openssl/pkey/index.html: mod openssl::pkey - pkey\n\u27e839\u27e9 https://docs.rs/openssl/latest/openssl/pkey_ctx/index.html: mod openssl::pkey_ctx - pkey_ctx\n\u27e840\u27e9 https://docs.rs/openssl/latest/openssl/provider/index.html: mod openssl::provider - provider\n\u27e841\u27e9 https://docs.rs/openssl/latest/openssl/rand/index.html: mod openssl::rand - rand\n\u27e842\u27e9 https://docs.rs/openssl/latest/openssl/rsa/index.html: mod openssl::rsa - rsa\n\u27e843\u27e9 https://docs.rs/openssl/latest/openssl/sha/index.html: mod openssl::sha - sha\n\u27e844\u27e9 https://docs.rs/openssl/latest/openssl/sign/index.html: mod openssl::sign - sign\n\u27e845\u27e9 https://docs.rs/openssl/latest/openssl/srtp/index.html: mod openssl::srtp - srtp\n\u27e846\u27e9 https://docs.rs/openssl/latest/openssl/ssl/index.html: mod openssl::ssl - ssl\n\u27e847\u27e9 https://docs.rs/openssl/latest/openssl/stack/index.html: mod openssl::stack - stack\n\u27e848\u27e9 https://docs.rs/openssl/latest/openssl/string/index.html: mod openssl::string - string\n\u27e849\u27e9 https://docs.rs/openssl/latest/openssl/symm/index.html: mod openssl::symm - symm\n\u27e850\u27e9 https://docs.rs/openssl/latest/openssl/version/index.html: mod openssl::version - version\n\u27e851\u27e9 https://docs.rs/openssl/latest/openssl/x509/index.html: mod openssl::x509 - x509\n\u27e852\u27e9 https://docs.rs/openssl/latest/openssl/#functions: \u00a7\n\u27e853\u27e9 https://docs.rs/openssl/latest/openssl/fn.init.html: fn openssl::init - init\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `openssl` crate provides safe Rust bindings to the OpenSSL cryptography library, supporting OpenSSL versions 1.0.1 to 3.x.x and LibreSSL versions 2.5 to 3.7.x. It offers comprehensive functionality for cryptographic operations, including symmetric and asymmetric encryption, hashing, SSL/TLS support, and certificate handling (e.g., X.509). The crate supports flexible build configurations, including vendored builds, automatic system detection, and manual setup via environment variables.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1: Building and Linking OpenSSL  \n\u2705 Factual: The `openssl` crate supports both dynamic and static linking to OpenSSL, with the `vendored` feature enabling static linking via the `openssl-src` crate.  \n\u274c Counterfactual: The `openssl` crate only supports dynamic linking to OpenSSL and does not provide an option for static linking.\n\n---\n\n### Pair 2: Supported OpenSSL Versions  \n\u2705 Factual: The `openssl` crate supports OpenSSL versions ranging from 1.0.1 through 3.x.x and LibreSSL versions 2.5 through 3.7.x.  \n\u274c Counterfactual: The `openssl` crate only supports OpenSSL versions 1.1.1 and above, making it incompatible with older versions like 1.0.1.\n\n---\n\n### Pair 3: Feature Detection  \n\u2705 Factual: The `openssl` crate uses environment variables like `DEP_OPENSSL_VERSION_NUMBER` to detect the OpenSSL version at compile time, allowing conditional compilation of version-specific features.  \n\u274c Counterfactual: The `openssl` crate does not provide any mechanism to detect the OpenSSL version at compile time, requiring manual configuration for version-specific features.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}