{
    "name": "ahash",
    "version": "0.8.12",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/ahash/latest/ahash/all.html \"show sidebar\")\n# Crate ahashCopy item path\n[Settings](https://docs.rs/ahash/latest/settings.html)\n[Help](https://docs.rs/ahash/latest/help.html)\nSummary[Source](https://docs.rs/ahash/latest/src/ahash/lib.rs.html#1-358)\nExpand description\nAHash is a high performance keyed hash function.\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key. AHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can induce a collision.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#how-ahash-works)How aHash works\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function. When it is not, aHash falls back on a slightly slower alternative algorithm.\nBecause aHash does not have a fixed standard for its output, it is able to improve over time. But this also means that different computers or computers using different versions of ahash may observe different hash values for the same input.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#basic-usage)Basic Usage\nAHash provides an implementation of the [Hasher] trait. To construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n#### [\u00a7](https://docs.rs/ahash/latest/ahash/#randomness)Randomness\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS. It is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n#### [\u00a7](https://docs.rs/ahash/latest/ahash/#if-randomness-is-not-available)If randomness is not available\n[AHasher::default()](https://docs.rs/ahash/latest/ahash/struct.AHasher.html#method.default \"associated function ahash::AHasher::default\") can be used to hash using fixed keys. This works with [BuildHasherDefault](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\"). For example:\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n```\n\nIt is also possible to instantiate [RandomState](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") directly:\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n```\n\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\n\nThere are several constructors for [RandomState](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") with different ways to supply seeds.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#convenience-wrappers)Convenience wrappers\nFor convenience, both new-type wrappers and type aliases are provided.\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\n\nThis avoids the need to type \u201cRandomState\u201d. (For convenience `From`, `Into`, and `Deref` are provided).\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#aliases)Aliases\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` , the type aliases [HashMap](https://docs.rs/ahash/latest/ahash/type.HashMap.html \"type ahash::HashMap\"), [HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\") are provided.\n```\nuse ahash::{HashMap, HashMapExt};\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\n\nNote the import of [HashMapExt](https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html \"trait ahash::HashMapExt\"). This is needed for the constructor.\n## Re-exports[\u00a7](https://docs.rs/ahash/latest/ahash/#reexports)\n\n`pub use crate::random_state::RandomState[](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\");`\n\n## Modules[\u00a7](https://docs.rs/ahash/latest/ahash/#modules)\n\n[random_state](https://docs.rs/ahash/latest/ahash/random_state/index.html \"mod ahash::random_state\")\n\n## Structs[\u00a7](https://docs.rs/ahash/latest/ahash/#structs)\n\n[AHashMap](https://docs.rs/ahash/latest/ahash/struct.AHashMap.html \"struct ahash::AHashMap\")\n    A [`HashMap`](https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html \"struct std::collections::hash::map::HashMap\") using [`RandomState`](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") to hash the items. (Requires the `std` feature to be enabled.)\n\n[AHashSet](https://docs.rs/ahash/latest/ahash/struct.AHashSet.html \"struct ahash::AHashSet\")\n    A [`HashSet`](https://doc.rust-lang.org/nightly/std/collections/hash/set/struct.HashSet.html \"struct std::collections::hash::set::HashSet\") using [`RandomState`](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") to hash the items. (Requires the `std` feature to be enabled.)\n\n[AHasher](https://docs.rs/ahash/latest/ahash/struct.AHasher.html \"struct ahash::AHasher\")\n    A `Hasher` for hashing an arbitrary stream of bytes.\n## Traits[\u00a7](https://docs.rs/ahash/latest/ahash/#traits)\n\n[HashMapExt](https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html \"trait ahash::HashMapExt\")\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashMap type alias.\n\n[HashSetExt](https://docs.rs/ahash/latest/ahash/trait.HashSetExt.html \"trait ahash::HashSetExt\")\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashSet type aliases.\n## Type Aliases[\u00a7](https://docs.rs/ahash/latest/ahash/#types)\n\n[HashMap](https://docs.rs/ahash/latest/ahash/type.HashMap.html \"type ahash::HashMap\")\n    Type alias for [HashMap](https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html \"struct std::collections::hash::map::HashMap\")<K, V, ahash::RandomState>\n\n[HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\")\n    Type alias for [HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\")<K, ahash::RandomState>\n",
        "markdown_with_citations": "[](https://docs.rs/ahash/latest/ahash/all.html \"show sidebar\")\n# Crate ahashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAHash is a high performance keyed hash function.\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key. AHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can induce a collision.\n## \u00a7\u27e84\u27e9How aHash works\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function. When it is not, aHash falls back on a slightly slower alternative algorithm.\nBecause aHash does not have a fixed standard for its output, it is able to improve over time. But this also means that different computers or computers using different versions of ahash may observe different hash values for the same input.\n## \u00a7\u27e85\u27e9Basic Usage\nAHash provides an implementation of the [Hasher] trait. To construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n#### \u00a7\u27e86\u27e9Randomness\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS. It is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n#### \u00a7\u27e87\u27e9If randomness is not available\nAHasher::default()\u27e88\u27e9 can be used to hash using fixed keys. This works with BuildHasherDefault\u27e89\u27e9. For example:\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n```\n\nIt is also possible to instantiate RandomState\u27e810\u27e9 directly:\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n```\n\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\n\nThere are several constructors for RandomState\u27e810\u27e9 with different ways to supply seeds.\n## \u00a7\u27e811\u27e9Convenience wrappers\nFor convenience, both new-type wrappers and type aliases are provided.\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\n\nThis avoids the need to type \u201cRandomState\u201d. (For convenience `From`, `Into`, and `Deref` are provided).\n## \u00a7\u27e812\u27e9Aliases\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` , the type aliases HashMap\u27e813\u27e9, HashSet\u27e814\u27e9 are provided.\n```\nuse ahash::{HashMap, HashMapExt};\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\n\nNote the import of HashMapExt\u27e815\u27e9. This is needed for the constructor.\n## Re-exports\u00a7\u27e816\u27e9\n\n`pub use crate::random_state::RandomState[](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\");`\n\n## Modules\u00a7\u27e817\u27e9\n\nrandom_state\u27e818\u27e9\n\n## Structs\u00a7\u27e819\u27e9\n\nAHashMap\u27e820\u27e9\n    A `HashMap`\u27e821\u27e9 using `RandomState`\u27e810\u27e9 to hash the items. (Requires the `std` feature to be enabled.)\n\nAHashSet\u27e822\u27e9\n    A `HashSet`\u27e823\u27e9 using `RandomState`\u27e810\u27e9 to hash the items. (Requires the `std` feature to be enabled.)\n\nAHasher\u27e824\u27e9\n    A `Hasher` for hashing an arbitrary stream of bytes.\n## Traits\u00a7\u27e825\u27e9\n\nHashMapExt\u27e815\u27e9\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashMap type alias.\n\nHashSetExt\u27e826\u27e9\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashSet type aliases.\n## Type Aliases\u00a7\u27e827\u27e9\n\nHashMap\u27e813\u27e9\n    Type alias for HashMap\u27e821\u27e9<K, V, ahash::RandomState>\n\nHashSet\u27e814\u27e9\n    Type alias for HashSet\u27e814\u27e9<K, ahash::RandomState>\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ahash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ahash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ahash/latest/src/ahash/lib.rs.html#1-358: Source\n\u27e84\u27e9 https://docs.rs/ahash/latest/ahash/#how-ahash-works: \u00a7\n\u27e85\u27e9 https://docs.rs/ahash/latest/ahash/#basic-usage: \u00a7\n\u27e86\u27e9 https://docs.rs/ahash/latest/ahash/#randomness: \u00a7\n\u27e87\u27e9 https://docs.rs/ahash/latest/ahash/#if-randomness-is-not-available: \u00a7\n\u27e88\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHasher.html#method.default: associated function ahash::AHasher::default - AHasher::default()\n\u27e89\u27e9 https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html: struct core::hash::BuildHasherDefault - BuildHasherDefault\n\u27e810\u27e9 https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html: struct ahash::random_state::RandomState - RandomState\n\u27e811\u27e9 https://docs.rs/ahash/latest/ahash/#convenience-wrappers: \u00a7\n\u27e812\u27e9 https://docs.rs/ahash/latest/ahash/#aliases: \u00a7\n\u27e813\u27e9 https://docs.rs/ahash/latest/ahash/type.HashMap.html: type ahash::HashMap - HashMap\n\u27e814\u27e9 https://docs.rs/ahash/latest/ahash/type.HashSet.html: type ahash::HashSet - HashSet\n\u27e815\u27e9 https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html: trait ahash::HashMapExt - HashMapExt\n\u27e816\u27e9 https://docs.rs/ahash/latest/ahash/#reexports: \u00a7\n\u27e817\u27e9 https://docs.rs/ahash/latest/ahash/#modules: \u00a7\n\u27e818\u27e9 https://docs.rs/ahash/latest/ahash/random_state/index.html: mod ahash::random_state - random_state\n\u27e819\u27e9 https://docs.rs/ahash/latest/ahash/#structs: \u00a7\n\u27e820\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHashMap.html: struct ahash::AHashMap - AHashMap\n\u27e821\u27e9 https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html: struct std::collections::hash::map::HashMap - `HashMap`\n\u27e822\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHashSet.html: struct ahash::AHashSet - AHashSet\n\u27e823\u27e9 https://doc.rust-lang.org/nightly/std/collections/hash/set/struct.HashSet.html: struct std::collections::hash::set::HashSet - `HashSet`\n\u27e824\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHasher.html: struct ahash::AHasher - AHasher\n\u27e825\u27e9 https://docs.rs/ahash/latest/ahash/#traits: \u00a7\n\u27e826\u27e9 https://docs.rs/ahash/latest/ahash/trait.HashSetExt.html: trait ahash::HashSetExt - HashSetExt\n\u27e827\u27e9 https://docs.rs/ahash/latest/ahash/#types: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `ahash` crate provides a high-performance, keyed hash function optimized for use with `HashMap` and `HashSet`, leveraging hardware AES instructions when available for fast and secure hashing. It supports customizable randomness sources, fixed keys for deterministic hashing, and convenience wrappers (`AHashMap`, `AHashSet`) and type aliases (`HashMap`, `HashSet`) for easier integration. The crate's output is non-standardized, allowing for future improvements while ensuring collision resistance against malicious inputs.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Hashing Algorithm and Performance\n\u2705 Factual: AHash uses hardware AES instructions when available to provide a high-performance keyed hash function, and falls back to a slower alternative algorithm when AES is not supported.  \n\u274c Counterfactual: AHash always uses a fixed hashing algorithm regardless of hardware capabilities, ensuring consistent performance across all systems.\n\n---\n\n### Pair 2: HashMap Integration\n\u2705 Factual: AHash can be used to construct a `HashMap` with `RandomState` as its hasher, providing enhanced protection against malicious collision attacks.  \n\u274c Counterfactual: AHash requires custom implementations of `HashMap` and cannot integrate with the standard Rust `HashMap` API.\n\n---\n\n### Pair 3: Randomness and Seeds\n\u2705 Factual: AHash allows the use of OS-provided randomness by default for generating keys, but also supports manual seed initialization through `RandomState::with_seed()`.  \n\u274c Counterfactual: AHash mandates compile-time randomness generation and does not support runtime initialization of seeds.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}