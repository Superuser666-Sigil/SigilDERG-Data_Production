{
    "name": "miette",
    "version": "7.6.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/miette/latest/miette/all.html \"show sidebar\")\n# Crate mietteCopy item path\n[Settings](https://docs.rs/miette/latest/settings.html)\n[Help](https://docs.rs/miette/latest/help.html)\nSummary[Source](https://docs.rs/miette/latest/src/miette/lib.rs.html#1-838)\nExpand description\nYou run miette? You run her code like the software? Oh. Oh! Error code for coder! Error code for One Thousand Lines!\n### [\u00a7](https://docs.rs/miette/latest/miette/#about)About\n`miette` is a diagnostic library for Rust. It includes a series of traits/protocols that allow you to hook into its error reporting facilities, and even write your own error reports! It lets you define error types that can print out like this (or in any format you like!):\n![Hi! miette also includes a screen-reader-oriented diagnostic printer that's enabled in various situations, such as when you use NO_COLOR or CLICOLOR settings, or on CI. This behavior is also fully configurable and customizable. For example, this is what this particular diagnostic will look like when the narrated printer is enabled:\n\\\\\nError: Received some bad JSON from the source. Unable to parse.\n  Caused by: missing field `foo` at line 1 column 1700\n\\\\\nBegin snippet for https://api.nuget.org/v3/registration5-gz-semver2/json.net/index.json starting\nat line 1, column 1659\n\\\\\nsnippet line 1: gs\":\\[\"json\"\\],\"title\":\"\",\"version\":\"1.0.0\"},\"packageContent\":\"https://api.nuget.o\n  highlight starting at line 1, column 1699: last parsing location\n\\\\\ndiagnostic help: This is a bug. It might be in ruget, or it might be in the\nsource you're using, but it's definitely a bug and should be reported.\ndiagnostic error code: ruget::api::bad_json\n](https://raw.githubusercontent.com/zkat/miette/main/images/serde_json.png)\n> **NOTE: You must enable the`\"fancy\"` crate feature to get fancy report output like in the screenshots above.** You should only do this in your toplevel crate, as the fancy feature pulls in a number of dependencies that libraries and such might not want.\n### [\u00a7](https://docs.rs/miette/latest/miette/#table-of-contents-)Table of Contents \n  * [About](https://docs.rs/miette/latest/miette/#about)\n  * [Features](https://docs.rs/miette/latest/miette/#features)\n  * [Installing](https://docs.rs/miette/latest/miette/#installing)\n  * [Example](https://docs.rs/miette/latest/miette/#example)\n  * [Using](https://docs.rs/miette/latest/miette/#using)\n    * [\u2026 in libraries](https://docs.rs/miette/latest/miette/#-in-libraries)\n    * [\u2026 in application code](https://docs.rs/miette/latest/miette/#-in-application-code)\n    * [\u2026 in `main()`](https://docs.rs/miette/latest/miette/#-in-main)\n    * [\u2026 diagnostic code URLs](https://docs.rs/miette/latest/miette/#-diagnostic-code-urls)\n    * [\u2026 snippets](https://docs.rs/miette/latest/miette/#-snippets)\n    * [\u2026 help text](https://docs.rs/miette/latest/miette/#-help-text)\n    * [\u2026 severity level](https://docs.rs/miette/latest/miette/#-severity-level)\n    * [\u2026 multiple related errors](https://docs.rs/miette/latest/miette/#-multiple-related-errors)\n    * [\u2026 delayed source code](https://docs.rs/miette/latest/miette/#-delayed-source-code)\n    * [\u2026 handler options](https://docs.rs/miette/latest/miette/#-handler-options)\n    * [\u2026 dynamic diagnostics](https://docs.rs/miette/latest/miette/#-dynamic-diagnostics)\n    * [\u2026 syntax highlighting](https://docs.rs/miette/latest/miette/#-syntax-highlighting)\n    * [\u2026 primary label](https://docs.rs/miette/latest/miette/#-primary-label)\n    * [\u2026 collection of labels](https://docs.rs/miette/latest/miette/#-collection-of-labels)\n  * [Acknowledgements](https://docs.rs/miette/latest/miette/#acknowledgements)\n  * [License](https://docs.rs/miette/latest/miette/#license)\n\n\n### [\u00a7](https://docs.rs/miette/latest/miette/#features)Features\n  * Generic [`Diagnostic`](https://docs.rs/miette/latest/miette/trait.Diagnostic.html \"trait miette::Diagnostic\") protocol, compatible (and dependent on) [`std::error::Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\").\n  * Unique error codes on every [`Diagnostic`](https://docs.rs/miette/latest/miette/trait.Diagnostic.html \"trait miette::Diagnostic\").\n  * Custom links to get more details on error codes.\n  * Super handy derive macro for defining diagnostic metadata.\n  * Replacements for [`anyhow`](https://docs.rs/anyhow)/[`eyre`](https://docs.rs/eyre) types [`Result`](https://docs.rs/miette/latest/miette/type.Result.html \"type miette::Result\"), [`Report`](https://docs.rs/miette/latest/miette/struct.Error.html \"struct miette::Error\") and the [`miette!`](https://docs.rs/miette/latest/miette/macro.miette.html \"macro miette::miette\") macro for the `anyhow!`/`eyre!` macros.\n  * Generic support for arbitrary [`SourceCode`](https://docs.rs/miette/latest/miette/trait.SourceCode.html \"trait miette::SourceCode\")s for snippet data, with default support for `String`s included.\n\n\nThe `miette` crate also comes bundled with a default [`ReportHandler`](https://docs.rs/miette/latest/miette/trait.ReportHandler.html \"trait miette::ReportHandler\") with the following features:\n  * Fancy graphical [diagnostic output](https://docs.rs/miette/latest/miette/#about), using ANSI/Unicode text\n  * single- and multi-line highlighting support\n  * Screen reader/braille support, gated on [`NO_COLOR`](http://no-color.org/), and other heuristics.\n  * Fully customizable graphical theming (or overriding the printers entirely).\n  * Cause chain printing\n  * Turns diagnostic codes into links in [supported terminals](https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda).\n\n\n### [\u00a7](https://docs.rs/miette/latest/miette/#installing)Installing\n```\n$ cargo add miette\n```\n\nIf you want to use the fancy printer in all these screenshots:\n```\n$ cargo add miette --features fancy\n```\n\n### [\u00a7](https://docs.rs/miette/latest/miette/#example)Example\n```\n/*\nYou can derive a `Diagnostic` from any `std::error::Error` type.\n`thiserror` is a great way to define them, and plays nicely with `miette`!\n*/\nuse miette::{Diagnostic, NamedSource, SourceSpan};\nuse thiserror::Error;\n#[derive(Error, Debug, Diagnostic)]\n#[error(\"oops!\")]\n#[diagnostic(\n  code(oops::my::bad),\n  url(docsrs),\n  help(\"try doing it better next time?\")\n)]\nstruct MyBad {\n  // The Source that we're gonna be printing snippets out of.\n  // This can be a String if you don't have or care about file names.\n  #[source_code]\n  src: NamedSource<String>,\n  // Snippets and highlights can be included in the diagnostic!\n  #[label(\"This bit here\")]\n  bad_bit: SourceSpan,\n}\n/*\nNow let's define a function!\nUse this `Result` type (or its expanded version) as the return type\nthroughout your app (but NOT your libraries! Those should always return\nconcrete types!).\n*/\nuse miette::Result;\nfn this_fails() -> Result<()> {\n  // You can use plain strings as a `Source`, or anything that implements\n  // the one-method `Source` trait.\n  let src = \"source\\n text\\n  here\".to_string();\n  Err(MyBad {\n    src: NamedSource::new(\"bad_file.rs\", src),\n    bad_bit: (9, 4).into(),\n  })?;\n  Ok(())\n}\n/*\nNow to get everything printed nicely, just return a `Result<()>`\nand you're all set!\nNote: You can swap out the default reporter for a custom one using\n`miette::set_hook()`\n*/\nfn pretend_this_is_main() -> Result<()> {\n  // kaboom~\n  this_fails()?;\n  Ok(())\n}\n```\n\nAnd this is the output you\u2019ll get if you run this program:\n![\nNarratable printout:\n\\\\\ndiagnostic error code: oops::my::bad \\(link\\)\nError: oops!\n\\\\\nBegin snippet for bad_file.rs starting\nat line 2, column 3\n\\\\\nsnippet line 1: source\n\\\\\nsnippet line 2: text\n  highlight starting at line 1, column 3: This bit here\n\\\\\nsnippet line 3: here\n\\\\\ndiagnostic help: try doing it better next time?](https://raw.githubusercontent.com/zkat/miette/main/images/single-line-example.png)\n### [\u00a7](https://docs.rs/miette/latest/miette/#using)Using\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-in-libraries)\u2026 in libraries\n`miette` is _fully compatible_ with library usage. Consumers who don\u2019t know about, or don\u2019t want, `miette` features can safely use its error types as regular [`std::error::Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\").\nWe highly recommend using something like [`thiserror`](https://docs.rs/thiserror) to define unique error types and error wrappers for your library.\nWhile `miette` integrates smoothly with `thiserror`, it is _not required_. If you don\u2019t want to use the [`Diagnostic`](https://docs.rs/miette/latest/miette/trait.Diagnostic.html \"trait miette::Diagnostic\") derive macro, you can implement the trait directly, just like with `std::error::Error`.\n```\n// lib/error.rs\nuse miette::{Diagnostic, SourceSpan};\nuse thiserror::Error;\n#[derive(Error, Diagnostic, Debug)]\npub enum MyLibError {\n  #[error(transparent)]\n  #[diagnostic(code(my_lib::io_error))]\n  IoError(#[from] std::io::Error),\n  #[error(\"Oops it blew up\")]\n  #[diagnostic(code(my_lib::bad_code))]\n  BadThingHappened,\n  #[error(transparent)]\n  // Use `#[diagnostic(transparent)]` to wrap another [`Diagnostic`]. You won't see labels otherwise\n  #[diagnostic(transparent)]\n  AnotherError(#[from] AnotherError),\n}\n#[derive(Error, Diagnostic, Debug)]\n#[error(\"another error\")]\npub struct AnotherError {\n  #[label(\"here\")]\n  pub at: SourceSpan\n}\n```\n\nThen, return this error type from all your fallible public APIs. It\u2019s a best practice to wrap any \u201cexternal\u201d error types in your error `enum` instead of using something like [`Report`](https://docs.rs/miette/latest/miette/struct.Error.html \"struct miette::Error\") in a library.\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-in-application-code)\u2026 in application code\nApplication code tends to work a little differently than libraries. You don\u2019t always need or care to define dedicated error wrappers for errors coming from external libraries and tools.\nFor this situation, `miette` includes two tools: [`Report`](https://docs.rs/miette/latest/miette/struct.Error.html \"struct miette::Error\") and [`IntoDiagnostic`](https://docs.rs/miette/latest/miette/trait.IntoDiagnostic.html \"trait miette::IntoDiagnostic\"). They work in tandem to make it easy to convert regular `std::error::Error`s into [`Diagnostic`](https://docs.rs/miette/latest/miette/trait.Diagnostic.html \"trait miette::Diagnostic\")s. Additionally, there\u2019s a [`Result`](https://docs.rs/miette/latest/miette/type.Result.html \"type miette::Result\") type alias that you can use to be more terse.\nWhen dealing with non-`Diagnostic` types, you\u2019ll want to `.into_diagnostic()` them:\n```\n// my_app/lib/my_internal_file.rs\nuse miette::{IntoDiagnostic, Result};\nuse semver::Version;\npub fn some_tool() -> Result<Version> {\n  \"1.2.x\".parse().into_diagnostic()\n}\n```\n\n`miette` also includes an `anyhow`/`eyre`-style `Context`/`WrapErr` traits that you can import to add ad-hoc context messages to your `Diagnostic`s, as well, though you\u2019ll still need to use `.into_diagnostic()` to make use of it:\n```\n// my_app/lib/my_internal_file.rs\nuse miette::{IntoDiagnostic, Result, WrapErr};\nuse semver::Version;\npub fn some_tool() -> Result<Version> {\n  \"1.2.x\"\n    .parse()\n    .into_diagnostic()\n    .wrap_err(\"Parsing this tool's semver version failed.\")\n}\n```\n\nTo construct your own simple adhoc error use the [`miette!`](https://docs.rs/miette/latest/miette/macro.miette.html \"macro miette::miette\") macro:\n```\n// my_app/lib/my_internal_file.rs\nuse miette::{miette, Result};\nuse semver::Version;\npub fn some_tool() -> Result<Version> {\n  let version = \"1.2.x\";\n  version\n    .parse()\n    .map_err(|_| miette!(\"Invalid version {}\", version))\n}\n```\n\nThere are also similar [bail!](https://docs.rs/miette/latest/miette/macro.bail.html \"macro miette::bail\") and [ensure!](https://docs.rs/miette/latest/miette/macro.ensure.html \"macro miette::ensure\") macros.\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-in-main)\u2026 in `main()`\n`main()` is just like any other part of your application-internal code. Use `Result` as your return value, and it will pretty-print your diagnostics automatically.\n> **NOTE:** You must enable the `\"fancy\"` crate feature to get fancy report output like in the screenshots here.** You should only do this in your toplevel crate, as the fancy feature pulls in a number of dependencies that libraries and such might not want.\n```\nuse miette::{IntoDiagnostic, Result};\nuse semver::Version;\nfn pretend_this_is_main() -> Result<()> {\n  let version: Version = \"1.2.x\".parse().into_diagnostic()?;\n  println!(\"{}\", version);\n  Ok(())\n}\n```\n\nPlease note: in order to get fancy diagnostic rendering with all the pretty colors and arrows, you should install `miette` with the `fancy` feature enabled:\n```\nmiette = { version = \"X.Y.Z\", features = [\"fancy\"] }\n```\n\nAnother way to display a diagnostic is by printing them using the debug formatter. This is, in fact, what returning diagnostics from main ends up doing. To do it yourself, you can write the following:\n```\nuse miette::{IntoDiagnostic, Result};\nuse semver::Version;\nfn just_a_random_function() {\n  let version_result: Result<Version> = \"1.2.x\".parse().into_diagnostic();\n  match version_result {\n    Err(e) => println!(\"{:?}\", e),\n    Ok(version) => println!(\"{}\", version),\n  }\n}\n```\n\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-diagnostic-code-urls)\u2026 diagnostic code URLs\n`miette` supports providing a URL for individual diagnostics. This URL will be displayed as an actual link in supported terminals, like so:\n![ Example showing the graphical report printer for miette\npretty-printing an error code. The code is underlined and followed by text\nsaying to 'click here'. A hover tooltip shows a full-fledged URL that can be\nCtrl+Clicked to open in a browser.\n\\\\\nThis feature is also available in the narratable printer. It will add a line\nafter printing the error code showing a plain URL that you can visit.\n](https://raw.githubusercontent.com/zkat/miette/main/images/code_linking.png)\nTo use this, you can add a `url()` sub-param to your `#[diagnostic]` attribute:\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Error, Diagnostic, Debug)]\n#[error(\"kaboom\")]\n#[diagnostic(\n  code(my_app::my_error),\n  // You can do formatting!\n  url(\"https://my_website.com/error_codes#{}\", self.code().unwrap())\n)]\nstruct MyErr;\n```\n\nAdditionally, if you\u2019re developing a library and your error type is exported from your crate\u2019s top level, you can use a special `url(docsrs)` option instead of manually constructing the URL. This will automatically create a link to this diagnostic on `docs.rs`, so folks can just go straight to your (very high quality and detailed!) documentation on this diagnostic:\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Error, Diagnostic, Debug)]\n#[diagnostic(\n  code(my_app::my_error),\n  // Will link users to https://docs.rs/my_crate/0.0.0/my_crate/struct.MyErr.html\n  url(docsrs)\n)]\n#[error(\"kaboom\")]\nstruct MyErr;\n```\n\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-snippets)\u2026 snippets\nAlong with its general error handling and reporting features, `miette` also includes facilities for adding error spans/annotations/labels to your output. This can be very useful when an error is syntax-related, but you can even use it to print out sections of your own source code!\nTo achieve this, `miette` defines its own lightweight [`SourceSpan`](https://docs.rs/miette/latest/miette/struct.SourceSpan.html \"struct miette::SourceSpan\") type. This is a basic byte-offset and length into an associated [`SourceCode`](https://docs.rs/miette/latest/miette/trait.SourceCode.html \"trait miette::SourceCode\") and, along with the latter, gives `miette` all the information it needs to pretty-print some snippets! You can also use your own `Into<SourceSpan>` types as label spans.\nThe easiest way to define errors like this is to use the `derive(Diagnostic)` macro:\n```\nuse miette::{Diagnostic, SourceSpan};\nuse thiserror::Error;\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops\")]\n#[diagnostic(code(my_lib::random_error))]\npub struct MyErrorType {\n  // The `Source` that miette will use.\n  #[source_code]\n  src: String,\n  // This will underline/mark the specific code inside the larger\n  // snippet context.\n  #[label = \"This is the highlight\"]\n  err_span: SourceSpan,\n  // You can add as many labels as you want.\n  // They'll be rendered sequentially.\n  #[label(\"This is bad\")]\n  snip2: (usize, usize), // `(usize, usize)` is `Into<SourceSpan>`!\n  // Snippets can be optional, by using Option:\n  #[label(\"some text\")]\n  snip3: Option<SourceSpan>,\n  // with or without label text\n  #[label]\n  snip4: Option<SourceSpan>,\n}\n```\n\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-help-text)\u2026 help text\n`miette` provides two facilities for supplying help text for your errors:\nThe first is the `#[help()]` format attribute that applies to structs or enum variants:\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"welp\")]\n#[diagnostic(help(\"try doing this instead\"))]\nstruct Foo;\n```\n\nThe other is by programmatically supplying the help text as a field to your diagnostic:\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"welp\")]\n#[diagnostic()]\nstruct Foo {\n  #[help]\n  advice: Option<String>, // Can also just be `String`\n}\nlet err = Foo {\n  advice: Some(\"try doing this instead\".to_string()),\n};\n```\n\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-severity-level)\u2026 severity level\n`miette` provides a way to set the severity level of a diagnostic.\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"welp\")]\n#[diagnostic(severity(Warning))]\nstruct Foo;\n```\n\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-multiple-related-errors)\u2026 multiple related errors\n`miette` supports collecting multiple errors into a single diagnostic, and printing them all together nicely.\nTo do so, use the `#[related]` tag on any `IntoIter` field in your `Diagnostic` type:\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Debug, Error, Diagnostic)]\n#[error(\"oops\")]\nstruct MyError {\n  #[related]\n  others: Vec<MyError>,\n}\n```\n\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-delayed-source-code)\u2026 delayed source code\nSometimes it makes sense to add source code to the error message later. One option is to use [`with_source_code()`](https://docs.rs/miette/latest/miette/struct.Error.html#method.with_source_code \"method miette::Error::with_source_code\") method for that:\n```\nuse miette::{Diagnostic, SourceSpan};\nuse thiserror::Error;\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops\")]\n#[diagnostic()]\npub struct MyErrorType {\n  // Note: label but no source code\n  #[label]\n  err_span: SourceSpan,\n}\nfn do_something() -> miette::Result<()> {\n  // This function emits actual error with label\n  return Err(MyErrorType {\n    err_span: (7..11).into(),\n  })?;\n}\nfn main() -> miette::Result<()> {\n  do_something().map_err(|error| {\n    // And this code provides the source code for inner error\n    error.with_source_code(String::from(\"source code\"))\n  })\n}\n```\n\nAlso source code can be provided by a wrapper type. This is especially useful in combination with `related`, when multiple errors should be emitted at the same time:\n```\nuse miette::{Diagnostic, Report, SourceSpan};\nuse thiserror::Error;\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops\")]\n#[diagnostic()]\npub struct InnerError {\n  // Note: label but no source code\n  #[label]\n  err_span: SourceSpan,\n}\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops: multiple errors\")]\n#[diagnostic()]\npub struct MultiError {\n  // Note source code by no labels\n  #[source_code]\n  source_code: String,\n  // The source code above is used for these errors\n  #[related]\n  related: Vec<InnerError>,\n}\nfn do_something() -> Result<(), Vec<InnerError>> {\n  Err(vec![\n    InnerError {\n      err_span: (0..6).into(),\n    },\n    InnerError {\n      err_span: (7..11).into(),\n    },\n  ])\n}\nfn main() -> miette::Result<()> {\n  do_something().map_err(|err_list| MultiError {\n    source_code: \"source code\".into(),\n    related: err_list,\n  })?;\n  Ok(())\n}\n```\n\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-diagnostic-based-error-sources)\u2026 Diagnostic-based error sources.\nWhen one uses the `#[source]` attribute on a field, that usually comes from `thiserror`, and implements a method for [`std::error::Error::source`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source \"method core::error::Error::source\"). This works in many cases, but it\u2019s lossy: if the source of the diagnostic is a diagnostic itself, the source will simply be treated as an `std::error::Error`.\nWhile this has no effect on the existing _reporters_ , since they don\u2019t use that information right now, APIs who might want this information will have no access to it.\nIf it\u2019s important for you for this information to be available to users, you can use `#[diagnostic_source]` alongside `#[source]`. Not that you will likely want to use _both_ :\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"MyError\")]\nstruct MyError {\n  #[source]\n  #[diagnostic_source]\n  the_cause: OtherError,\n}\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"OtherError\")]\nstruct OtherError;\n```\n\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-handler-options)\u2026 handler options\n[`MietteHandler`](https://docs.rs/miette/latest/miette/struct.MietteHandler.html \"struct miette::MietteHandler\") is the default handler, and is very customizable. In most cases, you can simply use [`MietteHandlerOpts`](https://docs.rs/miette/latest/miette/struct.MietteHandlerOpts.html \"struct miette::MietteHandlerOpts\") to tweak its behavior instead of falling back to your own custom handler.\nUsage is like so:\n[\u24d8](https://docs.rs/miette/latest/miette/ \"This example is not tested\")```\nmiette::set_hook(Box::new(|_| {\n  Box::new(\n    miette::MietteHandlerOpts::new()\n      .terminal_links(true)\n      .unicode(false)\n      .context_lines(3)\n      .tab_width(4)\n      .break_words(true)\n      .build(),\n  )\n}))\n\n```\n\nSee the docs for [`MietteHandlerOpts`](https://docs.rs/miette/latest/miette/struct.MietteHandlerOpts.html \"struct miette::MietteHandlerOpts\") for more details on what you can customize!\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-dynamic-diagnostics)\u2026 dynamic diagnostics\nIf you\u2026\n  * \u2026don\u2019t know all the possible errors upfront\n  * \u2026need to serialize/deserialize errors then you may want to use [`miette!`](https://docs.rs/miette/latest/miette/macro.miette.html \"macro miette::miette\"), [`diagnostic!`](https://docs.rs/miette/latest/miette/macro.diagnostic.html \"macro miette::diagnostic\") macros or [`MietteDiagnostic`](https://docs.rs/miette/latest/miette/struct.MietteDiagnostic.html \"struct miette::MietteDiagnostic\") directly to create diagnostic on the fly.\n\n\n[\u24d8](https://docs.rs/miette/latest/miette/ \"This example is not tested\")```\n\nlet source = \"2 + 2 * 2 = 8\".to_string();\nlet report = miette!(\n labels = vec![\n   LabeledSpan::at(12..13, \"this should be 6\"),\n ],\n help = \"'*' has greater precedence than '+'\",\n \"Wrong answer\"\n).with_source_code(source);\nprintln!(\"{:?}\", report)\n```\n\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-syntax-highlighting)\u2026 syntax highlighting\n`miette` can be configured to highlight syntax in source code snippets.\nTo use the built-in highlighting functionality, you must enable the `syntect-highlighter` crate feature. When this feature is enabled, `miette` will automatically use the [`syntect`](https://docs.rs/syntect/5.2.0/x86_64-unknown-linux-gnu/syntect/index.html \"mod syntect\") crate to highlight the `#[source_code]` field of your [`Diagnostic`](https://docs.rs/miette/latest/miette/trait.Diagnostic.html \"trait miette::Diagnostic\").\nSyntax detection with [`syntect`](https://docs.rs/syntect/5.2.0/x86_64-unknown-linux-gnu/syntect/index.html \"mod syntect\") is handled by checking 2 methods on the [`SpanContents`](https://docs.rs/miette/latest/miette/trait.SpanContents.html \"trait miette::SpanContents\") trait, in order:\n  * [`language()`](https://docs.rs/miette/latest/miette/trait.SpanContents.html#method.language \"method miette::SpanContents::language\") - Provides the name of the language as a string. For example `\"Rust\"` will indicate Rust syntax highlighting. You can set the language of the [`SpanContents`](https://docs.rs/miette/latest/miette/trait.SpanContents.html \"trait miette::SpanContents\") produced by a [`NamedSource`](https://docs.rs/miette/latest/miette/struct.NamedSource.html \"struct miette::NamedSource\") via the [`with_language`](https://docs.rs/miette/latest/miette/struct.NamedSource.html#method.with_language \"method miette::NamedSource::with_language\") method.\n  * [`name()`](https://docs.rs/miette/latest/miette/trait.SpanContents.html#method.name \"method miette::SpanContents::name\") - In the absence of an explicitly set language, the name is assumed to contain a file name or file path. The highlighter will check for a file extension at the end of the name and try to guess the syntax from that.\n\n\nIf you want to use a custom highlighter, you can provide a custom implementation of the [`Highlighter`](https://docs.rs/miette/latest/miette/highlighters/trait.Highlighter.html \"trait miette::highlighters::Highlighter\") trait to [`MietteHandlerOpts`](https://docs.rs/miette/latest/miette/struct.MietteHandlerOpts.html \"struct miette::MietteHandlerOpts\") by calling the [`with_syntax_highlighting`](https://docs.rs/miette/latest/miette/struct.MietteHandlerOpts.html#method.with_syntax_highlighting \"method miette::MietteHandlerOpts::with_syntax_highlighting\") method. See the [`highlighters`](https://docs.rs/miette/latest/miette/highlighters/index.html \"mod miette::highlighters\") module docs for more details.\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-primary-label)\u2026 primary label\nYou can use the `primary` parameter to `label` to indicate that the label is the primary label.\n[\u24d8](https://docs.rs/miette/latest/miette/ \"This example is not tested\")```\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"oops!\")]\nstruct MyError {\n  #[label(primary, \"main issue\")]\n  primary_span: SourceSpan,\n  #[label(\"other label\")]\n  other_span: SourceSpan,\n}\n```\n\nThe `primary` parameter can be used at most once:\n[\u24d8](https://docs.rs/miette/latest/miette/ \"This example is not tested\")```\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"oops!\")]\nstruct MyError {\n  #[label(primary, \"main issue\")]\n  primary_span: SourceSpan,\n  #[label(primary, \"other label\")] // Error: Cannot have more than one primary label.\n  other_span: SourceSpan,\n}\n```\n\n#### [\u00a7](https://docs.rs/miette/latest/miette/#-collection-of-labels)\u2026 collection of labels\nWhen the number of labels is unknown, you can use a collection of `SourceSpan` (or any type convertible into `SourceSpan`). For this, add the `collection` parameter to `label` and use any type than can be iterated over for the field.\n[\u24d8](https://docs.rs/miette/latest/miette/ \"This example is not tested\")```\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"oops!\")]\nstruct MyError {\n  #[label(\"main issue\")]\n  primary_span: SourceSpan,\n  #[label(collection, \"related to this\")]\n  other_spans: Vec<Range<usize>>,\n}\nlet report: miette::Report = MyError {\n  primary_span: (6, 9).into(),\n  other_spans: vec![19..26, 30..41],\n}.into();\nprintln!(\"{:?}\", report.with_source_code(\"About something or another or yet another ...\".to_string()));\n```\n\nA collection can also be of `LabeledSpan` if you want to have different text for different labels. Labels with no text will use the one from the `label` attribute\n[\u24d8](https://docs.rs/miette/latest/miette/ \"This example is not tested\")```\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"oops!\")]\nstruct MyError {\n  #[label(\"main issue\")]\n  primary_span: SourceSpan,\n  #[label(collection, \"related to this\")]\n  other_spans: Vec<LabeledSpan>, // LabeledSpan\n}\nlet report: miette::Report = MyError {\n  primary_span: (6, 9).into(),\n  other_spans: vec![\n    LabeledSpan::new(None, 19, 7), // Use default text `related to this`\n    LabeledSpan::new(Some(\"and also this\".to_string()), 30, 11), // Use specific text\n  ],\n}.into();\nprintln!(\"{:?}\", report.with_source_code(\"About something or another or yet another ...\".to_string()));\n```\n\n### [\u00a7](https://docs.rs/miette/latest/miette/#msrv)MSRV\nThis crate requires rustc 1.70.0 or later.\n### [\u00a7](https://docs.rs/miette/latest/miette/#acknowledgements)Acknowledgements\n`miette` was not developed in a void. It owes enormous credit to various other projects and their authors:\n  * [`anyhow`](http://crates.io/crates/anyhow) and [`color-eyre`](https://crates.io/crates/color-eyre): these two enormously influential error handling libraries have pushed forward the experience of application-level error handling and error reporting. `miette`\u2019s `Report` type is an attempt at a very very rough version of their `Report` types.\n  * [`thiserror`](https://crates.io/crates/thiserror) for setting the standard for library-level error definitions, and for being the inspiration behind `miette`\u2019s derive macro.\n  * `rustc` and [@estebank](https://github.com/estebank) for their state-of-the-art work in compiler diagnostics.\n  * [`ariadne`](https://crates.io/crates/ariadne) for pushing forward how _pretty_ these diagnostics can really look!\n\n\n### [\u00a7](https://docs.rs/miette/latest/miette/#license)License\n`miette` is released to the Rust community under the [Apache license 2.0](https://docs.rs/miette/latest/miette/LICENSE).\nIt also includes code taken from [`eyre`](https://github.com/yaahc/eyre), and some from [`thiserror`](https://github.com/dtolnay/thiserror), also under the Apache License. Some code is taken from [`ariadne`](https://github.com/zesterer/ariadne), which is MIT licensed.\n## Modules[\u00a7](https://docs.rs/miette/latest/miette/#modules)\n\n[highlighters](https://docs.rs/miette/latest/miette/highlighters/index.html \"mod miette::highlighters\")\n    This module provides a trait for creating custom syntax highlighters that highlight [`Diagnostic`](https://docs.rs/miette/latest/miette/trait.Diagnostic.html \"trait miette::Diagnostic\") source code with ANSI escape sequences when rendering with the [`GraphicalReportHighlighter`](https://docs.rs/miette/latest/miette/struct.GraphicalReportHandler.html \"struct miette::GraphicalReportHandler\").\n## Macros[\u00a7](https://docs.rs/miette/latest/miette/#macros)\n\n[bail](https://docs.rs/miette/latest/miette/macro.bail.html \"macro miette::bail\")\n    Return early with an error.\n\n[diagnostic](https://docs.rs/miette/latest/miette/macro.diagnostic.html \"macro miette::diagnostic\")\n    Construct a [`MietteDiagnostic`](https://docs.rs/miette/latest/miette/struct.MietteDiagnostic.html \"struct miette::MietteDiagnostic\") in more user-friendly way.\n\n[ensure](https://docs.rs/miette/latest/miette/macro.ensure.html \"macro miette::ensure\")\n    Return early with an error if a condition is not satisfied.\n\n[miette](https://docs.rs/miette/latest/miette/macro.miette.html \"macro miette::miette\")\n    Construct an ad-hoc [`Report`](https://docs.rs/miette/latest/miette/struct.Error.html \"struct miette::Error\").\n## Structs[\u00a7](https://docs.rs/miette/latest/miette/#structs)\n\n[DebugReportHandler](https://docs.rs/miette/latest/miette/struct.DebugReportHandler.html \"struct miette::DebugReportHandler\")\n    [`ReportHandler`](https://docs.rs/miette/latest/miette/trait.ReportHandler.html \"trait miette::ReportHandler\") that renders plain text and avoids extraneous graphics. It\u2019s optimized for screen readers and braille users, but is also used in any non-graphical environments, such as non-TTY output.\n\n[Error](https://docs.rs/miette/latest/miette/struct.Error.html \"struct miette::Error\")\n    Compatibility re-export of `Report` for interop with `anyhow` Core Diagnostic wrapper type.\n\n[GraphicalReportHandler](https://docs.rs/miette/latest/miette/struct.GraphicalReportHandler.html \"struct miette::GraphicalReportHandler\")\n    A [`ReportHandler`](https://docs.rs/miette/latest/miette/trait.ReportHandler.html \"trait miette::ReportHandler\") that displays a given [`Report`](https://docs.rs/miette/latest/miette/struct.Error.html \"struct miette::Error\") in a quasi-graphical way, using terminal colors, unicode drawing characters, and other such things.\n\n[GraphicalTheme](https://docs.rs/miette/latest/miette/struct.GraphicalTheme.html \"struct miette::GraphicalTheme\")\n    Theme used by [`GraphicalReportHandler`](https://docs.rs/miette/latest/miette/struct.GraphicalReportHandler.html \"struct miette::GraphicalReportHandler\") to render fancy [`Diagnostic`](https://docs.rs/miette/latest/miette/trait.Diagnostic.html \"trait miette::Diagnostic\") reports.\n\n[InstallError](https://docs.rs/miette/latest/miette/struct.InstallError.html \"struct miette::InstallError\")\n    Error indicating that [`set_hook()`](https://docs.rs/miette/latest/miette/fn.set_hook.html \"fn miette::set_hook\") was unable to install the provided [`ErrorHook`](https://docs.rs/miette/latest/miette/type.ErrorHook.html \"type miette::ErrorHook\").\n\n[JSONReportHandler](https://docs.rs/miette/latest/miette/struct.JSONReportHandler.html \"struct miette::JSONReportHandler\")\n    [`ReportHandler`](https://docs.rs/miette/latest/miette/trait.ReportHandler.html \"trait miette::ReportHandler\") that renders JSON output. It\u2019s a machine-readable output.\n\n[LabeledSpan](https://docs.rs/miette/latest/miette/struct.LabeledSpan.html \"struct miette::LabeledSpan\")\n    A labeled [`SourceSpan`](https://docs.rs/miette/latest/miette/struct.SourceSpan.html \"struct miette::SourceSpan\").\n\n[MietteDiagnostic](https://docs.rs/miette/latest/miette/struct.MietteDiagnostic.html \"struct miette::MietteDiagnostic\")\n    Diagnostic that can be created at runtime.\n\n[MietteHandler](https://docs.rs/miette/latest/miette/struct.MietteHandler.html \"struct miette::MietteHandler\")\n    A [`ReportHandler`](https://docs.rs/miette/latest/miette/trait.ReportHandler.html \"trait miette::ReportHandler\") that displays a given [`Report`](https://docs.rs/miette/latest/miette/struct.Error.html \"struct miette::Error\") in a quasi-graphical way, using terminal colors, unicode drawing characters, and other such things.\n\n[MietteHandlerOpts](https://docs.rs/miette/latest/miette/struct.MietteHandlerOpts.html \"struct miette::MietteHandlerOpts\")\n    Create a custom [`MietteHandler`](https://docs.rs/miette/latest/miette/struct.MietteHandler.html \"struct miette::MietteHandler\") from options.\n\n[MietteSpanContents](https://docs.rs/miette/latest/miette/struct.MietteSpanContents.html \"struct miette::MietteSpanContents\")\n    Basic implementation of the [`SpanContents`](https://docs.rs/miette/latest/miette/trait.SpanContents.html \"trait miette::SpanContents\") trait, for convenience.\n\n[NamedSource](https://docs.rs/miette/latest/miette/struct.NamedSource.html \"struct miette::NamedSource\")\n    Utility struct for when you have a regular [`SourceCode`](https://docs.rs/miette/latest/miette/trait.SourceCode.html \"trait miette::SourceCode\") type that doesn\u2019t implement `name`. For example [`String`](https://doc.rust-lang.org/nightly/alloc/string/struct.String.html \"struct alloc::string::String\"). Or if you want to override the `name` returned by the `SourceCode`.\n\n[NarratableReportHandler](https://docs.rs/miette/latest/miette/struct.NarratableReportHandler.html \"struct miette::NarratableReportHandler\")\n    [`ReportHandler`](https://docs.rs/miette/latest/miette/trait.ReportHandler.html \"trait miette::ReportHandler\") that renders plain text and avoids extraneous graphics. It\u2019s optimized for screen readers and braille users, but is also used in any non-graphical environments, such as non-TTY output.\n\n[Report](https://docs.rs/miette/latest/miette/struct.Report.html \"struct miette::Report\")\n    Core Diagnostic wrapper type.\n\n[SourceOffset](https://docs.rs/miette/latest/miette/struct.SourceOffset.html \"struct miette::SourceOffset\")\n    Newtype that represents the [`ByteOffset`](https://docs.rs/miette/latest/miette/type.ByteOffset.html \"type miette::ByteOffset\") from the beginning of a [`SourceCode`](https://docs.rs/miette/latest/miette/trait.SourceCode.html \"trait miette::SourceCode\")\n\n[SourceSpan](https://docs.rs/miette/latest/miette/struct.SourceSpan.html \"struct miette::SourceSpan\")\n    Span within a [`SourceCode`](https://docs.rs/miette/latest/miette/trait.SourceCode.html \"trait miette::SourceCode\")\n\n[ThemeCharacters](https://docs.rs/miette/latest/miette/struct.ThemeCharacters.html \"struct miette::ThemeCharacters\")\n    Characters to be used when drawing when using [`GraphicalReportHandler`](https://docs.rs/miette/latest/miette/struct.GraphicalReportHandler.html \"struct miette::GraphicalReportHandler\").\n\n[ThemeStyles](https://docs.rs/miette/latest/miette/struct.ThemeStyles.html \"struct miette::ThemeStyles\")\n    Styles for various parts of graphical rendering for the [`GraphicalReportHandler`](https://docs.rs/miette/latest/miette/struct.GraphicalReportHandler.html \"struct miette::GraphicalReportHandler\").\n## Enums[\u00a7](https://docs.rs/miette/latest/miette/#enums)\n\n[MietteError](https://docs.rs/miette/latest/miette/enum.MietteError.html \"enum miette::MietteError\")\n    Error enum for miette. Used by certain operations in the protocol.\n\n[RgbColors](https://docs.rs/miette/latest/miette/enum.RgbColors.html \"enum miette::RgbColors\")\n    Settings to control the color format used for graphical rendering.\n\n[Severity](https://docs.rs/miette/latest/miette/enum.Severity.html \"enum miette::Severity\")\n    [`Diagnostic`](https://docs.rs/miette/latest/miette/trait.Diagnostic.html \"trait miette::Diagnostic\") severity. Intended to be used by [`ReportHandler`](https://docs.rs/miette/latest/miette/trait.ReportHandler.html \"trait miette::ReportHandler\")s to change the way different [`Diagnostic`](https://docs.rs/miette/latest/miette/trait.Diagnostic.html \"trait miette::Diagnostic\")s are displayed. Defaults to [`Severity::Error`](https://docs.rs/miette/latest/miette/enum.Severity.html#variant.Error \"variant miette::Severity::Error\").\n## Traits[\u00a7](https://docs.rs/miette/latest/miette/#traits)\n\n[Context](https://docs.rs/miette/latest/miette/trait.Context.html \"trait miette::Context\")\n    Compatibility re-export of `WrapErr` for interop with `anyhow` Provides the [`wrap_err()`](https://docs.rs/miette/latest/miette/trait.Context.html#tymethod.wrap_err \"method miette::Context::wrap_err\") method for [`Result`](https://docs.rs/miette/latest/miette/type.Result.html \"type miette::Result\").\n\n[Diagnostic](https://docs.rs/miette/latest/miette/trait.Diagnostic.html \"trait miette::Diagnostic\")\n    Adds rich metadata to your Error that can be used by [`Report`](https://docs.rs/miette/latest/miette/struct.Error.html \"struct miette::Error\") to print really nice and human-friendly error messages.\n\n[IntoDiagnostic](https://docs.rs/miette/latest/miette/trait.IntoDiagnostic.html \"trait miette::IntoDiagnostic\")\n    Convenience trait that adds a [`.into_diagnostic()`](https://docs.rs/miette/latest/miette/trait.IntoDiagnostic.html#tymethod.into_diagnostic \"method miette::IntoDiagnostic::into_diagnostic\") method that converts a type implementing [`std::error::Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") to a [`Result<T, Report>`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\").\n\n[ReportHandler](https://docs.rs/miette/latest/miette/trait.ReportHandler.html \"trait miette::ReportHandler\")\n    Error Report Handler trait for customizing `miette::Report`\n\n[SourceCode](https://docs.rs/miette/latest/miette/trait.SourceCode.html \"trait miette::SourceCode\")\n    Represents readable source code of some sort.\n\n[SpanContents](https://docs.rs/miette/latest/miette/trait.SpanContents.html \"trait miette::SpanContents\")\n    Contents of a [`SourceCode`](https://docs.rs/miette/latest/miette/trait.SourceCode.html \"trait miette::SourceCode\") covered by [`SourceSpan`](https://docs.rs/miette/latest/miette/struct.SourceSpan.html \"struct miette::SourceSpan\").\n\n[WrapErr](https://docs.rs/miette/latest/miette/trait.WrapErr.html \"trait miette::WrapErr\")\n    Provides the [`wrap_err()`](https://docs.rs/miette/latest/miette/trait.Context.html#tymethod.wrap_err \"method miette::Context::wrap_err\") method for [`Result`](https://docs.rs/miette/latest/miette/type.Result.html \"type miette::Result\").\n## Functions[\u00a7](https://docs.rs/miette/latest/miette/#functions)\n\n[set_hook](https://docs.rs/miette/latest/miette/fn.set_hook.html \"fn miette::set_hook\")\n    Set the error hook.\n\n[set_panic_hook](https://docs.rs/miette/latest/miette/fn.set_panic_hook.html \"fn miette::set_panic_hook\")\n    Tells miette to render panics using its rendering engine.\n## Type Aliases[\u00a7](https://docs.rs/miette/latest/miette/#types)\n\n[ByteOffset](https://docs.rs/miette/latest/miette/type.ByteOffset.html \"type miette::ByteOffset\")\n    \u201cRaw\u201d type for the byte offset from the beginning of a [`SourceCode`](https://docs.rs/miette/latest/miette/trait.SourceCode.html \"trait miette::SourceCode\").\n\n[ErrorHook](https://docs.rs/miette/latest/miette/type.ErrorHook.html \"type miette::ErrorHook\")\n\n\n[Result](https://docs.rs/miette/latest/miette/type.Result.html \"type miette::Result\")\n    type alias for `Result<T, Report>`\n## Derive Macros[\u00a7](https://docs.rs/miette/latest/miette/#derives)\n\n[Diagnostic](https://docs.rs/miette/latest/miette/derive.Diagnostic.html \"derive miette::Diagnostic\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/miette/latest/miette/all.html \"show sidebar\")\n# Crate mietteCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nYou run miette? You run her code like the software? Oh. Oh! Error code for coder! Error code for One Thousand Lines!\n### \u00a7\u27e84\u27e9About\n`miette` is a diagnostic library for Rust. It includes a series of traits/protocols that allow you to hook into its error reporting facilities, and even write your own error reports! It lets you define error types that can print out like this (or in any format you like!):\n![Hi! miette also includes a screen-reader-oriented diagnostic printer that's enabled in various situations, such as when you use NO_COLOR or CLICOLOR settings, or on CI. This behavior is also fully configurable and customizable. For example, this is what this particular diagnostic will look like when the narrated printer is enabled:\n\\\\\nError: Received some bad JSON from the source. Unable to parse.\n  Caused by: missing field `foo` at line 1 column 1700\n\\\\\nBegin snippet for https://api.nuget.org/v3/registration5-gz-semver2/json.net/index.json starting\nat line 1, column 1659\n\\\\\nsnippet line 1: gs\":\\[\"json\"\\],\"title\":\"\",\"version\":\"1.0.0\"},\"packageContent\":\"https://api.nuget.o\n  highlight starting at line 1, column 1699: last parsing location\n\\\\\ndiagnostic help: This is a bug. It might be in ruget, or it might be in the\nsource you're using, but it's definitely a bug and should be reported.\ndiagnostic error code: ruget::api::bad_json\n](https://raw.githubusercontent.com/zkat/miette/main/images/serde_json.png)\n> **NOTE: You must enable the`\"fancy\"` crate feature to get fancy report output like in the screenshots above.** You should only do this in your toplevel crate, as the fancy feature pulls in a number of dependencies that libraries and such might not want.\n### \u00a7\u27e85\u27e9Table of Contents \n  * About\u27e84\u27e9\n  * Features\u27e86\u27e9\n  * Installing\u27e87\u27e9\n  * Example\u27e88\u27e9\n  * Using\u27e89\u27e9\n    * \u2026 in libraries\u27e810\u27e9\n    * \u2026 in application code\u27e811\u27e9\n    * \u2026 in `main()`\u27e812\u27e9\n    * \u2026 diagnostic code URLs\u27e813\u27e9\n    * \u2026 snippets\u27e814\u27e9\n    * \u2026 help text\u27e815\u27e9\n    * \u2026 severity level\u27e816\u27e9\n    * \u2026 multiple related errors\u27e817\u27e9\n    * \u2026 delayed source code\u27e818\u27e9\n    * \u2026 handler options\u27e819\u27e9\n    * \u2026 dynamic diagnostics\u27e820\u27e9\n    * \u2026 syntax highlighting\u27e821\u27e9\n    * \u2026 primary label\u27e822\u27e9\n    * \u2026 collection of labels\u27e823\u27e9\n  * Acknowledgements\u27e824\u27e9\n  * License\u27e825\u27e9\n\n\n### \u00a7\u27e86\u27e9Features\n  * Generic `Diagnostic`\u27e826\u27e9 protocol, compatible (and dependent on) `std::error::Error`\u27e827\u27e9.\n  * Unique error codes on every `Diagnostic`\u27e826\u27e9.\n  * Custom links to get more details on error codes.\n  * Super handy derive macro for defining diagnostic metadata.\n  * Replacements for `anyhow`\u27e828\u27e9/`eyre`\u27e829\u27e9 types `Result`\u27e830\u27e9, `Report`\u27e831\u27e9 and the `miette!`\u27e832\u27e9 macro for the `anyhow!`/`eyre!` macros.\n  * Generic support for arbitrary `SourceCode`\u27e833\u27e9s for snippet data, with default support for `String`s included.\n\n\nThe `miette` crate also comes bundled with a default `ReportHandler`\u27e834\u27e9 with the following features:\n  * Fancy graphical diagnostic output\u27e84\u27e9, using ANSI/Unicode text\n  * single- and multi-line highlighting support\n  * Screen reader/braille support, gated on `NO_COLOR`\u27e835\u27e9, and other heuristics.\n  * Fully customizable graphical theming (or overriding the printers entirely).\n  * Cause chain printing\n  * Turns diagnostic codes into links in supported terminals\u27e836\u27e9.\n\n\n### \u00a7\u27e87\u27e9Installing\n```\n$ cargo add miette\n```\n\nIf you want to use the fancy printer in all these screenshots:\n```\n$ cargo add miette --features fancy\n```\n\n### \u00a7\u27e88\u27e9Example\n```\n/*\nYou can derive a `Diagnostic` from any `std::error::Error` type.\n`thiserror` is a great way to define them, and plays nicely with `miette`!\n*/\nuse miette::{Diagnostic, NamedSource, SourceSpan};\nuse thiserror::Error;\n#[derive(Error, Debug, Diagnostic)]\n#[error(\"oops!\")]\n#[diagnostic(\n  code(oops::my::bad),\n  url(docsrs),\n  help(\"try doing it better next time?\")\n)]\nstruct MyBad {\n  // The Source that we're gonna be printing snippets out of.\n  // This can be a String if you don't have or care about file names.\n  #[source_code]\n  src: NamedSource<String>,\n  // Snippets and highlights can be included in the diagnostic!\n  #[label(\"This bit here\")]\n  bad_bit: SourceSpan,\n}\n/*\nNow let's define a function!\nUse this `Result` type (or its expanded version) as the return type\nthroughout your app (but NOT your libraries! Those should always return\nconcrete types!).\n*/\nuse miette::Result;\nfn this_fails() -> Result<()> {\n  // You can use plain strings as a `Source`, or anything that implements\n  // the one-method `Source` trait.\n  let src = \"source\\n text\\n  here\".to_string();\n  Err(MyBad {\n    src: NamedSource::new(\"bad_file.rs\", src),\n    bad_bit: (9, 4).into(),\n  })?;\n  Ok(())\n}\n/*\nNow to get everything printed nicely, just return a `Result<()>`\nand you're all set!\nNote: You can swap out the default reporter for a custom one using\n`miette::set_hook()`\n*/\nfn pretend_this_is_main() -> Result<()> {\n  // kaboom~\n  this_fails()?;\n  Ok(())\n}\n```\n\nAnd this is the output you\u2019ll get if you run this program:\n![\nNarratable printout:\n\\\\\ndiagnostic error code: oops::my::bad \\(link\\)\nError: oops!\n\\\\\nBegin snippet for bad_file.rs starting\nat line 2, column 3\n\\\\\nsnippet line 1: source\n\\\\\nsnippet line 2: text\n  highlight starting at line 1, column 3: This bit here\n\\\\\nsnippet line 3: here\n\\\\\ndiagnostic help: try doing it better next time?\u27e837\u27e9]\n### \u00a7\u27e89\u27e9Using\n#### \u00a7\u27e810\u27e9\u2026 in libraries\n`miette` is _fully compatible_ with library usage. Consumers who don\u2019t know about, or don\u2019t want, `miette` features can safely use its error types as regular `std::error::Error`\u27e827\u27e9.\nWe highly recommend using something like `thiserror`\u27e838\u27e9 to define unique error types and error wrappers for your library.\nWhile `miette` integrates smoothly with `thiserror`, it is _not required_. If you don\u2019t want to use the `Diagnostic`\u27e826\u27e9 derive macro, you can implement the trait directly, just like with `std::error::Error`.\n```\n// lib/error.rs\nuse miette::{Diagnostic, SourceSpan};\nuse thiserror::Error;\n#[derive(Error, Diagnostic, Debug)]\npub enum MyLibError {\n  #[error(transparent)]\n  #[diagnostic(code(my_lib::io_error))]\n  IoError(#[from] std::io::Error),\n  #[error(\"Oops it blew up\")]\n  #[diagnostic(code(my_lib::bad_code))]\n  BadThingHappened,\n  #[error(transparent)]\n  // Use `#[diagnostic(transparent)]` to wrap another [`Diagnostic`]. You won't see labels otherwise\n  #[diagnostic(transparent)]\n  AnotherError(#[from] AnotherError),\n}\n#[derive(Error, Diagnostic, Debug)]\n#[error(\"another error\")]\npub struct AnotherError {\n  #[label(\"here\")]\n  pub at: SourceSpan\n}\n```\n\nThen, return this error type from all your fallible public APIs. It\u2019s a best practice to wrap any \u201cexternal\u201d error types in your error `enum` instead of using something like `Report`\u27e831\u27e9 in a library.\n#### \u00a7\u27e811\u27e9\u2026 in application code\nApplication code tends to work a little differently than libraries. You don\u2019t always need or care to define dedicated error wrappers for errors coming from external libraries and tools.\nFor this situation, `miette` includes two tools: `Report`\u27e831\u27e9 and `IntoDiagnostic`\u27e839\u27e9. They work in tandem to make it easy to convert regular `std::error::Error`s into `Diagnostic`\u27e826\u27e9s. Additionally, there\u2019s a `Result`\u27e830\u27e9 type alias that you can use to be more terse.\nWhen dealing with non-`Diagnostic` types, you\u2019ll want to `.into_diagnostic()` them:\n```\n// my_app/lib/my_internal_file.rs\nuse miette::{IntoDiagnostic, Result};\nuse semver::Version;\npub fn some_tool() -> Result<Version> {\n  \"1.2.x\".parse().into_diagnostic()\n}\n```\n\n`miette` also includes an `anyhow`/`eyre`-style `Context`/`WrapErr` traits that you can import to add ad-hoc context messages to your `Diagnostic`s, as well, though you\u2019ll still need to use `.into_diagnostic()` to make use of it:\n```\n// my_app/lib/my_internal_file.rs\nuse miette::{IntoDiagnostic, Result, WrapErr};\nuse semver::Version;\npub fn some_tool() -> Result<Version> {\n  \"1.2.x\"\n    .parse()\n    .into_diagnostic()\n    .wrap_err(\"Parsing this tool's semver version failed.\")\n}\n```\n\nTo construct your own simple adhoc error use the `miette!`\u27e832\u27e9 macro:\n```\n// my_app/lib/my_internal_file.rs\nuse miette::{miette, Result};\nuse semver::Version;\npub fn some_tool() -> Result<Version> {\n  let version = \"1.2.x\";\n  version\n    .parse()\n    .map_err(|_| miette!(\"Invalid version {}\", version))\n}\n```\n\nThere are also similar bail!\u27e840\u27e9 and ensure!\u27e841\u27e9 macros.\n#### \u00a7\u27e812\u27e9\u2026 in `main()`\n`main()` is just like any other part of your application-internal code. Use `Result` as your return value, and it will pretty-print your diagnostics automatically.\n> **NOTE:** You must enable the `\"fancy\"` crate feature to get fancy report output like in the screenshots here.** You should only do this in your toplevel crate, as the fancy feature pulls in a number of dependencies that libraries and such might not want.\n```\nuse miette::{IntoDiagnostic, Result};\nuse semver::Version;\nfn pretend_this_is_main() -> Result<()> {\n  let version: Version = \"1.2.x\".parse().into_diagnostic()?;\n  println!(\"{}\", version);\n  Ok(())\n}\n```\n\nPlease note: in order to get fancy diagnostic rendering with all the pretty colors and arrows, you should install `miette` with the `fancy` feature enabled:\n```\nmiette = { version = \"X.Y.Z\", features = [\"fancy\"] }\n```\n\nAnother way to display a diagnostic is by printing them using the debug formatter. This is, in fact, what returning diagnostics from main ends up doing. To do it yourself, you can write the following:\n```\nuse miette::{IntoDiagnostic, Result};\nuse semver::Version;\nfn just_a_random_function() {\n  let version_result: Result<Version> = \"1.2.x\".parse().into_diagnostic();\n  match version_result {\n    Err(e) => println!(\"{:?}\", e),\n    Ok(version) => println!(\"{}\", version),\n  }\n}\n```\n\n#### \u00a7\u27e813\u27e9\u2026 diagnostic code URLs\n`miette` supports providing a URL for individual diagnostics. This URL will be displayed as an actual link in supported terminals, like so:\n![ Example showing the graphical report printer for miette\npretty-printing an error code. The code is underlined and followed by text\nsaying to 'click here'. A hover tooltip shows a full-fledged URL that can be\nCtrl+Clicked to open in a browser.\n\\\\\nThis feature is also available in the narratable printer. It will add a line\nafter printing the error code showing a plain URL that you can visit.\n\u27e842\u27e9]\nTo use this, you can add a `url()` sub-param to your `#[diagnostic]` attribute:\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Error, Diagnostic, Debug)]\n#[error(\"kaboom\")]\n#[diagnostic(\n  code(my_app::my_error),\n  // You can do formatting!\n  url(\"https://my_website.com/error_codes#{}\", self.code().unwrap())\n)]\nstruct MyErr;\n```\n\nAdditionally, if you\u2019re developing a library and your error type is exported from your crate\u2019s top level, you can use a special `url(docsrs)` option instead of manually constructing the URL. This will automatically create a link to this diagnostic on `docs.rs`, so folks can just go straight to your (very high quality and detailed!) documentation on this diagnostic:\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Error, Diagnostic, Debug)]\n#[diagnostic(\n  code(my_app::my_error),\n  // Will link users to https://docs.rs/my_crate/0.0.0/my_crate/struct.MyErr.html\n  url(docsrs)\n)]\n#[error(\"kaboom\")]\nstruct MyErr;\n```\n\n#### \u00a7\u27e814\u27e9\u2026 snippets\nAlong with its general error handling and reporting features, `miette` also includes facilities for adding error spans/annotations/labels to your output. This can be very useful when an error is syntax-related, but you can even use it to print out sections of your own source code!\nTo achieve this, `miette` defines its own lightweight `SourceSpan`\u27e843\u27e9 type. This is a basic byte-offset and length into an associated `SourceCode`\u27e833\u27e9 and, along with the latter, gives `miette` all the information it needs to pretty-print some snippets! You can also use your own `Into<SourceSpan>` types as label spans.\nThe easiest way to define errors like this is to use the `derive(Diagnostic)` macro:\n```\nuse miette::{Diagnostic, SourceSpan};\nuse thiserror::Error;\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops\")]\n#[diagnostic(code(my_lib::random_error))]\npub struct MyErrorType {\n  // The `Source` that miette will use.\n  #[source_code]\n  src: String,\n  // This will underline/mark the specific code inside the larger\n  // snippet context.\n  #[label = \"This is the highlight\"]\n  err_span: SourceSpan,\n  // You can add as many labels as you want.\n  // They'll be rendered sequentially.\n  #[label(\"This is bad\")]\n  snip2: (usize, usize), // `(usize, usize)` is `Into<SourceSpan>`!\n  // Snippets can be optional, by using Option:\n  #[label(\"some text\")]\n  snip3: Option<SourceSpan>,\n  // with or without label text\n  #[label]\n  snip4: Option<SourceSpan>,\n}\n```\n\n#### \u00a7\u27e815\u27e9\u2026 help text\n`miette` provides two facilities for supplying help text for your errors:\nThe first is the `#[help()]` format attribute that applies to structs or enum variants:\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"welp\")]\n#[diagnostic(help(\"try doing this instead\"))]\nstruct Foo;\n```\n\nThe other is by programmatically supplying the help text as a field to your diagnostic:\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"welp\")]\n#[diagnostic()]\nstruct Foo {\n  #[help]\n  advice: Option<String>, // Can also just be `String`\n}\nlet err = Foo {\n  advice: Some(\"try doing this instead\".to_string()),\n};\n```\n\n#### \u00a7\u27e816\u27e9\u2026 severity level\n`miette` provides a way to set the severity level of a diagnostic.\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"welp\")]\n#[diagnostic(severity(Warning))]\nstruct Foo;\n```\n\n#### \u00a7\u27e817\u27e9\u2026 multiple related errors\n`miette` supports collecting multiple errors into a single diagnostic, and printing them all together nicely.\nTo do so, use the `#[related]` tag on any `IntoIter` field in your `Diagnostic` type:\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Debug, Error, Diagnostic)]\n#[error(\"oops\")]\nstruct MyError {\n  #[related]\n  others: Vec<MyError>,\n}\n```\n\n#### \u00a7\u27e818\u27e9\u2026 delayed source code\nSometimes it makes sense to add source code to the error message later. One option is to use `with_source_code()`\u27e844\u27e9 method for that:\n```\nuse miette::{Diagnostic, SourceSpan};\nuse thiserror::Error;\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops\")]\n#[diagnostic()]\npub struct MyErrorType {\n  // Note: label but no source code\n  #[label]\n  err_span: SourceSpan,\n}\nfn do_something() -> miette::Result<()> {\n  // This function emits actual error with label\n  return Err(MyErrorType {\n    err_span: (7..11).into(),\n  })?;\n}\nfn main() -> miette::Result<()> {\n  do_something().map_err(|error| {\n    // And this code provides the source code for inner error\n    error.with_source_code(String::from(\"source code\"))\n  })\n}\n```\n\nAlso source code can be provided by a wrapper type. This is especially useful in combination with `related`, when multiple errors should be emitted at the same time:\n```\nuse miette::{Diagnostic, Report, SourceSpan};\nuse thiserror::Error;\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops\")]\n#[diagnostic()]\npub struct InnerError {\n  // Note: label but no source code\n  #[label]\n  err_span: SourceSpan,\n}\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops: multiple errors\")]\n#[diagnostic()]\npub struct MultiError {\n  // Note source code by no labels\n  #[source_code]\n  source_code: String,\n  // The source code above is used for these errors\n  #[related]\n  related: Vec<InnerError>,\n}\nfn do_something() -> Result<(), Vec<InnerError>> {\n  Err(vec![\n    InnerError {\n      err_span: (0..6).into(),\n    },\n    InnerError {\n      err_span: (7..11).into(),\n    },\n  ])\n}\nfn main() -> miette::Result<()> {\n  do_something().map_err(|err_list| MultiError {\n    source_code: \"source code\".into(),\n    related: err_list,\n  })?;\n  Ok(())\n}\n```\n\n#### \u00a7\u27e845\u27e9\u2026 Diagnostic-based error sources.\nWhen one uses the `#[source]` attribute on a field, that usually comes from `thiserror`, and implements a method for `std::error::Error::source`\u27e846\u27e9. This works in many cases, but it\u2019s lossy: if the source of the diagnostic is a diagnostic itself, the source will simply be treated as an `std::error::Error`.\nWhile this has no effect on the existing _reporters_ , since they don\u2019t use that information right now, APIs who might want this information will have no access to it.\nIf it\u2019s important for you for this information to be available to users, you can use `#[diagnostic_source]` alongside `#[source]`. Not that you will likely want to use _both_ :\n```\nuse miette::Diagnostic;\nuse thiserror::Error;\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"MyError\")]\nstruct MyError {\n  #[source]\n  #[diagnostic_source]\n  the_cause: OtherError,\n}\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"OtherError\")]\nstruct OtherError;\n```\n\n#### \u00a7\u27e819\u27e9\u2026 handler options\n`MietteHandler`\u27e847\u27e9 is the default handler, and is very customizable. In most cases, you can simply use `MietteHandlerOpts`\u27e848\u27e9 to tweak its behavior instead of falling back to your own custom handler.\nUsage is like so:\n\u24d8\u27e849\u27e9```\nmiette::set_hook(Box::new(|_| {\n  Box::new(\n    miette::MietteHandlerOpts::new()\n      .terminal_links(true)\n      .unicode(false)\n      .context_lines(3)\n      .tab_width(4)\n      .break_words(true)\n      .build(),\n  )\n}))\n\n```\n\nSee the docs for `MietteHandlerOpts`\u27e848\u27e9 for more details on what you can customize!\n#### \u00a7\u27e820\u27e9\u2026 dynamic diagnostics\nIf you\u2026\n  * \u2026don\u2019t know all the possible errors upfront\n  * \u2026need to serialize/deserialize errors then you may want to use `miette!`\u27e832\u27e9, `diagnostic!`\u27e850\u27e9 macros or `MietteDiagnostic`\u27e851\u27e9 directly to create diagnostic on the fly.\n\n\n\u24d8\u27e849\u27e9```\n\nlet source = \"2 + 2 * 2 = 8\".to_string();\nlet report = miette!(\n labels = vec![\n   LabeledSpan::at(12..13, \"this should be 6\"),\n ],\n help = \"'*' has greater precedence than '+'\",\n \"Wrong answer\"\n).with_source_code(source);\nprintln!(\"{:?}\", report)\n```\n\n#### \u00a7\u27e821\u27e9\u2026 syntax highlighting\n`miette` can be configured to highlight syntax in source code snippets.\nTo use the built-in highlighting functionality, you must enable the `syntect-highlighter` crate feature. When this feature is enabled, `miette` will automatically use the `syntect`\u27e852\u27e9 crate to highlight the `#[source_code]` field of your `Diagnostic`\u27e826\u27e9.\nSyntax detection with `syntect`\u27e852\u27e9 is handled by checking 2 methods on the `SpanContents`\u27e853\u27e9 trait, in order:\n  * `language()`\u27e854\u27e9 - Provides the name of the language as a string. For example `\"Rust\"` will indicate Rust syntax highlighting. You can set the language of the `SpanContents`\u27e853\u27e9 produced by a `NamedSource`\u27e855\u27e9 via the `with_language`\u27e856\u27e9 method.\n  * `name()`\u27e857\u27e9 - In the absence of an explicitly set language, the name is assumed to contain a file name or file path. The highlighter will check for a file extension at the end of the name and try to guess the syntax from that.\n\n\nIf you want to use a custom highlighter, you can provide a custom implementation of the `Highlighter`\u27e858\u27e9 trait to `MietteHandlerOpts`\u27e848\u27e9 by calling the `with_syntax_highlighting`\u27e859\u27e9 method. See the `highlighters`\u27e860\u27e9 module docs for more details.\n#### \u00a7\u27e822\u27e9\u2026 primary label\nYou can use the `primary` parameter to `label` to indicate that the label is the primary label.\n\u24d8\u27e849\u27e9```\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"oops!\")]\nstruct MyError {\n  #[label(primary, \"main issue\")]\n  primary_span: SourceSpan,\n  #[label(\"other label\")]\n  other_span: SourceSpan,\n}\n```\n\nThe `primary` parameter can be used at most once:\n\u24d8\u27e849\u27e9```\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"oops!\")]\nstruct MyError {\n  #[label(primary, \"main issue\")]\n  primary_span: SourceSpan,\n  #[label(primary, \"other label\")] // Error: Cannot have more than one primary label.\n  other_span: SourceSpan,\n}\n```\n\n#### \u00a7\u27e823\u27e9\u2026 collection of labels\nWhen the number of labels is unknown, you can use a collection of `SourceSpan` (or any type convertible into `SourceSpan`). For this, add the `collection` parameter to `label` and use any type than can be iterated over for the field.\n\u24d8\u27e849\u27e9```\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"oops!\")]\nstruct MyError {\n  #[label(\"main issue\")]\n  primary_span: SourceSpan,\n  #[label(collection, \"related to this\")]\n  other_spans: Vec<Range<usize>>,\n}\nlet report: miette::Report = MyError {\n  primary_span: (6, 9).into(),\n  other_spans: vec![19..26, 30..41],\n}.into();\nprintln!(\"{:?}\", report.with_source_code(\"About something or another or yet another ...\".to_string()));\n```\n\nA collection can also be of `LabeledSpan` if you want to have different text for different labels. Labels with no text will use the one from the `label` attribute\n\u24d8\u27e849\u27e9```\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"oops!\")]\nstruct MyError {\n  #[label(\"main issue\")]\n  primary_span: SourceSpan,\n  #[label(collection, \"related to this\")]\n  other_spans: Vec<LabeledSpan>, // LabeledSpan\n}\nlet report: miette::Report = MyError {\n  primary_span: (6, 9).into(),\n  other_spans: vec![\n    LabeledSpan::new(None, 19, 7), // Use default text `related to this`\n    LabeledSpan::new(Some(\"and also this\".to_string()), 30, 11), // Use specific text\n  ],\n}.into();\nprintln!(\"{:?}\", report.with_source_code(\"About something or another or yet another ...\".to_string()));\n```\n\n### \u00a7\u27e861\u27e9MSRV\nThis crate requires rustc 1.70.0 or later.\n### \u00a7\u27e824\u27e9Acknowledgements\n`miette` was not developed in a void. It owes enormous credit to various other projects and their authors:\n  * `anyhow`\u27e862\u27e9 and `color-eyre`\u27e863\u27e9: these two enormously influential error handling libraries have pushed forward the experience of application-level error handling and error reporting. `miette`\u2019s `Report` type is an attempt at a very very rough version of their `Report` types.\n  * `thiserror`\u27e864\u27e9 for setting the standard for library-level error definitions, and for being the inspiration behind `miette`\u2019s derive macro.\n  * `rustc` and @estebank\u27e865\u27e9 for their state-of-the-art work in compiler diagnostics.\n  * `ariadne`\u27e866\u27e9 for pushing forward how _pretty_ these diagnostics can really look!\n\n\n### \u00a7\u27e825\u27e9License\n`miette` is released to the Rust community under the Apache license 2.0\u27e867\u27e9.\nIt also includes code taken from `eyre`\u27e868\u27e9, and some from `thiserror`\u27e869\u27e9, also under the Apache License. Some code is taken from `ariadne`\u27e870\u27e9, which is MIT licensed.\n## Modules\u00a7\u27e871\u27e9\n\nhighlighters\u27e860\u27e9\n    This module provides a trait for creating custom syntax highlighters that highlight `Diagnostic`\u27e826\u27e9 source code with ANSI escape sequences when rendering with the `GraphicalReportHighlighter`\u27e872\u27e9.\n## Macros\u00a7\u27e873\u27e9\n\nbail\u27e840\u27e9\n    Return early with an error.\n\ndiagnostic\u27e850\u27e9\n    Construct a `MietteDiagnostic`\u27e851\u27e9 in more user-friendly way.\n\nensure\u27e841\u27e9\n    Return early with an error if a condition is not satisfied.\n\nmiette\u27e832\u27e9\n    Construct an ad-hoc `Report`\u27e831\u27e9.\n## Structs\u00a7\u27e874\u27e9\n\nDebugReportHandler\u27e875\u27e9\n    `ReportHandler`\u27e834\u27e9 that renders plain text and avoids extraneous graphics. It\u2019s optimized for screen readers and braille users, but is also used in any non-graphical environments, such as non-TTY output.\n\nError\u27e831\u27e9\n    Compatibility re-export of `Report` for interop with `anyhow` Core Diagnostic wrapper type.\n\nGraphicalReportHandler\u27e872\u27e9\n    A `ReportHandler`\u27e834\u27e9 that displays a given `Report`\u27e831\u27e9 in a quasi-graphical way, using terminal colors, unicode drawing characters, and other such things.\n\nGraphicalTheme\u27e876\u27e9\n    Theme used by `GraphicalReportHandler`\u27e872\u27e9 to render fancy `Diagnostic`\u27e826\u27e9 reports.\n\nInstallError\u27e877\u27e9\n    Error indicating that `set_hook()`\u27e878\u27e9 was unable to install the provided `ErrorHook`\u27e879\u27e9.\n\nJSONReportHandler\u27e880\u27e9\n    `ReportHandler`\u27e834\u27e9 that renders JSON output. It\u2019s a machine-readable output.\n\nLabeledSpan\u27e881\u27e9\n    A labeled `SourceSpan`\u27e843\u27e9.\n\nMietteDiagnostic\u27e851\u27e9\n    Diagnostic that can be created at runtime.\n\nMietteHandler\u27e847\u27e9\n    A `ReportHandler`\u27e834\u27e9 that displays a given `Report`\u27e831\u27e9 in a quasi-graphical way, using terminal colors, unicode drawing characters, and other such things.\n\nMietteHandlerOpts\u27e848\u27e9\n    Create a custom `MietteHandler`\u27e847\u27e9 from options.\n\nMietteSpanContents\u27e882\u27e9\n    Basic implementation of the `SpanContents`\u27e853\u27e9 trait, for convenience.\n\nNamedSource\u27e855\u27e9\n    Utility struct for when you have a regular `SourceCode`\u27e833\u27e9 type that doesn\u2019t implement `name`. For example `String`\u27e883\u27e9. Or if you want to override the `name` returned by the `SourceCode`.\n\nNarratableReportHandler\u27e884\u27e9\n    `ReportHandler`\u27e834\u27e9 that renders plain text and avoids extraneous graphics. It\u2019s optimized for screen readers and braille users, but is also used in any non-graphical environments, such as non-TTY output.\n\nReport\u27e885\u27e9\n    Core Diagnostic wrapper type.\n\nSourceOffset\u27e886\u27e9\n    Newtype that represents the `ByteOffset`\u27e887\u27e9 from the beginning of a `SourceCode`\u27e833\u27e9\n\nSourceSpan\u27e843\u27e9\n    Span within a `SourceCode`\u27e833\u27e9\n\nThemeCharacters\u27e888\u27e9\n    Characters to be used when drawing when using `GraphicalReportHandler`\u27e872\u27e9.\n\nThemeStyles\u27e889\u27e9\n    Styles for various parts of graphical rendering for the `GraphicalReportHandler`\u27e872\u27e9.\n## Enums\u00a7\u27e890\u27e9\n\nMietteError\u27e891\u27e9\n    Error enum for miette. Used by certain operations in the protocol.\n\nRgbColors\u27e892\u27e9\n    Settings to control the color format used for graphical rendering.\n\nSeverity\u27e893\u27e9\n    `Diagnostic`\u27e826\u27e9 severity. Intended to be used by `ReportHandler`\u27e834\u27e9s to change the way different `Diagnostic`\u27e826\u27e9s are displayed. Defaults to `Severity::Error`\u27e894\u27e9.\n## Traits\u00a7\u27e895\u27e9\n\nContext\u27e896\u27e9\n    Compatibility re-export of `WrapErr` for interop with `anyhow` Provides the `wrap_err()`\u27e897\u27e9 method for `Result`\u27e830\u27e9.\n\nDiagnostic\u27e826\u27e9\n    Adds rich metadata to your Error that can be used by `Report`\u27e831\u27e9 to print really nice and human-friendly error messages.\n\nIntoDiagnostic\u27e839\u27e9\n    Convenience trait that adds a `.into_diagnostic()`\u27e898\u27e9 method that converts a type implementing `std::error::Error`\u27e827\u27e9 to a `Result<T, Report>`\u27e899\u27e9.\n\nReportHandler\u27e834\u27e9\n    Error Report Handler trait for customizing `miette::Report`\n\nSourceCode\u27e833\u27e9\n    Represents readable source code of some sort.\n\nSpanContents\u27e853\u27e9\n    Contents of a `SourceCode`\u27e833\u27e9 covered by `SourceSpan`\u27e843\u27e9.\n\nWrapErr\u27e8100\u27e9\n    Provides the `wrap_err()`\u27e897\u27e9 method for `Result`\u27e830\u27e9.\n## Functions\u00a7\u27e8101\u27e9\n\nset_hook\u27e878\u27e9\n    Set the error hook.\n\nset_panic_hook\u27e8102\u27e9\n    Tells miette to render panics using its rendering engine.\n## Type Aliases\u00a7\u27e8103\u27e9\n\nByteOffset\u27e887\u27e9\n    \u201cRaw\u201d type for the byte offset from the beginning of a `SourceCode`\u27e833\u27e9.\n\nErrorHook\u27e879\u27e9\n\n\nResult\u27e830\u27e9\n    type alias for `Result<T, Report>`\n## Derive Macros\u00a7\u27e8104\u27e9\n\nDiagnostic\u27e8105\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/miette/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/miette/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/miette/latest/src/miette/lib.rs.html#1-838: Source\n\u27e84\u27e9 https://docs.rs/miette/latest/miette/#about: \u00a7\n\u27e85\u27e9 https://docs.rs/miette/latest/miette/#table-of-contents-: \u00a7\n\u27e86\u27e9 https://docs.rs/miette/latest/miette/#features: Features\n\u27e87\u27e9 https://docs.rs/miette/latest/miette/#installing: Installing\n\u27e88\u27e9 https://docs.rs/miette/latest/miette/#example: Example\n\u27e89\u27e9 https://docs.rs/miette/latest/miette/#using: Using\n\u27e810\u27e9 https://docs.rs/miette/latest/miette/#-in-libraries: \u2026 in libraries\n\u27e811\u27e9 https://docs.rs/miette/latest/miette/#-in-application-code: \u2026 in application code\n\u27e812\u27e9 https://docs.rs/miette/latest/miette/#-in-main: \u2026 in `main()`\n\u27e813\u27e9 https://docs.rs/miette/latest/miette/#-diagnostic-code-urls: \u2026 diagnostic code URLs\n\u27e814\u27e9 https://docs.rs/miette/latest/miette/#-snippets: \u2026 snippets\n\u27e815\u27e9 https://docs.rs/miette/latest/miette/#-help-text: \u2026 help text\n\u27e816\u27e9 https://docs.rs/miette/latest/miette/#-severity-level: \u2026 severity level\n\u27e817\u27e9 https://docs.rs/miette/latest/miette/#-multiple-related-errors: \u2026 multiple related errors\n\u27e818\u27e9 https://docs.rs/miette/latest/miette/#-delayed-source-code: \u2026 delayed source code\n\u27e819\u27e9 https://docs.rs/miette/latest/miette/#-handler-options: \u2026 handler options\n\u27e820\u27e9 https://docs.rs/miette/latest/miette/#-dynamic-diagnostics: \u2026 dynamic diagnostics\n\u27e821\u27e9 https://docs.rs/miette/latest/miette/#-syntax-highlighting: \u2026 syntax highlighting\n\u27e822\u27e9 https://docs.rs/miette/latest/miette/#-primary-label: \u2026 primary label\n\u27e823\u27e9 https://docs.rs/miette/latest/miette/#-collection-of-labels: \u2026 collection of labels\n\u27e824\u27e9 https://docs.rs/miette/latest/miette/#acknowledgements: Acknowledgements\n\u27e825\u27e9 https://docs.rs/miette/latest/miette/#license: License\n\u27e826\u27e9 https://docs.rs/miette/latest/miette/trait.Diagnostic.html: trait miette::Diagnostic - `Diagnostic`\n\u27e827\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html: trait core::error::Error - `std::error::Error`\n\u27e828\u27e9 https://docs.rs/anyhow: `anyhow`\n\u27e829\u27e9 https://docs.rs/eyre: `eyre`\n\u27e830\u27e9 https://docs.rs/miette/latest/miette/type.Result.html: type miette::Result - `Result`\n\u27e831\u27e9 https://docs.rs/miette/latest/miette/struct.Error.html: struct miette::Error - `Report`\n\u27e832\u27e9 https://docs.rs/miette/latest/miette/macro.miette.html: macro miette::miette - `miette!`\n\u27e833\u27e9 https://docs.rs/miette/latest/miette/trait.SourceCode.html: trait miette::SourceCode - `SourceCode`\n\u27e834\u27e9 https://docs.rs/miette/latest/miette/trait.ReportHandler.html: trait miette::ReportHandler - `ReportHandler`\n\u27e835\u27e9 http://no-color.org/: `NO_COLOR`\n\u27e836\u27e9 https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda: supported terminals\n\u27e837\u27e9 https://raw.githubusercontent.com/zkat/miette/main/images/single-line-example.png: \nNarratable printout:\n\\\\\ndiagnostic error code: oops::my::bad \\(link\\)\nError: oops!\n\\\\\nBegin snippet for bad_file.rs starting\nat line 2, column 3\n\\\\\nsnippet line 1: source\n\\\\\nsnippet line 2: text\n  highlight starting at line 1, column 3: This bit here\n\\\\\nsnippet line 3: here\n\\\\\ndiagnostic help: try doing it better next time?\n\u27e838\u27e9 https://docs.rs/thiserror: `thiserror`\n\u27e839\u27e9 https://docs.rs/miette/latest/miette/trait.IntoDiagnostic.html: trait miette::IntoDiagnostic - `IntoDiagnostic`\n\u27e840\u27e9 https://docs.rs/miette/latest/miette/macro.bail.html: macro miette::bail - bail!\n\u27e841\u27e9 https://docs.rs/miette/latest/miette/macro.ensure.html: macro miette::ensure - ensure!\n\u27e842\u27e9 https://raw.githubusercontent.com/zkat/miette/main/images/code_linking.png:  Example showing the graphical report printer for miette\npretty-printing an error code. The code is underlined and followed by text\nsaying to 'click here'. A hover tooltip shows a full-fledged URL that can be\nCtrl+Clicked to open in a browser.\n\\\\\nThis feature is also available in the narratable printer. It will add a line\nafter printing the error code showing a plain URL that you can visit.\n\n\u27e843\u27e9 https://docs.rs/miette/latest/miette/struct.SourceSpan.html: struct miette::SourceSpan - `SourceSpan`\n\u27e844\u27e9 https://docs.rs/miette/latest/miette/struct.Error.html#method.with_source_code: method miette::Error::with_source_code - `with_source_code()`\n\u27e845\u27e9 https://docs.rs/miette/latest/miette/#-diagnostic-based-error-sources: \u00a7\n\u27e846\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source: method core::error::Error::source - `std::error::Error::source`\n\u27e847\u27e9 https://docs.rs/miette/latest/miette/struct.MietteHandler.html: struct miette::MietteHandler - `MietteHandler`\n\u27e848\u27e9 https://docs.rs/miette/latest/miette/struct.MietteHandlerOpts.html: struct miette::MietteHandlerOpts - `MietteHandlerOpts`\n\u27e849\u27e9 https://docs.rs/miette/latest/miette/: This example is not tested - \u24d8\n\u27e850\u27e9 https://docs.rs/miette/latest/miette/macro.diagnostic.html: macro miette::diagnostic - `diagnostic!`\n\u27e851\u27e9 https://docs.rs/miette/latest/miette/struct.MietteDiagnostic.html: struct miette::MietteDiagnostic - `MietteDiagnostic`\n\u27e852\u27e9 https://docs.rs/syntect/5.2.0/x86_64-unknown-linux-gnu/syntect/index.html: mod syntect - `syntect`\n\u27e853\u27e9 https://docs.rs/miette/latest/miette/trait.SpanContents.html: trait miette::SpanContents - `SpanContents`\n\u27e854\u27e9 https://docs.rs/miette/latest/miette/trait.SpanContents.html#method.language: method miette::SpanContents::language - `language()`\n\u27e855\u27e9 https://docs.rs/miette/latest/miette/struct.NamedSource.html: struct miette::NamedSource - `NamedSource`\n\u27e856\u27e9 https://docs.rs/miette/latest/miette/struct.NamedSource.html#method.with_language: method miette::NamedSource::with_language - `with_language`\n\u27e857\u27e9 https://docs.rs/miette/latest/miette/trait.SpanContents.html#method.name: method miette::SpanContents::name - `name()`\n\u27e858\u27e9 https://docs.rs/miette/latest/miette/highlighters/trait.Highlighter.html: trait miette::highlighters::Highlighter - `Highlighter`\n\u27e859\u27e9 https://docs.rs/miette/latest/miette/struct.MietteHandlerOpts.html#method.with_syntax_highlighting: method miette::MietteHandlerOpts::with_syntax_highlighting - `with_syntax_highlighting`\n\u27e860\u27e9 https://docs.rs/miette/latest/miette/highlighters/index.html: mod miette::highlighters - `highlighters`\n\u27e861\u27e9 https://docs.rs/miette/latest/miette/#msrv: \u00a7\n\u27e862\u27e9 http://crates.io/crates/anyhow: `anyhow`\n\u27e863\u27e9 https://crates.io/crates/color-eyre: `color-eyre`\n\u27e864\u27e9 https://crates.io/crates/thiserror: `thiserror`\n\u27e865\u27e9 https://github.com/estebank: @estebank\n\u27e866\u27e9 https://crates.io/crates/ariadne: `ariadne`\n\u27e867\u27e9 https://docs.rs/miette/latest/miette/LICENSE: Apache license 2.0\n\u27e868\u27e9 https://github.com/yaahc/eyre: `eyre`\n\u27e869\u27e9 https://github.com/dtolnay/thiserror: `thiserror`\n\u27e870\u27e9 https://github.com/zesterer/ariadne: `ariadne`\n\u27e871\u27e9 https://docs.rs/miette/latest/miette/#modules: \u00a7\n\u27e872\u27e9 https://docs.rs/miette/latest/miette/struct.GraphicalReportHandler.html: struct miette::GraphicalReportHandler - `GraphicalReportHighlighter`\n\u27e873\u27e9 https://docs.rs/miette/latest/miette/#macros: \u00a7\n\u27e874\u27e9 https://docs.rs/miette/latest/miette/#structs: \u00a7\n\u27e875\u27e9 https://docs.rs/miette/latest/miette/struct.DebugReportHandler.html: struct miette::DebugReportHandler - DebugReportHandler\n\u27e876\u27e9 https://docs.rs/miette/latest/miette/struct.GraphicalTheme.html: struct miette::GraphicalTheme - GraphicalTheme\n\u27e877\u27e9 https://docs.rs/miette/latest/miette/struct.InstallError.html: struct miette::InstallError - InstallError\n\u27e878\u27e9 https://docs.rs/miette/latest/miette/fn.set_hook.html: fn miette::set_hook - `set_hook()`\n\u27e879\u27e9 https://docs.rs/miette/latest/miette/type.ErrorHook.html: type miette::ErrorHook - `ErrorHook`\n\u27e880\u27e9 https://docs.rs/miette/latest/miette/struct.JSONReportHandler.html: struct miette::JSONReportHandler - JSONReportHandler\n\u27e881\u27e9 https://docs.rs/miette/latest/miette/struct.LabeledSpan.html: struct miette::LabeledSpan - LabeledSpan\n\u27e882\u27e9 https://docs.rs/miette/latest/miette/struct.MietteSpanContents.html: struct miette::MietteSpanContents - MietteSpanContents\n\u27e883\u27e9 https://doc.rust-lang.org/nightly/alloc/string/struct.String.html: struct alloc::string::String - `String`\n\u27e884\u27e9 https://docs.rs/miette/latest/miette/struct.NarratableReportHandler.html: struct miette::NarratableReportHandler - NarratableReportHandler\n\u27e885\u27e9 https://docs.rs/miette/latest/miette/struct.Report.html: struct miette::Report - Report\n\u27e886\u27e9 https://docs.rs/miette/latest/miette/struct.SourceOffset.html: struct miette::SourceOffset - SourceOffset\n\u27e887\u27e9 https://docs.rs/miette/latest/miette/type.ByteOffset.html: type miette::ByteOffset - `ByteOffset`\n\u27e888\u27e9 https://docs.rs/miette/latest/miette/struct.ThemeCharacters.html: struct miette::ThemeCharacters - ThemeCharacters\n\u27e889\u27e9 https://docs.rs/miette/latest/miette/struct.ThemeStyles.html: struct miette::ThemeStyles - ThemeStyles\n\u27e890\u27e9 https://docs.rs/miette/latest/miette/#enums: \u00a7\n\u27e891\u27e9 https://docs.rs/miette/latest/miette/enum.MietteError.html: enum miette::MietteError - MietteError\n\u27e892\u27e9 https://docs.rs/miette/latest/miette/enum.RgbColors.html: enum miette::RgbColors - RgbColors\n\u27e893\u27e9 https://docs.rs/miette/latest/miette/enum.Severity.html: enum miette::Severity - Severity\n\u27e894\u27e9 https://docs.rs/miette/latest/miette/enum.Severity.html#variant.Error: variant miette::Severity::Error - `Severity::Error`\n\u27e895\u27e9 https://docs.rs/miette/latest/miette/#traits: \u00a7\n\u27e896\u27e9 https://docs.rs/miette/latest/miette/trait.Context.html: trait miette::Context - Context\n\u27e897\u27e9 https://docs.rs/miette/latest/miette/trait.Context.html#tymethod.wrap_err: method miette::Context::wrap_err - `wrap_err()`\n\u27e898\u27e9 https://docs.rs/miette/latest/miette/trait.IntoDiagnostic.html#tymethod.into_diagnostic: method miette::IntoDiagnostic::into_diagnostic - `.into_diagnostic()`\n\u27e899\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result<T, Report>`\n\u27e8100\u27e9 https://docs.rs/miette/latest/miette/trait.WrapErr.html: trait miette::WrapErr - WrapErr\n\u27e8101\u27e9 https://docs.rs/miette/latest/miette/#functions: \u00a7\n\u27e8102\u27e9 https://docs.rs/miette/latest/miette/fn.set_panic_hook.html: fn miette::set_panic_hook - set_panic_hook\n\u27e8103\u27e9 https://docs.rs/miette/latest/miette/#types: \u00a7\n\u27e8104\u27e9 https://docs.rs/miette/latest/miette/#derives: \u00a7\n\u27e8105\u27e9 https://docs.rs/miette/latest/miette/derive.Diagnostic.html: derive miette::Diagnostic - Diagnostic\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `miette` crate is a diagnostic library for Rust that enhances error reporting with rich metadata, customizable graphical outputs, and support for syntax highlighting, spans, and labels. It provides tools like the `Diagnostic` trait, derive macros, and integrations with `anyhow`/`eyre`-style error handling to create detailed, human-friendly error messages. Features include configurable handlers, dynamic diagnostics, and compatibility with libraries and applications.",
    "feature_summary": null,
    "use_case": "DevTools",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: Diagnostic Metadata  \n\u2705 **Factual:** The `miette` crate provides a derive macro `#[derive(Diagnostic)]` that allows developers to annotate error types with rich metadata, such as error codes, help text, and labels for source spans.  \n\u274c **Counterfactual:** The `miette` crate requires developers to manually implement diagnostic metadata for error types, as it does not provide a derive macro for this purpose.  \n\n---\n\n### Pair 2: Fancy Graphical Output  \n\u2705 **Factual:** Enabling the `\"fancy\"` feature in the `miette` crate allows for graphical diagnostic output with ANSI/Unicode text, including syntax highlighting and multi-line error spans.  \n\u274c **Counterfactual:** The `miette` crate does not support graphical diagnostic output, even with the `\"fancy\"` feature enabled, and only produces plain text error messages.  \n\n---\n\n### Pair 3: Compatibility with `std::error::Error`  \n\u2705 **Factual:** Errors defined using `miette`'s `Diagnostic` trait are fully compatible with `std::error::Error`, allowing seamless integration into existing Rust error-handling workflows.  \n\u274c **Counterfactual:** Errors defined using `miette`'s `Diagnostic` trait are incompatible with `std::error::Error`, requiring developers to use a custom error-handling system.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}