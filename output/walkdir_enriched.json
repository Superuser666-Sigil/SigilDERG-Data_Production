{
    "name": "walkdir",
    "version": "2.5.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/walkdir/latest/walkdir/all.html \"show sidebar\")\n# Crate walkdirCopy item path\n[Settings](https://docs.rs/walkdir/latest/settings.html)\n[Help](https://docs.rs/walkdir/latest/help.html)\nSummary[Source](https://docs.rs/walkdir/latest/src/walkdir/lib.rs.html#1-1194)\nExpand description\nCrate `walkdir` provides an efficient and cross platform implementation of recursive directory traversal. Several options are exposed to control iteration, such as whether to follow symbolic links (default off), limit the maximum number of simultaneous open file descriptors and the ability to efficiently skip descending into directories.\nTo use this crate, add `walkdir` as a dependency to your project\u2019s `Cargo.toml`:\n```\n[dependencies]\nwalkdir = \"2\"\n```\n\n## [\u00a7](https://docs.rs/walkdir/latest/walkdir/#from-the-top)From the top\nThe [`WalkDir`](https://docs.rs/walkdir/latest/walkdir/struct.WalkDir.html) type builds iterators. The [`DirEntry`](https://docs.rs/walkdir/latest/walkdir/struct.DirEntry.html) type describes values yielded by the iterator. Finally, the [`Error`](https://docs.rs/walkdir/latest/walkdir/struct.Error.html) type is a small wrapper around [`std::io::Error`](https://doc.rust-lang.org/stable/std/io/struct.Error.html) with additional information, such as if a loop was detected while following symbolic links (not enabled by default).\n## [\u00a7](https://docs.rs/walkdir/latest/walkdir/#example)Example\nThe following code recursively iterates over the directory given and prints the path for each entry:\n```\nuse walkdir::WalkDir;\nfor entry in WalkDir::new(\"foo\") {\n  println!(\"{}\", entry?.path().display());\n}\n```\n\nOr, if you\u2019d like to iterate over all entries and ignore any errors that may arise, use [`filter_map`](https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.filter_map). (e.g., This code below will silently skip directories that the owner of the running process does not have permission to access.)\n```\nuse walkdir::WalkDir;\nfor entry in WalkDir::new(\"foo\").into_iter().filter_map(|e| e.ok()) {\n  println!(\"{}\", entry.path().display());\n}\n```\n\n## [\u00a7](https://docs.rs/walkdir/latest/walkdir/#example-follow-symbolic-links)Example: follow symbolic links\nThe same code as above, except [`follow_links`](https://docs.rs/walkdir/latest/walkdir/struct.WalkDir.html#method.follow_links) is enabled:\n```\nuse walkdir::WalkDir;\nfor entry in WalkDir::new(\"foo\").follow_links(true) {\n  println!(\"{}\", entry?.path().display());\n}\n```\n\n## [\u00a7](https://docs.rs/walkdir/latest/walkdir/#example-skip-hidden-files-and-directories-on-unix)Example: skip hidden files and directories on unix\nThis uses the [`filter_entry`](https://docs.rs/walkdir/latest/walkdir/struct.IntoIter.html#method.filter_entry) iterator adapter to avoid yielding hidden files and directories efficiently (i.e. without recursing into hidden directories):\n```\nuse walkdir::{DirEntry, WalkDir};\nfn is_hidden(entry: &DirEntry) -> bool {\n  entry.file_name()\n     .to_str()\n     .map(|s| s.starts_with(\".\"))\n     .unwrap_or(false)\n}\nlet walker = WalkDir::new(\"foo\").into_iter();\nfor entry in walker.filter_entry(|e| !is_hidden(e)) {\n  println!(\"{}\", entry?.path().display());\n}\n```\n\n## Structs[\u00a7](https://docs.rs/walkdir/latest/walkdir/#structs)\n\n[DirEntry](https://docs.rs/walkdir/latest/walkdir/struct.DirEntry.html \"struct walkdir::DirEntry\")\n    A directory entry.\n\n[Error](https://docs.rs/walkdir/latest/walkdir/struct.Error.html \"struct walkdir::Error\")\n    An error produced by recursively walking a directory.\n\n[FilterEntry](https://docs.rs/walkdir/latest/walkdir/struct.FilterEntry.html \"struct walkdir::FilterEntry\")\n    A recursive directory iterator that skips entries.\n\n[IntoIter](https://docs.rs/walkdir/latest/walkdir/struct.IntoIter.html \"struct walkdir::IntoIter\")\n    An iterator for recursively descending into a directory.\n\n[WalkDir](https://docs.rs/walkdir/latest/walkdir/struct.WalkDir.html \"struct walkdir::WalkDir\")\n    A builder to create an iterator for recursively walking a directory.\n## Traits[\u00a7](https://docs.rs/walkdir/latest/walkdir/#traits)\n\n[DirEntryExt](https://docs.rs/walkdir/latest/walkdir/trait.DirEntryExt.html \"trait walkdir::DirEntryExt\")\n    Unix-specific extension methods for `walkdir::DirEntry`\n## Type Aliases[\u00a7](https://docs.rs/walkdir/latest/walkdir/#types)\n\n[Result](https://docs.rs/walkdir/latest/walkdir/type.Result.html \"type walkdir::Result\")\n    A result type for walkdir operations.\n",
        "markdown_with_citations": "[](https://docs.rs/walkdir/latest/walkdir/all.html \"show sidebar\")\n# Crate walkdirCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nCrate `walkdir` provides an efficient and cross platform implementation of recursive directory traversal. Several options are exposed to control iteration, such as whether to follow symbolic links (default off), limit the maximum number of simultaneous open file descriptors and the ability to efficiently skip descending into directories.\nTo use this crate, add `walkdir` as a dependency to your project\u2019s `Cargo.toml`:\n```\n[dependencies]\nwalkdir = \"2\"\n```\n\n## \u00a7\u27e84\u27e9From the top\nThe `WalkDir`\u27e85\u27e9 type builds iterators. The `DirEntry`\u27e86\u27e9 type describes values yielded by the iterator. Finally, the `Error`\u27e87\u27e9 type is a small wrapper around `std::io::Error`\u27e88\u27e9 with additional information, such as if a loop was detected while following symbolic links (not enabled by default).\n## \u00a7\u27e89\u27e9Example\nThe following code recursively iterates over the directory given and prints the path for each entry:\n```\nuse walkdir::WalkDir;\nfor entry in WalkDir::new(\"foo\") {\n  println!(\"{}\", entry?.path().display());\n}\n```\n\nOr, if you\u2019d like to iterate over all entries and ignore any errors that may arise, use `filter_map`\u27e810\u27e9. (e.g., This code below will silently skip directories that the owner of the running process does not have permission to access.)\n```\nuse walkdir::WalkDir;\nfor entry in WalkDir::new(\"foo\").into_iter().filter_map(|e| e.ok()) {\n  println!(\"{}\", entry.path().display());\n}\n```\n\n## \u00a7\u27e811\u27e9Example: follow symbolic links\nThe same code as above, except `follow_links`\u27e812\u27e9 is enabled:\n```\nuse walkdir::WalkDir;\nfor entry in WalkDir::new(\"foo\").follow_links(true) {\n  println!(\"{}\", entry?.path().display());\n}\n```\n\n## \u00a7\u27e813\u27e9Example: skip hidden files and directories on unix\nThis uses the `filter_entry`\u27e814\u27e9 iterator adapter to avoid yielding hidden files and directories efficiently (i.e. without recursing into hidden directories):\n```\nuse walkdir::{DirEntry, WalkDir};\nfn is_hidden(entry: &DirEntry) -> bool {\n  entry.file_name()\n     .to_str()\n     .map(|s| s.starts_with(\".\"))\n     .unwrap_or(false)\n}\nlet walker = WalkDir::new(\"foo\").into_iter();\nfor entry in walker.filter_entry(|e| !is_hidden(e)) {\n  println!(\"{}\", entry?.path().display());\n}\n```\n\n## Structs\u00a7\u27e815\u27e9\n\nDirEntry\u27e86\u27e9\n    A directory entry.\n\nError\u27e87\u27e9\n    An error produced by recursively walking a directory.\n\nFilterEntry\u27e816\u27e9\n    A recursive directory iterator that skips entries.\n\nIntoIter\u27e817\u27e9\n    An iterator for recursively descending into a directory.\n\nWalkDir\u27e85\u27e9\n    A builder to create an iterator for recursively walking a directory.\n## Traits\u00a7\u27e818\u27e9\n\nDirEntryExt\u27e819\u27e9\n    Unix-specific extension methods for `walkdir::DirEntry`\n## Type Aliases\u00a7\u27e820\u27e9\n\nResult\u27e821\u27e9\n    A result type for walkdir operations.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/walkdir/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/walkdir/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/walkdir/latest/src/walkdir/lib.rs.html#1-1194: Source\n\u27e84\u27e9 https://docs.rs/walkdir/latest/walkdir/#from-the-top: \u00a7\n\u27e85\u27e9 https://docs.rs/walkdir/latest/walkdir/struct.WalkDir.html: `WalkDir`\n\u27e86\u27e9 https://docs.rs/walkdir/latest/walkdir/struct.DirEntry.html: `DirEntry`\n\u27e87\u27e9 https://docs.rs/walkdir/latest/walkdir/struct.Error.html: `Error`\n\u27e88\u27e9 https://doc.rust-lang.org/stable/std/io/struct.Error.html: `std::io::Error`\n\u27e89\u27e9 https://docs.rs/walkdir/latest/walkdir/#example: \u00a7\n\u27e810\u27e9 https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.filter_map: `filter_map`\n\u27e811\u27e9 https://docs.rs/walkdir/latest/walkdir/#example-follow-symbolic-links: \u00a7\n\u27e812\u27e9 https://docs.rs/walkdir/latest/walkdir/struct.WalkDir.html#method.follow_links: `follow_links`\n\u27e813\u27e9 https://docs.rs/walkdir/latest/walkdir/#example-skip-hidden-files-and-directories-on-unix: \u00a7\n\u27e814\u27e9 https://docs.rs/walkdir/latest/walkdir/struct.IntoIter.html#method.filter_entry: `filter_entry`\n\u27e815\u27e9 https://docs.rs/walkdir/latest/walkdir/#structs: \u00a7\n\u27e816\u27e9 https://docs.rs/walkdir/latest/walkdir/struct.FilterEntry.html: struct walkdir::FilterEntry - FilterEntry\n\u27e817\u27e9 https://docs.rs/walkdir/latest/walkdir/struct.IntoIter.html: struct walkdir::IntoIter - IntoIter\n\u27e818\u27e9 https://docs.rs/walkdir/latest/walkdir/#traits: \u00a7\n\u27e819\u27e9 https://docs.rs/walkdir/latest/walkdir/trait.DirEntryExt.html: trait walkdir::DirEntryExt - DirEntryExt\n\u27e820\u27e9 https://docs.rs/walkdir/latest/walkdir/#types: \u00a7\n\u27e821\u27e9 https://docs.rs/walkdir/latest/walkdir/type.Result.html: type walkdir::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `walkdir` crate provides an efficient, cross-platform implementation for recursive directory traversal in Rust. It offers flexible options such as following symbolic links, limiting open file descriptors, skipping hidden files or directories, and handling errors gracefully. Key components include the `WalkDir` iterator builder, `DirEntry` for directory entries, and `Error` for enhanced error reporting.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Iteration and Error Handling\n\u2705 Factual: The `walkdir` crate allows users to iterate over directory entries recursively, and errors can be handled gracefully using methods like `filter_map` to skip problematic entries.  \n\u274c Counterfactual: The `walkdir` crate automatically retries failed directory reads instead of skipping them, ensuring all entries are processed without errors.  \n\n---\n\n### Pair 2: Symbolic Link Handling\n\u2705 Factual: By default, the `walkdir` crate does not follow symbolic links, but this behavior can be enabled using the `follow_links` method.  \n\u274c Counterfactual: The `walkdir` crate always follows symbolic links by default, and users must explicitly disable this behavior using a configuration option.  \n\n---\n\n### Pair 3: Hidden File Filtering\n\u2705 Factual: The `walkdir` crate provides a `filter_entry` method that can be used to efficiently skip hidden files and directories without descending into them.  \n\u274c Counterfactual: The `walkdir` crate automatically skips hidden files and directories on Unix systems without requiring any additional filtering logic.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}