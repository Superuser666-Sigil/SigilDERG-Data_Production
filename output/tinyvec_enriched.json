{
    "name": "tinyvec",
    "version": "1.9.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/tinyvec/latest/tinyvec/all.html \"show sidebar\")\n# Crate tinyvecCopy item path\n[Settings](https://docs.rs/tinyvec/latest/settings.html)\n[Help](https://docs.rs/tinyvec/latest/help.html)\nSummary[Source](https://docs.rs/tinyvec/latest/src/tinyvec/lib.rs.html#1-112)\nExpand description\n`tinyvec` provides 100% safe vec-like data structures.\n### [\u00a7](https://docs.rs/tinyvec/latest/tinyvec/#provided-types)Provided Types\nWith no features enabled, this crate provides the [`ArrayVec`](https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVec.html \"struct tinyvec::ArrayVec\") type, which is an array-backed storage. You can push values into the array and pop them out of the array and so on. If the array is made to overflow it will panic.\nSimilarly, there is also a [`SliceVec`](https://docs.rs/tinyvec/latest/tinyvec/struct.SliceVec.html \"struct tinyvec::SliceVec\") type available, which is a vec-like that\u2019s backed by a slice you provide. You can add and remove elements, but if you overflow the slice it will panic.\nWith the `alloc` feature enabled, the crate also has a [`TinyVec`](https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVec.html \"enum tinyvec::TinyVec\") type. This is an enum type which is either an `Inline(ArrayVec)` or a `Heap(Vec)`. If a `TinyVec` is `Inline` and would overflow it automatically transitions itself into being `Heap` mode instead of a panic.\nAll of this is done with no `unsafe` code within the crate. Technically the `Vec` type from the standard library uses `unsafe` internally, but _this crate_ introduces no new `unsafe` code into your project.\nThe limitation is that the element type of a vec from this crate must support the [`Default`](https://doc.rust-lang.org/nightly/core/default/trait.Default.html \"trait core::default::Default\") trait. This means that this crate isn\u2019t suitable for all situations, but a very surprising number of types do support `Default`.\n### [\u00a7](https://docs.rs/tinyvec/latest/tinyvec/#other-features)Other Features\n  * `grab_spare_slice` lets you get access to the \u201cinactive\u201d portions of an ArrayVec.\n  * `serde` provides a `Serialize` and `Deserialize` implementation for [`TinyVec`](https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVec.html \"enum tinyvec::TinyVec\") and [`ArrayVec`](https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVec.html \"struct tinyvec::ArrayVec\") types, provided the inner item also has an implementation.\n  * `borsh` provides a `BorshSerialize` and `BorshDeserialize` implementation for [`TinyVec`](https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVec.html \"enum tinyvec::TinyVec\") and [`ArrayVec`](https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVec.html \"struct tinyvec::ArrayVec\") types, provided the inner item also has an implementation.\n\n\n### [\u00a7](https://docs.rs/tinyvec/latest/tinyvec/#api)API\nThe general goal of the crate is that, as much as possible, the vecs here should be a \u201cdrop in\u201d replacement for the standard library `Vec` type. We strive to provide all of the `Vec` methods with the same names and signatures. The exception is that the element type of some methods will have a `Default` bound that\u2019s not part of the normal `Vec` type.\nThe vecs here also have a few additional methods that aren\u2019t on the `Vec` type. In this case, the names tend to be fairly long so that they are unlikely to clash with any future methods added to `Vec`.\n### [\u00a7](https://docs.rs/tinyvec/latest/tinyvec/#stability)Stability\n  * The `1.0` series of the crate works with Rustc `1.34.0` or later, though you still need to have Rustc `1.36.0` to use the `alloc` feature.\n  * The `2.0` version of the crate is planned for some time after the `min_const_generics` stuff becomes stable. This would greatly raise the minimum rust version and also allow us to totally eliminate the need for the `Array` trait. The actual usage of the crate is not expected to break significantly in this transition.\n\n\n## Macros[\u00a7](https://docs.rs/tinyvec/latest/tinyvec/#macros)\n\n[array_vec](https://docs.rs/tinyvec/latest/tinyvec/macro.array_vec.html \"macro tinyvec::array_vec\")\n    Helper to make an `ArrayVec`.\n\n[tiny_vec](https://docs.rs/tinyvec/latest/tinyvec/macro.tiny_vec.html \"macro tinyvec::tiny_vec\")`alloc`\n    Helper to make a `TinyVec`.\n## Structs[\u00a7](https://docs.rs/tinyvec/latest/tinyvec/#structs)\n\n[ArrayVec](https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVec.html \"struct tinyvec::ArrayVec\")\n    An array-backed, vector-like data structure.\n\n[ArrayVecDrain](https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVecDrain.html \"struct tinyvec::ArrayVecDrain\")\n    Draining iterator for [`ArrayVec`](https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVec.html \"struct tinyvec::ArrayVec\")\n\n[ArrayVecIterator](https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVecIterator.html \"struct tinyvec::ArrayVecIterator\")\n    Iterator for consuming an `ArrayVec` and returning owned elements.\n\n[ArrayVecSplice](https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVecSplice.html \"struct tinyvec::ArrayVecSplice\")\n    Splicing iterator for `ArrayVec` See [`ArrayVec::splice`](https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVec.html#method.splice \"method tinyvec::ArrayVec::splice\")\n\n[SliceVec](https://docs.rs/tinyvec/latest/tinyvec/struct.SliceVec.html \"struct tinyvec::SliceVec\")\n    A slice-backed vector-like data structure.\n\n[SliceVecDrain](https://docs.rs/tinyvec/latest/tinyvec/struct.SliceVecDrain.html \"struct tinyvec::SliceVecDrain\")\n    Draining iterator for [`SliceVec`](https://docs.rs/tinyvec/latest/tinyvec/struct.SliceVec.html \"struct tinyvec::SliceVec\")\n\n[TinyVecSplice](https://docs.rs/tinyvec/latest/tinyvec/struct.TinyVecSplice.html \"struct tinyvec::TinyVecSplice\")`alloc`\n    Splicing iterator for `TinyVec` See [`TinyVec::splice`](https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVec.html#method.splice \"method tinyvec::TinyVec::splice\")\n\n[TryFromSliceError](https://docs.rs/tinyvec/latest/tinyvec/struct.TryFromSliceError.html \"struct tinyvec::TryFromSliceError\")\n    The error type returned when a conversion from a slice to an [`ArrayVec`](https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVec.html \"struct tinyvec::ArrayVec\") fails.\n## Enums[\u00a7](https://docs.rs/tinyvec/latest/tinyvec/#enums)\n\n[TinyVec](https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVec.html \"enum tinyvec::TinyVec\")`alloc`\n    A vector that starts inline, but can automatically move to the heap.\n\n[TinyVecDrain](https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVecDrain.html \"enum tinyvec::TinyVecDrain\")`alloc`\n    Draining iterator for `TinyVecDrain`\n\n[TinyVecIterator](https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVecIterator.html \"enum tinyvec::TinyVecIterator\")`alloc`\n    Iterator for consuming an `TinyVec` and returning owned elements.\n## Traits[\u00a7](https://docs.rs/tinyvec/latest/tinyvec/#traits)\n\n[Array](https://docs.rs/tinyvec/latest/tinyvec/trait.Array.html \"trait tinyvec::Array\")\n    A trait for types that are an array.\n",
        "markdown_with_citations": "[](https://docs.rs/tinyvec/latest/tinyvec/all.html \"show sidebar\")\n# Crate tinyvecCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`tinyvec` provides 100% safe vec-like data structures.\n### \u00a7\u27e84\u27e9Provided Types\nWith no features enabled, this crate provides the `ArrayVec`\u27e85\u27e9 type, which is an array-backed storage. You can push values into the array and pop them out of the array and so on. If the array is made to overflow it will panic.\nSimilarly, there is also a `SliceVec`\u27e86\u27e9 type available, which is a vec-like that\u2019s backed by a slice you provide. You can add and remove elements, but if you overflow the slice it will panic.\nWith the `alloc` feature enabled, the crate also has a `TinyVec`\u27e87\u27e9 type. This is an enum type which is either an `Inline(ArrayVec)` or a `Heap(Vec)`. If a `TinyVec` is `Inline` and would overflow it automatically transitions itself into being `Heap` mode instead of a panic.\nAll of this is done with no `unsafe` code within the crate. Technically the `Vec` type from the standard library uses `unsafe` internally, but _this crate_ introduces no new `unsafe` code into your project.\nThe limitation is that the element type of a vec from this crate must support the `Default`\u27e88\u27e9 trait. This means that this crate isn\u2019t suitable for all situations, but a very surprising number of types do support `Default`.\n### \u00a7\u27e89\u27e9Other Features\n  * `grab_spare_slice` lets you get access to the \u201cinactive\u201d portions of an ArrayVec.\n  * `serde` provides a `Serialize` and `Deserialize` implementation for `TinyVec`\u27e87\u27e9 and `ArrayVec`\u27e85\u27e9 types, provided the inner item also has an implementation.\n  * `borsh` provides a `BorshSerialize` and `BorshDeserialize` implementation for `TinyVec`\u27e87\u27e9 and `ArrayVec`\u27e85\u27e9 types, provided the inner item also has an implementation.\n\n\n### \u00a7\u27e810\u27e9API\nThe general goal of the crate is that, as much as possible, the vecs here should be a \u201cdrop in\u201d replacement for the standard library `Vec` type. We strive to provide all of the `Vec` methods with the same names and signatures. The exception is that the element type of some methods will have a `Default` bound that\u2019s not part of the normal `Vec` type.\nThe vecs here also have a few additional methods that aren\u2019t on the `Vec` type. In this case, the names tend to be fairly long so that they are unlikely to clash with any future methods added to `Vec`.\n### \u00a7\u27e811\u27e9Stability\n  * The `1.0` series of the crate works with Rustc `1.34.0` or later, though you still need to have Rustc `1.36.0` to use the `alloc` feature.\n  * The `2.0` version of the crate is planned for some time after the `min_const_generics` stuff becomes stable. This would greatly raise the minimum rust version and also allow us to totally eliminate the need for the `Array` trait. The actual usage of the crate is not expected to break significantly in this transition.\n\n\n## Macros\u00a7\u27e812\u27e9\n\narray_vec\u27e813\u27e9\n    Helper to make an `ArrayVec`.\n\ntiny_vec\u27e814\u27e9`alloc`\n    Helper to make a `TinyVec`.\n## Structs\u00a7\u27e815\u27e9\n\nArrayVec\u27e85\u27e9\n    An array-backed, vector-like data structure.\n\nArrayVecDrain\u27e816\u27e9\n    Draining iterator for `ArrayVec`\u27e85\u27e9\n\nArrayVecIterator\u27e817\u27e9\n    Iterator for consuming an `ArrayVec` and returning owned elements.\n\nArrayVecSplice\u27e818\u27e9\n    Splicing iterator for `ArrayVec` See `ArrayVec::splice`\u27e819\u27e9\n\nSliceVec\u27e86\u27e9\n    A slice-backed vector-like data structure.\n\nSliceVecDrain\u27e820\u27e9\n    Draining iterator for `SliceVec`\u27e86\u27e9\n\nTinyVecSplice\u27e821\u27e9`alloc`\n    Splicing iterator for `TinyVec` See `TinyVec::splice`\u27e822\u27e9\n\nTryFromSliceError\u27e823\u27e9\n    The error type returned when a conversion from a slice to an `ArrayVec`\u27e85\u27e9 fails.\n## Enums\u00a7\u27e824\u27e9\n\nTinyVec\u27e87\u27e9`alloc`\n    A vector that starts inline, but can automatically move to the heap.\n\nTinyVecDrain\u27e825\u27e9`alloc`\n    Draining iterator for `TinyVecDrain`\n\nTinyVecIterator\u27e826\u27e9`alloc`\n    Iterator for consuming an `TinyVec` and returning owned elements.\n## Traits\u00a7\u27e827\u27e9\n\nArray\u27e828\u27e9\n    A trait for types that are an array.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tinyvec/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tinyvec/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tinyvec/latest/src/tinyvec/lib.rs.html#1-112: Source\n\u27e84\u27e9 https://docs.rs/tinyvec/latest/tinyvec/#provided-types: \u00a7\n\u27e85\u27e9 https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVec.html: struct tinyvec::ArrayVec - `ArrayVec`\n\u27e86\u27e9 https://docs.rs/tinyvec/latest/tinyvec/struct.SliceVec.html: struct tinyvec::SliceVec - `SliceVec`\n\u27e87\u27e9 https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVec.html: enum tinyvec::TinyVec - `TinyVec`\n\u27e88\u27e9 https://doc.rust-lang.org/nightly/core/default/trait.Default.html: trait core::default::Default - `Default`\n\u27e89\u27e9 https://docs.rs/tinyvec/latest/tinyvec/#other-features: \u00a7\n\u27e810\u27e9 https://docs.rs/tinyvec/latest/tinyvec/#api: \u00a7\n\u27e811\u27e9 https://docs.rs/tinyvec/latest/tinyvec/#stability: \u00a7\n\u27e812\u27e9 https://docs.rs/tinyvec/latest/tinyvec/#macros: \u00a7\n\u27e813\u27e9 https://docs.rs/tinyvec/latest/tinyvec/macro.array_vec.html: macro tinyvec::array_vec - array_vec\n\u27e814\u27e9 https://docs.rs/tinyvec/latest/tinyvec/macro.tiny_vec.html: macro tinyvec::tiny_vec - tiny_vec\n\u27e815\u27e9 https://docs.rs/tinyvec/latest/tinyvec/#structs: \u00a7\n\u27e816\u27e9 https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVecDrain.html: struct tinyvec::ArrayVecDrain - ArrayVecDrain\n\u27e817\u27e9 https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVecIterator.html: struct tinyvec::ArrayVecIterator - ArrayVecIterator\n\u27e818\u27e9 https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVecSplice.html: struct tinyvec::ArrayVecSplice - ArrayVecSplice\n\u27e819\u27e9 https://docs.rs/tinyvec/latest/tinyvec/struct.ArrayVec.html#method.splice: method tinyvec::ArrayVec::splice - `ArrayVec::splice`\n\u27e820\u27e9 https://docs.rs/tinyvec/latest/tinyvec/struct.SliceVecDrain.html: struct tinyvec::SliceVecDrain - SliceVecDrain\n\u27e821\u27e9 https://docs.rs/tinyvec/latest/tinyvec/struct.TinyVecSplice.html: struct tinyvec::TinyVecSplice - TinyVecSplice\n\u27e822\u27e9 https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVec.html#method.splice: method tinyvec::TinyVec::splice - `TinyVec::splice`\n\u27e823\u27e9 https://docs.rs/tinyvec/latest/tinyvec/struct.TryFromSliceError.html: struct tinyvec::TryFromSliceError - TryFromSliceError\n\u27e824\u27e9 https://docs.rs/tinyvec/latest/tinyvec/#enums: \u00a7\n\u27e825\u27e9 https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVecDrain.html: enum tinyvec::TinyVecDrain - TinyVecDrain\n\u27e826\u27e9 https://docs.rs/tinyvec/latest/tinyvec/enum.TinyVecIterator.html: enum tinyvec::TinyVecIterator - TinyVecIterator\n\u27e827\u27e9 https://docs.rs/tinyvec/latest/tinyvec/#traits: \u00a7\n\u27e828\u27e9 https://docs.rs/tinyvec/latest/tinyvec/trait.Array.html: trait tinyvec::Array - Array\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `tinyvec` crate provides 100% safe, vec-like data structures with no `unsafe` code. It includes `ArrayVec` (array-backed), `SliceVec` (slice-backed), and `TinyVec` (inline storage that transitions to heap on overflow, enabled via the `alloc` feature). It aims to be a drop-in replacement for `Vec`, supports serialization (`serde` and `borsh`), and requires elements to implement the `Default` trait.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.5,
    "factual_counterfactual": "### Pair 1: ArrayVec Overflow Behavior  \n\u2705 Factual: The `ArrayVec` type in the `tinyvec` crate panics when the array overflows, ensuring safety without introducing `unsafe` code.  \n\u274c Counterfactual: The `ArrayVec` type automatically resizes itself to accommodate additional elements when the array overflows.  \n\n---\n\n### Pair 2: TinyVec Transition Behavior  \n\u2705 Factual: The `TinyVec` type starts as inline storage and transitions to heap storage automatically when the inline storage overflows, avoiding a panic.  \n\u274c Counterfactual: The `TinyVec` type always uses heap storage, regardless of whether the inline storage is sufficient.  \n\n---\n\n### Pair 3: Default Trait Requirement  \n\u2705 Factual: All element types used with `tinyvec`'s data structures must implement the `Default` trait, which limits its applicability in certain scenarios.  \n\u274c Counterfactual: The `tinyvec` crate supports all element types, regardless of whether they implement the `Default` trait.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}