{
    "name": "sqlx",
    "version": "0.8.6",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/sqlx/latest/sqlx/all.html \"show sidebar\")\n# Crate sqlxCopy item path\n[Settings](https://docs.rs/sqlx/latest/settings.html)\n[Help](https://docs.rs/sqlx/latest/help.html)\nSummary[Source](https://docs.rs/sqlx/latest/src/sqlx/lib.rs.html#1-174)\nExpand description\nThe async SQL toolkit for Rust, built with \u2764\ufe0f by [the LaunchBadge team](https://www.launchbadge.com).\nSee our [README](https://www.github.com/launchbadge/sqlx/tree/main/README.md) to get started or [browse our example projects](https://www.github.com/launchbadge/sqlx/tree/main/examples). Have a question? [Check our FAQ](https://www.github.com/launchbadge/sqlx/tree/main/FAQ.md) or [open a discussion](https://github.com/launchbadge/sqlx/discussions/new?category=q-a).\n#### [\u00a7](https://docs.rs/sqlx/latest/sqlx/#runtime-support)Runtime Support\nSQLx supports both the [Tokio](https://www.tokio.rs) and [async-std](https://www.async.rs) runtimes.\nYou choose which runtime SQLx uses by default by enabling one of the following features:\n  * `runtime-async-std`\n  * `runtime-tokio`\n\n\nThe `runtime-actix` feature also exists but is an alias of `runtime-tokio`.\nIf more than one runtime feature is enabled, the Tokio runtime is used if a Tokio context exists on the current thread, i.e. [`tokio::runtime::Handle::try_current()`](https://docs.rs/tokio/latest/tokio/runtime/struct.Handle.html#method.try_current) returns `Ok`; `async-std` is used otherwise.\nNote that while SQLx no longer produces a compile error if zero or multiple runtime features are enabled, which is useful for libraries building on top of it, **the use of nearly any async function in the API will panic without at least one runtime feature enabled**.\nThe chief exception is the SQLite driver, which is runtime-agnostic, including its integration with the query macros. However, [`SqlitePool`](https://docs.rs/sqlx/latest/sqlx/type.SqlitePool.html \"type sqlx::SqlitePool\") _does_ require runtime support for timeouts and spawning internal management tasks.\n#### [\u00a7](https://docs.rs/sqlx/latest/sqlx/#tls-support)TLS Support\nFor securely communicating with SQL servers over an untrusted network connection such as the internet, you can enable Transport Layer Security (TLS) by enabling one of the following features:\n  * `tls-native-tls`: Enables the [`native-tls`](https://docs.rs/native-tls/latest/native_tls/) backend which uses the OS-native TLS capabilities: \n    * SecureTransport on macOS.\n    * SChannel on Windows.\n    * OpenSSL on all other platforms.\n  * `tls-rustls`: Enables the [rustls](https://docs.rs/rustls/latest/rustls/) backend, a cross-platform TLS library. \n    * Only supports TLS revisions 1.2 and 1.3.\n    * If you get `HandshakeFailure` errors when using this feature, it likely means your database server does not support these newer revisions. This might be resolved by enabling or switching to the `tls-native-tls` feature.\n    * rustls supports several providers of cryptographic primitives. The default (enabled when you use the `tls-rustls` feature or `tls-rustls-ring`) is the `ring` provider, which has fewer build-time dependencies but also has fewer features. Alternatively, you can use `tls-rustls-aws-lc-rs` to use the `aws-lc-rs` provider, which enables additional cipher suite support at the cost of more onerous build requirements (depending on platform support).\n\n\nIf more than one TLS feature is enabled, the `tls-native-tls` feature takes precedent so that it is only necessary to enable it to see if it resolves the `HandshakeFailure` error without disabling `tls-rustls`.\nConsult the user manual for your database to find the TLS versions it supports.\nIf your connection configuration requires a TLS upgrade but TLS support was not enabled, the connection attempt will return an error.\nThe legacy runtime+TLS combination feature flags are still supported, but for forward-compatibility, use of the separate runtime and TLS feature flags is recommended.\n## Modules[\u00a7](https://docs.rs/sqlx/latest/sqlx/#modules)\n\n[any](https://docs.rs/sqlx/latest/sqlx/any/index.html \"mod sqlx::any\")\n    **SEE DOCUMENTATION BEFORE USE**. Runtime-generic database driver.\n\n[database](https://docs.rs/sqlx/latest/sqlx/database/index.html \"mod sqlx::database\")\n    Traits to represent a database driver.\n\n[decode](https://docs.rs/sqlx/latest/sqlx/decode/index.html \"mod sqlx::decode\")\n    Provides [`Decode`](https://docs.rs/sqlx/latest/sqlx/trait.Decode.html \"trait sqlx::Decode\") for decoding values from the database.\n\n[encode](https://docs.rs/sqlx/latest/sqlx/encode/index.html \"mod sqlx::encode\")\n    Provides [`Encode`](https://docs.rs/sqlx/latest/sqlx/trait.Encode.html \"trait sqlx::Encode\") for encoding values for the database.\n\n[error](https://docs.rs/sqlx/latest/sqlx/error/index.html \"mod sqlx::error\")\n    Types for working with errors produced by SQLx.\n\n[migrate](https://docs.rs/sqlx/latest/sqlx/migrate/index.html \"mod sqlx::migrate\")\n\n\n[mysql](https://docs.rs/sqlx/latest/sqlx/mysql/index.html \"mod sqlx::mysql\")`mysql`\n    **MySQL** database driver.\n\n[pool](https://docs.rs/sqlx/latest/sqlx/pool/index.html \"mod sqlx::pool\")\n    Provides the connection pool for asynchronous SQLx connections.\n\n[postgres](https://docs.rs/sqlx/latest/sqlx/postgres/index.html \"mod sqlx::postgres\")`postgres`\n    **PostgreSQL** database driver.\n\n[prelude](https://docs.rs/sqlx/latest/sqlx/prelude/index.html \"mod sqlx::prelude\")\n    Convenience re-export of common traits.\n\n[query](https://docs.rs/sqlx/latest/sqlx/query/index.html \"mod sqlx::query\")\n    Types and traits for the `query` family of functions and macros.\n\n[query_builder](https://docs.rs/sqlx/latest/sqlx/query_builder/index.html \"mod sqlx::query_builder\")\n    Runtime query-builder API.\n\n[sqlite](https://docs.rs/sqlx/latest/sqlx/sqlite/index.html \"mod sqlx::sqlite\")`_sqlite`\n    **SQLite** database driver.\n\n[types](https://docs.rs/sqlx/latest/sqlx/types/index.html \"mod sqlx::types\")\n    Conversions between Rust and SQL types.\n## Macros[\u00a7](https://docs.rs/sqlx/latest/sqlx/#macros)\n\n[migrate](https://docs.rs/sqlx/latest/sqlx/macro.migrate.html \"macro sqlx::migrate\")\n    Embeds migrations into the binary by expanding to a static instance of [Migrator](https://docs.rs/sqlx/latest/sqlx/migrate/struct.Migrator.html \"struct sqlx::migrate::Migrator\").\n\n[query](https://docs.rs/sqlx/latest/sqlx/macro.query.html \"macro sqlx::query\")`macros`\n    Statically checked SQL query with `println!()` style syntax.\n\n[query_as](https://docs.rs/sqlx/latest/sqlx/macro.query_as.html \"macro sqlx::query_as\")`macros`\n    A variant of [`query!`](https://docs.rs/sqlx/latest/sqlx/macro.query.html \"macro sqlx::query\") which takes a path to an explicitly defined struct as the output type.\n\n[query_as_unchecked](https://docs.rs/sqlx/latest/sqlx/macro.query_as_unchecked.html \"macro sqlx::query_as_unchecked\")`macros`\n    A variant of [`query_as!`](https://docs.rs/sqlx/latest/sqlx/macro.query_as.html \"macro sqlx::query_as\") which does not check the input or output types. This still does parse the query to ensure it\u2019s syntactically and semantically valid for the current database.\n\n[query_file](https://docs.rs/sqlx/latest/sqlx/macro.query_file.html \"macro sqlx::query_file\")`macros`\n    A variant of [`query!`](https://docs.rs/sqlx/latest/sqlx/macro.query.html \"macro sqlx::query\") where the SQL query is stored in a separate file.\n\n[query_file_as](https://docs.rs/sqlx/latest/sqlx/macro.query_file_as.html \"macro sqlx::query_file_as\")`macros`\n    Combines the syntaxes of [`query_as!`](https://docs.rs/sqlx/latest/sqlx/macro.query_as.html \"macro sqlx::query_as\") and [`query_file!`](https://docs.rs/sqlx/latest/sqlx/macro.query_file.html \"macro sqlx::query_file\").\n\n[query_file_as_unchecked](https://docs.rs/sqlx/latest/sqlx/macro.query_file_as_unchecked.html \"macro sqlx::query_file_as_unchecked\")`macros`\n    A variant of [`query_file_as!`](https://docs.rs/sqlx/latest/sqlx/macro.query_file_as.html \"macro sqlx::query_file_as\") which does not check the input or output types. This still does parse the query to ensure it\u2019s syntactically and semantically valid for the current database.\n\n[query_file_scalar](https://docs.rs/sqlx/latest/sqlx/macro.query_file_scalar.html \"macro sqlx::query_file_scalar\")`macros`\n    A variant of [`query_scalar!`](https://docs.rs/sqlx/latest/sqlx/macro.query_scalar.html \"macro sqlx::query_scalar\") which takes a file path like [`query_file!`](https://docs.rs/sqlx/latest/sqlx/macro.query_file.html \"macro sqlx::query_file\").\n\n[query_file_scalar_unchecked](https://docs.rs/sqlx/latest/sqlx/macro.query_file_scalar_unchecked.html \"macro sqlx::query_file_scalar_unchecked\")`macros`\n    A variant of [`query_file_scalar!`](https://docs.rs/sqlx/latest/sqlx/macro.query_file_scalar.html \"macro sqlx::query_file_scalar\") which does not typecheck bind parameters and leaves the output type to inference. The query itself is still checked that it is syntactically and semantically valid for the database, that it only produces one column and that the number of bind parameters is correct.\n\n[query_file_unchecked](https://docs.rs/sqlx/latest/sqlx/macro.query_file_unchecked.html \"macro sqlx::query_file_unchecked\")`macros`\n    A variant of [`query_file!`](https://docs.rs/sqlx/latest/sqlx/macro.query_file.html \"macro sqlx::query_file\") which does not check the input or output types. This still does parse the query to ensure it\u2019s syntactically and semantically valid for the current database.\n\n[query_scalar](https://docs.rs/sqlx/latest/sqlx/macro.query_scalar.html \"macro sqlx::query_scalar\")`macros`\n    A variant of [`query!`](https://docs.rs/sqlx/latest/sqlx/macro.query.html \"macro sqlx::query\") which expects a single column from the query and evaluates to an instance of [QueryScalar](https://docs.rs/sqlx/latest/sqlx/query/struct.QueryScalar.html \"struct sqlx::query::QueryScalar\").\n\n[query_scalar_unchecked](https://docs.rs/sqlx/latest/sqlx/macro.query_scalar_unchecked.html \"macro sqlx::query_scalar_unchecked\")`macros`\n    A variant of [`query_scalar!`](https://docs.rs/sqlx/latest/sqlx/macro.query_scalar.html \"macro sqlx::query_scalar\") which does not typecheck bind parameters and leaves the output type to inference. The query itself is still checked that it is syntactically and semantically valid for the database, that it only produces one column and that the number of bind parameters is correct.\n\n[query_unchecked](https://docs.rs/sqlx/latest/sqlx/macro.query_unchecked.html \"macro sqlx::query_unchecked\")`macros`\n    A variant of [`query!`](https://docs.rs/sqlx/latest/sqlx/macro.query.html \"macro sqlx::query\") which does not check the input or output types. This still does parse the query to ensure it\u2019s syntactically and semantically valid for the current database.\n## Structs[\u00a7](https://docs.rs/sqlx/latest/sqlx/#structs)\n\n[Any](https://docs.rs/sqlx/latest/sqlx/struct.Any.html \"struct sqlx::Any\")`any`\n    Opaque database driver. Capable of being used in place of any SQLx database driver. The actual driver used will be selected at runtime, from the connection url.\n\n[AnyConnection](https://docs.rs/sqlx/latest/sqlx/struct.AnyConnection.html \"struct sqlx::AnyConnection\")\n    **SEE DOCUMENTATION BEFORE USE**. Runtime-generic database connection.\n\n[MySql](https://docs.rs/sqlx/latest/sqlx/struct.MySql.html \"struct sqlx::MySql\")`mysql`\n    MySQL database driver.\n\n[MySqlConnection](https://docs.rs/sqlx/latest/sqlx/struct.MySqlConnection.html \"struct sqlx::MySqlConnection\")`mysql`\n    A connection to a MySQL database.\n\n[PgConnection](https://docs.rs/sqlx/latest/sqlx/struct.PgConnection.html \"struct sqlx::PgConnection\")`postgres`\n    A connection to a PostgreSQL database.\n\n[Pool](https://docs.rs/sqlx/latest/sqlx/struct.Pool.html \"struct sqlx::Pool\")\n    An asynchronous pool of SQLx database connections.\n\n[Postgres](https://docs.rs/sqlx/latest/sqlx/struct.Postgres.html \"struct sqlx::Postgres\")`postgres`\n    PostgreSQL database driver.\n\n[QueryBuilder](https://docs.rs/sqlx/latest/sqlx/struct.QueryBuilder.html \"struct sqlx::QueryBuilder\")\n    A builder type for constructing queries at runtime.\n\n[RawSql](https://docs.rs/sqlx/latest/sqlx/struct.RawSql.html \"struct sqlx::RawSql\")\n    One or more raw SQL statements, separated by semicolons (`;`).\n\n[Sqlite](https://docs.rs/sqlx/latest/sqlx/struct.Sqlite.html \"struct sqlx::Sqlite\")`_sqlite`\n    Sqlite database driver.\n\n[SqliteConnection](https://docs.rs/sqlx/latest/sqlx/struct.SqliteConnection.html \"struct sqlx::SqliteConnection\")`_sqlite`\n    A connection to an open [Sqlite](https://docs.rs/sqlx/latest/sqlx/struct.Sqlite.html \"struct sqlx::Sqlite\") database.\n\n[Transaction](https://docs.rs/sqlx/latest/sqlx/struct.Transaction.html \"struct sqlx::Transaction\")\n    An in-progress database transaction or savepoint.\n## Enums[\u00a7](https://docs.rs/sqlx/latest/sqlx/#enums)\n\n[Either](https://docs.rs/sqlx/latest/sqlx/enum.Either.html \"enum sqlx::Either\")\n    The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.\n\n[Error](https://docs.rs/sqlx/latest/sqlx/enum.Error.html \"enum sqlx::Error\")\n    Represents all the ways a method can fail within SQLx.\n## Traits[\u00a7](https://docs.rs/sqlx/latest/sqlx/#traits)\n\n[Acquire](https://docs.rs/sqlx/latest/sqlx/trait.Acquire.html \"trait sqlx::Acquire\")\n    Acquire connections or transactions from a database in a generic way.\n\n[AnyExecutor](https://docs.rs/sqlx/latest/sqlx/trait.AnyExecutor.html \"trait sqlx::AnyExecutor\")`any`\n    An alias for [`Executor<'_, Database = Any>`](https://docs.rs/sqlx/latest/sqlx/trait.Executor.html \"trait sqlx::Executor\").\n\n[Arguments](https://docs.rs/sqlx/latest/sqlx/trait.Arguments.html \"trait sqlx::Arguments\")\n    A tuple of arguments to be sent to the database.\n\n[Column](https://docs.rs/sqlx/latest/sqlx/trait.Column.html \"trait sqlx::Column\")\n\n\n[ColumnIndex](https://docs.rs/sqlx/latest/sqlx/trait.ColumnIndex.html \"trait sqlx::ColumnIndex\")\n    A type that can be used to index into a [`Row`](https://docs.rs/sqlx/latest/sqlx/trait.Row.html \"trait sqlx::Row\") or [`Statement`](https://docs.rs/sqlx/latest/sqlx/trait.Statement.html \"trait sqlx::Statement\").\n\n[ConnectOptions](https://docs.rs/sqlx/latest/sqlx/trait.ConnectOptions.html \"trait sqlx::ConnectOptions\")\n\n\n[Connection](https://docs.rs/sqlx/latest/sqlx/trait.Connection.html \"trait sqlx::Connection\")\n    Represents a single database connection.\n\n[Database](https://docs.rs/sqlx/latest/sqlx/trait.Database.html \"trait sqlx::Database\")\n    A database driver.\n\n[Decode](https://docs.rs/sqlx/latest/sqlx/trait.Decode.html \"trait sqlx::Decode\")\n    A type that can be decoded from the database.\n\n[Encode](https://docs.rs/sqlx/latest/sqlx/trait.Encode.html \"trait sqlx::Encode\")\n    Encode a single value to be sent to the database.\n\n[Execute](https://docs.rs/sqlx/latest/sqlx/trait.Execute.html \"trait sqlx::Execute\")\n    A type that may be executed against a database connection.\n\n[Executor](https://docs.rs/sqlx/latest/sqlx/trait.Executor.html \"trait sqlx::Executor\")\n    A type that contains or can provide a database connection to use for executing queries against the database.\n\n[FromRow](https://docs.rs/sqlx/latest/sqlx/trait.FromRow.html \"trait sqlx::FromRow\")\n    A record that can be built from a row returned by the database.\n\n[IntoArguments](https://docs.rs/sqlx/latest/sqlx/trait.IntoArguments.html \"trait sqlx::IntoArguments\")\n\n\n[MySqlExecutor](https://docs.rs/sqlx/latest/sqlx/trait.MySqlExecutor.html \"trait sqlx::MySqlExecutor\")`mysql`\n    An alias for [`Executor<'_, Database = MySql>`](https://docs.rs/sqlx/latest/sqlx/trait.Executor.html \"trait sqlx::Executor\").\n\n[PgExecutor](https://docs.rs/sqlx/latest/sqlx/trait.PgExecutor.html \"trait sqlx::PgExecutor\")`postgres`\n    An alias for [`Executor<'_, Database = Postgres>`](https://docs.rs/sqlx/latest/sqlx/trait.Executor.html \"trait sqlx::Executor\").\n\n[Row](https://docs.rs/sqlx/latest/sqlx/trait.Row.html \"trait sqlx::Row\")\n    Represents a single row from the database.\n\n[SqliteExecutor](https://docs.rs/sqlx/latest/sqlx/trait.SqliteExecutor.html \"trait sqlx::SqliteExecutor\")`_sqlite`\n    An alias for [`Executor<'_, Database = Sqlite>`](https://docs.rs/sqlx/latest/sqlx/trait.Executor.html \"trait sqlx::Executor\").\n\n[Statement](https://docs.rs/sqlx/latest/sqlx/trait.Statement.html \"trait sqlx::Statement\")\n    An explicitly prepared statement.\n\n[Type](https://docs.rs/sqlx/latest/sqlx/trait.Type.html \"trait sqlx::Type\")\n    Indicates that a SQL type is supported for a database.\n\n[TypeInfo](https://docs.rs/sqlx/latest/sqlx/trait.TypeInfo.html \"trait sqlx::TypeInfo\")\n    Provides information about a SQL type for the database driver.\n\n[Value](https://docs.rs/sqlx/latest/sqlx/trait.Value.html \"trait sqlx::Value\")\n    An owned value from the database.\n\n[ValueRef](https://docs.rs/sqlx/latest/sqlx/trait.ValueRef.html \"trait sqlx::ValueRef\")\n    A reference to a single value from the database.\n## Functions[\u00a7](https://docs.rs/sqlx/latest/sqlx/#functions)\n\n[query](https://docs.rs/sqlx/latest/sqlx/fn.query.html \"fn sqlx::query\")\n    Execute a single SQL query as a prepared statement (transparently cached).\n\n[query_as](https://docs.rs/sqlx/latest/sqlx/fn.query_as.html \"fn sqlx::query_as\")\n    Execute a single SQL query as a prepared statement (transparently cached). Maps rows to Rust types using [`FromRow`](https://docs.rs/sqlx/latest/sqlx/trait.FromRow.html \"trait sqlx::FromRow\").\n\n[query_as_with](https://docs.rs/sqlx/latest/sqlx/fn.query_as_with.html \"fn sqlx::query_as_with\")\n    Execute a single SQL query, with the given arguments as a prepared statement (transparently cached). Maps rows to Rust types using [`FromRow`](https://docs.rs/sqlx/latest/sqlx/trait.FromRow.html \"trait sqlx::FromRow\").\n\n[query_scalar](https://docs.rs/sqlx/latest/sqlx/fn.query_scalar.html \"fn sqlx::query_scalar\")\n    Execute a single SQL query as a prepared statement (transparently cached) and extract the first column of each row.\n\n[query_scalar_with](https://docs.rs/sqlx/latest/sqlx/fn.query_scalar_with.html \"fn sqlx::query_scalar_with\")\n    Execute a SQL query as a prepared statement (transparently cached), with the given arguments, and extract the first column of each row.\n\n[query_with](https://docs.rs/sqlx/latest/sqlx/fn.query_with.html \"fn sqlx::query_with\")\n    Execute a SQL query as a prepared statement (transparently cached), with the given arguments.\n\n[raw_sql](https://docs.rs/sqlx/latest/sqlx/fn.raw_sql.html \"fn sqlx::raw_sql\")\n    Execute one or more statements as raw SQL, separated by semicolons (`;`).\n## Type Aliases[\u00a7](https://docs.rs/sqlx/latest/sqlx/#types)\n\n[AnyPool](https://docs.rs/sqlx/latest/sqlx/type.AnyPool.html \"type sqlx::AnyPool\")\n    **SEE DOCUMENTATION BEFORE USE**. Type alias for `Pool<Any>`.\n\n[MySqlPool](https://docs.rs/sqlx/latest/sqlx/type.MySqlPool.html \"type sqlx::MySqlPool\")`mysql`\n    An alias for [`Pool`](https://docs.rs/sqlx/latest/sqlx/struct.Pool.html \"struct sqlx::Pool\"), specialized for MySQL.\n\n[MySqlTransaction](https://docs.rs/sqlx/latest/sqlx/type.MySqlTransaction.html \"type sqlx::MySqlTransaction\")`mysql`\n    An alias for [`Transaction`](https://docs.rs/sqlx/latest/sqlx/struct.Transaction.html \"struct sqlx::Transaction\"), specialized for MySQL.\n\n[PgPool](https://docs.rs/sqlx/latest/sqlx/type.PgPool.html \"type sqlx::PgPool\")`postgres`\n    An alias for [`Pool`](https://docs.rs/sqlx/latest/sqlx/struct.Pool.html \"struct sqlx::Pool\"), specialized for Postgres.\n\n[PgTransaction](https://docs.rs/sqlx/latest/sqlx/type.PgTransaction.html \"type sqlx::PgTransaction\")`postgres`\n    An alias for [`Transaction`](https://docs.rs/sqlx/latest/sqlx/struct.Transaction.html \"struct sqlx::Transaction\"), specialized for Postgres.\n\n[Result](https://docs.rs/sqlx/latest/sqlx/type.Result.html \"type sqlx::Result\")\n    A specialized `Result` type for SQLx.\n\n[SqlitePool](https://docs.rs/sqlx/latest/sqlx/type.SqlitePool.html \"type sqlx::SqlitePool\")`_sqlite`\n    An alias for [`Pool`](https://docs.rs/sqlx/latest/sqlx/struct.Pool.html \"struct sqlx::Pool\"), specialized for SQLite.\n\n[SqliteTransaction](https://docs.rs/sqlx/latest/sqlx/type.SqliteTransaction.html \"type sqlx::SqliteTransaction\")`_sqlite`\n    An alias for [`Transaction`](https://docs.rs/sqlx/latest/sqlx/struct.Transaction.html \"struct sqlx::Transaction\"), specialized for SQLite.\n## Attribute Macros[\u00a7](https://docs.rs/sqlx/latest/sqlx/#attributes)\n\n[test](https://docs.rs/sqlx/latest/sqlx/attr.test.html \"attr sqlx::test\")\n    Mark an `async fn` as a test with SQLx support.\n## Derive Macros[\u00a7](https://docs.rs/sqlx/latest/sqlx/#derives)\n\n[Decode](https://docs.rs/sqlx/latest/sqlx/derive.Decode.html \"derive sqlx::Decode\")\n\n\n[Encode](https://docs.rs/sqlx/latest/sqlx/derive.Encode.html \"derive sqlx::Encode\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/sqlx/latest/sqlx/all.html \"show sidebar\")\n# Crate sqlxCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThe async SQL toolkit for Rust, built with \u2764\ufe0f by the LaunchBadge team\u27e84\u27e9.\nSee our README\u27e85\u27e9 to get started or browse our example projects\u27e86\u27e9. Have a question? Check our FAQ\u27e87\u27e9 or open a discussion\u27e88\u27e9.\n#### \u00a7\u27e89\u27e9Runtime Support\nSQLx supports both the Tokio\u27e810\u27e9 and async-std\u27e811\u27e9 runtimes.\nYou choose which runtime SQLx uses by default by enabling one of the following features:\n  * `runtime-async-std`\n  * `runtime-tokio`\n\n\nThe `runtime-actix` feature also exists but is an alias of `runtime-tokio`.\nIf more than one runtime feature is enabled, the Tokio runtime is used if a Tokio context exists on the current thread, i.e. `tokio::runtime::Handle::try_current()`\u27e812\u27e9 returns `Ok`; `async-std` is used otherwise.\nNote that while SQLx no longer produces a compile error if zero or multiple runtime features are enabled, which is useful for libraries building on top of it, **the use of nearly any async function in the API will panic without at least one runtime feature enabled**.\nThe chief exception is the SQLite driver, which is runtime-agnostic, including its integration with the query macros. However, `SqlitePool`\u27e813\u27e9 _does_ require runtime support for timeouts and spawning internal management tasks.\n#### \u00a7\u27e814\u27e9TLS Support\nFor securely communicating with SQL servers over an untrusted network connection such as the internet, you can enable Transport Layer Security (TLS) by enabling one of the following features:\n  * `tls-native-tls`: Enables the `native-tls`\u27e815\u27e9 backend which uses the OS-native TLS capabilities: \n    * SecureTransport on macOS.\n    * SChannel on Windows.\n    * OpenSSL on all other platforms.\n  * `tls-rustls`: Enables the rustls\u27e816\u27e9 backend, a cross-platform TLS library. \n    * Only supports TLS revisions 1.2 and 1.3.\n    * If you get `HandshakeFailure` errors when using this feature, it likely means your database server does not support these newer revisions. This might be resolved by enabling or switching to the `tls-native-tls` feature.\n    * rustls supports several providers of cryptographic primitives. The default (enabled when you use the `tls-rustls` feature or `tls-rustls-ring`) is the `ring` provider, which has fewer build-time dependencies but also has fewer features. Alternatively, you can use `tls-rustls-aws-lc-rs` to use the `aws-lc-rs` provider, which enables additional cipher suite support at the cost of more onerous build requirements (depending on platform support).\n\n\nIf more than one TLS feature is enabled, the `tls-native-tls` feature takes precedent so that it is only necessary to enable it to see if it resolves the `HandshakeFailure` error without disabling `tls-rustls`.\nConsult the user manual for your database to find the TLS versions it supports.\nIf your connection configuration requires a TLS upgrade but TLS support was not enabled, the connection attempt will return an error.\nThe legacy runtime+TLS combination feature flags are still supported, but for forward-compatibility, use of the separate runtime and TLS feature flags is recommended.\n## Modules\u00a7\u27e817\u27e9\n\nany\u27e818\u27e9\n    **SEE DOCUMENTATION BEFORE USE**. Runtime-generic database driver.\n\ndatabase\u27e819\u27e9\n    Traits to represent a database driver.\n\ndecode\u27e820\u27e9\n    Provides `Decode`\u27e821\u27e9 for decoding values from the database.\n\nencode\u27e822\u27e9\n    Provides `Encode`\u27e823\u27e9 for encoding values for the database.\n\nerror\u27e824\u27e9\n    Types for working with errors produced by SQLx.\n\nmigrate\u27e825\u27e9\n\n\nmysql\u27e826\u27e9`mysql`\n    **MySQL** database driver.\n\npool\u27e827\u27e9\n    Provides the connection pool for asynchronous SQLx connections.\n\npostgres\u27e828\u27e9`postgres`\n    **PostgreSQL** database driver.\n\nprelude\u27e829\u27e9\n    Convenience re-export of common traits.\n\nquery\u27e830\u27e9\n    Types and traits for the `query` family of functions and macros.\n\nquery_builder\u27e831\u27e9\n    Runtime query-builder API.\n\nsqlite\u27e832\u27e9`_sqlite`\n    **SQLite** database driver.\n\ntypes\u27e833\u27e9\n    Conversions between Rust and SQL types.\n## Macros\u00a7\u27e834\u27e9\n\nmigrate\u27e835\u27e9\n    Embeds migrations into the binary by expanding to a static instance of Migrator\u27e836\u27e9.\n\nquery\u27e837\u27e9`macros`\n    Statically checked SQL query with `println!()` style syntax.\n\nquery_as\u27e838\u27e9`macros`\n    A variant of `query!`\u27e837\u27e9 which takes a path to an explicitly defined struct as the output type.\n\nquery_as_unchecked\u27e839\u27e9`macros`\n    A variant of `query_as!`\u27e838\u27e9 which does not check the input or output types. This still does parse the query to ensure it\u2019s syntactically and semantically valid for the current database.\n\nquery_file\u27e840\u27e9`macros`\n    A variant of `query!`\u27e837\u27e9 where the SQL query is stored in a separate file.\n\nquery_file_as\u27e841\u27e9`macros`\n    Combines the syntaxes of `query_as!`\u27e838\u27e9 and `query_file!`\u27e840\u27e9.\n\nquery_file_as_unchecked\u27e842\u27e9`macros`\n    A variant of `query_file_as!`\u27e841\u27e9 which does not check the input or output types. This still does parse the query to ensure it\u2019s syntactically and semantically valid for the current database.\n\nquery_file_scalar\u27e843\u27e9`macros`\n    A variant of `query_scalar!`\u27e844\u27e9 which takes a file path like `query_file!`\u27e840\u27e9.\n\nquery_file_scalar_unchecked\u27e845\u27e9`macros`\n    A variant of `query_file_scalar!`\u27e843\u27e9 which does not typecheck bind parameters and leaves the output type to inference. The query itself is still checked that it is syntactically and semantically valid for the database, that it only produces one column and that the number of bind parameters is correct.\n\nquery_file_unchecked\u27e846\u27e9`macros`\n    A variant of `query_file!`\u27e840\u27e9 which does not check the input or output types. This still does parse the query to ensure it\u2019s syntactically and semantically valid for the current database.\n\nquery_scalar\u27e844\u27e9`macros`\n    A variant of `query!`\u27e837\u27e9 which expects a single column from the query and evaluates to an instance of QueryScalar\u27e847\u27e9.\n\nquery_scalar_unchecked\u27e848\u27e9`macros`\n    A variant of `query_scalar!`\u27e844\u27e9 which does not typecheck bind parameters and leaves the output type to inference. The query itself is still checked that it is syntactically and semantically valid for the database, that it only produces one column and that the number of bind parameters is correct.\n\nquery_unchecked\u27e849\u27e9`macros`\n    A variant of `query!`\u27e837\u27e9 which does not check the input or output types. This still does parse the query to ensure it\u2019s syntactically and semantically valid for the current database.\n## Structs\u00a7\u27e850\u27e9\n\nAny\u27e851\u27e9`any`\n    Opaque database driver. Capable of being used in place of any SQLx database driver. The actual driver used will be selected at runtime, from the connection url.\n\nAnyConnection\u27e852\u27e9\n    **SEE DOCUMENTATION BEFORE USE**. Runtime-generic database connection.\n\nMySql\u27e853\u27e9`mysql`\n    MySQL database driver.\n\nMySqlConnection\u27e854\u27e9`mysql`\n    A connection to a MySQL database.\n\nPgConnection\u27e855\u27e9`postgres`\n    A connection to a PostgreSQL database.\n\nPool\u27e856\u27e9\n    An asynchronous pool of SQLx database connections.\n\nPostgres\u27e857\u27e9`postgres`\n    PostgreSQL database driver.\n\nQueryBuilder\u27e858\u27e9\n    A builder type for constructing queries at runtime.\n\nRawSql\u27e859\u27e9\n    One or more raw SQL statements, separated by semicolons (`;`).\n\nSqlite\u27e860\u27e9`_sqlite`\n    Sqlite database driver.\n\nSqliteConnection\u27e861\u27e9`_sqlite`\n    A connection to an open Sqlite\u27e860\u27e9 database.\n\nTransaction\u27e862\u27e9\n    An in-progress database transaction or savepoint.\n## Enums\u00a7\u27e863\u27e9\n\nEither\u27e864\u27e9\n    The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.\n\nError\u27e865\u27e9\n    Represents all the ways a method can fail within SQLx.\n## Traits\u00a7\u27e866\u27e9\n\nAcquire\u27e867\u27e9\n    Acquire connections or transactions from a database in a generic way.\n\nAnyExecutor\u27e868\u27e9`any`\n    An alias for `Executor<'_, Database = Any>`\u27e869\u27e9.\n\nArguments\u27e870\u27e9\n    A tuple of arguments to be sent to the database.\n\nColumn\u27e871\u27e9\n\n\nColumnIndex\u27e872\u27e9\n    A type that can be used to index into a `Row`\u27e873\u27e9 or `Statement`\u27e874\u27e9.\n\nConnectOptions\u27e875\u27e9\n\n\nConnection\u27e876\u27e9\n    Represents a single database connection.\n\nDatabase\u27e877\u27e9\n    A database driver.\n\nDecode\u27e821\u27e9\n    A type that can be decoded from the database.\n\nEncode\u27e823\u27e9\n    Encode a single value to be sent to the database.\n\nExecute\u27e878\u27e9\n    A type that may be executed against a database connection.\n\nExecutor\u27e869\u27e9\n    A type that contains or can provide a database connection to use for executing queries against the database.\n\nFromRow\u27e879\u27e9\n    A record that can be built from a row returned by the database.\n\nIntoArguments\u27e880\u27e9\n\n\nMySqlExecutor\u27e881\u27e9`mysql`\n    An alias for `Executor<'_, Database = MySql>`\u27e869\u27e9.\n\nPgExecutor\u27e882\u27e9`postgres`\n    An alias for `Executor<'_, Database = Postgres>`\u27e869\u27e9.\n\nRow\u27e873\u27e9\n    Represents a single row from the database.\n\nSqliteExecutor\u27e883\u27e9`_sqlite`\n    An alias for `Executor<'_, Database = Sqlite>`\u27e869\u27e9.\n\nStatement\u27e874\u27e9\n    An explicitly prepared statement.\n\nType\u27e884\u27e9\n    Indicates that a SQL type is supported for a database.\n\nTypeInfo\u27e885\u27e9\n    Provides information about a SQL type for the database driver.\n\nValue\u27e886\u27e9\n    An owned value from the database.\n\nValueRef\u27e887\u27e9\n    A reference to a single value from the database.\n## Functions\u00a7\u27e888\u27e9\n\nquery\u27e889\u27e9\n    Execute a single SQL query as a prepared statement (transparently cached).\n\nquery_as\u27e890\u27e9\n    Execute a single SQL query as a prepared statement (transparently cached). Maps rows to Rust types using `FromRow`\u27e879\u27e9.\n\nquery_as_with\u27e891\u27e9\n    Execute a single SQL query, with the given arguments as a prepared statement (transparently cached). Maps rows to Rust types using `FromRow`\u27e879\u27e9.\n\nquery_scalar\u27e892\u27e9\n    Execute a single SQL query as a prepared statement (transparently cached) and extract the first column of each row.\n\nquery_scalar_with\u27e893\u27e9\n    Execute a SQL query as a prepared statement (transparently cached), with the given arguments, and extract the first column of each row.\n\nquery_with\u27e894\u27e9\n    Execute a SQL query as a prepared statement (transparently cached), with the given arguments.\n\nraw_sql\u27e895\u27e9\n    Execute one or more statements as raw SQL, separated by semicolons (`;`).\n## Type Aliases\u00a7\u27e896\u27e9\n\nAnyPool\u27e897\u27e9\n    **SEE DOCUMENTATION BEFORE USE**. Type alias for `Pool<Any>`.\n\nMySqlPool\u27e898\u27e9`mysql`\n    An alias for `Pool`\u27e856\u27e9, specialized for MySQL.\n\nMySqlTransaction\u27e899\u27e9`mysql`\n    An alias for `Transaction`\u27e862\u27e9, specialized for MySQL.\n\nPgPool\u27e8100\u27e9`postgres`\n    An alias for `Pool`\u27e856\u27e9, specialized for Postgres.\n\nPgTransaction\u27e8101\u27e9`postgres`\n    An alias for `Transaction`\u27e862\u27e9, specialized for Postgres.\n\nResult\u27e8102\u27e9\n    A specialized `Result` type for SQLx.\n\nSqlitePool\u27e813\u27e9`_sqlite`\n    An alias for `Pool`\u27e856\u27e9, specialized for SQLite.\n\nSqliteTransaction\u27e8103\u27e9`_sqlite`\n    An alias for `Transaction`\u27e862\u27e9, specialized for SQLite.\n## Attribute Macros\u00a7\u27e8104\u27e9\n\ntest\u27e8105\u27e9\n    Mark an `async fn` as a test with SQLx support.\n## Derive Macros\u00a7\u27e8106\u27e9\n\nDecode\u27e8107\u27e9\n\n\nEncode\u27e8108\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/sqlx/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/sqlx/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/sqlx/latest/src/sqlx/lib.rs.html#1-174: Source\n\u27e84\u27e9 https://www.launchbadge.com: the LaunchBadge team\n\u27e85\u27e9 https://www.github.com/launchbadge/sqlx/tree/main/README.md: README\n\u27e86\u27e9 https://www.github.com/launchbadge/sqlx/tree/main/examples: browse our example projects\n\u27e87\u27e9 https://www.github.com/launchbadge/sqlx/tree/main/FAQ.md: Check our FAQ\n\u27e88\u27e9 https://github.com/launchbadge/sqlx/discussions/new?category=q-a: open a discussion\n\u27e89\u27e9 https://docs.rs/sqlx/latest/sqlx/#runtime-support: \u00a7\n\u27e810\u27e9 https://www.tokio.rs: Tokio\n\u27e811\u27e9 https://www.async.rs: async-std\n\u27e812\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Handle.html#method.try_current: `tokio::runtime::Handle::try_current()`\n\u27e813\u27e9 https://docs.rs/sqlx/latest/sqlx/type.SqlitePool.html: type sqlx::SqlitePool - `SqlitePool`\n\u27e814\u27e9 https://docs.rs/sqlx/latest/sqlx/#tls-support: \u00a7\n\u27e815\u27e9 https://docs.rs/native-tls/latest/native_tls/: `native-tls`\n\u27e816\u27e9 https://docs.rs/rustls/latest/rustls/: rustls\n\u27e817\u27e9 https://docs.rs/sqlx/latest/sqlx/#modules: \u00a7\n\u27e818\u27e9 https://docs.rs/sqlx/latest/sqlx/any/index.html: mod sqlx::any - any\n\u27e819\u27e9 https://docs.rs/sqlx/latest/sqlx/database/index.html: mod sqlx::database - database\n\u27e820\u27e9 https://docs.rs/sqlx/latest/sqlx/decode/index.html: mod sqlx::decode - decode\n\u27e821\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Decode.html: trait sqlx::Decode - `Decode`\n\u27e822\u27e9 https://docs.rs/sqlx/latest/sqlx/encode/index.html: mod sqlx::encode - encode\n\u27e823\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Encode.html: trait sqlx::Encode - `Encode`\n\u27e824\u27e9 https://docs.rs/sqlx/latest/sqlx/error/index.html: mod sqlx::error - error\n\u27e825\u27e9 https://docs.rs/sqlx/latest/sqlx/migrate/index.html: mod sqlx::migrate - migrate\n\u27e826\u27e9 https://docs.rs/sqlx/latest/sqlx/mysql/index.html: mod sqlx::mysql - mysql\n\u27e827\u27e9 https://docs.rs/sqlx/latest/sqlx/pool/index.html: mod sqlx::pool - pool\n\u27e828\u27e9 https://docs.rs/sqlx/latest/sqlx/postgres/index.html: mod sqlx::postgres - postgres\n\u27e829\u27e9 https://docs.rs/sqlx/latest/sqlx/prelude/index.html: mod sqlx::prelude - prelude\n\u27e830\u27e9 https://docs.rs/sqlx/latest/sqlx/query/index.html: mod sqlx::query - query\n\u27e831\u27e9 https://docs.rs/sqlx/latest/sqlx/query_builder/index.html: mod sqlx::query_builder - query_builder\n\u27e832\u27e9 https://docs.rs/sqlx/latest/sqlx/sqlite/index.html: mod sqlx::sqlite - sqlite\n\u27e833\u27e9 https://docs.rs/sqlx/latest/sqlx/types/index.html: mod sqlx::types - types\n\u27e834\u27e9 https://docs.rs/sqlx/latest/sqlx/#macros: \u00a7\n\u27e835\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.migrate.html: macro sqlx::migrate - migrate\n\u27e836\u27e9 https://docs.rs/sqlx/latest/sqlx/migrate/struct.Migrator.html: struct sqlx::migrate::Migrator - Migrator\n\u27e837\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query.html: macro sqlx::query - query\n\u27e838\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_as.html: macro sqlx::query_as - query_as\n\u27e839\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_as_unchecked.html: macro sqlx::query_as_unchecked - query_as_unchecked\n\u27e840\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_file.html: macro sqlx::query_file - query_file\n\u27e841\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_file_as.html: macro sqlx::query_file_as - query_file_as\n\u27e842\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_file_as_unchecked.html: macro sqlx::query_file_as_unchecked - query_file_as_unchecked\n\u27e843\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_file_scalar.html: macro sqlx::query_file_scalar - query_file_scalar\n\u27e844\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_scalar.html: macro sqlx::query_scalar - `query_scalar!`\n\u27e845\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_file_scalar_unchecked.html: macro sqlx::query_file_scalar_unchecked - query_file_scalar_unchecked\n\u27e846\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_file_unchecked.html: macro sqlx::query_file_unchecked - query_file_unchecked\n\u27e847\u27e9 https://docs.rs/sqlx/latest/sqlx/query/struct.QueryScalar.html: struct sqlx::query::QueryScalar - QueryScalar\n\u27e848\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_scalar_unchecked.html: macro sqlx::query_scalar_unchecked - query_scalar_unchecked\n\u27e849\u27e9 https://docs.rs/sqlx/latest/sqlx/macro.query_unchecked.html: macro sqlx::query_unchecked - query_unchecked\n\u27e850\u27e9 https://docs.rs/sqlx/latest/sqlx/#structs: \u00a7\n\u27e851\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.Any.html: struct sqlx::Any - Any\n\u27e852\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.AnyConnection.html: struct sqlx::AnyConnection - AnyConnection\n\u27e853\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.MySql.html: struct sqlx::MySql - MySql\n\u27e854\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.MySqlConnection.html: struct sqlx::MySqlConnection - MySqlConnection\n\u27e855\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.PgConnection.html: struct sqlx::PgConnection - PgConnection\n\u27e856\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.Pool.html: struct sqlx::Pool - Pool\n\u27e857\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.Postgres.html: struct sqlx::Postgres - Postgres\n\u27e858\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.QueryBuilder.html: struct sqlx::QueryBuilder - QueryBuilder\n\u27e859\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.RawSql.html: struct sqlx::RawSql - RawSql\n\u27e860\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.Sqlite.html: struct sqlx::Sqlite - Sqlite\n\u27e861\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.SqliteConnection.html: struct sqlx::SqliteConnection - SqliteConnection\n\u27e862\u27e9 https://docs.rs/sqlx/latest/sqlx/struct.Transaction.html: struct sqlx::Transaction - Transaction\n\u27e863\u27e9 https://docs.rs/sqlx/latest/sqlx/#enums: \u00a7\n\u27e864\u27e9 https://docs.rs/sqlx/latest/sqlx/enum.Either.html: enum sqlx::Either - Either\n\u27e865\u27e9 https://docs.rs/sqlx/latest/sqlx/enum.Error.html: enum sqlx::Error - Error\n\u27e866\u27e9 https://docs.rs/sqlx/latest/sqlx/#traits: \u00a7\n\u27e867\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Acquire.html: trait sqlx::Acquire - Acquire\n\u27e868\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.AnyExecutor.html: trait sqlx::AnyExecutor - AnyExecutor\n\u27e869\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Executor.html: trait sqlx::Executor - `Executor<'_, Database = Any>`\n\u27e870\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Arguments.html: trait sqlx::Arguments - Arguments\n\u27e871\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Column.html: trait sqlx::Column - Column\n\u27e872\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.ColumnIndex.html: trait sqlx::ColumnIndex - ColumnIndex\n\u27e873\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Row.html: trait sqlx::Row - `Row`\n\u27e874\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Statement.html: trait sqlx::Statement - `Statement`\n\u27e875\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.ConnectOptions.html: trait sqlx::ConnectOptions - ConnectOptions\n\u27e876\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Connection.html: trait sqlx::Connection - Connection\n\u27e877\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Database.html: trait sqlx::Database - Database\n\u27e878\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Execute.html: trait sqlx::Execute - Execute\n\u27e879\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.FromRow.html: trait sqlx::FromRow - FromRow\n\u27e880\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.IntoArguments.html: trait sqlx::IntoArguments - IntoArguments\n\u27e881\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.MySqlExecutor.html: trait sqlx::MySqlExecutor - MySqlExecutor\n\u27e882\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.PgExecutor.html: trait sqlx::PgExecutor - PgExecutor\n\u27e883\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.SqliteExecutor.html: trait sqlx::SqliteExecutor - SqliteExecutor\n\u27e884\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Type.html: trait sqlx::Type - Type\n\u27e885\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.TypeInfo.html: trait sqlx::TypeInfo - TypeInfo\n\u27e886\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.Value.html: trait sqlx::Value - Value\n\u27e887\u27e9 https://docs.rs/sqlx/latest/sqlx/trait.ValueRef.html: trait sqlx::ValueRef - ValueRef\n\u27e888\u27e9 https://docs.rs/sqlx/latest/sqlx/#functions: \u00a7\n\u27e889\u27e9 https://docs.rs/sqlx/latest/sqlx/fn.query.html: fn sqlx::query - query\n\u27e890\u27e9 https://docs.rs/sqlx/latest/sqlx/fn.query_as.html: fn sqlx::query_as - query_as\n\u27e891\u27e9 https://docs.rs/sqlx/latest/sqlx/fn.query_as_with.html: fn sqlx::query_as_with - query_as_with\n\u27e892\u27e9 https://docs.rs/sqlx/latest/sqlx/fn.query_scalar.html: fn sqlx::query_scalar - query_scalar\n\u27e893\u27e9 https://docs.rs/sqlx/latest/sqlx/fn.query_scalar_with.html: fn sqlx::query_scalar_with - query_scalar_with\n\u27e894\u27e9 https://docs.rs/sqlx/latest/sqlx/fn.query_with.html: fn sqlx::query_with - query_with\n\u27e895\u27e9 https://docs.rs/sqlx/latest/sqlx/fn.raw_sql.html: fn sqlx::raw_sql - raw_sql\n\u27e896\u27e9 https://docs.rs/sqlx/latest/sqlx/#types: \u00a7\n\u27e897\u27e9 https://docs.rs/sqlx/latest/sqlx/type.AnyPool.html: type sqlx::AnyPool - AnyPool\n\u27e898\u27e9 https://docs.rs/sqlx/latest/sqlx/type.MySqlPool.html: type sqlx::MySqlPool - MySqlPool\n\u27e899\u27e9 https://docs.rs/sqlx/latest/sqlx/type.MySqlTransaction.html: type sqlx::MySqlTransaction - MySqlTransaction\n\u27e8100\u27e9 https://docs.rs/sqlx/latest/sqlx/type.PgPool.html: type sqlx::PgPool - PgPool\n\u27e8101\u27e9 https://docs.rs/sqlx/latest/sqlx/type.PgTransaction.html: type sqlx::PgTransaction - PgTransaction\n\u27e8102\u27e9 https://docs.rs/sqlx/latest/sqlx/type.Result.html: type sqlx::Result - Result\n\u27e8103\u27e9 https://docs.rs/sqlx/latest/sqlx/type.SqliteTransaction.html: type sqlx::SqliteTransaction - SqliteTransaction\n\u27e8104\u27e9 https://docs.rs/sqlx/latest/sqlx/#attributes: \u00a7\n\u27e8105\u27e9 https://docs.rs/sqlx/latest/sqlx/attr.test.html: attr sqlx::test - test\n\u27e8106\u27e9 https://docs.rs/sqlx/latest/sqlx/#derives: \u00a7\n\u27e8107\u27e9 https://docs.rs/sqlx/latest/sqlx/derive.Decode.html: derive sqlx::Decode - Decode\n\u27e8108\u27e9 https://docs.rs/sqlx/latest/sqlx/derive.Encode.html: derive sqlx::Encode - Encode\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `sqlx` crate is an asynchronous SQL toolkit for Rust, supporting multiple database drivers (PostgreSQL, MySQL, SQLite) and runtimes (`Tokio`, `async-std`). It offers compile-time checked queries, connection pooling, runtime query building, and seamless Rust-to-SQL type conversion. Additional features include TLS support for secure connections and macros for embedding migrations and queries.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Runtime Support\n\u2705 **Factual:** SQLx supports both the Tokio and async-std runtimes, allowing developers to choose the runtime that best suits their application by enabling the corresponding feature flags (`runtime-tokio` or `runtime-async-std`).  \n\u274c **Counterfactual:** SQLx requires the use of the Tokio runtime exclusively and does not support async-std or any other runtime.\n\n---\n\n### Pair 2: TLS Support\n\u2705 **Factual:** SQLx provides TLS support for secure database connections through two feature flags: `tls-native-tls`, which uses OS-native TLS capabilities, and `tls-rustls`, which is a cross-platform TLS library supporting TLS 1.2 and 1.3.  \n\u274c **Counterfactual:** SQLx only supports TLS through the `tls-rustls` feature and does not provide any native TLS integration for platform-specific capabilities.\n\n---\n\n### Pair 3: SQLite Driver\n\u2705 **Factual:** The SQLite driver in SQLx is runtime-agnostic, meaning it can function without requiring a specific async runtime, although `SqlitePool` requires runtime support for timeouts and internal task management.  \n\u274c **Counterfactual:** The SQLite driver in SQLx mandates the use of the Tokio runtime and cannot operate independently of runtime-specific features.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}