{
    "name": "flexbuffers",
    "version": "25.2.10",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/flexbuffers/latest/flexbuffers/all.html \"show sidebar\")\n# Crate flexbuffersCopy item path\n[Settings](https://docs.rs/flexbuffers/latest/settings.html)\n[Help](https://docs.rs/flexbuffers/latest/help.html)\nSummary[Source](https://docs.rs/flexbuffers/latest/src/flexbuffers/lib.rs.html#15-116)\nExpand description\nFlexbuffers is a high performance schemaless binary data format designed at Google. It is complementary to the schema-ed format [Flatbuffers](http://docs.rs/flatbuffers/). See [Flexbuffer Internals](https://google.github.io/flatbuffers/flatbuffers_internals.html) for details on the binary format.\nSee the examples for usage:\n  * [Example](https://github.com/google/flatbuffers/blob/master/samples/sample_flexbuffers.rs)\n  * [Serde Example](https://github.com/google/flatbuffers/blob/master/samples/sample_flexbuffers_serde.rs)\n\n\nThis rust implementation is in progress and, until the 1.0 release, breaking API changes may happen between minor versions.\n## Structs[\u00a7](https://docs.rs/flexbuffers/latest/flexbuffers/#structs)\n\n[Blob](https://docs.rs/flexbuffers/latest/flexbuffers/struct.Blob.html \"struct flexbuffers::Blob\")\n    This struct, when pushed will be serialized as a `FlexBufferType::Blob`.\n\n[Builder](https://docs.rs/flexbuffers/latest/flexbuffers/struct.Builder.html \"struct flexbuffers::Builder\")\n    **Use this struct to build a Flexbuffer.**\n\n[BuilderOptions](https://docs.rs/flexbuffers/latest/flexbuffers/struct.BuilderOptions.html \"struct flexbuffers::BuilderOptions\")\n    Options for sharing data within a flexbuffer.\n\n[FlexbufferSerializer](https://docs.rs/flexbuffers/latest/flexbuffers/struct.FlexbufferSerializer.html \"struct flexbuffers::FlexbufferSerializer\")\n    Flexbuffer Serializer. This should be used to serialize structs.\n\n[IndirectFloat](https://docs.rs/flexbuffers/latest/flexbuffers/struct.IndirectFloat.html \"struct flexbuffers::IndirectFloat\")\n    This struct, when pushed, will be serialized as a `FlexBufferType::IndirectFloat`.\n\n[IndirectInt](https://docs.rs/flexbuffers/latest/flexbuffers/struct.IndirectInt.html \"struct flexbuffers::IndirectInt\")\n    This struct, when pushed, will be serialized as a `FlexBufferType::IndirectInt`.\n\n[IndirectUInt](https://docs.rs/flexbuffers/latest/flexbuffers/struct.IndirectUInt.html \"struct flexbuffers::IndirectUInt\")\n    This struct, when pushed, will be serialized as a `FlexBufferType::IndirectUInt`.\n\n[MapBuilder](https://docs.rs/flexbuffers/latest/flexbuffers/struct.MapBuilder.html \"struct flexbuffers::MapBuilder\")\n    Builds a Flexbuffer map, returned by a [Builder](https://docs.rs/flexbuffers/latest/flexbuffers/struct.Builder.html).\n\n[MapReader](https://docs.rs/flexbuffers/latest/flexbuffers/struct.MapReader.html \"struct flexbuffers::MapReader\")\n    Allows indexing on a flexbuffer map.\n\n[Reader](https://docs.rs/flexbuffers/latest/flexbuffers/struct.Reader.html \"struct flexbuffers::Reader\")\n    `Reader`s allow access to data stored in a Flexbuffer.\n\n[ReaderIterator](https://docs.rs/flexbuffers/latest/flexbuffers/struct.ReaderIterator.html \"struct flexbuffers::ReaderIterator\")\n    Iterates over a flexbuffer vector, typed vector, or map. Yields [Readers](https://docs.rs/flexbuffers/latest/flexbuffers/struct.Reader.html).\n\n[VectorBuilder](https://docs.rs/flexbuffers/latest/flexbuffers/struct.VectorBuilder.html \"struct flexbuffers::VectorBuilder\")\n    Builds a Flexbuffer vector, returned by a [Builder](https://docs.rs/flexbuffers/latest/flexbuffers/struct.Builder.html).\n\n[VectorReader](https://docs.rs/flexbuffers/latest/flexbuffers/struct.VectorReader.html \"struct flexbuffers::VectorReader\")\n    Allows indexing on any flexbuffer vector type, (heterogenous vector, typed vector, or fixed length typed vector).\n## Enums[\u00a7](https://docs.rs/flexbuffers/latest/flexbuffers/#enums)\n\n[BitWidth](https://docs.rs/flexbuffers/latest/flexbuffers/enum.BitWidth.html \"enum flexbuffers::BitWidth\")\n    Represents the size of Flexbuffers data.\n\n[DeserializationError](https://docs.rs/flexbuffers/latest/flexbuffers/enum.DeserializationError.html \"enum flexbuffers::DeserializationError\")\n    Errors that may happen when deserializing a flexbuffer with serde.\n\n[FlexBufferType](https://docs.rs/flexbuffers/latest/flexbuffers/enum.FlexBufferType.html \"enum flexbuffers::FlexBufferType\")\n    Represents all the valid types in a flexbuffer.\n\n[ReaderError](https://docs.rs/flexbuffers/latest/flexbuffers/enum.ReaderError.html \"enum flexbuffers::ReaderError\")\n    All the possible errors when reading a flexbuffer.\n\n[SerializationError](https://docs.rs/flexbuffers/latest/flexbuffers/enum.SerializationError.html \"enum flexbuffers::SerializationError\")\n    Errors that may happen with Serde.\n## Traits[\u00a7](https://docs.rs/flexbuffers/latest/flexbuffers/#traits)\n\n[Buffer](https://docs.rs/flexbuffers/latest/flexbuffers/trait.Buffer.html \"trait flexbuffers::Buffer\")\n    The underlying buffer that is used by a flexbuffer Reader.\n\n[Pushable](https://docs.rs/flexbuffers/latest/flexbuffers/trait.Pushable.html \"trait flexbuffers::Pushable\")\n    Types that implement the Pushable trait can be written into a Flexbuffer.\n## Functions[\u00a7](https://docs.rs/flexbuffers/latest/flexbuffers/#functions)\n\n[from_buffer](https://docs.rs/flexbuffers/latest/flexbuffers/fn.from_buffer.html \"fn flexbuffers::from_buffer\")\n    Deserialize a type from a flexbuffer.\n\n[from_slice](https://docs.rs/flexbuffers/latest/flexbuffers/fn.from_slice.html \"fn flexbuffers::from_slice\")\n    Deserialize a type from a flexbuffer.\n\n[singleton](https://docs.rs/flexbuffers/latest/flexbuffers/fn.singleton.html \"fn flexbuffers::singleton\")\n    Builds a Flexbuffer with the single pushed value as the root.\n\n[to_vec](https://docs.rs/flexbuffers/latest/flexbuffers/fn.to_vec.html \"fn flexbuffers::to_vec\")\n    Serialize as a flexbuffer into a vector.\n",
        "markdown_with_citations": "[](https://docs.rs/flexbuffers/latest/flexbuffers/all.html \"show sidebar\")\n# Crate flexbuffersCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nFlexbuffers is a high performance schemaless binary data format designed at Google. It is complementary to the schema-ed format Flatbuffers\u27e84\u27e9. See Flexbuffer Internals\u27e85\u27e9 for details on the binary format.\nSee the examples for usage:\n  * Example\u27e86\u27e9\n  * Serde Example\u27e87\u27e9\n\n\nThis rust implementation is in progress and, until the 1.0 release, breaking API changes may happen between minor versions.\n## Structs\u00a7\u27e88\u27e9\n\nBlob\u27e89\u27e9\n    This struct, when pushed will be serialized as a `FlexBufferType::Blob`.\n\nBuilder\u27e810\u27e9\n    **Use this struct to build a Flexbuffer.**\n\nBuilderOptions\u27e811\u27e9\n    Options for sharing data within a flexbuffer.\n\nFlexbufferSerializer\u27e812\u27e9\n    Flexbuffer Serializer. This should be used to serialize structs.\n\nIndirectFloat\u27e813\u27e9\n    This struct, when pushed, will be serialized as a `FlexBufferType::IndirectFloat`.\n\nIndirectInt\u27e814\u27e9\n    This struct, when pushed, will be serialized as a `FlexBufferType::IndirectInt`.\n\nIndirectUInt\u27e815\u27e9\n    This struct, when pushed, will be serialized as a `FlexBufferType::IndirectUInt`.\n\nMapBuilder\u27e816\u27e9\n    Builds a Flexbuffer map, returned by a Builder\u27e810\u27e9.\n\nMapReader\u27e817\u27e9\n    Allows indexing on a flexbuffer map.\n\nReader\u27e818\u27e9\n    `Reader`s allow access to data stored in a Flexbuffer.\n\nReaderIterator\u27e819\u27e9\n    Iterates over a flexbuffer vector, typed vector, or map. Yields Readers\u27e818\u27e9.\n\nVectorBuilder\u27e820\u27e9\n    Builds a Flexbuffer vector, returned by a Builder\u27e810\u27e9.\n\nVectorReader\u27e821\u27e9\n    Allows indexing on any flexbuffer vector type, (heterogenous vector, typed vector, or fixed length typed vector).\n## Enums\u00a7\u27e822\u27e9\n\nBitWidth\u27e823\u27e9\n    Represents the size of Flexbuffers data.\n\nDeserializationError\u27e824\u27e9\n    Errors that may happen when deserializing a flexbuffer with serde.\n\nFlexBufferType\u27e825\u27e9\n    Represents all the valid types in a flexbuffer.\n\nReaderError\u27e826\u27e9\n    All the possible errors when reading a flexbuffer.\n\nSerializationError\u27e827\u27e9\n    Errors that may happen with Serde.\n## Traits\u00a7\u27e828\u27e9\n\nBuffer\u27e829\u27e9\n    The underlying buffer that is used by a flexbuffer Reader.\n\nPushable\u27e830\u27e9\n    Types that implement the Pushable trait can be written into a Flexbuffer.\n## Functions\u00a7\u27e831\u27e9\n\nfrom_buffer\u27e832\u27e9\n    Deserialize a type from a flexbuffer.\n\nfrom_slice\u27e833\u27e9\n    Deserialize a type from a flexbuffer.\n\nsingleton\u27e834\u27e9\n    Builds a Flexbuffer with the single pushed value as the root.\n\nto_vec\u27e835\u27e9\n    Serialize as a flexbuffer into a vector.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/flexbuffers/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/flexbuffers/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/flexbuffers/latest/src/flexbuffers/lib.rs.html#15-116: Source\n\u27e84\u27e9 http://docs.rs/flatbuffers/: Flatbuffers\n\u27e85\u27e9 https://google.github.io/flatbuffers/flatbuffers_internals.html: Flexbuffer Internals\n\u27e86\u27e9 https://github.com/google/flatbuffers/blob/master/samples/sample_flexbuffers.rs: Example\n\u27e87\u27e9 https://github.com/google/flatbuffers/blob/master/samples/sample_flexbuffers_serde.rs: Serde Example\n\u27e88\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/#structs: \u00a7\n\u27e89\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.Blob.html: struct flexbuffers::Blob - Blob\n\u27e810\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.Builder.html: struct flexbuffers::Builder - Builder\n\u27e811\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.BuilderOptions.html: struct flexbuffers::BuilderOptions - BuilderOptions\n\u27e812\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.FlexbufferSerializer.html: struct flexbuffers::FlexbufferSerializer - FlexbufferSerializer\n\u27e813\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.IndirectFloat.html: struct flexbuffers::IndirectFloat - IndirectFloat\n\u27e814\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.IndirectInt.html: struct flexbuffers::IndirectInt - IndirectInt\n\u27e815\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.IndirectUInt.html: struct flexbuffers::IndirectUInt - IndirectUInt\n\u27e816\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.MapBuilder.html: struct flexbuffers::MapBuilder - MapBuilder\n\u27e817\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.MapReader.html: struct flexbuffers::MapReader - MapReader\n\u27e818\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.Reader.html: struct flexbuffers::Reader - Reader\n\u27e819\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.ReaderIterator.html: struct flexbuffers::ReaderIterator - ReaderIterator\n\u27e820\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.VectorBuilder.html: struct flexbuffers::VectorBuilder - VectorBuilder\n\u27e821\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/struct.VectorReader.html: struct flexbuffers::VectorReader - VectorReader\n\u27e822\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/#enums: \u00a7\n\u27e823\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/enum.BitWidth.html: enum flexbuffers::BitWidth - BitWidth\n\u27e824\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/enum.DeserializationError.html: enum flexbuffers::DeserializationError - DeserializationError\n\u27e825\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/enum.FlexBufferType.html: enum flexbuffers::FlexBufferType - FlexBufferType\n\u27e826\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/enum.ReaderError.html: enum flexbuffers::ReaderError - ReaderError\n\u27e827\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/enum.SerializationError.html: enum flexbuffers::SerializationError - SerializationError\n\u27e828\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/#traits: \u00a7\n\u27e829\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/trait.Buffer.html: trait flexbuffers::Buffer - Buffer\n\u27e830\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/trait.Pushable.html: trait flexbuffers::Pushable - Pushable\n\u27e831\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/#functions: \u00a7\n\u27e832\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/fn.from_buffer.html: fn flexbuffers::from_buffer - from_buffer\n\u27e833\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/fn.from_slice.html: fn flexbuffers::from_slice - from_slice\n\u27e834\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/fn.singleton.html: fn flexbuffers::singleton - singleton\n\u27e835\u27e9 https://docs.rs/flexbuffers/latest/flexbuffers/fn.to_vec.html: fn flexbuffers::to_vec - to_vec\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `flexbuffers` crate is a Rust implementation of Google's high-performance, schemaless binary data format designed to complement Flatbuffers. It provides tools for building, serializing, and deserializing Flexbuffers, including support for maps, vectors, and various data types, with integration for Serde. Key features include efficient data access via readers, builders for structured data, and error handling for serialization and deserialization.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Serialization and Deserialization\n\u2705 Factual: The `flexbuffers` crate provides functions like `to_vec` and `from_buffer` to serialize and deserialize data into a high-performance binary format without requiring a predefined schema.  \n\u274c Counterfactual: The `flexbuffers` crate requires a predefined schema, similar to its counterpart `Flatbuffers`, for serialization and deserialization.\n\n---\n\n### Pair 2: Struct Support\n\u2705 Factual: The `FlexbufferSerializer` struct in the `flexbuffers` crate is designed to serialize Rust structs into the Flexbuffers binary format.  \n\u274c Counterfactual: The `FlexbufferSerializer` struct is used exclusively for deserializing Flexbuffers data into Rust structs.\n\n---\n\n### Pair 3: API Stability\n\u2705 Factual: The `flexbuffers` crate is still under development, and breaking API changes may occur between minor versions until it reaches a 1.0 release.  \n\u274c Counterfactual: The `flexbuffers` crate has a stable API and guarantees backward compatibility across all minor versions.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}