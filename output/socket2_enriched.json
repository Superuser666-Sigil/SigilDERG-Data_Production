{
    "name": "socket2",
    "version": "0.5.10",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/socket2/latest/socket2/all.html \"show sidebar\")\n# Crate socket2Copy item path\n[Settings](https://docs.rs/socket2/latest/settings.html)\n[Help](https://docs.rs/socket2/latest/help.html)\nSummary[Source](https://docs.rs/socket2/latest/src/socket2/lib.rs.html#9-745)\nExpand description\nUtilities for creating and using sockets.\nThe goal of this crate is to create and use a socket using advanced configuration options (those that are not available in the types in the standard library) without using any unsafe code.\nThis crate provides as direct as possible access to the system\u2019s functionality for sockets, this means little effort to provide cross-platform utilities. It is up to the user to know how to use sockets when using this crate. _If you don\u2019t know how to create a socket using libc/system calls then this crate is not for you_. Most, if not all, functions directly relate to the equivalent system call with no error handling applied, so no handling errors such as [`EINTR`](https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html#variant.Interrupted \"variant std::io::error::ErrorKind::Interrupted\"). As a result using this crate can be a little wordy, but it should give you maximal flexibility over configuration of sockets.\n## [\u00a7](https://docs.rs/socket2/latest/socket2/#examples)Examples\n```\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n// Create a TCP listener bound to two addresses.\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\nsocket.set_only_v6(false)?;\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nsocket.bind(&address.into())?;\nsocket.listen(128)?;\nlet listener: TcpListener = socket.into();\n// ...\n```\n\n### [\u00a7](https://docs.rs/socket2/latest/socket2/#features)Features\nThis crate has a single feature `all`, which enables all functions even ones that are not available on all OSs.\n## Structs[\u00a7](https://docs.rs/socket2/latest/socket2/#structs)\n\n[Domain](https://docs.rs/socket2/latest/socket2/struct.Domain.html \"struct socket2::Domain\")\n    Specification of the communication domain for a socket.\n\n[MaybeUninitSlice](https://docs.rs/socket2/latest/socket2/struct.MaybeUninitSlice.html \"struct socket2::MaybeUninitSlice\")\n    A version of [`IoSliceMut`](https://doc.rust-lang.org/nightly/std/io/struct.IoSliceMut.html \"struct std::io::IoSliceMut\") that allows the buffer to be uninitialised.\n\n[MsgHdr](https://docs.rs/socket2/latest/socket2/struct.MsgHdr.html \"struct socket2::MsgHdr\")\n    Configuration of a `sendmsg(2)` system call.\n\n[MsgHdrMut](https://docs.rs/socket2/latest/socket2/struct.MsgHdrMut.html \"struct socket2::MsgHdrMut\")\n    Configuration of a `recvmsg(2)` system call.\n\n[Protocol](https://docs.rs/socket2/latest/socket2/struct.Protocol.html \"struct socket2::Protocol\")\n    Protocol specification used for creating sockets via `Socket::new`.\n\n[RecvFlags](https://docs.rs/socket2/latest/socket2/struct.RecvFlags.html \"struct socket2::RecvFlags\")Non-Redox\n    Flags for incoming messages.\n\n[SockAddr](https://docs.rs/socket2/latest/socket2/struct.SockAddr.html \"struct socket2::SockAddr\")\n    The address of a socket.\n\n[SockRef](https://docs.rs/socket2/latest/socket2/struct.SockRef.html \"struct socket2::SockRef\")\n    A reference to a [`Socket`](https://docs.rs/socket2/latest/socket2/struct.Socket.html \"struct socket2::Socket\") that can be used to configure socket types other than the `Socket` type itself.\n\n[Socket](https://docs.rs/socket2/latest/socket2/struct.Socket.html \"struct socket2::Socket\")\n    Owned wrapper around a system socket.\n\n[TcpKeepalive](https://docs.rs/socket2/latest/socket2/struct.TcpKeepalive.html \"struct socket2::TcpKeepalive\")\n    Configures a socket\u2019s TCP keepalive parameters.\n\n[Type](https://docs.rs/socket2/latest/socket2/struct.Type.html \"struct socket2::Type\")\n    Specification of communication semantics on a socket.\n## Enums[\u00a7](https://docs.rs/socket2/latest/socket2/#enums)\n\n[InterfaceIndexOrAddress](https://docs.rs/socket2/latest/socket2/enum.InterfaceIndexOrAddress.html \"enum socket2::InterfaceIndexOrAddress\")\n    A local interface specified by its index or an address assigned to it.\n",
        "markdown_with_citations": "[](https://docs.rs/socket2/latest/socket2/all.html \"show sidebar\")\n# Crate socket2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nUtilities for creating and using sockets.\nThe goal of this crate is to create and use a socket using advanced configuration options (those that are not available in the types in the standard library) without using any unsafe code.\nThis crate provides as direct as possible access to the system\u2019s functionality for sockets, this means little effort to provide cross-platform utilities. It is up to the user to know how to use sockets when using this crate. _If you don\u2019t know how to create a socket using libc/system calls then this crate is not for you_. Most, if not all, functions directly relate to the equivalent system call with no error handling applied, so no handling errors such as `EINTR`\u27e84\u27e9. As a result using this crate can be a little wordy, but it should give you maximal flexibility over configuration of sockets.\n## \u00a7\u27e85\u27e9Examples\n```\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n// Create a TCP listener bound to two addresses.\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\nsocket.set_only_v6(false)?;\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nsocket.bind(&address.into())?;\nsocket.listen(128)?;\nlet listener: TcpListener = socket.into();\n// ...\n```\n\n### \u00a7\u27e86\u27e9Features\nThis crate has a single feature `all`, which enables all functions even ones that are not available on all OSs.\n## Structs\u00a7\u27e87\u27e9\n\nDomain\u27e88\u27e9\n    Specification of the communication domain for a socket.\n\nMaybeUninitSlice\u27e89\u27e9\n    A version of `IoSliceMut`\u27e810\u27e9 that allows the buffer to be uninitialised.\n\nMsgHdr\u27e811\u27e9\n    Configuration of a `sendmsg(2)` system call.\n\nMsgHdrMut\u27e812\u27e9\n    Configuration of a `recvmsg(2)` system call.\n\nProtocol\u27e813\u27e9\n    Protocol specification used for creating sockets via `Socket::new`.\n\nRecvFlags\u27e814\u27e9Non-Redox\n    Flags for incoming messages.\n\nSockAddr\u27e815\u27e9\n    The address of a socket.\n\nSockRef\u27e816\u27e9\n    A reference to a `Socket`\u27e817\u27e9 that can be used to configure socket types other than the `Socket` type itself.\n\nSocket\u27e817\u27e9\n    Owned wrapper around a system socket.\n\nTcpKeepalive\u27e818\u27e9\n    Configures a socket\u2019s TCP keepalive parameters.\n\nType\u27e819\u27e9\n    Specification of communication semantics on a socket.\n## Enums\u00a7\u27e820\u27e9\n\nInterfaceIndexOrAddress\u27e821\u27e9\n    A local interface specified by its index or an address assigned to it.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/socket2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/socket2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/socket2/latest/src/socket2/lib.rs.html#9-745: Source\n\u27e84\u27e9 https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html#variant.Interrupted: variant std::io::error::ErrorKind::Interrupted - `EINTR`\n\u27e85\u27e9 https://docs.rs/socket2/latest/socket2/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/socket2/latest/socket2/#features: \u00a7\n\u27e87\u27e9 https://docs.rs/socket2/latest/socket2/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/socket2/latest/socket2/struct.Domain.html: struct socket2::Domain - Domain\n\u27e89\u27e9 https://docs.rs/socket2/latest/socket2/struct.MaybeUninitSlice.html: struct socket2::MaybeUninitSlice - MaybeUninitSlice\n\u27e810\u27e9 https://doc.rust-lang.org/nightly/std/io/struct.IoSliceMut.html: struct std::io::IoSliceMut - `IoSliceMut`\n\u27e811\u27e9 https://docs.rs/socket2/latest/socket2/struct.MsgHdr.html: struct socket2::MsgHdr - MsgHdr\n\u27e812\u27e9 https://docs.rs/socket2/latest/socket2/struct.MsgHdrMut.html: struct socket2::MsgHdrMut - MsgHdrMut\n\u27e813\u27e9 https://docs.rs/socket2/latest/socket2/struct.Protocol.html: struct socket2::Protocol - Protocol\n\u27e814\u27e9 https://docs.rs/socket2/latest/socket2/struct.RecvFlags.html: struct socket2::RecvFlags - RecvFlags\n\u27e815\u27e9 https://docs.rs/socket2/latest/socket2/struct.SockAddr.html: struct socket2::SockAddr - SockAddr\n\u27e816\u27e9 https://docs.rs/socket2/latest/socket2/struct.SockRef.html: struct socket2::SockRef - SockRef\n\u27e817\u27e9 https://docs.rs/socket2/latest/socket2/struct.Socket.html: struct socket2::Socket - `Socket`\n\u27e818\u27e9 https://docs.rs/socket2/latest/socket2/struct.TcpKeepalive.html: struct socket2::TcpKeepalive - TcpKeepalive\n\u27e819\u27e9 https://docs.rs/socket2/latest/socket2/struct.Type.html: struct socket2::Type - Type\n\u27e820\u27e9 https://docs.rs/socket2/latest/socket2/#enums: \u00a7\n\u27e821\u27e9 https://docs.rs/socket2/latest/socket2/enum.InterfaceIndexOrAddress.html: enum socket2::InterfaceIndexOrAddress - InterfaceIndexOrAddress\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `socket2` crate provides utilities for creating and configuring sockets with advanced options beyond the standard library, offering direct access to system-level socket functionality without unsafe code. It supports features like custom domains, protocols, TCP keepalive configuration, and system calls like `sendmsg` and `recvmsg`, while prioritizing flexibility over cross-platform abstractions. The crate includes types like `Socket`, `SockAddr`, and `TcpKeepalive` for detailed socket management and configuration.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1: Socket Creation and Configuration  \n\u2705 **Factual:** The `socket2` crate allows users to create and configure sockets with advanced options, such as specifying the communication domain (`Domain`) and socket type (`Type`) without requiring unsafe code.  \n\u274c **Counterfactual:** The `socket2` crate automatically handles socket errors like `EINTR` and provides built-in error recovery mechanisms for system calls.  \n\n---\n\n### Pair 2: Cross-Platform Support  \n\u2705 **Factual:** The `socket2` crate provides direct access to system-level socket functionality but does not focus on cross-platform abstractions, leaving platform-specific behavior to the user.  \n\u274c **Counterfactual:** The `socket2` crate includes comprehensive cross-platform abstractions, ensuring consistent socket behavior across all operating systems without user intervention.  \n\n---\n\n### Pair 3: TCP Keepalive Configuration  \n\u2705 **Factual:** The `TcpKeepalive` struct in the `socket2` crate allows users to configure TCP keepalive parameters, such as the idle time and interval between keepalive probes.  \n\u274c **Counterfactual:** The `socket2` crate automatically enables TCP keepalive on all sockets by default, without requiring explicit configuration by the user.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}