{
    "name": "ggez",
    "version": "0.9.3",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/ggez/latest/ggez/all.html \"show sidebar\")\n# Crate ggezCopy item path\n[Settings](https://docs.rs/ggez/latest/settings.html)\n[Help](https://docs.rs/ggez/latest/help.html)\nSummary[Source](https://docs.rs/ggez/latest/src/ggez/lib.rs.html#1-209)\nExpand description\n[![ggez logo](https://raw.githubusercontent.com/ggez/ggez/master/docs/ggez-logo-maroon-full.svg)](http://ggez.rs/)\n## [\u00a7](https://docs.rs/ggez/latest/ggez/#what-is-this)What is this?\n![Build status](https://github.com/ggez/ggez/workflows/CI/badge.svg) [![Docs Status](https://docs.rs/ggez/badge.svg)](https://docs.rs/ggez) [![license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/ggez/ggez/blob/master/LICENSE) [![Crates.io](https://img.shields.io/crates/v/ggez.svg)](https://crates.io/crates/ggez) [![Crates.io](https://img.shields.io/crates/d/ggez.svg)](https://crates.io/crates/ggez) [![Discord chat](https://img.shields.io/discord/1031224392174293002.svg?label=discord%20chat)](https://discord.gg/48VycPe2ZX)\nggez is a Rust library to create a Good Game Easily.\nThe current version is 0.9.3.\nMore specifically, ggez is a lightweight cross-platform game framework for making 2D games with minimum friction. It aims to implement an API based on (a Rustified version of) the [L\u00d6VE](https://love2d.org/) game framework. This means it contains basic and portable 2D drawing, sound, resource loading and event handling, but finer details and performance characteristics may be different than L\u00d6VE.\nggez is not meant to be everything to everyone, but rather a good base upon which to build. Thus it takes a fairly batteries-included approach without needing a million additions and plugins for everything imaginable, but also does not dictate higher-level functionality such as physics engine or entity component system. Instead the goal is to allow you to use whichever libraries you want to provide these functions, or build your own libraries atop ggez.\n### [\u00a7](https://docs.rs/ggez/latest/ggez/#features)Features\n  * Filesystem abstraction that lets you load resources from folders or zip files\n  * Hardware-accelerated 2D rendering built on the `wgpu` graphics API\n  * Loading and playing .ogg, .wav and .flac files via the `rodio` crate\n  * TTF font rendering with `glyph_brush`.\n  * Interface for handling keyboard and mouse events easily through callbacks\n  * Config file for defining engine and game settings\n  * Easy timing and FPS measurement functions.\n  * Math library integration with `mint`.\n  * Some more advanced graphics options: shaders, instanced draws and render targets\n\n\n#### [\u00a7](https://docs.rs/ggez/latest/ggez/#supported-platforms)Supported platforms\n  * Fully supported: Windows, Linux\n  * Not officially supported but might work anyway: Mac\n\n\nFor details, see [docs/BuildingForEveryPlatform.md](https://github.com/ggez/ggez/blob/master/docs/BuildingForEveryPlatform.md)\nIf you want to run ggez on Android, iOS or the web using WebAssembly take a look at [good-web-game](https://github.com/ggez/good-web-game).\n### [\u00a7](https://docs.rs/ggez/latest/ggez/#whos-using-ggez)Who\u2019s using ggez?\nCheck out the [projects list!](https://github.com/ggez/ggez/blob/master/docs/Projects.md)\n### [\u00a7](https://docs.rs/ggez/latest/ggez/#usage)Usage\nggez requires rustc >= 1.42 and is distributed on crates.io. To include it in your project, just add the dependency line to your `Cargo.toml` file:\n```\nggez = \"0.9.3\"\n```\n\nggez consists of three main parts: A `Context` object which contains all the state required to interface with the computer\u2019s hardware, an `EventHandler` trait that the user implements to register callbacks for events, and various sub-modules such as `graphics` and `audio` that provide the functionality to actually get stuff done. The general pattern is to create a struct holding your game\u2019s data which implements the `EventHandler` trait. Create a new `Context` object with default objects from a `ContextBuilder` or `Conf` object, and then call `event::run()` with the `Context` and an instance of your `EventHandler` to run your game\u2019s main loop.\nSee the [API docs](https://docs.rs/ggez/) for full documentation, or the [examples](https://github.com/ggez/ggez/tree/master/examples) directory for a number of commented examples of varying complexity. Most examples show off a single feature of ggez, while `astroblasto` and `snake` are small but complete games.\n### [\u00a7](https://docs.rs/ggez/latest/ggez/#getting-started)Getting started\nFor a quick tutorial on ggez, see the [Hello ggez](https://github.com/ggez/ggez/blob/master/docs/guides/HelloGgez.md) guide in the `docs/` directory.\n### [\u00a7](https://docs.rs/ggez/latest/ggez/#examples)Examples\nSee the `examples/` directory in the source. Most examples show off a single feature of ggez, while `astroblasto` is a small but complete Asteroids-like game.\nTo run the examples, just check out the source and execute `cargo run --example` in the root directory:\n```\ngit clone https://github.com/ggez/ggez.git\ncd ggez\ncargo run --example 05_astroblasto\n```\n\nIf this doesn\u2019t work, see the [FAQ](https://github.com/ggez/ggez/blob/master/docs/FAQ.md) for solutions to common problems.\n#### [\u00a7](https://docs.rs/ggez/latest/ggez/#basic-project-template)Basic Project Template\n```\nuse ggez::{Context, ContextBuilder, GameResult};\nuse ggez::graphics::{self, Color};\nuse ggez::event::{self, EventHandler};\nfn main() {\n  // Make a Context.\n  let (mut ctx, event_loop) = ContextBuilder::new(\"my_game\", \"Cool Game Author\")\n    .build()\n    .expect(\"aieee, could not create ggez context!\");\n  // Create an instance of your event handler.\n  // Usually, you should provide it with the Context object to\n  // use when setting your game up.\n  let my_game = MyGame::new(&mut ctx);\n  // Run!\n  event::run(ctx, event_loop, my_game);\n}\nstruct MyGame {\n  // Your state here...\n}\nimpl MyGame {\n  pub fn new(_ctx: &mut Context) -> MyGame {\n    // Load/create resources such as images here.\n    MyGame {\n      // ...\n    }\n  }\n}\nimpl EventHandler for MyGame {\n  fn update(&mut self, _ctx: &mut Context) -> GameResult {\n    // Update code here...\n    Ok(())\n  }\n  fn draw(&mut self, ctx: &mut Context) -> GameResult {\n    let mut canvas = graphics::Canvas::from_frame(ctx, Color::WHITE);\n    // Draw code here...\n    canvas.finish(ctx)\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/ggez/latest/ggez/#implementation-details)Implementation details\nggez is built upon `winit` for windowing and events, `rodio` for sound, and a 2D drawing engine implemented with `wgpu`. It is entirely thread-safe (though platform constraints mean the event-handling loop and drawing must be done in the main thread), and portable to Windows and Linux.\nggez is pure Rust\u2122.\n### [\u00a7](https://docs.rs/ggez/latest/ggez/#help-1)Help!\nSources of information:\n  * The [FAQ](https://github.com/ggez/ggez/blob/master/docs/FAQ.md) has answers to common questions and problems.\n  * The [API docs](https://docs.rs/ggez/), a lot of design stuff is explained there.\n  * Check out the [examples](https://github.com/ggez/ggez/tree/master/examples).\n\n\nIf you still have problems or questions, feel free to ask! Easiest ways are:\n  * Open an issue on [the Github issue tracker](https://github.com/ggez/ggez/issues)\n  * Say hi on [our new Discord server](https://discord.gg/48VycPe2ZX)\n  * Or ask the wise people on the [unofficial Rust Discord server](http://bit.ly/rust-community), the [Rust Gamedev server](https://discord.gg/yNtPTb2) or the [good-web-game Discord server](https://discord.gg/jum3Fjek2A)\n\n\nLicense: MIT\n## Re-exports[\u00a7](https://docs.rs/ggez/latest/ggez/#reexports)\n\n`pub use crate::context::Context[](https://docs.rs/ggez/latest/ggez/context/struct.Context.html \"struct ggez::context::Context\");`\n\n\n`pub use crate::context::ContextBuilder[](https://docs.rs/ggez/latest/ggez/context/struct.ContextBuilder.html \"struct ggez::context::ContextBuilder\");`\n\n\n`pub use glam[](https://docs.rs/glam/0.24.2/x86_64-unknown-linux-gnu/glam/index.html \"mod glam\");`\n\n\n`pub use mint[](https://docs.rs/mint/0.5.9/x86_64-unknown-linux-gnu/mint/index.html \"mod mint\");`\n\n\n`pub use crate::context::winit[](https://docs.rs/winit/0.28.7/x86_64-unknown-linux-gnu/winit/index.html \"mod winit\");`\n\n\n`pub use crate::error[](https://docs.rs/ggez/latest/ggez/error/index.html \"mod ggez::error\")::*;`\n\n## Modules[\u00a7](https://docs.rs/ggez/latest/ggez/#modules)\n\n[audio](https://docs.rs/ggez/latest/ggez/audio/index.html \"mod ggez::audio\")\n    Provides an interface to output sound to the user\u2019s speakers.\n\n[conf](https://docs.rs/ggez/latest/ggez/conf/index.html \"mod ggez::conf\")\n    The `conf` module contains functions for loading and saving game configurations.\n\n[context](https://docs.rs/ggez/latest/ggez/context/index.html \"mod ggez::context\")\n    The `context` module contains functions and traits related to using the `Context` type.\n\n[error](https://docs.rs/ggez/latest/ggez/error/index.html \"mod ggez::error\")\n    Error types and conversion functions.\n\n[event](https://docs.rs/ggez/latest/ggez/event/index.html \"mod ggez::event\")\n    The `event` module contains traits and structs to actually run your game mainloop and handle top-level state, as well as handle input events such as keyboard and mouse.\n\n[filesystem](https://docs.rs/ggez/latest/ggez/filesystem/index.html \"mod ggez::filesystem\")\n    A cross-platform interface to the filesystem.\n\n[graphics](https://docs.rs/ggez/latest/ggez/graphics/index.html \"mod ggez::graphics\")\n    The graphics module performs the perhaps most important task of ggez, which is **drawing things onto the screen**.\n\n[input](https://docs.rs/ggez/latest/ggez/input/index.html \"mod ggez::input\")\n    Input handling modules for keyboard, mouse and gamepad.\n\n[timer](https://docs.rs/ggez/latest/ggez/timer/index.html \"mod ggez::timer\")\n    Timing and measurement functions.\n",
        "markdown_with_citations": "[](https://docs.rs/ggez/latest/ggez/all.html \"show sidebar\")\n# Crate ggezCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![ggez logo\u27e84\u27e9](http://ggez.rs/)\n## \u00a7\u27e85\u27e9What is this?\n![Build status\u27e86\u27e9] ![Docs Status\u27e87\u27e9](https://docs.rs/ggez) ![license\u27e88\u27e9](https://github.com/ggez/ggez/blob/master/LICENSE) ![Crates.io\u27e89\u27e9](https://crates.io/crates/ggez) ![Crates.io\u27e810\u27e9](https://crates.io/crates/ggez) ![Discord chat\u27e811\u27e9](https://discord.gg/48VycPe2ZX)\nggez is a Rust library to create a Good Game Easily.\nThe current version is 0.9.3.\nMore specifically, ggez is a lightweight cross-platform game framework for making 2D games with minimum friction. It aims to implement an API based on (a Rustified version of) the L\u00d6VE\u27e812\u27e9 game framework. This means it contains basic and portable 2D drawing, sound, resource loading and event handling, but finer details and performance characteristics may be different than L\u00d6VE.\nggez is not meant to be everything to everyone, but rather a good base upon which to build. Thus it takes a fairly batteries-included approach without needing a million additions and plugins for everything imaginable, but also does not dictate higher-level functionality such as physics engine or entity component system. Instead the goal is to allow you to use whichever libraries you want to provide these functions, or build your own libraries atop ggez.\n### \u00a7\u27e813\u27e9Features\n  * Filesystem abstraction that lets you load resources from folders or zip files\n  * Hardware-accelerated 2D rendering built on the `wgpu` graphics API\n  * Loading and playing .ogg, .wav and .flac files via the `rodio` crate\n  * TTF font rendering with `glyph_brush`.\n  * Interface for handling keyboard and mouse events easily through callbacks\n  * Config file for defining engine and game settings\n  * Easy timing and FPS measurement functions.\n  * Math library integration with `mint`.\n  * Some more advanced graphics options: shaders, instanced draws and render targets\n\n\n#### \u00a7\u27e814\u27e9Supported platforms\n  * Fully supported: Windows, Linux\n  * Not officially supported but might work anyway: Mac\n\n\nFor details, see docs/BuildingForEveryPlatform.md\u27e815\u27e9\nIf you want to run ggez on Android, iOS or the web using WebAssembly take a look at good-web-game\u27e816\u27e9.\n### \u00a7\u27e817\u27e9Who\u2019s using ggez?\nCheck out the projects list!\u27e818\u27e9\n### \u00a7\u27e819\u27e9Usage\nggez requires rustc >= 1.42 and is distributed on crates.io. To include it in your project, just add the dependency line to your `Cargo.toml` file:\n```\nggez = \"0.9.3\"\n```\n\nggez consists of three main parts: A `Context` object which contains all the state required to interface with the computer\u2019s hardware, an `EventHandler` trait that the user implements to register callbacks for events, and various sub-modules such as `graphics` and `audio` that provide the functionality to actually get stuff done. The general pattern is to create a struct holding your game\u2019s data which implements the `EventHandler` trait. Create a new `Context` object with default objects from a `ContextBuilder` or `Conf` object, and then call `event::run()` with the `Context` and an instance of your `EventHandler` to run your game\u2019s main loop.\nSee the API docs\u27e820\u27e9 for full documentation, or the examples\u27e821\u27e9 directory for a number of commented examples of varying complexity. Most examples show off a single feature of ggez, while `astroblasto` and `snake` are small but complete games.\n### \u00a7\u27e822\u27e9Getting started\nFor a quick tutorial on ggez, see the Hello ggez\u27e823\u27e9 guide in the `docs/` directory.\n### \u00a7\u27e824\u27e9Examples\nSee the `examples/` directory in the source. Most examples show off a single feature of ggez, while `astroblasto` is a small but complete Asteroids-like game.\nTo run the examples, just check out the source and execute `cargo run --example` in the root directory:\n```\ngit clone https://github.com/ggez/ggez.git\ncd ggez\ncargo run --example 05_astroblasto\n```\n\nIf this doesn\u2019t work, see the FAQ\u27e825\u27e9 for solutions to common problems.\n#### \u00a7\u27e826\u27e9Basic Project Template\n```\nuse ggez::{Context, ContextBuilder, GameResult};\nuse ggez::graphics::{self, Color};\nuse ggez::event::{self, EventHandler};\nfn main() {\n  // Make a Context.\n  let (mut ctx, event_loop) = ContextBuilder::new(\"my_game\", \"Cool Game Author\")\n    .build()\n    .expect(\"aieee, could not create ggez context!\");\n  // Create an instance of your event handler.\n  // Usually, you should provide it with the Context object to\n  // use when setting your game up.\n  let my_game = MyGame::new(&mut ctx);\n  // Run!\n  event::run(ctx, event_loop, my_game);\n}\nstruct MyGame {\n  // Your state here...\n}\nimpl MyGame {\n  pub fn new(_ctx: &mut Context) -> MyGame {\n    // Load/create resources such as images here.\n    MyGame {\n      // ...\n    }\n  }\n}\nimpl EventHandler for MyGame {\n  fn update(&mut self, _ctx: &mut Context) -> GameResult {\n    // Update code here...\n    Ok(())\n  }\n  fn draw(&mut self, ctx: &mut Context) -> GameResult {\n    let mut canvas = graphics::Canvas::from_frame(ctx, Color::WHITE);\n    // Draw code here...\n    canvas.finish(ctx)\n  }\n}\n```\n\n### \u00a7\u27e827\u27e9Implementation details\nggez is built upon `winit` for windowing and events, `rodio` for sound, and a 2D drawing engine implemented with `wgpu`. It is entirely thread-safe (though platform constraints mean the event-handling loop and drawing must be done in the main thread), and portable to Windows and Linux.\nggez is pure Rust\u2122.\n### \u00a7\u27e828\u27e9Help!\nSources of information:\n  * The FAQ\u27e825\u27e9 has answers to common questions and problems.\n  * The API docs\u27e820\u27e9, a lot of design stuff is explained there.\n  * Check out the examples\u27e821\u27e9.\n\n\nIf you still have problems or questions, feel free to ask! Easiest ways are:\n  * Open an issue on the Github issue tracker\u27e829\u27e9\n  * Say hi on our new Discord server\u27e830\u27e9\n  * Or ask the wise people on the unofficial Rust Discord server\u27e831\u27e9, the Rust Gamedev server\u27e832\u27e9 or the good-web-game Discord server\u27e833\u27e9\n\n\nLicense: MIT\n## Re-exports\u00a7\u27e834\u27e9\n\n`pub use crate::context::Context[](https://docs.rs/ggez/latest/ggez/context/struct.Context.html \"struct ggez::context::Context\");`\n\n\n`pub use crate::context::ContextBuilder[](https://docs.rs/ggez/latest/ggez/context/struct.ContextBuilder.html \"struct ggez::context::ContextBuilder\");`\n\n\n`pub use glam[](https://docs.rs/glam/0.24.2/x86_64-unknown-linux-gnu/glam/index.html \"mod glam\");`\n\n\n`pub use mint[](https://docs.rs/mint/0.5.9/x86_64-unknown-linux-gnu/mint/index.html \"mod mint\");`\n\n\n`pub use crate::context::winit[](https://docs.rs/winit/0.28.7/x86_64-unknown-linux-gnu/winit/index.html \"mod winit\");`\n\n\n`pub use crate::error[](https://docs.rs/ggez/latest/ggez/error/index.html \"mod ggez::error\")::*;`\n\n## Modules\u00a7\u27e835\u27e9\n\naudio\u27e836\u27e9\n    Provides an interface to output sound to the user\u2019s speakers.\n\nconf\u27e837\u27e9\n    The `conf` module contains functions for loading and saving game configurations.\n\ncontext\u27e838\u27e9\n    The `context` module contains functions and traits related to using the `Context` type.\n\nerror\u27e839\u27e9\n    Error types and conversion functions.\n\nevent\u27e840\u27e9\n    The `event` module contains traits and structs to actually run your game mainloop and handle top-level state, as well as handle input events such as keyboard and mouse.\n\nfilesystem\u27e841\u27e9\n    A cross-platform interface to the filesystem.\n\ngraphics\u27e842\u27e9\n    The graphics module performs the perhaps most important task of ggez, which is **drawing things onto the screen**.\n\ninput\u27e843\u27e9\n    Input handling modules for keyboard, mouse and gamepad.\n\ntimer\u27e844\u27e9\n    Timing and measurement functions.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ggez/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ggez/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ggez/latest/src/ggez/lib.rs.html#1-209: Source\n\u27e84\u27e9 https://raw.githubusercontent.com/ggez/ggez/master/docs/ggez-logo-maroon-full.svg: ![ggez logo\n\u27e85\u27e9 https://docs.rs/ggez/latest/ggez/#what-is-this: \u00a7\n\u27e86\u27e9 https://github.com/ggez/ggez/workflows/CI/badge.svg: Build status\n\u27e87\u27e9 https://docs.rs/ggez/badge.svg: ![Docs Status\n\u27e88\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![license\n\u27e89\u27e9 https://img.shields.io/crates/v/ggez.svg: ![Crates.io\n\u27e810\u27e9 https://img.shields.io/crates/d/ggez.svg: ![Crates.io\n\u27e811\u27e9 https://img.shields.io/discord/1031224392174293002.svg?label=discord%20chat: ![Discord chat\n\u27e812\u27e9 https://love2d.org/: L\u00d6VE\n\u27e813\u27e9 https://docs.rs/ggez/latest/ggez/#features: \u00a7\n\u27e814\u27e9 https://docs.rs/ggez/latest/ggez/#supported-platforms: \u00a7\n\u27e815\u27e9 https://github.com/ggez/ggez/blob/master/docs/BuildingForEveryPlatform.md: docs/BuildingForEveryPlatform.md\n\u27e816\u27e9 https://github.com/ggez/good-web-game: good-web-game\n\u27e817\u27e9 https://docs.rs/ggez/latest/ggez/#whos-using-ggez: \u00a7\n\u27e818\u27e9 https://github.com/ggez/ggez/blob/master/docs/Projects.md: projects list!\n\u27e819\u27e9 https://docs.rs/ggez/latest/ggez/#usage: \u00a7\n\u27e820\u27e9 https://docs.rs/ggez/: API docs\n\u27e821\u27e9 https://github.com/ggez/ggez/tree/master/examples: examples\n\u27e822\u27e9 https://docs.rs/ggez/latest/ggez/#getting-started: \u00a7\n\u27e823\u27e9 https://github.com/ggez/ggez/blob/master/docs/guides/HelloGgez.md: Hello ggez\n\u27e824\u27e9 https://docs.rs/ggez/latest/ggez/#examples: \u00a7\n\u27e825\u27e9 https://github.com/ggez/ggez/blob/master/docs/FAQ.md: FAQ\n\u27e826\u27e9 https://docs.rs/ggez/latest/ggez/#basic-project-template: \u00a7\n\u27e827\u27e9 https://docs.rs/ggez/latest/ggez/#implementation-details: \u00a7\n\u27e828\u27e9 https://docs.rs/ggez/latest/ggez/#help-1: \u00a7\n\u27e829\u27e9 https://github.com/ggez/ggez/issues: the Github issue tracker\n\u27e830\u27e9 https://discord.gg/48VycPe2ZX: our new Discord server\n\u27e831\u27e9 http://bit.ly/rust-community: unofficial Rust Discord server\n\u27e832\u27e9 https://discord.gg/yNtPTb2: Rust Gamedev server\n\u27e833\u27e9 https://discord.gg/jum3Fjek2A: good-web-game Discord server\n\u27e834\u27e9 https://docs.rs/ggez/latest/ggez/#reexports: \u00a7\n\u27e835\u27e9 https://docs.rs/ggez/latest/ggez/#modules: \u00a7\n\u27e836\u27e9 https://docs.rs/ggez/latest/ggez/audio/index.html: mod ggez::audio - audio\n\u27e837\u27e9 https://docs.rs/ggez/latest/ggez/conf/index.html: mod ggez::conf - conf\n\u27e838\u27e9 https://docs.rs/ggez/latest/ggez/context/index.html: mod ggez::context - context\n\u27e839\u27e9 https://docs.rs/ggez/latest/ggez/error/index.html: mod ggez::error - error\n\u27e840\u27e9 https://docs.rs/ggez/latest/ggez/event/index.html: mod ggez::event - event\n\u27e841\u27e9 https://docs.rs/ggez/latest/ggez/filesystem/index.html: mod ggez::filesystem - filesystem\n\u27e842\u27e9 https://docs.rs/ggez/latest/ggez/graphics/index.html: mod ggez::graphics - graphics\n\u27e843\u27e9 https://docs.rs/ggez/latest/ggez/input/index.html: mod ggez::input - input\n\u27e844\u27e9 https://docs.rs/ggez/latest/ggez/timer/index.html: mod ggez::timer - timer\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `ggez` crate is a lightweight, cross-platform game framework for building 2D games in Rust, inspired by the L\u00d6VE framework. It provides hardware-accelerated 2D rendering (via `wgpu`), sound playback (`rodio`), TTF font rendering (`glyph_brush`), resource loading, and event handling through a simple API. Additional features include filesystem abstraction, advanced graphics options like shaders, and easy timing and FPS measurement, making it a solid foundation for game development without enforcing higher-level systems like physics or ECS.",
    "feature_summary": null,
    "use_case": "Unknown",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1: Graphics Rendering\n\u2705 **Factual:** ggez provides hardware-accelerated 2D rendering using the `wgpu` graphics API, enabling efficient and portable drawing operations across supported platforms.  \n\u274c **Counterfactual:** ggez uses OpenGL for its rendering backend, ensuring compatibility with older graphics hardware.\n\n---\n\n### Pair 2: Platform Support\n\u2705 **Factual:** ggez is fully supported on Windows and Linux, while macOS is not officially supported but may work with additional effort.  \n\u274c **Counterfactual:** ggez is officially supported on Windows, Linux, macOS, Android, and iOS, with seamless cross-platform compatibility.\n\n---\n\n### Pair 3: Audio Integration\n\u2705 **Factual:** ggez supports loading and playing `.ogg`, `.wav`, and `.flac` audio files via the `rodio` crate, providing a straightforward interface for sound playback.  \n\u274c **Counterfactual:** ggez supports MP3 audio playback out of the box, leveraging the `rodio` crate for decoding and playback.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}