{
    "name": "unicode-normalization",
    "version": "0.1.24",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/unicode-normalization/latest/unicode_normalization/all.html \"show sidebar\")\n# Crate unicode_normalizationCopy item path\n[Settings](https://docs.rs/unicode-normalization/latest/settings.html)\n[Help](https://docs.rs/unicode-normalization/latest/help.html)\nSummary[Source](https://docs.rs/unicode-normalization/latest/src/unicode_normalization/lib.rs.html#11-227)\nExpand description\nUnicode character composition and decomposition utilities as described in [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).\n```\nextern crate unicode_normalization;\nuse unicode_normalization::char::compose;\nuse unicode_normalization::UnicodeNormalization;\nfn main() {\n  assert_eq!(compose('A','\\u{30a}'), Some('\u00c5'));\n  let s = \"\u212b\u2126\";\n  let c = s.nfc().collect::<String>();\n  assert_eq!(c, \"\u00c5\u03a9\");\n}\n```\n\n## [\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#cratesio)crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-normalization = \"0.1.20\"\n```\n\n## Modules[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#modules)\n\n[char](https://docs.rs/unicode-normalization/latest/unicode_normalization/char/index.html \"mod unicode_normalization::char\")\n    Methods for composing and decomposing characters.\n## Structs[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#structs)\n\n[Decompositions](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Decompositions.html \"struct unicode_normalization::Decompositions\")\n    External iterator for a string decomposition\u2019s characters.\n\n[Recompositions](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Recompositions.html \"struct unicode_normalization::Recompositions\")\n    External iterator for a string recomposition\u2019s characters.\n\n[Replacements](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Replacements.html \"struct unicode_normalization::Replacements\")\n    External iterator for replacements for a string\u2019s characters.\n\n[StreamSafe](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.StreamSafe.html \"struct unicode_normalization::StreamSafe\")\n    UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in _NFKD_ and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.\n## Enums[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#enums)\n\n[IsNormalized](https://docs.rs/unicode-normalization/latest/unicode_normalization/enum.IsNormalized.html \"enum unicode_normalization::IsNormalized\")\n    QuickCheck quickly determines if a string is normalized, it can return `Maybe`\n## Constants[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#constants)\n\n[UNICODE_VERSION](https://docs.rs/unicode-normalization/latest/unicode_normalization/constant.UNICODE_VERSION.html \"constant unicode_normalization::UNICODE_VERSION\")\n\n## Traits[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#traits)\n\n[UnicodeNormalization](https://docs.rs/unicode-normalization/latest/unicode_normalization/trait.UnicodeNormalization.html \"trait unicode_normalization::UnicodeNormalization\")\n    Methods for iterating over strings while applying Unicode normalizations as described in [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).\n## Functions[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#functions)\n\n[is_nfc](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc.html \"fn unicode_normalization::is_nfc\")\n    Authoritatively check if a string is in NFC.\n\n[is_nfc_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_quick.html \"fn unicode_normalization::is_nfc_quick\")\n    Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary. In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.\n\n[is_nfc_stream_safe](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe.html \"fn unicode_normalization::is_nfc_stream_safe\")\n    Authoritatively check if a string is Stream-Safe NFC.\n\n[is_nfc_stream_safe_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe_quick.html \"fn unicode_normalization::is_nfc_stream_safe_quick\")\n    Quickly check if a string is Stream-Safe NFC.\n\n[is_nfd](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd.html \"fn unicode_normalization::is_nfd\")\n    Authoritatively check if a string is in NFD.\n\n[is_nfd_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_quick.html \"fn unicode_normalization::is_nfd_quick\")\n    Quickly check if a string is in NFD.\n\n[is_nfd_stream_safe](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe.html \"fn unicode_normalization::is_nfd_stream_safe\")\n    Authoritatively check if a string is Stream-Safe NFD.\n\n[is_nfd_stream_safe_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe_quick.html \"fn unicode_normalization::is_nfd_stream_safe_quick\")\n    Quickly check if a string is Stream-Safe NFD.\n\n[is_nfkc](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc.html \"fn unicode_normalization::is_nfkc\")\n    Authoritatively check if a string is in NFKC.\n\n[is_nfkc_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc_quick.html \"fn unicode_normalization::is_nfkc_quick\")\n    Quickly check if a string is in NFKC.\n\n[is_nfkd](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd.html \"fn unicode_normalization::is_nfkd\")\n    Authoritatively check if a string is in NFKD.\n\n[is_nfkd_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd_quick.html \"fn unicode_normalization::is_nfkd_quick\")\n    Quickly check if a string is in NFKD.\n",
        "markdown_with_citations": "[](https://docs.rs/unicode-normalization/latest/unicode_normalization/all.html \"show sidebar\")\n# Crate unicode_normalizationCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nUnicode character composition and decomposition utilities as described in Unicode Standard Annex #15\u27e84\u27e9.\n```\nextern crate unicode_normalization;\nuse unicode_normalization::char::compose;\nuse unicode_normalization::UnicodeNormalization;\nfn main() {\n  assert_eq!(compose('A','\\u{30a}'), Some('\u00c5'));\n  let s = \"\u212b\u2126\";\n  let c = s.nfc().collect::<String>();\n  assert_eq!(c, \"\u00c5\u03a9\");\n}\n```\n\n## \u00a7\u27e85\u27e9crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-normalization = \"0.1.20\"\n```\n\n## Modules\u00a7\u27e86\u27e9\n\nchar\u27e87\u27e9\n    Methods for composing and decomposing characters.\n## Structs\u00a7\u27e88\u27e9\n\nDecompositions\u27e89\u27e9\n    External iterator for a string decomposition\u2019s characters.\n\nRecompositions\u27e810\u27e9\n    External iterator for a string recomposition\u2019s characters.\n\nReplacements\u27e811\u27e9\n    External iterator for replacements for a string\u2019s characters.\n\nStreamSafe\u27e812\u27e9\n    UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in _NFKD_ and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.\n## Enums\u00a7\u27e813\u27e9\n\nIsNormalized\u27e814\u27e9\n    QuickCheck quickly determines if a string is normalized, it can return `Maybe`\n## Constants\u00a7\u27e815\u27e9\n\nUNICODE_VERSION\u27e816\u27e9\n\n## Traits\u00a7\u27e817\u27e9\n\nUnicodeNormalization\u27e818\u27e9\n    Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15\u27e84\u27e9.\n## Functions\u00a7\u27e819\u27e9\n\nis_nfc\u27e820\u27e9\n    Authoritatively check if a string is in NFC.\n\nis_nfc_quick\u27e821\u27e9\n    Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary. In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.\n\nis_nfc_stream_safe\u27e822\u27e9\n    Authoritatively check if a string is Stream-Safe NFC.\n\nis_nfc_stream_safe_quick\u27e823\u27e9\n    Quickly check if a string is Stream-Safe NFC.\n\nis_nfd\u27e824\u27e9\n    Authoritatively check if a string is in NFD.\n\nis_nfd_quick\u27e825\u27e9\n    Quickly check if a string is in NFD.\n\nis_nfd_stream_safe\u27e826\u27e9\n    Authoritatively check if a string is Stream-Safe NFD.\n\nis_nfd_stream_safe_quick\u27e827\u27e9\n    Quickly check if a string is Stream-Safe NFD.\n\nis_nfkc\u27e828\u27e9\n    Authoritatively check if a string is in NFKC.\n\nis_nfkc_quick\u27e829\u27e9\n    Quickly check if a string is in NFKC.\n\nis_nfkd\u27e830\u27e9\n    Authoritatively check if a string is in NFKD.\n\nis_nfkd_quick\u27e831\u27e9\n    Quickly check if a string is in NFKD.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/unicode-normalization/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/unicode-normalization/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/unicode-normalization/latest/src/unicode_normalization/lib.rs.html#11-227: Source\n\u27e84\u27e9 http://www.unicode.org/reports/tr15/: Unicode Standard Annex #15\n\u27e85\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#cratesio: \u00a7\n\u27e86\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#modules: \u00a7\n\u27e87\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/char/index.html: mod unicode_normalization::char - char\n\u27e88\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#structs: \u00a7\n\u27e89\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Decompositions.html: struct unicode_normalization::Decompositions - Decompositions\n\u27e810\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Recompositions.html: struct unicode_normalization::Recompositions - Recompositions\n\u27e811\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Replacements.html: struct unicode_normalization::Replacements - Replacements\n\u27e812\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.StreamSafe.html: struct unicode_normalization::StreamSafe - StreamSafe\n\u27e813\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#enums: \u00a7\n\u27e814\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/enum.IsNormalized.html: enum unicode_normalization::IsNormalized - IsNormalized\n\u27e815\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#constants: \u00a7\n\u27e816\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/constant.UNICODE_VERSION.html: constant unicode_normalization::UNICODE_VERSION - UNICODE_VERSION\n\u27e817\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#traits: \u00a7\n\u27e818\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/trait.UnicodeNormalization.html: trait unicode_normalization::UnicodeNormalization - UnicodeNormalization\n\u27e819\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#functions: \u00a7\n\u27e820\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc.html: fn unicode_normalization::is_nfc - is_nfc\n\u27e821\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_quick.html: fn unicode_normalization::is_nfc_quick - is_nfc_quick\n\u27e822\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe.html: fn unicode_normalization::is_nfc_stream_safe - is_nfc_stream_safe\n\u27e823\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe_quick.html: fn unicode_normalization::is_nfc_stream_safe_quick - is_nfc_stream_safe_quick\n\u27e824\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd.html: fn unicode_normalization::is_nfd - is_nfd\n\u27e825\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_quick.html: fn unicode_normalization::is_nfd_quick - is_nfd_quick\n\u27e826\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe.html: fn unicode_normalization::is_nfd_stream_safe - is_nfd_stream_safe\n\u27e827\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe_quick.html: fn unicode_normalization::is_nfd_stream_safe_quick - is_nfd_stream_safe_quick\n\u27e828\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc.html: fn unicode_normalization::is_nfkc - is_nfkc\n\u27e829\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc_quick.html: fn unicode_normalization::is_nfkc_quick - is_nfkc_quick\n\u27e830\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd.html: fn unicode_normalization::is_nfkd - is_nfkd\n\u27e831\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd_quick.html: fn unicode_normalization::is_nfkd_quick - is_nfkd_quick\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `unicode-normalization` crate provides utilities for Unicode character composition and decomposition based on [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/). It supports normalization forms (NFC, NFD, NFKC, NFKD), stream-safe checks, and quick validation of normalization states. Key features include iterators for decompositions, recompositions, replacements, and stream-safe transformations, as well as traits and functions for efficient string normalization.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Unicode Normalization Methods  \n\u2705 Factual: The `unicode-normalization` crate provides methods for iterating over strings and applying Unicode normalization forms such as NFC, NFD, NFKC, and NFKD.  \n\u274c Counterfactual: The `unicode-normalization` crate only supports NFC normalization and does not provide functionality for other Unicode normalization forms like NFD or NFKD.  \n\n---\n\n### Pair 2: Stream-Safe NFC  \n\u2705 Factual: The crate includes a `StreamSafe` iterator that ensures a string adheres to the Stream-Safe NFC standard by inserting a Combining Grapheme Joiner (U+034F) when the count of non-starters exceeds 30.  \n\u274c Counterfactual: The `StreamSafe` iterator automatically removes all combining characters from a string to ensure it is Stream-Safe NFC.  \n\n---\n\n### Pair 3: QuickCheck Normalization  \n\u2705 Factual: The `unicode-normalization` crate provides QuickCheck functions like `is_nfc_quick` and `is_nfd_quick`, which can return `IsNormalized::Maybe` if further checks are necessary.  \n\u274c Counterfactual: The QuickCheck functions in the crate always return definitive results and never require additional checks to confirm normalization.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}