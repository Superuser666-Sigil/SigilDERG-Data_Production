{
    "name": "image",
    "version": "0.25.6",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/image/latest/image/all.html \"show sidebar\")\n# Crate imageCopy item path\n[Settings](https://docs.rs/image/latest/settings.html)\n[Help](https://docs.rs/image/latest/help.html)\nSummary[Source](https://docs.rs/image/latest/src/image/lib.rs.html#1-336)\nExpand description\n## [\u00a7](https://docs.rs/image/latest/image/#overview)Overview\nThis crate provides native rust implementations of image encoding and decoding as well as some basic image manipulation functions. Additional documentation can currently also be found in the [README.md file which is most easily viewed on github](https://github.com/image-rs/image/blob/main/README.md).\nThere are two core problems for which this library provides solutions: a unified interface for image encodings and simple generic buffers for their content. It\u2019s possible to use either feature without the other. The focus is on a small and stable set of common operations that can be supplemented by other specialized crates. The library also prefers safe solutions with few dependencies.\n## [\u00a7](https://docs.rs/image/latest/image/#high-level-api)High level API\nLoad images using [`ImageReader`](https://docs.rs/image/latest/image/struct.ImageReader.html \"struct image::ImageReader\"):\n```\nuse std::io::Cursor;\nuse image::ImageReader;\nlet img = ImageReader::open(\"myimage.png\")?.decode()?;\nlet img2 = ImageReader::new(Cursor::new(bytes)).with_guessed_format()?.decode()?;\n```\n\nAnd save them using [`save`](https://docs.rs/image/latest/image/enum.DynamicImage.html#method.save) or [`write_to`](https://docs.rs/image/latest/image/enum.DynamicImage.html#method.write_to) methods:\n```\nimg.save(\"empty.jpg\")?;\nlet mut bytes: Vec<u8> = Vec::new();\nimg2.write_to(&mut Cursor::new(&mut bytes), image::ImageFormat::Png)?;\n```\n\nWith default features, the crate includes support for [many common image formats](https://docs.rs/image/latest/image/codecs/index.html#supported-formats).\n## [\u00a7](https://docs.rs/image/latest/image/#image-buffers)Image buffers\nThe two main types for storing images:\n  * [`ImageBuffer`](https://docs.rs/image/latest/image/struct.ImageBuffer.html) which holds statically typed image contents.\n  * [`DynamicImage`](https://docs.rs/image/latest/image/enum.DynamicImage.html) which is an enum over the supported `ImageBuffer` formats and supports conversions between them.\n\n\nAs well as a few more specialized options:\n  * [`GenericImage`](https://docs.rs/image/latest/image/trait.GenericImage.html) trait for a mutable image buffer.\n  * [`GenericImageView`](https://docs.rs/image/latest/image/trait.GenericImageView.html) trait for read only references to a `GenericImage`.\n  * [`flat`](https://docs.rs/image/latest/image/flat/index.html) module containing types for interoperability with generic channel matrices and foreign interfaces.\n\n\n## [\u00a7](https://docs.rs/image/latest/image/#low-level-encodingdecoding-api)Low level encoding/decoding API\nImplementations of [`ImageEncoder`](https://docs.rs/image/latest/image/trait.ImageEncoder.html) provides low level control over encoding:\n```\nlet encoder = JpegEncoder::new_with_quality(&mut writer, 95);\nimg.write_with_encoder(encoder)?;\n```\n\nWhile [`ImageDecoder`](https://docs.rs/image/latest/image/trait.ImageDecoder.html) and [`ImageDecoderRect`](https://docs.rs/image/latest/image/trait.ImageDecoderRect.html) give access to more advanced decoding options:\n```\nlet decoder = PngDecoder::new(&mut reader)?;\nlet icc = decoder.icc_profile();\nlet img = DynamicImage::from_decoder(decoder)?;\n```\n\n## Re-exports[\u00a7](https://docs.rs/image/latest/image/#reexports)\n\n`pub use crate::error::ImageError[](https://docs.rs/image/latest/image/error/enum.ImageError.html \"enum image::error::ImageError\");`\n\n\n`pub use crate::error::ImageResult[](https://docs.rs/image/latest/image/error/type.ImageResult.html \"type image::error::ImageResult\");`\n\n\n`pub use crate::flat::FlatSamples[](https://docs.rs/image/latest/image/flat/struct.FlatSamples.html \"struct image::flat::FlatSamples\");`\n\n## Modules[\u00a7](https://docs.rs/image/latest/image/#modules)\n\n[buffer](https://docs.rs/image/latest/image/buffer/index.html \"mod image::buffer\")\n    Iterators and other auxiliary structure for the `ImageBuffer` type.\n\n[codecs](https://docs.rs/image/latest/image/codecs/index.html \"mod image::codecs\")\n    Encoding and decoding for various image file formats.\n\n[error](https://docs.rs/image/latest/image/error/index.html \"mod image::error\")\n    Contains detailed error representation.\n\n[flat](https://docs.rs/image/latest/image/flat/index.html \"mod image::flat\")\n    Image representations for ffi.\n\n[imageops](https://docs.rs/image/latest/image/imageops/index.html \"mod image::imageops\")\n    Image Processing Functions\n\n[io](https://docs.rs/image/latest/image/io/index.html \"mod image::io\")\n    deprecated io module the original io module has been renamed to `image_reader`\n\n[math](https://docs.rs/image/latest/image/math/index.html \"mod image::math\")\n    Mathematical helper functions and types.\n\n[metadata](https://docs.rs/image/latest/image/metadata/index.html \"mod image::metadata\")\n    Types describing image metadata\n## Structs[\u00a7](https://docs.rs/image/latest/image/#structs)\n\n[Delay](https://docs.rs/image/latest/image/struct.Delay.html \"struct image::Delay\")\n    The delay of a frame relative to the previous one.\n\n[Frame](https://docs.rs/image/latest/image/struct.Frame.html \"struct image::Frame\")\n    A single animation frame\n\n[Frames](https://docs.rs/image/latest/image/struct.Frames.html \"struct image::Frames\")\n    An implementation dependent iterator, reading the frames as requested\n\n[ImageBuffer](https://docs.rs/image/latest/image/struct.ImageBuffer.html \"struct image::ImageBuffer\")\n    Generic image buffer\n\n[ImageReader](https://docs.rs/image/latest/image/struct.ImageReader.html \"struct image::ImageReader\")\n    A multi-format image reader.\n\n[LimitSupport](https://docs.rs/image/latest/image/struct.LimitSupport.html \"struct image::LimitSupport\")\n    Set of supported strict limits for a decoder.\n\n[Limits](https://docs.rs/image/latest/image/struct.Limits.html \"struct image::Limits\")\n    Resource limits for decoding.\n\n[Luma](https://docs.rs/image/latest/image/struct.Luma.html \"struct image::Luma\")\n    Grayscale colors.\n\n[LumaA](https://docs.rs/image/latest/image/struct.LumaA.html \"struct image::LumaA\")\n    Grayscale colors + alpha channel\n\n[Pixels](https://docs.rs/image/latest/image/struct.Pixels.html \"struct image::Pixels\")\n    Immutable pixel iterator\n\n[Rgb](https://docs.rs/image/latest/image/struct.Rgb.html \"struct image::Rgb\")\n    RGB colors.\n\n[Rgba](https://docs.rs/image/latest/image/struct.Rgba.html \"struct image::Rgba\")\n    RGB colors + alpha channel\n\n[SubImage](https://docs.rs/image/latest/image/struct.SubImage.html \"struct image::SubImage\")\n    A View into another image\n## Enums[\u00a7](https://docs.rs/image/latest/image/#enums)\n\n[ColorType](https://docs.rs/image/latest/image/enum.ColorType.html \"enum image::ColorType\")\n    An enumeration over supported color types and bit depths\n\n[DynamicImage](https://docs.rs/image/latest/image/enum.DynamicImage.html \"enum image::DynamicImage\")\n    A Dynamic Image\n\n[ExtendedColorType](https://docs.rs/image/latest/image/enum.ExtendedColorType.html \"enum image::ExtendedColorType\")\n    An enumeration of color types encountered in image formats.\n\n[ImageFormat](https://docs.rs/image/latest/image/enum.ImageFormat.html \"enum image::ImageFormat\")\n    An enumeration of supported image formats. Not all formats support both encoding and decoding.\n## Traits[\u00a7](https://docs.rs/image/latest/image/#traits)\n\n[AnimationDecoder](https://docs.rs/image/latest/image/trait.AnimationDecoder.html \"trait image::AnimationDecoder\")\n    `AnimationDecoder` trait\n\n[EncodableLayout](https://docs.rs/image/latest/image/trait.EncodableLayout.html \"trait image::EncodableLayout\")\n    Types which are safe to treat as an immutable byte slice in a pixel layout for image encoding.\n\n[GenericImage](https://docs.rs/image/latest/image/trait.GenericImage.html \"trait image::GenericImage\")\n    A trait for manipulating images.\n\n[GenericImageView](https://docs.rs/image/latest/image/trait.GenericImageView.html \"trait image::GenericImageView\")\n    Trait to inspect an image.\n\n[ImageDecoder](https://docs.rs/image/latest/image/trait.ImageDecoder.html \"trait image::ImageDecoder\")\n    The trait that all decoders implement\n\n[ImageDecoderRect](https://docs.rs/image/latest/image/trait.ImageDecoderRect.html \"trait image::ImageDecoderRect\")\n    Specialized image decoding not be supported by all formats\n\n[ImageEncoder](https://docs.rs/image/latest/image/trait.ImageEncoder.html \"trait image::ImageEncoder\")\n    The trait all encoders implement\n\n[Pixel](https://docs.rs/image/latest/image/trait.Pixel.html \"trait image::Pixel\")\n    A generalized pixel.\n\n[PixelWithColorType](https://docs.rs/image/latest/image/trait.PixelWithColorType.html \"trait image::PixelWithColorType\")\n    The pixel with an associated `ColorType`. Not all possible pixels represent one of the predefined `ColorType`s.\n\n[Primitive](https://docs.rs/image/latest/image/trait.Primitive.html \"trait image::Primitive\")\n    The type of each channel in a pixel. For example, this can be `u8`, `u16`, `f32`.\n## Functions[\u00a7](https://docs.rs/image/latest/image/#functions)\n\n[guess_format](https://docs.rs/image/latest/image/fn.guess_format.html \"fn image::guess_format\")\n    Guess image format from memory block\n\n[image_dimensions](https://docs.rs/image/latest/image/fn.image_dimensions.html \"fn image::image_dimensions\")\n    Read a tuple containing the (width, height) of the image located at the specified path. This is faster than fully loading the image and then getting its dimensions.\n\n[load](https://docs.rs/image/latest/image/fn.load.html \"fn image::load\")\n    Create a new image from a Reader.\n\n[load_from_memory](https://docs.rs/image/latest/image/fn.load_from_memory.html \"fn image::load_from_memory\")\n    Create a new image from a byte slice\n\n[load_from_memory_with_format](https://docs.rs/image/latest/image/fn.load_from_memory_with_format.html \"fn image::load_from_memory_with_format\")\n    Create a new image from a byte slice\n\n[open](https://docs.rs/image/latest/image/fn.open.html \"fn image::open\")\n    Open the image located at the path specified. The image\u2019s format is determined from the path\u2019s file extension.\n\n[save_buffer](https://docs.rs/image/latest/image/fn.save_buffer.html \"fn image::save_buffer\")\n    Saves the supplied buffer to a file at the path specified.\n\n[save_buffer_with_format](https://docs.rs/image/latest/image/fn.save_buffer_with_format.html \"fn image::save_buffer_with_format\")\n    Saves the supplied buffer to a file at the path specified in the specified format.\n\n[write_buffer_with_format](https://docs.rs/image/latest/image/fn.write_buffer_with_format.html \"fn image::write_buffer_with_format\")\n    Writes the supplied buffer to a writer in the specified format.\n## Type Aliases[\u00a7](https://docs.rs/image/latest/image/#types)\n\n[GrayAlphaImage](https://docs.rs/image/latest/image/type.GrayAlphaImage.html \"type image::GrayAlphaImage\")\n    Sendable grayscale + alpha channel image buffer\n\n[GrayImage](https://docs.rs/image/latest/image/type.GrayImage.html \"type image::GrayImage\")\n    Sendable grayscale image buffer\n\n[Rgb32FImage](https://docs.rs/image/latest/image/type.Rgb32FImage.html \"type image::Rgb32FImage\")\n    An image buffer for 32-bit float RGB pixels, where the backing container is a flattened vector of floats.\n\n[RgbImage](https://docs.rs/image/latest/image/type.RgbImage.html \"type image::RgbImage\")\n    Sendable Rgb image buffer\n\n[Rgba32FImage](https://docs.rs/image/latest/image/type.Rgba32FImage.html \"type image::Rgba32FImage\")\n    An image buffer for 32-bit float RGBA pixels, where the backing container is a flattened vector of floats.\n\n[RgbaImage](https://docs.rs/image/latest/image/type.RgbaImage.html \"type image::RgbaImage\")\n    Sendable Rgb + alpha channel image buffer\n",
        "markdown_with_citations": "[](https://docs.rs/image/latest/image/all.html \"show sidebar\")\n# Crate imageCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Overview\nThis crate provides native rust implementations of image encoding and decoding as well as some basic image manipulation functions. Additional documentation can currently also be found in the README.md file which is most easily viewed on github\u27e85\u27e9.\nThere are two core problems for which this library provides solutions: a unified interface for image encodings and simple generic buffers for their content. It\u2019s possible to use either feature without the other. The focus is on a small and stable set of common operations that can be supplemented by other specialized crates. The library also prefers safe solutions with few dependencies.\n## \u00a7\u27e86\u27e9High level API\nLoad images using `ImageReader`\u27e87\u27e9:\n```\nuse std::io::Cursor;\nuse image::ImageReader;\nlet img = ImageReader::open(\"myimage.png\")?.decode()?;\nlet img2 = ImageReader::new(Cursor::new(bytes)).with_guessed_format()?.decode()?;\n```\n\nAnd save them using `save`\u27e88\u27e9 or `write_to`\u27e89\u27e9 methods:\n```\nimg.save(\"empty.jpg\")?;\nlet mut bytes: Vec<u8> = Vec::new();\nimg2.write_to(&mut Cursor::new(&mut bytes), image::ImageFormat::Png)?;\n```\n\nWith default features, the crate includes support for many common image formats\u27e810\u27e9.\n## \u00a7\u27e811\u27e9Image buffers\nThe two main types for storing images:\n  * `ImageBuffer`\u27e812\u27e9 which holds statically typed image contents.\n  * `DynamicImage`\u27e813\u27e9 which is an enum over the supported `ImageBuffer` formats and supports conversions between them.\n\n\nAs well as a few more specialized options:\n  * `GenericImage`\u27e814\u27e9 trait for a mutable image buffer.\n  * `GenericImageView`\u27e815\u27e9 trait for read only references to a `GenericImage`.\n  * `flat`\u27e816\u27e9 module containing types for interoperability with generic channel matrices and foreign interfaces.\n\n\n## \u00a7\u27e817\u27e9Low level encoding/decoding API\nImplementations of `ImageEncoder`\u27e818\u27e9 provides low level control over encoding:\n```\nlet encoder = JpegEncoder::new_with_quality(&mut writer, 95);\nimg.write_with_encoder(encoder)?;\n```\n\nWhile `ImageDecoder`\u27e819\u27e9 and `ImageDecoderRect`\u27e820\u27e9 give access to more advanced decoding options:\n```\nlet decoder = PngDecoder::new(&mut reader)?;\nlet icc = decoder.icc_profile();\nlet img = DynamicImage::from_decoder(decoder)?;\n```\n\n## Re-exports\u00a7\u27e821\u27e9\n\n`pub use crate::error::ImageError[](https://docs.rs/image/latest/image/error/enum.ImageError.html \"enum image::error::ImageError\");`\n\n\n`pub use crate::error::ImageResult[](https://docs.rs/image/latest/image/error/type.ImageResult.html \"type image::error::ImageResult\");`\n\n\n`pub use crate::flat::FlatSamples[](https://docs.rs/image/latest/image/flat/struct.FlatSamples.html \"struct image::flat::FlatSamples\");`\n\n## Modules\u00a7\u27e822\u27e9\n\nbuffer\u27e823\u27e9\n    Iterators and other auxiliary structure for the `ImageBuffer` type.\n\ncodecs\u27e824\u27e9\n    Encoding and decoding for various image file formats.\n\nerror\u27e825\u27e9\n    Contains detailed error representation.\n\nflat\u27e816\u27e9\n    Image representations for ffi.\n\nimageops\u27e826\u27e9\n    Image Processing Functions\n\nio\u27e827\u27e9\n    deprecated io module the original io module has been renamed to `image_reader`\n\nmath\u27e828\u27e9\n    Mathematical helper functions and types.\n\nmetadata\u27e829\u27e9\n    Types describing image metadata\n## Structs\u00a7\u27e830\u27e9\n\nDelay\u27e831\u27e9\n    The delay of a frame relative to the previous one.\n\nFrame\u27e832\u27e9\n    A single animation frame\n\nFrames\u27e833\u27e9\n    An implementation dependent iterator, reading the frames as requested\n\nImageBuffer\u27e812\u27e9\n    Generic image buffer\n\nImageReader\u27e87\u27e9\n    A multi-format image reader.\n\nLimitSupport\u27e834\u27e9\n    Set of supported strict limits for a decoder.\n\nLimits\u27e835\u27e9\n    Resource limits for decoding.\n\nLuma\u27e836\u27e9\n    Grayscale colors.\n\nLumaA\u27e837\u27e9\n    Grayscale colors + alpha channel\n\nPixels\u27e838\u27e9\n    Immutable pixel iterator\n\nRgb\u27e839\u27e9\n    RGB colors.\n\nRgba\u27e840\u27e9\n    RGB colors + alpha channel\n\nSubImage\u27e841\u27e9\n    A View into another image\n## Enums\u00a7\u27e842\u27e9\n\nColorType\u27e843\u27e9\n    An enumeration over supported color types and bit depths\n\nDynamicImage\u27e813\u27e9\n    A Dynamic Image\n\nExtendedColorType\u27e844\u27e9\n    An enumeration of color types encountered in image formats.\n\nImageFormat\u27e845\u27e9\n    An enumeration of supported image formats. Not all formats support both encoding and decoding.\n## Traits\u00a7\u27e846\u27e9\n\nAnimationDecoder\u27e847\u27e9\n    `AnimationDecoder` trait\n\nEncodableLayout\u27e848\u27e9\n    Types which are safe to treat as an immutable byte slice in a pixel layout for image encoding.\n\nGenericImage\u27e814\u27e9\n    A trait for manipulating images.\n\nGenericImageView\u27e815\u27e9\n    Trait to inspect an image.\n\nImageDecoder\u27e819\u27e9\n    The trait that all decoders implement\n\nImageDecoderRect\u27e820\u27e9\n    Specialized image decoding not be supported by all formats\n\nImageEncoder\u27e818\u27e9\n    The trait all encoders implement\n\nPixel\u27e849\u27e9\n    A generalized pixel.\n\nPixelWithColorType\u27e850\u27e9\n    The pixel with an associated `ColorType`. Not all possible pixels represent one of the predefined `ColorType`s.\n\nPrimitive\u27e851\u27e9\n    The type of each channel in a pixel. For example, this can be `u8`, `u16`, `f32`.\n## Functions\u00a7\u27e852\u27e9\n\nguess_format\u27e853\u27e9\n    Guess image format from memory block\n\nimage_dimensions\u27e854\u27e9\n    Read a tuple containing the (width, height) of the image located at the specified path. This is faster than fully loading the image and then getting its dimensions.\n\nload\u27e855\u27e9\n    Create a new image from a Reader.\n\nload_from_memory\u27e856\u27e9\n    Create a new image from a byte slice\n\nload_from_memory_with_format\u27e857\u27e9\n    Create a new image from a byte slice\n\nopen\u27e858\u27e9\n    Open the image located at the path specified. The image\u2019s format is determined from the path\u2019s file extension.\n\nsave_buffer\u27e859\u27e9\n    Saves the supplied buffer to a file at the path specified.\n\nsave_buffer_with_format\u27e860\u27e9\n    Saves the supplied buffer to a file at the path specified in the specified format.\n\nwrite_buffer_with_format\u27e861\u27e9\n    Writes the supplied buffer to a writer in the specified format.\n## Type Aliases\u00a7\u27e862\u27e9\n\nGrayAlphaImage\u27e863\u27e9\n    Sendable grayscale + alpha channel image buffer\n\nGrayImage\u27e864\u27e9\n    Sendable grayscale image buffer\n\nRgb32FImage\u27e865\u27e9\n    An image buffer for 32-bit float RGB pixels, where the backing container is a flattened vector of floats.\n\nRgbImage\u27e866\u27e9\n    Sendable Rgb image buffer\n\nRgba32FImage\u27e867\u27e9\n    An image buffer for 32-bit float RGBA pixels, where the backing container is a flattened vector of floats.\n\nRgbaImage\u27e868\u27e9\n    Sendable Rgb + alpha channel image buffer\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/image/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/image/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/image/latest/src/image/lib.rs.html#1-336: Source\n\u27e84\u27e9 https://docs.rs/image/latest/image/#overview: \u00a7\n\u27e85\u27e9 https://github.com/image-rs/image/blob/main/README.md: README.md file which is most easily viewed on github\n\u27e86\u27e9 https://docs.rs/image/latest/image/#high-level-api: \u00a7\n\u27e87\u27e9 https://docs.rs/image/latest/image/struct.ImageReader.html: struct image::ImageReader - `ImageReader`\n\u27e88\u27e9 https://docs.rs/image/latest/image/enum.DynamicImage.html#method.save: `save`\n\u27e89\u27e9 https://docs.rs/image/latest/image/enum.DynamicImage.html#method.write_to: `write_to`\n\u27e810\u27e9 https://docs.rs/image/latest/image/codecs/index.html#supported-formats: many common image formats\n\u27e811\u27e9 https://docs.rs/image/latest/image/#image-buffers: \u00a7\n\u27e812\u27e9 https://docs.rs/image/latest/image/struct.ImageBuffer.html: `ImageBuffer`\n\u27e813\u27e9 https://docs.rs/image/latest/image/enum.DynamicImage.html: `DynamicImage`\n\u27e814\u27e9 https://docs.rs/image/latest/image/trait.GenericImage.html: `GenericImage`\n\u27e815\u27e9 https://docs.rs/image/latest/image/trait.GenericImageView.html: `GenericImageView`\n\u27e816\u27e9 https://docs.rs/image/latest/image/flat/index.html: `flat`\n\u27e817\u27e9 https://docs.rs/image/latest/image/#low-level-encodingdecoding-api: \u00a7\n\u27e818\u27e9 https://docs.rs/image/latest/image/trait.ImageEncoder.html: `ImageEncoder`\n\u27e819\u27e9 https://docs.rs/image/latest/image/trait.ImageDecoder.html: `ImageDecoder`\n\u27e820\u27e9 https://docs.rs/image/latest/image/trait.ImageDecoderRect.html: `ImageDecoderRect`\n\u27e821\u27e9 https://docs.rs/image/latest/image/#reexports: \u00a7\n\u27e822\u27e9 https://docs.rs/image/latest/image/#modules: \u00a7\n\u27e823\u27e9 https://docs.rs/image/latest/image/buffer/index.html: mod image::buffer - buffer\n\u27e824\u27e9 https://docs.rs/image/latest/image/codecs/index.html: mod image::codecs - codecs\n\u27e825\u27e9 https://docs.rs/image/latest/image/error/index.html: mod image::error - error\n\u27e826\u27e9 https://docs.rs/image/latest/image/imageops/index.html: mod image::imageops - imageops\n\u27e827\u27e9 https://docs.rs/image/latest/image/io/index.html: mod image::io - io\n\u27e828\u27e9 https://docs.rs/image/latest/image/math/index.html: mod image::math - math\n\u27e829\u27e9 https://docs.rs/image/latest/image/metadata/index.html: mod image::metadata - metadata\n\u27e830\u27e9 https://docs.rs/image/latest/image/#structs: \u00a7\n\u27e831\u27e9 https://docs.rs/image/latest/image/struct.Delay.html: struct image::Delay - Delay\n\u27e832\u27e9 https://docs.rs/image/latest/image/struct.Frame.html: struct image::Frame - Frame\n\u27e833\u27e9 https://docs.rs/image/latest/image/struct.Frames.html: struct image::Frames - Frames\n\u27e834\u27e9 https://docs.rs/image/latest/image/struct.LimitSupport.html: struct image::LimitSupport - LimitSupport\n\u27e835\u27e9 https://docs.rs/image/latest/image/struct.Limits.html: struct image::Limits - Limits\n\u27e836\u27e9 https://docs.rs/image/latest/image/struct.Luma.html: struct image::Luma - Luma\n\u27e837\u27e9 https://docs.rs/image/latest/image/struct.LumaA.html: struct image::LumaA - LumaA\n\u27e838\u27e9 https://docs.rs/image/latest/image/struct.Pixels.html: struct image::Pixels - Pixels\n\u27e839\u27e9 https://docs.rs/image/latest/image/struct.Rgb.html: struct image::Rgb - Rgb\n\u27e840\u27e9 https://docs.rs/image/latest/image/struct.Rgba.html: struct image::Rgba - Rgba\n\u27e841\u27e9 https://docs.rs/image/latest/image/struct.SubImage.html: struct image::SubImage - SubImage\n\u27e842\u27e9 https://docs.rs/image/latest/image/#enums: \u00a7\n\u27e843\u27e9 https://docs.rs/image/latest/image/enum.ColorType.html: enum image::ColorType - ColorType\n\u27e844\u27e9 https://docs.rs/image/latest/image/enum.ExtendedColorType.html: enum image::ExtendedColorType - ExtendedColorType\n\u27e845\u27e9 https://docs.rs/image/latest/image/enum.ImageFormat.html: enum image::ImageFormat - ImageFormat\n\u27e846\u27e9 https://docs.rs/image/latest/image/#traits: \u00a7\n\u27e847\u27e9 https://docs.rs/image/latest/image/trait.AnimationDecoder.html: trait image::AnimationDecoder - AnimationDecoder\n\u27e848\u27e9 https://docs.rs/image/latest/image/trait.EncodableLayout.html: trait image::EncodableLayout - EncodableLayout\n\u27e849\u27e9 https://docs.rs/image/latest/image/trait.Pixel.html: trait image::Pixel - Pixel\n\u27e850\u27e9 https://docs.rs/image/latest/image/trait.PixelWithColorType.html: trait image::PixelWithColorType - PixelWithColorType\n\u27e851\u27e9 https://docs.rs/image/latest/image/trait.Primitive.html: trait image::Primitive - Primitive\n\u27e852\u27e9 https://docs.rs/image/latest/image/#functions: \u00a7\n\u27e853\u27e9 https://docs.rs/image/latest/image/fn.guess_format.html: fn image::guess_format - guess_format\n\u27e854\u27e9 https://docs.rs/image/latest/image/fn.image_dimensions.html: fn image::image_dimensions - image_dimensions\n\u27e855\u27e9 https://docs.rs/image/latest/image/fn.load.html: fn image::load - load\n\u27e856\u27e9 https://docs.rs/image/latest/image/fn.load_from_memory.html: fn image::load_from_memory - load_from_memory\n\u27e857\u27e9 https://docs.rs/image/latest/image/fn.load_from_memory_with_format.html: fn image::load_from_memory_with_format - load_from_memory_with_format\n\u27e858\u27e9 https://docs.rs/image/latest/image/fn.open.html: fn image::open - open\n\u27e859\u27e9 https://docs.rs/image/latest/image/fn.save_buffer.html: fn image::save_buffer - save_buffer\n\u27e860\u27e9 https://docs.rs/image/latest/image/fn.save_buffer_with_format.html: fn image::save_buffer_with_format - save_buffer_with_format\n\u27e861\u27e9 https://docs.rs/image/latest/image/fn.write_buffer_with_format.html: fn image::write_buffer_with_format - write_buffer_with_format\n\u27e862\u27e9 https://docs.rs/image/latest/image/#types: \u00a7\n\u27e863\u27e9 https://docs.rs/image/latest/image/type.GrayAlphaImage.html: type image::GrayAlphaImage - GrayAlphaImage\n\u27e864\u27e9 https://docs.rs/image/latest/image/type.GrayImage.html: type image::GrayImage - GrayImage\n\u27e865\u27e9 https://docs.rs/image/latest/image/type.Rgb32FImage.html: type image::Rgb32FImage - Rgb32FImage\n\u27e866\u27e9 https://docs.rs/image/latest/image/type.RgbImage.html: type image::RgbImage - RgbImage\n\u27e867\u27e9 https://docs.rs/image/latest/image/type.Rgba32FImage.html: type image::Rgba32FImage - Rgba32FImage\n\u27e868\u27e9 https://docs.rs/image/latest/image/type.RgbaImage.html: type image::RgbaImage - RgbaImage\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `image` crate provides native Rust implementations for image encoding, decoding, and basic manipulation. It supports a wide range of common image formats, offers high-level APIs for loading and saving images, and includes flexible image buffer types like `ImageBuffer` and `DynamicImage`. Additionally, it provides low-level control through traits like `ImageEncoder` and `ImageDecoder` for advanced use cases.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Image Encoding and Decoding\n\u2705 **Factual:** The `image` crate supports encoding and decoding for many common image formats, including PNG, JPEG, BMP, GIF, and TIFF, with safe and native Rust implementations.  \n\u274c **Counterfactual:** The `image` crate supports encoding and decoding for all image formats, including proprietary formats like PSD and RAW, without relying on external libraries.\n\n---\n\n### Pair 2: Image Buffer Types\n\u2705 **Factual:** The `image` crate provides two main types for storing images: `ImageBuffer` for statically typed image contents and `DynamicImage` for an enum-based representation of supported formats.  \n\u274c **Counterfactual:** The `image` crate only supports `DynamicImage` for storing images, and does not provide statically typed buffers like `ImageBuffer`.\n\n---\n\n### Pair 3: High-Level API for Image Manipulation\n\u2705 **Factual:** The `image` crate's high-level API allows users to load images using `ImageReader` and save them using methods like `save` or `write_to`.  \n\u274c **Counterfactual:** The `image` crate requires users to manually implement image loading and saving functionality, as it does not provide built-in methods like `ImageReader` or `save`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}