{
    "name": "viz",
    "version": "0.10.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/viz/latest/viz/all.html \"show sidebar\")\n# Crate vizCopy item path\n[Settings](https://docs.rs/viz/latest/settings.html)\n[Help](https://docs.rs/viz/latest/help.html)\nSummary[Source](https://docs.rs/viz/latest/src/viz/lib.rs.html#1-548)\nExpand description\nViz\nFast, robust, flexible, lightweight web framework for Rust.\n## [\u00a7](https://docs.rs/viz/latest/viz/#features)Features\n  * **Safety** `#![forbid(unsafe_code)]`\n  * Lightweight\n  * Simple + Flexible [`Handler`](https://docs.rs/viz/latest/viz/#handler) & [`Middleware`](https://docs.rs/viz/latest/viz/#middleware)\n  * Handy [`Extractors`](https://docs.rs/viz/latest/viz/#extractors)\n  * Robust [`Routing`](https://docs.rs/viz/latest/viz/#routing)\n  * Supports Tower [`Service`](https://docs.rs/tower-service/latest/tower_service/trait.Service.html)\n\n\n## [\u00a7](https://docs.rs/viz/latest/viz/#hello-viz)Hello Viz\n```\nuse std::net::SocketAddr;\nuse tokio::net::TcpListener;\nuse viz::{serve, Request, Result, Router};\nasync fn index(_: Request) -> Result<&'static str> {\n  Ok(\"Hello, Viz!\")\n}\n#[tokio::main]\nasync fn main() -> Result<()> {\n  let addr = SocketAddr::from(([127, 0, 0, 1], 3000));\n  let listener = TcpListener::bind(addr).await?;\n  println!(\"listening on http://{addr}\");\n  let app = Router::new().get(\"/\", index);\n  if let Err(e) = serve(listener, app).await {\n    println!(\"{e}\");\n  }\n  Ok(())\n}\n```\n\nMore examples can be found [here](https://github.com/viz-rs/viz/tree/main/examples).\n## [\u00a7](https://docs.rs/viz/latest/viz/#handler)Handler\nA simple pattern `async fn(Request) -> Result<Response>` is used to handle requests in Viz.\n### [\u00a7](https://docs.rs/viz/latest/viz/#simple-handlers)Simple handlers\n```\nasync fn index(_: Request) -> Result<Response> {\n  Ok(Response::text(\"Hello, World!\"))\n}\nasync fn about(_: Request) -> Result<&'static str> {\n  Ok(\"About Me!\")\n}\nasync fn not_found(_: Request) -> Result<impl IntoResponse> {\n  Ok(\"Not Found!\")\n}\n```\n\n### [\u00a7](https://docs.rs/viz/latest/viz/#implemented-handler-trait)Implemented Handler trait\nThe types can implement the [`Handler`](https://docs.rs/viz/latest/viz/trait.Handler.html \"trait viz::Handler\") trait to customize handlers.\n```\n#[derive(Clone)]\nstruct MyHandler {\n  code: Arc<AtomicUsize>,\n}\n#[async_trait]\nimpl Handler<Request> for MyHandler {\n  type Output = Result<Response>;\n  async fn call(&self, req: Request) -> Self::Output {\n    let path = req.path();\n    let method = req.method().clone();\n    let code = self.code.fetch_add(1, Ordering::SeqCst);\n    Ok(format!(\"code = {}, method = {}, path = {}\", code, method, path).into_response())\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/viz/latest/viz/#with-extractors)With extractors\nSupports handler with `zero` or `one` or `more` extractors.\nExtractors must implement the [`FromRequest`](https://docs.rs/viz/latest/viz/trait.FromRequest.html \"trait viz::FromRequest\") trait for extracting data from the [`Request`](https://docs.rs/viz/latest/viz/type.Request.html \"type viz::Request\").\nWhen joining the routing system, it should first be converted to a handler using [`into_handler`](https://docs.rs/viz/latest/viz/trait.IntoHandler.html#tymethod.into_handler \"method viz::IntoHandler::into_handler\").\n```\nasync fn show_todo(Params(id): Params<u64>) -> Result<impl IntoResponse> {\n  Ok(format!(\"Hi, NO.{}\", id))\n}\nlet app = Router::new().route(\"/:id\", get(show_todo.into_handler()));\n```\n\n#### [\u00a7](https://docs.rs/viz/latest/viz/#why-not-supports-handler-with-extractors-by-default)Why not supports handler with extractors by default?\nViz allows more flexibility in organizing your code.\n```\nasync fn show_user(mut req: Request) -> Result<Response> {\n  let Params(id) = req.extract::<Params<u64>>().await?;\n  Ok(format!(\"post {}\", id).into_response())\n}\nasync fn show_user_ext(Params(id): Params<u64>) -> Result<impl IntoResponse> {\n  Ok(format!(\"Hi, NO.{}\", id))\n}\nasync fn show_user_wrap(req: Request) -> Result<impl IntoResponse> {\n  // https://github.com/rust-lang/rust/issues/48919\n  // show_user_ext.call(req).await\n  FnExt::call(&show_user_ext, req).await\n}\nlet app = Router::new()\n  .get(\"/users/:id\", show_user)\n  .get(\"/users_wrap/:id\", show_user_wrap)\n  .get(\"/users_ext/:id\", show_user_ext.into_handler());\n```\n\n#### [\u00a7](https://docs.rs/viz/latest/viz/#support-process-macros)Support process macros?\nSupport, you can enable the `macros` feature, using `#[handler]`.\nBut it\u2019s still recommended to use `into_handler` for conversion.\n[\u24d8](https://docs.rs/viz/latest/viz/ \"This example is not tested\")```\n\n#[handler]\nasync fn show_user(Params(id): Params<u64>) -> Result<impl IntoResponse> {\n  Ok(format!(\"Hi, NO.{}\", id))\n}\nasync fn update_user(Params(id): Params<u64>) -> Result<impl IntoResponse> {\n  Ok(format!(\"Updated, NO.{}\", id))\n}\nlet app = Router::new()\n  .get(\"/users/:id\", show_user)\n  .patch(\"/users/:id\", update_user.into_handler());\n```\n\n### [\u00a7](https://docs.rs/viz/latest/viz/#chaining-and-composing-handlers)Chaining and composing handlers\nThe [`HandlerExt`](https://docs.rs/viz/latest/viz/trait.HandlerExt.html \"trait viz::HandlerExt\") is an extension trait for [Handler](https://docs.rs/viz/latest/viz/trait.Handler.html \"trait viz::Handler\")s that provides a variety of convenient combinator functions.\nLikes the [`FutureExt`](https://docs.rs/futures/latest/futures/future/trait.FutureExt.html) and [`StreamExt`](https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html) traits.\n```\nasync fn index(_: Request) -> Result<Response> {\n  Ok(Response::text(\"hyper\"))\n}\nasync fn before(req: Request) -> Result<Request> {\n  if req.method() == Method::POST {\n    Ok(req)\n  } else {\n    Err(StatusCode::METHOD_NOT_ALLOWED.into_error())\n  }\n}\nasync fn around<H>((req, handler): Next<Request, H>) -> Result<Response>\nwhere\n  H: Handler<Request, Output = Result<Response>>,\n{\n  // before ...\n  let result = handler.call(req).await;\n  // after ...\n  result\n}\nasync fn after(result: Result<Response>) -> Result<Response> {\n  result.map(|mut res| {\n    *res.status_mut() = StatusCode::NO_CONTENT;\n    res\n  })\n}\nlet routing = Router::new()\n  .get(\"/\", index.before(before).around(around).after(after));\n```\n\n## [\u00a7](https://docs.rs/viz/latest/viz/#middleware)Middleware\nViz\u2019s middleware and handlers share a common [`Handler`](https://docs.rs/viz/latest/viz/trait.Handler.html \"trait viz::Handler\") trait, so its very easy to implement and extend the middleware.\nWe can add middleware to a single handler, or to all handlers.\nWe can also use [`Transform`](https://docs.rs/viz/latest/viz/trait.Transform.html \"trait viz::Transform\") trait for wrapping the inner handler during construction.\n```\nasync fn index(_: Request) -> Result<Response> {\n  Ok(StatusCode::OK.into_response())\n}\nasync fn not_found(_: Request) -> Result<impl IntoResponse> {\n  Ok(StatusCode::OK)\n}\nasync fn show_user(Params(id): Params<u64>) -> Result<impl IntoResponse> {\n  Ok(format!(\"post {}\", id))\n}\n// middleware fn\nasync fn around<H>((req, handler): Next<Request, H>) -> Result<Response>\nwhere\n  H: Handler<Request, Output = Result<Response>>,\n{\n  // before ...\n  let result = handler.call(req).await;\n  // after ...\n  result\n}\n// middleware struct\n#[derive(Clone)]\nstruct MyMiddleware {}\n#[async_trait]\nimpl<H> Handler<Next<Request, H>> for MyMiddleware\nwhere\n  H: Handler<Request>,\n{\n  type Output = H::Output;\n  async fn call(&self, (i, h): Next<Request, H>) -> Self::Output {\n    h.call(i).await\n  }\n}\n// A configuration for Timeout Middleware\nstruct Timeout {\n  delay: Duration,\n}\nimpl Timeout {\n  pub fn new(secs: u64) -> Self {\n    Self { delay: Duration::from_secs(secs) }\n  }\n}\nimpl<H: Clone> Transform<H> for Timeout {\n  type Output = TimeoutMiddleware<H>;\n  fn transform(&self, h: H) -> Self::Output {\n    TimeoutMiddleware(h, self.delay)\n  }\n}\n// Timeout Middleware\n#[derive(Clone)]\nstruct TimeoutMiddleware<H>(H, Duration);\n#[async_trait]\nimpl<H> Handler<Request> for TimeoutMiddleware<H>\nwhere\n  H: Handler<Request>,\n{\n  type Output = H::Output;\n  async fn call(&self, req: Request) -> Self::Output {\n    self.0.call(req).await\n  }\n}\nlet app = Router::new()\n  .get(\"/\", index\n    // handler level\n    .around(around)\n    .around(MyMiddleware {})\n    .with(Timeout::new(1))\n  )\n  .route(\"/users/:id\", get(\n    show_user\n      .into_handler()\n      .map_into_response()\n      // handler level\n      .around(around)\n      .with(Timeout::new(0))\n    )\n    .post(\n      (|_| async { Ok(Response::text(\"update\")) })\n      // handler level\n      .around(around)\n      .with(Timeout::new(0))\n    )\n    // route level\n    .with_handler(MyMiddleware {})\n    .with(Timeout::new(2))\n  )\n  .get(\"/*\", not_found\n    .map_into_response()\n    // handler level\n    .around(around)\n    .around(MyMiddleware {})\n  )\n  // router level\n  .with_handler(around)\n  .with_handler(MyMiddleware {})\n  .with(Timeout::new(4));\n```\n\n## [\u00a7](https://docs.rs/viz/latest/viz/#extractors)Extractors\nExtracts data from the [`Request`](https://docs.rs/viz/latest/viz/type.Request.html \"type viz::Request\").\n```\nstruct Counter(u16);\nimpl FromRequest for Counter {\n  type Error = Infallible;\n  async fn extract(req: &mut Request) -> Result<Self, Self::Error> {\n    let c = get_query_param(req.query_string());\n    Ok(Counter(c))\n  }\n}\nfn get_query_param(query: Option<&str>) -> u16 {\n  let query = query.unwrap_or(\"\");\n  let q = if let Some(pos) = query.find('q') {\n    query.split_at(pos + 2).1.parse().unwrap_or(1)\n  } else {\n    1\n  };\n  cmp::min(500, cmp::max(1, q))\n}\n```\n\n## [\u00a7](https://docs.rs/viz/latest/viz/#routing)Routing\nThe Viz router recognizes URLs and dispatches them to a handler.\n### [\u00a7](https://docs.rs/viz/latest/viz/#simple-routes)Simple routes\n```\nasync fn index(_: Request) -> Result<Response> {\n  Ok(().into_response())\n}\nlet root = Router::new()\n .get(\"/\", index)\n .route(\"/about\", get(|_| async { Ok(\"about\") }));\nlet search = Router::new()\n .route(\"/\", Route::new().get(|_| async { Ok(\"search\") }));\n```\n\n### [\u00a7](https://docs.rs/viz/latest/viz/#crud-verbs)CRUD, Verbs\nAdds routes with the HTTP method.\n```\nasync fn index_todos(_: Request) -> Result<impl IntoResponse> {\n  Ok(())\n}\nasync fn create_todo(_: Request) -> Result<&'static str> {\n  Ok(\"created\")\n}\nasync fn new_todo(_: Request) -> Result<Response> {\n  Ok(Response::html(r#\"\n    <form method=\"post\" action=\"/\">\n      <input name=\"todo\" />\n      <button type=\"submit\">Create</button>\n    </form>\n  \"#))\n}\nasync fn show_todo(mut req: Request) -> Result<Response> {\n  let Params(id): Params<u64> = req.extract().await?;\n  Ok(Response::text(format!(\"todo's id is {}\", id)))\n}\nasync fn update_todo(_: Request) -> Result<()> {\n  Ok(())\n}\nasync fn destroy_todo(_: Request) -> Result<()> {\n  Ok(())\n}\nasync fn edit_todo(_: Request) -> Result<()> {\n  Ok(())\n}\nlet todos = Router::new()\n .route(\"/\", get(index_todos).post(create_todo))\n .post(\"/new\", new_todo)\n .route(\"/:id\", get(show_todo).patch(update_todo).delete(destroy_todo))\n .get(\"/:id/edit\", edit_todo);\n```\n\n### [\u00a7](https://docs.rs/viz/latest/viz/#resources)Resources\n```\n// GET `/search`\nasync fn search_users(_: Request) -> Result<Response> {\n  Ok(Response::json::<Vec<u64>>(vec![])?)\n}\n// GET `/`\nasync fn index_users(_: Request) -> Result<Response> {\n  Ok(Response::json::<Vec<u64>>(vec![])?)\n}\n// GET `/new`\nasync fn new_user(_: Request) -> Result<&'static str> {\n  Ok(\"User Form\")\n}\n// POST `/`\nasync fn create_user(_: Request) -> Result<&'static str> {\n  Ok(\"Created User\")\n}\n// GET `/user_id`\nasync fn show_user(_: Request) -> Result<&'static str> {\n  Ok(\"User ID 007\")\n}\n// GET `/user_id/edit`\nasync fn edit_user(_: Request) -> Result<&'static str> {\n  Ok(\"Edit User Form\")\n}\n// PUT `/user_id`\nasync fn update_user(_: Request) -> Result<&'static str> {\n  Ok(\"Updated User\")\n}\n// DELETE `/user_id`\nasync fn delete_user(_: Request) -> Result<&'static str> {\n  Ok(\"Deleted User\")\n}\nlet users = Resources::default()\n .named(\"user\")\n .route(\"/search\", get(search_users))\n .index(index_users)\n .new(new_user)\n .create(create_user)\n .show(show_user)\n .edit(edit_user)\n .update(update_user)\n .destroy(delete_user);\n```\n\n### [\u00a7](https://docs.rs/viz/latest/viz/#nested)Nested\n[\u24d8](https://docs.rs/viz/latest/viz/ \"This example is not tested\")```\nasync fn not_found(_: Request) -> Result<impl IntoResponse> {\n  Ok(StatusCode::NOT_FOUND)\n}\nlet app = Router::new()\n .nest(\"/\", root)\n .nest(\"/search\", search)\n .nest(\"/todos\", todos.clone())\n .nest(\"/users\", users.nest(\"todos\", todos))\n .route(\"/*\", any(not_found));\n```\n\n## Modules[\u00a7](https://docs.rs/viz/latest/viz/#modules)\n\n[future](https://docs.rs/viz/latest/viz/future/index.html \"mod viz::future\")\n    Asynchronous values.\n\n[handler](https://docs.rs/viz/latest/viz/handler/index.html \"mod viz::handler\")\n    Traits and types for handling an HTTP.\n\n[handlers](https://docs.rs/viz/latest/viz/handlers/index.html \"mod viz::handlers\")`handlers`\n    A collection of handlers for Viz.\n\n[header](https://docs.rs/viz/latest/viz/header/index.html \"mod viz::header\")\n    HTTP header types\n\n[headers](https://docs.rs/viz/latest/viz/headers/index.html \"mod viz::headers\")\n    Typed HTTP Headers\n\n[middleware](https://docs.rs/viz/latest/viz/middleware/index.html \"mod viz::middleware\")\n    Built-in Middleware.\n\n[tls](https://docs.rs/viz/latest/viz/tls/index.html \"mod viz::tls\")`native-tls` or `rustls`\n    TLS A TLS listener wrapper.\n\n[types](https://docs.rs/viz/latest/viz/types/index.html \"mod viz::types\")\n    Built-in Extractors types and traits.\n## Structs[\u00a7](https://docs.rs/viz/latest/viz/#structs)\n\n[BoxHandler](https://docs.rs/viz/latest/viz/struct.BoxHandler.html \"struct viz::BoxHandler\")\n    A [`Clone`](https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html \"trait core::clone::Clone\") + [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") boxed [`Handler`](https://docs.rs/viz/latest/viz/trait.Handler.html \"trait viz::Handler\").\n\n[Bytes](https://docs.rs/viz/latest/viz/struct.Bytes.html \"struct viz::Bytes\")\n    A cheaply cloneable and sliceable chunk of contiguous memory.\n\n[BytesMut](https://docs.rs/viz/latest/viz/struct.BytesMut.html \"struct viz::BytesMut\")\n    A unique reference to a contiguous slice of memory.\n\n[Incoming](https://docs.rs/viz/latest/viz/struct.Incoming.html \"struct viz::Incoming\")\n    A stream of `Bytes`, used when receiving bodies from the network.\n\n[Io](https://docs.rs/viz/latest/viz/struct.Io.html \"struct viz::Io\")\n    A wrapper that implements Tokio\u2019s IO traits for an inner type that implements hyper\u2019s IO traits, or vice versa (implements hyper\u2019s IO traits for a type that implements Tokio\u2019s IO traits).\n\n[Method](https://docs.rs/viz/latest/viz/struct.Method.html \"struct viz::Method\")\n    The Request Method (VERB)\n\n[Path](https://docs.rs/viz/latest/viz/struct.Path.html \"struct viz::Path\")\n    Matched route path infomation.\n\n[PathTree](https://docs.rs/viz/latest/viz/struct.PathTree.html \"struct viz::PathTree\")\n    A path tree.\n\n[Resources](https://docs.rs/viz/latest/viz/struct.Resources.html \"struct viz::Resources\")\n    A resourceful route provides a mapping between HTTP verbs and URLs to handlers.\n\n[Responder](https://docs.rs/viz/latest/viz/struct.Responder.html \"struct viz::Responder\")\n    Handles the HTTP [`Request`](https://docs.rs/viz/latest/viz/type.Request.html \"type viz::Request\") and retures the HTTP [`Response`](https://docs.rs/viz/latest/viz/type.Response.html \"type viz::Response\").\n\n[Route](https://docs.rs/viz/latest/viz/struct.Route.html \"struct viz::Route\")\n    A collection of verb-handler pair.\n\n[Router](https://docs.rs/viz/latest/viz/struct.Router.html \"struct viz::Router\")\n    A routes collection.\n\n[Server](https://docs.rs/viz/latest/viz/struct.Server.html \"struct viz::Server\")\n    A listening HTTP server that accepts connections.\n\n[StatusCode](https://docs.rs/viz/latest/viz/struct.StatusCode.html \"struct viz::StatusCode\")\n    An HTTP status code (`status-code` in RFC 9110 et al.).\n\n[Tree](https://docs.rs/viz/latest/viz/struct.Tree.html \"struct viz::Tree\")\n    Store all final routes.\n## Enums[\u00a7](https://docs.rs/viz/latest/viz/#enums)\n\n[Body](https://docs.rs/viz/latest/viz/enum.Body.html \"enum viz::Body\")\n    A body for HTTP [`Request`](https://docs.rs/viz/latest/viz/type.Request.html \"type viz::Request\") and HTTP [`Response`](https://docs.rs/viz/latest/viz/type.Response.html \"type viz::Response\").\n\n[BodyState](https://docs.rs/viz/latest/viz/enum.BodyState.html \"enum viz::BodyState\")\n    A body state.\n\n[Error](https://docs.rs/viz/latest/viz/enum.Error.html \"enum viz::Error\")\n    Represents errors that can occur handling application.\n## Traits[\u00a7](https://docs.rs/viz/latest/viz/#traits)\n\n[FnExt](https://docs.rs/viz/latest/viz/trait.FnExt.html \"trait viz::FnExt\")\n    A handler with extractors.\n\n[FromRequest](https://docs.rs/viz/latest/viz/trait.FromRequest.html \"trait viz::FromRequest\")\n    An interface for extracting data from the HTTP [`Request`](https://docs.rs/viz/latest/viz/type.Request.html \"type viz::Request\").\n\n[Future](https://docs.rs/viz/latest/viz/trait.Future.html \"trait viz::Future\")\n    A future represents an asynchronous computation obtained by use of [`async`](https://docs.rs/viz/std/keyword.async.html).\n\n[Handler](https://docs.rs/viz/latest/viz/trait.Handler.html \"trait viz::Handler\")\n    A simplified asynchronous interface for handling input and output.\n\n[HandlerExt](https://docs.rs/viz/latest/viz/trait.HandlerExt.html \"trait viz::HandlerExt\")\n    The [`HandlerExt`](https://docs.rs/viz/latest/viz/trait.HandlerExt.html \"trait viz::HandlerExt\") trait, which provides adapters for chaining and composing handlers.\n\n[HttpBody](https://docs.rs/viz/latest/viz/trait.HttpBody.html \"trait viz::HttpBody\")\n    Trait representing a streaming body of a Request or Response.\n\n[IntoHandler](https://docs.rs/viz/latest/viz/trait.IntoHandler.html \"trait viz::IntoHandler\")\n    The trait implemented by types that can be converted to a [`Handler`](https://docs.rs/viz/latest/viz/trait.Handler.html \"trait viz::Handler\").\n\n[IntoResponse](https://docs.rs/viz/latest/viz/trait.IntoResponse.html \"trait viz::IntoResponse\")\n    Trait implemented by types that can be converted to an HTTP [`Response`](https://docs.rs/viz/latest/viz/type.Response.html \"type viz::Response\").\n\n[Listener](https://docs.rs/viz/latest/viz/trait.Listener.html \"trait viz::Listener\")\n    A trait for a listener: `TcpListener` and `UnixListener`.\n\n[RequestExt](https://docs.rs/viz/latest/viz/trait.RequestExt.html \"trait viz::RequestExt\")\n    The [`Request`](https://docs.rs/viz/latest/viz/type.Request.html \"type viz::Request\") Extension.\n\n[RequestLimitsExt](https://docs.rs/viz/latest/viz/trait.RequestLimitsExt.html \"trait viz::RequestLimitsExt\")\n    The [`Request`](https://docs.rs/viz/latest/viz/type.Request.html \"type viz::Request\") Extension with a limited body.\n\n[ResponseExt](https://docs.rs/viz/latest/viz/trait.ResponseExt.html \"trait viz::ResponseExt\")\n    The [`Response`](https://docs.rs/viz/latest/viz/type.Response.html \"type viz::Response\") Extension.\n\n[Transform](https://docs.rs/viz/latest/viz/trait.Transform.html \"trait viz::Transform\")\n    Then `Transform` trait defines the interface of a handler factory that wraps inner handler to a Handler during construction.\n## Functions[\u00a7](https://docs.rs/viz/latest/viz/#functions)\n\n[any](https://docs.rs/viz/latest/viz/fn.any.html \"fn viz::any\")\n    Creates a route with a handler and any HTTP verbs.\n\n[connect](https://docs.rs/viz/latest/viz/fn.connect.html \"fn viz::connect\")\n    Creates a route with a handler and HTTP `CONNECT` verb pair.\n\n[delete](https://docs.rs/viz/latest/viz/fn.delete.html \"fn viz::delete\")\n    Creates a route with a handler and HTTP `DELETE` verb pair.\n\n[get](https://docs.rs/viz/latest/viz/fn.get.html \"fn viz::get\")\n    Creates a route with a handler and HTTP `GET` verb pair.\n\n[head](https://docs.rs/viz/latest/viz/fn.head.html \"fn viz::head\")\n    Creates a route with a handler and HTTP `HEAD` verb pair.\n\n[on](https://docs.rs/viz/latest/viz/fn.on.html \"fn viz::on\")\n    Creates a route with a handler and HTTP verb pair.\n\n[options](https://docs.rs/viz/latest/viz/fn.options.html \"fn viz::options\")\n    Creates a route with a handler and HTTP `OPTIONS` verb pair.\n\n[patch](https://docs.rs/viz/latest/viz/fn.patch.html \"fn viz::patch\")\n    Creates a route with a handler and HTTP `PATCH` verb pair.\n\n[post](https://docs.rs/viz/latest/viz/fn.post.html \"fn viz::post\")\n    Creates a route with a handler and HTTP `POST` verb pair.\n\n[put](https://docs.rs/viz/latest/viz/fn.put.html \"fn viz::put\")\n    Creates a route with a handler and HTTP `PUT` verb pair.\n\n[serve](https://docs.rs/viz/latest/viz/fn.serve.html \"fn viz::serve\")\n    Starts a server and serves the connections.\n\n[trace](https://docs.rs/viz/latest/viz/fn.trace.html \"fn viz::trace\")\n    Creates a route with a handler and HTTP `TRACE` verb pair.\n## Type Aliases[\u00a7](https://docs.rs/viz/latest/viz/#types)\n\n[BoxError](https://docs.rs/viz/latest/viz/type.BoxError.html \"type viz::BoxError\")\n    An owned dynamically typed [`StdError`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\").\n\n[Next](https://docs.rs/viz/latest/viz/type.Next.html \"type viz::Next\")\n    Represents a middleware parameter, which is a tuple that includes Requset and `BoxHandler`.\n\n[Request](https://docs.rs/viz/latest/viz/type.Request.html \"type viz::Request\")\n    Represents an HTTP Request.\n\n[Response](https://docs.rs/viz/latest/viz/type.Response.html \"type viz::Response\")\n    Represents an HTTP Response.\n\n[Result](https://docs.rs/viz/latest/viz/type.Result.html \"type viz::Result\")\n    Represents either success (Ok) or failure (Err).\n## Attribute Macros[\u00a7](https://docs.rs/viz/latest/viz/#attributes)\n\n[async_trait](https://docs.rs/viz/latest/viz/attr.async_trait.html \"attr viz::async_trait\")\n\n\n[handler](https://docs.rs/viz/latest/viz/attr.handler.html \"attr viz::handler\")`macros`\n    Transforms `extract-handler` to a Handler instance.\n## Derive Macros[\u00a7](https://docs.rs/viz/latest/viz/#derives)\n\n[ThisError](https://docs.rs/viz/latest/viz/derive.ThisError.html \"derive viz::ThisError\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/viz/latest/viz/all.html \"show sidebar\")\n# Crate vizCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nViz\nFast, robust, flexible, lightweight web framework for Rust.\n## \u00a7\u27e84\u27e9Features\n  * **Safety** `#![forbid(unsafe_code)]`\n  * Lightweight\n  * Simple + Flexible `Handler`\u27e85\u27e9 & `Middleware`\u27e86\u27e9\n  * Handy `Extractors`\u27e87\u27e9\n  * Robust `Routing`\u27e88\u27e9\n  * Supports Tower `Service`\u27e89\u27e9\n\n\n## \u00a7\u27e810\u27e9Hello Viz\n```\nuse std::net::SocketAddr;\nuse tokio::net::TcpListener;\nuse viz::{serve, Request, Result, Router};\nasync fn index(_: Request) -> Result<&'static str> {\n  Ok(\"Hello, Viz!\")\n}\n#[tokio::main]\nasync fn main() -> Result<()> {\n  let addr = SocketAddr::from(([127, 0, 0, 1], 3000));\n  let listener = TcpListener::bind(addr).await?;\n  println!(\"listening on http://{addr}\");\n  let app = Router::new().get(\"/\", index);\n  if let Err(e) = serve(listener, app).await {\n    println!(\"{e}\");\n  }\n  Ok(())\n}\n```\n\nMore examples can be found here\u27e811\u27e9.\n## \u00a7\u27e85\u27e9Handler\nA simple pattern `async fn(Request) -> Result<Response>` is used to handle requests in Viz.\n### \u00a7\u27e812\u27e9Simple handlers\n```\nasync fn index(_: Request) -> Result<Response> {\n  Ok(Response::text(\"Hello, World!\"))\n}\nasync fn about(_: Request) -> Result<&'static str> {\n  Ok(\"About Me!\")\n}\nasync fn not_found(_: Request) -> Result<impl IntoResponse> {\n  Ok(\"Not Found!\")\n}\n```\n\n### \u00a7\u27e813\u27e9Implemented Handler trait\nThe types can implement the `Handler`\u27e814\u27e9 trait to customize handlers.\n```\n#[derive(Clone)]\nstruct MyHandler {\n  code: Arc<AtomicUsize>,\n}\n#[async_trait]\nimpl Handler<Request> for MyHandler {\n  type Output = Result<Response>;\n  async fn call(&self, req: Request) -> Self::Output {\n    let path = req.path();\n    let method = req.method().clone();\n    let code = self.code.fetch_add(1, Ordering::SeqCst);\n    Ok(format!(\"code = {}, method = {}, path = {}\", code, method, path).into_response())\n  }\n}\n```\n\n### \u00a7\u27e815\u27e9With extractors\nSupports handler with `zero` or `one` or `more` extractors.\nExtractors must implement the `FromRequest`\u27e816\u27e9 trait for extracting data from the `Request`\u27e817\u27e9.\nWhen joining the routing system, it should first be converted to a handler using `into_handler`\u27e818\u27e9.\n```\nasync fn show_todo(Params(id): Params<u64>) -> Result<impl IntoResponse> {\n  Ok(format!(\"Hi, NO.{}\", id))\n}\nlet app = Router::new().route(\"/:id\", get(show_todo.into_handler()));\n```\n\n#### \u00a7\u27e819\u27e9Why not supports handler with extractors by default?\nViz allows more flexibility in organizing your code.\n```\nasync fn show_user(mut req: Request) -> Result<Response> {\n  let Params(id) = req.extract::<Params<u64>>().await?;\n  Ok(format!(\"post {}\", id).into_response())\n}\nasync fn show_user_ext(Params(id): Params<u64>) -> Result<impl IntoResponse> {\n  Ok(format!(\"Hi, NO.{}\", id))\n}\nasync fn show_user_wrap(req: Request) -> Result<impl IntoResponse> {\n  // https://github.com/rust-lang/rust/issues/48919\n  // show_user_ext.call(req).await\n  FnExt::call(&show_user_ext, req).await\n}\nlet app = Router::new()\n  .get(\"/users/:id\", show_user)\n  .get(\"/users_wrap/:id\", show_user_wrap)\n  .get(\"/users_ext/:id\", show_user_ext.into_handler());\n```\n\n#### \u00a7\u27e820\u27e9Support process macros?\nSupport, you can enable the `macros` feature, using `#[handler]`.\nBut it\u2019s still recommended to use `into_handler` for conversion.\n\u24d8\u27e821\u27e9```\n\n#[handler]\nasync fn show_user(Params(id): Params<u64>) -> Result<impl IntoResponse> {\n  Ok(format!(\"Hi, NO.{}\", id))\n}\nasync fn update_user(Params(id): Params<u64>) -> Result<impl IntoResponse> {\n  Ok(format!(\"Updated, NO.{}\", id))\n}\nlet app = Router::new()\n  .get(\"/users/:id\", show_user)\n  .patch(\"/users/:id\", update_user.into_handler());\n```\n\n### \u00a7\u27e822\u27e9Chaining and composing handlers\nThe `HandlerExt`\u27e823\u27e9 is an extension trait for Handler\u27e814\u27e9s that provides a variety of convenient combinator functions.\nLikes the `FutureExt`\u27e824\u27e9 and `StreamExt`\u27e825\u27e9 traits.\n```\nasync fn index(_: Request) -> Result<Response> {\n  Ok(Response::text(\"hyper\"))\n}\nasync fn before(req: Request) -> Result<Request> {\n  if req.method() == Method::POST {\n    Ok(req)\n  } else {\n    Err(StatusCode::METHOD_NOT_ALLOWED.into_error())\n  }\n}\nasync fn around<H>((req, handler): Next<Request, H>) -> Result<Response>\nwhere\n  H: Handler<Request, Output = Result<Response>>,\n{\n  // before ...\n  let result = handler.call(req).await;\n  // after ...\n  result\n}\nasync fn after(result: Result<Response>) -> Result<Response> {\n  result.map(|mut res| {\n    *res.status_mut() = StatusCode::NO_CONTENT;\n    res\n  })\n}\nlet routing = Router::new()\n  .get(\"/\", index.before(before).around(around).after(after));\n```\n\n## \u00a7\u27e86\u27e9Middleware\nViz\u2019s middleware and handlers share a common `Handler`\u27e814\u27e9 trait, so its very easy to implement and extend the middleware.\nWe can add middleware to a single handler, or to all handlers.\nWe can also use `Transform`\u27e826\u27e9 trait for wrapping the inner handler during construction.\n```\nasync fn index(_: Request) -> Result<Response> {\n  Ok(StatusCode::OK.into_response())\n}\nasync fn not_found(_: Request) -> Result<impl IntoResponse> {\n  Ok(StatusCode::OK)\n}\nasync fn show_user(Params(id): Params<u64>) -> Result<impl IntoResponse> {\n  Ok(format!(\"post {}\", id))\n}\n// middleware fn\nasync fn around<H>((req, handler): Next<Request, H>) -> Result<Response>\nwhere\n  H: Handler<Request, Output = Result<Response>>,\n{\n  // before ...\n  let result = handler.call(req).await;\n  // after ...\n  result\n}\n// middleware struct\n#[derive(Clone)]\nstruct MyMiddleware {}\n#[async_trait]\nimpl<H> Handler<Next<Request, H>> for MyMiddleware\nwhere\n  H: Handler<Request>,\n{\n  type Output = H::Output;\n  async fn call(&self, (i, h): Next<Request, H>) -> Self::Output {\n    h.call(i).await\n  }\n}\n// A configuration for Timeout Middleware\nstruct Timeout {\n  delay: Duration,\n}\nimpl Timeout {\n  pub fn new(secs: u64) -> Self {\n    Self { delay: Duration::from_secs(secs) }\n  }\n}\nimpl<H: Clone> Transform<H> for Timeout {\n  type Output = TimeoutMiddleware<H>;\n  fn transform(&self, h: H) -> Self::Output {\n    TimeoutMiddleware(h, self.delay)\n  }\n}\n// Timeout Middleware\n#[derive(Clone)]\nstruct TimeoutMiddleware<H>(H, Duration);\n#[async_trait]\nimpl<H> Handler<Request> for TimeoutMiddleware<H>\nwhere\n  H: Handler<Request>,\n{\n  type Output = H::Output;\n  async fn call(&self, req: Request) -> Self::Output {\n    self.0.call(req).await\n  }\n}\nlet app = Router::new()\n  .get(\"/\", index\n    // handler level\n    .around(around)\n    .around(MyMiddleware {})\n    .with(Timeout::new(1))\n  )\n  .route(\"/users/:id\", get(\n    show_user\n      .into_handler()\n      .map_into_response()\n      // handler level\n      .around(around)\n      .with(Timeout::new(0))\n    )\n    .post(\n      (|_| async { Ok(Response::text(\"update\")) })\n      // handler level\n      .around(around)\n      .with(Timeout::new(0))\n    )\n    // route level\n    .with_handler(MyMiddleware {})\n    .with(Timeout::new(2))\n  )\n  .get(\"/*\", not_found\n    .map_into_response()\n    // handler level\n    .around(around)\n    .around(MyMiddleware {})\n  )\n  // router level\n  .with_handler(around)\n  .with_handler(MyMiddleware {})\n  .with(Timeout::new(4));\n```\n\n## \u00a7\u27e87\u27e9Extractors\nExtracts data from the `Request`\u27e817\u27e9.\n```\nstruct Counter(u16);\nimpl FromRequest for Counter {\n  type Error = Infallible;\n  async fn extract(req: &mut Request) -> Result<Self, Self::Error> {\n    let c = get_query_param(req.query_string());\n    Ok(Counter(c))\n  }\n}\nfn get_query_param(query: Option<&str>) -> u16 {\n  let query = query.unwrap_or(\"\");\n  let q = if let Some(pos) = query.find('q') {\n    query.split_at(pos + 2).1.parse().unwrap_or(1)\n  } else {\n    1\n  };\n  cmp::min(500, cmp::max(1, q))\n}\n```\n\n## \u00a7\u27e88\u27e9Routing\nThe Viz router recognizes URLs and dispatches them to a handler.\n### \u00a7\u27e827\u27e9Simple routes\n```\nasync fn index(_: Request) -> Result<Response> {\n  Ok(().into_response())\n}\nlet root = Router::new()\n .get(\"/\", index)\n .route(\"/about\", get(|_| async { Ok(\"about\") }));\nlet search = Router::new()\n .route(\"/\", Route::new().get(|_| async { Ok(\"search\") }));\n```\n\n### \u00a7\u27e828\u27e9CRUD, Verbs\nAdds routes with the HTTP method.\n```\nasync fn index_todos(_: Request) -> Result<impl IntoResponse> {\n  Ok(())\n}\nasync fn create_todo(_: Request) -> Result<&'static str> {\n  Ok(\"created\")\n}\nasync fn new_todo(_: Request) -> Result<Response> {\n  Ok(Response::html(r#\"\n    <form method=\"post\" action=\"/\">\n      <input name=\"todo\" />\n      <button type=\"submit\">Create</button>\n    </form>\n  \"#))\n}\nasync fn show_todo(mut req: Request) -> Result<Response> {\n  let Params(id): Params<u64> = req.extract().await?;\n  Ok(Response::text(format!(\"todo's id is {}\", id)))\n}\nasync fn update_todo(_: Request) -> Result<()> {\n  Ok(())\n}\nasync fn destroy_todo(_: Request) -> Result<()> {\n  Ok(())\n}\nasync fn edit_todo(_: Request) -> Result<()> {\n  Ok(())\n}\nlet todos = Router::new()\n .route(\"/\", get(index_todos).post(create_todo))\n .post(\"/new\", new_todo)\n .route(\"/:id\", get(show_todo).patch(update_todo).delete(destroy_todo))\n .get(\"/:id/edit\", edit_todo);\n```\n\n### \u00a7\u27e829\u27e9Resources\n```\n// GET `/search`\nasync fn search_users(_: Request) -> Result<Response> {\n  Ok(Response::json::<Vec<u64>>(vec![])?)\n}\n// GET `/`\nasync fn index_users(_: Request) -> Result<Response> {\n  Ok(Response::json::<Vec<u64>>(vec![])?)\n}\n// GET `/new`\nasync fn new_user(_: Request) -> Result<&'static str> {\n  Ok(\"User Form\")\n}\n// POST `/`\nasync fn create_user(_: Request) -> Result<&'static str> {\n  Ok(\"Created User\")\n}\n// GET `/user_id`\nasync fn show_user(_: Request) -> Result<&'static str> {\n  Ok(\"User ID 007\")\n}\n// GET `/user_id/edit`\nasync fn edit_user(_: Request) -> Result<&'static str> {\n  Ok(\"Edit User Form\")\n}\n// PUT `/user_id`\nasync fn update_user(_: Request) -> Result<&'static str> {\n  Ok(\"Updated User\")\n}\n// DELETE `/user_id`\nasync fn delete_user(_: Request) -> Result<&'static str> {\n  Ok(\"Deleted User\")\n}\nlet users = Resources::default()\n .named(\"user\")\n .route(\"/search\", get(search_users))\n .index(index_users)\n .new(new_user)\n .create(create_user)\n .show(show_user)\n .edit(edit_user)\n .update(update_user)\n .destroy(delete_user);\n```\n\n### \u00a7\u27e830\u27e9Nested\n\u24d8\u27e821\u27e9```\nasync fn not_found(_: Request) -> Result<impl IntoResponse> {\n  Ok(StatusCode::NOT_FOUND)\n}\nlet app = Router::new()\n .nest(\"/\", root)\n .nest(\"/search\", search)\n .nest(\"/todos\", todos.clone())\n .nest(\"/users\", users.nest(\"todos\", todos))\n .route(\"/*\", any(not_found));\n```\n\n## Modules\u00a7\u27e831\u27e9\n\nfuture\u27e832\u27e9\n    Asynchronous values.\n\nhandler\u27e833\u27e9\n    Traits and types for handling an HTTP.\n\nhandlers\u27e834\u27e9`handlers`\n    A collection of handlers for Viz.\n\nheader\u27e835\u27e9\n    HTTP header types\n\nheaders\u27e836\u27e9\n    Typed HTTP Headers\n\nmiddleware\u27e837\u27e9\n    Built-in Middleware.\n\ntls\u27e838\u27e9`native-tls` or `rustls`\n    TLS A TLS listener wrapper.\n\ntypes\u27e839\u27e9\n    Built-in Extractors types and traits.\n## Structs\u00a7\u27e840\u27e9\n\nBoxHandler\u27e841\u27e9\n    A `Clone`\u27e842\u27e9 + `Send`\u27e843\u27e9 boxed `Handler`\u27e814\u27e9.\n\nBytes\u27e844\u27e9\n    A cheaply cloneable and sliceable chunk of contiguous memory.\n\nBytesMut\u27e845\u27e9\n    A unique reference to a contiguous slice of memory.\n\nIncoming\u27e846\u27e9\n    A stream of `Bytes`, used when receiving bodies from the network.\n\nIo\u27e847\u27e9\n    A wrapper that implements Tokio\u2019s IO traits for an inner type that implements hyper\u2019s IO traits, or vice versa (implements hyper\u2019s IO traits for a type that implements Tokio\u2019s IO traits).\n\nMethod\u27e848\u27e9\n    The Request Method (VERB)\n\nPath\u27e849\u27e9\n    Matched route path infomation.\n\nPathTree\u27e850\u27e9\n    A path tree.\n\nResources\u27e851\u27e9\n    A resourceful route provides a mapping between HTTP verbs and URLs to handlers.\n\nResponder\u27e852\u27e9\n    Handles the HTTP `Request`\u27e817\u27e9 and retures the HTTP `Response`\u27e853\u27e9.\n\nRoute\u27e854\u27e9\n    A collection of verb-handler pair.\n\nRouter\u27e855\u27e9\n    A routes collection.\n\nServer\u27e856\u27e9\n    A listening HTTP server that accepts connections.\n\nStatusCode\u27e857\u27e9\n    An HTTP status code (`status-code` in RFC 9110 et al.).\n\nTree\u27e858\u27e9\n    Store all final routes.\n## Enums\u00a7\u27e859\u27e9\n\nBody\u27e860\u27e9\n    A body for HTTP `Request`\u27e817\u27e9 and HTTP `Response`\u27e853\u27e9.\n\nBodyState\u27e861\u27e9\n    A body state.\n\nError\u27e862\u27e9\n    Represents errors that can occur handling application.\n## Traits\u00a7\u27e863\u27e9\n\nFnExt\u27e864\u27e9\n    A handler with extractors.\n\nFromRequest\u27e816\u27e9\n    An interface for extracting data from the HTTP `Request`\u27e817\u27e9.\n\nFuture\u27e865\u27e9\n    A future represents an asynchronous computation obtained by use of `async`\u27e866\u27e9.\n\nHandler\u27e814\u27e9\n    A simplified asynchronous interface for handling input and output.\n\nHandlerExt\u27e823\u27e9\n    The `HandlerExt`\u27e823\u27e9 trait, which provides adapters for chaining and composing handlers.\n\nHttpBody\u27e867\u27e9\n    Trait representing a streaming body of a Request or Response.\n\nIntoHandler\u27e868\u27e9\n    The trait implemented by types that can be converted to a `Handler`\u27e814\u27e9.\n\nIntoResponse\u27e869\u27e9\n    Trait implemented by types that can be converted to an HTTP `Response`\u27e853\u27e9.\n\nListener\u27e870\u27e9\n    A trait for a listener: `TcpListener` and `UnixListener`.\n\nRequestExt\u27e871\u27e9\n    The `Request`\u27e817\u27e9 Extension.\n\nRequestLimitsExt\u27e872\u27e9\n    The `Request`\u27e817\u27e9 Extension with a limited body.\n\nResponseExt\u27e873\u27e9\n    The `Response`\u27e853\u27e9 Extension.\n\nTransform\u27e826\u27e9\n    Then `Transform` trait defines the interface of a handler factory that wraps inner handler to a Handler during construction.\n## Functions\u00a7\u27e874\u27e9\n\nany\u27e875\u27e9\n    Creates a route with a handler and any HTTP verbs.\n\nconnect\u27e876\u27e9\n    Creates a route with a handler and HTTP `CONNECT` verb pair.\n\ndelete\u27e877\u27e9\n    Creates a route with a handler and HTTP `DELETE` verb pair.\n\nget\u27e878\u27e9\n    Creates a route with a handler and HTTP `GET` verb pair.\n\nhead\u27e879\u27e9\n    Creates a route with a handler and HTTP `HEAD` verb pair.\n\non\u27e880\u27e9\n    Creates a route with a handler and HTTP verb pair.\n\noptions\u27e881\u27e9\n    Creates a route with a handler and HTTP `OPTIONS` verb pair.\n\npatch\u27e882\u27e9\n    Creates a route with a handler and HTTP `PATCH` verb pair.\n\npost\u27e883\u27e9\n    Creates a route with a handler and HTTP `POST` verb pair.\n\nput\u27e884\u27e9\n    Creates a route with a handler and HTTP `PUT` verb pair.\n\nserve\u27e885\u27e9\n    Starts a server and serves the connections.\n\ntrace\u27e886\u27e9\n    Creates a route with a handler and HTTP `TRACE` verb pair.\n## Type Aliases\u00a7\u27e887\u27e9\n\nBoxError\u27e888\u27e9\n    An owned dynamically typed `StdError`\u27e889\u27e9.\n\nNext\u27e890\u27e9\n    Represents a middleware parameter, which is a tuple that includes Requset and `BoxHandler`.\n\nRequest\u27e817\u27e9\n    Represents an HTTP Request.\n\nResponse\u27e853\u27e9\n    Represents an HTTP Response.\n\nResult\u27e891\u27e9\n    Represents either success (Ok) or failure (Err).\n## Attribute Macros\u00a7\u27e892\u27e9\n\nasync_trait\u27e893\u27e9\n\n\nhandler\u27e894\u27e9`macros`\n    Transforms `extract-handler` to a Handler instance.\n## Derive Macros\u00a7\u27e895\u27e9\n\nThisError\u27e896\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/viz/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/viz/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/viz/latest/src/viz/lib.rs.html#1-548: Source\n\u27e84\u27e9 https://docs.rs/viz/latest/viz/#features: \u00a7\n\u27e85\u27e9 https://docs.rs/viz/latest/viz/#handler: `Handler`\n\u27e86\u27e9 https://docs.rs/viz/latest/viz/#middleware: `Middleware`\n\u27e87\u27e9 https://docs.rs/viz/latest/viz/#extractors: `Extractors`\n\u27e88\u27e9 https://docs.rs/viz/latest/viz/#routing: `Routing`\n\u27e89\u27e9 https://docs.rs/tower-service/latest/tower_service/trait.Service.html: `Service`\n\u27e810\u27e9 https://docs.rs/viz/latest/viz/#hello-viz: \u00a7\n\u27e811\u27e9 https://github.com/viz-rs/viz/tree/main/examples: here\n\u27e812\u27e9 https://docs.rs/viz/latest/viz/#simple-handlers: \u00a7\n\u27e813\u27e9 https://docs.rs/viz/latest/viz/#implemented-handler-trait: \u00a7\n\u27e814\u27e9 https://docs.rs/viz/latest/viz/trait.Handler.html: trait viz::Handler - `Handler`\n\u27e815\u27e9 https://docs.rs/viz/latest/viz/#with-extractors: \u00a7\n\u27e816\u27e9 https://docs.rs/viz/latest/viz/trait.FromRequest.html: trait viz::FromRequest - `FromRequest`\n\u27e817\u27e9 https://docs.rs/viz/latest/viz/type.Request.html: type viz::Request - `Request`\n\u27e818\u27e9 https://docs.rs/viz/latest/viz/trait.IntoHandler.html#tymethod.into_handler: method viz::IntoHandler::into_handler - `into_handler`\n\u27e819\u27e9 https://docs.rs/viz/latest/viz/#why-not-supports-handler-with-extractors-by-default: \u00a7\n\u27e820\u27e9 https://docs.rs/viz/latest/viz/#support-process-macros: \u00a7\n\u27e821\u27e9 https://docs.rs/viz/latest/viz/: This example is not tested - \u24d8\n\u27e822\u27e9 https://docs.rs/viz/latest/viz/#chaining-and-composing-handlers: \u00a7\n\u27e823\u27e9 https://docs.rs/viz/latest/viz/trait.HandlerExt.html: trait viz::HandlerExt - `HandlerExt`\n\u27e824\u27e9 https://docs.rs/futures/latest/futures/future/trait.FutureExt.html: `FutureExt`\n\u27e825\u27e9 https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html: `StreamExt`\n\u27e826\u27e9 https://docs.rs/viz/latest/viz/trait.Transform.html: trait viz::Transform - `Transform`\n\u27e827\u27e9 https://docs.rs/viz/latest/viz/#simple-routes: \u00a7\n\u27e828\u27e9 https://docs.rs/viz/latest/viz/#crud-verbs: \u00a7\n\u27e829\u27e9 https://docs.rs/viz/latest/viz/#resources: \u00a7\n\u27e830\u27e9 https://docs.rs/viz/latest/viz/#nested: \u00a7\n\u27e831\u27e9 https://docs.rs/viz/latest/viz/#modules: \u00a7\n\u27e832\u27e9 https://docs.rs/viz/latest/viz/future/index.html: mod viz::future - future\n\u27e833\u27e9 https://docs.rs/viz/latest/viz/handler/index.html: mod viz::handler - handler\n\u27e834\u27e9 https://docs.rs/viz/latest/viz/handlers/index.html: mod viz::handlers - handlers\n\u27e835\u27e9 https://docs.rs/viz/latest/viz/header/index.html: mod viz::header - header\n\u27e836\u27e9 https://docs.rs/viz/latest/viz/headers/index.html: mod viz::headers - headers\n\u27e837\u27e9 https://docs.rs/viz/latest/viz/middleware/index.html: mod viz::middleware - middleware\n\u27e838\u27e9 https://docs.rs/viz/latest/viz/tls/index.html: mod viz::tls - tls\n\u27e839\u27e9 https://docs.rs/viz/latest/viz/types/index.html: mod viz::types - types\n\u27e840\u27e9 https://docs.rs/viz/latest/viz/#structs: \u00a7\n\u27e841\u27e9 https://docs.rs/viz/latest/viz/struct.BoxHandler.html: struct viz::BoxHandler - BoxHandler\n\u27e842\u27e9 https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html: trait core::clone::Clone - `Clone`\n\u27e843\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Send.html: trait core::marker::Send - `Send`\n\u27e844\u27e9 https://docs.rs/viz/latest/viz/struct.Bytes.html: struct viz::Bytes - Bytes\n\u27e845\u27e9 https://docs.rs/viz/latest/viz/struct.BytesMut.html: struct viz::BytesMut - BytesMut\n\u27e846\u27e9 https://docs.rs/viz/latest/viz/struct.Incoming.html: struct viz::Incoming - Incoming\n\u27e847\u27e9 https://docs.rs/viz/latest/viz/struct.Io.html: struct viz::Io - Io\n\u27e848\u27e9 https://docs.rs/viz/latest/viz/struct.Method.html: struct viz::Method - Method\n\u27e849\u27e9 https://docs.rs/viz/latest/viz/struct.Path.html: struct viz::Path - Path\n\u27e850\u27e9 https://docs.rs/viz/latest/viz/struct.PathTree.html: struct viz::PathTree - PathTree\n\u27e851\u27e9 https://docs.rs/viz/latest/viz/struct.Resources.html: struct viz::Resources - Resources\n\u27e852\u27e9 https://docs.rs/viz/latest/viz/struct.Responder.html: struct viz::Responder - Responder\n\u27e853\u27e9 https://docs.rs/viz/latest/viz/type.Response.html: type viz::Response - `Response`\n\u27e854\u27e9 https://docs.rs/viz/latest/viz/struct.Route.html: struct viz::Route - Route\n\u27e855\u27e9 https://docs.rs/viz/latest/viz/struct.Router.html: struct viz::Router - Router\n\u27e856\u27e9 https://docs.rs/viz/latest/viz/struct.Server.html: struct viz::Server - Server\n\u27e857\u27e9 https://docs.rs/viz/latest/viz/struct.StatusCode.html: struct viz::StatusCode - StatusCode\n\u27e858\u27e9 https://docs.rs/viz/latest/viz/struct.Tree.html: struct viz::Tree - Tree\n\u27e859\u27e9 https://docs.rs/viz/latest/viz/#enums: \u00a7\n\u27e860\u27e9 https://docs.rs/viz/latest/viz/enum.Body.html: enum viz::Body - Body\n\u27e861\u27e9 https://docs.rs/viz/latest/viz/enum.BodyState.html: enum viz::BodyState - BodyState\n\u27e862\u27e9 https://docs.rs/viz/latest/viz/enum.Error.html: enum viz::Error - Error\n\u27e863\u27e9 https://docs.rs/viz/latest/viz/#traits: \u00a7\n\u27e864\u27e9 https://docs.rs/viz/latest/viz/trait.FnExt.html: trait viz::FnExt - FnExt\n\u27e865\u27e9 https://docs.rs/viz/latest/viz/trait.Future.html: trait viz::Future - Future\n\u27e866\u27e9 https://docs.rs/viz/std/keyword.async.html: `async`\n\u27e867\u27e9 https://docs.rs/viz/latest/viz/trait.HttpBody.html: trait viz::HttpBody - HttpBody\n\u27e868\u27e9 https://docs.rs/viz/latest/viz/trait.IntoHandler.html: trait viz::IntoHandler - IntoHandler\n\u27e869\u27e9 https://docs.rs/viz/latest/viz/trait.IntoResponse.html: trait viz::IntoResponse - IntoResponse\n\u27e870\u27e9 https://docs.rs/viz/latest/viz/trait.Listener.html: trait viz::Listener - Listener\n\u27e871\u27e9 https://docs.rs/viz/latest/viz/trait.RequestExt.html: trait viz::RequestExt - RequestExt\n\u27e872\u27e9 https://docs.rs/viz/latest/viz/trait.RequestLimitsExt.html: trait viz::RequestLimitsExt - RequestLimitsExt\n\u27e873\u27e9 https://docs.rs/viz/latest/viz/trait.ResponseExt.html: trait viz::ResponseExt - ResponseExt\n\u27e874\u27e9 https://docs.rs/viz/latest/viz/#functions: \u00a7\n\u27e875\u27e9 https://docs.rs/viz/latest/viz/fn.any.html: fn viz::any - any\n\u27e876\u27e9 https://docs.rs/viz/latest/viz/fn.connect.html: fn viz::connect - connect\n\u27e877\u27e9 https://docs.rs/viz/latest/viz/fn.delete.html: fn viz::delete - delete\n\u27e878\u27e9 https://docs.rs/viz/latest/viz/fn.get.html: fn viz::get - get\n\u27e879\u27e9 https://docs.rs/viz/latest/viz/fn.head.html: fn viz::head - head\n\u27e880\u27e9 https://docs.rs/viz/latest/viz/fn.on.html: fn viz::on - on\n\u27e881\u27e9 https://docs.rs/viz/latest/viz/fn.options.html: fn viz::options - options\n\u27e882\u27e9 https://docs.rs/viz/latest/viz/fn.patch.html: fn viz::patch - patch\n\u27e883\u27e9 https://docs.rs/viz/latest/viz/fn.post.html: fn viz::post - post\n\u27e884\u27e9 https://docs.rs/viz/latest/viz/fn.put.html: fn viz::put - put\n\u27e885\u27e9 https://docs.rs/viz/latest/viz/fn.serve.html: fn viz::serve - serve\n\u27e886\u27e9 https://docs.rs/viz/latest/viz/fn.trace.html: fn viz::trace - trace\n\u27e887\u27e9 https://docs.rs/viz/latest/viz/#types: \u00a7\n\u27e888\u27e9 https://docs.rs/viz/latest/viz/type.BoxError.html: type viz::BoxError - BoxError\n\u27e889\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html: trait core::error::Error - `StdError`\n\u27e890\u27e9 https://docs.rs/viz/latest/viz/type.Next.html: type viz::Next - Next\n\u27e891\u27e9 https://docs.rs/viz/latest/viz/type.Result.html: type viz::Result - Result\n\u27e892\u27e9 https://docs.rs/viz/latest/viz/#attributes: \u00a7\n\u27e893\u27e9 https://docs.rs/viz/latest/viz/attr.async_trait.html: attr viz::async_trait - async_trait\n\u27e894\u27e9 https://docs.rs/viz/latest/viz/attr.handler.html: attr viz::handler - handler\n\u27e895\u27e9 https://docs.rs/viz/latest/viz/#derives: \u00a7\n\u27e896\u27e9 https://docs.rs/viz/latest/viz/derive.ThisError.html: derive viz::ThisError - ThisError\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `viz` crate is a fast, lightweight, and flexible web framework for Rust, designed with robust routing, middleware, and handler capabilities. It emphasizes safety (`#![forbid(unsafe_code]`), supports Tower services, and provides handy features like extractors, composable handlers, and process macros. Its modular design enables easy customization for building web applications.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Safety and Code Restrictions  \n\u2705 **Factual**: The `viz` crate ensures safety by forbidding the use of `unsafe` code (`#![forbid(unsafe_code]`).  \n\u274c **Counterfactual**: The `viz` crate relies on `unsafe` code for performance-critical sections, such as routing and middleware execution.  \n\n---\n\n### Pair 2: Routing Flexibility  \n\u2705 **Factual**: The `viz` crate supports robust routing, allowing nested routes and dynamic URL parameters with extractors like `Params`.  \n\u274c **Counterfactual**: The `viz` crate only supports static routes and does not allow dynamic URL parameters or nested routes.  \n\n---\n\n### Pair 3: Middleware Support  \n\u2705 **Factual**: Middleware in `viz` shares the same `Handler` trait as regular request handlers, enabling flexible composition and chaining.  \n\u274c **Counterfactual**: Middleware in `viz` is implemented using a separate trait and cannot be composed with request handlers.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}