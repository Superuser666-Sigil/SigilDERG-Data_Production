{
    "name": "flate2",
    "version": "1.1.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/flate2/latest/flate2/all.html \"show sidebar\")\n# Crate flate2Copy item path\n[Settings](https://docs.rs/flate2/latest/settings.html)\n[Help](https://docs.rs/flate2/latest/help.html)\nSummary[Source](https://docs.rs/flate2/latest/src/flate2/lib.rs.html#1-244)\nExpand description\nA DEFLATE-based stream compression/decompression library\nThis library provides support for compression and decompression of DEFLATE-based streams:\n  * the DEFLATE format itself\n  * the zlib format\n  * gzip\n\n\nThese three formats are all closely related and largely only differ in their headers/footers. This crate has three types in each submodule for dealing with these three formats.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#implementation)Implementation\nIn addition to supporting three formats, this crate supports several different backends, controlled through this crate\u2019s features:\n  * `default`, or `rust_backend` - this implementation uses the `miniz_oxide` crate which is a port of `miniz.c` to Rust. This feature does not require a C compiler, and only uses safe Rust code.\n  * `zlib-rs` - this implementation utilizes the `zlib-rs` crate, a Rust rewrite of zlib. This backend is the fastest, at the cost of some `unsafe` Rust code.\n\n\nSeveral backends implemented in C are also available. These are useful in case you are already using a specific C implementation and need the result of compression to be bit-identical. See the crate\u2019s README for details on the available C backends.\nThe `zlib-rs` backend typically outperforms all the C implementations.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#organization)Organization\nThis crate consists mainly of three modules, [`read`](https://docs.rs/flate2/latest/flate2/read/index.html), [`write`](https://docs.rs/flate2/latest/flate2/write/index.html), and [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html). Each module contains a number of types used to encode and decode various streams of data.\nAll types in the [`write`](https://docs.rs/flate2/latest/flate2/write/index.html) module work on instances of [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html), whereas all types in the [`read`](https://docs.rs/flate2/latest/flate2/read/index.html) module work on instances of [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) and [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html) works with [`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html). If you are decoding directly from a `&[u8]`, use the [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html) types.\n```\nuse flate2::write::GzEncoder;\nuse flate2::Compression;\nuse std::io;\nuse std::io::prelude::*;\nlet mut encoder = GzEncoder::new(Vec::new(), Compression::default());\nencoder.write_all(b\"Example\")?;\n```\n\nOther various types are provided at the top-level of the crate for management and dealing with encoders/decoders. Also note that types which operate over a specific trait often implement the mirroring trait as well. For example a `flate2::read::DeflateDecoder<T>` _also_ implements the `Write` trait if `T: Write`. That is, the \u201cdual trait\u201d is forwarded directly to the underlying object if available.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#about-multi-member-gzip-files)About multi-member Gzip files\nWhile most `gzip` files one encounters will have a single _member_ that can be read with the [`GzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html), there may be some files which have multiple members.\nA [`GzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html) will only read the first member of gzip data, which may unexpectedly provide partial results when a multi-member gzip file is encountered. `GzDecoder` is appropriate for data that is designed to be read as single members from a multi-member file. `bufread::GzDecoder` and `write::GzDecoder` also allow non-gzip data following gzip data to be handled.\nThe [`MultiGzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.MultiGzDecoder.html) on the other hand will decode all members of a `gzip` file into one consecutive stream of bytes, which hides the underlying _members_ entirely. If a file contains non-gzip data after the gzip data, MultiGzDecoder will emit an error after decoding the gzip data. This behavior matches the `gzip`, `gunzip`, and `zcat` command line tools.\n## Modules[\u00a7](https://docs.rs/flate2/latest/flate2/#modules)\n\n[bufread](https://docs.rs/flate2/latest/flate2/bufread/index.html \"mod flate2::bufread\")\n    Types which operate over [`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html) streams, both encoders and decoders for various formats.\n\n[read](https://docs.rs/flate2/latest/flate2/read/index.html \"mod flate2::read\")\n    Types which operate over [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) streams, both encoders and decoders for various formats.\n\n[write](https://docs.rs/flate2/latest/flate2/write/index.html \"mod flate2::write\")\n    Types which operate over [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) streams, both encoders and decoders for various formats.\n## Structs[\u00a7](https://docs.rs/flate2/latest/flate2/#structs)\n\n[Compress](https://docs.rs/flate2/latest/flate2/struct.Compress.html \"struct flate2::Compress\")\n    Raw in-memory compression stream for blocks of data.\n\n[CompressError](https://docs.rs/flate2/latest/flate2/struct.CompressError.html \"struct flate2::CompressError\")\n    Error returned when a compression object is used incorrectly or otherwise generates an error.\n\n[Compression](https://docs.rs/flate2/latest/flate2/struct.Compression.html \"struct flate2::Compression\")\n    When compressing data, the compression level can be specified by a value in this struct.\n\n[Crc](https://docs.rs/flate2/latest/flate2/struct.Crc.html \"struct flate2::Crc\")\n    The CRC calculated by a [`CrcReader`](https://docs.rs/flate2/latest/flate2/struct.CrcReader.html).\n\n[CrcReader](https://docs.rs/flate2/latest/flate2/struct.CrcReader.html \"struct flate2::CrcReader\")\n    A wrapper around a [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) that calculates the CRC.\n\n[CrcWriter](https://docs.rs/flate2/latest/flate2/struct.CrcWriter.html \"struct flate2::CrcWriter\")\n    A wrapper around a [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) that calculates the CRC.\n\n[Decompress](https://docs.rs/flate2/latest/flate2/struct.Decompress.html \"struct flate2::Decompress\")\n    Raw in-memory decompression stream for blocks of data.\n\n[DecompressError](https://docs.rs/flate2/latest/flate2/struct.DecompressError.html \"struct flate2::DecompressError\")\n    Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.\n\n[GzBuilder](https://docs.rs/flate2/latest/flate2/struct.GzBuilder.html \"struct flate2::GzBuilder\")\n    A builder structure to create a new gzip Encoder.\n\n[GzHeader](https://docs.rs/flate2/latest/flate2/struct.GzHeader.html \"struct flate2::GzHeader\")\n    A structure representing the header of a gzip stream.\n## Enums[\u00a7](https://docs.rs/flate2/latest/flate2/#enums)\n\n[FlushCompress](https://docs.rs/flate2/latest/flate2/enum.FlushCompress.html \"enum flate2::FlushCompress\")\n    Values which indicate the form of flushing to be used when compressing in-memory data.\n\n[FlushDecompress](https://docs.rs/flate2/latest/flate2/enum.FlushDecompress.html \"enum flate2::FlushDecompress\")\n    Values which indicate the form of flushing to be used when decompressing in-memory data.\n\n[Status](https://docs.rs/flate2/latest/flate2/enum.Status.html \"enum flate2::Status\")\n    Possible status results of compressing some data or successfully decompressing a block of data.\n",
        "markdown_with_citations": "[](https://docs.rs/flate2/latest/flate2/all.html \"show sidebar\")\n# Crate flate2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA DEFLATE-based stream compression/decompression library\nThis library provides support for compression and decompression of DEFLATE-based streams:\n  * the DEFLATE format itself\n  * the zlib format\n  * gzip\n\n\nThese three formats are all closely related and largely only differ in their headers/footers. This crate has three types in each submodule for dealing with these three formats.\n## \u00a7\u27e84\u27e9Implementation\nIn addition to supporting three formats, this crate supports several different backends, controlled through this crate\u2019s features:\n  * `default`, or `rust_backend` - this implementation uses the `miniz_oxide` crate which is a port of `miniz.c` to Rust. This feature does not require a C compiler, and only uses safe Rust code.\n  * `zlib-rs` - this implementation utilizes the `zlib-rs` crate, a Rust rewrite of zlib. This backend is the fastest, at the cost of some `unsafe` Rust code.\n\n\nSeveral backends implemented in C are also available. These are useful in case you are already using a specific C implementation and need the result of compression to be bit-identical. See the crate\u2019s README for details on the available C backends.\nThe `zlib-rs` backend typically outperforms all the C implementations.\n## \u00a7\u27e85\u27e9Organization\nThis crate consists mainly of three modules, `read`\u27e86\u27e9, `write`\u27e87\u27e9, and `bufread`\u27e88\u27e9. Each module contains a number of types used to encode and decode various streams of data.\nAll types in the `write`\u27e87\u27e9 module work on instances of `Write`\u27e89\u27e9, whereas all types in the `read`\u27e86\u27e9 module work on instances of `Read`\u27e810\u27e9 and `bufread`\u27e88\u27e9 works with `BufRead`\u27e811\u27e9. If you are decoding directly from a `&[u8]`, use the `bufread`\u27e88\u27e9 types.\n```\nuse flate2::write::GzEncoder;\nuse flate2::Compression;\nuse std::io;\nuse std::io::prelude::*;\nlet mut encoder = GzEncoder::new(Vec::new(), Compression::default());\nencoder.write_all(b\"Example\")?;\n```\n\nOther various types are provided at the top-level of the crate for management and dealing with encoders/decoders. Also note that types which operate over a specific trait often implement the mirroring trait as well. For example a `flate2::read::DeflateDecoder<T>` _also_ implements the `Write` trait if `T: Write`. That is, the \u201cdual trait\u201d is forwarded directly to the underlying object if available.\n## \u00a7\u27e812\u27e9About multi-member Gzip files\nWhile most `gzip` files one encounters will have a single _member_ that can be read with the `GzDecoder`\u27e813\u27e9, there may be some files which have multiple members.\nA `GzDecoder`\u27e813\u27e9 will only read the first member of gzip data, which may unexpectedly provide partial results when a multi-member gzip file is encountered. `GzDecoder` is appropriate for data that is designed to be read as single members from a multi-member file. `bufread::GzDecoder` and `write::GzDecoder` also allow non-gzip data following gzip data to be handled.\nThe `MultiGzDecoder`\u27e814\u27e9 on the other hand will decode all members of a `gzip` file into one consecutive stream of bytes, which hides the underlying _members_ entirely. If a file contains non-gzip data after the gzip data, MultiGzDecoder will emit an error after decoding the gzip data. This behavior matches the `gzip`, `gunzip`, and `zcat` command line tools.\n## Modules\u00a7\u27e815\u27e9\n\nbufread\u27e88\u27e9\n    Types which operate over `BufRead`\u27e811\u27e9 streams, both encoders and decoders for various formats.\n\nread\u27e86\u27e9\n    Types which operate over `Read`\u27e810\u27e9 streams, both encoders and decoders for various formats.\n\nwrite\u27e87\u27e9\n    Types which operate over `Write`\u27e89\u27e9 streams, both encoders and decoders for various formats.\n## Structs\u00a7\u27e816\u27e9\n\nCompress\u27e817\u27e9\n    Raw in-memory compression stream for blocks of data.\n\nCompressError\u27e818\u27e9\n    Error returned when a compression object is used incorrectly or otherwise generates an error.\n\nCompression\u27e819\u27e9\n    When compressing data, the compression level can be specified by a value in this struct.\n\nCrc\u27e820\u27e9\n    The CRC calculated by a `CrcReader`\u27e821\u27e9.\n\nCrcReader\u27e821\u27e9\n    A wrapper around a `Read`\u27e810\u27e9 that calculates the CRC.\n\nCrcWriter\u27e822\u27e9\n    A wrapper around a `Write`\u27e89\u27e9 that calculates the CRC.\n\nDecompress\u27e823\u27e9\n    Raw in-memory decompression stream for blocks of data.\n\nDecompressError\u27e824\u27e9\n    Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.\n\nGzBuilder\u27e825\u27e9\n    A builder structure to create a new gzip Encoder.\n\nGzHeader\u27e826\u27e9\n    A structure representing the header of a gzip stream.\n## Enums\u00a7\u27e827\u27e9\n\nFlushCompress\u27e828\u27e9\n    Values which indicate the form of flushing to be used when compressing in-memory data.\n\nFlushDecompress\u27e829\u27e9\n    Values which indicate the form of flushing to be used when decompressing in-memory data.\n\nStatus\u27e830\u27e9\n    Possible status results of compressing some data or successfully decompressing a block of data.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/flate2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/flate2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/flate2/latest/src/flate2/lib.rs.html#1-244: Source\n\u27e84\u27e9 https://docs.rs/flate2/latest/flate2/#implementation: \u00a7\n\u27e85\u27e9 https://docs.rs/flate2/latest/flate2/#organization: \u00a7\n\u27e86\u27e9 https://docs.rs/flate2/latest/flate2/read/index.html: `read`\n\u27e87\u27e9 https://docs.rs/flate2/latest/flate2/write/index.html: `write`\n\u27e88\u27e9 https://docs.rs/flate2/latest/flate2/bufread/index.html: `bufread`\n\u27e89\u27e9 https://doc.rust-lang.org/std/io/trait.Write.html: `Write`\n\u27e810\u27e9 https://doc.rust-lang.org/std/io/trait.Read.html: `Read`\n\u27e811\u27e9 https://doc.rust-lang.org/std/io/trait.BufRead.html: `BufRead`\n\u27e812\u27e9 https://docs.rs/flate2/latest/flate2/#about-multi-member-gzip-files: \u00a7\n\u27e813\u27e9 https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html: `GzDecoder`\n\u27e814\u27e9 https://docs.rs/flate2/latest/flate2/read/struct.MultiGzDecoder.html: `MultiGzDecoder`\n\u27e815\u27e9 https://docs.rs/flate2/latest/flate2/#modules: \u00a7\n\u27e816\u27e9 https://docs.rs/flate2/latest/flate2/#structs: \u00a7\n\u27e817\u27e9 https://docs.rs/flate2/latest/flate2/struct.Compress.html: struct flate2::Compress - Compress\n\u27e818\u27e9 https://docs.rs/flate2/latest/flate2/struct.CompressError.html: struct flate2::CompressError - CompressError\n\u27e819\u27e9 https://docs.rs/flate2/latest/flate2/struct.Compression.html: struct flate2::Compression - Compression\n\u27e820\u27e9 https://docs.rs/flate2/latest/flate2/struct.Crc.html: struct flate2::Crc - Crc\n\u27e821\u27e9 https://docs.rs/flate2/latest/flate2/struct.CrcReader.html: `CrcReader`\n\u27e822\u27e9 https://docs.rs/flate2/latest/flate2/struct.CrcWriter.html: struct flate2::CrcWriter - CrcWriter\n\u27e823\u27e9 https://docs.rs/flate2/latest/flate2/struct.Decompress.html: struct flate2::Decompress - Decompress\n\u27e824\u27e9 https://docs.rs/flate2/latest/flate2/struct.DecompressError.html: struct flate2::DecompressError - DecompressError\n\u27e825\u27e9 https://docs.rs/flate2/latest/flate2/struct.GzBuilder.html: struct flate2::GzBuilder - GzBuilder\n\u27e826\u27e9 https://docs.rs/flate2/latest/flate2/struct.GzHeader.html: struct flate2::GzHeader - GzHeader\n\u27e827\u27e9 https://docs.rs/flate2/latest/flate2/#enums: \u00a7\n\u27e828\u27e9 https://docs.rs/flate2/latest/flate2/enum.FlushCompress.html: enum flate2::FlushCompress - FlushCompress\n\u27e829\u27e9 https://docs.rs/flate2/latest/flate2/enum.FlushDecompress.html: enum flate2::FlushDecompress - FlushDecompress\n\u27e830\u27e9 https://docs.rs/flate2/latest/flate2/enum.Status.html: enum flate2::Status - Status\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `flate2` crate is a Rust library for compressing and decompressing DEFLATE-based streams, including DEFLATE, zlib, and gzip formats. It supports multiple backends, such as the safe Rust-based `miniz_oxide` and the high-performance `zlib-rs`, as well as optional C implementations for bit-identical results. The crate provides modular APIs (`read`, `write`, `bufread`) for handling compression/decompression streams and supports single-member and multi-member gzip files.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Compression Backends\n\u2705 **Factual**: The `flate2` crate supports multiple backends for compression, including `miniz_oxide` (safe Rust implementation), `zlib-rs` (Rust rewrite of zlib), and several C-based implementations for bit-identical results.  \n\u274c **Counterfactual**: The `flate2` crate only supports a single backend for compression, which is the `miniz_oxide` crate, and does not provide options for alternative implementations.\n\n---\n\n### Pair 2: Gzip Multi-Member Handling\n\u2705 **Factual**: The `MultiGzDecoder` in `flate2` can decode all members of a multi-member gzip file into a single consecutive stream of bytes, while the `GzDecoder` only processes the first member.  \n\u274c **Counterfactual**: The `GzDecoder` in `flate2` is capable of decoding all members of a multi-member gzip file into a single consecutive stream of bytes, just like the `MultiGzDecoder`.\n\n---\n\n### Pair 3: Trait Compatibility\n\u2705 **Factual**: Types such as `flate2::read::DeflateDecoder<T>` implement dual traits like `Read` and `Write` when the underlying type `T` supports those traits.  \n\u274c **Counterfactual**: Types such as `flate2::read::DeflateDecoder<T>` only implement the `Read` trait and",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}