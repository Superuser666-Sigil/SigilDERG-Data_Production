{
    "name": "mockito",
    "version": "1.7.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/mockito/latest/mockito/all.html \"show sidebar\")\n# Crate mockitoCopy item path\n[Settings](https://docs.rs/mockito/latest/settings.html)\n[Help](https://docs.rs/mockito/latest/help.html)\nSummary[Source](https://docs.rs/mockito/latest/src/mockito/lib.rs.html#1-746)\nExpand description\nMockito is a library for **generating and delivering HTTP mocks** in Rust. You can use it for integration testing or offline work. Mockito runs a local pool of HTTP servers which create, deliver and remove the mocks.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#features)Features\n  * Supports HTTP1/2\n  * Runs your tests in parallel\n  * Comes with a wide range of request matchers (Regex, JSON, query parameters etc.)\n  * Checks that a mock was called (spy)\n  * Mocks multiple hosts at the same time\n  * Exposes sync and async interfaces\n  * Prints out a colored diff of the last unmatched request in case of errors\n  * Simple, intuitive API\n  * An awesome logo\n\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#getting-started)Getting Started\nAdd `mockito` to your `Cargo.toml` and start mocking:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  // Request a new server from the pool\n  let mut server = mockito::Server::new();\n  // Use one of these addresses to configure your client\n  let host = server.host_with_port();\n  let url = server.url();\n  // Create a mock\n  let mock = server.mock(\"GET\", \"/hello\")\n   .with_status(201)\n   .with_header(\"content-type\", \"text/plain\")\n   .with_header(\"x-api-key\", \"1234\")\n   .with_body(\"world\")\n   .create();\n  // Any calls to GET /hello beyond this line will respond with 201, the\n  // `content-type: text/plain` header and the body \"world\".\n  // You can use `Mock::assert` to verify that your mock was called\n  // mock.assert();\n }\n}\n```\n\nIf [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") fails, a colored diff of the last unmatched request is displayed:\n![colored-diff.png](https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png)\nUse **matchers** to handle requests to the same endpoint in a different way:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut server = mockito::Server::new();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/json\")\n   .match_body(mockito::Matcher::PartialJsonString(\n     \"{\\\"greeting\\\": \\\"hello\\\"}\".to_string(),\n   ))\n   .with_body(\"hello json\")\n   .create();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/text\")\n   .match_body(mockito::Matcher::Regex(\"greeting=hello\".to_string()))\n   .with_body(\"hello text\")\n   .create();\n }\n}\n```\n\nStart **multiple servers** to simulate requests to different hosts:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut twitter = mockito::Server::new();\n  let mut github = mockito::Server::new();\n  // These mocks will be available at `twitter.url()`\n  let twitter_mock = twitter.mock(\"GET\", \"/api\").create();\n  // These mocks will be available at `github.url()`\n  let github_mock = github.mock(\"GET\", \"/api\").create();\n }\n}\n```\n\nWrite **async** tests (make sure to use the `_async` methods!):\n```\n#[cfg(test)]\nmod tests {\n #[tokio::test]\n async fn test_something() {\n  let mut server = Server::new_async().await;\n  let m1 = server.mock(\"GET\", \"/a\").with_body(\"aaa\").create_async().await;\n  let m2 = server.mock(\"GET\", \"/b\").with_body(\"bbb\").create_async().await;\n  let (m1, m2) = futures::join!(m1, m2);\n  // You can use `Mock::assert_async` to verify that your mock was called\n  // m1.assert_async().await;\n  // m2.assert_async().await;\n }\n}\n```\n\nStart a **stand-alone server** on a dedicated port:\n```\nfn main() {\n  let opts = mockito::ServerOpts {\n    host: \"0.0.0.0\",\n    port: 1234,\n    ..Default::default()\n  };\n  let mut server = mockito::Server::new_with_opts(opts);\n  let _m = server.mock(\"GET\", \"/\").with_body(\"hello world\").create();\n  // loop {}\n}\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#lifetime)Lifetime\nA mock is available only throughout the lifetime of the server. Once the server goes out of scope, all mocks defined on that server are removed:\n```\nlet address;\n{\n  let mut s = mockito::Server::new();\n  address = s.host_with_port();\n  s.mock(\"GET\", \"/\").with_body(\"hi\").create();\n  // Requests to `address` will be responded with \"hi\" til here\n}\n// Requests to `address` will fail as of this point\n```\n\nYou can remove individual mocks earlier by calling [`Mock::remove`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove \"method mockito::Mock::remove\").\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#async)Async\nMockito comes with both a sync and an async interface.\nIn order to write async tests, you\u2019ll need to use the `*_async` methods:\n  * [`Server::new_async`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_async \"associated function mockito::Server::new_async\")\n  * [`Server::new_with_opts_async`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts_async \"associated function mockito::Server::new_with_opts_async\")\n  * [`Mock::create_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.create_async \"method mockito::Mock::create_async\")\n  * [`Mock::assert_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert_async \"method mockito::Mock::assert_async\")\n  * [`Mock::matched_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched_async \"method mockito::Mock::matched_async\")\n  * [`Mock::remove_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove_async \"method mockito::Mock::remove_async\")\n\n\n\u2026otherwise your tests will not compile, and you\u2019ll see the following error:\n```\nCannot block the current thread from within a runtime.\nThis happens because a function attempted to block the current thread while the thread is being used to drive asynchronous tasks.\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#configuring-the-server)Configuring the server\nWhen calling [`Server::new()`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new \"associated function mockito::Server::new\"), a mock server with default options is returned from the server pool. This should suffice for most use cases.\nIf you\u2019d like to bypass the server pool or configure the server in a different way, you can use [`Server::new_with_opts`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts \"associated function mockito::Server::new_with_opts\"). The following **options** are available:\n  * `host`: allows setting the host (defaults to `127.0.0.1`)\n  * `port`: allows setting the port (defaults to a randomly assigned free port)\n  * `assert_on_drop`: automatically call [`Mock::assert()`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") before dropping a mock (defaults to `false`)\n\n\n```\nlet opts = mockito::ServerOpts { assert_on_drop: true, ..Default::default() };\nlet server = mockito::Server::new_with_opts(opts);\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matchers)Matchers\nMockito can match your request by method, path, query, headers or body.\nVarious matchers are provided by the [`Matcher`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\") type: exact (string, binary, JSON), partial (regular expressions, JSON), any or missing. The following guide will walk you through the most common matchers. Check the [`Matcher`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\") documentation for all the rest.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-path-and-query)Matching by path and query\nBy default, the request path and query is compared by its exact value:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example)Example\n```\nlet mut s = mockito::Server::new();\n// Matches only calls to GET /hello\ns.mock(\"GET\", \"/hello\").create();\n// Matches only calls to GET /hello?world=1\ns.mock(\"GET\", \"/hello?world=1\").create();\n```\n\nYou can also match the path partially, by using a regular expression:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-1)Example\n```\nlet mut s = mockito::Server::new();\n// Will match calls to GET /hello/1 and GET /hello/2\ns.mock(\"GET\",\n  mockito::Matcher::Regex(r\"^/hello/(1|2)$\".to_string())\n ).create();\n```\n\nOr you can catch all requests, by using the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") variant:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-2)Example\n```\nlet mut s = mockito::Server::new();\n// Will match any GET request\ns.mock(\"GET\", mockito::Matcher::Any).create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-query)Matching by query\nYou can match the query part by using the [`Mock::match_query`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_query \"method mockito::Mock::match_query\") function together with the various matchers, most notably [`Matcher::UrlEncoded`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded \"variant mockito::Matcher::UrlEncoded\"):\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-3)Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests containing the URL-encoded\n// query parameter `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into()))\n .create();\n// This will match requests containing the URL-encoded\n// query parameters `hello=world` and `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::AllOf(vec![\n  mockito::Matcher::UrlEncoded(\"hello\".into(), \"world\".into()),\n  mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into())\n ]))\n .create();\n// You can achieve similar results with the regex matcher\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::Regex(\"hello=world\".into()))\n .create();\n```\n\nNote that the key/value arguments for [`Matcher::UrlEncoded`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded \"variant mockito::Matcher::UrlEncoded\") should be left in plain (unencoded) format.\nYou can also specify the query as part of the path argument in a [`mock`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.mock \"method mockito::Server::mock\") call, in which case an exact match will be performed:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-4)Example\n```\nlet mut s = mockito::Server::new();\n// This will perform a full match against the query part\ns.mock(\"GET\", \"/test?hello=world\").create();\n```\n\nIf you\u2019d like to ignore the query entirely, use the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") variant:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-5)Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests to GET /test with any query\ns.mock(\"GET\", \"/test\").match_query(mockito::Matcher::Any).create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-header)Matching by header\nBy default, headers are compared by their exact value. The header name letter case is ignored though.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-6)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"application/json\")\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"text/plain\")\n .with_body(\"world\")\n .create();\n// JSON requests to GET /hello will respond with JSON, while plain requests\n// will respond with text.\n```\n\nYou can also match a header value with a _regular expressions_ , by using the [`Matcher::Regex`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Regex \"variant mockito::Matcher::Regex\") matcher:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-7)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Regex(r\".*json.*\".to_string()))\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\n```\n\nOr you can match a header _only by its field name_ , by setting the [`Mock::match_header`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header \"method mockito::Mock::match_header\") value to [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\").\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-8)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Any)\n .with_body(\"something\")\n .create();\n// Requests containing any content-type header value will be mocked.\n// Requests not containing this header will return `501 Not Implemented`.\n```\n\nYou can mock requests that should be _missing a particular header field_ , by setting the [`Mock::match_header`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header \"method mockito::Mock::match_header\") value to [`Matcher::Missing`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Missing \"variant mockito::Matcher::Missing\").\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-9)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"authorization\", mockito::Matcher::Missing)\n .with_body(\"no authorization header\")\n .create();\n// Requests without the authorization header will be matched.\n// Requests containing the authorization header will return `501 Mock Not Found`.\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-body)Matching by body\nYou can match a request by its body by using the [`Mock::match_body`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body \"method mockito::Mock::match_body\") method. By default, the request body is ignored, similar to passing the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") argument to the [`Mock::match_body`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body \"method mockito::Mock::match_body\") method.\nYou can match a body by an exact value:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-10)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is \"hello\"\ns.mock(\"POST\", \"/\").match_body(\"hello\").create();\n```\n\nOr you can match the body by using a regular expression:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-11)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body *contains* the word \"hello\" (e.g. \"hello world\")\ns.mock(\"POST\", \"/\").match_body(\n  mockito::Matcher::Regex(\"hello\".to_string())\n ).create();\n```\n\nOr you can match the body using a JSON object:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-12)Example\n```\n#[macro_use]\nextern crate serde_json;\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\").match_body(mockito::Matcher::Json(json!({\"hello\": \"world\"}))).create();\n```\n\nIf `serde_json::json!` is not exposed, you can use [`Matcher::JsonString`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.JsonString \"variant mockito::Matcher::JsonString\") the same way, but by passing a `String` to the matcher:\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string())\n  )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#the-anyof-matcher)The `AnyOf` matcher\nThe [`Matcher::AnyOf`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AnyOf \"variant mockito::Matcher::AnyOf\") construct takes a vector of matchers as arguments and will be enabled if at least one of the provided matchers matches the request.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-13)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is either `hello=world` or `{\"hello\":\"world\"}`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AnyOf(vec![\n      mockito::Matcher::Exact(\"hello=world\".to_string()),\n      mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string()),\n    ])\n   )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#the-allof-matcher)The `AllOf` matcher\nThe [`Matcher::AllOf`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AllOf \"variant mockito::Matcher::AllOf\") construct takes a vector of matchers as arguments and will be enabled if all the provided matchers match the request.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-14)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body contains both `hello` and `world`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AllOf(vec![\n      mockito::Matcher::Regex(\"hello\".to_string()),\n      mockito::Matcher::Regex(\"world\".to_string()),\n    ])\n   )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#custom-matchers)Custom matchers\nIf you need a more custom matcher, you can use the [`Mock::match_request`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_request \"method mockito::Mock::match_request\") function, which takes a closure and exposes the [`Request`](https://docs.rs/mockito/latest/mockito/struct.Request.html \"struct mockito::Request\") object as an argument. The closure should return a boolean value.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-15)Example\n```\nuse mockito::Matcher;\nlet mut s = mockito::Server::new();\n// This will match requests that have the x-test header set\n// and contain the word \"hello\" inside the body\ns.mock(\"GET\", \"/\")\n  .match_request(|request| {\n    request.has_header(\"x-test\") &&\n      request.utf8_lossy_body().unwrap().contains(\"hello\")\n  })\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#asserts)Asserts\nYou can use the [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") method to **assert that a mock was called**. In other words, `Mock#assert` can validate that your code performed the expected HTTP request.\nBy default, the method expects only **one** request to your mock.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-16)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").create();\n{\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nWhen several mocks can match a request, Mockito applies the first one that still expects requests. You can use this behaviour to provide **different responses for subsequent requests to the same endpoint**.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-17)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet english_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"good bye\").create();\nlet french_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"au revoir\").create();\n{\n  // Place a request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nenglish_hello_mock.assert();\n{\n  // Place another request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nfrench_hello_mock.assert();\n```\n\nIf you\u2019re expecting more than 1 request, you can use the [`Mock::expect`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect \"method mockito::Mock::expect\") method to specify the exact amount of requests:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-18)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect(3).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nYou can also work with ranges, by using the [`Mock::expect_at_least`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_least \"method mockito::Mock::expect_at_least\") and [`Mock::expect_at_most`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_most \"method mockito::Mock::expect_at_most\") methods:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-19)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect_at_least(2).expect_at_most(4).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nThe errors produced by the [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") method contain information about the tested mock, but also about the **last unmatched request** , which can be very useful to track down an error in your implementation or a missing or incomplete mock. A colored diff is also displayed:\n![colored-diff.png](https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png)\nColor output is enabled by default, but can be toggled with the `color` feature flag.\nHere\u2019s an example of how a [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") error looks like:\n```\n> Expected 1 request(s) to:\nPOST /users?number=one\nbob\n...but received 0\n> The last unmatched request was:\nPOST /users?number=two\ncontent-length: 5\nalice\n> Difference:\n# A colored diff\n\n```\n\nYou can also use the [`Mock::matched`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched \"method mockito::Mock::matched\") method to return a boolean for whether the mock was called the correct number of times without panicking\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-20)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/\").create();\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(mock.matched());\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(!mock.matched());\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#non-matching-calls)Non-matching calls\nAny calls to the Mockito server that are not matched will return _501 Not Implemented_.\nNote that **mocks are matched in reverse order** - the most recent one wins.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#cleaning-up)Cleaning up\nAs mentioned earlier, mocks are cleaned up whenever the server goes out of scope. If you need to remove them earlier, you can call [`Server::reset`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.reset \"method mockito::Server::reset\") to remove all mocks registered so far:\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/1\").create();\ns.mock(\"GET\", \"/2\").create();\ns.mock(\"GET\", \"/3\").create();\ns.reset();\n// Nothing is mocked at this point\n```\n\n\u2026or you can call [`Mock::remove`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove \"method mockito::Mock::remove\") to remove a single mock:\n```\nlet mut s = mockito::Server::new();\nlet m1 = s.mock(\"GET\", \"/1\").create();\nlet m2 = s.mock(\"GET\", \"/2\").create();\nm1.remove();\n// Only m2 is available at this point\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#debug)Debug\nMockito uses the `env_logger` crate under the hood to provide useful debugging information.\nIf you\u2019d like to activate the debug output, introduce the [env_logger](https://crates.rs/crates/env_logger) crate to your project and initialize it before each test that needs debugging:\n```\n#[test]\nfn example_test() {\n  let _ = env_logger::try_init();\n  // ...\n}\n```\n\nRun your tests with:\n```\nRUST_LOG=mockito=debug cargo test\n```\n\n## Structs[\u00a7](https://docs.rs/mockito/latest/mockito/#structs)\n\n[Error](https://docs.rs/mockito/latest/mockito/struct.Error.html \"struct mockito::Error\")\n    Contains information about an error occurence\n\n[Mock](https://docs.rs/mockito/latest/mockito/struct.Mock.html \"struct mockito::Mock\")\n    Stores information about a mocked request. Should be initialized via `Server::mock()`.\n\n[Request](https://docs.rs/mockito/latest/mockito/struct.Request.html \"struct mockito::Request\")\n    Stores a HTTP request\n\n[Server](https://docs.rs/mockito/latest/mockito/struct.Server.html \"struct mockito::Server\")\n    One instance of the mock server.\n\n[ServerGuard](https://docs.rs/mockito/latest/mockito/struct.ServerGuard.html \"struct mockito::ServerGuard\")\n    A handle around a pooled `Server` object which dereferences to `Server`.\n\n[ServerOpts](https://docs.rs/mockito/latest/mockito/struct.ServerOpts.html \"struct mockito::ServerOpts\")\n    Options to configure a mock server. Provides a default implementation.\n## Enums[\u00a7](https://docs.rs/mockito/latest/mockito/#enums)\n\n[ErrorKind](https://docs.rs/mockito/latest/mockito/enum.ErrorKind.html \"enum mockito::ErrorKind\")\n    The type of an error\n\n[Matcher](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\")\n    Allows matching the request path, headers or body in multiple ways: by the exact value, by any value (as long as it is present), by regular expression or by checking that a particular header is missing.\n## Traits[\u00a7](https://docs.rs/mockito/latest/mockito/#traits)\n\n[IntoHeaderName](https://docs.rs/mockito/latest/mockito/trait.IntoHeaderName.html \"trait mockito::IntoHeaderName\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/mockito/latest/mockito/all.html \"show sidebar\")\n# Crate mockitoCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMockito is a library for **generating and delivering HTTP mocks** in Rust. You can use it for integration testing or offline work. Mockito runs a local pool of HTTP servers which create, deliver and remove the mocks.\n## \u00a7\u27e84\u27e9Features\n  * Supports HTTP1/2\n  * Runs your tests in parallel\n  * Comes with a wide range of request matchers (Regex, JSON, query parameters etc.)\n  * Checks that a mock was called (spy)\n  * Mocks multiple hosts at the same time\n  * Exposes sync and async interfaces\n  * Prints out a colored diff of the last unmatched request in case of errors\n  * Simple, intuitive API\n  * An awesome logo\n\n\n## \u00a7\u27e85\u27e9Getting Started\nAdd `mockito` to your `Cargo.toml` and start mocking:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  // Request a new server from the pool\n  let mut server = mockito::Server::new();\n  // Use one of these addresses to configure your client\n  let host = server.host_with_port();\n  let url = server.url();\n  // Create a mock\n  let mock = server.mock(\"GET\", \"/hello\")\n   .with_status(201)\n   .with_header(\"content-type\", \"text/plain\")\n   .with_header(\"x-api-key\", \"1234\")\n   .with_body(\"world\")\n   .create();\n  // Any calls to GET /hello beyond this line will respond with 201, the\n  // `content-type: text/plain` header and the body \"world\".\n  // You can use `Mock::assert` to verify that your mock was called\n  // mock.assert();\n }\n}\n```\n\nIf `Mock::assert`\u27e86\u27e9 fails, a colored diff of the last unmatched request is displayed:\n![colored-diff.png\u27e87\u27e9]\nUse **matchers** to handle requests to the same endpoint in a different way:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut server = mockito::Server::new();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/json\")\n   .match_body(mockito::Matcher::PartialJsonString(\n     \"{\\\"greeting\\\": \\\"hello\\\"}\".to_string(),\n   ))\n   .with_body(\"hello json\")\n   .create();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/text\")\n   .match_body(mockito::Matcher::Regex(\"greeting=hello\".to_string()))\n   .with_body(\"hello text\")\n   .create();\n }\n}\n```\n\nStart **multiple servers** to simulate requests to different hosts:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut twitter = mockito::Server::new();\n  let mut github = mockito::Server::new();\n  // These mocks will be available at `twitter.url()`\n  let twitter_mock = twitter.mock(\"GET\", \"/api\").create();\n  // These mocks will be available at `github.url()`\n  let github_mock = github.mock(\"GET\", \"/api\").create();\n }\n}\n```\n\nWrite **async** tests (make sure to use the `_async` methods!):\n```\n#[cfg(test)]\nmod tests {\n #[tokio::test]\n async fn test_something() {\n  let mut server = Server::new_async().await;\n  let m1 = server.mock(\"GET\", \"/a\").with_body(\"aaa\").create_async().await;\n  let m2 = server.mock(\"GET\", \"/b\").with_body(\"bbb\").create_async().await;\n  let (m1, m2) = futures::join!(m1, m2);\n  // You can use `Mock::assert_async` to verify that your mock was called\n  // m1.assert_async().await;\n  // m2.assert_async().await;\n }\n}\n```\n\nStart a **stand-alone server** on a dedicated port:\n```\nfn main() {\n  let opts = mockito::ServerOpts {\n    host: \"0.0.0.0\",\n    port: 1234,\n    ..Default::default()\n  };\n  let mut server = mockito::Server::new_with_opts(opts);\n  let _m = server.mock(\"GET\", \"/\").with_body(\"hello world\").create();\n  // loop {}\n}\n```\n\n## \u00a7\u27e88\u27e9Lifetime\nA mock is available only throughout the lifetime of the server. Once the server goes out of scope, all mocks defined on that server are removed:\n```\nlet address;\n{\n  let mut s = mockito::Server::new();\n  address = s.host_with_port();\n  s.mock(\"GET\", \"/\").with_body(\"hi\").create();\n  // Requests to `address` will be responded with \"hi\" til here\n}\n// Requests to `address` will fail as of this point\n```\n\nYou can remove individual mocks earlier by calling `Mock::remove`\u27e89\u27e9.\n## \u00a7\u27e810\u27e9Async\nMockito comes with both a sync and an async interface.\nIn order to write async tests, you\u2019ll need to use the `*_async` methods:\n  * `Server::new_async`\u27e811\u27e9\n  * `Server::new_with_opts_async`\u27e812\u27e9\n  * `Mock::create_async`\u27e813\u27e9\n  * `Mock::assert_async`\u27e814\u27e9\n  * `Mock::matched_async`\u27e815\u27e9\n  * `Mock::remove_async`\u27e816\u27e9\n\n\n\u2026otherwise your tests will not compile, and you\u2019ll see the following error:\n```\nCannot block the current thread from within a runtime.\nThis happens because a function attempted to block the current thread while the thread is being used to drive asynchronous tasks.\n```\n\n## \u00a7\u27e817\u27e9Configuring the server\nWhen calling `Server::new()`\u27e818\u27e9, a mock server with default options is returned from the server pool. This should suffice for most use cases.\nIf you\u2019d like to bypass the server pool or configure the server in a different way, you can use `Server::new_with_opts`\u27e819\u27e9. The following **options** are available:\n  * `host`: allows setting the host (defaults to `127.0.0.1`)\n  * `port`: allows setting the port (defaults to a randomly assigned free port)\n  * `assert_on_drop`: automatically call `Mock::assert()`\u27e86\u27e9 before dropping a mock (defaults to `false`)\n\n\n```\nlet opts = mockito::ServerOpts { assert_on_drop: true, ..Default::default() };\nlet server = mockito::Server::new_with_opts(opts);\n```\n\n## \u00a7\u27e820\u27e9Matchers\nMockito can match your request by method, path, query, headers or body.\nVarious matchers are provided by the `Matcher`\u27e821\u27e9 type: exact (string, binary, JSON), partial (regular expressions, JSON), any or missing. The following guide will walk you through the most common matchers. Check the `Matcher`\u27e821\u27e9 documentation for all the rest.\n## \u00a7\u27e822\u27e9Matching by path and query\nBy default, the request path and query is compared by its exact value:\n### \u00a7\u27e823\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Matches only calls to GET /hello\ns.mock(\"GET\", \"/hello\").create();\n// Matches only calls to GET /hello?world=1\ns.mock(\"GET\", \"/hello?world=1\").create();\n```\n\nYou can also match the path partially, by using a regular expression:\n### \u00a7\u27e824\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match calls to GET /hello/1 and GET /hello/2\ns.mock(\"GET\",\n  mockito::Matcher::Regex(r\"^/hello/(1|2)$\".to_string())\n ).create();\n```\n\nOr you can catch all requests, by using the `Matcher::Any`\u27e825\u27e9 variant:\n### \u00a7\u27e826\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match any GET request\ns.mock(\"GET\", mockito::Matcher::Any).create();\n```\n\n## \u00a7\u27e827\u27e9Matching by query\nYou can match the query part by using the `Mock::match_query`\u27e828\u27e9 function together with the various matchers, most notably `Matcher::UrlEncoded`\u27e829\u27e9:\n### \u00a7\u27e830\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests containing the URL-encoded\n// query parameter `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into()))\n .create();\n// This will match requests containing the URL-encoded\n// query parameters `hello=world` and `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::AllOf(vec![\n  mockito::Matcher::UrlEncoded(\"hello\".into(), \"world\".into()),\n  mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into())\n ]))\n .create();\n// You can achieve similar results with the regex matcher\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::Regex(\"hello=world\".into()))\n .create();\n```\n\nNote that the key/value arguments for `Matcher::UrlEncoded`\u27e829\u27e9 should be left in plain (unencoded) format.\nYou can also specify the query as part of the path argument in a `mock`\u27e831\u27e9 call, in which case an exact match will be performed:\n### \u00a7\u27e832\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will perform a full match against the query part\ns.mock(\"GET\", \"/test?hello=world\").create();\n```\n\nIf you\u2019d like to ignore the query entirely, use the `Matcher::Any`\u27e825\u27e9 variant:\n### \u00a7\u27e833\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests to GET /test with any query\ns.mock(\"GET\", \"/test\").match_query(mockito::Matcher::Any).create();\n```\n\n## \u00a7\u27e834\u27e9Matching by header\nBy default, headers are compared by their exact value. The header name letter case is ignored though.\n### \u00a7\u27e835\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"application/json\")\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"text/plain\")\n .with_body(\"world\")\n .create();\n// JSON requests to GET /hello will respond with JSON, while plain requests\n// will respond with text.\n```\n\nYou can also match a header value with a _regular expressions_ , by using the `Matcher::Regex`\u27e836\u27e9 matcher:\n### \u00a7\u27e837\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Regex(r\".*json.*\".to_string()))\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\n```\n\nOr you can match a header _only by its field name_ , by setting the `Mock::match_header`\u27e838\u27e9 value to `Matcher::Any`\u27e825\u27e9.\n### \u00a7\u27e839\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Any)\n .with_body(\"something\")\n .create();\n// Requests containing any content-type header value will be mocked.\n// Requests not containing this header will return `501 Not Implemented`.\n```\n\nYou can mock requests that should be _missing a particular header field_ , by setting the `Mock::match_header`\u27e838\u27e9 value to `Matcher::Missing`\u27e840\u27e9.\n### \u00a7\u27e841\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"authorization\", mockito::Matcher::Missing)\n .with_body(\"no authorization header\")\n .create();\n// Requests without the authorization header will be matched.\n// Requests containing the authorization header will return `501 Mock Not Found`.\n```\n\n## \u00a7\u27e842\u27e9Matching by body\nYou can match a request by its body by using the `Mock::match_body`\u27e843\u27e9 method. By default, the request body is ignored, similar to passing the `Matcher::Any`\u27e825\u27e9 argument to the `Mock::match_body`\u27e843\u27e9 method.\nYou can match a body by an exact value:\n### \u00a7\u27e844\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is \"hello\"\ns.mock(\"POST\", \"/\").match_body(\"hello\").create();\n```\n\nOr you can match the body by using a regular expression:\n### \u00a7\u27e845\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body *contains* the word \"hello\" (e.g. \"hello world\")\ns.mock(\"POST\", \"/\").match_body(\n  mockito::Matcher::Regex(\"hello\".to_string())\n ).create();\n```\n\nOr you can match the body using a JSON object:\n### \u00a7\u27e846\u27e9Example\n```\n#[macro_use]\nextern crate serde_json;\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\").match_body(mockito::Matcher::Json(json!({\"hello\": \"world\"}))).create();\n```\n\nIf `serde_json::json!` is not exposed, you can use `Matcher::JsonString`\u27e847\u27e9 the same way, but by passing a `String` to the matcher:\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string())\n  )\n  .create();\n```\n\n## \u00a7\u27e848\u27e9The `AnyOf` matcher\nThe `Matcher::AnyOf`\u27e849\u27e9 construct takes a vector of matchers as arguments and will be enabled if at least one of the provided matchers matches the request.\n### \u00a7\u27e850\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is either `hello=world` or `{\"hello\":\"world\"}`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AnyOf(vec![\n      mockito::Matcher::Exact(\"hello=world\".to_string()),\n      mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string()),\n    ])\n   )\n  .create();\n```\n\n## \u00a7\u27e851\u27e9The `AllOf` matcher\nThe `Matcher::AllOf`\u27e852\u27e9 construct takes a vector of matchers as arguments and will be enabled if all the provided matchers match the request.\n### \u00a7\u27e853\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body contains both `hello` and `world`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AllOf(vec![\n      mockito::Matcher::Regex(\"hello\".to_string()),\n      mockito::Matcher::Regex(\"world\".to_string()),\n    ])\n   )\n  .create();\n```\n\n## \u00a7\u27e854\u27e9Custom matchers\nIf you need a more custom matcher, you can use the `Mock::match_request`\u27e855\u27e9 function, which takes a closure and exposes the `Request`\u27e856\u27e9 object as an argument. The closure should return a boolean value.\n### \u00a7\u27e857\u27e9Example\n```\nuse mockito::Matcher;\nlet mut s = mockito::Server::new();\n// This will match requests that have the x-test header set\n// and contain the word \"hello\" inside the body\ns.mock(\"GET\", \"/\")\n  .match_request(|request| {\n    request.has_header(\"x-test\") &&\n      request.utf8_lossy_body().unwrap().contains(\"hello\")\n  })\n  .create();\n```\n\n## \u00a7\u27e858\u27e9Asserts\nYou can use the `Mock::assert`\u27e86\u27e9 method to **assert that a mock was called**. In other words, `Mock#assert` can validate that your code performed the expected HTTP request.\nBy default, the method expects only **one** request to your mock.\n### \u00a7\u27e859\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").create();\n{\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nWhen several mocks can match a request, Mockito applies the first one that still expects requests. You can use this behaviour to provide **different responses for subsequent requests to the same endpoint**.\n### \u00a7\u27e860\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet english_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"good bye\").create();\nlet french_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"au revoir\").create();\n{\n  // Place a request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nenglish_hello_mock.assert();\n{\n  // Place another request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nfrench_hello_mock.assert();\n```\n\nIf you\u2019re expecting more than 1 request, you can use the `Mock::expect`\u27e861\u27e9 method to specify the exact amount of requests:\n### \u00a7\u27e862\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect(3).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nYou can also work with ranges, by using the `Mock::expect_at_least`\u27e863\u27e9 and `Mock::expect_at_most`\u27e864\u27e9 methods:\n### \u00a7\u27e865\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect_at_least(2).expect_at_most(4).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nThe errors produced by the `Mock::assert`\u27e86\u27e9 method contain information about the tested mock, but also about the **last unmatched request** , which can be very useful to track down an error in your implementation or a missing or incomplete mock. A colored diff is also displayed:\n![colored-diff.png\u27e87\u27e9]\nColor output is enabled by default, but can be toggled with the `color` feature flag.\nHere\u2019s an example of how a `Mock::assert`\u27e86\u27e9 error looks like:\n```\n> Expected 1 request(s) to:\nPOST /users?number=one\nbob\n...but received 0\n> The last unmatched request was:\nPOST /users?number=two\ncontent-length: 5\nalice\n> Difference:\n# A colored diff\n\n```\n\nYou can also use the `Mock::matched`\u27e866\u27e9 method to return a boolean for whether the mock was called the correct number of times without panicking\n### \u00a7\u27e867\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/\").create();\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(mock.matched());\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(!mock.matched());\n```\n\n## \u00a7\u27e868\u27e9Non-matching calls\nAny calls to the Mockito server that are not matched will return _501 Not Implemented_.\nNote that **mocks are matched in reverse order** - the most recent one wins.\n## \u00a7\u27e869\u27e9Cleaning up\nAs mentioned earlier, mocks are cleaned up whenever the server goes out of scope. If you need to remove them earlier, you can call `Server::reset`\u27e870\u27e9 to remove all mocks registered so far:\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/1\").create();\ns.mock(\"GET\", \"/2\").create();\ns.mock(\"GET\", \"/3\").create();\ns.reset();\n// Nothing is mocked at this point\n```\n\n\u2026or you can call `Mock::remove`\u27e89\u27e9 to remove a single mock:\n```\nlet mut s = mockito::Server::new();\nlet m1 = s.mock(\"GET\", \"/1\").create();\nlet m2 = s.mock(\"GET\", \"/2\").create();\nm1.remove();\n// Only m2 is available at this point\n```\n\n## \u00a7\u27e871\u27e9Debug\nMockito uses the `env_logger` crate under the hood to provide useful debugging information.\nIf you\u2019d like to activate the debug output, introduce the env_logger\u27e872\u27e9 crate to your project and initialize it before each test that needs debugging:\n```\n#[test]\nfn example_test() {\n  let _ = env_logger::try_init();\n  // ...\n}\n```\n\nRun your tests with:\n```\nRUST_LOG=mockito=debug cargo test\n```\n\n## Structs\u00a7\u27e873\u27e9\n\nError\u27e874\u27e9\n    Contains information about an error occurence\n\nMock\u27e875\u27e9\n    Stores information about a mocked request. Should be initialized via `Server::mock()`.\n\nRequest\u27e856\u27e9\n    Stores a HTTP request\n\nServer\u27e876\u27e9\n    One instance of the mock server.\n\nServerGuard\u27e877\u27e9\n    A handle around a pooled `Server` object which dereferences to `Server`.\n\nServerOpts\u27e878\u27e9\n    Options to configure a mock server. Provides a default implementation.\n## Enums\u00a7\u27e879\u27e9\n\nErrorKind\u27e880\u27e9\n    The type of an error\n\nMatcher\u27e821\u27e9\n    Allows matching the request path, headers or body in multiple ways: by the exact value, by any value (as long as it is present), by regular expression or by checking that a particular header is missing.\n## Traits\u00a7\u27e881\u27e9\n\nIntoHeaderName\u27e882\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/mockito/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/mockito/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/mockito/latest/src/mockito/lib.rs.html#1-746: Source\n\u27e84\u27e9 https://docs.rs/mockito/latest/mockito/#features: \u00a7\n\u27e85\u27e9 https://docs.rs/mockito/latest/mockito/#getting-started: \u00a7\n\u27e86\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert: method mockito::Mock::assert - `Mock::assert`\n\u27e87\u27e9 https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png: colored-diff.png\n\u27e88\u27e9 https://docs.rs/mockito/latest/mockito/#lifetime: \u00a7\n\u27e89\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove: method mockito::Mock::remove - `Mock::remove`\n\u27e810\u27e9 https://docs.rs/mockito/latest/mockito/#async: \u00a7\n\u27e811\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_async: associated function mockito::Server::new_async - `Server::new_async`\n\u27e812\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts_async: associated function mockito::Server::new_with_opts_async - `Server::new_with_opts_async`\n\u27e813\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.create_async: method mockito::Mock::create_async - `Mock::create_async`\n\u27e814\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert_async: method mockito::Mock::assert_async - `Mock::assert_async`\n\u27e815\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched_async: method mockito::Mock::matched_async - `Mock::matched_async`\n\u27e816\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove_async: method mockito::Mock::remove_async - `Mock::remove_async`\n\u27e817\u27e9 https://docs.rs/mockito/latest/mockito/#configuring-the-server: \u00a7\n\u27e818\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new: associated function mockito::Server::new - `Server::new()`\n\u27e819\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts: associated function mockito::Server::new_with_opts - `Server::new_with_opts`\n\u27e820\u27e9 https://docs.rs/mockito/latest/mockito/#matchers: \u00a7\n\u27e821\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html: enum mockito::Matcher - `Matcher`\n\u27e822\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-path-and-query: \u00a7\n\u27e823\u27e9 https://docs.rs/mockito/latest/mockito/#example: \u00a7\n\u27e824\u27e9 https://docs.rs/mockito/latest/mockito/#example-1: \u00a7\n\u27e825\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any: variant mockito::Matcher::Any - `Matcher::Any`\n\u27e826\u27e9 https://docs.rs/mockito/latest/mockito/#example-2: \u00a7\n\u27e827\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-query: \u00a7\n\u27e828\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_query: method mockito::Mock::match_query - `Mock::match_query`\n\u27e829\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded: variant mockito::Matcher::UrlEncoded - `Matcher::UrlEncoded`\n\u27e830\u27e9 https://docs.rs/mockito/latest/mockito/#example-3: \u00a7\n\u27e831\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.mock: method mockito::Server::mock - `mock`\n\u27e832\u27e9 https://docs.rs/mockito/latest/mockito/#example-4: \u00a7\n\u27e833\u27e9 https://docs.rs/mockito/latest/mockito/#example-5: \u00a7\n\u27e834\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-header: \u00a7\n\u27e835\u27e9 https://docs.rs/mockito/latest/mockito/#example-6: \u00a7\n\u27e836\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Regex: variant mockito::Matcher::Regex - `Matcher::Regex`\n\u27e837\u27e9 https://docs.rs/mockito/latest/mockito/#example-7: \u00a7\n\u27e838\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header: method mockito::Mock::match_header - `Mock::match_header`\n\u27e839\u27e9 https://docs.rs/mockito/latest/mockito/#example-8: \u00a7\n\u27e840\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Missing: variant mockito::Matcher::Missing - `Matcher::Missing`\n\u27e841\u27e9 https://docs.rs/mockito/latest/mockito/#example-9: \u00a7\n\u27e842\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-body: \u00a7\n\u27e843\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body: method mockito::Mock::match_body - `Mock::match_body`\n\u27e844\u27e9 https://docs.rs/mockito/latest/mockito/#example-10: \u00a7\n\u27e845\u27e9 https://docs.rs/mockito/latest/mockito/#example-11: \u00a7\n\u27e846\u27e9 https://docs.rs/mockito/latest/mockito/#example-12: \u00a7\n\u27e847\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.JsonString: variant mockito::Matcher::JsonString - `Matcher::JsonString`\n\u27e848\u27e9 https://docs.rs/mockito/latest/mockito/#the-anyof-matcher: \u00a7\n\u27e849\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AnyOf: variant mockito::Matcher::AnyOf - `Matcher::AnyOf`\n\u27e850\u27e9 https://docs.rs/mockito/latest/mockito/#example-13: \u00a7\n\u27e851\u27e9 https://docs.rs/mockito/latest/mockito/#the-allof-matcher: \u00a7\n\u27e852\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AllOf: variant mockito::Matcher::AllOf - `Matcher::AllOf`\n\u27e853\u27e9 https://docs.rs/mockito/latest/mockito/#example-14: \u00a7\n\u27e854\u27e9 https://docs.rs/mockito/latest/mockito/#custom-matchers: \u00a7\n\u27e855\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_request: method mockito::Mock::match_request - `Mock::match_request`\n\u27e856\u27e9 https://docs.rs/mockito/latest/mockito/struct.Request.html: struct mockito::Request - `Request`\n\u27e857\u27e9 https://docs.rs/mockito/latest/mockito/#example-15: \u00a7\n\u27e858\u27e9 https://docs.rs/mockito/latest/mockito/#asserts: \u00a7\n\u27e859\u27e9 https://docs.rs/mockito/latest/mockito/#example-16: \u00a7\n\u27e860\u27e9 https://docs.rs/mockito/latest/mockito/#example-17: \u00a7\n\u27e861\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect: method mockito::Mock::expect - `Mock::expect`\n\u27e862\u27e9 https://docs.rs/mockito/latest/mockito/#example-18: \u00a7\n\u27e863\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_least: method mockito::Mock::expect_at_least - `Mock::expect_at_least`\n\u27e864\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_most: method mockito::Mock::expect_at_most - `Mock::expect_at_most`\n\u27e865\u27e9 https://docs.rs/mockito/latest/mockito/#example-19: \u00a7\n\u27e866\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched: method mockito::Mock::matched - `Mock::matched`\n\u27e867\u27e9 https://docs.rs/mockito/latest/mockito/#example-20: \u00a7\n\u27e868\u27e9 https://docs.rs/mockito/latest/mockito/#non-matching-calls: \u00a7\n\u27e869\u27e9 https://docs.rs/mockito/latest/mockito/#cleaning-up: \u00a7\n\u27e870\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.reset: method mockito::Server::reset - `Server::reset`\n\u27e871\u27e9 https://docs.rs/mockito/latest/mockito/#debug: \u00a7\n\u27e872\u27e9 https://crates.rs/crates/env_logger: env_logger\n\u27e873\u27e9 https://docs.rs/mockito/latest/mockito/#structs: \u00a7\n\u27e874\u27e9 https://docs.rs/mockito/latest/mockito/struct.Error.html: struct mockito::Error - Error\n\u27e875\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html: struct mockito::Mock - Mock\n\u27e876\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html: struct mockito::Server - Server\n\u27e877\u27e9 https://docs.rs/mockito/latest/mockito/struct.ServerGuard.html: struct mockito::ServerGuard - ServerGuard\n\u27e878\u27e9 https://docs.rs/mockito/latest/mockito/struct.ServerOpts.html: struct mockito::ServerOpts - ServerOpts\n\u27e879\u27e9 https://docs.rs/mockito/latest/mockito/#enums: \u00a7\n\u27e880\u27e9 https://docs.rs/mockito/latest/mockito/enum.ErrorKind.html: enum mockito::ErrorKind - ErrorKind\n\u27e881\u27e9 https://docs.rs/mockito/latest/mockito/#traits: \u00a7\n\u27e882\u27e9 https://docs.rs/mockito/latest/mockito/trait.IntoHeaderName.html: trait mockito::IntoHeaderName - IntoHeaderName\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `mockito` crate is a Rust library for creating and managing HTTP mocks, ideal for integration testing or offline development. It supports HTTP/1 and HTTP/2, parallel test execution, sync and async interfaces, and customizable request matchers (e.g., regex, JSON, headers, query parameters). Key features include mock validation, colored diffs for unmatched requests, multiple server support, and a simple API for configuring and asserting mocks.",
    "feature_summary": null,
    "use_case": "DevTools",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1:\n\u2705 Factual: Mockito allows you to match HTTP request headers using exact values, regular expressions, or by checking for their absence, using matchers like `Matcher::Exact`, `Matcher::Regex`, and `Matcher::Missing`.  \n\u274c Counterfactual: Mockito only supports exact header matching and does not allow matching headers using regular expressions or detecting missing headers.\n\n---\n\n### Pair 2:\n\u2705 Factual: Mockito provides both synchronous and asynchronous APIs, enabling developers to write async tests using methods like `Server::new_async()` and `Mock::create_async()`.  \n\u274c Counterfactual: Mockito only supports synchronous APIs and lacks support for asynchronous testing methods.\n\n---\n\n### Pair 3:\n\u2705 Factual: Mockito can mock multiple servers simultaneously, allowing you to simulate requests to different hosts by creating separate `Server` instances.  \n\u274c Counterfactual: Mockito restricts users to a single server instance and does not support mocking multiple hosts in parallel.\n\n---\n\n### Pair 4:\n\u2705 Factual: When a mock server goes out of scope, all associated mocks are automatically removed, ensuring clean-up of resources.  \n\u274c Counterfactual: Mocks persist indefinitely even after the server goes out of scope, requiring manual removal every time.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}