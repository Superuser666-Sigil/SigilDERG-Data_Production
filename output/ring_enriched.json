{
    "name": "ring",
    "version": "0.17.14",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/ring/latest/ring/all.html \"show sidebar\")\n# Crate ringCopy item path\n[Settings](https://docs.rs/ring/latest/settings.html)\n[Help](https://docs.rs/ring/latest/help.html)\nSummary[Source](https://docs.rs/ring/latest/src/ring/lib.rs.html#15-177)\nExpand description\n## [\u00a7](https://docs.rs/ring/latest/ring/#feature-flags)Feature Flags\nFeature | Description   \n---|---  \n`alloc (default)` | Enable features that require use of the heap, RSA in particular.   \n`less-safe-getrandom-custom-or-rdrand` | Treat user-provided (\"custom\") and RDRAND-based `getrandom` implementations as secure random number generators (see `SecureRandom`). This feature only works with `os = \"none\"` targets. See [ `register_custom_getrandom` ](https://docs.rs/getrandom/0.2.10/getrandom/macro.register_custom_getrandom.html) and [ RDRAND on x86 ](https://docs.rs/getrandom/0.2.10/getrandom/#rdrand-on-x86) for additional details.   \n`less-safe-getrandom-espidf` | Treat getrandom as a secure random number generator (see `SecureRandom`) on the esp-idf target. While the esp-idf target does have hardware RNG, it is beyond the scope of ring to ensure its configuration. This feature allows ring to build on esp-idf despite the likelihood that RNG is not secure. This feature only works with `os = espidf` targets. See [ ](https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-reference/system/random.html)  \n`std` | Enable features that use libstd, in particular `std::error::Error` integration. Implies `alloc`.   \n`wasm32_unknown_unknown_js` | When this feature is enabled, for the wasm32-unknown-unknown target, Web APIs will be used to implement features like `ring::rand` that require an operating environment of some kind. This has no effect for any other target. This enables the `getrandom` crate's `js` feature.   \n## Modules[\u00a7](https://docs.rs/ring/latest/ring/#modules)\n\n[aead](https://docs.rs/ring/latest/ring/aead/index.html \"mod ring::aead\")\n    Authenticated Encryption with Associated Data (AEAD).\n\n[agreement](https://docs.rs/ring/latest/ring/agreement/index.html \"mod ring::agreement\")\n    Key Agreement: ECDH, including X25519.\n\n[digest](https://docs.rs/ring/latest/ring/digest/index.html \"mod ring::digest\")\n    SHA-2 and the legacy SHA-1 digest algorithm.\n\n[error](https://docs.rs/ring/latest/ring/error/index.html \"mod ring::error\")\n    Error reporting.\n\n[hkdf](https://docs.rs/ring/latest/ring/hkdf/index.html \"mod ring::hkdf\")\n    HMAC-based Extract-and-Expand Key Derivation Function.\n\n[hmac](https://docs.rs/ring/latest/ring/hmac/index.html \"mod ring::hmac\")\n    HMAC is specified in [RFC 2104](https://tools.ietf.org/html/rfc2104).\n\n[io](https://docs.rs/ring/latest/ring/io/index.html \"mod ring::io\")\n    Serialization and deserialization.\n\n[pbkdf2](https://docs.rs/ring/latest/ring/pbkdf2/index.html \"mod ring::pbkdf2\")\n    PBKDF2 derivation and verification.\n\n[pkcs8](https://docs.rs/ring/latest/ring/pkcs8/index.html \"mod ring::pkcs8\")\n    PKCS#8 is specified in [RFC 5958](https://tools.ietf.org/html/rfc5958).\n\n[rand](https://docs.rs/ring/latest/ring/rand/index.html \"mod ring::rand\")\n    Cryptographic pseudo-random number generation.\n\n[rsa](https://docs.rs/ring/latest/ring/rsa/index.html \"mod ring::rsa\")\n    RSA.\n\n[signature](https://docs.rs/ring/latest/ring/signature/index.html \"mod ring::signature\")\n    Public key signatures: signing and verification.\n## Macros[\u00a7](https://docs.rs/ring/latest/ring/#macros)\n\n[test_file](https://docs.rs/ring/latest/ring/macro.test_file.html \"macro ring::test_file\")Deprecated\n    References a test input file.\n",
        "markdown_with_citations": "[](https://docs.rs/ring/latest/ring/all.html \"show sidebar\")\n# Crate ringCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Feature Flags\nFeature | Description   \n---|---  \n`alloc (default)` | Enable features that require use of the heap, RSA in particular.   \n`less-safe-getrandom-custom-or-rdrand` | Treat user-provided (\"custom\") and RDRAND-based `getrandom` implementations as secure random number generators (see `SecureRandom`). This feature only works with `os = \"none\"` targets. See  `register_custom_getrandom` \u27e85\u27e9 and  RDRAND on x86 \u27e86\u27e9 for additional details.   \n`less-safe-getrandom-espidf` | Treat getrandom as a secure random number generator (see `SecureRandom`) on the esp-idf target. While the esp-idf target does have hardware RNG, it is beyond the scope of ring to ensure its configuration. This feature allows ring to build on esp-idf despite the likelihood that RNG is not secure. This feature only works with `os = espidf` targets. See  \u27e87\u27e9  \n`std` | Enable features that use libstd, in particular `std::error::Error` integration. Implies `alloc`.   \n`wasm32_unknown_unknown_js` | When this feature is enabled, for the wasm32-unknown-unknown target, Web APIs will be used to implement features like `ring::rand` that require an operating environment of some kind. This has no effect for any other target. This enables the `getrandom` crate's `js` feature.   \n## Modules\u00a7\u27e88\u27e9\n\naead\u27e89\u27e9\n    Authenticated Encryption with Associated Data (AEAD).\n\nagreement\u27e810\u27e9\n    Key Agreement: ECDH, including X25519.\n\ndigest\u27e811\u27e9\n    SHA-2 and the legacy SHA-1 digest algorithm.\n\nerror\u27e812\u27e9\n    Error reporting.\n\nhkdf\u27e813\u27e9\n    HMAC-based Extract-and-Expand Key Derivation Function.\n\nhmac\u27e814\u27e9\n    HMAC is specified in RFC 2104\u27e815\u27e9.\n\nio\u27e816\u27e9\n    Serialization and deserialization.\n\npbkdf2\u27e817\u27e9\n    PBKDF2 derivation and verification.\n\npkcs8\u27e818\u27e9\n    PKCS#8 is specified in RFC 5958\u27e819\u27e9.\n\nrand\u27e820\u27e9\n    Cryptographic pseudo-random number generation.\n\nrsa\u27e821\u27e9\n    RSA.\n\nsignature\u27e822\u27e9\n    Public key signatures: signing and verification.\n## Macros\u00a7\u27e823\u27e9\n\ntest_file\u27e824\u27e9Deprecated\n    References a test input file.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ring/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ring/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ring/latest/src/ring/lib.rs.html#15-177: Source\n\u27e84\u27e9 https://docs.rs/ring/latest/ring/#feature-flags: \u00a7\n\u27e85\u27e9 https://docs.rs/getrandom/0.2.10/getrandom/macro.register_custom_getrandom.html:  `register_custom_getrandom` \n\u27e86\u27e9 https://docs.rs/getrandom/0.2.10/getrandom/#rdrand-on-x86:  RDRAND on x86 \n\u27e87\u27e9 https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-reference/system/random.html:  \n\u27e88\u27e9 https://docs.rs/ring/latest/ring/#modules: \u00a7\n\u27e89\u27e9 https://docs.rs/ring/latest/ring/aead/index.html: mod ring::aead - aead\n\u27e810\u27e9 https://docs.rs/ring/latest/ring/agreement/index.html: mod ring::agreement - agreement\n\u27e811\u27e9 https://docs.rs/ring/latest/ring/digest/index.html: mod ring::digest - digest\n\u27e812\u27e9 https://docs.rs/ring/latest/ring/error/index.html: mod ring::error - error\n\u27e813\u27e9 https://docs.rs/ring/latest/ring/hkdf/index.html: mod ring::hkdf - hkdf\n\u27e814\u27e9 https://docs.rs/ring/latest/ring/hmac/index.html: mod ring::hmac - hmac\n\u27e815\u27e9 https://tools.ietf.org/html/rfc2104: RFC 2104\n\u27e816\u27e9 https://docs.rs/ring/latest/ring/io/index.html: mod ring::io - io\n\u27e817\u27e9 https://docs.rs/ring/latest/ring/pbkdf2/index.html: mod ring::pbkdf2 - pbkdf2\n\u27e818\u27e9 https://docs.rs/ring/latest/ring/pkcs8/index.html: mod ring::pkcs8 - pkcs8\n\u27e819\u27e9 https://tools.ietf.org/html/rfc5958: RFC 5958\n\u27e820\u27e9 https://docs.rs/ring/latest/ring/rand/index.html: mod ring::rand - rand\n\u27e821\u27e9 https://docs.rs/ring/latest/ring/rsa/index.html: mod ring::rsa - rsa\n\u27e822\u27e9 https://docs.rs/ring/latest/ring/signature/index.html: mod ring::signature - signature\n\u27e823\u27e9 https://docs.rs/ring/latest/ring/#macros: \u00a7\n\u27e824\u27e9 https://docs.rs/ring/latest/ring/macro.test_file.html: macro ring::test_file - test_file\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `ring` crate provides a collection of cryptographic primitives and utilities focused on security and performance. Key features include support for AEAD encryption, ECDH key agreement, SHA-2 and SHA-1 digests, HMAC, PBKDF2, RSA, PKCS#8, and cryptographic random number generation. It offers optional features for heap allocation, WebAssembly support, and platform-specific configurations like `esp-idf`.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Cryptographic Random Number Generation  \n\u2705 Factual: The `ring` crate provides cryptographic pseudo-random number generation via the `rand` module, which can utilize secure sources like hardware RNG or platform-specific APIs.  \n\u274c Counterfactual: The `ring` crate's `rand` module generates random numbers using non-secure algorithms like linear congruential generators (LCGs), making it unsuitable for cryptographic applications.  \n\n---\n\n### Pair 2: RSA Support and Heap Usage  \n\u2705 Factual: The `alloc` feature flag in the `ring` crate enables RSA functionality, as RSA operations require dynamic memory allocation.  \n\u274c Counterfactual: The `ring` crate provides RSA functionality without requiring dynamic memory allocation, making it suitable for environments without heap support.  \n\n---\n\n### Pair 3: WebAssembly Compatibility  \n\u2705 Factual: The `wasm32_unknown_unknown_js` feature allows the `ring` crate to use Web APIs for cryptographic operations when targeting `wasm32-unknown-unknown`.  \n\u274c Counterfactual: The `ring` crate does not support WebAssembly environments and cannot perform cryptographic operations on `wasm32-unknown-unknown` targets.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}