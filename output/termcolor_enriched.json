{
    "name": "termcolor",
    "version": "1.4.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/termcolor/latest/termcolor/all.html \"show sidebar\")\n# Crate termcolorCopy item path\n[Settings](https://docs.rs/termcolor/latest/settings.html)\n[Help](https://docs.rs/termcolor/latest/help.html)\nSummary[Source](https://docs.rs/termcolor/latest/src/termcolor/lib.rs.html#1-2572)\nExpand description\nThis crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.\nThis crate also provides platform independent support for writing colored text to an in memory buffer. While this is easy to do with ANSI escape sequences (because they are in the buffer themselves), it is trickier to do with the Windows console API, which requires synchronous communication.\nIn ANSI mode, this crate also provides support for writing hyperlinks.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#organization)Organization\nThe `WriteColor` trait extends the `io::Write` trait with methods for setting colors or resetting them.\n`StandardStream` and `StandardStreamLock` both satisfy `WriteColor` and are analogous to `std::io::Stdout` and `std::io::StdoutLock`, or `std::io::Stderr` and `std::io::StderrLock`.\n`Buffer` is an in memory buffer that supports colored text. In a parallel program, each thread might write to its own buffer. A buffer can be printed to using a `BufferWriter`. The advantage of this design is that each thread can work in parallel on a buffer without having to synchronize access to global resources such as the Windows console. Moreover, this design also prevents interleaving of buffer output.\n`Ansi` and `NoColor` both satisfy `WriteColor` for arbitrary implementors of `io::Write`. These types are useful when you know exactly what you need. An analogous type for the Windows console is not provided since it cannot exist.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#example-using-standardstream)Example: using `StandardStream`\nThe `StandardStream` type in this crate works similarly to `std::io::Stdout`, except it is augmented with methods for coloring by the `WriteColor` trait. For example, to write some green text:\n```\nuse std::io::Write;\nuse termcolor::{Color, ColorChoice, ColorSpec, StandardStream, WriteColor};\nlet mut stdout = StandardStream::stdout(ColorChoice::Always);\nstdout.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut stdout, \"green text!\")?;\n```\n\nNote that any text written to the terminal now will be colored green when using ANSI escape sequences, even if it is written via stderr, and even if stderr had previously been set to `Color::Red`. Users will need to manage any color changes themselves by calling [`WriteColor::set_color`](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.set_color), and this may include calling [`WriteColor::reset`](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.reset) before the program exits to a shell.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#example-using-bufferwriter)Example: using `BufferWriter`\nA `BufferWriter` can create buffers and write buffers to stdout or stderr. It does _not_ implement `io::Write` or `WriteColor` itself. Instead, `Buffer` implements `io::Write` and `io::WriteColor`.\nThis example shows how to print some green text to stderr.\n```\nuse std::io::Write;\nuse termcolor::{BufferWriter, Color, ColorChoice, ColorSpec, WriteColor};\nlet mut bufwtr = BufferWriter::stderr(ColorChoice::Always);\nlet mut buffer = bufwtr.buffer();\nbuffer.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut buffer, \"green text!\")?;\nbufwtr.print(&buffer)?;\n```\n\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#detecting-presence-of-a-terminal)Detecting presence of a terminal\nIn many scenarios when using color, one often wants to enable colors automatically when writing to a terminal and disable colors automatically when writing to anything else. The typical way to achieve this in Unix environments is via libc\u2019s [`isatty`](https://man7.org/linux/man-pages/man3/isatty.3.html) function. Unfortunately, this notoriously does not work well in Windows environments. To work around that, the recommended solution is to use the standard library\u2019s [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait. It goes out of its way to get it as right as possible in Windows environments.\nFor example, in a command line application that exposes a `--color` flag, your logic for how to enable colors might look like this:\n[\u24d8](https://docs.rs/termcolor/latest/termcolor/ \"This example is not tested\")```\nuse std::io::IsTerminal;\nuse termcolor::{ColorChoice, StandardStream};\nlet preference = argv.get_flag(\"color\").unwrap_or(\"auto\");\nlet mut choice = preference.parse::<ColorChoice>()?;\nif choice == ColorChoice::Auto && !std::io::stdin().is_terminal() {\n  choice = ColorChoice::Never;\n}\nlet stdout = StandardStream::stdout(choice);\n// ... write to stdout\n```\n\nCurrently, `termcolor` does not provide anything to do this for you.\n## Structs[\u00a7](https://docs.rs/termcolor/latest/termcolor/#structs)\n\n[Ansi](https://docs.rs/termcolor/latest/termcolor/struct.Ansi.html \"struct termcolor::Ansi\")\n    Satisfies `WriteColor` using standard ANSI escape sequences.\n\n[Buffer](https://docs.rs/termcolor/latest/termcolor/struct.Buffer.html \"struct termcolor::Buffer\")\n    Write colored text to memory.\n\n[BufferWriter](https://docs.rs/termcolor/latest/termcolor/struct.BufferWriter.html \"struct termcolor::BufferWriter\")\n    Writes colored buffers to stdout or stderr.\n\n[BufferedStandardStream](https://docs.rs/termcolor/latest/termcolor/struct.BufferedStandardStream.html \"struct termcolor::BufferedStandardStream\")\n    Like `StandardStream`, but does buffered writing.\n\n[ColorChoiceParseError](https://docs.rs/termcolor/latest/termcolor/struct.ColorChoiceParseError.html \"struct termcolor::ColorChoiceParseError\")\n    An error that occurs when parsing a `ColorChoice` fails.\n\n[ColorSpec](https://docs.rs/termcolor/latest/termcolor/struct.ColorSpec.html \"struct termcolor::ColorSpec\")\n    A color specification.\n\n[HyperlinkSpec](https://docs.rs/termcolor/latest/termcolor/struct.HyperlinkSpec.html \"struct termcolor::HyperlinkSpec\")\n    A hyperlink specification.\n\n[NoColor](https://docs.rs/termcolor/latest/termcolor/struct.NoColor.html \"struct termcolor::NoColor\")\n    Satisfies `WriteColor` but ignores all color options.\n\n[ParseColorError](https://docs.rs/termcolor/latest/termcolor/struct.ParseColorError.html \"struct termcolor::ParseColorError\")\n    An error from parsing an invalid color specification.\n\n[StandardStream](https://docs.rs/termcolor/latest/termcolor/struct.StandardStream.html \"struct termcolor::StandardStream\")\n    Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.\n\n[StandardStreamLock](https://docs.rs/termcolor/latest/termcolor/struct.StandardStreamLock.html \"struct termcolor::StandardStreamLock\")\n    `StandardStreamLock` is a locked reference to a `StandardStream`.\n## Enums[\u00a7](https://docs.rs/termcolor/latest/termcolor/#enums)\n\n[Color](https://docs.rs/termcolor/latest/termcolor/enum.Color.html \"enum termcolor::Color\")\n    The set of available colors for the terminal foreground/background.\n\n[ColorChoice](https://docs.rs/termcolor/latest/termcolor/enum.ColorChoice.html \"enum termcolor::ColorChoice\")\n    ColorChoice represents the color preferences of an end user.\n## Traits[\u00a7](https://docs.rs/termcolor/latest/termcolor/#traits)\n\n[WriteColor](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html \"trait termcolor::WriteColor\")\n    This trait describes the behavior of writers that support colored output.\n",
        "markdown_with_citations": "[](https://docs.rs/termcolor/latest/termcolor/all.html \"show sidebar\")\n# Crate termcolorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.\nThis crate also provides platform independent support for writing colored text to an in memory buffer. While this is easy to do with ANSI escape sequences (because they are in the buffer themselves), it is trickier to do with the Windows console API, which requires synchronous communication.\nIn ANSI mode, this crate also provides support for writing hyperlinks.\n## \u00a7\u27e84\u27e9Organization\nThe `WriteColor` trait extends the `io::Write` trait with methods for setting colors or resetting them.\n`StandardStream` and `StandardStreamLock` both satisfy `WriteColor` and are analogous to `std::io::Stdout` and `std::io::StdoutLock`, or `std::io::Stderr` and `std::io::StderrLock`.\n`Buffer` is an in memory buffer that supports colored text. In a parallel program, each thread might write to its own buffer. A buffer can be printed to using a `BufferWriter`. The advantage of this design is that each thread can work in parallel on a buffer without having to synchronize access to global resources such as the Windows console. Moreover, this design also prevents interleaving of buffer output.\n`Ansi` and `NoColor` both satisfy `WriteColor` for arbitrary implementors of `io::Write`. These types are useful when you know exactly what you need. An analogous type for the Windows console is not provided since it cannot exist.\n## \u00a7\u27e85\u27e9Example: using `StandardStream`\nThe `StandardStream` type in this crate works similarly to `std::io::Stdout`, except it is augmented with methods for coloring by the `WriteColor` trait. For example, to write some green text:\n```\nuse std::io::Write;\nuse termcolor::{Color, ColorChoice, ColorSpec, StandardStream, WriteColor};\nlet mut stdout = StandardStream::stdout(ColorChoice::Always);\nstdout.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut stdout, \"green text!\")?;\n```\n\nNote that any text written to the terminal now will be colored green when using ANSI escape sequences, even if it is written via stderr, and even if stderr had previously been set to `Color::Red`. Users will need to manage any color changes themselves by calling `WriteColor::set_color`\u27e86\u27e9, and this may include calling `WriteColor::reset`\u27e87\u27e9 before the program exits to a shell.\n## \u00a7\u27e88\u27e9Example: using `BufferWriter`\nA `BufferWriter` can create buffers and write buffers to stdout or stderr. It does _not_ implement `io::Write` or `WriteColor` itself. Instead, `Buffer` implements `io::Write` and `io::WriteColor`.\nThis example shows how to print some green text to stderr.\n```\nuse std::io::Write;\nuse termcolor::{BufferWriter, Color, ColorChoice, ColorSpec, WriteColor};\nlet mut bufwtr = BufferWriter::stderr(ColorChoice::Always);\nlet mut buffer = bufwtr.buffer();\nbuffer.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut buffer, \"green text!\")?;\nbufwtr.print(&buffer)?;\n```\n\n## \u00a7\u27e89\u27e9Detecting presence of a terminal\nIn many scenarios when using color, one often wants to enable colors automatically when writing to a terminal and disable colors automatically when writing to anything else. The typical way to achieve this in Unix environments is via libc\u2019s `isatty`\u27e810\u27e9 function. Unfortunately, this notoriously does not work well in Windows environments. To work around that, the recommended solution is to use the standard library\u2019s `IsTerminal`\u27e811\u27e9 trait. It goes out of its way to get it as right as possible in Windows environments.\nFor example, in a command line application that exposes a `--color` flag, your logic for how to enable colors might look like this:\n\u24d8\u27e812\u27e9```\nuse std::io::IsTerminal;\nuse termcolor::{ColorChoice, StandardStream};\nlet preference = argv.get_flag(\"color\").unwrap_or(\"auto\");\nlet mut choice = preference.parse::<ColorChoice>()?;\nif choice == ColorChoice::Auto && !std::io::stdin().is_terminal() {\n  choice = ColorChoice::Never;\n}\nlet stdout = StandardStream::stdout(choice);\n// ... write to stdout\n```\n\nCurrently, `termcolor` does not provide anything to do this for you.\n## Structs\u00a7\u27e813\u27e9\n\nAnsi\u27e814\u27e9\n    Satisfies `WriteColor` using standard ANSI escape sequences.\n\nBuffer\u27e815\u27e9\n    Write colored text to memory.\n\nBufferWriter\u27e816\u27e9\n    Writes colored buffers to stdout or stderr.\n\nBufferedStandardStream\u27e817\u27e9\n    Like `StandardStream`, but does buffered writing.\n\nColorChoiceParseError\u27e818\u27e9\n    An error that occurs when parsing a `ColorChoice` fails.\n\nColorSpec\u27e819\u27e9\n    A color specification.\n\nHyperlinkSpec\u27e820\u27e9\n    A hyperlink specification.\n\nNoColor\u27e821\u27e9\n    Satisfies `WriteColor` but ignores all color options.\n\nParseColorError\u27e822\u27e9\n    An error from parsing an invalid color specification.\n\nStandardStream\u27e823\u27e9\n    Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.\n\nStandardStreamLock\u27e824\u27e9\n    `StandardStreamLock` is a locked reference to a `StandardStream`.\n## Enums\u00a7\u27e825\u27e9\n\nColor\u27e826\u27e9\n    The set of available colors for the terminal foreground/background.\n\nColorChoice\u27e827\u27e9\n    ColorChoice represents the color preferences of an end user.\n## Traits\u00a7\u27e828\u27e9\n\nWriteColor\u27e829\u27e9\n    This trait describes the behavior of writers that support colored output.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/termcolor/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/termcolor/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/termcolor/latest/src/termcolor/lib.rs.html#1-2572: Source\n\u27e84\u27e9 https://docs.rs/termcolor/latest/termcolor/#organization: \u00a7\n\u27e85\u27e9 https://docs.rs/termcolor/latest/termcolor/#example-using-standardstream: \u00a7\n\u27e86\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.set_color: `WriteColor::set_color`\n\u27e87\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.reset: `WriteColor::reset`\n\u27e88\u27e9 https://docs.rs/termcolor/latest/termcolor/#example-using-bufferwriter: \u00a7\n\u27e89\u27e9 https://docs.rs/termcolor/latest/termcolor/#detecting-presence-of-a-terminal: \u00a7\n\u27e810\u27e9 https://man7.org/linux/man-pages/man3/isatty.3.html: `isatty`\n\u27e811\u27e9 https://doc.rust-lang.org/std/io/trait.IsTerminal.html: `IsTerminal`\n\u27e812\u27e9 https://docs.rs/termcolor/latest/termcolor/: This example is not tested - \u24d8\n\u27e813\u27e9 https://docs.rs/termcolor/latest/termcolor/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.Ansi.html: struct termcolor::Ansi - Ansi\n\u27e815\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.Buffer.html: struct termcolor::Buffer - Buffer\n\u27e816\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.BufferWriter.html: struct termcolor::BufferWriter - BufferWriter\n\u27e817\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.BufferedStandardStream.html: struct termcolor::BufferedStandardStream - BufferedStandardStream\n\u27e818\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ColorChoiceParseError.html: struct termcolor::ColorChoiceParseError - ColorChoiceParseError\n\u27e819\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ColorSpec.html: struct termcolor::ColorSpec - ColorSpec\n\u27e820\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.HyperlinkSpec.html: struct termcolor::HyperlinkSpec - HyperlinkSpec\n\u27e821\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.NoColor.html: struct termcolor::NoColor - NoColor\n\u27e822\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ParseColorError.html: struct termcolor::ParseColorError - ParseColorError\n\u27e823\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.StandardStream.html: struct termcolor::StandardStream - StandardStream\n\u27e824\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.StandardStreamLock.html: struct termcolor::StandardStreamLock - StandardStreamLock\n\u27e825\u27e9 https://docs.rs/termcolor/latest/termcolor/#enums: \u00a7\n\u27e826\u27e9 https://docs.rs/termcolor/latest/termcolor/enum.Color.html: enum termcolor::Color - Color\n\u27e827\u27e9 https://docs.rs/termcolor/latest/termcolor/enum.ColorChoice.html: enum termcolor::ColorChoice - ColorChoice\n\u27e828\u27e9 https://docs.rs/termcolor/latest/termcolor/#traits: \u00a7\n\u27e829\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html: trait termcolor::WriteColor - WriteColor\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `termcolor` crate provides a cross-platform abstraction for writing colored text to terminals using ANSI escape sequences or the Windows console API. It supports both direct terminal output and in-memory buffers for parallelized, non-interleaved colored text rendering. Key features include the `WriteColor` trait for color manipulation, `StandardStream` for terminal output, and `BufferWriter` for buffered writing, with additional support for hyperlinks in ANSI mode.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.5,
    "factual_counterfactual": "### Pair 1: Cross-platform color support\n\u2705 Factual: The `termcolor` crate provides cross-platform support for writing colored text to terminals using ANSI escape sequences on Unix-like systems and the Windows console API on Windows systems.  \n\u274c Counterfactual: The `termcolor` crate exclusively supports ANSI escape sequences and does not work with the Windows console API, making it unsuitable for Windows environments.\n\n---\n\n### Pair 2: Buffer-based colored output\n\u2705 Factual: The `Buffer` struct in `termcolor` allows for writing colored text to an in-memory buffer, enabling parallel programs to avoid synchronization issues when working with global resources like the Windows console.  \n\u274c Counterfactual: The `Buffer` struct in `termcolor` directly interacts with the terminal, bypassing in-memory storage, which makes it unsuitable for parallel processing.\n\n---\n\n### Pair 3: Hyperlink support in ANSI mode\n\u2705 Factual: In ANSI mode, `termcolor` supports writing hyperlinks to terminals, leveraging ANSI escape sequences for enhanced output formatting.  \n\u274c Counterfactual: The `termcolor` crate supports writing hyperlinks in both ANSI mode and the Windows console API, providing identical functionality across platforms.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}