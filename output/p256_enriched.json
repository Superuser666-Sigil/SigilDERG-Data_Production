{
    "name": "p256",
    "version": "0.14.0-pre.8",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/p256/latest/p256/all.html \"show sidebar\")\n# Crate p256Copy item path\n[Settings](https://docs.rs/p256/latest/settings.html)\n[Help](https://docs.rs/p256/latest/help.html)\nSummary[Source](https://docs.rs/p256/latest/src/p256/lib.rs.html#1-183)\nExpand description\n## [\u00a7](https://docs.rs/p256/latest/p256/#rustcrypto-nist-p-256-secp256r1-elliptic-curve)[RustCrypto](https://github.com/rustcrypto/): NIST P-256 (secp256r1) elliptic curve\n[![crate](https://buildstats.info/crate/p256)](https://crates.io/crates/p256) [![Docs](https://docs.rs/p256/badge.svg)](https://docs.rs/p256/) [![Build Status](https://github.com/RustCrypto/elliptic-curves/actions/workflows/p256.yml/badge.svg)](https://github.com/RustCrypto/elliptic-curves/actions/workflows/p256.yml) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.65+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260040-elliptic-curves)\nPure Rust implementation of the NIST P-256 (a.k.a. secp256r1, prime256v1) elliptic curve with support for ECDH, ECDSA signing/verification, and general purpose curve arithmetic support implemented in terms of traits from the [`elliptic-curve`](https://github.com/RustCrypto/traits/tree/master/elliptic-curve) crate.\n[Documentation](https://docs.rs/p256/)\n### [\u00a7](https://docs.rs/p256/latest/p256/#-security-warning)\u26a0\ufe0f Security Warning\nThe elliptic curve arithmetic contained in this crate has never been independently audited!\nThis crate has been designed with the goal of ensuring that secret-dependent operations are performed in constant time (using the `subtle` crate and constant-time formulas). However, it has not been thoroughly assessed to ensure that generated assembly is constant time on common CPU architectures.\nUSE AT YOUR OWN RISK!\n### [\u00a7](https://docs.rs/p256/latest/p256/#supported-algorithms)Supported Algorithms\n  * [Elliptic Curve Diffie-Hellman (ECDH)](https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman): gated under the `ecdh` feature.\n  * [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm): gated under the `ecdsa` feature.\n\n\n### [\u00a7](https://docs.rs/p256/latest/p256/#about-nist-p-256)About NIST P-256\nNIST P-256 is a Weierstrass curve specified in [SP 800-186](https://csrc.nist.gov/publications/detail/sp/800-186/final): Recommendations for Discrete Logarithm-based Cryptography: Elliptic Curve Domain Parameters.\nAlso known as prime256v1 (ANSI X9.62) and secp256r1 (SECG), it\u2019s included in the US National Security Agency\u2019s \u201cSuite B\u201d and is widely used in protocols like TLS and the associated X.509 PKI.\n### [\u00a7](https://docs.rs/p256/latest/p256/#minimum-supported-rust-version)Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### [\u00a7](https://docs.rs/p256/latest/p256/#semver-policy)SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### [\u00a7](https://docs.rs/p256/latest/p256/#license)License\nAll crates licensed under either of\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/p256/latest/p256/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### [\u00a7](https://docs.rs/p256/latest/p256/#serde-support)`serde` support\nWhen the `serde` feature of this crate is enabled, `Serialize` and `Deserialize` are impl\u2019d for the following types:\n  * [`AffinePoint`](https://docs.rs/p256/latest/p256/type.AffinePoint.html \"type p256::AffinePoint\")\n  * [`Scalar`](https://docs.rs/p256/latest/p256/struct.Scalar.html \"struct p256::Scalar\")\n  * [`ecdsa::VerifyingKey`](https://docs.rs/p256/latest/p256/ecdsa/type.VerifyingKey.html \"type p256::ecdsa::VerifyingKey\")\n\n\nPlease see type-specific documentation for more information.\n## Re-exports[\u00a7](https://docs.rs/p256/latest/p256/#reexports)\n\n`pub use elliptic_curve[](https://docs.rs/elliptic-curve/0.13.8/x86_64-unknown-linux-gnu/elliptic_curve/index.html \"mod elliptic_curve\");`\n\n\n`pub use elliptic_curve::pkcs8[](https://docs.rs/pkcs8/0.10.2/x86_64-unknown-linux-gnu/pkcs8/index.html \"mod pkcs8\");``pkcs8`\n\n## Modules[\u00a7](https://docs.rs/p256/latest/p256/#modules)\n\n[ecdh](https://docs.rs/p256/latest/p256/ecdh/index.html \"mod p256::ecdh\")`ecdh`\n    Elliptic Curve Diffie-Hellman (Ephemeral) Support.\n\n[ecdsa](https://docs.rs/p256/latest/p256/ecdsa/index.html \"mod p256::ecdsa\")`ecdsa-core`\n    Elliptic Curve Digital Signature Algorithm (ECDSA)\n\n[test_vectors](https://docs.rs/p256/latest/p256/test_vectors/index.html \"mod p256::test_vectors\")`test-vectors`\n    secp256r1 test vectors.\n## Structs[\u00a7](https://docs.rs/p256/latest/p256/#structs)\n\n[FieldElement](https://docs.rs/p256/latest/p256/struct.FieldElement.html \"struct p256::FieldElement\")`arithmetic` and `expose-field`\n    An element in the finite field modulo p = 2^{224}(2^{32} \u2212 1) + 2^{192} + 2^{96} \u2212 1.\n\n[NistP256](https://docs.rs/p256/latest/p256/struct.NistP256.html \"struct p256::NistP256\")\n    NIST P-256 elliptic curve.\n\n[Scalar](https://docs.rs/p256/latest/p256/struct.Scalar.html \"struct p256::Scalar\")`arithmetic`\n    Scalars are elements in the finite field modulo n.\n## Type Aliases[\u00a7](https://docs.rs/p256/latest/p256/#types)\n\n[AffinePoint](https://docs.rs/p256/latest/p256/type.AffinePoint.html \"type p256::AffinePoint\")`arithmetic`\n    Elliptic curve point in affine coordinates.\n\n[BlindedScalar](https://docs.rs/p256/latest/p256/type.BlindedScalar.html \"type p256::BlindedScalar\")`arithmetic`\n    Blinded scalar.\n\n[CompressedPoint](https://docs.rs/p256/latest/p256/type.CompressedPoint.html \"type p256::CompressedPoint\")\n    Compressed SEC1-encoded NIST P-256 curve point.\n\n[EncodedPoint](https://docs.rs/p256/latest/p256/type.EncodedPoint.html \"type p256::EncodedPoint\")\n    NIST P-256 SEC1 encoded point.\n\n[FieldBytes](https://docs.rs/p256/latest/p256/type.FieldBytes.html \"type p256::FieldBytes\")\n    NIST P-256 field element serialized as bytes.\n\n[NonZeroScalar](https://docs.rs/p256/latest/p256/type.NonZeroScalar.html \"type p256::NonZeroScalar\")`arithmetic`\n    Non-zero NIST P-256 scalar field element.\n\n[ProjectivePoint](https://docs.rs/p256/latest/p256/type.ProjectivePoint.html \"type p256::ProjectivePoint\")`arithmetic`\n    Elliptic curve point in projective coordinates.\n\n[PublicKey](https://docs.rs/p256/latest/p256/type.PublicKey.html \"type p256::PublicKey\")`arithmetic`\n    NIST P-256 public key.\n\n[ScalarBits](https://docs.rs/p256/latest/p256/type.ScalarBits.html \"type p256::ScalarBits\")`bits`\n    Bit representation of a NIST P-256 scalar field element.\n\n[SecretKey](https://docs.rs/p256/latest/p256/type.SecretKey.html \"type p256::SecretKey\")\n    NIST P-256 secret key.\n\n[U32](https://docs.rs/p256/latest/p256/type.U32.html \"type p256::U32\")\n\n\n[U256](https://docs.rs/p256/latest/p256/type.U256.html \"type p256::U256\")\n    256-bit unsigned big integer.\n",
        "markdown_with_citations": "[](https://docs.rs/p256/latest/p256/all.html \"show sidebar\")\n# Crate p256Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto\u27e85\u27e9: NIST P-256 (secp256r1) elliptic curve\n![crate\u27e86\u27e9](https://crates.io/crates/p256) ![Docs\u27e87\u27e9](https://docs.rs/p256/) ![Build Status\u27e88\u27e9](https://github.com/RustCrypto/elliptic-curves/actions/workflows/p256.yml) ![Apache2/MIT licensed\u27e89\u27e9] ![Rust Version\u27e810\u27e9] ![Project Chat\u27e811\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260040-elliptic-curves)\nPure Rust implementation of the NIST P-256 (a.k.a. secp256r1, prime256v1) elliptic curve with support for ECDH, ECDSA signing/verification, and general purpose curve arithmetic support implemented in terms of traits from the `elliptic-curve`\u27e812\u27e9 crate.\nDocumentation\u27e813\u27e9\n### \u00a7\u27e814\u27e9\u26a0\ufe0f Security Warning\nThe elliptic curve arithmetic contained in this crate has never been independently audited!\nThis crate has been designed with the goal of ensuring that secret-dependent operations are performed in constant time (using the `subtle` crate and constant-time formulas). However, it has not been thoroughly assessed to ensure that generated assembly is constant time on common CPU architectures.\nUSE AT YOUR OWN RISK!\n### \u00a7\u27e815\u27e9Supported Algorithms\n  * Elliptic Curve Diffie-Hellman (ECDH)\u27e816\u27e9: gated under the `ecdh` feature.\n  * Elliptic Curve Digital Signature Algorithm (ECDSA)\u27e817\u27e9: gated under the `ecdsa` feature.\n\n\n### \u00a7\u27e818\u27e9About NIST P-256\nNIST P-256 is a Weierstrass curve specified in SP 800-186\u27e819\u27e9: Recommendations for Discrete Logarithm-based Cryptography: Elliptic Curve Domain Parameters.\nAlso known as prime256v1 (ANSI X9.62) and secp256r1 (SECG), it\u2019s included in the US National Security Agency\u2019s \u201cSuite B\u201d and is widely used in protocols like TLS and the associated X.509 PKI.\n### \u00a7\u27e820\u27e9Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### \u00a7\u27e821\u27e9SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### \u00a7\u27e822\u27e9License\nAll crates licensed under either of\n  * Apache License, Version 2.0\u27e823\u27e9\n  * MIT license\u27e824\u27e9\n\n\nat your option.\n#### \u00a7\u27e825\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### \u00a7\u27e826\u27e9`serde` support\nWhen the `serde` feature of this crate is enabled, `Serialize` and `Deserialize` are impl\u2019d for the following types:\n  * `AffinePoint`\u27e827\u27e9\n  * `Scalar`\u27e828\u27e9\n  * `ecdsa::VerifyingKey`\u27e829\u27e9\n\n\nPlease see type-specific documentation for more information.\n## Re-exports\u00a7\u27e830\u27e9\n\n`pub use elliptic_curve[](https://docs.rs/elliptic-curve/0.13.8/x86_64-unknown-linux-gnu/elliptic_curve/index.html \"mod elliptic_curve\");`\n\n\n`pub use elliptic_curve::pkcs8[](https://docs.rs/pkcs8/0.10.2/x86_64-unknown-linux-gnu/pkcs8/index.html \"mod pkcs8\");``pkcs8`\n\n## Modules\u00a7\u27e831\u27e9\n\necdh\u27e832\u27e9`ecdh`\n    Elliptic Curve Diffie-Hellman (Ephemeral) Support.\n\necdsa\u27e833\u27e9`ecdsa-core`\n    Elliptic Curve Digital Signature Algorithm (ECDSA)\n\ntest_vectors\u27e834\u27e9`test-vectors`\n    secp256r1 test vectors.\n## Structs\u00a7\u27e835\u27e9\n\nFieldElement\u27e836\u27e9`arithmetic` and `expose-field`\n    An element in the finite field modulo p = 2^{224}(2^{32} \u2212 1) + 2^{192} + 2^{96} \u2212 1.\n\nNistP256\u27e837\u27e9\n    NIST P-256 elliptic curve.\n\nScalar\u27e828\u27e9`arithmetic`\n    Scalars are elements in the finite field modulo n.\n## Type Aliases\u00a7\u27e838\u27e9\n\nAffinePoint\u27e827\u27e9`arithmetic`\n    Elliptic curve point in affine coordinates.\n\nBlindedScalar\u27e839\u27e9`arithmetic`\n    Blinded scalar.\n\nCompressedPoint\u27e840\u27e9\n    Compressed SEC1-encoded NIST P-256 curve point.\n\nEncodedPoint\u27e841\u27e9\n    NIST P-256 SEC1 encoded point.\n\nFieldBytes\u27e842\u27e9\n    NIST P-256 field element serialized as bytes.\n\nNonZeroScalar\u27e843\u27e9`arithmetic`\n    Non-zero NIST P-256 scalar field element.\n\nProjectivePoint\u27e844\u27e9`arithmetic`\n    Elliptic curve point in projective coordinates.\n\nPublicKey\u27e845\u27e9`arithmetic`\n    NIST P-256 public key.\n\nScalarBits\u27e846\u27e9`bits`\n    Bit representation of a NIST P-256 scalar field element.\n\nSecretKey\u27e847\u27e9\n    NIST P-256 secret key.\n\nU32\u27e848\u27e9\n\n\nU256\u27e849\u27e9\n    256-bit unsigned big integer.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/p256/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/p256/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/p256/latest/src/p256/lib.rs.html#1-183: Source\n\u27e84\u27e9 https://docs.rs/p256/latest/p256/#rustcrypto-nist-p-256-secp256r1-elliptic-curve: \u00a7\n\u27e85\u27e9 https://github.com/rustcrypto/: RustCrypto\n\u27e86\u27e9 https://buildstats.info/crate/p256: ![crate\n\u27e87\u27e9 https://docs.rs/p256/badge.svg: ![Docs\n\u27e88\u27e9 https://github.com/RustCrypto/elliptic-curves/actions/workflows/p256.yml/badge.svg: ![Build Status\n\u27e89\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e810\u27e9 https://img.shields.io/badge/rustc-1.65+-blue.svg: Rust Version\n\u27e811\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e812\u27e9 https://github.com/RustCrypto/traits/tree/master/elliptic-curve: `elliptic-curve`\n\u27e813\u27e9 https://docs.rs/p256/: Documentation\n\u27e814\u27e9 https://docs.rs/p256/latest/p256/#-security-warning: \u00a7\n\u27e815\u27e9 https://docs.rs/p256/latest/p256/#supported-algorithms: \u00a7\n\u27e816\u27e9 https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman: Elliptic Curve Diffie-Hellman (ECDH)\n\u27e817\u27e9 https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm: Elliptic Curve Digital Signature Algorithm (ECDSA)\n\u27e818\u27e9 https://docs.rs/p256/latest/p256/#about-nist-p-256: \u00a7\n\u27e819\u27e9 https://csrc.nist.gov/publications/detail/sp/800-186/final: SP 800-186\n\u27e820\u27e9 https://docs.rs/p256/latest/p256/#minimum-supported-rust-version: \u00a7\n\u27e821\u27e9 https://docs.rs/p256/latest/p256/#semver-policy: \u00a7\n\u27e822\u27e9 https://docs.rs/p256/latest/p256/#license: \u00a7\n\u27e823\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e824\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e825\u27e9 https://docs.rs/p256/latest/p256/#contribution: \u00a7\n\u27e826\u27e9 https://docs.rs/p256/latest/p256/#serde-support: \u00a7\n\u27e827\u27e9 https://docs.rs/p256/latest/p256/type.AffinePoint.html: type p256::AffinePoint - `AffinePoint`\n\u27e828\u27e9 https://docs.rs/p256/latest/p256/struct.Scalar.html: struct p256::Scalar - `Scalar`\n\u27e829\u27e9 https://docs.rs/p256/latest/p256/ecdsa/type.VerifyingKey.html: type p256::ecdsa::VerifyingKey - `ecdsa::VerifyingKey`\n\u27e830\u27e9 https://docs.rs/p256/latest/p256/#reexports: \u00a7\n\u27e831\u27e9 https://docs.rs/p256/latest/p256/#modules: \u00a7\n\u27e832\u27e9 https://docs.rs/p256/latest/p256/ecdh/index.html: mod p256::ecdh - ecdh\n\u27e833\u27e9 https://docs.rs/p256/latest/p256/ecdsa/index.html: mod p256::ecdsa - ecdsa\n\u27e834\u27e9 https://docs.rs/p256/latest/p256/test_vectors/index.html: mod p256::test_vectors - test_vectors\n\u27e835\u27e9 https://docs.rs/p256/latest/p256/#structs: \u00a7\n\u27e836\u27e9 https://docs.rs/p256/latest/p256/struct.FieldElement.html: struct p256::FieldElement - FieldElement\n\u27e837\u27e9 https://docs.rs/p256/latest/p256/struct.NistP256.html: struct p256::NistP256 - NistP256\n\u27e838\u27e9 https://docs.rs/p256/latest/p256/#types: \u00a7\n\u27e839\u27e9 https://docs.rs/p256/latest/p256/type.BlindedScalar.html: type p256::BlindedScalar - BlindedScalar\n\u27e840\u27e9 https://docs.rs/p256/latest/p256/type.CompressedPoint.html: type p256::CompressedPoint - CompressedPoint\n\u27e841\u27e9 https://docs.rs/p256/latest/p256/type.EncodedPoint.html: type p256::EncodedPoint - EncodedPoint\n\u27e842\u27e9 https://docs.rs/p256/latest/p256/type.FieldBytes.html: type p256::FieldBytes - FieldBytes\n\u27e843\u27e9 https://docs.rs/p256/latest/p256/type.NonZeroScalar.html: type p256::NonZeroScalar - NonZeroScalar\n\u27e844\u27e9 https://docs.rs/p256/latest/p256/type.ProjectivePoint.html: type p256::ProjectivePoint - ProjectivePoint\n\u27e845\u27e9 https://docs.rs/p256/latest/p256/type.PublicKey.html: type p256::PublicKey - PublicKey\n\u27e846\u27e9 https://docs.rs/p256/latest/p256/type.ScalarBits.html: type p256::ScalarBits - ScalarBits\n\u27e847\u27e9 https://docs.rs/p256/latest/p256/type.SecretKey.html: type p256::SecretKey - SecretKey\n\u27e848\u27e9 https://docs.rs/p256/latest/p256/type.U32.html: type p256::U32 - U32\n\u27e849\u27e9 https://docs.rs/p256/latest/p256/type.U256.html: type p256::U256 - U256\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `p256` crate provides a pure Rust implementation of the NIST P-256 (secp256r1) elliptic curve, supporting cryptographic operations such as Elliptic Curve Diffie-Hellman (ECDH) and Elliptic Curve Digital Signature Algorithm (ECDSA). It includes general-purpose curve arithmetic and integrates with the `elliptic-curve` traits for modularity. Features like constant-time operations and optional `serde` support for serialization/deserialization are available, though the crate has not been independently audited for security.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Supported Algorithms  \n\u2705 Factual: The `p256` crate supports Elliptic Curve Diffie-Hellman (ECDH) and Elliptic Curve Digital Signature Algorithm (ECDSA), gated under the `ecdh` and `ecdsa` features, respectively.  \n\u274c Counterfactual: The `p256` crate supports RSA encryption and decryption alongside elliptic curve algorithms.  \n\n---\n\n### Pair 2: Security Audit  \n\u2705 Factual: The `p256` crate has never been independently audited, and while it aims for constant-time operations, it cannot guarantee constant-time assembly on all CPU architectures.  \n\u274c Counterfactual: The `p256` crate has undergone extensive independent security audits and guarantees constant-time assembly across all major CPU architectures.  \n\n---\n\n### Pair 3: Minimum Supported Rust Version  \n\u2705 Factual: The minimum supported Rust version for the `p256` crate is 1.65 or higher, and changes to this requirement will be made with a minor version bump.  \n\u274c Counterfactual: The `p256` crate supports all Rust versions starting from 1.50 without any restrictions.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}