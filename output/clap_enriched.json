{
    "name": "clap",
    "version": "4.5.40",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/clap/latest/clap/all.html \"show sidebar\")\n# Crate clapCopy item path\n[Settings](https://docs.rs/clap/latest/settings.html)\n[Help](https://docs.rs/clap/latest/help.html)\nSummary[Source](https://docs.rs/clap/latest/src/clap/lib.rs.html#6-106)\nExpand description\n> **Command Line Argument Parser for Rust**\nQuick Links:\n  * Derive [tutorial](https://docs.rs/clap/latest/clap/_derive/_tutorial/index.html \"mod clap::_derive::_tutorial\") and [reference](https://docs.rs/clap/latest/clap/_derive/index.html \"mod clap::_derive\")\n  * Builder [tutorial](https://docs.rs/clap/latest/clap/_tutorial/index.html \"mod clap::_tutorial\") and [reference](https://docs.rs/clap/latest/clap/struct.Command.html \"struct clap::Command\")\n  * [Cookbook](https://docs.rs/clap/latest/clap/_cookbook/index.html \"mod clap::_cookbook\")\n  * [FAQ](https://docs.rs/clap/latest/clap/_faq/index.html \"mod clap::_faq\")\n  * [Discussions](https://github.com/clap-rs/clap/discussions)\n  * [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.40/CHANGELOG.md) (includes major version migration guides)\n\n\n### [\u00a7](https://docs.rs/clap/latest/clap/#aspirations)Aspirations\n  * Out of the box, users get a polished CLI experience \n    * Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n  * Flexible enough to port your existing CLI interface \n    * However, we won\u2019t necessarily streamline support for each use case\n  * Reasonable parse performance\n  * Resilient maintainership, including \n    * Willing to break compatibility rather than batching up breaking changes in large releases\n    * Leverage feature flags to keep to one active branch\n    * Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n  * We follow semver and will wait about 6-9 months between major breaking changes\n  * We will support the last two minor Rust releases (MSRV, currently 1.74)\n\n\nWhile these aspirations can be at odds with fast build times and low binary size, we will still strive to keep these reasonable for the flexibility you get. Check out the [argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for CLI parsers optimized for other use cases.\n### [\u00a7](https://docs.rs/clap/latest/clap/#example)Example\nRun\n```\n$ cargo add clap --features derive\n```\n\n_(See also[feature flag reference](https://docs.rs/clap/latest/clap/_features/index.html \"mod clap::_features\"))_\nThen define your CLI in `main.rs`:\n```\nuse clap::Parser;\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n  /// Name of the person to greet\n  #[arg(short, long)]\n  name: String,\n  /// Number of times to greet\n  #[arg(short, long, default_value_t = 1)]\n  count: u8,\n}\nfn main() {\n  let args = Args::parse();\n  for _ in 0..args.count {\n    println!(\"Hello {}!\", args.name);\n  }\n}\n```\n\nAnd try it out:\n```\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\nUsage: demo[EXE] [OPTIONS] --name <NAME>\nOptions:\n -n, --name <NAME>  Name of the person to greet\n -c, --count <COUNT> Number of times to greet [default: 1]\n -h, --help      Print help\n -V, --version    Print version\n$ demo --name Me\nHello Me!\n\n```\n\n_(version number and`.exe` extension on windows replaced by placeholders)_\nSee also the derive [tutorial](https://docs.rs/clap/latest/clap/_derive/_tutorial/index.html \"mod clap::_derive::_tutorial\") and [reference](https://docs.rs/clap/latest/clap/_derive/index.html \"mod clap::_derive\")\n#### [\u00a7](https://docs.rs/clap/latest/clap/#related-projects)Related Projects\nAugment clap:\n  * [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n  * [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n  * [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n  * [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n  * [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\n\nCLI Helpers\n  * [clio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n  * [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n  * [clap-cargo](https://crates.io/crates/clap-cargo)\n  * [colorchoice-clap](https://crates.io/crates/colorchoice-clap)\n\n\nTesting\n  * [`trycmd`](https://crates.io/crates/trycmd): Bulk snapshot testing\n  * [`snapbox`](https://crates.io/crates/snapbox): Specialized snapshot testing\n  * [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\n\nDocumentation:\n  * [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n\n\n## Modules[\u00a7](https://docs.rs/clap/latest/clap/#modules)\n\n[_cookbook](https://docs.rs/clap/latest/clap/_cookbook/index.html \"mod clap::_cookbook\")`unstable-doc`\n    Documentation: Cookbook\n\n[_derive](https://docs.rs/clap/latest/clap/_derive/index.html \"mod clap::_derive\")`unstable-doc`\n    Documentation: Derive Reference\n\n[_faq](https://docs.rs/clap/latest/clap/_faq/index.html \"mod clap::_faq\")`unstable-doc`\n    Documentation: FAQ\n\n[_features](https://docs.rs/clap/latest/clap/_features/index.html \"mod clap::_features\")`unstable-doc`\n    Documentation: Feature Flags\n\n[_tutorial](https://docs.rs/clap/latest/clap/_tutorial/index.html \"mod clap::_tutorial\")`unstable-doc`\n    Tutorial for the Builder API\n\n[builder](https://docs.rs/clap/latest/clap/builder/index.html \"mod clap::builder\")\n    Define [`Command`](https://docs.rs/clap/latest/clap/struct.Command.html \"struct clap::Command\") line [arguments](https://docs.rs/clap/latest/clap/struct.Arg.html \"struct clap::Arg\")\n\n[error](https://docs.rs/clap/latest/clap/error/index.html \"mod clap::error\")\n    Error reporting\n\n[parser](https://docs.rs/clap/latest/clap/parser/index.html \"mod clap::parser\")\n    [`Command`](https://docs.rs/clap/latest/clap/struct.Command.html \"struct clap::Command\") line argument parser\n## Macros[\u00a7](https://docs.rs/clap/latest/clap/#macros)\n\n[arg](https://docs.rs/clap/latest/clap/macro.arg.html \"macro clap::arg\")\n    Create an [`Arg`](https://docs.rs/clap/latest/clap/struct.Arg.html \"struct clap::Arg\") from a usage string.\n\n[command](https://docs.rs/clap/latest/clap/macro.command.html \"macro clap::command\")\n    Allows you to build the `Command` instance from your Cargo.toml at compile time.\n\n[crate_authors](https://docs.rs/clap/latest/clap/macro.crate_authors.html \"macro clap::crate_authors\")\n    Allows you to pull the authors for the command from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`\n\n[crate_description](https://docs.rs/clap/latest/clap/macro.crate_description.html \"macro clap::crate_description\")\n    Allows you to pull the description from your Cargo.toml at compile time.\n\n[crate_name](https://docs.rs/clap/latest/clap/macro.crate_name.html \"macro clap::crate_name\")\n    Allows you to pull the name from your Cargo.toml at compile time.\n\n[crate_version](https://docs.rs/clap/latest/clap/macro.crate_version.html \"macro clap::crate_version\")\n    Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`\n\n[value_parser](https://docs.rs/clap/latest/clap/macro.value_parser.html \"macro clap::value_parser\")\n    Select a [`ValueParser`](https://docs.rs/clap/latest/clap/builder/struct.ValueParser.html \"struct clap::builder::ValueParser\") implementation from the intended type\n## Structs[\u00a7](https://docs.rs/clap/latest/clap/#structs)\n\n[Arg](https://docs.rs/clap/latest/clap/struct.Arg.html \"struct clap::Arg\")\n    The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.\n\n[ArgGroup](https://docs.rs/clap/latest/clap/struct.ArgGroup.html \"struct clap::ArgGroup\")\n    Family of related [arguments](https://docs.rs/clap/latest/clap/struct.Arg.html \"struct clap::Arg\").\n\n[ArgMatches](https://docs.rs/clap/latest/clap/struct.ArgMatches.html \"struct clap::ArgMatches\")\n    Container for parse results.\n\n[Command](https://docs.rs/clap/latest/clap/struct.Command.html \"struct clap::Command\")\n    Build a command-line interface.\n\n[Id](https://docs.rs/clap/latest/clap/struct.Id.html \"struct clap::Id\")\n    [`Arg`](https://docs.rs/clap/latest/clap/struct.Arg.html \"struct clap::Arg\") or [`ArgGroup`](https://docs.rs/clap/latest/clap/struct.ArgGroup.html \"struct clap::ArgGroup\") identifier\n## Enums[\u00a7](https://docs.rs/clap/latest/clap/#enums)\n\n[ArgAction](https://docs.rs/clap/latest/clap/enum.ArgAction.html \"enum clap::ArgAction\")\n    Behavior of arguments when they are encountered while parsing\n\n[ColorChoice](https://docs.rs/clap/latest/clap/enum.ColorChoice.html \"enum clap::ColorChoice\")\n    Represents the color preferences for program output\n\n[ValueHint](https://docs.rs/clap/latest/clap/enum.ValueHint.html \"enum clap::ValueHint\")\n    Provide shell with hint on how to complete an argument.\n## Traits[\u00a7](https://docs.rs/clap/latest/clap/#traits)\n\n[Args](https://docs.rs/clap/latest/clap/trait.Args.html \"trait clap::Args\")\n    Parse a set of arguments into a user-defined container.\n\n[CommandFactory](https://docs.rs/clap/latest/clap/trait.CommandFactory.html \"trait clap::CommandFactory\")\n    Create a [`Command`](https://docs.rs/clap/latest/clap/struct.Command.html \"struct clap::Command\") relevant for a user-defined container.\n\n[FromArgMatches](https://docs.rs/clap/latest/clap/trait.FromArgMatches.html \"trait clap::FromArgMatches\")\n    Converts an instance of [`ArgMatches`](https://docs.rs/clap/latest/clap/struct.ArgMatches.html \"struct clap::ArgMatches\") to a user-defined container.\n\n[Parser](https://docs.rs/clap/latest/clap/trait.Parser.html \"trait clap::Parser\")\n    Parse command-line arguments into `Self`.\n\n[Subcommand](https://docs.rs/clap/latest/clap/trait.Subcommand.html \"trait clap::Subcommand\")\n    Parse a sub-command into a user-defined enum.\n\n[ValueEnum](https://docs.rs/clap/latest/clap/trait.ValueEnum.html \"trait clap::ValueEnum\")\n    Parse arguments into enums.\n## Type Aliases[\u00a7](https://docs.rs/clap/latest/clap/#types)\n\n[Error](https://docs.rs/clap/latest/clap/type.Error.html \"type clap::Error\")\n    Command Line Argument Parser Error\n",
        "markdown_with_citations": "[](https://docs.rs/clap/latest/clap/all.html \"show sidebar\")\n# Crate clapCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n> **Command Line Argument Parser for Rust**\nQuick Links:\n  * Derive tutorial\u27e84\u27e9 and reference\u27e85\u27e9\n  * Builder tutorial\u27e86\u27e9 and reference\u27e87\u27e9\n  * Cookbook\u27e88\u27e9\n  * FAQ\u27e89\u27e9\n  * Discussions\u27e810\u27e9\n  * CHANGELOG\u27e811\u27e9 (includes major version migration guides)\n\n\n### \u00a7\u27e812\u27e9Aspirations\n  * Out of the box, users get a polished CLI experience \n    * Including common argument behavior, help generation, suggested fixes for users, colored output, shell completions\u27e813\u27e9, etc\n  * Flexible enough to port your existing CLI interface \n    * However, we won\u2019t necessarily streamline support for each use case\n  * Reasonable parse performance\n  * Resilient maintainership, including \n    * Willing to break compatibility rather than batching up breaking changes in large releases\n    * Leverage feature flags to keep to one active branch\n    * Being under WG-CLI\u27e814\u27e9 to increase the bus factor\n  * We follow semver and will wait about 6-9 months between major breaking changes\n  * We will support the last two minor Rust releases (MSRV, currently 1.74)\n\n\nWhile these aspirations can be at odds with fast build times and low binary size, we will still strive to keep these reasonable for the flexibility you get. Check out the argparse-benchmarks\u27e815\u27e9 for CLI parsers optimized for other use cases.\n### \u00a7\u27e816\u27e9Example\nRun\n```\n$ cargo add clap --features derive\n```\n\n_(See alsofeature flag reference\u27e817\u27e9)_\nThen define your CLI in `main.rs`:\n```\nuse clap::Parser;\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n  /// Name of the person to greet\n  #[arg(short, long)]\n  name: String,\n  /// Number of times to greet\n  #[arg(short, long, default_value_t = 1)]\n  count: u8,\n}\nfn main() {\n  let args = Args::parse();\n  for _ in 0..args.count {\n    println!(\"Hello {}!\", args.name);\n  }\n}\n```\n\nAnd try it out:\n```\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\nUsage: demo[EXE] [OPTIONS] --name <NAME>\nOptions:\n -n, --name <NAME>  Name of the person to greet\n -c, --count <COUNT> Number of times to greet [default: 1]\n -h, --help      Print help\n -V, --version    Print version\n$ demo --name Me\nHello Me!\n\n```\n\n_(version number and`.exe` extension on windows replaced by placeholders)_\nSee also the derive tutorial\u27e84\u27e9 and reference\u27e85\u27e9\n#### \u00a7\u27e818\u27e9Related Projects\nAugment clap:\n  * wild\u27e819\u27e9 for supporting wildcards (`*`) on Windows like you do Linux\n  * argfile\u27e820\u27e9 for loading additional arguments from a file (aka response files)\n  * shadow-rs\u27e821\u27e9 for generating `Command::long_version`\n  * clap_mangen\u27e822\u27e9 for generating man page source (roff)\n  * clap_complete\u27e823\u27e9 for shell completion support\n\n\nCLI Helpers\n  * clio\u27e824\u27e9 for reading/writing to files specified as arguments\n  * clap-verbosity-flag\u27e825\u27e9\n  * clap-cargo\u27e826\u27e9\n  * colorchoice-clap\u27e827\u27e9\n\n\nTesting\n  * `trycmd`\u27e828\u27e9: Bulk snapshot testing\n  * `snapbox`\u27e829\u27e9: Specialized snapshot testing\n  * `assert_cmd`\u27e830\u27e9 and `assert_fs`\u27e831\u27e9: Customized testing\n\n\nDocumentation:\n  * Command-line Apps for Rust\u27e832\u27e9 book\n\n\n## Modules\u00a7\u27e833\u27e9\n\n_cookbook\u27e88\u27e9`unstable-doc`\n    Documentation: Cookbook\n\n_derive\u27e85\u27e9`unstable-doc`\n    Documentation: Derive Reference\n\n_faq\u27e89\u27e9`unstable-doc`\n    Documentation: FAQ\n\n_features\u27e817\u27e9`unstable-doc`\n    Documentation: Feature Flags\n\n_tutorial\u27e86\u27e9`unstable-doc`\n    Tutorial for the Builder API\n\nbuilder\u27e834\u27e9\n    Define `Command`\u27e87\u27e9 line arguments\u27e835\u27e9\n\nerror\u27e836\u27e9\n    Error reporting\n\nparser\u27e837\u27e9\n    `Command`\u27e87\u27e9 line argument parser\n## Macros\u00a7\u27e838\u27e9\n\narg\u27e839\u27e9\n    Create an `Arg`\u27e835\u27e9 from a usage string.\n\ncommand\u27e840\u27e9\n    Allows you to build the `Command` instance from your Cargo.toml at compile time.\n\ncrate_authors\u27e841\u27e9\n    Allows you to pull the authors for the command from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`\n\ncrate_description\u27e842\u27e9\n    Allows you to pull the description from your Cargo.toml at compile time.\n\ncrate_name\u27e843\u27e9\n    Allows you to pull the name from your Cargo.toml at compile time.\n\ncrate_version\u27e844\u27e9\n    Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`\n\nvalue_parser\u27e845\u27e9\n    Select a `ValueParser`\u27e846\u27e9 implementation from the intended type\n## Structs\u00a7\u27e847\u27e9\n\nArg\u27e835\u27e9\n    The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.\n\nArgGroup\u27e848\u27e9\n    Family of related arguments\u27e835\u27e9.\n\nArgMatches\u27e849\u27e9\n    Container for parse results.\n\nCommand\u27e87\u27e9\n    Build a command-line interface.\n\nId\u27e850\u27e9\n    `Arg`\u27e835\u27e9 or `ArgGroup`\u27e848\u27e9 identifier\n## Enums\u00a7\u27e851\u27e9\n\nArgAction\u27e852\u27e9\n    Behavior of arguments when they are encountered while parsing\n\nColorChoice\u27e853\u27e9\n    Represents the color preferences for program output\n\nValueHint\u27e854\u27e9\n    Provide shell with hint on how to complete an argument.\n## Traits\u00a7\u27e855\u27e9\n\nArgs\u27e856\u27e9\n    Parse a set of arguments into a user-defined container.\n\nCommandFactory\u27e857\u27e9\n    Create a `Command`\u27e87\u27e9 relevant for a user-defined container.\n\nFromArgMatches\u27e858\u27e9\n    Converts an instance of `ArgMatches`\u27e849\u27e9 to a user-defined container.\n\nParser\u27e859\u27e9\n    Parse command-line arguments into `Self`.\n\nSubcommand\u27e860\u27e9\n    Parse a sub-command into a user-defined enum.\n\nValueEnum\u27e861\u27e9\n    Parse arguments into enums.\n## Type Aliases\u00a7\u27e862\u27e9\n\nError\u27e863\u27e9\n    Command Line Argument Parser Error\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/clap/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/clap/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/clap/latest/src/clap/lib.rs.html#6-106: Source\n\u27e84\u27e9 https://docs.rs/clap/latest/clap/_derive/_tutorial/index.html: mod clap::_derive::_tutorial - tutorial\n\u27e85\u27e9 https://docs.rs/clap/latest/clap/_derive/index.html: mod clap::_derive - reference\n\u27e86\u27e9 https://docs.rs/clap/latest/clap/_tutorial/index.html: mod clap::_tutorial - tutorial\n\u27e87\u27e9 https://docs.rs/clap/latest/clap/struct.Command.html: struct clap::Command - reference\n\u27e88\u27e9 https://docs.rs/clap/latest/clap/_cookbook/index.html: mod clap::_cookbook - Cookbook\n\u27e89\u27e9 https://docs.rs/clap/latest/clap/_faq/index.html: mod clap::_faq - FAQ\n\u27e810\u27e9 https://github.com/clap-rs/clap/discussions: Discussions\n\u27e811\u27e9 https://github.com/clap-rs/clap/blob/v4.5.40/CHANGELOG.md: CHANGELOG\n\u27e812\u27e9 https://docs.rs/clap/latest/clap/#aspirations: \u00a7\n\u27e813\u27e9 https://github.com/clap-rs/clap/tree/master/clap_complete: shell completions\n\u27e814\u27e9 https://github.com/rust-cli/team/: WG-CLI\n\u27e815\u27e9 https://github.com/rust-cli/argparse-benchmarks-rs: argparse-benchmarks\n\u27e816\u27e9 https://docs.rs/clap/latest/clap/#example: \u00a7\n\u27e817\u27e9 https://docs.rs/clap/latest/clap/_features/index.html: mod clap::_features - feature flag reference\n\u27e818\u27e9 https://docs.rs/clap/latest/clap/#related-projects: \u00a7\n\u27e819\u27e9 https://crates.io/crates/wild: wild\n\u27e820\u27e9 https://crates.io/crates/argfile: argfile\n\u27e821\u27e9 https://crates.io/crates/shadow-rs: shadow-rs\n\u27e822\u27e9 https://crates.io/crates/clap_mangen: clap_mangen\n\u27e823\u27e9 https://crates.io/crates/clap_complete: clap_complete\n\u27e824\u27e9 https://crates.io/crates/clio: clio\n\u27e825\u27e9 https://crates.io/crates/clap-verbosity-flag: clap-verbosity-flag\n\u27e826\u27e9 https://crates.io/crates/clap-cargo: clap-cargo\n\u27e827\u27e9 https://crates.io/crates/colorchoice-clap: colorchoice-clap\n\u27e828\u27e9 https://crates.io/crates/trycmd: `trycmd`\n\u27e829\u27e9 https://crates.io/crates/snapbox: `snapbox`\n\u27e830\u27e9 https://crates.io/crates/assert_cmd: `assert_cmd`\n\u27e831\u27e9 https://crates.io/crates/assert_fs: `assert_fs`\n\u27e832\u27e9 https://rust-cli.github.io/book/index.html: Command-line Apps for Rust\n\u27e833\u27e9 https://docs.rs/clap/latest/clap/#modules: \u00a7\n\u27e834\u27e9 https://docs.rs/clap/latest/clap/builder/index.html: mod clap::builder - builder\n\u27e835\u27e9 https://docs.rs/clap/latest/clap/struct.Arg.html: struct clap::Arg - arguments\n\u27e836\u27e9 https://docs.rs/clap/latest/clap/error/index.html: mod clap::error - error\n\u27e837\u27e9 https://docs.rs/clap/latest/clap/parser/index.html: mod clap::parser - parser\n\u27e838\u27e9 https://docs.rs/clap/latest/clap/#macros: \u00a7\n\u27e839\u27e9 https://docs.rs/clap/latest/clap/macro.arg.html: macro clap::arg - arg\n\u27e840\u27e9 https://docs.rs/clap/latest/clap/macro.command.html: macro clap::command - command\n\u27e841\u27e9 https://docs.rs/clap/latest/clap/macro.crate_authors.html: macro clap::crate_authors - crate_authors\n\u27e842\u27e9 https://docs.rs/clap/latest/clap/macro.crate_description.html: macro clap::crate_description - crate_description\n\u27e843\u27e9 https://docs.rs/clap/latest/clap/macro.crate_name.html: macro clap::crate_name - crate_name\n\u27e844\u27e9 https://docs.rs/clap/latest/clap/macro.crate_version.html: macro clap::crate_version - crate_version\n\u27e845\u27e9 https://docs.rs/clap/latest/clap/macro.value_parser.html: macro clap::value_parser - value_parser\n\u27e846\u27e9 https://docs.rs/clap/latest/clap/builder/struct.ValueParser.html: struct clap::builder::ValueParser - `ValueParser`\n\u27e847\u27e9 https://docs.rs/clap/latest/clap/#structs: \u00a7\n\u27e848\u27e9 https://docs.rs/clap/latest/clap/struct.ArgGroup.html: struct clap::ArgGroup - ArgGroup\n\u27e849\u27e9 https://docs.rs/clap/latest/clap/struct.ArgMatches.html: struct clap::ArgMatches - ArgMatches\n\u27e850\u27e9 https://docs.rs/clap/latest/clap/struct.Id.html: struct clap::Id - Id\n\u27e851\u27e9 https://docs.rs/clap/latest/clap/#enums: \u00a7\n\u27e852\u27e9 https://docs.rs/clap/latest/clap/enum.ArgAction.html: enum clap::ArgAction - ArgAction\n\u27e853\u27e9 https://docs.rs/clap/latest/clap/enum.ColorChoice.html: enum clap::ColorChoice - ColorChoice\n\u27e854\u27e9 https://docs.rs/clap/latest/clap/enum.ValueHint.html: enum clap::ValueHint - ValueHint\n\u27e855\u27e9 https://docs.rs/clap/latest/clap/#traits: \u00a7\n\u27e856\u27e9 https://docs.rs/clap/latest/clap/trait.Args.html: trait clap::Args - Args\n\u27e857\u27e9 https://docs.rs/clap/latest/clap/trait.CommandFactory.html: trait clap::CommandFactory - CommandFactory\n\u27e858\u27e9 https://docs.rs/clap/latest/clap/trait.FromArgMatches.html: trait clap::FromArgMatches - FromArgMatches\n\u27e859\u27e9 https://docs.rs/clap/latest/clap/trait.Parser.html: trait clap::Parser - Parser\n\u27e860\u27e9 https://docs.rs/clap/latest/clap/trait.Subcommand.html: trait clap::Subcommand - Subcommand\n\u27e861\u27e9 https://docs.rs/clap/latest/clap/trait.ValueEnum.html: trait clap::ValueEnum - ValueEnum\n\u27e862\u27e9 https://docs.rs/clap/latest/clap/#types: \u00a7\n\u27e863\u27e9 https://docs.rs/clap/latest/clap/type.Error.html: type clap::Error - Error\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `clap` crate is a powerful and flexible command-line argument parser for Rust, offering both derive and builder APIs to define CLI interfaces. It provides features like automatic help and version generation, argument validation, colored output, shell completions, and suggested fixes for user errors. With support for feature flags, reasonable performance, and extensive documentation, it enables developers to create polished and efficient CLI applications.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 9.5,
    "factual_counterfactual": "### Pair 1: Derive Macros for CLI Parsing  \n\u2705 Factual: The `clap` crate provides derive macros, such as `#[derive(Parser)]`, to simplify the creation of command-line interfaces by automatically parsing arguments into a user-defined struct.  \n\u274c Counterfactual: The `clap` crate requires manual implementation of argument parsing logic, as it does not support derive macros for automated CLI generation.  \n\n---\n\n### Pair 2: Shell Completion Support  \n\u2705 Factual: The `clap_complete` crate, an augmentation of `clap`, enables shell completion support for various shells like Bash, Zsh, and Fish.  \n\u274c Counterfactual: The `clap` crate natively provides built-in shell completion support without requiring any additional crates.  \n\n---\n\n### Pair 3: Performance Trade-offs  \n\u2705 Factual: The `clap` crate prioritizes flexibility and user experience over minimal binary size and fast build times, while still striving to keep these metrics reasonable.  \n\u274c Counterfactual: The `clap` crate is optimized exclusively for minimal binary size and fast build times, sacrificing flexibility and user experience.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}