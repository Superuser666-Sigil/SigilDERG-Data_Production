{
    "name": "strum_macros",
    "version": "0.27.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/strum_macros/latest/strum_macros/all.html \"show sidebar\")\n# Crate strum_macrosCopy item path\n[Settings](https://docs.rs/strum_macros/latest/settings.html)\n[Help](https://docs.rs/strum_macros/latest/help.html)\nSummary[Source](https://docs.rs/strum_macros/latest/src/strum_macros/lib.rs.html#1-969)\nExpand description\n## [\u00a7](https://docs.rs/strum_macros/latest/strum_macros/#strum)Strum\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\nThis crate only contains derive macros for use with the [`strum`](https://docs.rs/strum) crate. The macros provied by this crate are also available by enabling the `derive` feature in aforementioned `strum` crate.\n## Derive Macros[\u00a7](https://docs.rs/strum_macros/latest/strum_macros/#derives)\n\n[AsRefStr](https://docs.rs/strum_macros/latest/strum_macros/derive.AsRefStr.html \"derive strum_macros::AsRefStr\")\n    Converts enum variants to `&'a str`, where `'a` is the lifetime of the input enum reference.\n\n[Display](https://docs.rs/strum_macros/latest/strum_macros/derive.Display.html \"derive strum_macros::Display\")\n    Converts enum variants to strings.\n\n[EnumCount](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumCount.html \"derive strum_macros::EnumCount\")\n    Add a constant `usize` equal to the number of variants.\n\n[EnumDiscriminants](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumDiscriminants.html \"derive strum_macros::EnumDiscriminants\")\n    Generate a new type with only the discriminant names.\n\n[EnumIs](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumIs.html \"derive strum_macros::EnumIs\")\n    Generated `is_*()` methods for each variant. E.g. `Color.is_red()`.\n\n[EnumIter](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumIter.html \"derive strum_macros::EnumIter\")\n    Creates a new type that iterates over the variants of an enum.\n\n[EnumMessage](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumMessage.html \"derive strum_macros::EnumMessage\")\n    Add a verbose message to an enum variant.\n\n[EnumProperty](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumProperty.html \"derive strum_macros::EnumProperty\")\n    Add custom properties to enum variants.\n\n[EnumString](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumString.html \"derive strum_macros::EnumString\")\n    Converts strings to enum variants based on their name.\n\n[EnumTryAs](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumTryAs.html \"derive strum_macros::EnumTryAs\")\n    Generated `try_as_*()` methods for all tuple-style variants. E.g. `Message.try_as_write()`.\n\n[FromRepr](https://docs.rs/strum_macros/latest/strum_macros/derive.FromRepr.html \"derive strum_macros::FromRepr\")\n    Add a function to enum that allows accessing variants by its discriminant\n\n[IntoStaticStr](https://docs.rs/strum_macros/latest/strum_macros/derive.IntoStaticStr.html \"derive strum_macros::IntoStaticStr\")\n    Implements `From<MyEnum> for &'static str` on an enum.\n\n[VariantArray](https://docs.rs/strum_macros/latest/strum_macros/derive.VariantArray.html \"derive strum_macros::VariantArray\")\n    Adds a `'static` slice with all of the Enum\u2019s variants.\n\n[VariantNames](https://docs.rs/strum_macros/latest/strum_macros/derive.VariantNames.html \"derive strum_macros::VariantNames\")\n    Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is a `'static` slice of discriminant names.\n",
        "markdown_with_citations": "[](https://docs.rs/strum_macros/latest/strum_macros/all.html \"show sidebar\")\n# Crate strum_macrosCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Strum\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\nThis crate only contains derive macros for use with the `strum`\u27e85\u27e9 crate. The macros provied by this crate are also available by enabling the `derive` feature in aforementioned `strum` crate.\n## Derive Macros\u00a7\u27e86\u27e9\n\nAsRefStr\u27e87\u27e9\n    Converts enum variants to `&'a str`, where `'a` is the lifetime of the input enum reference.\n\nDisplay\u27e88\u27e9\n    Converts enum variants to strings.\n\nEnumCount\u27e89\u27e9\n    Add a constant `usize` equal to the number of variants.\n\nEnumDiscriminants\u27e810\u27e9\n    Generate a new type with only the discriminant names.\n\nEnumIs\u27e811\u27e9\n    Generated `is_*()` methods for each variant. E.g. `Color.is_red()`.\n\nEnumIter\u27e812\u27e9\n    Creates a new type that iterates over the variants of an enum.\n\nEnumMessage\u27e813\u27e9\n    Add a verbose message to an enum variant.\n\nEnumProperty\u27e814\u27e9\n    Add custom properties to enum variants.\n\nEnumString\u27e815\u27e9\n    Converts strings to enum variants based on their name.\n\nEnumTryAs\u27e816\u27e9\n    Generated `try_as_*()` methods for all tuple-style variants. E.g. `Message.try_as_write()`.\n\nFromRepr\u27e817\u27e9\n    Add a function to enum that allows accessing variants by its discriminant\n\nIntoStaticStr\u27e818\u27e9\n    Implements `From<MyEnum> for &'static str` on an enum.\n\nVariantArray\u27e819\u27e9\n    Adds a `'static` slice with all of the Enum\u2019s variants.\n\nVariantNames\u27e820\u27e9\n    Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is a `'static` slice of discriminant names.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/strum_macros/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/strum_macros/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/strum_macros/latest/src/strum_macros/lib.rs.html#1-969: Source\n\u27e84\u27e9 https://docs.rs/strum_macros/latest/strum_macros/#strum: \u00a7\n\u27e85\u27e9 https://docs.rs/strum: `strum`\n\u27e86\u27e9 https://docs.rs/strum_macros/latest/strum_macros/#derives: \u00a7\n\u27e87\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.AsRefStr.html: derive strum_macros::AsRefStr - AsRefStr\n\u27e88\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.Display.html: derive strum_macros::Display - Display\n\u27e89\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumCount.html: derive strum_macros::EnumCount - EnumCount\n\u27e810\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumDiscriminants.html: derive strum_macros::EnumDiscriminants - EnumDiscriminants\n\u27e811\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumIs.html: derive strum_macros::EnumIs - EnumIs\n\u27e812\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumIter.html: derive strum_macros::EnumIter - EnumIter\n\u27e813\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumMessage.html: derive strum_macros::EnumMessage - EnumMessage\n\u27e814\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumProperty.html: derive strum_macros::EnumProperty - EnumProperty\n\u27e815\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumString.html: derive strum_macros::EnumString - EnumString\n\u27e816\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumTryAs.html: derive strum_macros::EnumTryAs - EnumTryAs\n\u27e817\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.FromRepr.html: derive strum_macros::FromRepr - FromRepr\n\u27e818\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.IntoStaticStr.html: derive strum_macros::IntoStaticStr - IntoStaticStr\n\u27e819\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.VariantArray.html: derive strum_macros::VariantArray - VariantArray\n\u27e820\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.VariantNames.html: derive strum_macros::VariantNames - VariantNames\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `strum_macros` crate provides a collection of derive macros to simplify working with enums in Rust, enhancing their usability with traits and utilities. Key features include converting enum variants to strings (`Display`, `AsRefStr`, `IntoStaticStr`), iterating over variants (`EnumIter`), adding properties (`EnumProperty`, `EnumMessage`), and generating helper methods (`EnumIs`, `EnumTryAs`). It also supports variant counting (`EnumCount`), discriminant access (`FromRepr`), and static slices of variant names (`VariantNames`, `VariantArray`).",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 8.0,
    "factual_counterfactual": "### Pair 1: Enum Variant Conversion\n\u2705 **Factual:** The `strum_macros::AsRefStr` derive macro converts enum variants into `&'a str`, where `'a` represents the lifetime of the input enum reference.  \n\u274c **Counterfactual:** The `strum_macros::AsRefStr` derive macro converts enum variants into `String` values instead of `&'a str`.\n\n---\n\n### Pair 2: Iterating Over Enum Variants\n\u2705 **Factual:** The `strum_macros::EnumIter` derive macro generates functionality to iterate over all variants of an enum.  \n\u274c **Counterfactual:** The `strum_macros::EnumIter` derive macro generates functionality to iterate over all enum discriminants instead of variants.\n\n---\n\n### Pair 3: Enum-to-String Conversion\n\u2705 **Factual:** The `strum_macros::Display` derive macro allows enum variants to be formatted as strings, enabling integration with the `std::fmt::Display` trait.  \n\u274c **Counterfactual:** The `strum_macros::Display` derive macro automatically converts enum variants to uppercase strings, regardless of their original names.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}