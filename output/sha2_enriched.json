{
    "name": "sha2",
    "version": "0.11.0-rc.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/sha2/latest/sha2/all.html \"show sidebar\")\n# Crate sha2Copy item path\n[Settings](https://docs.rs/sha2/latest/settings.html)\n[Help](https://docs.rs/sha2/latest/help.html)\nSummary[Source](https://docs.rs/sha2/latest/src/sha2/lib.rs.html#1-110)\nExpand description\nAn implementation of the [SHA-2](https://en.wikipedia.org/wiki/SHA-2) cryptographic hash algorithms.\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`](https://docs.rs/sha2/latest/sha2/type.Sha224.html \"type sha2::Sha224\"), [`Sha256`](https://docs.rs/sha2/latest/sha2/type.Sha256.html \"type sha2::Sha256\"), [`Sha512_224`](https://docs.rs/sha2/latest/sha2/type.Sha512_224.html \"type sha2::Sha512_224\"), [`Sha512_256`](https://docs.rs/sha2/latest/sha2/type.Sha512_256.html \"type sha2::Sha512_256\"), [`Sha384`](https://docs.rs/sha2/latest/sha2/type.Sha384.html \"type sha2::Sha384\"), and [`Sha512`](https://docs.rs/sha2/latest/sha2/type.Sha512.html \"type sha2::Sha512\").\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512. All other algorithms are just applications of these with different initial hash values, and truncated to different digest bit lengths. The first two algorithms in the list are based on SHA-256, while the last four are based on SHA-512.\n## [\u00a7](https://docs.rs/sha2/latest/sha2/#usage)Usage\n### [\u00a7](https://docs.rs/sha2/latest/sha2/#one-shot-api)One-shot API\n```\nuse hex_literal::hex;\nuse sha2::{Sha256, Digest};\nlet result = Sha256::digest(b\"hello world\");\nassert_eq!(result[..], hex!(\"\n  b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n```\n\n### [\u00a7](https://docs.rs/sha2/latest/sha2/#incremental-api)Incremental API\n```\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n// write input message\nhasher.update(b\"hello world\");\n// read hash digest and consume hasher\nlet result = hasher.finalize();\nassert_eq!(result[..], hex!(\"\n  b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\nassert_eq!(result[..], hex!(\"\n  309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n  989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes](https://github.com/RustCrypto/hashes) readme.\n## Re-exports[\u00a7](https://docs.rs/sha2/latest/sha2/#reexports)\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs[\u00a7](https://docs.rs/sha2/latest/sha2/#structs)\n\n[Sha256VarCore](https://docs.rs/sha2/latest/sha2/struct.Sha256VarCore.html \"struct sha2::Sha256VarCore\")\n    Core block-level SHA-256 hasher with variable output size.\n\n[Sha512VarCore](https://docs.rs/sha2/latest/sha2/struct.Sha512VarCore.html \"struct sha2::Sha512VarCore\")\n    Core block-level SHA-512 hasher with variable output size.\n## Traits[\u00a7](https://docs.rs/sha2/latest/sha2/#traits)\n\n[Digest](https://docs.rs/sha2/latest/sha2/trait.Digest.html \"trait sha2::Digest\")\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Functions[\u00a7](https://docs.rs/sha2/latest/sha2/#functions)\n\n[compress256](https://docs.rs/sha2/latest/sha2/fn.compress256.html \"fn sha2::compress256\")\n    Raw SHA-256 compression function.\n\n[compress512](https://docs.rs/sha2/latest/sha2/fn.compress512.html \"fn sha2::compress512\")\n    Raw SHA-512 compression function.\n## Type Aliases[\u00a7](https://docs.rs/sha2/latest/sha2/#types)\n\n[Sha224](https://docs.rs/sha2/latest/sha2/type.Sha224.html \"type sha2::Sha224\")\n    SHA-224 hasher.\n\n[Sha256](https://docs.rs/sha2/latest/sha2/type.Sha256.html \"type sha2::Sha256\")\n    SHA-256 hasher.\n\n[Sha384](https://docs.rs/sha2/latest/sha2/type.Sha384.html \"type sha2::Sha384\")\n    SHA-384 hasher.\n\n[Sha512](https://docs.rs/sha2/latest/sha2/type.Sha512.html \"type sha2::Sha512\")\n    SHA-512 hasher.\n\n[Sha512_224](https://docs.rs/sha2/latest/sha2/type.Sha512_224.html \"type sha2::Sha512_224\")\n    SHA-512/224 hasher.\n\n[Sha512_256](https://docs.rs/sha2/latest/sha2/type.Sha512_256.html \"type sha2::Sha512_256\")\n    SHA-512/256 hasher.\n",
        "markdown_with_citations": "[](https://docs.rs/sha2/latest/sha2/all.html \"show sidebar\")\n# Crate sha2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn implementation of the SHA-2\u27e84\u27e9 cryptographic hash algorithms.\nThere are 6 standard algorithms specified in the SHA-2 standard: `Sha224`\u27e85\u27e9, `Sha256`\u27e86\u27e9, `Sha512_224`\u27e87\u27e9, `Sha512_256`\u27e88\u27e9, `Sha384`\u27e89\u27e9, and `Sha512`\u27e810\u27e9.\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512. All other algorithms are just applications of these with different initial hash values, and truncated to different digest bit lengths. The first two algorithms in the list are based on SHA-256, while the last four are based on SHA-512.\n## \u00a7\u27e811\u27e9Usage\n### \u00a7\u27e812\u27e9One-shot API\n```\nuse hex_literal::hex;\nuse sha2::{Sha256, Digest};\nlet result = Sha256::digest(b\"hello world\");\nassert_eq!(result[..], hex!(\"\n  b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n```\n\n### \u00a7\u27e813\u27e9Incremental API\n```\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n// write input message\nhasher.update(b\"hello world\");\n// read hash digest and consume hasher\nlet result = hasher.finalize();\nassert_eq!(result[..], hex!(\"\n  b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\nassert_eq!(result[..], hex!(\"\n  309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n  989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see RustCrypto/hashes\u27e814\u27e9 readme.\n## Re-exports\u00a7\u27e815\u27e9\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs\u00a7\u27e816\u27e9\n\nSha256VarCore\u27e817\u27e9\n    Core block-level SHA-256 hasher with variable output size.\n\nSha512VarCore\u27e818\u27e9\n    Core block-level SHA-512 hasher with variable output size.\n## Traits\u00a7\u27e819\u27e9\n\nDigest\u27e820\u27e9\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Functions\u00a7\u27e821\u27e9\n\ncompress256\u27e822\u27e9\n    Raw SHA-256 compression function.\n\ncompress512\u27e823\u27e9\n    Raw SHA-512 compression function.\n## Type Aliases\u00a7\u27e824\u27e9\n\nSha224\u27e85\u27e9\n    SHA-224 hasher.\n\nSha256\u27e86\u27e9\n    SHA-256 hasher.\n\nSha384\u27e89\u27e9\n    SHA-384 hasher.\n\nSha512\u27e810\u27e9\n    SHA-512 hasher.\n\nSha512_224\u27e87\u27e9\n    SHA-512/224 hasher.\n\nSha512_256\u27e88\u27e9\n    SHA-512/256 hasher.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/sha2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/sha2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/sha2/latest/src/sha2/lib.rs.html#1-110: Source\n\u27e84\u27e9 https://en.wikipedia.org/wiki/SHA-2: SHA-2\n\u27e85\u27e9 https://docs.rs/sha2/latest/sha2/type.Sha224.html: type sha2::Sha224 - `Sha224`\n\u27e86\u27e9 https://docs.rs/sha2/latest/sha2/type.Sha256.html: type sha2::Sha256 - `Sha256`\n\u27e87\u27e9 https://docs.rs/sha2/latest/sha2/type.Sha512_224.html: type sha2::Sha512_224 - `Sha512_224`\n\u27e88\u27e9 https://docs.rs/sha2/latest/sha2/type.Sha512_256.html: type sha2::Sha512_256 - `Sha512_256`\n\u27e89\u27e9 https://docs.rs/sha2/latest/sha2/type.Sha384.html: type sha2::Sha384 - `Sha384`\n\u27e810\u27e9 https://docs.rs/sha2/latest/sha2/type.Sha512.html: type sha2::Sha512 - `Sha512`\n\u27e811\u27e9 https://docs.rs/sha2/latest/sha2/#usage: \u00a7\n\u27e812\u27e9 https://docs.rs/sha2/latest/sha2/#one-shot-api: \u00a7\n\u27e813\u27e9 https://docs.rs/sha2/latest/sha2/#incremental-api: \u00a7\n\u27e814\u27e9 https://github.com/RustCrypto/hashes: RustCrypto/hashes\n\u27e815\u27e9 https://docs.rs/sha2/latest/sha2/#reexports: \u00a7\n\u27e816\u27e9 https://docs.rs/sha2/latest/sha2/#structs: \u00a7\n\u27e817\u27e9 https://docs.rs/sha2/latest/sha2/struct.Sha256VarCore.html: struct sha2::Sha256VarCore - Sha256VarCore\n\u27e818\u27e9 https://docs.rs/sha2/latest/sha2/struct.Sha512VarCore.html: struct sha2::Sha512VarCore - Sha512VarCore\n\u27e819\u27e9 https://docs.rs/sha2/latest/sha2/#traits: \u00a7\n\u27e820\u27e9 https://docs.rs/sha2/latest/sha2/trait.Digest.html: trait sha2::Digest - Digest\n\u27e821\u27e9 https://docs.rs/sha2/latest/sha2/#functions: \u00a7\n\u27e822\u27e9 https://docs.rs/sha2/latest/sha2/fn.compress256.html: fn sha2::compress256 - compress256\n\u27e823\u27e9 https://docs.rs/sha2/latest/sha2/fn.compress512.html: fn sha2::compress512 - compress512\n\u27e824\u27e9 https://docs.rs/sha2/latest/sha2/#types: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `sha2` crate provides an implementation of the SHA-2 cryptographic hash algorithms, including six standard variants: `Sha224`, `Sha256`, `Sha384`, `Sha512`, `Sha512_224`, and `Sha512_256`. It supports both a one-shot API for quick hashing and an incremental API for processing data in chunks. Additionally, it offers low-level compression functions (`compress256`, `compress512`) and traits like `Digest` for convenient hashing operations.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Algorithm Implementation  \n\u2705 **Factual:** The `sha2` crate implements six standard algorithms specified in the SHA-2 standard: `Sha224`, `Sha256`, `Sha384`, `Sha512`, `Sha512_224`, and `Sha512_256`.  \n\u274c **Counterfactual:** The `sha2` crate implements all SHA-2 and SHA-3 algorithms, including `SHA3-256` and `SHA3-512`.  \n\n---\n\n### Pair 2: Core Algorithms  \n\u2705 **Factual:** The `sha2` crate is built around two core algorithms, SHA-256 and SHA-512, with other variants derived by modifying initial hash values and truncating output lengths.  \n\u274c **Counterfactual:** The `sha2` crate uses completely distinct implementations for each of the six SHA-2 variants, with no shared algorithmic foundations.  \n\n---\n\n### Pair 3: Performance Characteristics  \n\u2705 **Factual:** The `sha2` crate provides both one-shot and incremental APIs, allowing users to compute hash digests either in a single step or incrementally as data becomes available.  \n\u274c **Counterfactual:** The `sha2` crate only supports one-shot hashing and does not allow incremental updates to hash computations.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}