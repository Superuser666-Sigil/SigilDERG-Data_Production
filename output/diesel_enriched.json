{
    "name": "diesel",
    "version": "2.2.11",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/diesel/latest/diesel/all.html \"show sidebar\")\n# Crate dieselCopy item path\n[Settings](https://docs.rs/diesel/latest/settings.html)\n[Help](https://docs.rs/diesel/latest/help.html)\nSummary[Source](https://docs.rs/diesel/latest/src/diesel/lib.rs.html#1-775)\nExpand description\n## [\u00a7](https://docs.rs/diesel/latest/diesel/#diesel)Diesel\nDiesel is an ORM and query builder designed to reduce the boilerplate for database interactions. If this is your first time reading this documentation, we recommend you start with the [getting started guide](https://diesel.rs/guides/getting-started/). We also have [many other long form guides](https://diesel.rs/guides).\n## [\u00a7](https://docs.rs/diesel/latest/diesel/#where-to-find-things)Where to find things\n### [\u00a7](https://docs.rs/diesel/latest/diesel/#declaring-your-schema)Declaring your schema\nFor Diesel to validate your queries at compile time it requires you to specify your schema in your code, which you can do with [the `table!` macro](https://docs.rs/diesel/latest/diesel/macro.table.html \"macro diesel::table\"). `diesel print-schema` can be used to automatically generate these macro calls (by connecting to your database and querying its schema).\n### [\u00a7](https://docs.rs/diesel/latest/diesel/#getting-started)Getting started\nQueries usually start from either a table, or a function like [`update`](https://docs.rs/diesel/latest/diesel/fn.update.html \"fn diesel::update\"). Those functions can be found [here](https://docs.rs/diesel/latest/diesel/#functions).\nDiesel provides a [`prelude` module](https://docs.rs/diesel/latest/diesel/prelude/index.html \"mod diesel::prelude\"), which exports most of the typically used traits and types. We are conservative about what goes in this module, and avoid anything which has a generic name. Files which use Diesel are expected to have `use diesel::prelude::*;`.\n### [\u00a7](https://docs.rs/diesel/latest/diesel/#constructing-a-query)Constructing a query\nThe tools the query builder gives you can be put into these three categories:\n  * \u201cQuery builder methods\u201d are things that map to portions of a whole query (such as `ORDER` and `WHERE`). These methods usually have the same name as the SQL they map to, except for `WHERE` which is called `filter` in Diesel (To not conflict with the Rust keyword). These methods live in [the `query_dsl` module](https://docs.rs/diesel/latest/diesel/query_dsl/index.html \"mod diesel::query_dsl\").\n  * \u201cExpression methods\u201d are things you would call on columns or other individual values. These methods live in [the `expression_methods` module](https://docs.rs/diesel/latest/diesel/expression_methods/index.html \"mod diesel::expression_methods\") You can often find these by thinking \u201cwhat would this be called\u201d if it were a method and typing that into the search bar (e.g. `LIKE` is called `like` in Diesel). Most operators are named based on the Rust function which maps to that operator in [`std::ops`](https://doc.rust-lang.org/stable/std/ops/index.html) (For example `==` is called `.eq`, and `!=` is called `.ne`).\n  * \u201cBare functions\u201d are normal SQL functions such as `sum`. They live in [the `dsl` module](https://docs.rs/diesel/latest/diesel/dsl/index.html \"mod diesel::dsl\"). Diesel only supports a very small number of these functions. You can declare additional functions you want to use with [the `define_sql_function!` macro](https://docs.rs/diesel/latest/diesel/prelude/macro.define_sql_function.html \"macro diesel::prelude::define_sql_function\").\n\n\n### [\u00a7](https://docs.rs/diesel/latest/diesel/#serializing-and-deserializing)Serializing and Deserializing\nTypes which represent the result of a SQL query implement a trait called [`Queryable`](https://docs.rs/diesel/latest/diesel/deserialize/trait.Queryable.html \"trait diesel::deserialize::Queryable\").\nDiesel maps \u201cRust types\u201d (e.g. `i32`) to and from \u201cSQL types\u201d (e.g. [`diesel::sql_types::Integer`](https://docs.rs/diesel/latest/diesel/sql_types/struct.Integer.html \"struct diesel::sql_types::Integer\")). You can find all the types supported by Diesel in [the `sql_types` module](https://docs.rs/diesel/latest/diesel/sql_types/index.html \"mod diesel::sql_types\"). These types are only used to represent a SQL type. You should never put them on your `Queryable` structs.\nTo find all the Rust types which can be used with a given SQL type, see the documentation for that SQL type.\nTo find all the SQL types which can be used with a Rust type, go to the docs for either [`ToSql`](https://docs.rs/diesel/latest/diesel/serialize/trait.ToSql.html \"trait diesel::serialize::ToSql\") or [`FromSql`](https://docs.rs/diesel/latest/diesel/deserialize/trait.FromSql.html \"trait diesel::deserialize::FromSql\"), go to the \u201cImplementors\u201d section, and find the Rust type you want to use.\n### [\u00a7](https://docs.rs/diesel/latest/diesel/#how-to-read-diesels-compile-time-error-messages)How to read diesels compile time error messages\nDiesel is known for generating large complicated looking errors. Usually most of these error messages can be broken down easily. The following section tries to give an overview of common error messages and how to read them. As a general note it\u2019s always useful to read the complete error message as emitted by rustc, including the `required because of \u2026` part of the message. Your IDE might hide important parts!\nThe following error messages are common:\n  * `the trait bound (diesel::sql_types::Integer, \u2026, diesel::sql_types::Text): load_dsl::private::CompatibleType<YourModel, Pg> is not satisfied` while trying to execute a query: This error indicates a mismatch between what your query returns and what your model struct expects the query to return. The fields need to match in terms of field order, field type and field count. If you are sure that everything matches, double check the enabled diesel features (for support for types from other crates) and double check (via `cargo tree`) that there is only one version of such a shared crate in your dependency tree. Consider using [`#[derive(Selectable)]`](https://docs.rs/diesel/latest/diesel/expression/derive.Selectable.html \"derive diesel::expression::Selectable\") + `#[diesel(check_for_backend(diesel::pg::Pg))]` to improve the generated error message.\n  * `the trait bound i32: diesel::Expression is not satisfied` in the context of `Insertable` model structs: This error indicates a type mismatch between the field you are trying to insert into the database and the actual database type. These error messages contain a line like ` = note: required for i32 to implement AsExpression<diesel::sql_types::Text>` that show both the provided rust side type (`i32` in that case) and the expected database side type (`Text` in that case).\n  * `the trait bound i32: AppearsOnTable<users::table> is not satisfied` in the context of `AsChangeset` model structs: This error indicates a type mismatch between the field you are trying to update and the actual database type. Double check your type mapping.\n  * `the trait bound SomeLargeType: QueryFragment<Sqlite, SomeMarkerType> is not satisfied` while trying to execute a query. This error message indicates that a given query is not supported by your backend. This usually means that you are trying to use SQL features from one SQL dialect on a different database system. Double check your query that everything required is supported by the selected backend. If that\u2019s the case double check that the relevant feature flags are enabled (for example, `returning_clauses_for_sqlite_3_35` for enabling support for returning clauses in newer sqlite versions)\n  * `the trait bound posts::title: SelectableExpression<users::table> is not satisfied` while executing a query: This error message indicates that you\u2019re trying to select a field from a table that does not appear in your from clause. If your query joins the relevant table via [`left_join`](https://docs.rs/diesel/latest/diesel/query_dsl/trait.QueryDsl.html#method.left_join \"method diesel::query_dsl::QueryDsl::left_join\") you need to call [`.nullable()`](https://docs.rs/diesel/latest/diesel/expression_methods/trait.NullableExpressionMethods.html#method.nullable \"method diesel::expression_methods::NullableExpressionMethods::nullable\") on the relevant column in your select clause.\n\n\n### [\u00a7](https://docs.rs/diesel/latest/diesel/#getting-help)Getting help\nIf you run into problems, Diesel has an active community. Open a new [discussion](https://github.com/diesel-rs/diesel/discussions/categories/q-a) thread at diesel github repository and we will try to help you\n## [\u00a7](https://docs.rs/diesel/latest/diesel/#crate-feature-flags)Crate feature flags\nThe following feature flags are considered to be part of diesels public API. Any feature flag that is not listed here is **not** considered to be part of the public API and can disappear at any point in time:\n  * `sqlite`: This feature enables the diesel sqlite backend. Enabling this feature requires per default a compatible copy of `libsqlite3` for your target architecture. Alternatively, you can add `libsqlite3-sys` with the `bundled` feature as a dependency to your crate so SQLite will be bundled:\n```\n[dependencies]\nlibsqlite3-sys = { version = \"0.29\", features = [\"bundled\"] }\n```\n\n  * `postgres`: This feature enables the diesel postgres backend. Enabling this feature requires a compatible copy of `libpq` for your target architecture. This features implies `postgres_backend`\n  * `mysql`: This feature enables the idesel mysql backend. Enabling this feature requires a compatible copy of `libmysqlclient` for your target architecture. This feature implies `mysql_backend`\n  * `postgres_backend`: This feature enables those parts of diesels postgres backend, that are not dependent on `libpq`. Diesel does not provide any connection implementation with only this feature enabled. This feature can be used to implement a custom implementation of diesels `Connection` trait for the postgres backend outside of diesel itself, while reusing the existing query dsl extensions for the postgres backend\n  * `mysql_backend`: This feature enables those parts of diesels mysql backend, that are not dependent on `libmysqlclient`. Diesel does not provide any connection implementation with only this feature enabled. This feature can be used to implement a custom implementation of diesels `Connection` trait for the mysql backend outside of diesel itself, while reusing the existing query dsl extensions for the mysql backend\n  * `returning_clauses_for_sqlite_3_35`: This feature enables support for `RETURNING` clauses in the sqlite backend. Enabling this feature requires sqlite 3.35.0 or newer.\n  * `32-column-tables`: This feature enables support for tables with up to 32 columns. This feature is enabled by default. Consider disabling this feature if you write a library crate providing general extensions for diesel or if you do not need to support tables with more than 16 columns and you want to minimize your compile times.\n  * `64-column-tables`: This feature enables support for tables with up to 64 columns. It implies the `32-column-tables` feature. Enabling this feature will increase your compile times.\n  * `128-column-tables`: This feature enables support for tables with up to 128 columns. It implies the `64-column-tables` feature. Enabling this feature will increase your compile times significantly.\n  * `i-implement-a-third-party-backend-and-opt-into-breaking-changes`: This feature opens up some otherwise private API, that can be useful to implement a third party [`Backend`](https://docs.rs/diesel/latest/diesel/backend/trait.Backend.html \"trait diesel::backend::Backend\") or write a custom [`Connection`](https://docs.rs/diesel/latest/diesel/connection/trait.Connection.html \"trait diesel::connection::Connection\") implementation. **Do not use this feature for any other usecase**. By enabling this feature you explicitly opt out diesel stability guarantees. We explicitly reserve us the right to break API\u2019s exported under this feature flag in any upcoming minor version release. If you publish a crate depending on this feature flag consider to restrict the supported diesel version to the currently released minor version.\n  * `serde_json`: This feature flag enables support for (de)serializing json values from the database using types provided by `serde_json`.\n  * `chrono`: This feature flags enables support for (de)serializing date/time values from the database using types provided by `chrono`\n  * `uuid`: This feature flag enables support for (de)serializing uuid values from the database using types provided by `uuid`\n  * `network-address`: This feature flag enables support for (de)serializing IP values from the database using types provided by `ipnetwork`.\n  * `ipnet-address`: This feature flag enables support for (de)serializing IP values from the database using types provided by `ipnet`.\n  * `numeric`: This feature flag enables support for (de)serializing numeric values from the database using types provided by `bigdecimal`\n  * `r2d2`: This feature flag enables support for the `r2d2` connection pool implementation.\n  * `extras`: This feature enables the feature flagged support for any third party crate. This implies the following feature flags: `serde_json`, `chrono`, `uuid`, `network-address`, `numeric`, `r2d2`\n  * `with-deprecated`: This feature enables items marked as `#[deprecated]`. It is enabled by default. disabling this feature explicitly opts out diesels stability guarantee.\n  * `without-deprecated`: This feature disables any item marked as `#[deprecated]`. Enabling this feature explicitly opts out the stability guarantee given by diesel. This feature overrides the `with-deprecated`. Note that this may also remove items that are not shown as `#[deprecated]` in our documentation, due to various bugs in rustdoc. It can be used to check if you depend on any such hidden `#[deprecated]` item.\n\n\nBy default the following features are enabled:\n  * `with-deprecated`\n  * `32-column-tables`\n\n\n## Re-exports[\u00a7](https://docs.rs/diesel/latest/diesel/#reexports)\n\n`pub use crate::result::Error::NotFound[](https://docs.rs/diesel/latest/diesel/result/enum.Error.html \"enum diesel::result::Error\");`\n\n\n`pub use crate::prelude[](https://docs.rs/diesel/latest/diesel/prelude/index.html \"mod diesel::prelude\")::*;`\n\n## Modules[\u00a7](https://docs.rs/diesel/latest/diesel/#modules)\n\n[associations](https://docs.rs/diesel/latest/diesel/associations/index.html \"mod diesel::associations\")\n    Traits related to relationships between multiple tables.\n\n[backend](https://docs.rs/diesel/latest/diesel/backend/index.html \"mod diesel::backend\")\n    Types which represent various database backends\n\n[connection](https://docs.rs/diesel/latest/diesel/connection/index.html \"mod diesel::connection\")\n    Types related to database connections\n\n[data_types](https://docs.rs/diesel/latest/diesel/data_types/index.html \"mod diesel::data_types\")\n    Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.\n\n[deserialize](https://docs.rs/diesel/latest/diesel/deserialize/index.html \"mod diesel::deserialize\")\n    Types and traits related to deserializing values from the database\n\n[dsl](https://docs.rs/diesel/latest/diesel/dsl/index.html \"mod diesel::dsl\")\n    Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.\n\n[expression](https://docs.rs/diesel/latest/diesel/expression/index.html \"mod diesel::expression\")\n    AST types representing various typed SQL expressions.\n\n[expression_methods](https://docs.rs/diesel/latest/diesel/expression_methods/index.html \"mod diesel::expression_methods\")\n    Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.\n\n[helper_types](https://docs.rs/diesel/latest/diesel/helper_types/index.html \"mod diesel::helper_types\")\n    Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can\u2019t be combined into a single trait for boxing purposes.\n\n[migration](https://docs.rs/diesel/latest/diesel/migration/index.html \"mod diesel::migration\")\n    Representation of migrations\n\n[mysql](https://docs.rs/diesel/latest/diesel/mysql/index.html \"mod diesel::mysql\")`mysql_backend`\n    Provides types and functions related to working with MySQL\n\n[pg](https://docs.rs/diesel/latest/diesel/pg/index.html \"mod diesel::pg\")`postgres_backend`\n    Provides types and functions related to working with PostgreSQL\n\n[prelude](https://docs.rs/diesel/latest/diesel/prelude/index.html \"mod diesel::prelude\")\n    Re-exports important traits and types. Meant to be glob imported when using Diesel.\n\n[query_builder](https://docs.rs/diesel/latest/diesel/query_builder/index.html \"mod diesel::query_builder\")\n    Contains traits responsible for the actual construction of SQL statements\n\n[query_dsl](https://docs.rs/diesel/latest/diesel/query_dsl/index.html \"mod diesel::query_dsl\")\n    Traits that construct SELECT statements\n\n[query_source](https://docs.rs/diesel/latest/diesel/query_source/index.html \"mod diesel::query_source\")\n    Types related to describing schema, and interactions between tables.\n\n[r2d2](https://docs.rs/diesel/latest/diesel/r2d2/index.html \"mod diesel::r2d2\")`r2d2`\n    Connection pooling via r2d2.\n\n[result](https://docs.rs/diesel/latest/diesel/result/index.html \"mod diesel::result\")\n    Errors, type aliases, and functions related to working with `Result`.\n\n[row](https://docs.rs/diesel/latest/diesel/row/index.html \"mod diesel::row\")\n    Contains the `Row` trait\n\n[serialize](https://docs.rs/diesel/latest/diesel/serialize/index.html \"mod diesel::serialize\")\n    Types and traits related to serializing values for the database\n\n[sql_types](https://docs.rs/diesel/latest/diesel/sql_types/index.html \"mod diesel::sql_types\")\n    Types which represent a SQL data type.\n\n[sqlite](https://docs.rs/diesel/latest/diesel/sqlite/index.html \"mod diesel::sqlite\")`sqlite`\n    Provides types and functions related to working with SQLite\n\n[upsert](https://docs.rs/diesel/latest/diesel/upsert/index.html \"mod diesel::upsert\")\n    Types and functions related to PG\u2019s and Sqlite\u2019s `ON CONFLICT` clause\n## Macros[\u00a7](https://docs.rs/diesel/latest/diesel/#macros)\n\n[alias](https://docs.rs/diesel/latest/diesel/macro.alias.html \"macro diesel::alias\")\n    Declare a new alias for a table\n\n[allow_columns_to_appear_in_same_group_by_clause](https://docs.rs/diesel/latest/diesel/macro.allow_columns_to_appear_in_same_group_by_clause.html \"macro diesel::allow_columns_to_appear_in_same_group_by_clause\")\n    Allow two or more columns which are otherwise unrelated to be used together in a group by clause.\n\n[allow_tables_to_appear_in_same_query](https://docs.rs/diesel/latest/diesel/macro.allow_tables_to_appear_in_same_query.html \"macro diesel::allow_tables_to_appear_in_same_query\")\n    Allow two or more tables which are otherwise unrelated to be used together in a query.\n\n[infix_operator](https://docs.rs/diesel/latest/diesel/macro.infix_operator.html \"macro diesel::infix_operator\")\n    Useful for libraries adding support for new SQL types. Apps should never need to call this.\n\n[joinable](https://docs.rs/diesel/latest/diesel/macro.joinable.html \"macro diesel::joinable\")\n    Allow two tables to be referenced in a join query without providing an explicit `ON` clause.\n\n[numeric_expr](https://docs.rs/diesel/latest/diesel/macro.numeric_expr.html \"macro diesel::numeric_expr\")\n    Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.\n\n[operator_allowed](https://docs.rs/diesel/latest/diesel/macro.operator_allowed.html \"macro diesel::operator_allowed\")\n    Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you\u2019d like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.\n\n[postfix_operator](https://docs.rs/diesel/latest/diesel/macro.postfix_operator.html \"macro diesel::postfix_operator\")\n    Useful for libraries adding support for new SQL types. Apps should never need to call this.\n\n[prefix_operator](https://docs.rs/diesel/latest/diesel/macro.prefix_operator.html \"macro diesel::prefix_operator\")\n    Useful for libraries adding support for new SQL types. Apps should never need to call this.\n\n[table](https://docs.rs/diesel/latest/diesel/macro.table.html \"macro diesel::table\")\n    Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you will find a unit struct named `table`, and a unit struct with the name of each column.\n## Functions[\u00a7](https://docs.rs/diesel/latest/diesel/#functions)\n\n[copy_from](https://docs.rs/diesel/latest/diesel/fn.copy_from.html \"fn diesel::copy_from\")`postgres_backend` and `postgres`\n    Creates a `COPY FROM` statement\n\n[copy_to](https://docs.rs/diesel/latest/diesel/fn.copy_to.html \"fn diesel::copy_to\")`postgres_backend` and `postgres`\n    Creates a `COPY TO` statement\n\n[debug_query](https://docs.rs/diesel/latest/diesel/fn.debug_query.html \"fn diesel::debug_query\")\n    Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.\n\n[delete](https://docs.rs/diesel/latest/diesel/fn.delete.html \"fn diesel::delete\")\n    Creates a `DELETE` statement.\n\n[insert_into](https://docs.rs/diesel/latest/diesel/fn.insert_into.html \"fn diesel::insert_into\")\n    Creates an `INSERT` statement for the target table.\n\n[insert_or_ignore_into](https://docs.rs/diesel/latest/diesel/fn.insert_or_ignore_into.html \"fn diesel::insert_or_ignore_into\")\n    Creates an `INSERT [OR] IGNORE` statement.\n\n[replace_into](https://docs.rs/diesel/latest/diesel/fn.replace_into.html \"fn diesel::replace_into\")\n    Creates a `REPLACE` statement.\n\n[select](https://docs.rs/diesel/latest/diesel/fn.select.html \"fn diesel::select\")\n    Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.\n\n[sql_query](https://docs.rs/diesel/latest/diesel/fn.sql_query.html \"fn diesel::sql_query\")\n    Construct a full SQL query using raw SQL.\n\n[update](https://docs.rs/diesel/latest/diesel/fn.update.html \"fn diesel::update\")\n    Creates an `UPDATE` statement.\n## Derive Macros[\u00a7](https://docs.rs/diesel/latest/diesel/#derives)\n\n[MultiConnection](https://docs.rs/diesel/latest/diesel/derive.MultiConnection.html \"derive diesel::MultiConnection\")\n    This derives implements `diesel::Connection` and related traits for an enum of connections to different databases.\n",
        "markdown_with_citations": "[](https://docs.rs/diesel/latest/diesel/all.html \"show sidebar\")\n# Crate dieselCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Diesel\nDiesel is an ORM and query builder designed to reduce the boilerplate for database interactions. If this is your first time reading this documentation, we recommend you start with the getting started guide\u27e85\u27e9. We also have many other long form guides\u27e86\u27e9.\n## \u00a7\u27e87\u27e9Where to find things\n### \u00a7\u27e88\u27e9Declaring your schema\nFor Diesel to validate your queries at compile time it requires you to specify your schema in your code, which you can do with the `table!` macro\u27e89\u27e9. `diesel print-schema` can be used to automatically generate these macro calls (by connecting to your database and querying its schema).\n### \u00a7\u27e810\u27e9Getting started\nQueries usually start from either a table, or a function like `update`\u27e811\u27e9. Those functions can be found here\u27e812\u27e9.\nDiesel provides a `prelude` module\u27e813\u27e9, which exports most of the typically used traits and types. We are conservative about what goes in this module, and avoid anything which has a generic name. Files which use Diesel are expected to have `use diesel::prelude::*;`.\n### \u00a7\u27e814\u27e9Constructing a query\nThe tools the query builder gives you can be put into these three categories:\n  * \u201cQuery builder methods\u201d are things that map to portions of a whole query (such as `ORDER` and `WHERE`). These methods usually have the same name as the SQL they map to, except for `WHERE` which is called `filter` in Diesel (To not conflict with the Rust keyword). These methods live in the `query_dsl` module\u27e815\u27e9.\n  * \u201cExpression methods\u201d are things you would call on columns or other individual values. These methods live in the `expression_methods` module\u27e816\u27e9 You can often find these by thinking \u201cwhat would this be called\u201d if it were a method and typing that into the search bar (e.g. `LIKE` is called `like` in Diesel). Most operators are named based on the Rust function which maps to that operator in `std::ops`\u27e817\u27e9 (For example `==` is called `.eq`, and `!=` is called `.ne`).\n  * \u201cBare functions\u201d are normal SQL functions such as `sum`. They live in the `dsl` module\u27e818\u27e9. Diesel only supports a very small number of these functions. You can declare additional functions you want to use with the `define_sql_function!` macro\u27e819\u27e9.\n\n\n### \u00a7\u27e820\u27e9Serializing and Deserializing\nTypes which represent the result of a SQL query implement a trait called `Queryable`\u27e821\u27e9.\nDiesel maps \u201cRust types\u201d (e.g. `i32`) to and from \u201cSQL types\u201d (e.g. `diesel::sql_types::Integer`\u27e822\u27e9). You can find all the types supported by Diesel in the `sql_types` module\u27e823\u27e9. These types are only used to represent a SQL type. You should never put them on your `Queryable` structs.\nTo find all the Rust types which can be used with a given SQL type, see the documentation for that SQL type.\nTo find all the SQL types which can be used with a Rust type, go to the docs for either `ToSql`\u27e824\u27e9 or `FromSql`\u27e825\u27e9, go to the \u201cImplementors\u201d section, and find the Rust type you want to use.\n### \u00a7\u27e826\u27e9How to read diesels compile time error messages\nDiesel is known for generating large complicated looking errors. Usually most of these error messages can be broken down easily. The following section tries to give an overview of common error messages and how to read them. As a general note it\u2019s always useful to read the complete error message as emitted by rustc, including the `required because of \u2026` part of the message. Your IDE might hide important parts!\nThe following error messages are common:\n  * `the trait bound (diesel::sql_types::Integer, \u2026, diesel::sql_types::Text): load_dsl::private::CompatibleType<YourModel, Pg> is not satisfied` while trying to execute a query: This error indicates a mismatch between what your query returns and what your model struct expects the query to return. The fields need to match in terms of field order, field type and field count. If you are sure that everything matches, double check the enabled diesel features (for support for types from other crates) and double check (via `cargo tree`) that there is only one version of such a shared crate in your dependency tree. Consider using [`#[derive(Selectable)]`](https://docs.rs/diesel/latest/diesel/expression/derive.Selectable.html \"derive diesel::expression::Selectable\") + `#[diesel(check_for_backend(diesel::pg::Pg))]` to improve the generated error message.\n  * `the trait bound i32: diesel::Expression is not satisfied` in the context of `Insertable` model structs: This error indicates a type mismatch between the field you are trying to insert into the database and the actual database type. These error messages contain a line like ` = note: required for i32 to implement AsExpression<diesel::sql_types::Text>` that show both the provided rust side type (`i32` in that case) and the expected database side type (`Text` in that case).\n  * `the trait bound i32: AppearsOnTable<users::table> is not satisfied` in the context of `AsChangeset` model structs: This error indicates a type mismatch between the field you are trying to update and the actual database type. Double check your type mapping.\n  * `the trait bound SomeLargeType: QueryFragment<Sqlite, SomeMarkerType> is not satisfied` while trying to execute a query. This error message indicates that a given query is not supported by your backend. This usually means that you are trying to use SQL features from one SQL dialect on a different database system. Double check your query that everything required is supported by the selected backend. If that\u2019s the case double check that the relevant feature flags are enabled (for example, `returning_clauses_for_sqlite_3_35` for enabling support for returning clauses in newer sqlite versions)\n  * `the trait bound posts::title: SelectableExpression<users::table> is not satisfied` while executing a query: This error message indicates that you\u2019re trying to select a field from a table that does not appear in your from clause. If your query joins the relevant table via `left_join`\u27e827\u27e9 you need to call `.nullable()`\u27e828\u27e9 on the relevant column in your select clause.\n\n\n### \u00a7\u27e829\u27e9Getting help\nIf you run into problems, Diesel has an active community. Open a new discussion\u27e830\u27e9 thread at diesel github repository and we will try to help you\n## \u00a7\u27e831\u27e9Crate feature flags\nThe following feature flags are considered to be part of diesels public API. Any feature flag that is not listed here is **not** considered to be part of the public API and can disappear at any point in time:\n  * `sqlite`: This feature enables the diesel sqlite backend. Enabling this feature requires per default a compatible copy of `libsqlite3` for your target architecture. Alternatively, you can add `libsqlite3-sys` with the `bundled` feature as a dependency to your crate so SQLite will be bundled:\n```\n[dependencies]\nlibsqlite3-sys = { version = \"0.29\", features = [\"bundled\"] }\n```\n\n  * `postgres`: This feature enables the diesel postgres backend. Enabling this feature requires a compatible copy of `libpq` for your target architecture. This features implies `postgres_backend`\n  * `mysql`: This feature enables the idesel mysql backend. Enabling this feature requires a compatible copy of `libmysqlclient` for your target architecture. This feature implies `mysql_backend`\n  * `postgres_backend`: This feature enables those parts of diesels postgres backend, that are not dependent on `libpq`. Diesel does not provide any connection implementation with only this feature enabled. This feature can be used to implement a custom implementation of diesels `Connection` trait for the postgres backend outside of diesel itself, while reusing the existing query dsl extensions for the postgres backend\n  * `mysql_backend`: This feature enables those parts of diesels mysql backend, that are not dependent on `libmysqlclient`. Diesel does not provide any connection implementation with only this feature enabled. This feature can be used to implement a custom implementation of diesels `Connection` trait for the mysql backend outside of diesel itself, while reusing the existing query dsl extensions for the mysql backend\n  * `returning_clauses_for_sqlite_3_35`: This feature enables support for `RETURNING` clauses in the sqlite backend. Enabling this feature requires sqlite 3.35.0 or newer.\n  * `32-column-tables`: This feature enables support for tables with up to 32 columns. This feature is enabled by default. Consider disabling this feature if you write a library crate providing general extensions for diesel or if you do not need to support tables with more than 16 columns and you want to minimize your compile times.\n  * `64-column-tables`: This feature enables support for tables with up to 64 columns. It implies the `32-column-tables` feature. Enabling this feature will increase your compile times.\n  * `128-column-tables`: This feature enables support for tables with up to 128 columns. It implies the `64-column-tables` feature. Enabling this feature will increase your compile times significantly.\n  * `i-implement-a-third-party-backend-and-opt-into-breaking-changes`: This feature opens up some otherwise private API, that can be useful to implement a third party `Backend`\u27e832\u27e9 or write a custom `Connection`\u27e833\u27e9 implementation. **Do not use this feature for any other usecase**. By enabling this feature you explicitly opt out diesel stability guarantees. We explicitly reserve us the right to break API\u2019s exported under this feature flag in any upcoming minor version release. If you publish a crate depending on this feature flag consider to restrict the supported diesel version to the currently released minor version.\n  * `serde_json`: This feature flag enables support for (de)serializing json values from the database using types provided by `serde_json`.\n  * `chrono`: This feature flags enables support for (de)serializing date/time values from the database using types provided by `chrono`\n  * `uuid`: This feature flag enables support for (de)serializing uuid values from the database using types provided by `uuid`\n  * `network-address`: This feature flag enables support for (de)serializing IP values from the database using types provided by `ipnetwork`.\n  * `ipnet-address`: This feature flag enables support for (de)serializing IP values from the database using types provided by `ipnet`.\n  * `numeric`: This feature flag enables support for (de)serializing numeric values from the database using types provided by `bigdecimal`\n  * `r2d2`: This feature flag enables support for the `r2d2` connection pool implementation.\n  * `extras`: This feature enables the feature flagged support for any third party crate. This implies the following feature flags: `serde_json`, `chrono`, `uuid`, `network-address`, `numeric`, `r2d2`\n  * `with-deprecated`: This feature enables items marked as `#[deprecated]`. It is enabled by default. disabling this feature explicitly opts out diesels stability guarantee.\n  * `without-deprecated`: This feature disables any item marked as `#[deprecated]`. Enabling this feature explicitly opts out the stability guarantee given by diesel. This feature overrides the `with-deprecated`. Note that this may also remove items that are not shown as `#[deprecated]` in our documentation, due to various bugs in rustdoc. It can be used to check if you depend on any such hidden `#[deprecated]` item.\n\n\nBy default the following features are enabled:\n  * `with-deprecated`\n  * `32-column-tables`\n\n\n## Re-exports\u00a7\u27e834\u27e9\n\n`pub use crate::result::Error::NotFound[](https://docs.rs/diesel/latest/diesel/result/enum.Error.html \"enum diesel::result::Error\");`\n\n\n`pub use crate::prelude[](https://docs.rs/diesel/latest/diesel/prelude/index.html \"mod diesel::prelude\")::*;`\n\n## Modules\u00a7\u27e835\u27e9\n\nassociations\u27e836\u27e9\n    Traits related to relationships between multiple tables.\n\nbackend\u27e837\u27e9\n    Types which represent various database backends\n\nconnection\u27e838\u27e9\n    Types related to database connections\n\ndata_types\u27e839\u27e9\n    Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.\n\ndeserialize\u27e840\u27e9\n    Types and traits related to deserializing values from the database\n\ndsl\u27e818\u27e9\n    Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.\n\nexpression\u27e841\u27e9\n    AST types representing various typed SQL expressions.\n\nexpression_methods\u27e816\u27e9\n    Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.\n\nhelper_types\u27e842\u27e9\n    Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can\u2019t be combined into a single trait for boxing purposes.\n\nmigration\u27e843\u27e9\n    Representation of migrations\n\nmysql\u27e844\u27e9`mysql_backend`\n    Provides types and functions related to working with MySQL\n\npg\u27e845\u27e9`postgres_backend`\n    Provides types and functions related to working with PostgreSQL\n\nprelude\u27e813\u27e9\n    Re-exports important traits and types. Meant to be glob imported when using Diesel.\n\nquery_builder\u27e846\u27e9\n    Contains traits responsible for the actual construction of SQL statements\n\nquery_dsl\u27e815\u27e9\n    Traits that construct SELECT statements\n\nquery_source\u27e847\u27e9\n    Types related to describing schema, and interactions between tables.\n\nr2d2\u27e848\u27e9`r2d2`\n    Connection pooling via r2d2.\n\nresult\u27e849\u27e9\n    Errors, type aliases, and functions related to working with `Result`.\n\nrow\u27e850\u27e9\n    Contains the `Row` trait\n\nserialize\u27e851\u27e9\n    Types and traits related to serializing values for the database\n\nsql_types\u27e823\u27e9\n    Types which represent a SQL data type.\n\nsqlite\u27e852\u27e9`sqlite`\n    Provides types and functions related to working with SQLite\n\nupsert\u27e853\u27e9\n    Types and functions related to PG\u2019s and Sqlite\u2019s `ON CONFLICT` clause\n## Macros\u00a7\u27e854\u27e9\n\nalias\u27e855\u27e9\n    Declare a new alias for a table\n\nallow_columns_to_appear_in_same_group_by_clause\u27e856\u27e9\n    Allow two or more columns which are otherwise unrelated to be used together in a group by clause.\n\nallow_tables_to_appear_in_same_query\u27e857\u27e9\n    Allow two or more tables which are otherwise unrelated to be used together in a query.\n\ninfix_operator\u27e858\u27e9\n    Useful for libraries adding support for new SQL types. Apps should never need to call this.\n\njoinable\u27e859\u27e9\n    Allow two tables to be referenced in a join query without providing an explicit `ON` clause.\n\nnumeric_expr\u27e860\u27e9\n    Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.\n\noperator_allowed\u27e861\u27e9\n    Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you\u2019d like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.\n\npostfix_operator\u27e862\u27e9\n    Useful for libraries adding support for new SQL types. Apps should never need to call this.\n\nprefix_operator\u27e863\u27e9\n    Useful for libraries adding support for new SQL types. Apps should never need to call this.\n\ntable\u27e89\u27e9\n    Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you will find a unit struct named `table`, and a unit struct with the name of each column.\n## Functions\u00a7\u27e812\u27e9\n\ncopy_from\u27e864\u27e9`postgres_backend` and `postgres`\n    Creates a `COPY FROM` statement\n\ncopy_to\u27e865\u27e9`postgres_backend` and `postgres`\n    Creates a `COPY TO` statement\n\ndebug_query\u27e866\u27e9\n    Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.\n\ndelete\u27e867\u27e9\n    Creates a `DELETE` statement.\n\ninsert_into\u27e868\u27e9\n    Creates an `INSERT` statement for the target table.\n\ninsert_or_ignore_into\u27e869\u27e9\n    Creates an `INSERT [OR] IGNORE` statement.\n\nreplace_into\u27e870\u27e9\n    Creates a `REPLACE` statement.\n\nselect\u27e871\u27e9\n    Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.\n\nsql_query\u27e872\u27e9\n    Construct a full SQL query using raw SQL.\n\nupdate\u27e811\u27e9\n    Creates an `UPDATE` statement.\n## Derive Macros\u00a7\u27e873\u27e9\n\nMultiConnection\u27e874\u27e9\n    This derives implements `diesel::Connection` and related traits for an enum of connections to different databases.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/diesel/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/diesel/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/diesel/latest/src/diesel/lib.rs.html#1-775: Source\n\u27e84\u27e9 https://docs.rs/diesel/latest/diesel/#diesel: \u00a7\n\u27e85\u27e9 https://diesel.rs/guides/getting-started/: getting started guide\n\u27e86\u27e9 https://diesel.rs/guides: many other long form guides\n\u27e87\u27e9 https://docs.rs/diesel/latest/diesel/#where-to-find-things: \u00a7\n\u27e88\u27e9 https://docs.rs/diesel/latest/diesel/#declaring-your-schema: \u00a7\n\u27e89\u27e9 https://docs.rs/diesel/latest/diesel/macro.table.html: macro diesel::table - the `table!` macro\n\u27e810\u27e9 https://docs.rs/diesel/latest/diesel/#getting-started: \u00a7\n\u27e811\u27e9 https://docs.rs/diesel/latest/diesel/fn.update.html: fn diesel::update - `update`\n\u27e812\u27e9 https://docs.rs/diesel/latest/diesel/#functions: here\n\u27e813\u27e9 https://docs.rs/diesel/latest/diesel/prelude/index.html: mod diesel::prelude - `prelude` module\n\u27e814\u27e9 https://docs.rs/diesel/latest/diesel/#constructing-a-query: \u00a7\n\u27e815\u27e9 https://docs.rs/diesel/latest/diesel/query_dsl/index.html: mod diesel::query_dsl - the `query_dsl` module\n\u27e816\u27e9 https://docs.rs/diesel/latest/diesel/expression_methods/index.html: mod diesel::expression_methods - the `expression_methods` module\n\u27e817\u27e9 https://doc.rust-lang.org/stable/std/ops/index.html: `std::ops`\n\u27e818\u27e9 https://docs.rs/diesel/latest/diesel/dsl/index.html: mod diesel::dsl - the `dsl` module\n\u27e819\u27e9 https://docs.rs/diesel/latest/diesel/prelude/macro.define_sql_function.html: macro diesel::prelude::define_sql_function - the `define_sql_function!` macro\n\u27e820\u27e9 https://docs.rs/diesel/latest/diesel/#serializing-and-deserializing: \u00a7\n\u27e821\u27e9 https://docs.rs/diesel/latest/diesel/deserialize/trait.Queryable.html: trait diesel::deserialize::Queryable - `Queryable`\n\u27e822\u27e9 https://docs.rs/diesel/latest/diesel/sql_types/struct.Integer.html: struct diesel::sql_types::Integer - `diesel::sql_types::Integer`\n\u27e823\u27e9 https://docs.rs/diesel/latest/diesel/sql_types/index.html: mod diesel::sql_types - the `sql_types` module\n\u27e824\u27e9 https://docs.rs/diesel/latest/diesel/serialize/trait.ToSql.html: trait diesel::serialize::ToSql - `ToSql`\n\u27e825\u27e9 https://docs.rs/diesel/latest/diesel/deserialize/trait.FromSql.html: trait diesel::deserialize::FromSql - `FromSql`\n\u27e826\u27e9 https://docs.rs/diesel/latest/diesel/#how-to-read-diesels-compile-time-error-messages: \u00a7\n\u27e827\u27e9 https://docs.rs/diesel/latest/diesel/query_dsl/trait.QueryDsl.html#method.left_join: method diesel::query_dsl::QueryDsl::left_join - `left_join`\n\u27e828\u27e9 https://docs.rs/diesel/latest/diesel/expression_methods/trait.NullableExpressionMethods.html#method.nullable: method diesel::expression_methods::NullableExpressionMethods::nullable - `.nullable()`\n\u27e829\u27e9 https://docs.rs/diesel/latest/diesel/#getting-help: \u00a7\n\u27e830\u27e9 https://github.com/diesel-rs/diesel/discussions/categories/q-a: discussion\n\u27e831\u27e9 https://docs.rs/diesel/latest/diesel/#crate-feature-flags: \u00a7\n\u27e832\u27e9 https://docs.rs/diesel/latest/diesel/backend/trait.Backend.html: trait diesel::backend::Backend - `Backend`\n\u27e833\u27e9 https://docs.rs/diesel/latest/diesel/connection/trait.Connection.html: trait diesel::connection::Connection - `Connection`\n\u27e834\u27e9 https://docs.rs/diesel/latest/diesel/#reexports: \u00a7\n\u27e835\u27e9 https://docs.rs/diesel/latest/diesel/#modules: \u00a7\n\u27e836\u27e9 https://docs.rs/diesel/latest/diesel/associations/index.html: mod diesel::associations - associations\n\u27e837\u27e9 https://docs.rs/diesel/latest/diesel/backend/index.html: mod diesel::backend - backend\n\u27e838\u27e9 https://docs.rs/diesel/latest/diesel/connection/index.html: mod diesel::connection - connection\n\u27e839\u27e9 https://docs.rs/diesel/latest/diesel/data_types/index.html: mod diesel::data_types - data_types\n\u27e840\u27e9 https://docs.rs/diesel/latest/diesel/deserialize/index.html: mod diesel::deserialize - deserialize\n\u27e841\u27e9 https://docs.rs/diesel/latest/diesel/expression/index.html: mod diesel::expression - expression\n\u27e842\u27e9 https://docs.rs/diesel/latest/diesel/helper_types/index.html: mod diesel::helper_types - helper_types\n\u27e843\u27e9 https://docs.rs/diesel/latest/diesel/migration/index.html: mod diesel::migration - migration\n\u27e844\u27e9 https://docs.rs/diesel/latest/diesel/mysql/index.html: mod diesel::mysql - mysql\n\u27e845\u27e9 https://docs.rs/diesel/latest/diesel/pg/index.html: mod diesel::pg - pg\n\u27e846\u27e9 https://docs.rs/diesel/latest/diesel/query_builder/index.html: mod diesel::query_builder - query_builder\n\u27e847\u27e9 https://docs.rs/diesel/latest/diesel/query_source/index.html: mod diesel::query_source - query_source\n\u27e848\u27e9 https://docs.rs/diesel/latest/diesel/r2d2/index.html: mod diesel::r2d2 - r2d2\n\u27e849\u27e9 https://docs.rs/diesel/latest/diesel/result/index.html: mod diesel::result - result\n\u27e850\u27e9 https://docs.rs/diesel/latest/diesel/row/index.html: mod diesel::row - row\n\u27e851\u27e9 https://docs.rs/diesel/latest/diesel/serialize/index.html: mod diesel::serialize - serialize\n\u27e852\u27e9 https://docs.rs/diesel/latest/diesel/sqlite/index.html: mod diesel::sqlite - sqlite\n\u27e853\u27e9 https://docs.rs/diesel/latest/diesel/upsert/index.html: mod diesel::upsert - upsert\n\u27e854\u27e9 https://docs.rs/diesel/latest/diesel/#macros: \u00a7\n\u27e855\u27e9 https://docs.rs/diesel/latest/diesel/macro.alias.html: macro diesel::alias - alias\n\u27e856\u27e9 https://docs.rs/diesel/latest/diesel/macro.allow_columns_to_appear_in_same_group_by_clause.html: macro diesel::allow_columns_to_appear_in_same_group_by_clause - allow_columns_to_appear_in_same_group_by_clause\n\u27e857\u27e9 https://docs.rs/diesel/latest/diesel/macro.allow_tables_to_appear_in_same_query.html: macro diesel::allow_tables_to_appear_in_same_query - allow_tables_to_appear_in_same_query\n\u27e858\u27e9 https://docs.rs/diesel/latest/diesel/macro.infix_operator.html: macro diesel::infix_operator - infix_operator\n\u27e859\u27e9 https://docs.rs/diesel/latest/diesel/macro.joinable.html: macro diesel::joinable - joinable\n\u27e860\u27e9 https://docs.rs/diesel/latest/diesel/macro.numeric_expr.html: macro diesel::numeric_expr - numeric_expr\n\u27e861\u27e9 https://docs.rs/diesel/latest/diesel/macro.operator_allowed.html: macro diesel::operator_allowed - operator_allowed\n\u27e862\u27e9 https://docs.rs/diesel/latest/diesel/macro.postfix_operator.html: macro diesel::postfix_operator - postfix_operator\n\u27e863\u27e9 https://docs.rs/diesel/latest/diesel/macro.prefix_operator.html: macro diesel::prefix_operator - prefix_operator\n\u27e864\u27e9 https://docs.rs/diesel/latest/diesel/fn.copy_from.html: fn diesel::copy_from - copy_from\n\u27e865\u27e9 https://docs.rs/diesel/latest/diesel/fn.copy_to.html: fn diesel::copy_to - copy_to\n\u27e866\u27e9 https://docs.rs/diesel/latest/diesel/fn.debug_query.html: fn diesel::debug_query - debug_query\n\u27e867\u27e9 https://docs.rs/diesel/latest/diesel/fn.delete.html: fn diesel::delete - delete\n\u27e868\u27e9 https://docs.rs/diesel/latest/diesel/fn.insert_into.html: fn diesel::insert_into - insert_into\n\u27e869\u27e9 https://docs.rs/diesel/latest/diesel/fn.insert_or_ignore_into.html: fn diesel::insert_or_ignore_into - insert_or_ignore_into\n\u27e870\u27e9 https://docs.rs/diesel/latest/diesel/fn.replace_into.html: fn diesel::replace_into - replace_into\n\u27e871\u27e9 https://docs.rs/diesel/latest/diesel/fn.select.html: fn diesel::select - select\n\u27e872\u27e9 https://docs.rs/diesel/latest/diesel/fn.sql_query.html: fn diesel::sql_query - sql_query\n\u27e873\u27e9 https://docs.rs/diesel/latest/diesel/#derives: \u00a7\n\u27e874\u27e9 https://docs.rs/diesel/latest/diesel/derive.MultiConnection.html: derive diesel::MultiConnection - MultiConnection\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `diesel` crate is a powerful ORM and query builder for Rust, designed to streamline database interactions by reducing boilerplate and ensuring compile-time query validation. It supports PostgreSQL, MySQL, and SQLite backends, with features like schema declaration via macros, a rich DSL for constructing queries, and seamless serialization/deserialization between SQL and Rust types. Additionally, it offers advanced features like connection pooling, custom SQL functions, and support for popular libraries like `serde_json`, `chrono`, and `uuid`.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Schema Declaration  \n\u2705 Factual: Diesel requires you to declare your database schema using the `table!` macro to enable compile-time query validation.  \n\u274c Counterfactual: Diesel automatically infers your database schema at runtime, eliminating the need for manual schema declaration.\n\n---\n\n### Pair 2: Backend Support  \n\u2705 Factual: Diesel supports multiple database backends, including PostgreSQL, SQLite, and MySQL, through feature flags like `postgres`, `sqlite`, and `mysql`.  \n\u274c Counterfactual: Diesel only supports PostgreSQL and does not provide any functionality for SQLite or MySQL.\n\n---\n\n### Pair 3: Error Messages  \n\u2705 Factual: Diesel generates detailed compile-time error messages that help identify mismatches between query results and model structures, such as field order or type mismatches.  \n\u274c Counterfactual: Diesel runtime errors are minimal and do not provide detailed information about mismatches between query results and model structures.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}