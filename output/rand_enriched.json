{
    "name": "rand",
    "version": "0.9.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/rand/latest/rand/all.html \"show sidebar\")\n# Crate randCopy item path\n[Settings](https://docs.rs/rand/latest/settings.html)\n[Help](https://docs.rs/rand/latest/help.html)\nSummary[Source](https://docs.rs/rand/latest/src/rand/lib.rs.html#10-332)\nExpand description\nUtilities for random number generation\nRand provides utilities to generate random numbers, to convert them to useful types and distributions, and some randomness-related algorithms.\n## [\u00a7](https://docs.rs/rand/latest/rand/#quick-start)Quick Start\n```\n// The prelude import enables methods we use below, specifically\n// Rng::random, Rng::sample, SliceRandom::shuffle and IndexedRandom::choose.\nuse rand::prelude::*;\n// Get an RNG:\nlet mut rng = rand::rng();\n// Try printing a random unicode code point (probably a bad idea)!\nprintln!(\"char: '{}'\", rng.random::<char>());\n// Try printing a random alphanumeric value instead!\nprintln!(\"alpha: '{}'\", rng.sample(rand::distr::Alphanumeric) as char);\n// Generate and shuffle a sequence:\nlet mut nums: Vec<i32> = (1..100).collect();\nnums.shuffle(&mut rng);\n// And take a random pick (yes, we didn't need to shuffle first!):\nlet _ = nums.choose(&mut rng);\n```\n\n## [\u00a7](https://docs.rs/rand/latest/rand/#the-book)The Book\nFor the user guide and further documentation, please read [The Rust Rand Book](https://rust-random.github.io/book).\n## Re-exports[\u00a7](https://docs.rs/rand/latest/rand/#reexports)\n\n`pub use rand_core[](https://docs.rs/rand_core/0.9.3/x86_64-unknown-linux-gnu/rand_core/index.html \"mod rand_core\");`\n\n## Modules[\u00a7](https://docs.rs/rand/latest/rand/#modules)\n\n[distr](https://docs.rs/rand/latest/rand/distr/index.html \"mod rand::distr\")\n    Generating random samples from probability distributions\n\n[prelude](https://docs.rs/rand/latest/rand/prelude/index.html \"mod rand::prelude\")\n    Convenience re-export of common members\n\n[rngs](https://docs.rs/rand/latest/rand/rngs/index.html \"mod rand::rngs\")\n    Random number generators and adapters\n\n[seq](https://docs.rs/rand/latest/rand/seq/index.html \"mod rand::seq\")\n    Sequence-related functionality\n## Traits[\u00a7](https://docs.rs/rand/latest/rand/#traits)\n\n[CryptoRng](https://docs.rs/rand/latest/rand/trait.CryptoRng.html \"trait rand::CryptoRng\")\n    A marker trait over [`RngCore`](https://docs.rs/rand/latest/rand/trait.RngCore.html \"trait rand::RngCore\") for securely unpredictable RNGs\n\n[Fill](https://docs.rs/rand/latest/rand/trait.Fill.html \"trait rand::Fill\")\n    Types which may be filled with random data\n\n[Rng](https://docs.rs/rand/latest/rand/trait.Rng.html \"trait rand::Rng\")\n    User-level interface for RNGs\n\n[RngCore](https://docs.rs/rand/latest/rand/trait.RngCore.html \"trait rand::RngCore\")\n    Implementation-level interface for RNGs\n\n[SeedableRng](https://docs.rs/rand/latest/rand/trait.SeedableRng.html \"trait rand::SeedableRng\")\n    A random number generator that can be explicitly seeded.\n\n[TryCryptoRng](https://docs.rs/rand/latest/rand/trait.TryCryptoRng.html \"trait rand::TryCryptoRng\")\n    A marker trait over [`TryRngCore`](https://docs.rs/rand/latest/rand/trait.TryRngCore.html \"trait rand::TryRngCore\") for securely unpredictable RNGs\n\n[TryRngCore](https://docs.rs/rand/latest/rand/trait.TryRngCore.html \"trait rand::TryRngCore\")\n    A potentially fallible variant of [`RngCore`](https://docs.rs/rand/latest/rand/trait.RngCore.html \"trait rand::RngCore\")\n## Functions[\u00a7](https://docs.rs/rand/latest/rand/#functions)\n\n[fill](https://docs.rs/rand/latest/rand/fn.fill.html \"fn rand::fill\")`thread_rng`\n    Fill any type implementing [`Fill`](https://docs.rs/rand/latest/rand/trait.Fill.html \"trait rand::Fill\") with random data\n\n[random](https://docs.rs/rand/latest/rand/fn.random.html \"fn rand::random\")`thread_rng`\n    Generate a random value using the thread-local random number generator.\n\n[random_bool](https://docs.rs/rand/latest/rand/fn.random_bool.html \"fn rand::random_bool\")`thread_rng`\n    Return a bool with a probability `p` of being true.\n\n[random_iter](https://docs.rs/rand/latest/rand/fn.random_iter.html \"fn rand::random_iter\")`thread_rng`\n    Return an iterator over [`random()`](https://docs.rs/rand/latest/rand/fn.random.html \"fn rand::random\") variates\n\n[random_range](https://docs.rs/rand/latest/rand/fn.random_range.html \"fn rand::random_range\")`thread_rng`\n    Generate a random value in the given range using the thread-local random number generator.\n\n[random_ratio](https://docs.rs/rand/latest/rand/fn.random_ratio.html \"fn rand::random_ratio\")`thread_rng`\n    Return a bool with a probability of `numerator/denominator` of being true.\n\n[rng](https://docs.rs/rand/latest/rand/fn.rng.html \"fn rand::rng\")`thread_rng`\n    Access a fast, pre-initialized generator\n\n[thread_rng](https://docs.rs/rand/latest/rand/fn.thread_rng.html \"fn rand::thread_rng\")Deprecated`thread_rng`\n    Access the thread-local generator\n",
        "markdown_with_citations": "[](https://docs.rs/rand/latest/rand/all.html \"show sidebar\")\n# Crate randCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nUtilities for random number generation\nRand provides utilities to generate random numbers, to convert them to useful types and distributions, and some randomness-related algorithms.\n## \u00a7\u27e84\u27e9Quick Start\n```\n// The prelude import enables methods we use below, specifically\n// Rng::random, Rng::sample, SliceRandom::shuffle and IndexedRandom::choose.\nuse rand::prelude::*;\n// Get an RNG:\nlet mut rng = rand::rng();\n// Try printing a random unicode code point (probably a bad idea)!\nprintln!(\"char: '{}'\", rng.random::<char>());\n// Try printing a random alphanumeric value instead!\nprintln!(\"alpha: '{}'\", rng.sample(rand::distr::Alphanumeric) as char);\n// Generate and shuffle a sequence:\nlet mut nums: Vec<i32> = (1..100).collect();\nnums.shuffle(&mut rng);\n// And take a random pick (yes, we didn't need to shuffle first!):\nlet _ = nums.choose(&mut rng);\n```\n\n## \u00a7\u27e85\u27e9The Book\nFor the user guide and further documentation, please read The Rust Rand Book\u27e86\u27e9.\n## Re-exports\u00a7\u27e87\u27e9\n\n`pub use rand_core[](https://docs.rs/rand_core/0.9.3/x86_64-unknown-linux-gnu/rand_core/index.html \"mod rand_core\");`\n\n## Modules\u00a7\u27e88\u27e9\n\ndistr\u27e89\u27e9\n    Generating random samples from probability distributions\n\nprelude\u27e810\u27e9\n    Convenience re-export of common members\n\nrngs\u27e811\u27e9\n    Random number generators and adapters\n\nseq\u27e812\u27e9\n    Sequence-related functionality\n## Traits\u00a7\u27e813\u27e9\n\nCryptoRng\u27e814\u27e9\n    A marker trait over `RngCore`\u27e815\u27e9 for securely unpredictable RNGs\n\nFill\u27e816\u27e9\n    Types which may be filled with random data\n\nRng\u27e817\u27e9\n    User-level interface for RNGs\n\nRngCore\u27e815\u27e9\n    Implementation-level interface for RNGs\n\nSeedableRng\u27e818\u27e9\n    A random number generator that can be explicitly seeded.\n\nTryCryptoRng\u27e819\u27e9\n    A marker trait over `TryRngCore`\u27e820\u27e9 for securely unpredictable RNGs\n\nTryRngCore\u27e820\u27e9\n    A potentially fallible variant of `RngCore`\u27e815\u27e9\n## Functions\u00a7\u27e821\u27e9\n\nfill\u27e822\u27e9`thread_rng`\n    Fill any type implementing `Fill`\u27e816\u27e9 with random data\n\nrandom\u27e823\u27e9`thread_rng`\n    Generate a random value using the thread-local random number generator.\n\nrandom_bool\u27e824\u27e9`thread_rng`\n    Return a bool with a probability `p` of being true.\n\nrandom_iter\u27e825\u27e9`thread_rng`\n    Return an iterator over `random()`\u27e823\u27e9 variates\n\nrandom_range\u27e826\u27e9`thread_rng`\n    Generate a random value in the given range using the thread-local random number generator.\n\nrandom_ratio\u27e827\u27e9`thread_rng`\n    Return a bool with a probability of `numerator/denominator` of being true.\n\nrng\u27e828\u27e9`thread_rng`\n    Access a fast, pre-initialized generator\n\nthread_rng\u27e829\u27e9Deprecated`thread_rng`\n    Access the thread-local generator\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rand/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rand/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rand/latest/src/rand/lib.rs.html#10-332: Source\n\u27e84\u27e9 https://docs.rs/rand/latest/rand/#quick-start: \u00a7\n\u27e85\u27e9 https://docs.rs/rand/latest/rand/#the-book: \u00a7\n\u27e86\u27e9 https://rust-random.github.io/book: The Rust Rand Book\n\u27e87\u27e9 https://docs.rs/rand/latest/rand/#reexports: \u00a7\n\u27e88\u27e9 https://docs.rs/rand/latest/rand/#modules: \u00a7\n\u27e89\u27e9 https://docs.rs/rand/latest/rand/distr/index.html: mod rand::distr - distr\n\u27e810\u27e9 https://docs.rs/rand/latest/rand/prelude/index.html: mod rand::prelude - prelude\n\u27e811\u27e9 https://docs.rs/rand/latest/rand/rngs/index.html: mod rand::rngs - rngs\n\u27e812\u27e9 https://docs.rs/rand/latest/rand/seq/index.html: mod rand::seq - seq\n\u27e813\u27e9 https://docs.rs/rand/latest/rand/#traits: \u00a7\n\u27e814\u27e9 https://docs.rs/rand/latest/rand/trait.CryptoRng.html: trait rand::CryptoRng - CryptoRng\n\u27e815\u27e9 https://docs.rs/rand/latest/rand/trait.RngCore.html: trait rand::RngCore - `RngCore`\n\u27e816\u27e9 https://docs.rs/rand/latest/rand/trait.Fill.html: trait rand::Fill - Fill\n\u27e817\u27e9 https://docs.rs/rand/latest/rand/trait.Rng.html: trait rand::Rng - Rng\n\u27e818\u27e9 https://docs.rs/rand/latest/rand/trait.SeedableRng.html: trait rand::SeedableRng - SeedableRng\n\u27e819\u27e9 https://docs.rs/rand/latest/rand/trait.TryCryptoRng.html: trait rand::TryCryptoRng - TryCryptoRng\n\u27e820\u27e9 https://docs.rs/rand/latest/rand/trait.TryRngCore.html: trait rand::TryRngCore - `TryRngCore`\n\u27e821\u27e9 https://docs.rs/rand/latest/rand/#functions: \u00a7\n\u27e822\u27e9 https://docs.rs/rand/latest/rand/fn.fill.html: fn rand::fill - fill\n\u27e823\u27e9 https://docs.rs/rand/latest/rand/fn.random.html: fn rand::random - random\n\u27e824\u27e9 https://docs.rs/rand/latest/rand/fn.random_bool.html: fn rand::random_bool - random_bool\n\u27e825\u27e9 https://docs.rs/rand/latest/rand/fn.random_iter.html: fn rand::random_iter - random_iter\n\u27e826\u27e9 https://docs.rs/rand/latest/rand/fn.random_range.html: fn rand::random_range - random_range\n\u27e827\u27e9 https://docs.rs/rand/latest/rand/fn.random_ratio.html: fn rand::random_ratio - random_ratio\n\u27e828\u27e9 https://docs.rs/rand/latest/rand/fn.rng.html: fn rand::rng - rng\n\u27e829\u27e9 https://docs.rs/rand/latest/rand/fn.thread_rng.html: fn rand::thread_rng - thread_rng\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `rand` crate provides utilities for random number generation, including methods to generate random values, sample from distributions, shuffle sequences, and choose random elements. It supports various RNGs, including cryptographically secure ones, and offers traits like `Rng`, `SeedableRng`, and `Fill` for flexibility. Key modules include `distr` for probability distributions, `seq` for sequence manipulation, and `rngs` for RNG implementations.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 0.0,
    "factual_counterfactual": "### Pair 1: Random Number Generation\n\u2705 **Factual:** The `rand` crate provides the `random()` function, which generates a random value using the thread-local random number generator.  \n\u274c **Counterfactual:** The `rand` crate requires explicitly creating and seeding a random number generator before using the `random()` function.\n\n---\n\n### Pair 2: Probability Distributions\n\u2705 **Factual:** The `rand::distr` module allows generating random samples from various probability distributions, such as `Normal` and `Uniform`.  \n\u274c **Counterfactual:** The `rand` crate only supports uniform distribution and does not provide functionality for other probability distributions.\n\n---\n\n### Pair 3: Shuffling and Selection\n\u2705 **Factual:** The `SliceRandom` trait in the `rand::seq` module enables shuffling slices and selecting random elements from them using methods like `shuffle` and `choose`.  \n\u274c **Counterfactual:** The `rand` crate does not support shuffling or random selection of elements from slices.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}