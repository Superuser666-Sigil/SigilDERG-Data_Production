{
    "name": "http-body",
    "version": "1.0.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/http-body/latest/http_body/all.html \"show sidebar\")\n# Crate http_bodyCopy item path\n[Settings](https://docs.rs/http-body/latest/settings.html)\n[Help](https://docs.rs/http-body/latest/help.html)\nSummary[Source](https://docs.rs/http-body/latest/src/http_body/lib.rs.html#1-213)\nExpand description\nAsynchronous HTTP request or response body.\nSee [`Body`](https://docs.rs/http-body/latest/http_body/trait.Body.html) for more details.\n## Structs[\u00a7](https://docs.rs/http-body/latest/http_body/#structs)\n\n[Frame](https://docs.rs/http-body/latest/http_body/struct.Frame.html \"struct http_body::Frame\")\n    A frame of any kind related to an HTTP stream (body).\n\n[SizeHint](https://docs.rs/http-body/latest/http_body/struct.SizeHint.html \"struct http_body::SizeHint\")\n    A `Body` size hint\n## Traits[\u00a7](https://docs.rs/http-body/latest/http_body/#traits)\n\n[Body](https://docs.rs/http-body/latest/http_body/trait.Body.html \"trait http_body::Body\")\n    Trait representing a streaming body of a Request or Response.\n",
        "markdown_with_citations": "[](https://docs.rs/http-body/latest/http_body/all.html \"show sidebar\")\n# Crate http_bodyCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAsynchronous HTTP request or response body.\nSee `Body`\u27e84\u27e9 for more details.\n## Structs\u00a7\u27e85\u27e9\n\nFrame\u27e86\u27e9\n    A frame of any kind related to an HTTP stream (body).\n\nSizeHint\u27e87\u27e9\n    A `Body` size hint\n## Traits\u00a7\u27e88\u27e9\n\nBody\u27e84\u27e9\n    Trait representing a streaming body of a Request or Response.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/http-body/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/http-body/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/http-body/latest/src/http_body/lib.rs.html#1-213: Source\n\u27e84\u27e9 https://docs.rs/http-body/latest/http_body/trait.Body.html: `Body`\n\u27e85\u27e9 https://docs.rs/http-body/latest/http_body/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/http-body/latest/http_body/struct.Frame.html: struct http_body::Frame - Frame\n\u27e87\u27e9 https://docs.rs/http-body/latest/http_body/struct.SizeHint.html: struct http_body::SizeHint - SizeHint\n\u27e88\u27e9 https://docs.rs/http-body/latest/http_body/#traits: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `http-body` crate provides abstractions for handling asynchronous HTTP request and response bodies in Rust. Its key features include the `Body` trait for representing streaming HTTP bodies, the `Frame` struct for encapsulating individual frames in an HTTP stream, and the `SizeHint` struct for estimating body sizes. It is designed for flexibility and integration with asynchronous workflows.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 5.0,
    "factual_counterfactual": "### Pair 1: Streaming Body Trait\n\u2705 **Factual:** The `http-body` crate provides the `Body` trait, which represents a streaming body for HTTP requests or responses, allowing asynchronous handling of large payloads.  \n\u274c **Counterfactual:** The `http-body` crate provides a synchronous `Body` trait designed for blocking operations, making it unsuitable for asynchronous workflows.  \n\n---\n\n### Pair 2: Size Hint Utility\n\u2705 **Factual:** The `SizeHint` struct in the `http-body` crate offers a way to provide an estimate of the size of an HTTP body, which can help optimize resource allocation during streaming.  \n\u274c **Counterfactual:** The `SizeHint` struct in the `http-body` crate enforces an exact size requirement for HTTP bodies, rejecting any body that doesn't match the specified size.  \n\n---\n\n### Pair 3: Frame Struct Purpose\n\u2705 **Factual:** The `Frame` struct in the `http-body` crate encapsulates individual frames of data in an HTTP body stream, supporting chunked and progressive data transfer.  \n\u274c **Counterfactual:** The `Frame` struct in the `http-body` crate is used to represent the headers of an HTTP request or response, rather than the body data itself.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}