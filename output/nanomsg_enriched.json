{
    "name": "nanomsg",
    "version": "0.7.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/nanomsg/latest/nanomsg/all.html \"show sidebar\")\n# Crate nanomsgCopy item path\n[Settings](https://docs.rs/nanomsg/latest/settings.html)\n[Help](https://docs.rs/nanomsg/latest/help.html)\nSummary[Source](https://docs.rs/nanomsg/latest/src/nanomsg/lib.rs.html#1-2090)\n## Re-exports[\u00a7](https://docs.rs/nanomsg/latest/nanomsg/#reexports)\n\n`pub use result::Result[](https://docs.rs/nanomsg/latest/nanomsg/result/type.Result.html \"type nanomsg::result::Result\");`\n\n\n`pub use result::Error[](https://docs.rs/nanomsg/latest/nanomsg/result/enum.Error.html \"enum nanomsg::result::Error\");`\n\n\n`pub use endpoint::Endpoint[](https://docs.rs/nanomsg/latest/nanomsg/endpoint/struct.Endpoint.html \"struct nanomsg::endpoint::Endpoint\");`\n\n## Modules[\u00a7](https://docs.rs/nanomsg/latest/nanomsg/#modules)\n\n[endpoint](https://docs.rs/nanomsg/latest/nanomsg/endpoint/index.html \"mod nanomsg::endpoint\")\n\n\n[result](https://docs.rs/nanomsg/latest/nanomsg/result/index.html \"mod nanomsg::result\")\n\n## Structs[\u00a7](https://docs.rs/nanomsg/latest/nanomsg/#structs)\n\n[PollFd](https://docs.rs/nanomsg/latest/nanomsg/struct.PollFd.html \"struct nanomsg::PollFd\")\n    A request for polling a socket and the poll result. To create the request, see `Socket::new_pollfd`. To get the result, see `PollFd::can_read` and `PollFd::can_write`.\n\n[PollRequest](https://docs.rs/nanomsg/latest/nanomsg/struct.PollRequest.html \"struct nanomsg::PollRequest\")\n    A request for polling a set of sockets and the poll results. To create the request, see `PollRequest::new`.\n\n[Socket](https://docs.rs/nanomsg/latest/nanomsg/struct.Socket.html \"struct nanomsg::Socket\")\n    A type-safe socket wrapper around nanomsg\u2019s own socket implementation. This provides a safe interface for dealing with initializing the sockets, sending and receiving messages.\n## Enums[\u00a7](https://docs.rs/nanomsg/latest/nanomsg/#enums)\n\n[PollInOut](https://docs.rs/nanomsg/latest/nanomsg/enum.PollInOut.html \"enum nanomsg::PollInOut\")\n\n\n[Protocol](https://docs.rs/nanomsg/latest/nanomsg/enum.Protocol.html \"enum nanomsg::Protocol\")\n    Type-safe protocols that Nanomsg uses. Each socket is bound to a single protocol that has specific behaviour (such as only being able to receive messages and not send them).\n\n[Transport](https://docs.rs/nanomsg/latest/nanomsg/enum.Transport.html \"enum nanomsg::Transport\")\n\n",
        "markdown_with_citations": "[](https://docs.rs/nanomsg/latest/nanomsg/all.html \"show sidebar\")\n# Crate nanomsgCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\n## Re-exports\u00a7\u27e84\u27e9\n\n`pub use result::Result[](https://docs.rs/nanomsg/latest/nanomsg/result/type.Result.html \"type nanomsg::result::Result\");`\n\n\n`pub use result::Error[](https://docs.rs/nanomsg/latest/nanomsg/result/enum.Error.html \"enum nanomsg::result::Error\");`\n\n\n`pub use endpoint::Endpoint[](https://docs.rs/nanomsg/latest/nanomsg/endpoint/struct.Endpoint.html \"struct nanomsg::endpoint::Endpoint\");`\n\n## Modules\u00a7\u27e85\u27e9\n\nendpoint\u27e86\u27e9\n\n\nresult\u27e87\u27e9\n\n## Structs\u00a7\u27e88\u27e9\n\nPollFd\u27e89\u27e9\n    A request for polling a socket and the poll result. To create the request, see `Socket::new_pollfd`. To get the result, see `PollFd::can_read` and `PollFd::can_write`.\n\nPollRequest\u27e810\u27e9\n    A request for polling a set of sockets and the poll results. To create the request, see `PollRequest::new`.\n\nSocket\u27e811\u27e9\n    A type-safe socket wrapper around nanomsg\u2019s own socket implementation. This provides a safe interface for dealing with initializing the sockets, sending and receiving messages.\n## Enums\u00a7\u27e812\u27e9\n\nPollInOut\u27e813\u27e9\n\n\nProtocol\u27e814\u27e9\n    Type-safe protocols that Nanomsg uses. Each socket is bound to a single protocol that has specific behaviour (such as only being able to receive messages and not send them).\n\nTransport\u27e815\u27e9\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/nanomsg/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/nanomsg/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/nanomsg/latest/src/nanomsg/lib.rs.html#1-2090: Source\n\u27e84\u27e9 https://docs.rs/nanomsg/latest/nanomsg/#reexports: \u00a7\n\u27e85\u27e9 https://docs.rs/nanomsg/latest/nanomsg/#modules: \u00a7\n\u27e86\u27e9 https://docs.rs/nanomsg/latest/nanomsg/endpoint/index.html: mod nanomsg::endpoint - endpoint\n\u27e87\u27e9 https://docs.rs/nanomsg/latest/nanomsg/result/index.html: mod nanomsg::result - result\n\u27e88\u27e9 https://docs.rs/nanomsg/latest/nanomsg/#structs: \u00a7\n\u27e89\u27e9 https://docs.rs/nanomsg/latest/nanomsg/struct.PollFd.html: struct nanomsg::PollFd - PollFd\n\u27e810\u27e9 https://docs.rs/nanomsg/latest/nanomsg/struct.PollRequest.html: struct nanomsg::PollRequest - PollRequest\n\u27e811\u27e9 https://docs.rs/nanomsg/latest/nanomsg/struct.Socket.html: struct nanomsg::Socket - Socket\n\u27e812\u27e9 https://docs.rs/nanomsg/latest/nanomsg/#enums: \u00a7\n\u27e813\u27e9 https://docs.rs/nanomsg/latest/nanomsg/enum.PollInOut.html: enum nanomsg::PollInOut - PollInOut\n\u27e814\u27e9 https://docs.rs/nanomsg/latest/nanomsg/enum.Protocol.html: enum nanomsg::Protocol - Protocol\n\u27e815\u27e9 https://docs.rs/nanomsg/latest/nanomsg/enum.Transport.html: enum nanomsg::Transport - Transport\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `nanomsg` crate provides a type-safe Rust wrapper for the nanomsg library, enabling scalable and high-performance messaging with various socket protocols. Key features include support for polling sockets (`PollFd`, `PollRequest`), type-safe protocols (`Protocol`), and transport mechanisms (`Transport`). It offers a safe interface for socket initialization, message sending, and receiving.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 3.0,
    "factual_counterfactual": "### Pair 1: Socket Implementation  \n\u2705 Factual: The `Socket` struct in the `nanomsg` crate provides a type-safe wrapper around nanomsg's socket implementation, enabling safe initialization, message sending, and message receiving.  \n\u274c Counterfactual: The `Socket` struct in the `nanomsg` crate directly exposes nanomsg's raw socket API without any type safety, requiring manual management of socket states.  \n\n---\n\n### Pair 2: Polling Mechanism  \n\u2705 Factual: The `PollFd` struct allows users to create polling requests for sockets and check whether they are ready for reading or writing using methods like `PollFd::can_read` and `PollFd::can_write`.  \n\u274c Counterfactual: The `PollFd` struct is used to manage socket connections directly, rather than for polling readiness states.  \n\n---\n\n### Pair 3: Protocol Support  \n\u2705 Factual: The `Protocol` enum in the `nanomsg` crate provides type-safe representations of nanomsg protocols, ensuring that each socket is bound to a single protocol with specific behavior, such as message sending or receiving.  \n\u274c Counterfactual: The `Protocol` enum allows sockets to dynamically switch between multiple protocols during runtime, enabling flexible protocol management.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}