{
    "name": "fastrand",
    "version": "2.3.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/fastrand/latest/fastrand/all.html \"show sidebar\")\n# Crate fastrandCopy item path\n[Settings](https://docs.rs/fastrand/latest/settings.html)\n[Help](https://docs.rs/fastrand/latest/help.html)\nSummary[Source](https://docs.rs/fastrand/latest/src/fastrand/lib.rs.html#1-689)\nExpand description\nA simple and fast random number generator.\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast generator but **not** cryptographically secure.\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#examples)Examples\nFlip a coin:\n```\nif fastrand::bool() {\n  println!(\"heads\");\n} else {\n  println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n```\nfastrand::choose_multiple([1, 4, 5], 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\nShuffle an array:\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\") or [`String`]:\n```\nuse std::iter::repeat_with;\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\") instance instead of using the thread-local generator:\n```\nuse std::iter::repeat_with;\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms, consider using the [`fastrand-contrib`](https://crates.io/crates/fastrand-contrib) crate alongside this one.\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#features)Features\n  * `std` (enabled by default): Enables the `std` library. This is required for the global generator and global entropy. Without this feature, [`Rng`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\") can only be instantiated using the [`with_seed`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html#method.with_seed \"associated function fastrand::Rng::with_seed\") method.\n  * `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the [WebAssembly Notes](https://docs.rs/fastrand/latest/fastrand/#webassembly-notes) section for more information.\n\n\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#webassembly-notes)WebAssembly Notes\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG. By default, `std` targets will use entropy sources in the standard library to seed the global RNG. However, these sources are not available by default on WASM targets outside of WASI.\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript environment. At this point, the [`getrandom`](https://crates.io/crates/getrandom) crate will be used in order to access the available entropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will use a predefined seed.\n## Structs[\u00a7](https://docs.rs/fastrand/latest/fastrand/#structs)\n\n[Rng](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\")\n    A random number generator.\n## Functions[\u00a7](https://docs.rs/fastrand/latest/fastrand/#functions)\n\n[alphabetic](https://docs.rs/fastrand/latest/fastrand/fn.alphabetic.html \"fn fastrand::alphabetic\")`std`\n    Generates a random `char` in ranges a-z and A-Z.\n\n[alphanumeric](https://docs.rs/fastrand/latest/fastrand/fn.alphanumeric.html \"fn fastrand::alphanumeric\")`std`\n    Generates a random `char` in ranges a-z, A-Z and 0-9.\n\n[bool](https://docs.rs/fastrand/latest/fastrand/fn.bool.html \"fn fastrand::bool\")`std`\n    Generates a random `bool`.\n\n[char](https://docs.rs/fastrand/latest/fastrand/fn.char.html \"fn fastrand::char\")`std`\n    Generates a random `char` in the given range.\n\n[choice](https://docs.rs/fastrand/latest/fastrand/fn.choice.html \"fn fastrand::choice\")`std`\n    Choose an item from an iterator at random.\n\n[choose_multiple](https://docs.rs/fastrand/latest/fastrand/fn.choose_multiple.html \"fn fastrand::choose_multiple\")`std`\n    Collects `amount` values at random from the iterable into a vector.\n\n[digit](https://docs.rs/fastrand/latest/fastrand/fn.digit.html \"fn fastrand::digit\")`std`\n    Generates a random digit in the given `base`.\n\n[f32](https://docs.rs/fastrand/latest/fastrand/fn.f32.html \"fn fastrand::f32\")`std`\n    Generates a random `f32` in range `0..1`.\n\n[f64](https://docs.rs/fastrand/latest/fastrand/fn.f64.html \"fn fastrand::f64\")`std`\n    Generates a random `f64` in range `0..1`.\n\n[fill](https://docs.rs/fastrand/latest/fastrand/fn.fill.html \"fn fastrand::fill\")`std`\n    Fill a byte slice with random data.\n\n[get_seed](https://docs.rs/fastrand/latest/fastrand/fn.get_seed.html \"fn fastrand::get_seed\")`std`\n    Gives back **current** seed that is being held by the thread-local generator.\n\n[i8](https://docs.rs/fastrand/latest/fastrand/fn.i8.html \"fn fastrand::i8\")`std`\n    Generates a random `i8` in the given range.\n\n[i16](https://docs.rs/fastrand/latest/fastrand/fn.i16.html \"fn fastrand::i16\")`std`\n    Generates a random `i16` in the given range.\n\n[i32](https://docs.rs/fastrand/latest/fastrand/fn.i32.html \"fn fastrand::i32\")`std`\n    Generates a random `i32` in the given range.\n\n[i64](https://docs.rs/fastrand/latest/fastrand/fn.i64.html \"fn fastrand::i64\")`std`\n    Generates a random `i64` in the given range.\n\n[i128](https://docs.rs/fastrand/latest/fastrand/fn.i128.html \"fn fastrand::i128\")`std`\n    Generates a random `i128` in the given range.\n\n[isize](https://docs.rs/fastrand/latest/fastrand/fn.isize.html \"fn fastrand::isize\")`std`\n    Generates a random `isize` in the given range.\n\n[lowercase](https://docs.rs/fastrand/latest/fastrand/fn.lowercase.html \"fn fastrand::lowercase\")`std`\n    Generates a random `char` in range a-z.\n\n[seed](https://docs.rs/fastrand/latest/fastrand/fn.seed.html \"fn fastrand::seed\")`std`\n    Initializes the thread-local generator with the given seed.\n\n[shuffle](https://docs.rs/fastrand/latest/fastrand/fn.shuffle.html \"fn fastrand::shuffle\")`std`\n    Shuffles a slice randomly.\n\n[u8](https://docs.rs/fastrand/latest/fastrand/fn.u8.html \"fn fastrand::u8\")`std`\n    Generates a random `u8` in the given range.\n\n[u16](https://docs.rs/fastrand/latest/fastrand/fn.u16.html \"fn fastrand::u16\")`std`\n    Generates a random `u16` in the given range.\n\n[u32](https://docs.rs/fastrand/latest/fastrand/fn.u32.html \"fn fastrand::u32\")`std`\n    Generates a random `u32` in the given range.\n\n[u64](https://docs.rs/fastrand/latest/fastrand/fn.u64.html \"fn fastrand::u64\")`std`\n    Generates a random `u64` in the given range.\n\n[u128](https://docs.rs/fastrand/latest/fastrand/fn.u128.html \"fn fastrand::u128\")`std`\n    Generates a random `u128` in the given range.\n\n[uppercase](https://docs.rs/fastrand/latest/fastrand/fn.uppercase.html \"fn fastrand::uppercase\")`std`\n    Generates a random `char` in range A-Z.\n\n[usize](https://docs.rs/fastrand/latest/fastrand/fn.usize.html \"fn fastrand::usize\")`std`\n    Generates a random `usize` in the given range.\n",
        "markdown_with_citations": "[](https://docs.rs/fastrand/latest/fastrand/all.html \"show sidebar\")\n# Crate fastrandCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA simple and fast random number generator.\nThe implementation uses Wyrand\u27e84\u27e9, a simple and fast generator but **not** cryptographically secure.\n## \u00a7\u27e85\u27e9Examples\nFlip a coin:\n```\nif fastrand::bool() {\n  println!(\"heads\");\n} else {\n  println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n```\nfastrand::choose_multiple([1, 4, 5], 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\nShuffle an array:\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random `Vec`\u27e86\u27e9 or [`String`]:\n```\nuse std::iter::repeat_with;\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new `Rng`\u27e87\u27e9 instance instead of using the thread-local generator:\n```\nuse std::iter::repeat_with;\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms, consider using the `fastrand-contrib`\u27e88\u27e9 crate alongside this one.\n## \u00a7\u27e89\u27e9Features\n  * `std` (enabled by default): Enables the `std` library. This is required for the global generator and global entropy. Without this feature, `Rng`\u27e87\u27e9 can only be instantiated using the `with_seed`\u27e810\u27e9 method.\n  * `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the WebAssembly Notes\u27e811\u27e9 section for more information.\n\n\n## \u00a7\u27e811\u27e9WebAssembly Notes\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG. By default, `std` targets will use entropy sources in the standard library to seed the global RNG. However, these sources are not available by default on WASM targets outside of WASI.\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript environment. At this point, the `getrandom`\u27e812\u27e9 crate will be used in order to access the available entropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will use a predefined seed.\n## Structs\u00a7\u27e813\u27e9\n\nRng\u27e87\u27e9\n    A random number generator.\n## Functions\u00a7\u27e814\u27e9\n\nalphabetic\u27e815\u27e9`std`\n    Generates a random `char` in ranges a-z and A-Z.\n\nalphanumeric\u27e816\u27e9`std`\n    Generates a random `char` in ranges a-z, A-Z and 0-9.\n\nbool\u27e817\u27e9`std`\n    Generates a random `bool`.\n\nchar\u27e818\u27e9`std`\n    Generates a random `char` in the given range.\n\nchoice\u27e819\u27e9`std`\n    Choose an item from an iterator at random.\n\nchoose_multiple\u27e820\u27e9`std`\n    Collects `amount` values at random from the iterable into a vector.\n\ndigit\u27e821\u27e9`std`\n    Generates a random digit in the given `base`.\n\nf32\u27e822\u27e9`std`\n    Generates a random `f32` in range `0..1`.\n\nf64\u27e823\u27e9`std`\n    Generates a random `f64` in range `0..1`.\n\nfill\u27e824\u27e9`std`\n    Fill a byte slice with random data.\n\nget_seed\u27e825\u27e9`std`\n    Gives back **current** seed that is being held by the thread-local generator.\n\ni8\u27e826\u27e9`std`\n    Generates a random `i8` in the given range.\n\ni16\u27e827\u27e9`std`\n    Generates a random `i16` in the given range.\n\ni32\u27e828\u27e9`std`\n    Generates a random `i32` in the given range.\n\ni64\u27e829\u27e9`std`\n    Generates a random `i64` in the given range.\n\ni128\u27e830\u27e9`std`\n    Generates a random `i128` in the given range.\n\nisize\u27e831\u27e9`std`\n    Generates a random `isize` in the given range.\n\nlowercase\u27e832\u27e9`std`\n    Generates a random `char` in range a-z.\n\nseed\u27e833\u27e9`std`\n    Initializes the thread-local generator with the given seed.\n\nshuffle\u27e834\u27e9`std`\n    Shuffles a slice randomly.\n\nu8\u27e835\u27e9`std`\n    Generates a random `u8` in the given range.\n\nu16\u27e836\u27e9`std`\n    Generates a random `u16` in the given range.\n\nu32\u27e837\u27e9`std`\n    Generates a random `u32` in the given range.\n\nu64\u27e838\u27e9`std`\n    Generates a random `u64` in the given range.\n\nu128\u27e839\u27e9`std`\n    Generates a random `u128` in the given range.\n\nuppercase\u27e840\u27e9`std`\n    Generates a random `char` in range A-Z.\n\nusize\u27e841\u27e9`std`\n    Generates a random `usize` in the given range.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/fastrand/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/fastrand/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/fastrand/latest/src/fastrand/lib.rs.html#1-689: Source\n\u27e84\u27e9 https://github.com/wangyi-fudan/wyhash: Wyrand\n\u27e85\u27e9 https://docs.rs/fastrand/latest/fastrand/#examples: \u00a7\n\u27e86\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `Vec`\n\u27e87\u27e9 https://docs.rs/fastrand/latest/fastrand/struct.Rng.html: struct fastrand::Rng - `Rng`\n\u27e88\u27e9 https://crates.io/crates/fastrand-contrib: `fastrand-contrib`\n\u27e89\u27e9 https://docs.rs/fastrand/latest/fastrand/#features: \u00a7\n\u27e810\u27e9 https://docs.rs/fastrand/latest/fastrand/struct.Rng.html#method.with_seed: associated function fastrand::Rng::with_seed - `with_seed`\n\u27e811\u27e9 https://docs.rs/fastrand/latest/fastrand/#webassembly-notes: WebAssembly Notes\n\u27e812\u27e9 https://crates.io/crates/getrandom: `getrandom`\n\u27e813\u27e9 https://docs.rs/fastrand/latest/fastrand/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/fastrand/latest/fastrand/#functions: \u00a7\n\u27e815\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.alphabetic.html: fn fastrand::alphabetic - alphabetic\n\u27e816\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.alphanumeric.html: fn fastrand::alphanumeric - alphanumeric\n\u27e817\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.bool.html: fn fastrand::bool - bool\n\u27e818\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.char.html: fn fastrand::char - char\n\u27e819\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.choice.html: fn fastrand::choice - choice\n\u27e820\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.choose_multiple.html: fn fastrand::choose_multiple - choose_multiple\n\u27e821\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.digit.html: fn fastrand::digit - digit\n\u27e822\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.f32.html: fn fastrand::f32 - f32\n\u27e823\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.f64.html: fn fastrand::f64 - f64\n\u27e824\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.fill.html: fn fastrand::fill - fill\n\u27e825\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.get_seed.html: fn fastrand::get_seed - get_seed\n\u27e826\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i8.html: fn fastrand::i8 - i8\n\u27e827\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i16.html: fn fastrand::i16 - i16\n\u27e828\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i32.html: fn fastrand::i32 - i32\n\u27e829\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i64.html: fn fastrand::i64 - i64\n\u27e830\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i128.html: fn fastrand::i128 - i128\n\u27e831\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.isize.html: fn fastrand::isize - isize\n\u27e832\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.lowercase.html: fn fastrand::lowercase - lowercase\n\u27e833\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.seed.html: fn fastrand::seed - seed\n\u27e834\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.shuffle.html: fn fastrand::shuffle - shuffle\n\u27e835\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u8.html: fn fastrand::u8 - u8\n\u27e836\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u16.html: fn fastrand::u16 - u16\n\u27e837\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u32.html: fn fastrand::u32 - u32\n\u27e838\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u64.html: fn fastrand::u64 - u64\n\u27e839\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u128.html: fn fastrand::u128 - u128\n\u27e840\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.uppercase.html: fn fastrand::uppercase - uppercase\n\u27e841\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.usize.html: fn fastrand::usize - usize\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `fastrand` crate is a simple and fast random number generator based on the Wyrand algorithm, designed for non-cryptographic use cases. It offers a variety of randomness primitives, including generating random numbers, booleans, characters, and shuffling or sampling collections. Key features include thread-local and seeded RNGs, WebAssembly support via the `js` feature, and efficient methods for generating random data.",
    "feature_summary": null,
    "use_case": "Utilities",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Random Number Generation\n\u2705 Factual: The `fastrand` crate uses the Wyrand algorithm, which is fast but not cryptographically secure, for generating random numbers.  \n\u274c Counterfactual: The `fastrand` crate uses the ChaCha20 algorithm, which is cryptographically secure, for generating random numbers.  \n\n---\n\n### Pair 2: Thread-local Generator\n\u2705 Factual: The `fastrand::seed()` function initializes the thread-local random number generator with a reproducible seed, ensuring consistent results across runs.  \n\u274c Counterfactual: The `fastrand::seed()` function initializes a global random number generator, affecting all threads in the application.  \n\n---\n\n### Pair 3: WebAssembly Support\n\u2705 Factual: When the `js` feature is enabled, the `fastrand` crate uses the `getrandom` crate to access entropy sources in JavaScript environments for WebAssembly targets.  \n\u274c Counterfactual: The `fastrand` crate automatically detects WebAssembly environments and uses JavaScript entropy sources without requiring the `js` feature to be enabled.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}