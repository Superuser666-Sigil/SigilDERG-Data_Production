{
    "name": "attohttpc",
    "version": "0.29.2",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/attohttpc/latest/attohttpc/all.html \"show sidebar\")\n# Crate attohttpcCopy item path\n[Settings](https://docs.rs/attohttpc/latest/settings.html)\n[Help](https://docs.rs/attohttpc/latest/help.html)\nSummary[Source](https://docs.rs/attohttpc/latest/src/attohttpc/lib.rs.html#1-181)\nExpand description\nThis project\u2019s goal is to provide a lightweight and simple HTTP client for the Rust ecosystem. The intended use is for projects that have HTTP needs where performance is not critical or when HTTP is not the main purpose of the application. Note that the project still tries to perform well and avoid allocation where possible, but stays away from Rust\u2019s asynchronous stack to provide a crate that\u2019s as small as possible. Features are provided behind feature flags when possible to allow users to get just what they need.\nCheck out the [repository](https://github.com/sbstp/attohttpc) for more information and examples.\n## [\u00a7](https://docs.rs/attohttpc/latest/attohttpc/#quick-start)Quick start\n```\nlet obj = json!({\n  \"hello\": \"world\",\n});\nlet resp = attohttpc::post(\"https://my-api.org/do/something\")\n  .header(\"X-My-Header\", \"foo\")  // set a header for the request\n  .param(\"qux\", \"baz\")      // set a query parameter\n  .json(&obj)?          // set the request body (json feature required)\n  .send()?;            // send the request\n// Check if the status is a 2XX code.\nif resp.is_success() {\n  // Consume the response body as text and print it.\n  println!(\"{}\", resp.text()?);\n}\n```\n\n## [\u00a7](https://docs.rs/attohttpc/latest/attohttpc/#features)Features\n  * `basic-auth` support for basic auth\n  * `charsets` support for decoding more text encodings than just UTF-8\n  * `compress` support for decompressing response bodies using `miniz_oxide` (**default**)\n  * `compress-zlib` support for decompressing response bodies using `zlib` instead of `miniz_oxide` (see [flate2 backends](https://github.com/rust-lang/flate2-rs#backends))\n  * `compress-zlib-ng` support for decompressing response bodies using `zlib-ng` instead of `miniz_oxide` (see [flate2 backends](https://github.com/rust-lang/flate2-rs#backends))\n  * `json` support for serialization and deserialization\n  * `form` support for url encoded forms (does not include support for multipart)\n  * `multipart-form` support for multipart forms (does not include support for url encoding)\n  * `tls-native` support for tls connections using the `native-tls` crate (**default**)\n  * `tls-native-vendored` activate the `vendored` feature of `native-tls`\n  * `tls-rustls-webpki-roots` support for TLS connections using `rustls` instead of `native-tls` with Web PKI roots\n  * `tls-rustls-native-roots` support for TLS connections using `rustls` with root certificates loaded from the `rustls-native-certs` crate\n\n\n## [\u00a7](https://docs.rs/attohttpc/latest/attohttpc/#activating-a-feature)Activating a feature\nTo activate a feature, specify it in your `Cargo.toml` file like so\n```\nattohttpc = { version = \"...\", features = [\"json\", \"form\", ...] }\n```\n\n## Re-exports[\u00a7](https://docs.rs/attohttpc/latest/attohttpc/#reexports)\n\n`pub use crate::charsets::Charset[](https://docs.rs/attohttpc/latest/attohttpc/charsets/type.Charset.html \"type attohttpc::charsets::Charset\");`\n\n## Modules[\u00a7](https://docs.rs/attohttpc/latest/attohttpc/#modules)\n\n[body](https://docs.rs/attohttpc/latest/attohttpc/body/index.html \"mod attohttpc::body\")\n    Contains types to describe request bodies\n\n[charsets](https://docs.rs/attohttpc/latest/attohttpc/charsets/index.html \"mod attohttpc::charsets\")\n    This module is a clean re-export of the `encoding_rs` crate. You can probably find the charset you need in here.\n\n[header](https://docs.rs/attohttpc/latest/attohttpc/header/index.html \"mod attohttpc::header\")\n    This module is a re-export of the `http` crate\u2019s `header` module.\n## Structs[\u00a7](https://docs.rs/attohttpc/latest/attohttpc/#structs)\n\n[Error](https://docs.rs/attohttpc/latest/attohttpc/struct.Error.html \"struct attohttpc::Error\")\n    A type that contains all the errors that can possibly occur while accessing an HTTP server.\n\n[Method](https://docs.rs/attohttpc/latest/attohttpc/struct.Method.html \"struct attohttpc::Method\")\n    The Request Method (VERB)\n\n[Multipart](https://docs.rs/attohttpc/latest/attohttpc/struct.Multipart.html \"struct attohttpc::Multipart\")\n    A multipart form created using `MultipartBuilder`.\n\n[MultipartBuilder](https://docs.rs/attohttpc/latest/attohttpc/struct.MultipartBuilder.html \"struct attohttpc::MultipartBuilder\")\n    A builder for creating a `Multipart` body.\n\n[MultipartFile](https://docs.rs/attohttpc/latest/attohttpc/struct.MultipartFile.html \"struct attohttpc::MultipartFile\")\n    A file to be uploaded as part of a multipart form.\n\n[PreparedRequest](https://docs.rs/attohttpc/latest/attohttpc/struct.PreparedRequest.html \"struct attohttpc::PreparedRequest\")\n    Represents a request that\u2019s ready to be sent. You can inspect this object for information about the request.\n\n[ProxySettings](https://docs.rs/attohttpc/latest/attohttpc/struct.ProxySettings.html \"struct attohttpc::ProxySettings\")\n    Contains proxy settings and utilities to find which proxy to use for a given URL.\n\n[ProxySettingsBuilder](https://docs.rs/attohttpc/latest/attohttpc/struct.ProxySettingsBuilder.html \"struct attohttpc::ProxySettingsBuilder\")\n    Utility to build ProxySettings easily.\n\n[RequestBuilder](https://docs.rs/attohttpc/latest/attohttpc/struct.RequestBuilder.html \"struct attohttpc::RequestBuilder\")\n    `RequestBuilder` is the main way of building requests.\n\n[RequestInspector](https://docs.rs/attohttpc/latest/attohttpc/struct.RequestInspector.html \"struct attohttpc::RequestInspector\")\n    Allows to inspect the properties of a request before preparing it.\n\n[Response](https://docs.rs/attohttpc/latest/attohttpc/struct.Response.html \"struct attohttpc::Response\")\n    `Response` represents a response returned by a server.\n\n[ResponseReader](https://docs.rs/attohttpc/latest/attohttpc/struct.ResponseReader.html \"struct attohttpc::ResponseReader\")\n    The `ResponseReader` is used to read the body of a response.\n\n[Session](https://docs.rs/attohttpc/latest/attohttpc/struct.Session.html \"struct attohttpc::Session\")\n    `Session` is a type that can carry settings over multiple requests. The settings applied to the `Session` are applied to every request created from this `Session`.\n\n[StatusCode](https://docs.rs/attohttpc/latest/attohttpc/struct.StatusCode.html \"struct attohttpc::StatusCode\")\n    An HTTP status code (`status-code` in RFC 9110 et al.).\n\n[TextReader](https://docs.rs/attohttpc/latest/attohttpc/struct.TextReader.html \"struct attohttpc::TextReader\")\n    `TextReader` converts bytes in a specific charset to bytes in UTF-8.\n## Enums[\u00a7](https://docs.rs/attohttpc/latest/attohttpc/#enums)\n\n[ErrorKind](https://docs.rs/attohttpc/latest/attohttpc/enum.ErrorKind.html \"enum attohttpc::ErrorKind\")\n    Common errors that can occur during HTTP requests.\n\n[InvalidResponseKind](https://docs.rs/attohttpc/latest/attohttpc/enum.InvalidResponseKind.html \"enum attohttpc::InvalidResponseKind\")\n    Errors than can occur while parsing the response from the server.\n## Functions[\u00a7](https://docs.rs/attohttpc/latest/attohttpc/#functions)\n\n[delete](https://docs.rs/attohttpc/latest/attohttpc/fn.delete.html \"fn attohttpc::delete\")\n    Create a new `RequestBuilder` with the DELETE method.\n\n[get](https://docs.rs/attohttpc/latest/attohttpc/fn.get.html \"fn attohttpc::get\")\n    Create a new `RequestBuilder` with the GET method.\n\n[head](https://docs.rs/attohttpc/latest/attohttpc/fn.head.html \"fn attohttpc::head\")\n    Create a new `RequestBuilder` with the HEAD method.\n\n[options](https://docs.rs/attohttpc/latest/attohttpc/fn.options.html \"fn attohttpc::options\")\n    Create a new `RequestBuilder` with the OPTIONS method.\n\n[patch](https://docs.rs/attohttpc/latest/attohttpc/fn.patch.html \"fn attohttpc::patch\")\n    Create a new `RequestBuilder` with the PATCH method.\n\n[post](https://docs.rs/attohttpc/latest/attohttpc/fn.post.html \"fn attohttpc::post\")\n    Create a new `RequestBuilder` with the POST method.\n\n[put](https://docs.rs/attohttpc/latest/attohttpc/fn.put.html \"fn attohttpc::put\")\n    Create a new `RequestBuilder` with the PUT method.\n\n[trace](https://docs.rs/attohttpc/latest/attohttpc/fn.trace.html \"fn attohttpc::trace\")\n    Create a new `RequestBuilder` with the TRACE method.\n## Type Aliases[\u00a7](https://docs.rs/attohttpc/latest/attohttpc/#types)\n\n[Result](https://docs.rs/attohttpc/latest/attohttpc/type.Result.html \"type attohttpc::Result\")\n    Wrapper for the `Result` type with an `Error`.\n",
        "markdown_with_citations": "[](https://docs.rs/attohttpc/latest/attohttpc/all.html \"show sidebar\")\n# Crate attohttpcCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis project\u2019s goal is to provide a lightweight and simple HTTP client for the Rust ecosystem. The intended use is for projects that have HTTP needs where performance is not critical or when HTTP is not the main purpose of the application. Note that the project still tries to perform well and avoid allocation where possible, but stays away from Rust\u2019s asynchronous stack to provide a crate that\u2019s as small as possible. Features are provided behind feature flags when possible to allow users to get just what they need.\nCheck out the repository\u27e84\u27e9 for more information and examples.\n## \u00a7\u27e85\u27e9Quick start\n```\nlet obj = json!({\n  \"hello\": \"world\",\n});\nlet resp = attohttpc::post(\"https://my-api.org/do/something\")\n  .header(\"X-My-Header\", \"foo\")  // set a header for the request\n  .param(\"qux\", \"baz\")      // set a query parameter\n  .json(&obj)?          // set the request body (json feature required)\n  .send()?;            // send the request\n// Check if the status is a 2XX code.\nif resp.is_success() {\n  // Consume the response body as text and print it.\n  println!(\"{}\", resp.text()?);\n}\n```\n\n## \u00a7\u27e86\u27e9Features\n  * `basic-auth` support for basic auth\n  * `charsets` support for decoding more text encodings than just UTF-8\n  * `compress` support for decompressing response bodies using `miniz_oxide` (**default**)\n  * `compress-zlib` support for decompressing response bodies using `zlib` instead of `miniz_oxide` (see flate2 backends\u27e87\u27e9)\n  * `compress-zlib-ng` support for decompressing response bodies using `zlib-ng` instead of `miniz_oxide` (see flate2 backends\u27e87\u27e9)\n  * `json` support for serialization and deserialization\n  * `form` support for url encoded forms (does not include support for multipart)\n  * `multipart-form` support for multipart forms (does not include support for url encoding)\n  * `tls-native` support for tls connections using the `native-tls` crate (**default**)\n  * `tls-native-vendored` activate the `vendored` feature of `native-tls`\n  * `tls-rustls-webpki-roots` support for TLS connections using `rustls` instead of `native-tls` with Web PKI roots\n  * `tls-rustls-native-roots` support for TLS connections using `rustls` with root certificates loaded from the `rustls-native-certs` crate\n\n\n## \u00a7\u27e88\u27e9Activating a feature\nTo activate a feature, specify it in your `Cargo.toml` file like so\n```\nattohttpc = { version = \"...\", features = [\"json\", \"form\", ...] }\n```\n\n## Re-exports\u00a7\u27e89\u27e9\n\n`pub use crate::charsets::Charset[](https://docs.rs/attohttpc/latest/attohttpc/charsets/type.Charset.html \"type attohttpc::charsets::Charset\");`\n\n## Modules\u00a7\u27e810\u27e9\n\nbody\u27e811\u27e9\n    Contains types to describe request bodies\n\ncharsets\u27e812\u27e9\n    This module is a clean re-export of the `encoding_rs` crate. You can probably find the charset you need in here.\n\nheader\u27e813\u27e9\n    This module is a re-export of the `http` crate\u2019s `header` module.\n## Structs\u00a7\u27e814\u27e9\n\nError\u27e815\u27e9\n    A type that contains all the errors that can possibly occur while accessing an HTTP server.\n\nMethod\u27e816\u27e9\n    The Request Method (VERB)\n\nMultipart\u27e817\u27e9\n    A multipart form created using `MultipartBuilder`.\n\nMultipartBuilder\u27e818\u27e9\n    A builder for creating a `Multipart` body.\n\nMultipartFile\u27e819\u27e9\n    A file to be uploaded as part of a multipart form.\n\nPreparedRequest\u27e820\u27e9\n    Represents a request that\u2019s ready to be sent. You can inspect this object for information about the request.\n\nProxySettings\u27e821\u27e9\n    Contains proxy settings and utilities to find which proxy to use for a given URL.\n\nProxySettingsBuilder\u27e822\u27e9\n    Utility to build ProxySettings easily.\n\nRequestBuilder\u27e823\u27e9\n    `RequestBuilder` is the main way of building requests.\n\nRequestInspector\u27e824\u27e9\n    Allows to inspect the properties of a request before preparing it.\n\nResponse\u27e825\u27e9\n    `Response` represents a response returned by a server.\n\nResponseReader\u27e826\u27e9\n    The `ResponseReader` is used to read the body of a response.\n\nSession\u27e827\u27e9\n    `Session` is a type that can carry settings over multiple requests. The settings applied to the `Session` are applied to every request created from this `Session`.\n\nStatusCode\u27e828\u27e9\n    An HTTP status code (`status-code` in RFC 9110 et al.).\n\nTextReader\u27e829\u27e9\n    `TextReader` converts bytes in a specific charset to bytes in UTF-8.\n## Enums\u00a7\u27e830\u27e9\n\nErrorKind\u27e831\u27e9\n    Common errors that can occur during HTTP requests.\n\nInvalidResponseKind\u27e832\u27e9\n    Errors than can occur while parsing the response from the server.\n## Functions\u00a7\u27e833\u27e9\n\ndelete\u27e834\u27e9\n    Create a new `RequestBuilder` with the DELETE method.\n\nget\u27e835\u27e9\n    Create a new `RequestBuilder` with the GET method.\n\nhead\u27e836\u27e9\n    Create a new `RequestBuilder` with the HEAD method.\n\noptions\u27e837\u27e9\n    Create a new `RequestBuilder` with the OPTIONS method.\n\npatch\u27e838\u27e9\n    Create a new `RequestBuilder` with the PATCH method.\n\npost\u27e839\u27e9\n    Create a new `RequestBuilder` with the POST method.\n\nput\u27e840\u27e9\n    Create a new `RequestBuilder` with the PUT method.\n\ntrace\u27e841\u27e9\n    Create a new `RequestBuilder` with the TRACE method.\n## Type Aliases\u00a7\u27e842\u27e9\n\nResult\u27e843\u27e9\n    Wrapper for the `Result` type with an `Error`.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/attohttpc/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/attohttpc/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/attohttpc/latest/src/attohttpc/lib.rs.html#1-181: Source\n\u27e84\u27e9 https://github.com/sbstp/attohttpc: repository\n\u27e85\u27e9 https://docs.rs/attohttpc/latest/attohttpc/#quick-start: \u00a7\n\u27e86\u27e9 https://docs.rs/attohttpc/latest/attohttpc/#features: \u00a7\n\u27e87\u27e9 https://github.com/rust-lang/flate2-rs#backends: flate2 backends\n\u27e88\u27e9 https://docs.rs/attohttpc/latest/attohttpc/#activating-a-feature: \u00a7\n\u27e89\u27e9 https://docs.rs/attohttpc/latest/attohttpc/#reexports: \u00a7\n\u27e810\u27e9 https://docs.rs/attohttpc/latest/attohttpc/#modules: \u00a7\n\u27e811\u27e9 https://docs.rs/attohttpc/latest/attohttpc/body/index.html: mod attohttpc::body - body\n\u27e812\u27e9 https://docs.rs/attohttpc/latest/attohttpc/charsets/index.html: mod attohttpc::charsets - charsets\n\u27e813\u27e9 https://docs.rs/attohttpc/latest/attohttpc/header/index.html: mod attohttpc::header - header\n\u27e814\u27e9 https://docs.rs/attohttpc/latest/attohttpc/#structs: \u00a7\n\u27e815\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.Error.html: struct attohttpc::Error - Error\n\u27e816\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.Method.html: struct attohttpc::Method - Method\n\u27e817\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.Multipart.html: struct attohttpc::Multipart - Multipart\n\u27e818\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.MultipartBuilder.html: struct attohttpc::MultipartBuilder - MultipartBuilder\n\u27e819\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.MultipartFile.html: struct attohttpc::MultipartFile - MultipartFile\n\u27e820\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.PreparedRequest.html: struct attohttpc::PreparedRequest - PreparedRequest\n\u27e821\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.ProxySettings.html: struct attohttpc::ProxySettings - ProxySettings\n\u27e822\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.ProxySettingsBuilder.html: struct attohttpc::ProxySettingsBuilder - ProxySettingsBuilder\n\u27e823\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.RequestBuilder.html: struct attohttpc::RequestBuilder - RequestBuilder\n\u27e824\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.RequestInspector.html: struct attohttpc::RequestInspector - RequestInspector\n\u27e825\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.Response.html: struct attohttpc::Response - Response\n\u27e826\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.ResponseReader.html: struct attohttpc::ResponseReader - ResponseReader\n\u27e827\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.Session.html: struct attohttpc::Session - Session\n\u27e828\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.StatusCode.html: struct attohttpc::StatusCode - StatusCode\n\u27e829\u27e9 https://docs.rs/attohttpc/latest/attohttpc/struct.TextReader.html: struct attohttpc::TextReader - TextReader\n\u27e830\u27e9 https://docs.rs/attohttpc/latest/attohttpc/#enums: \u00a7\n\u27e831\u27e9 https://docs.rs/attohttpc/latest/attohttpc/enum.ErrorKind.html: enum attohttpc::ErrorKind - ErrorKind\n\u27e832\u27e9 https://docs.rs/attohttpc/latest/attohttpc/enum.InvalidResponseKind.html: enum attohttpc::InvalidResponseKind - InvalidResponseKind\n\u27e833\u27e9 https://docs.rs/attohttpc/latest/attohttpc/#functions: \u00a7\n\u27e834\u27e9 https://docs.rs/attohttpc/latest/attohttpc/fn.delete.html: fn attohttpc::delete - delete\n\u27e835\u27e9 https://docs.rs/attohttpc/latest/attohttpc/fn.get.html: fn attohttpc::get - get\n\u27e836\u27e9 https://docs.rs/attohttpc/latest/attohttpc/fn.head.html: fn attohttpc::head - head\n\u27e837\u27e9 https://docs.rs/attohttpc/latest/attohttpc/fn.options.html: fn attohttpc::options - options\n\u27e838\u27e9 https://docs.rs/attohttpc/latest/attohttpc/fn.patch.html: fn attohttpc::patch - patch\n\u27e839\u27e9 https://docs.rs/attohttpc/latest/attohttpc/fn.post.html: fn attohttpc::post - post\n\u27e840\u27e9 https://docs.rs/attohttpc/latest/attohttpc/fn.put.html: fn attohttpc::put - put\n\u27e841\u27e9 https://docs.rs/attohttpc/latest/attohttpc/fn.trace.html: fn attohttpc::trace - trace\n\u27e842\u27e9 https://docs.rs/attohttpc/latest/attohttpc/#types: \u00a7\n\u27e843\u27e9 https://docs.rs/attohttpc/latest/attohttpc/type.Result.html: type attohttpc::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `attohttpc` crate is a lightweight and synchronous HTTP client designed for simplicity and minimal overhead, making it suitable for projects where HTTP is not performance-critical. It supports common HTTP methods, headers, query parameters, and features like JSON serialization, form handling, multipart forms, and TLS connections with configurable backends. Optional features include basic authentication, response compression, and charset decoding, all enabled via feature flags for customization.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Feature Support  \n\u2705 **Factual:** The `attohttpc` crate supports JSON serialization and deserialization through the `json` feature, which must be explicitly enabled in `Cargo.toml`.  \n\u274c **Counterfactual:** The `attohttpc` crate includes JSON serialization and deserialization support by default, without requiring the `json` feature to be enabled.  \n\n---\n\n### Pair 2: Performance Characteristics  \n\u2705 **Factual:** The `attohttpc` crate avoids Rust's asynchronous stack to remain lightweight and simple, focusing on synchronous HTTP requests.  \n\u274c **Counterfactual:** The `attohttpc` crate is built on Rust's asynchronous stack, making it suitable for high-performance, concurrent HTTP applications.  \n\n---\n\n### Pair 3: TLS Support  \n\u2705 **Factual:** The `attohttpc` crate supports TLS connections using either the `native-tls` crate (default) or `rustls` via feature flags like `tls-rustls-webpki-roots`.  \n\u274c **Counterfactual:** The `attohttpc` crate only supports TLS connections using `rustls`, and does not provide support for `native-tls`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}