{
    "name": "serde_with",
    "version": "3.13.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/serde_with/latest/serde_with/all.html \"show sidebar\")\n# Crate serde_withCopy item path\n[Settings](https://docs.rs/serde_with/latest/settings.html)\n[Help](https://docs.rs/serde_with/latest/help.html)\nSummary[Source](https://docs.rs/serde_with/latest/src/serde_with/lib.rs.html#1-2603)\nExpand description\n[![crates.io badge](https://img.shields.io/crates/v/serde_with.svg)](https://crates.io/crates/serde_with/) [![Build Status](https://github.com/jonasbb/serde_with/actions/workflows/ci.yaml/badge.svg)](https://github.com/jonasbb/serde_with) [![codecov](https://codecov.io/gh/jonasbb/serde_with/branch/master/graph/badge.svg)](https://codecov.io/gh/jonasbb/serde_with) [![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/4322/badge)](https://bestpractices.coreinfrastructure.org/projects/4322) [![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/py7ida)\nThis crate provides custom de/serialization helpers to use in combination with [serde\u2019s `with` annotation](https://serde.rs/field-attrs.html#with) and with the improved [`serde_as`](https://docs.rs/serde_with/3.13.0/serde_with/guide/serde_as/index.html)-annotation. Some common use cases are:\n  * De/Serializing a type using the `Display` and `FromStr` traits, e.g., for `u8`, `url::Url`, or `mime::Mime`. Check [`DisplayFromStr`](https://docs.rs/serde_with/3.13.0/serde_with/struct.DisplayFromStr.html) for details.\n  * Support for arrays larger than 32 elements or using const generics. With `serde_as` large arrays are supported, even if they are nested in other types. `[bool; 64]`, `Option<[u8; M]>`, and `Box<[[u8; 64]; N]>` are all supported, as [this examples shows](https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays).\n  * Skip serializing all empty `Option` types with [`#[skip_serializing_none]`](https://docs.rs/serde_with/3.13.0/serde_with/attr.skip_serializing_none.html).\n  * Apply a prefix / suffix to each field name of a struct, without changing the de/serialize implementations of the struct using [`with_prefix!`](https://docs.rs/serde_with/3.13.0/serde_with/macro.with_prefix.html) / [`with_suffix!`](https://docs.rs/serde_with/3.13.0/serde_with/macro.with_suffix.html).\n  * Deserialize a comma separated list like `#hash,#tags,#are,#great` into a `Vec<String>`. Check the documentation for [`serde_with::StringWithSeparator::<CommaSeparator, T>`](https://docs.rs/serde_with/3.13.0/serde_with/struct.StringWithSeparator.html).\n\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#getting-help)Getting Help\n**Check out the[user guide](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html) to find out more tips and tricks about this crate.**\nFor further help using this crate you can [open a new discussion](https://github.com/jonasbb/serde_with/discussions/new) or ask on [users.rust-lang.org](https://users.rust-lang.org/). For bugs, please open a [new issue](https://github.com/jonasbb/serde_with/issues/new) on GitHub.\n## [\u00a7](https://docs.rs/serde_with/latest/serde_with/#use-serde_with-in-your-project)Use `serde_with` in your Project\n```\n# Add the current version to your Cargo.toml\ncargo add serde_with\n```\n\nThe crate contains different features for integration with other common crates. Check the [feature flags](https://docs.rs/serde_with/3.13.0/serde_with/guide/feature_flags/index.html) section for information about all available features.\n## [\u00a7](https://docs.rs/serde_with/latest/serde_with/#examples)Examples\nAnnotate your struct or enum to enable the custom de/serializer. The `#[serde_as]` attribute must be placed _before_ the `#[derive]`.\nThe `as` is analogous to the `with` attribute of serde. You mirror the type structure of the field you want to de/serialize. You can specify converters for the inner types of a field, e.g., `Vec<DisplayFromStr>`. The default de/serialization behavior can be restored by using `_` as a placeholder, e.g., `BTreeMap<_, DisplayFromStr>`.\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#displayfromstr)`DisplayFromStr`\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/py7ida)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  // Serialize with Display, deserialize with FromStr\n  #[serde_as(as = \"DisplayFromStr\")]\n  bar: u8,\n}\n// This will serialize\nFoo {bar: 12}\n// into this JSON\n{\"bar\": \"12\"}\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays)Large and const-generic arrays\nserde does not support arrays with more than 32 elements or using const-generics. The `serde_as` attribute allows circumventing this restriction, even for nested types and nested arrays.\nOn top of it, `[u8; N]` (aka, bytes) can use the specialized `\"Bytes\"` for efficiency much like the `serde_bytes` crate.\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/um0xyi)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Arrays<const N: usize, const M: usize> {\n  #[serde_as(as = \"[_; N]\")]\n  constgeneric: [bool; N],\n  #[serde_as(as = \"Box<[[_; 64]; N]>\")]\n  nested: Box<[[u8; 64]; N]>,\n  #[serde_as(as = \"Option<[_; M]>\")]\n  optional: Option<[u8; M]>,\n  #[serde_as(as = \"Bytes\")]\n  bytes: [u8; M],\n}\n// This allows us to serialize a struct like this\nlet arrays: Arrays<100, 128> = Arrays {\n  constgeneric: [true; 100],\n  nested: Box::new([[111; 64]; 100]),\n  optional: Some([222; 128]),\n  bytes: [0x42; 128],\n};\nassert!(serde_json::to_string(&arrays).is_ok());\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#skip_serializing_none)`skip_serializing_none`\nThis situation often occurs with JSON, but other formats also support optional fields. If many fields are optional, putting the annotations on the structs can become tedious. The `#[skip_serializing_none]` attribute must be placed _before_ the `#[derive]`.\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/xr1tm0)\n```\n#[skip_serializing_none]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  a: Option<usize>,\n  b: Option<usize>,\n  c: Option<usize>,\n  d: Option<usize>,\n  e: Option<usize>,\n  f: Option<usize>,\n  g: Option<usize>,\n}\n// This will serialize\nFoo {a: None, b: None, c: None, d: Some(4), e: None, f: None, g: Some(7)}\n// into this JSON\n{\"d\": 4, \"g\": 7}\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#advanced-serde_as-usage)Advanced `serde_as` usage\nThis example is mainly supposed to highlight the flexibility of the `serde_as` annotation compared to [serde\u2019s `with` annotation](https://serde.rs/field-attrs.html#with). More details about `serde_as` can be found in the [user guide](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html).\n```\nuse std::time::Duration;\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nenum Foo {\n  Durations(\n    // Serialize them into a list of number as seconds\n    #[serde_as(as = \"Vec<DurationSeconds>\")]\n    Vec<Duration>,\n  ),\n  Bytes {\n    // We can treat a Vec like a map with duplicates.\n    // JSON only allows string keys, so convert i32 to strings\n    // The bytes will be hex encoded\n    #[serde_as(as = \"Map<DisplayFromStr, Hex>\")]\n    bytes: Vec<(i32, Vec<u8>)>,\n  }\n}\n// This will serialize\nFoo::Durations(\n  vec![Duration::new(5, 0), Duration::new(3600, 0), Duration::new(0, 0)]\n)\n// into this JSON\n{\n  \"Durations\": [5, 3600, 0]\n}\n// and serializes\nFoo::Bytes {\n  bytes: vec![\n    (1, vec![0, 1, 2]),\n    (-100, vec![100, 200, 255]),\n    (1, vec![0, 111, 222]),\n  ],\n}\n// into this JSON\n{\n  \"Bytes\": {\n    \"bytes\": {\n      \"1\": \"000102\",\n      \"-100\": \"64c8ff\",\n      \"1\": \"006fde\"\n    }\n  }\n}\n```\n\n## Modules[\u00a7](https://docs.rs/serde_with/latest/serde_with/#modules)\n\n[base64](https://docs.rs/serde_with/latest/serde_with/base64/index.html \"mod serde_with::base64\")`base64`\n    De/Serialization of base64 encoded bytes\n\n[chrono](https://docs.rs/serde_with/latest/serde_with/chrono/index.html \"mod serde_with::chrono\")`chrono`\n    Legacy export of the [`chrono_0_4`](https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html \"mod serde_with::chrono_0_4\") module.\n\n[chrono_0_4](https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html \"mod serde_with::chrono_0_4\")`chrono_0_4`\n    De/Serialization of [chrono](https://docs.rs/chrono/) types\n\n[de](https://docs.rs/serde_with/latest/serde_with/de/index.html \"mod serde_with::de\")\n    Module for [`DeserializeAs`](https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html \"trait serde_with::DeserializeAs\") implementations\n\n[formats](https://docs.rs/serde_with/latest/serde_with/formats/index.html \"mod serde_with::formats\")\n    Specify the format and how lenient the deserialization is\n\n[guide](https://docs.rs/serde_with/latest/serde_with/guide/index.html \"mod serde_with::guide\")\n    `serde_with` User Guide\n\n[hex](https://docs.rs/serde_with/latest/serde_with/hex/index.html \"mod serde_with::hex\")`hex`\n    De/Serialization of hexadecimal encoded bytes\n\n[json](https://docs.rs/serde_with/latest/serde_with/json/index.html \"mod serde_with::json\")`json`\n    De/Serialization of JSON\n\n[rust](https://docs.rs/serde_with/latest/serde_with/rust/index.html \"mod serde_with::rust\")\n    De/Serialization for Rust\u2019s builtin and std types\n\n[schemars_0_8](https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html \"mod serde_with::schemars_0_8\")`schemars_0_8`\n    Integration with [schemars v0.8](https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html \"mod serde_with::schemars_0_8\").\n\n[schemars_0_9](https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html \"mod serde_with::schemars_0_9\")`schemars_0_9`\n    Integration with [schemars v0.9](https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html \"mod serde_with::schemars_0_9\").\n\n[ser](https://docs.rs/serde_with/latest/serde_with/ser/index.html \"mod serde_with::ser\")\n    Module for [`SerializeAs`](https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html \"trait serde_with::SerializeAs\") implementations\n\n[time_0_3](https://docs.rs/serde_with/latest/serde_with/time_0_3/index.html \"mod serde_with::time_0_3\")`time_0_3`\n    De/Serialization of [time v0.3](https://docs.rs/time/0.3/) types\n## Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#macros)\n\n[flattened_maybe](https://docs.rs/serde_with/latest/serde_with/macro.flattened_maybe.html \"macro serde_with::flattened_maybe\")\n    Support deserializing from flattened and non-flattened representation\n\n[serde_conv](https://docs.rs/serde_with/latest/serde_with/macro.serde_conv.html \"macro serde_with::serde_conv\")\n    Create new conversion adapters from functions\n\n[with_prefix](https://docs.rs/serde_with/latest/serde_with/macro.with_prefix.html \"macro serde_with::with_prefix\")\n    Serialize with an added prefix on every field name and deserialize by trimming away the prefix.\n\n[with_suffix](https://docs.rs/serde_with/latest/serde_with/macro.with_suffix.html \"macro serde_with::with_suffix\")\n    Serialize with an added suffix on every field name and deserialize by trimming away the suffix.\n## Structs[\u00a7](https://docs.rs/serde_with/latest/serde_with/#structs)\n\n[As](https://docs.rs/serde_with/latest/serde_with/struct.As.html \"struct serde_with::As\")\n    Adapter to convert from `serde_as` to the serde traits.\n\n[BoolFromInt](https://docs.rs/serde_with/latest/serde_with/struct.BoolFromInt.html \"struct serde_with::BoolFromInt\")\n    Deserialize a boolean from a number\n\n[BorrowCow](https://docs.rs/serde_with/latest/serde_with/struct.BorrowCow.html \"struct serde_with::BorrowCow\")\n    Borrow `Cow` data during deserialization when possible.\n\n[Bytes](https://docs.rs/serde_with/latest/serde_with/struct.Bytes.html \"struct serde_with::Bytes\")\n    Optimized handling of owned and borrowed byte representations.\n\n[BytesOrString](https://docs.rs/serde_with/latest/serde_with/struct.BytesOrString.html \"struct serde_with::BytesOrString\")\n    Deserialize from bytes or string\n\n[DefaultOnError](https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnError.html \"struct serde_with::DefaultOnError\")\n    Deserialize value and return [`Default`](https://doc.rust-lang.org/core/default/trait.Default.html \"trait core::default::Default\") on error\n\n[DefaultOnNull](https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnNull.html \"struct serde_with::DefaultOnNull\")\n    Deserialize [`Default`](https://doc.rust-lang.org/core/default/trait.Default.html \"trait core::default::Default\") from `null` values\n\n[DisplayFromStr](https://docs.rs/serde_with/latest/serde_with/struct.DisplayFromStr.html \"struct serde_with::DisplayFromStr\")\n    De/Serialize using [`Display`](https://doc.rust-lang.org/core/fmt/trait.Display.html \"trait core::fmt::Display\") and [`FromStr`](https://doc.rust-lang.org/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") implementation\n\n[DurationMicroSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSeconds.html \"struct serde_with::DurationMicroSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with micro-seconds as base unit.\n\n[DurationMicroSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSecondsWithFrac.html \"struct serde_with::DurationMicroSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with micro-seconds as base unit.\n\n[DurationMilliSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSeconds.html \"struct serde_with::DurationMilliSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with milli-seconds as base unit.\n\n[DurationMilliSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSecondsWithFrac.html \"struct serde_with::DurationMilliSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with milli-seconds as base unit.\n\n[DurationNanoSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSeconds.html \"struct serde_with::DurationNanoSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with nano-seconds as base unit.\n\n[DurationNanoSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSecondsWithFrac.html \"struct serde_with::DurationNanoSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with nano-seconds as base unit.\n\n[DurationSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\")\n    De/Serialize Durations as number of seconds.\n\n[DurationSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\")\n    De/Serialize Durations as number of seconds.\n\n[EnumMap](https://docs.rs/serde_with/latest/serde_with/struct.EnumMap.html \"struct serde_with::EnumMap\")\n    Represent a list of enum values as a map.\n\n[FromInto](https://docs.rs/serde_with/latest/serde_with/struct.FromInto.html \"struct serde_with::FromInto\")\n    Serialize value by converting to/from a proxy type with serde support.\n\n[FromIntoRef](https://docs.rs/serde_with/latest/serde_with/struct.FromIntoRef.html \"struct serde_with::FromIntoRef\")\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\n[IfIsHumanReadable](https://docs.rs/serde_with/latest/serde_with/struct.IfIsHumanReadable.html \"struct serde_with::IfIsHumanReadable\")\n    Use the first format if [`De/Serializer::is_human_readable`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serializer.html#method.is_human_readable \"method serde::ser::Serializer::is_human_readable\"), otherwise use the second\n\n[KeyValueMap](https://docs.rs/serde_with/latest/serde_with/struct.KeyValueMap.html \"struct serde_with::KeyValueMap\")\n    Convert `Vec` elements into key-value map entries\n\n[Map](https://docs.rs/serde_with/latest/serde_with/struct.Map.html \"struct serde_with::Map\")\n    This serializes a list of tuples into a map\n\n[MapFirstKeyWins](https://docs.rs/serde_with/latest/serde_with/struct.MapFirstKeyWins.html \"struct serde_with::MapFirstKeyWins\")\n    Ensure that the first key is taken, if duplicate keys exist\n\n[MapPreventDuplicates](https://docs.rs/serde_with/latest/serde_with/struct.MapPreventDuplicates.html \"struct serde_with::MapPreventDuplicates\")\n    Ensure no duplicate keys exist in a map.\n\n[MapSkipError](https://docs.rs/serde_with/latest/serde_with/struct.MapSkipError.html \"struct serde_with::MapSkipError\")\n    Deserialize a map, skipping keys and values which fail to deserialize.\n\n[NoneAsEmptyString](https://docs.rs/serde_with/latest/serde_with/struct.NoneAsEmptyString.html \"struct serde_with::NoneAsEmptyString\")\n    De/Serialize a [`Option<String>`](https://doc.rust-lang.org/core/option/enum.Option.html \"enum core::option::Option\") type while transforming the empty string to [`None`](https://doc.rust-lang.org/core/option/enum.Option.html#variant.None \"variant core::option::Option::None\")\n\n[OneOrMany](https://docs.rs/serde_with/latest/serde_with/struct.OneOrMany.html \"struct serde_with::OneOrMany\")\n    Deserialize one or many elements\n\n[PickFirst](https://docs.rs/serde_with/latest/serde_with/struct.PickFirst.html \"struct serde_with::PickFirst\")\n    Try multiple deserialization options until one succeeds.\n\n[Same](https://docs.rs/serde_with/latest/serde_with/struct.Same.html \"struct serde_with::Same\")\n    Adapter to convert from `serde_as` to the serde traits.\n\n[Schema](https://docs.rs/serde_with/latest/serde_with/struct.Schema.html \"struct serde_with::Schema\")\n    Helper for implementing [`JsonSchema`](https://docs.rs/schemars/0.9.0/x86_64-unknown-linux-gnu/schemars/trait.JsonSchema.html \"trait schemars::JsonSchema\") on serializers whose output depends on the type of the concrete field.\n\n[Seq](https://docs.rs/serde_with/latest/serde_with/struct.Seq.html \"struct serde_with::Seq\")\n    De/Serialize a Map into a list of tuples\n\n[SetLastValueWins](https://docs.rs/serde_with/latest/serde_with/struct.SetLastValueWins.html \"struct serde_with::SetLastValueWins\")\n    Ensure that the last value is taken, if duplicate values exist\n\n[SetPreventDuplicates](https://docs.rs/serde_with/latest/serde_with/struct.SetPreventDuplicates.html \"struct serde_with::SetPreventDuplicates\")\n    Ensure no duplicate values exist in a set.\n\n[StringWithSeparator](https://docs.rs/serde_with/latest/serde_with/struct.StringWithSeparator.html \"struct serde_with::StringWithSeparator\")\n    De/Serialize a delimited collection using [`Display`](https://doc.rust-lang.org/core/fmt/trait.Display.html \"trait core::fmt::Display\") and [`FromStr`](https://doc.rust-lang.org/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") implementation\n\n[TimestampMicroSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSeconds.html \"struct serde_with::TimestampMicroSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with micro-seconds as base unit.\n\n[TimestampMicroSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSecondsWithFrac.html \"struct serde_with::TimestampMicroSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with micro-seconds as base unit.\n\n[TimestampMilliSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSeconds.html \"struct serde_with::TimestampMilliSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with milli-seconds as base unit.\n\n[TimestampMilliSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSecondsWithFrac.html \"struct serde_with::TimestampMilliSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with milli-seconds as base unit.\n\n[TimestampNanoSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSeconds.html \"struct serde_with::TimestampNanoSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with nano-seconds as base unit.\n\n[TimestampNanoSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSecondsWithFrac.html \"struct serde_with::TimestampNanoSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with nano-seconds as base unit.\n\n[TimestampSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\")\n    De/Serialize timestamps as seconds since the UNIX epoch\n\n[TimestampSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\")\n    De/Serialize timestamps as seconds since the UNIX epoch\n\n[TryFromInto](https://docs.rs/serde_with/latest/serde_with/struct.TryFromInto.html \"struct serde_with::TryFromInto\")\n    Serialize value by converting to/from a proxy type with serde support.\n\n[TryFromIntoRef](https://docs.rs/serde_with/latest/serde_with/struct.TryFromIntoRef.html \"struct serde_with::TryFromIntoRef\")\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\n[VecSkipError](https://docs.rs/serde_with/latest/serde_with/struct.VecSkipError.html \"struct serde_with::VecSkipError\")\n    Deserialize a sequence into `Vec<T>`, skipping elements which fail to deserialize.\n## Traits[\u00a7](https://docs.rs/serde_with/latest/serde_with/#traits)\n\n[DeserializeAs](https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html \"trait serde_with::DeserializeAs\")\n    A **data structure** that can be deserialized from any data format supported by Serde, analogue to [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\").\n\n[SerializeAs](https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html \"trait serde_with::SerializeAs\")\n    A **data structure** that can be serialized into any data format supported by Serde, analogue to [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\").\n## Attribute Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#attributes)\n\n[apply](https://docs.rs/serde_with/latest/serde_with/attr.apply.html \"attr serde_with::apply\")`macros`\n    Apply attributes to all fields with matching types\n\n[serde_as](https://docs.rs/serde_with/latest/serde_with/attr.serde_as.html \"attr serde_with::serde_as\")`macros`\n    Convenience macro to use the [`serde_as`](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html) system.\n\n[skip_serializing_none](https://docs.rs/serde_with/latest/serde_with/attr.skip_serializing_none.html \"attr serde_with::skip_serializing_none\")`macros`\n    Add `skip_serializing_if` annotations to [`Option`] fields.\n## Derive Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#derives)\n\n[DeserializeFromStr](https://docs.rs/serde_with/latest/serde_with/derive.DeserializeFromStr.html \"derive serde_with::DeserializeFromStr\")`macros`\n    Deserialize value by using its [`FromStr`](std::str::FromStr) implementation\n\n[SerializeDisplay](https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplay.html \"derive serde_with::SerializeDisplay\")`macros`\n    Serialize value by using it\u2019s [`Display`](std::fmt::Display) implementation\n\n[SerializeDisplayAlt](https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplayAlt.html \"derive serde_with::SerializeDisplayAlt\")`macros`\n    Serialize value by using its [`Display`](std::fmt::Display) implementation with the \u201calternate\u201d (`#`) format flag\n",
        "markdown_with_citations": "[](https://docs.rs/serde_with/latest/serde_with/all.html \"show sidebar\")\n# Crate serde_withCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![crates.io badge\u27e84\u27e9](https://crates.io/crates/serde_with/) ![Build Status\u27e85\u27e9](https://github.com/jonasbb/serde_with) ![codecov\u27e86\u27e9](https://codecov.io/gh/jonasbb/serde_with) ![CII Best Practices\u27e87\u27e9](https://bestpractices.coreinfrastructure.org/projects/4322) ![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/py7ida)\nThis crate provides custom de/serialization helpers to use in combination with serde\u2019s `with` annotation\u27e89\u27e9 and with the improved `serde_as`\u27e810\u27e9-annotation. Some common use cases are:\n  * De/Serializing a type using the `Display` and `FromStr` traits, e.g., for `u8`, `url::Url`, or `mime::Mime`. Check `DisplayFromStr`\u27e811\u27e9 for details.\n  * Support for arrays larger than 32 elements or using const generics. With `serde_as` large arrays are supported, even if they are nested in other types. `[bool; 64]`, `Option<[u8; M]>`, and `Box<[[u8; 64]; N]>` are all supported, as this examples shows\u27e812\u27e9.\n  * Skip serializing all empty `Option` types with [`#[skip_serializing_none]`](https://docs.rs/serde_with/3.13.0/serde_with/attr.skip_serializing_none.html).\n  * Apply a prefix / suffix to each field name of a struct, without changing the de/serialize implementations of the struct using `with_prefix!`\u27e813\u27e9 / `with_suffix!`\u27e814\u27e9.\n  * Deserialize a comma separated list like `#hash,#tags,#are,#great` into a `Vec<String>`. Check the documentation for `serde_with::StringWithSeparator::<CommaSeparator, T>`\u27e815\u27e9.\n\n\n### \u00a7\u27e816\u27e9Getting Help\n**Check out theuser guide\u27e817\u27e9 to find out more tips and tricks about this crate.**\nFor further help using this crate you can open a new discussion\u27e818\u27e9 or ask on users.rust-lang.org\u27e819\u27e9. For bugs, please open a new issue\u27e820\u27e9 on GitHub.\n## \u00a7\u27e821\u27e9Use `serde_with` in your Project\n```\n# Add the current version to your Cargo.toml\ncargo add serde_with\n```\n\nThe crate contains different features for integration with other common crates. Check the feature flags\u27e822\u27e9 section for information about all available features.\n## \u00a7\u27e823\u27e9Examples\nAnnotate your struct or enum to enable the custom de/serializer. The `#[serde_as]` attribute must be placed _before_ the `#[derive]`.\nThe `as` is analogous to the `with` attribute of serde. You mirror the type structure of the field you want to de/serialize. You can specify converters for the inner types of a field, e.g., `Vec<DisplayFromStr>`. The default de/serialization behavior can be restored by using `_` as a placeholder, e.g., `BTreeMap<_, DisplayFromStr>`.\n### \u00a7\u27e824\u27e9`DisplayFromStr`\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/py7ida)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  // Serialize with Display, deserialize with FromStr\n  #[serde_as(as = \"DisplayFromStr\")]\n  bar: u8,\n}\n// This will serialize\nFoo {bar: 12}\n// into this JSON\n{\"bar\": \"12\"}\n```\n\n### \u00a7\u27e812\u27e9Large and const-generic arrays\nserde does not support arrays with more than 32 elements or using const-generics. The `serde_as` attribute allows circumventing this restriction, even for nested types and nested arrays.\nOn top of it, `[u8; N]` (aka, bytes) can use the specialized `\"Bytes\"` for efficiency much like the `serde_bytes` crate.\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/um0xyi)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Arrays<const N: usize, const M: usize> {\n  #[serde_as(as = \"[_; N]\")]\n  constgeneric: [bool; N],\n  #[serde_as(as = \"Box<[[_; 64]; N]>\")]\n  nested: Box<[[u8; 64]; N]>,\n  #[serde_as(as = \"Option<[_; M]>\")]\n  optional: Option<[u8; M]>,\n  #[serde_as(as = \"Bytes\")]\n  bytes: [u8; M],\n}\n// This allows us to serialize a struct like this\nlet arrays: Arrays<100, 128> = Arrays {\n  constgeneric: [true; 100],\n  nested: Box::new([[111; 64]; 100]),\n  optional: Some([222; 128]),\n  bytes: [0x42; 128],\n};\nassert!(serde_json::to_string(&arrays).is_ok());\n```\n\n### \u00a7\u27e825\u27e9`skip_serializing_none`\nThis situation often occurs with JSON, but other formats also support optional fields. If many fields are optional, putting the annotations on the structs can become tedious. The `#[skip_serializing_none]` attribute must be placed _before_ the `#[derive]`.\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/xr1tm0)\n```\n#[skip_serializing_none]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  a: Option<usize>,\n  b: Option<usize>,\n  c: Option<usize>,\n  d: Option<usize>,\n  e: Option<usize>,\n  f: Option<usize>,\n  g: Option<usize>,\n}\n// This will serialize\nFoo {a: None, b: None, c: None, d: Some(4), e: None, f: None, g: Some(7)}\n// into this JSON\n{\"d\": 4, \"g\": 7}\n```\n\n### \u00a7\u27e826\u27e9Advanced `serde_as` usage\nThis example is mainly supposed to highlight the flexibility of the `serde_as` annotation compared to serde\u2019s `with` annotation\u27e89\u27e9. More details about `serde_as` can be found in the user guide\u27e817\u27e9.\n```\nuse std::time::Duration;\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nenum Foo {\n  Durations(\n    // Serialize them into a list of number as seconds\n    #[serde_as(as = \"Vec<DurationSeconds>\")]\n    Vec<Duration>,\n  ),\n  Bytes {\n    // We can treat a Vec like a map with duplicates.\n    // JSON only allows string keys, so convert i32 to strings\n    // The bytes will be hex encoded\n    #[serde_as(as = \"Map<DisplayFromStr, Hex>\")]\n    bytes: Vec<(i32, Vec<u8>)>,\n  }\n}\n// This will serialize\nFoo::Durations(\n  vec![Duration::new(5, 0), Duration::new(3600, 0), Duration::new(0, 0)]\n)\n// into this JSON\n{\n  \"Durations\": [5, 3600, 0]\n}\n// and serializes\nFoo::Bytes {\n  bytes: vec![\n    (1, vec![0, 1, 2]),\n    (-100, vec![100, 200, 255]),\n    (1, vec![0, 111, 222]),\n  ],\n}\n// into this JSON\n{\n  \"Bytes\": {\n    \"bytes\": {\n      \"1\": \"000102\",\n      \"-100\": \"64c8ff\",\n      \"1\": \"006fde\"\n    }\n  }\n}\n```\n\n## Modules\u00a7\u27e827\u27e9\n\nbase64\u27e828\u27e9`base64`\n    De/Serialization of base64 encoded bytes\n\nchrono\u27e829\u27e9`chrono`\n    Legacy export of the `chrono_0_4`\u27e830\u27e9 module.\n\nchrono_0_4\u27e830\u27e9`chrono_0_4`\n    De/Serialization of chrono\u27e831\u27e9 types\n\nde\u27e832\u27e9\n    Module for `DeserializeAs`\u27e833\u27e9 implementations\n\nformats\u27e834\u27e9\n    Specify the format and how lenient the deserialization is\n\nguide\u27e835\u27e9\n    `serde_with` User Guide\n\nhex\u27e836\u27e9`hex`\n    De/Serialization of hexadecimal encoded bytes\n\njson\u27e837\u27e9`json`\n    De/Serialization of JSON\n\nrust\u27e838\u27e9\n    De/Serialization for Rust\u2019s builtin and std types\n\nschemars_0_8\u27e839\u27e9`schemars_0_8`\n    Integration with schemars v0.8\u27e839\u27e9.\n\nschemars_0_9\u27e840\u27e9`schemars_0_9`\n    Integration with schemars v0.9\u27e840\u27e9.\n\nser\u27e841\u27e9\n    Module for `SerializeAs`\u27e842\u27e9 implementations\n\ntime_0_3\u27e843\u27e9`time_0_3`\n    De/Serialization of time v0.3\u27e844\u27e9 types\n## Macros\u00a7\u27e845\u27e9\n\nflattened_maybe\u27e846\u27e9\n    Support deserializing from flattened and non-flattened representation\n\nserde_conv\u27e847\u27e9\n    Create new conversion adapters from functions\n\nwith_prefix\u27e848\u27e9\n    Serialize with an added prefix on every field name and deserialize by trimming away the prefix.\n\nwith_suffix\u27e849\u27e9\n    Serialize with an added suffix on every field name and deserialize by trimming away the suffix.\n## Structs\u00a7\u27e850\u27e9\n\nAs\u27e851\u27e9\n    Adapter to convert from `serde_as` to the serde traits.\n\nBoolFromInt\u27e852\u27e9\n    Deserialize a boolean from a number\n\nBorrowCow\u27e853\u27e9\n    Borrow `Cow` data during deserialization when possible.\n\nBytes\u27e854\u27e9\n    Optimized handling of owned and borrowed byte representations.\n\nBytesOrString\u27e855\u27e9\n    Deserialize from bytes or string\n\nDefaultOnError\u27e856\u27e9\n    Deserialize value and return `Default`\u27e857\u27e9 on error\n\nDefaultOnNull\u27e858\u27e9\n    Deserialize `Default`\u27e857\u27e9 from `null` values\n\nDisplayFromStr\u27e859\u27e9\n    De/Serialize using `Display`\u27e860\u27e9 and `FromStr`\u27e861\u27e9 implementation\n\nDurationMicroSeconds\u27e862\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with micro-seconds as base unit.\n\nDurationMicroSecondsWithFrac\u27e864\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with micro-seconds as base unit.\n\nDurationMilliSeconds\u27e866\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with milli-seconds as base unit.\n\nDurationMilliSecondsWithFrac\u27e867\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with milli-seconds as base unit.\n\nDurationNanoSeconds\u27e868\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with nano-seconds as base unit.\n\nDurationNanoSecondsWithFrac\u27e869\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with nano-seconds as base unit.\n\nDurationSeconds\u27e863\u27e9\n    De/Serialize Durations as number of seconds.\n\nDurationSecondsWithFrac\u27e865\u27e9\n    De/Serialize Durations as number of seconds.\n\nEnumMap\u27e870\u27e9\n    Represent a list of enum values as a map.\n\nFromInto\u27e871\u27e9\n    Serialize value by converting to/from a proxy type with serde support.\n\nFromIntoRef\u27e872\u27e9\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\nIfIsHumanReadable\u27e873\u27e9\n    Use the first format if `De/Serializer::is_human_readable`\u27e874\u27e9, otherwise use the second\n\nKeyValueMap\u27e875\u27e9\n    Convert `Vec` elements into key-value map entries\n\nMap\u27e876\u27e9\n    This serializes a list of tuples into a map\n\nMapFirstKeyWins\u27e877\u27e9\n    Ensure that the first key is taken, if duplicate keys exist\n\nMapPreventDuplicates\u27e878\u27e9\n    Ensure no duplicate keys exist in a map.\n\nMapSkipError\u27e879\u27e9\n    Deserialize a map, skipping keys and values which fail to deserialize.\n\nNoneAsEmptyString\u27e880\u27e9\n    De/Serialize a `Option<String>`\u27e881\u27e9 type while transforming the empty string to `None`\u27e882\u27e9\n\nOneOrMany\u27e883\u27e9\n    Deserialize one or many elements\n\nPickFirst\u27e884\u27e9\n    Try multiple deserialization options until one succeeds.\n\nSame\u27e885\u27e9\n    Adapter to convert from `serde_as` to the serde traits.\n\nSchema\u27e886\u27e9\n    Helper for implementing `JsonSchema`\u27e887\u27e9 on serializers whose output depends on the type of the concrete field.\n\nSeq\u27e888\u27e9\n    De/Serialize a Map into a list of tuples\n\nSetLastValueWins\u27e889\u27e9\n    Ensure that the last value is taken, if duplicate values exist\n\nSetPreventDuplicates\u27e890\u27e9\n    Ensure no duplicate values exist in a set.\n\nStringWithSeparator\u27e891\u27e9\n    De/Serialize a delimited collection using `Display`\u27e860\u27e9 and `FromStr`\u27e861\u27e9 implementation\n\nTimestampMicroSeconds\u27e892\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with micro-seconds as base unit.\n\nTimestampMicroSecondsWithFrac\u27e894\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with micro-seconds as base unit.\n\nTimestampMilliSeconds\u27e896\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with milli-seconds as base unit.\n\nTimestampMilliSecondsWithFrac\u27e897\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with milli-seconds as base unit.\n\nTimestampNanoSeconds\u27e898\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with nano-seconds as base unit.\n\nTimestampNanoSecondsWithFrac\u27e899\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with nano-seconds as base unit.\n\nTimestampSeconds\u27e893\u27e9\n    De/Serialize timestamps as seconds since the UNIX epoch\n\nTimestampSecondsWithFrac\u27e895\u27e9\n    De/Serialize timestamps as seconds since the UNIX epoch\n\nTryFromInto\u27e8100\u27e9\n    Serialize value by converting to/from a proxy type with serde support.\n\nTryFromIntoRef\u27e8101\u27e9\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\nVecSkipError\u27e8102\u27e9\n    Deserialize a sequence into `Vec<T>`, skipping elements which fail to deserialize.\n## Traits\u00a7\u27e8103\u27e9\n\nDeserializeAs\u27e833\u27e9\n    A **data structure** that can be deserialized from any data format supported by Serde, analogue to `Deserialize`\u27e8104\u27e9.\n\nSerializeAs\u27e842\u27e9\n    A **data structure** that can be serialized into any data format supported by Serde, analogue to `Serialize`\u27e8105\u27e9.\n## Attribute Macros\u00a7\u27e8106\u27e9\n\napply\u27e8107\u27e9`macros`\n    Apply attributes to all fields with matching types\n\nserde_as\u27e8108\u27e9`macros`\n    Convenience macro to use the `serde_as`\u27e817\u27e9 system.\n\nskip_serializing_none\u27e8109\u27e9`macros`\n    Add `skip_serializing_if` annotations to [`Option`] fields.\n## Derive Macros\u00a7\u27e8110\u27e9\n\nDeserializeFromStr\u27e8111\u27e9`macros`\n    Deserialize value by using its `FromStr`\u27e8112\u27e9 implementation\n\nSerializeDisplay\u27e8113\u27e9`macros`\n    Serialize value by using it\u2019s `Display`\u27e8114\u27e9 implementation\n\nSerializeDisplayAlt\u27e8115\u27e9`macros`\n    Serialize value by using its `Display`\u27e8114\u27e9 implementation with the \u201calternate\u201d (`#`) format flag\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_with/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_with/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_with/latest/src/serde_with/lib.rs.html#1-2603: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/serde_with.svg: ![crates.io badge\n\u27e85\u27e9 https://github.com/jonasbb/serde_with/actions/workflows/ci.yaml/badge.svg: ![Build Status\n\u27e86\u27e9 https://codecov.io/gh/jonasbb/serde_with/branch/master/graph/badge.svg: ![codecov\n\u27e87\u27e9 https://bestpractices.coreinfrastructure.org/projects/4322/badge: ![CII Best Practices\n\u27e88\u27e9 https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange: ![Rustexplorer\n\u27e89\u27e9 https://serde.rs/field-attrs.html#with: serde\u2019s `with` annotation\n\u27e810\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/serde_as/index.html: `serde_as`\n\u27e811\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/struct.DisplayFromStr.html: `DisplayFromStr`\n\u27e812\u27e9 https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays: this examples shows\n\u27e813\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/macro.with_prefix.html: `with_prefix!`\n\u27e814\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/macro.with_suffix.html: `with_suffix!`\n\u27e815\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/struct.StringWithSeparator.html: `serde_with::StringWithSeparator::<CommaSeparator, T>`\n\u27e816\u27e9 https://docs.rs/serde_with/latest/serde_with/#getting-help: \u00a7\n\u27e817\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html: user guide\n\u27e818\u27e9 https://github.com/jonasbb/serde_with/discussions/new: open a new discussion\n\u27e819\u27e9 https://users.rust-lang.org/: users.rust-lang.org\n\u27e820\u27e9 https://github.com/jonasbb/serde_with/issues/new: new issue\n\u27e821\u27e9 https://docs.rs/serde_with/latest/serde_with/#use-serde_with-in-your-project: \u00a7\n\u27e822\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/feature_flags/index.html: feature flags\n\u27e823\u27e9 https://docs.rs/serde_with/latest/serde_with/#examples: \u00a7\n\u27e824\u27e9 https://docs.rs/serde_with/latest/serde_with/#displayfromstr: \u00a7\n\u27e825\u27e9 https://docs.rs/serde_with/latest/serde_with/#skip_serializing_none: \u00a7\n\u27e826\u27e9 https://docs.rs/serde_with/latest/serde_with/#advanced-serde_as-usage: \u00a7\n\u27e827\u27e9 https://docs.rs/serde_with/latest/serde_with/#modules: \u00a7\n\u27e828\u27e9 https://docs.rs/serde_with/latest/serde_with/base64/index.html: mod serde_with::base64 - base64\n\u27e829\u27e9 https://docs.rs/serde_with/latest/serde_with/chrono/index.html: mod serde_with::chrono - chrono\n\u27e830\u27e9 https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html: mod serde_with::chrono_0_4 - `chrono_0_4`\n\u27e831\u27e9 https://docs.rs/chrono/: chrono\n\u27e832\u27e9 https://docs.rs/serde_with/latest/serde_with/de/index.html: mod serde_with::de - de\n\u27e833\u27e9 https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html: trait serde_with::DeserializeAs - `DeserializeAs`\n\u27e834\u27e9 https://docs.rs/serde_with/latest/serde_with/formats/index.html: mod serde_with::formats - formats\n\u27e835\u27e9 https://docs.rs/serde_with/latest/serde_with/guide/index.html: mod serde_with::guide - guide\n\u27e836\u27e9 https://docs.rs/serde_with/latest/serde_with/hex/index.html: mod serde_with::hex - hex\n\u27e837\u27e9 https://docs.rs/serde_with/latest/serde_with/json/index.html: mod serde_with::json - json\n\u27e838\u27e9 https://docs.rs/serde_with/latest/serde_with/rust/index.html: mod serde_with::rust - rust\n\u27e839\u27e9 https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html: mod serde_with::schemars_0_8 - schemars_0_8\n\u27e840\u27e9 https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html: mod serde_with::schemars_0_9 - schemars_0_9\n\u27e841\u27e9 https://docs.rs/serde_with/latest/serde_with/ser/index.html: mod serde_with::ser - ser\n\u27e842\u27e9 https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html: trait serde_with::SerializeAs - `SerializeAs`\n\u27e843\u27e9 https://docs.rs/serde_with/latest/serde_with/time_0_3/index.html: mod serde_with::time_0_3 - time_0_3\n\u27e844\u27e9 https://docs.rs/time/0.3/: time v0.3\n\u27e845\u27e9 https://docs.rs/serde_with/latest/serde_with/#macros: \u00a7\n\u27e846\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.flattened_maybe.html: macro serde_with::flattened_maybe - flattened_maybe\n\u27e847\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.serde_conv.html: macro serde_with::serde_conv - serde_conv\n\u27e848\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.with_prefix.html: macro serde_with::with_prefix - with_prefix\n\u27e849\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.with_suffix.html: macro serde_with::with_suffix - with_suffix\n\u27e850\u27e9 https://docs.rs/serde_with/latest/serde_with/#structs: \u00a7\n\u27e851\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.As.html: struct serde_with::As - As\n\u27e852\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BoolFromInt.html: struct serde_with::BoolFromInt - BoolFromInt\n\u27e853\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BorrowCow.html: struct serde_with::BorrowCow - BorrowCow\n\u27e854\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Bytes.html: struct serde_with::Bytes - Bytes\n\u27e855\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BytesOrString.html: struct serde_with::BytesOrString - BytesOrString\n\u27e856\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnError.html: struct serde_with::DefaultOnError - DefaultOnError\n\u27e857\u27e9 https://doc.rust-lang.org/core/default/trait.Default.html: trait core::default::Default - `Default`\n\u27e858\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnNull.html: struct serde_with::DefaultOnNull - DefaultOnNull\n\u27e859\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DisplayFromStr.html: struct serde_with::DisplayFromStr - DisplayFromStr\n\u27e860\u27e9 https://doc.rust-lang.org/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e861\u27e9 https://doc.rust-lang.org/core/str/traits/trait.FromStr.html: trait core::str::traits::FromStr - `FromStr`\n\u27e862\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSeconds.html: struct serde_with::DurationMicroSeconds - DurationMicroSeconds\n\u27e863\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html: struct serde_with::DurationSeconds - `DurationSeconds`\n\u27e864\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSecondsWithFrac.html: struct serde_with::DurationMicroSecondsWithFrac - DurationMicroSecondsWithFrac\n\u27e865\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html: struct serde_with::DurationSecondsWithFrac - `DurationSecondsWithFrac`\n\u27e866\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSeconds.html: struct serde_with::DurationMilliSeconds - DurationMilliSeconds\n\u27e867\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSecondsWithFrac.html: struct serde_with::DurationMilliSecondsWithFrac - DurationMilliSecondsWithFrac\n\u27e868\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSeconds.html: struct serde_with::DurationNanoSeconds - DurationNanoSeconds\n\u27e869\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSecondsWithFrac.html: struct serde_with::DurationNanoSecondsWithFrac - DurationNanoSecondsWithFrac\n\u27e870\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.EnumMap.html: struct serde_with::EnumMap - EnumMap\n\u27e871\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.FromInto.html: struct serde_with::FromInto - FromInto\n\u27e872\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.FromIntoRef.html: struct serde_with::FromIntoRef - FromIntoRef\n\u27e873\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.IfIsHumanReadable.html: struct serde_with::IfIsHumanReadable - IfIsHumanReadable\n\u27e874\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serializer.html#method.is_human_readable: method serde::ser::Serializer::is_human_readable - `De/Serializer::is_human_readable`\n\u27e875\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.KeyValueMap.html: struct serde_with::KeyValueMap - KeyValueMap\n\u27e876\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Map.html: struct serde_with::Map - Map\n\u27e877\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapFirstKeyWins.html: struct serde_with::MapFirstKeyWins - MapFirstKeyWins\n\u27e878\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapPreventDuplicates.html: struct serde_with::MapPreventDuplicates - MapPreventDuplicates\n\u27e879\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapSkipError.html: struct serde_with::MapSkipError - MapSkipError\n\u27e880\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.NoneAsEmptyString.html: struct serde_with::NoneAsEmptyString - NoneAsEmptyString\n\u27e881\u27e9 https://doc.rust-lang.org/core/option/enum.Option.html: enum core::option::Option - `Option<String>`\n\u27e882\u27e9 https://doc.rust-lang.org/core/option/enum.Option.html#variant.None: variant core::option::Option::None - `None`\n\u27e883\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.OneOrMany.html: struct serde_with::OneOrMany - OneOrMany\n\u27e884\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.PickFirst.html: struct serde_with::PickFirst - PickFirst\n\u27e885\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Same.html: struct serde_with::Same - Same\n\u27e886\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Schema.html: struct serde_with::Schema - Schema\n\u27e887\u27e9 https://docs.rs/schemars/0.9.0/x86_64-unknown-linux-gnu/schemars/trait.JsonSchema.html: trait schemars::JsonSchema - `JsonSchema`\n\u27e888\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Seq.html: struct serde_with::Seq - Seq\n\u27e889\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.SetLastValueWins.html: struct serde_with::SetLastValueWins - SetLastValueWins\n\u27e890\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.SetPreventDuplicates.html: struct serde_with::SetPreventDuplicates - SetPreventDuplicates\n\u27e891\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.StringWithSeparator.html: struct serde_with::StringWithSeparator - StringWithSeparator\n\u27e892\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSeconds.html: struct serde_with::TimestampMicroSeconds - TimestampMicroSeconds\n\u27e893\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html: struct serde_with::TimestampSeconds - `TimestampSeconds`\n\u27e894\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSecondsWithFrac.html: struct serde_with::TimestampMicroSecondsWithFrac - TimestampMicroSecondsWithFrac\n\u27e895\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html: struct serde_with::TimestampSecondsWithFrac - `TimestampSecondsWithFrac`\n\u27e896\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSeconds.html: struct serde_with::TimestampMilliSeconds - TimestampMilliSeconds\n\u27e897\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSecondsWithFrac.html: struct serde_with::TimestampMilliSecondsWithFrac - TimestampMilliSecondsWithFrac\n\u27e898\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSeconds.html: struct serde_with::TimestampNanoSeconds - TimestampNanoSeconds\n\u27e899\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSecondsWithFrac.html: struct serde_with::TimestampNanoSecondsWithFrac - TimestampNanoSecondsWithFrac\n\u27e8100\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TryFromInto.html: struct serde_with::TryFromInto - TryFromInto\n\u27e8101\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TryFromIntoRef.html: struct serde_with::TryFromIntoRef - TryFromIntoRef\n\u27e8102\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.VecSkipError.html: struct serde_with::VecSkipError - VecSkipError\n\u27e8103\u27e9 https://docs.rs/serde_with/latest/serde_with/#traits: \u00a7\n\u27e8104\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e8105\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e8106\u27e9 https://docs.rs/serde_with/latest/serde_with/#attributes: \u00a7\n\u27e8107\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.apply.html: attr serde_with::apply - apply\n\u27e8108\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.serde_as.html: attr serde_with::serde_as - serde_as\n\u27e8109\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.skip_serializing_none.html: attr serde_with::skip_serializing_none - skip_serializing_none\n\u27e8110\u27e9 https://docs.rs/serde_with/latest/serde_with/#derives: \u00a7\n\u27e8111\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.DeserializeFromStr.html: derive serde_with::DeserializeFromStr - DeserializeFromStr\n\u27e8112\u27e9 std::str::FromStr: `FromStr`\n\u27e8113\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplay.html: derive serde_with::SerializeDisplay - SerializeDisplay\n\u27e8114\u27e9 std::fmt::Display: `Display`\n\u27e8115\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplayAlt.html: derive serde_with::SerializeDisplayAlt - SerializeDisplayAlt\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `serde_with` crate enhances Serde with custom serialization and deserialization helpers, including the `serde_as` annotation for advanced type conversions. Key features include support for large and const-generic arrays, skipping empty `Option` fields, prefix/suffix field name adjustments, and handling formats like `DisplayFromStr` or delimited collections. It also integrates with popular crates like `chrono`, `time`, and `serde_bytes` for specialized data handling.",
    "feature_summary": null,
    "use_case": "Serialization",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: `serde_as` Attribute for Complex Serialization\n\u2705 **Factual**: The `serde_as` attribute in `serde_with` allows serialization and deserialization of complex nested types, such as `Box<[[u8; 64]; N]>` and `Option<[u8; M]>`, circumventing Serde's limitation on arrays larger than 32 elements.  \n\u274c **Counterfactual**: The `serde_as` attribute only supports basic types like `u8` and `String` and cannot handle nested or large arrays.\n\n---\n\n### Pair 2: `skip_serializing_none` for Optional Fields\n\u2705 **Factual**: The `#[skip_serializing_none]` attribute in `serde_with` automatically skips serializing `Option` fields with `None` values, reducing the size of serialized output for formats like JSON.  \n\u274c **Counterfactual**: The `#[skip_serializing_none]` attribute serializes `Option` fields with `None` values as empty strings instead of skipping them entirely.\n\n---\n\n### Pair 3: Custom Serialization with `DisplayFromStr`\n\u2705 **Factual**: The `DisplayFromStr` adapter in `serde_with` enables serialization using the `Display` trait and deserialization using the `FromStr` trait, making it ideal for types like `url::Url` and `mime::Mime`.  \n\u274c **Counterfactual**: The `DisplayFromStr`",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}