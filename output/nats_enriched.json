{
    "name": "nats",
    "version": "0.25.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/nats/latest/nats/all.html \"show sidebar\")\n[?](https://docs.rs/nats/latest/help.html \"help\")\n[Settings](https://docs.rs/nats/latest/settings.html \"settings\")\n# Crate [nats](https://docs.rs/nats/latest/nats/)Copy item path\n[source](https://docs.rs/nats/latest/src/nats/lib.rs.html#14-916) \u00b7 [\u2212]\nExpand description\nA Rust client for the NATS.io ecosystem.\nThis is the old legacy client. It will not get new features or updates beyond critical security fixes. Use [async-nats](https://crates.io/crates/async-nats) instead. \n`git clone https://github.com/nats-io/nats.rs`\nNATS.io is a simple, secure and high performance open source messaging system for cloud native applications, `IoT` messaging, and microservices architectures.\nFor async API refer to the [`asynk`](https://docs.rs/nats/latest/nats/asynk/index.html \"mod nats::asynk\") module.\nFor more information see <https://nats.io/>.\n### [\u00a7](https://docs.rs/nats/latest/nats/#examples)Examples\n`> cargo run --example nats-box -- -h`\nBasic connections, and those with options. The compiler will force these to be correct.\n```\nlet nc = nats::connect(\"demo.nats.io\")?;\nlet nc2 = nats::Options::with_user_pass(\"derek\", \"s3cr3t!\")\n  .with_name(\"My Rust NATS App\")\n  .connect(\"127.0.0.1\")?;\nlet nc3 = nats::Options::with_credentials(\"path/to/my.creds\").connect(\"connect.ngs.global\")?;\nlet nc4 = nats::Options::new()\n  .add_root_certificate(\"my-certs.pem\")\n  .connect(\"tls://demo.nats.io:4443\")?;\n```\n\n#### [\u00a7](https://docs.rs/nats/latest/nats/#publish)Publish\n```\nlet nc = nats::connect(\"demo.nats.io\")?;\nnc.publish(\"my.subject\", \"Hello World!\")?;\nnc.publish(\"my.subject\", \"my message\")?;\n// Publish a request manually.\nlet reply = nc.new_inbox();\nlet rsub = nc.subscribe(&reply)?;\nnc.publish_request(\"my.subject\", &reply, \"Help me!\")?;\n```\n\n#### [\u00a7](https://docs.rs/nats/latest/nats/#subscribe)Subscribe\n```\nlet nc = nats::connect(\"demo.nats.io\")?;\nlet sub = nc.subscribe(\"foo\")?;\nfor msg in sub.messages() {}\n// Using next.\nif let Some(msg) = sub.next() {}\n// Other iterators.\nfor msg in sub.try_iter() {}\nfor msg in sub.timeout_iter(Duration::from_secs(10)) {}\n// Using a threaded handler.\nlet sub = nc.subscribe(\"bar\")?.with_handler(move |msg| {\n  println!(\"Received {}\", &msg);\n  Ok(())\n});\n// Queue subscription.\nlet qsub = nc.queue_subscribe(\"foo\", \"my_group\")?;\n```\n\n#### [\u00a7](https://docs.rs/nats/latest/nats/#requestresponse)Request/Response\n```\nlet nc = nats::connect(\"demo.nats.io\")?;\nlet resp = nc.request(\"foo\", \"Help me?\")?;\n// With a timeout.\nlet resp = nc.request_timeout(\"foo\", \"Help me?\", Duration::from_secs(2))?;\n// With multiple responses.\nfor msg in nc.request_multi(\"foo\", \"Help\")?.iter() {}\n// Publish a request manually.\nlet reply = nc.new_inbox();\nlet rsub = nc.subscribe(&reply)?;\nnc.publish_request(\"foo\", &reply, \"Help me!\")?;\nlet response = rsub.iter().take(1);\n```\n\n## Re-exports[\u00a7](https://docs.rs/nats/latest/nats/#reexports)\n  * `pub use header::HeaderMap[](https://docs.rs/nats/latest/nats/header/struct.HeaderMap.html \"struct nats::header::HeaderMap\");`\n  * `pub use jetstream::JetStreamOptions[](https://docs.rs/nats/latest/nats/jetstream/struct.JetStreamOptions.html \"struct nats::jetstream::JetStreamOptions\");`\n  * `pub use rustls[](https://docs.rs/rustls/0.22.3/x86_64-unknown-linux-gnu/rustls/index.html \"mod rustls\");`\n\n\n## Modules[\u00a7](https://docs.rs/nats/latest/nats/#modules)\n  * [asynk](https://docs.rs/nats/latest/nats/asynk/index.html \"mod nats::asynk\")\nAsync-enabled NATS client. An async Rust client for the NATS.io ecosystem.\n  * [header](https://docs.rs/nats/latest/nats/header/index.html \"mod nats::header\")\nHeader constants and types.\n  * [jetstream](https://docs.rs/nats/latest/nats/jetstream/index.html \"mod nats::jetstream\")\n`JetStream` stream management and consumers. Support for the `JetStream` at-least-once messaging system.\n  * [kv](https://docs.rs/nats/latest/nats/kv/index.html \"mod nats::kv\")`unstable`\nSupport for Key Value Store. This feature is experimental and the API may change.\n  * [object_store](https://docs.rs/nats/latest/nats/object_store/index.html \"mod nats::object_store\")`unstable`\nSupport for Object Store. This feature is experimental and the API may change.\n\n\n## Structs[\u00a7](https://docs.rs/nats/latest/nats/#structs)\n  * [Connection](https://docs.rs/nats/latest/nats/struct.Connection.html \"struct nats::Connection\")\nA NATS connection.\n  * [Handler](https://docs.rs/nats/latest/nats/struct.Handler.html \"struct nats::Handler\")\nA `Handler` may be used to unsubscribe a handler thread.\n  * [Message](https://docs.rs/nats/latest/nats/struct.Message.html \"struct nats::Message\")\nA message received on a subject.\n  * [Options](https://docs.rs/nats/latest/nats/struct.Options.html \"struct nats::Options\")\nConnect options.\n  * [ServerAddress](https://docs.rs/nats/latest/nats/struct.ServerAddress.html \"struct nats::ServerAddress\")\nAddress of a NATS server.\n  * [ServerInfo](https://docs.rs/nats/latest/nats/struct.ServerInfo.html \"struct nats::ServerInfo\")\nInformation sent by the server back to this client during initial connection, and possibly again later.\n  * [Subscription](https://docs.rs/nats/latest/nats/struct.Subscription.html \"struct nats::Subscription\")\nA `Subscription` receives `Message`s published to specific NATS `Subject`s.\n\n\n## Traits[\u00a7](https://docs.rs/nats/latest/nats/#traits)\n  * [IntoServerList](https://docs.rs/nats/latest/nats/trait.IntoServerList.html \"trait nats::IntoServerList\")\nCapability to convert into a list of NATS server addresses.\n\n\n## Functions[\u00a7](https://docs.rs/nats/latest/nats/#functions)\n  * [connect](https://docs.rs/nats/latest/nats/fn.connect.html \"fn nats::connect\")\nConnect to one or more NATS servers at the given URLs.\n\n\n",
        "markdown_with_citations": "[](https://docs.rs/nats/latest/nats/all.html \"show sidebar\")\n?\u27e81\u27e9\nSettings\u27e82\u27e9\n# Crate nats\u27e83\u27e9Copy item path\nsource\u27e84\u27e9 \u00b7 [\u2212]\nExpand description\nA Rust client for the NATS.io ecosystem.\nThis is the old legacy client. It will not get new features or updates beyond critical security fixes. Use async-nats\u27e85\u27e9 instead. \n`git clone https://github.com/nats-io/nats.rs`\nNATS.io is a simple, secure and high performance open source messaging system for cloud native applications, `IoT` messaging, and microservices architectures.\nFor async API refer to the `asynk`\u27e86\u27e9 module.\nFor more information see <https://nats.io/>.\n### \u00a7\u27e87\u27e9Examples\n`> cargo run --example nats-box -- -h`\nBasic connections, and those with options. The compiler will force these to be correct.\n```\nlet nc = nats::connect(\"demo.nats.io\")?;\nlet nc2 = nats::Options::with_user_pass(\"derek\", \"s3cr3t!\")\n  .with_name(\"My Rust NATS App\")\n  .connect(\"127.0.0.1\")?;\nlet nc3 = nats::Options::with_credentials(\"path/to/my.creds\").connect(\"connect.ngs.global\")?;\nlet nc4 = nats::Options::new()\n  .add_root_certificate(\"my-certs.pem\")\n  .connect(\"tls://demo.nats.io:4443\")?;\n```\n\n#### \u00a7\u27e88\u27e9Publish\n```\nlet nc = nats::connect(\"demo.nats.io\")?;\nnc.publish(\"my.subject\", \"Hello World!\")?;\nnc.publish(\"my.subject\", \"my message\")?;\n// Publish a request manually.\nlet reply = nc.new_inbox();\nlet rsub = nc.subscribe(&reply)?;\nnc.publish_request(\"my.subject\", &reply, \"Help me!\")?;\n```\n\n#### \u00a7\u27e89\u27e9Subscribe\n```\nlet nc = nats::connect(\"demo.nats.io\")?;\nlet sub = nc.subscribe(\"foo\")?;\nfor msg in sub.messages() {}\n// Using next.\nif let Some(msg) = sub.next() {}\n// Other iterators.\nfor msg in sub.try_iter() {}\nfor msg in sub.timeout_iter(Duration::from_secs(10)) {}\n// Using a threaded handler.\nlet sub = nc.subscribe(\"bar\")?.with_handler(move |msg| {\n  println!(\"Received {}\", &msg);\n  Ok(())\n});\n// Queue subscription.\nlet qsub = nc.queue_subscribe(\"foo\", \"my_group\")?;\n```\n\n#### \u00a7\u27e810\u27e9Request/Response\n```\nlet nc = nats::connect(\"demo.nats.io\")?;\nlet resp = nc.request(\"foo\", \"Help me?\")?;\n// With a timeout.\nlet resp = nc.request_timeout(\"foo\", \"Help me?\", Duration::from_secs(2))?;\n// With multiple responses.\nfor msg in nc.request_multi(\"foo\", \"Help\")?.iter() {}\n// Publish a request manually.\nlet reply = nc.new_inbox();\nlet rsub = nc.subscribe(&reply)?;\nnc.publish_request(\"foo\", &reply, \"Help me!\")?;\nlet response = rsub.iter().take(1);\n```\n\n## Re-exports\u00a7\u27e811\u27e9\n  * `pub use header::HeaderMap[](https://docs.rs/nats/latest/nats/header/struct.HeaderMap.html \"struct nats::header::HeaderMap\");`\n  * `pub use jetstream::JetStreamOptions[](https://docs.rs/nats/latest/nats/jetstream/struct.JetStreamOptions.html \"struct nats::jetstream::JetStreamOptions\");`\n  * `pub use rustls[](https://docs.rs/rustls/0.22.3/x86_64-unknown-linux-gnu/rustls/index.html \"mod rustls\");`\n\n\n## Modules\u00a7\u27e812\u27e9\n  * asynk\u27e86\u27e9\nAsync-enabled NATS client. An async Rust client for the NATS.io ecosystem.\n  * header\u27e813\u27e9\nHeader constants and types.\n  * jetstream\u27e814\u27e9\n`JetStream` stream management and consumers. Support for the `JetStream` at-least-once messaging system.\n  * kv\u27e815\u27e9`unstable`\nSupport for Key Value Store. This feature is experimental and the API may change.\n  * object_store\u27e816\u27e9`unstable`\nSupport for Object Store. This feature is experimental and the API may change.\n\n\n## Structs\u00a7\u27e817\u27e9\n  * Connection\u27e818\u27e9\nA NATS connection.\n  * Handler\u27e819\u27e9\nA `Handler` may be used to unsubscribe a handler thread.\n  * Message\u27e820\u27e9\nA message received on a subject.\n  * Options\u27e821\u27e9\nConnect options.\n  * ServerAddress\u27e822\u27e9\nAddress of a NATS server.\n  * ServerInfo\u27e823\u27e9\nInformation sent by the server back to this client during initial connection, and possibly again later.\n  * Subscription\u27e824\u27e9\nA `Subscription` receives `Message`s published to specific NATS `Subject`s.\n\n\n## Traits\u00a7\u27e825\u27e9\n  * IntoServerList\u27e826\u27e9\nCapability to convert into a list of NATS server addresses.\n\n\n## Functions\u00a7\u27e827\u27e9\n  * connect\u27e828\u27e9\nConnect to one or more NATS servers at the given URLs.\n\n\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/nats/latest/help.html: help - ?\n\u27e82\u27e9 https://docs.rs/nats/latest/settings.html: settings - Settings\n\u27e83\u27e9 https://docs.rs/nats/latest/nats/: nats\n\u27e84\u27e9 https://docs.rs/nats/latest/src/nats/lib.rs.html#14-916: source\n\u27e85\u27e9 https://crates.io/crates/async-nats: async-nats\n\u27e86\u27e9 https://docs.rs/nats/latest/nats/asynk/index.html: mod nats::asynk - `asynk`\n\u27e87\u27e9 https://docs.rs/nats/latest/nats/#examples: \u00a7\n\u27e88\u27e9 https://docs.rs/nats/latest/nats/#publish: \u00a7\n\u27e89\u27e9 https://docs.rs/nats/latest/nats/#subscribe: \u00a7\n\u27e810\u27e9 https://docs.rs/nats/latest/nats/#requestresponse: \u00a7\n\u27e811\u27e9 https://docs.rs/nats/latest/nats/#reexports: \u00a7\n\u27e812\u27e9 https://docs.rs/nats/latest/nats/#modules: \u00a7\n\u27e813\u27e9 https://docs.rs/nats/latest/nats/header/index.html: mod nats::header - header\n\u27e814\u27e9 https://docs.rs/nats/latest/nats/jetstream/index.html: mod nats::jetstream - jetstream\n\u27e815\u27e9 https://docs.rs/nats/latest/nats/kv/index.html: mod nats::kv - kv\n\u27e816\u27e9 https://docs.rs/nats/latest/nats/object_store/index.html: mod nats::object_store - object_store\n\u27e817\u27e9 https://docs.rs/nats/latest/nats/#structs: \u00a7\n\u27e818\u27e9 https://docs.rs/nats/latest/nats/struct.Connection.html: struct nats::Connection - Connection\n\u27e819\u27e9 https://docs.rs/nats/latest/nats/struct.Handler.html: struct nats::Handler - Handler\n\u27e820\u27e9 https://docs.rs/nats/latest/nats/struct.Message.html: struct nats::Message - Message\n\u27e821\u27e9 https://docs.rs/nats/latest/nats/struct.Options.html: struct nats::Options - Options\n\u27e822\u27e9 https://docs.rs/nats/latest/nats/struct.ServerAddress.html: struct nats::ServerAddress - ServerAddress\n\u27e823\u27e9 https://docs.rs/nats/latest/nats/struct.ServerInfo.html: struct nats::ServerInfo - ServerInfo\n\u27e824\u27e9 https://docs.rs/nats/latest/nats/struct.Subscription.html: struct nats::Subscription - Subscription\n\u27e825\u27e9 https://docs.rs/nats/latest/nats/#traits: \u00a7\n\u27e826\u27e9 https://docs.rs/nats/latest/nats/trait.IntoServerList.html: trait nats::IntoServerList - IntoServerList\n\u27e827\u27e9 https://docs.rs/nats/latest/nats/#functions: \u00a7\n\u27e828\u27e9 https://docs.rs/nats/latest/nats/fn.connect.html: fn nats::connect - connect\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `nats` crate is a legacy Rust client for the NATS.io messaging system, offering simple, secure, and high-performance communication for cloud-native applications, IoT, and microservices. It supports basic connection management, publishing, subscribing, and request-response patterns, with additional features like JetStream for at-least-once messaging and experimental support for key-value and object stores. Note that this crate is deprecated in favor of `async-nats` for modern async functionality.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 5.0,
    "factual_counterfactual": "### Pair 1: Connection Options  \n\u2705 **Factual:** The `nats` crate allows connections to NATS servers with various authentication methods, including username/password, credentials files, and TLS certificates.  \n\u274c **Counterfactual:** The `nats` crate only supports unauthenticated connections to NATS servers and does not provide options for secure authentication.  \n\n---\n\n### Pair 2: Legacy Status  \n\u2705 **Factual:** The `nats` crate is a legacy client that only receives critical security updates and does not support new features; users are encouraged to use the `async-nats` crate for modern functionality.  \n\u274c **Counterfactual:** The `nats` crate is actively developed and regularly receives new features to support the latest advancements in the NATS.io ecosystem.  \n\n---\n\n### Pair 3: JetStream Support  \n\u2705 **Factual:** The `nats` crate includes support for JetStream, an at-least-once messaging system, through the `jetstream` module.  \n\u274c **Counterfactual:** The `nats` crate does not support JetStream and requires third-party crates to interact with JetStream functionality.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}