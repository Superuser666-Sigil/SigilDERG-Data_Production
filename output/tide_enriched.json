{
    "name": "tide",
    "version": "0.17.0-beta.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/tide/latest/tide/all.html \"show sidebar\")\n# Crate tideCopy item path\n[Settings](https://docs.rs/tide/latest/settings.html)\n[Help](https://docs.rs/tide/latest/help.html)\nSummary[Source](https://docs.rs/tide/latest/src/tide/lib.rs.html#1-159)\nExpand description\nTide is a minimal and pragmatic Rust web application framework built for rapid development. It comes with a robust set of features that make building async web applications and APIs easier and more fun.\n## [\u00a7](https://docs.rs/tide/latest/tide/#getting-started)Getting started\nIn order to build a web app in Rust you need an HTTP server, and an async runtime. After running `cargo init` add the following lines to your `Cargo.toml` file:\n```\n# Example, use the version numbers you need\ntide = \"0.14.0\"\nasync-std = { version = \"1.6.0\", features = [\"attributes\"] }\nserde = { version = \"1.0\", features = [\"derive\"] }\n```\n\n## [\u00a7](https://docs.rs/tide/latest/tide/#examples)Examples\nCreate an HTTP server that receives a JSON body, validates it, and responds with a confirmation message.\n```\nuse tide::Request;\nuse tide::prelude::*;\n#[derive(Debug, Deserialize)]\nstruct Animal {\n  name: String,\n  legs: u8,\n}\n#[async_std::main]\nasync fn main() -> tide::Result<()> {\n  let mut app = tide::new();\n  app.at(\"/orders/shoes\").post(order_shoes);\n  app.listen(\"127.0.0.1:8080\").await?;\n  Ok(())\n}\nasync fn order_shoes(mut req: Request<()>) -> tide::Result {\n  let Animal { name, legs } = req.body_json().await?;\n  Ok(format!(\"Hello, {}! I've put in an order for {} shoes\", name, legs).into())\n}\n```\n\n```\n$ curl localhost:8080/orders/shoes -d '{ \"name\": \"Chashu\", \"legs\": 4 }'\nHello, Chashu! I've put in an order for 4 shoes\n$ curl localhost:8080/orders/shoes -d '{ \"name\": \"Mary Millipede\", \"legs\": 750 }'\nnumber too large to fit in target type\n```\n\nSee more examples in the [examples](https://github.com/http-rs/tide/tree/main/examples) directory.\n## Re-exports[\u00a7](https://docs.rs/tide/latest/tide/#reexports)\n\n`pub use http_types[](https://docs.rs/http-types/2.12.0/x86_64-unknown-linux-gnu/http_types/index.html \"mod http_types\") as http;`\n\n## Modules[\u00a7](https://docs.rs/tide/latest/tide/#modules)\n\n[convert](https://docs.rs/tide/latest/tide/convert/index.html \"mod tide::convert\")\n    Traits for conversions between types.\n\n[listener](https://docs.rs/tide/latest/tide/listener/index.html \"mod tide::listener\")\n    Types that represent HTTP transports and binding\n\n[log](https://docs.rs/tide/latest/tide/log/index.html \"mod tide::log\")\n    Event logging types.\n\n[prelude](https://docs.rs/tide/latest/tide/prelude/index.html \"mod tide::prelude\")\n    The Tide prelude.\n\n[security](https://docs.rs/tide/latest/tide/security/index.html \"mod tide::security\")\n    HTTP Security Headers.\n\n[sessions](https://docs.rs/tide/latest/tide/sessions/index.html \"mod tide::sessions\")\n    Tide session support\n\n[sse](https://docs.rs/tide/latest/tide/sse/index.html \"mod tide::sse\")\n    Server-Sent Events (SSE) types.\n\n[utils](https://docs.rs/tide/latest/tide/utils/index.html \"mod tide::utils\")\n    Miscellaneous utilities.\n## Structs[\u00a7](https://docs.rs/tide/latest/tide/#structs)\n\n[Body](https://docs.rs/tide/latest/tide/struct.Body.html \"struct tide::Body\")\n    A streaming HTTP body.\n\n[Error](https://docs.rs/tide/latest/tide/struct.Error.html \"struct tide::Error\")\n    The error type for HTTP operations.\n\n[Next](https://docs.rs/tide/latest/tide/struct.Next.html \"struct tide::Next\")\n    The remainder of a middleware chain, including the endpoint.\n\n[Redirect](https://docs.rs/tide/latest/tide/struct.Redirect.html \"struct tide::Redirect\")\n    A redirection endpoint.\n\n[Request](https://docs.rs/tide/latest/tide/struct.Request.html \"struct tide::Request\")\n    An HTTP request.\n\n[Response](https://docs.rs/tide/latest/tide/struct.Response.html \"struct tide::Response\")\n    An HTTP response\n\n[ResponseBuilder](https://docs.rs/tide/latest/tide/struct.ResponseBuilder.html \"struct tide::ResponseBuilder\")\n    Response Builder\n\n[Route](https://docs.rs/tide/latest/tide/struct.Route.html \"struct tide::Route\")\n    A handle to a route.\n\n[Server](https://docs.rs/tide/latest/tide/struct.Server.html \"struct tide::Server\")\n    An HTTP server.\n## Enums[\u00a7](https://docs.rs/tide/latest/tide/#enums)\n\n[StatusCode](https://docs.rs/tide/latest/tide/enum.StatusCode.html \"enum tide::StatusCode\")\n    HTTP response status codes.\n## Traits[\u00a7](https://docs.rs/tide/latest/tide/#traits)\n\n[Endpoint](https://docs.rs/tide/latest/tide/trait.Endpoint.html \"trait tide::Endpoint\")\n    An HTTP request handler.\n\n[Middleware](https://docs.rs/tide/latest/tide/trait.Middleware.html \"trait tide::Middleware\")\n    Middleware that wraps around the remaining middleware chain.\n\n[Status](https://docs.rs/tide/latest/tide/trait.Status.html \"trait tide::Status\")\n    Provides the `status` method for `Result` and `Option`.\n## Functions[\u00a7](https://docs.rs/tide/latest/tide/#functions)\n\n[new](https://docs.rs/tide/latest/tide/fn.new.html \"fn tide::new\")\n    Create a new Tide server.\n\n[with_state](https://docs.rs/tide/latest/tide/fn.with_state.html \"fn tide::with_state\")\n    Create a new Tide server with shared application scoped state.\n## Type Aliases[\u00a7](https://docs.rs/tide/latest/tide/#types)\n\n[Result](https://docs.rs/tide/latest/tide/type.Result.html \"type tide::Result\")\n    A specialized Result type for Tide.\n",
        "markdown_with_citations": "[](https://docs.rs/tide/latest/tide/all.html \"show sidebar\")\n# Crate tideCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nTide is a minimal and pragmatic Rust web application framework built for rapid development. It comes with a robust set of features that make building async web applications and APIs easier and more fun.\n## \u00a7\u27e84\u27e9Getting started\nIn order to build a web app in Rust you need an HTTP server, and an async runtime. After running `cargo init` add the following lines to your `Cargo.toml` file:\n```\n# Example, use the version numbers you need\ntide = \"0.14.0\"\nasync-std = { version = \"1.6.0\", features = [\"attributes\"] }\nserde = { version = \"1.0\", features = [\"derive\"] }\n```\n\n## \u00a7\u27e85\u27e9Examples\nCreate an HTTP server that receives a JSON body, validates it, and responds with a confirmation message.\n```\nuse tide::Request;\nuse tide::prelude::*;\n#[derive(Debug, Deserialize)]\nstruct Animal {\n  name: String,\n  legs: u8,\n}\n#[async_std::main]\nasync fn main() -> tide::Result<()> {\n  let mut app = tide::new();\n  app.at(\"/orders/shoes\").post(order_shoes);\n  app.listen(\"127.0.0.1:8080\").await?;\n  Ok(())\n}\nasync fn order_shoes(mut req: Request<()>) -> tide::Result {\n  let Animal { name, legs } = req.body_json().await?;\n  Ok(format!(\"Hello, {}! I've put in an order for {} shoes\", name, legs).into())\n}\n```\n\n```\n$ curl localhost:8080/orders/shoes -d '{ \"name\": \"Chashu\", \"legs\": 4 }'\nHello, Chashu! I've put in an order for 4 shoes\n$ curl localhost:8080/orders/shoes -d '{ \"name\": \"Mary Millipede\", \"legs\": 750 }'\nnumber too large to fit in target type\n```\n\nSee more examples in the examples\u27e86\u27e9 directory.\n## Re-exports\u00a7\u27e87\u27e9\n\n`pub use http_types[](https://docs.rs/http-types/2.12.0/x86_64-unknown-linux-gnu/http_types/index.html \"mod http_types\") as http;`\n\n## Modules\u00a7\u27e88\u27e9\n\nconvert\u27e89\u27e9\n    Traits for conversions between types.\n\nlistener\u27e810\u27e9\n    Types that represent HTTP transports and binding\n\nlog\u27e811\u27e9\n    Event logging types.\n\nprelude\u27e812\u27e9\n    The Tide prelude.\n\nsecurity\u27e813\u27e9\n    HTTP Security Headers.\n\nsessions\u27e814\u27e9\n    Tide session support\n\nsse\u27e815\u27e9\n    Server-Sent Events (SSE) types.\n\nutils\u27e816\u27e9\n    Miscellaneous utilities.\n## Structs\u00a7\u27e817\u27e9\n\nBody\u27e818\u27e9\n    A streaming HTTP body.\n\nError\u27e819\u27e9\n    The error type for HTTP operations.\n\nNext\u27e820\u27e9\n    The remainder of a middleware chain, including the endpoint.\n\nRedirect\u27e821\u27e9\n    A redirection endpoint.\n\nRequest\u27e822\u27e9\n    An HTTP request.\n\nResponse\u27e823\u27e9\n    An HTTP response\n\nResponseBuilder\u27e824\u27e9\n    Response Builder\n\nRoute\u27e825\u27e9\n    A handle to a route.\n\nServer\u27e826\u27e9\n    An HTTP server.\n## Enums\u00a7\u27e827\u27e9\n\nStatusCode\u27e828\u27e9\n    HTTP response status codes.\n## Traits\u00a7\u27e829\u27e9\n\nEndpoint\u27e830\u27e9\n    An HTTP request handler.\n\nMiddleware\u27e831\u27e9\n    Middleware that wraps around the remaining middleware chain.\n\nStatus\u27e832\u27e9\n    Provides the `status` method for `Result` and `Option`.\n## Functions\u00a7\u27e833\u27e9\n\nnew\u27e834\u27e9\n    Create a new Tide server.\n\nwith_state\u27e835\u27e9\n    Create a new Tide server with shared application scoped state.\n## Type Aliases\u00a7\u27e836\u27e9\n\nResult\u27e837\u27e9\n    A specialized Result type for Tide.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tide/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tide/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tide/latest/src/tide/lib.rs.html#1-159: Source\n\u27e84\u27e9 https://docs.rs/tide/latest/tide/#getting-started: \u00a7\n\u27e85\u27e9 https://docs.rs/tide/latest/tide/#examples: \u00a7\n\u27e86\u27e9 https://github.com/http-rs/tide/tree/main/examples: examples\n\u27e87\u27e9 https://docs.rs/tide/latest/tide/#reexports: \u00a7\n\u27e88\u27e9 https://docs.rs/tide/latest/tide/#modules: \u00a7\n\u27e89\u27e9 https://docs.rs/tide/latest/tide/convert/index.html: mod tide::convert - convert\n\u27e810\u27e9 https://docs.rs/tide/latest/tide/listener/index.html: mod tide::listener - listener\n\u27e811\u27e9 https://docs.rs/tide/latest/tide/log/index.html: mod tide::log - log\n\u27e812\u27e9 https://docs.rs/tide/latest/tide/prelude/index.html: mod tide::prelude - prelude\n\u27e813\u27e9 https://docs.rs/tide/latest/tide/security/index.html: mod tide::security - security\n\u27e814\u27e9 https://docs.rs/tide/latest/tide/sessions/index.html: mod tide::sessions - sessions\n\u27e815\u27e9 https://docs.rs/tide/latest/tide/sse/index.html: mod tide::sse - sse\n\u27e816\u27e9 https://docs.rs/tide/latest/tide/utils/index.html: mod tide::utils - utils\n\u27e817\u27e9 https://docs.rs/tide/latest/tide/#structs: \u00a7\n\u27e818\u27e9 https://docs.rs/tide/latest/tide/struct.Body.html: struct tide::Body - Body\n\u27e819\u27e9 https://docs.rs/tide/latest/tide/struct.Error.html: struct tide::Error - Error\n\u27e820\u27e9 https://docs.rs/tide/latest/tide/struct.Next.html: struct tide::Next - Next\n\u27e821\u27e9 https://docs.rs/tide/latest/tide/struct.Redirect.html: struct tide::Redirect - Redirect\n\u27e822\u27e9 https://docs.rs/tide/latest/tide/struct.Request.html: struct tide::Request - Request\n\u27e823\u27e9 https://docs.rs/tide/latest/tide/struct.Response.html: struct tide::Response - Response\n\u27e824\u27e9 https://docs.rs/tide/latest/tide/struct.ResponseBuilder.html: struct tide::ResponseBuilder - ResponseBuilder\n\u27e825\u27e9 https://docs.rs/tide/latest/tide/struct.Route.html: struct tide::Route - Route\n\u27e826\u27e9 https://docs.rs/tide/latest/tide/struct.Server.html: struct tide::Server - Server\n\u27e827\u27e9 https://docs.rs/tide/latest/tide/#enums: \u00a7\n\u27e828\u27e9 https://docs.rs/tide/latest/tide/enum.StatusCode.html: enum tide::StatusCode - StatusCode\n\u27e829\u27e9 https://docs.rs/tide/latest/tide/#traits: \u00a7\n\u27e830\u27e9 https://docs.rs/tide/latest/tide/trait.Endpoint.html: trait tide::Endpoint - Endpoint\n\u27e831\u27e9 https://docs.rs/tide/latest/tide/trait.Middleware.html: trait tide::Middleware - Middleware\n\u27e832\u27e9 https://docs.rs/tide/latest/tide/trait.Status.html: trait tide::Status - Status\n\u27e833\u27e9 https://docs.rs/tide/latest/tide/#functions: \u00a7\n\u27e834\u27e9 https://docs.rs/tide/latest/tide/fn.new.html: fn tide::new - new\n\u27e835\u27e9 https://docs.rs/tide/latest/tide/fn.with_state.html: fn tide::with_state - with_state\n\u27e836\u27e9 https://docs.rs/tide/latest/tide/#types: \u00a7\n\u27e837\u27e9 https://docs.rs/tide/latest/tide/type.Result.html: type tide::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `tide` crate is a minimal and pragmatic Rust web framework designed for rapid development of asynchronous web applications and APIs. It provides features like routing, middleware support, JSON handling, HTTP security headers, session management, and Server-Sent Events (SSE). With a modular design and traits for extensibility, it simplifies building scalable and maintainable web servers.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 6.5,
    "factual_counterfactual": "### Pair 1: Async Runtime and HTTP Server  \n\u2705 **Factual**: Tide is designed to work seamlessly with asynchronous runtimes like `async-std`, enabling developers to build non-blocking web applications and APIs.  \n\u274c **Counterfactual**: Tide requires the `tokio` runtime for all asynchronous operations, and does not support `async-std`.  \n\n---\n\n### Pair 2: Middleware Support  \n\u2705 **Factual**: Tide provides built-in support for middleware, allowing developers to wrap request handlers with additional functionality such as logging, authentication, or error handling.  \n\u274c **Counterfactual**: Tide does not support middleware, requiring developers to implement all request-handling logic directly within endpoint functions.  \n\n---\n\n### Pair 3: JSON Handling  \n\u2705 **Factual**: Tide includes support for JSON serialization and deserialization via the `serde` crate, making it easy to handle structured data in HTTP requests and responses.  \n\u274c **Counterfactual**: Tide has built-in JSON handling capabilities without requiring external crates like `serde`.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}