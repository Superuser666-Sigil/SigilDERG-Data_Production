{
    "name": "curve25519-dalek",
    "version": "4.1.3",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/all.html \"show sidebar\")\n# Crate curve25519_dalekCopy item path\n[Settings](https://docs.rs/curve25519-dalek/latest/settings.html)\n[Help](https://docs.rs/curve25519-dalek/latest/help.html)\nSummary[Source](https://docs.rs/curve25519-dalek/latest/src/curve25519_dalek/lib.rs.html#12-113)\nExpand description\n## [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#curve25519-dalek---ci)curve25519-dalek [![](https://buildstats.info/crate/curve25519-dalek)](https://crates.io/crates/curve25519-dalek) [![](https://img.shields.io/docsrs/curve25519-dalek)](https://docs.rs/curve25519-dalek) [![CI](https://github.com/dalek-cryptography/curve25519-dalek/actions/workflows/curve25519-dalek.yml/badge.svg?branch=main)](https://github.com/dalek-cryptography/curve25519-dalek/actions/workflows/curve25519-dalek.yml)\n![dalek-cryptography logo: a dalek with edwards curves as sparkles coming out of its radar-schnozzley blaster thingies](https://cdn.jsdelivr.net/gh/dalek-cryptography/curve25519-dalek/docs/assets/dalek-logo-clear.png)\n**A pure-Rust implementation of group operations on Ristretto and Curve25519.**\n`curve25519-dalek` is a library providing group operations on the Edwards and Montgomery forms of Curve25519, and on the prime-order Ristretto group.\n`curve25519-dalek` is not intended to provide implementations of any particular crypto protocol. Rather, implementations of those protocols (such as [`x25519-dalek`](https://github.com/dalek-cryptography/curve25519-dalek/tree/main/x25519-dalek) and [`ed25519-dalek`](https://github.com/dalek-cryptography/curve25519-dalek/tree/main/ed25519-dalek)) should use `curve25519-dalek` as a library.\n`curve25519-dalek` is intended to provide a clean and safe _mid-level_ API for use implementing a wide range of ECC-based crypto protocols, such as key agreement, signatures, anonymous credentials, rangeproofs, and zero-knowledge proof systems.\nIn particular, `curve25519-dalek` implements Ristretto, which constructs a prime-order group from a non-prime-order Edwards curve. This provides the speed and safety benefits of Edwards curve arithmetic, without the pitfalls of cofactor-related abstraction mismatches.\n## [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#use)Use\n### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#stable)Stable\nTo import `curve25519-dalek`, add the following to the dependencies section of your project\u2019s `Cargo.toml`:\n```\ncurve25519-dalek = \"4\"\n```\n\nIf opting into [SemVer-exempted features](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#public-api-semver-exemptions) a range can be used to scope the tested compatible version range e.g.:\n```\ncurve25519-dalek = \">= 4.0, < 4.2\"\n```\n\n### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#feature-flags)Feature Flags\nFeature| Default?| Description  \n---|---|---  \n`alloc`| \u2713| Enables Edwards and Ristretto multiscalar multiplication, batch scalar inversion, and batch Ristretto double-and-compress. Also enables `zeroize`.  \n`zeroize`| \u2713| Enables [`Zeroize`](https://docs.rs/zeroize/latest/zeroize/trait.Zeroize.html) for all scalar and curve point types.  \n`precomputed-tables`| \u2713| Includes precomputed basepoint multiplication tables. This speeds up `EdwardsPoint::mul_base` and `RistrettoPoint::mul_base` by ~4x, at the cost of ~30KB added to the code size.  \n`rand_core`| | Enables `Scalar::random` and `RistrettoPoint::random`. This is an optional dependency whose version is not subject to SemVer. See [below](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#public-api-semver-exemptions) for more details.  \n`digest`| | Enables `RistrettoPoint::{from_hash, hash_from_bytes}` and `Scalar::{from_hash, hash_from_bytes}`. This is an optional dependency whose version is not subject to SemVer. See [below](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#public-api-semver-exemptions) for more details.  \n`serde`| | Enables `serde` serialization/deserialization for all the point and scalar types.  \n`legacy_compatibility`| | Enables `Scalar::from_bits`, which allows the user to build unreduced scalars whose arithmetic is broken. Do not use this unless you know what you\u2019re doing.  \n`group`| | Enables external `group` and `ff` crate traits  \nTo disable the default features when using `curve25519-dalek` as a dependency, add `default-features = false` to the dependency in your `Cargo.toml`. To disable it when running `cargo`, add the `--no-default-features` CLI flag.\n### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#major-version-api-changes)Major Version API Changes\nBreaking changes for each major version release can be found in [`CHANGELOG.md`](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/CHANGELOG.md), under the \u201cBreaking changes\u201d subheader. The latest breaking changes in high level are below:\n#### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#breaking-changes-in-400)Breaking changes in 4.0.0\n  * Update the MSRV from 1.41 to 1.60\n  * Provide SemVer policy\n  * Make `digest` and `rand_core` optional features\n  * Remove `std` and `nightly` features\n  * Replace backend selection - See [CHANGELOG.md](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/CHANGELOG.md) and [backends](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#backends)\n  * Replace methods `Scalar::{zero, one}` with constants `Scalar::{ZERO, ONE}`\n  * `Scalar::from_canonical_bytes` now returns `CtOption`\n  * `Scalar::is_canonical` now returns `Choice`\n  * Remove `Scalar::from_bytes_clamped` and `Scalar::reduce`\n  * Deprecate and feature-gate `Scalar::from_bits` behind `legacy_compatibility`\n  * Deprecate `EdwardsPoint::hash_from_bytes` and rename it `EdwardsPoint::nonspec_map_to_curve`\n  * Require including a new trait, `use curve25519_dalek::traits::BasepointTable` whenever using `EdwardsBasepointTable` or `RistrettoBasepointTable`\n\n\nThis release also does a lot of dependency updates and relaxations to unblock upstream build issues.\n## [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#backends)Backends\nCurve arithmetic is implemented and used by one of the following backends:\nBackend| Selection| Implementation| Bits / Word sizes  \n---|---|---|---  \n`serial`| Automatic| An optimized, non-parllel implementation| `32` and `64`  \n`fiat`| Manual| Formally verified field arithmetic from [fiat-crypto](https://github.com/mit-plv/fiat-crypto)| `32` and `64`  \n`simd`| Automatic| Intel AVX2 / AVX512 IFMA accelerated backend| `64` only  \nAt runtime, `curve25519-dalek` selects an arithmetic backend from the set of backends it was compiled to support. For Intel x86-64 targets, unless otherwise specified, it will build itself with `simd` support, and default to `serial` at runtime if the appropriate CPU features aren\u2019t detected. See [SIMD backend](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#simd-backend) for more details.\nIn the future, `simd` backend may be extended to cover more instruction sets. This change will be non-breaking as this is considered as implementation detail.\n### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#manual-backend-override)Manual Backend Override\nYou can force the crate to compile with specific backend support, e.g., `serial` for x86-64 targets to save code size, or `fiat` to force the runtime to use verified code. To do this, set the environment variable:\n```\nRUSTFLAGS='--cfg curve25519_dalek_backend=\"BACKEND\"'\n```\n\nEquivalently, you can write to `~/.cargo/config`:\n```\n[build]\nrustflags = ['--cfg=curve25519_dalek_backend=\"BACKEND\"']\n```\n\nMore info [here](https://doc.rust-lang.org/cargo/reference/config.html#buildrustflags).\nNote for contributors: The target backends are not entirely independent of each other. The [SIMD backend](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#simd-backend) directly depends on parts of the serial backend to function.\n### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#bits--word-size)Bits / Word size\n`curve25519-dalek` will automatically choose the word size for the `fiat` and `serial` backends, based on the build target. For example, building for a 64-bit machine, the default 64 bit word size is automatically chosen when either the `serial` or `fiat` backend is selected.\nIn some targets it might be required to override the word size for better performance. Backend word size can be overridden for `serial` and `fiat` by setting the environment variable:\n```\nRUSTFLAGS='--cfg curve25519_dalek_bits=\"SIZE\"'\n```\n\n`SIZE` is `32` or `64`. As in the above section, this can also be placed in `~/.cargo/config`.\nNote: The [SIMD backend](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#simd-backend) requires a word size of 64 bits. Attempting to set bits=32 and backend=`simd` will yield a compile error.\n#### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#cross-compilation)Cross-compilation\nBecause backend selection is done by target, cross-compiling will select the correct word size automatically. For example, if a x86-64 Linux machine runs the following commands, `curve25519-dalek` will be compiled with the 32-bit `serial` backend.\n```\n$ sudo apt install gcc-multilib # (or whatever package manager you use)\n$ rustup target add i686-unknown-linux-gnu\n$ cargo build --target i686-unknown-linux-gnu\n```\n\n### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#simd-backend)SIMD backend\nThe specific SIMD backend (AVX512 / AVX2 / `serial` default) is selected automatically at runtime, depending on the currently available CPU features, and whether Rust nightly is being used for compilation. The precise conditions are specified below.\nFor a given CPU feature, you can also specify an appropriate `-C target_feature` to build a binary which assumes the required SIMD instructions are always available. Don\u2019t do this if you don\u2019t have a good reason.\nBackend| `RUSTFLAGS`| Requires nightly?  \n---|---|---  \navx2| `-C target_feature=+avx2`| no  \navx512| `-C target_feature=+avx512ifma,+avx512vl`| yes  \nIf compiled on a non-nightly compiler, `curve25519-dalek` will not include AVX512 code, and therefore will never select it at runtime.\n## [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#documentation)Documentation\nThe semver-stable, public-facing `curve25519-dalek` API is documented [here](https://docs.rs/curve25519-dalek/).\n### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#building-docs-locally)Building Docs Locally\nThe `curve25519-dalek` documentation requires a custom HTML header to include KaTeX for math support. Unfortunately `cargo doc` does not currently support this, but docs can be built using\n```\nmake doc\n```\n\nfor regular docs, and\n```\nmake doc-internal\n```\n\nfor docs that include private items.\n## [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#maintenance-policies)Maintenance Policies\nAll on-by-default features of this library are covered by [semantic versioning](https://semver.org/spec/v2.0.0.html) (SemVer). SemVer exemptions are outlined below for MSRV and public API.\n### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#minimum-supported-rust-version)Minimum Supported Rust Version\nReleases| MSRV  \n---|---  \n4.x| 1.60.0  \n3.x| 1.41.0  \nFrom 4.x and on, MSRV changes will be accompanied by a minor version bump.\n### [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#public-api-semver-exemptions)Public API SemVer Exemptions\nBreaking changes to SemVer-exempted components affecting the public API will be accompanied by _some_ version bump. Below are the specific policies:\nReleases| Public API Component(s)| Policy  \n---|---|---  \n4.x| Dependencies `group`, `digest` and `rand_core`| Minor SemVer bump  \n## [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#safety)Safety\nThe `curve25519-dalek` types are designed to make illegal states unrepresentable. For example, any instance of an `EdwardsPoint` is guaranteed to hold a point on the Edwards curve, and any instance of a `RistrettoPoint` is guaranteed to hold a valid point in the Ristretto group.\nAll operations are implemented using constant-time logic (no secret-dependent branches, no secret-dependent memory accesses), unless specifically marked as being variable-time code. We believe that our constant-time logic is lowered to constant-time assembly, at least on `x86_64` targets.\nAs an additional guard against possible future compiler optimizations, the `subtle` crate places an optimization barrier before every conditional move or assignment. More details can be found in [the documentation for the `subtle` crate](https://docs.rs/subtle).\nSome functionality (e.g., multiscalar multiplication or batch inversion) requires heap allocation for temporary buffers. All heap-allocated buffers of potentially secret data are explicitly zeroed before release.\nHowever, we do not attempt to zero stack data, for two reasons. First, it\u2019s not possible to do so correctly: we don\u2019t have control over stack allocations, so there\u2019s no way to know how much data to wipe. Second, because `curve25519-dalek` provides a mid-level API, the correct place to start zeroing stack data is likely not at the entrypoints of `curve25519-dalek` functions, but at the entrypoints of functions in other crates.\nThe implementation is memory-safe, and contains no significant `unsafe` code. The SIMD backend uses `unsafe` internally to call SIMD intrinsics. These are marked `unsafe` only because invoking them on an inappropriate CPU would cause `SIGILL`, but the entire backend is only invoked when the appropriate CPU features are detected at runtime, or when the whole program is compiled with the appropriate `target_feature`s.\n## [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#performance)Performance\nBenchmarks are run using [`criterion.rs`](https://github.com/japaric/criterion.rs):\n```\ncargo bench --features \"rand_core\"\nexport RUSTFLAGS='-C target_cpu=native'\ncargo +nightly bench --features \"rand_core\"\n```\n\nPerformance is a secondary goal behind correctness, safety, and clarity, but we aim to be competitive with other implementations.\n## [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#ffi)FFI\nUnfortunately, we have no plans to add FFI to `curve25519-dalek` directly. The reason is that we use Rust features to provide an API that maintains safety invariants, which are not possible to maintain across an FFI boundary. For instance, as described in the _Safety_ section above, invalid points are impossible to construct, and this would not be the case if we exposed point operations over FFI.\nHowever, `curve25519-dalek` is designed as a _mid-level_ API, aimed at implementing other, higher-level primitives. Instead of providing FFI at the mid-level, our suggestion is to implement the higher-level primitive (a signature, PAKE, ZKP, etc) in Rust, using `curve25519-dalek` as a dependency, and have that crate provide a minimal, byte-buffer-oriented FFI specific to that primitive.\n## [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#contributing)Contributing\nPlease see [CONTRIBUTING.md](https://github.com/dalek-cryptography/curve25519-dalek/blob/master/CONTRIBUTING.md).\n## [\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#about)About\n**SPOILER ALERT:** _The Twelfth Doctor\u2019s first encounter with the Daleks is in his second full episode, \u201cInto the Dalek\u201d. A beleaguered ship of the \u201cCombined Galactic Resistance\u201d has discovered a broken Dalek that has turned \u201cgood\u201d, desiring to kill all other Daleks. The Doctor, Clara and a team of soldiers are miniaturized and enter the Dalek, which the Doctor names Rusty. They repair the damage, but accidentally restore it to its original nature, causing it to go on the rampage and alert the Dalek fleet to the whereabouts of the rebel ship. However, the Doctor manages to return Rusty to its previous state by linking his mind with the Dalek\u2019s: Rusty shares the Doctor\u2019s view of the universe\u2019s beauty, but also his deep hatred of the Daleks. Rusty destroys the other Daleks and departs the ship, determined to track down and bring an end to the Dalek race._\n`curve25519-dalek` is authored by Isis Agora Lovecruft and Henry de Valence.\nPortions of this library were originally a port of [Adam Langley\u2019s Golang ed25519 library](https://github.com/agl/ed25519), which was in turn a port of the reference `ref10` implementation. Most of this code, including the 32-bit field arithmetic, has since been rewritten.\nThe fast `u32` and `u64` scalar arithmetic was implemented by Andrew Moon, and the addition chain for scalar inversion was provided by Brian Smith. The optimised batch inversion was contributed by Sean Bowe and Daira Hopwood.\nThe `no_std` and `zeroize` support was contributed by Tony Arcieri.\nThe formally verified `fiat_backend` integrates Rust code generated by the [Fiat Crypto project](https://github.com/mit-plv/fiat-crypto) and was contributed by Fran\u00e7ois Garillot.\nThanks also to Ashley Hauck, Lucas Salibian, Manish Goregaokar, Jack Grigg, Pratyush Mishra, Michael Rosenberg, @pinkforest, and countless others for their contributions.\n## Re-exports[\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#reexports)\n\n`pub use crate::edwards::EdwardsPoint[](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/edwards/struct.EdwardsPoint.html \"struct curve25519_dalek::edwards::EdwardsPoint\");`\n\n\n`pub use crate::montgomery::MontgomeryPoint[](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/montgomery/struct.MontgomeryPoint.html \"struct curve25519_dalek::montgomery::MontgomeryPoint\");`\n\n\n`pub use crate::ristretto::RistrettoPoint[](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/ristretto/struct.RistrettoPoint.html \"struct curve25519_dalek::ristretto::RistrettoPoint\");`\n\n\n`pub use crate::scalar::Scalar[](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/scalar/struct.Scalar.html \"struct curve25519_dalek::scalar::Scalar\");`\n\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");``digest`\n\n## Modules[\u00a7](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#modules)\n\n[backend](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/backend/index.html \"mod curve25519_dalek::backend\")\n    **INTERNALS:** Pluggable implementations for different architectures.\n\n[constants](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/constants/index.html \"mod curve25519_dalek::constants\")\n    Various constants, such as the Ristretto and Ed25519 basepoints.\n\n[edwards](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/edwards/index.html \"mod curve25519_dalek::edwards\")\n    Group operations for Curve25519, in Edwards form.\n\n[montgomery](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/montgomery/index.html \"mod curve25519_dalek::montgomery\")\n    Scalar multiplication on the Montgomery form of Curve25519.\n\n[ristretto](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/ristretto/index.html \"mod curve25519_dalek::ristretto\")\n    An implementation of [Ristretto](https://ristretto.group/), which provides a prime-order group.\n\n[scalar](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/scalar/index.html \"mod curve25519_dalek::scalar\")\n    Arithmetic on scalars (integers mod the group order).\n\n[traits](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/traits/index.html \"mod curve25519_dalek::traits\")\n    Module for common traits.\n",
        "markdown_with_citations": "[](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/all.html \"show sidebar\")\n# Crate curve25519_dalekCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9curve25519-dalek ![\u27e85\u27e9](https://crates.io/crates/curve25519-dalek) ![\u27e86\u27e9](https://docs.rs/curve25519-dalek) ![CI\u27e87\u27e9](https://github.com/dalek-cryptography/curve25519-dalek/actions/workflows/curve25519-dalek.yml)\n![dalek-cryptography logo: a dalek with edwards curves as sparkles coming out of its radar-schnozzley blaster thingies\u27e88\u27e9]\n**A pure-Rust implementation of group operations on Ristretto and Curve25519.**\n`curve25519-dalek` is a library providing group operations on the Edwards and Montgomery forms of Curve25519, and on the prime-order Ristretto group.\n`curve25519-dalek` is not intended to provide implementations of any particular crypto protocol. Rather, implementations of those protocols (such as `x25519-dalek`\u27e89\u27e9 and `ed25519-dalek`\u27e810\u27e9) should use `curve25519-dalek` as a library.\n`curve25519-dalek` is intended to provide a clean and safe _mid-level_ API for use implementing a wide range of ECC-based crypto protocols, such as key agreement, signatures, anonymous credentials, rangeproofs, and zero-knowledge proof systems.\nIn particular, `curve25519-dalek` implements Ristretto, which constructs a prime-order group from a non-prime-order Edwards curve. This provides the speed and safety benefits of Edwards curve arithmetic, without the pitfalls of cofactor-related abstraction mismatches.\n## \u00a7\u27e811\u27e9Use\n### \u00a7\u27e812\u27e9Stable\nTo import `curve25519-dalek`, add the following to the dependencies section of your project\u2019s `Cargo.toml`:\n```\ncurve25519-dalek = \"4\"\n```\n\nIf opting into SemVer-exempted features\u27e813\u27e9 a range can be used to scope the tested compatible version range e.g.:\n```\ncurve25519-dalek = \">= 4.0, < 4.2\"\n```\n\n### \u00a7\u27e814\u27e9Feature Flags\nFeature| Default?| Description  \n---|---|---  \n`alloc`| \u2713| Enables Edwards and Ristretto multiscalar multiplication, batch scalar inversion, and batch Ristretto double-and-compress. Also enables `zeroize`.  \n`zeroize`| \u2713| Enables `Zeroize`\u27e815\u27e9 for all scalar and curve point types.  \n`precomputed-tables`| \u2713| Includes precomputed basepoint multiplication tables. This speeds up `EdwardsPoint::mul_base` and `RistrettoPoint::mul_base` by ~4x, at the cost of ~30KB added to the code size.  \n`rand_core`| | Enables `Scalar::random` and `RistrettoPoint::random`. This is an optional dependency whose version is not subject to SemVer. See below\u27e813\u27e9 for more details.  \n`digest`| | Enables `RistrettoPoint::{from_hash, hash_from_bytes}` and `Scalar::{from_hash, hash_from_bytes}`. This is an optional dependency whose version is not subject to SemVer. See below\u27e813\u27e9 for more details.  \n`serde`| | Enables `serde` serialization/deserialization for all the point and scalar types.  \n`legacy_compatibility`| | Enables `Scalar::from_bits`, which allows the user to build unreduced scalars whose arithmetic is broken. Do not use this unless you know what you\u2019re doing.  \n`group`| | Enables external `group` and `ff` crate traits  \nTo disable the default features when using `curve25519-dalek` as a dependency, add `default-features = false` to the dependency in your `Cargo.toml`. To disable it when running `cargo`, add the `--no-default-features` CLI flag.\n### \u00a7\u27e816\u27e9Major Version API Changes\nBreaking changes for each major version release can be found in `CHANGELOG.md`\u27e817\u27e9, under the \u201cBreaking changes\u201d subheader. The latest breaking changes in high level are below:\n#### \u00a7\u27e818\u27e9Breaking changes in 4.0.0\n  * Update the MSRV from 1.41 to 1.60\n  * Provide SemVer policy\n  * Make `digest` and `rand_core` optional features\n  * Remove `std` and `nightly` features\n  * Replace backend selection - See CHANGELOG.md\u27e817\u27e9 and backends\u27e819\u27e9\n  * Replace methods `Scalar::{zero, one}` with constants `Scalar::{ZERO, ONE}`\n  * `Scalar::from_canonical_bytes` now returns `CtOption`\n  * `Scalar::is_canonical` now returns `Choice`\n  * Remove `Scalar::from_bytes_clamped` and `Scalar::reduce`\n  * Deprecate and feature-gate `Scalar::from_bits` behind `legacy_compatibility`\n  * Deprecate `EdwardsPoint::hash_from_bytes` and rename it `EdwardsPoint::nonspec_map_to_curve`\n  * Require including a new trait, `use curve25519_dalek::traits::BasepointTable` whenever using `EdwardsBasepointTable` or `RistrettoBasepointTable`\n\n\nThis release also does a lot of dependency updates and relaxations to unblock upstream build issues.\n## \u00a7\u27e819\u27e9Backends\nCurve arithmetic is implemented and used by one of the following backends:\nBackend| Selection| Implementation| Bits / Word sizes  \n---|---|---|---  \n`serial`| Automatic| An optimized, non-parllel implementation| `32` and `64`  \n`fiat`| Manual| Formally verified field arithmetic from fiat-crypto\u27e820\u27e9| `32` and `64`  \n`simd`| Automatic| Intel AVX2 / AVX512 IFMA accelerated backend| `64` only  \nAt runtime, `curve25519-dalek` selects an arithmetic backend from the set of backends it was compiled to support. For Intel x86-64 targets, unless otherwise specified, it will build itself with `simd` support, and default to `serial` at runtime if the appropriate CPU features aren\u2019t detected. See SIMD backend\u27e821\u27e9 for more details.\nIn the future, `simd` backend may be extended to cover more instruction sets. This change will be non-breaking as this is considered as implementation detail.\n### \u00a7\u27e822\u27e9Manual Backend Override\nYou can force the crate to compile with specific backend support, e.g., `serial` for x86-64 targets to save code size, or `fiat` to force the runtime to use verified code. To do this, set the environment variable:\n```\nRUSTFLAGS='--cfg curve25519_dalek_backend=\"BACKEND\"'\n```\n\nEquivalently, you can write to `~/.cargo/config`:\n```\n[build]\nrustflags = ['--cfg=curve25519_dalek_backend=\"BACKEND\"']\n```\n\nMore info here\u27e823\u27e9.\nNote for contributors: The target backends are not entirely independent of each other. The SIMD backend\u27e821\u27e9 directly depends on parts of the serial backend to function.\n### \u00a7\u27e824\u27e9Bits / Word size\n`curve25519-dalek` will automatically choose the word size for the `fiat` and `serial` backends, based on the build target. For example, building for a 64-bit machine, the default 64 bit word size is automatically chosen when either the `serial` or `fiat` backend is selected.\nIn some targets it might be required to override the word size for better performance. Backend word size can be overridden for `serial` and `fiat` by setting the environment variable:\n```\nRUSTFLAGS='--cfg curve25519_dalek_bits=\"SIZE\"'\n```\n\n`SIZE` is `32` or `64`. As in the above section, this can also be placed in `~/.cargo/config`.\nNote: The SIMD backend\u27e821\u27e9 requires a word size of 64 bits. Attempting to set bits=32 and backend=`simd` will yield a compile error.\n#### \u00a7\u27e825\u27e9Cross-compilation\nBecause backend selection is done by target, cross-compiling will select the correct word size automatically. For example, if a x86-64 Linux machine runs the following commands, `curve25519-dalek` will be compiled with the 32-bit `serial` backend.\n```\n$ sudo apt install gcc-multilib # (or whatever package manager you use)\n$ rustup target add i686-unknown-linux-gnu\n$ cargo build --target i686-unknown-linux-gnu\n```\n\n### \u00a7\u27e821\u27e9SIMD backend\nThe specific SIMD backend (AVX512 / AVX2 / `serial` default) is selected automatically at runtime, depending on the currently available CPU features, and whether Rust nightly is being used for compilation. The precise conditions are specified below.\nFor a given CPU feature, you can also specify an appropriate `-C target_feature` to build a binary which assumes the required SIMD instructions are always available. Don\u2019t do this if you don\u2019t have a good reason.\nBackend| `RUSTFLAGS`| Requires nightly?  \n---|---|---  \navx2| `-C target_feature=+avx2`| no  \navx512| `-C target_feature=+avx512ifma,+avx512vl`| yes  \nIf compiled on a non-nightly compiler, `curve25519-dalek` will not include AVX512 code, and therefore will never select it at runtime.\n## \u00a7\u27e826\u27e9Documentation\nThe semver-stable, public-facing `curve25519-dalek` API is documented here\u27e827\u27e9.\n### \u00a7\u27e828\u27e9Building Docs Locally\nThe `curve25519-dalek` documentation requires a custom HTML header to include KaTeX for math support. Unfortunately `cargo doc` does not currently support this, but docs can be built using\n```\nmake doc\n```\n\nfor regular docs, and\n```\nmake doc-internal\n```\n\nfor docs that include private items.\n## \u00a7\u27e829\u27e9Maintenance Policies\nAll on-by-default features of this library are covered by semantic versioning\u27e830\u27e9 (SemVer). SemVer exemptions are outlined below for MSRV and public API.\n### \u00a7\u27e831\u27e9Minimum Supported Rust Version\nReleases| MSRV  \n---|---  \n4.x| 1.60.0  \n3.x| 1.41.0  \nFrom 4.x and on, MSRV changes will be accompanied by a minor version bump.\n### \u00a7\u27e813\u27e9Public API SemVer Exemptions\nBreaking changes to SemVer-exempted components affecting the public API will be accompanied by _some_ version bump. Below are the specific policies:\nReleases| Public API Component(s)| Policy  \n---|---|---  \n4.x| Dependencies `group`, `digest` and `rand_core`| Minor SemVer bump  \n## \u00a7\u27e832\u27e9Safety\nThe `curve25519-dalek` types are designed to make illegal states unrepresentable. For example, any instance of an `EdwardsPoint` is guaranteed to hold a point on the Edwards curve, and any instance of a `RistrettoPoint` is guaranteed to hold a valid point in the Ristretto group.\nAll operations are implemented using constant-time logic (no secret-dependent branches, no secret-dependent memory accesses), unless specifically marked as being variable-time code. We believe that our constant-time logic is lowered to constant-time assembly, at least on `x86_64` targets.\nAs an additional guard against possible future compiler optimizations, the `subtle` crate places an optimization barrier before every conditional move or assignment. More details can be found in the documentation for the `subtle` crate\u27e833\u27e9.\nSome functionality (e.g., multiscalar multiplication or batch inversion) requires heap allocation for temporary buffers. All heap-allocated buffers of potentially secret data are explicitly zeroed before release.\nHowever, we do not attempt to zero stack data, for two reasons. First, it\u2019s not possible to do so correctly: we don\u2019t have control over stack allocations, so there\u2019s no way to know how much data to wipe. Second, because `curve25519-dalek` provides a mid-level API, the correct place to start zeroing stack data is likely not at the entrypoints of `curve25519-dalek` functions, but at the entrypoints of functions in other crates.\nThe implementation is memory-safe, and contains no significant `unsafe` code. The SIMD backend uses `unsafe` internally to call SIMD intrinsics. These are marked `unsafe` only because invoking them on an inappropriate CPU would cause `SIGILL`, but the entire backend is only invoked when the appropriate CPU features are detected at runtime, or when the whole program is compiled with the appropriate `target_feature`s.\n## \u00a7\u27e834\u27e9Performance\nBenchmarks are run using `criterion.rs`\u27e835\u27e9:\n```\ncargo bench --features \"rand_core\"\nexport RUSTFLAGS='-C target_cpu=native'\ncargo +nightly bench --features \"rand_core\"\n```\n\nPerformance is a secondary goal behind correctness, safety, and clarity, but we aim to be competitive with other implementations.\n## \u00a7\u27e836\u27e9FFI\nUnfortunately, we have no plans to add FFI to `curve25519-dalek` directly. The reason is that we use Rust features to provide an API that maintains safety invariants, which are not possible to maintain across an FFI boundary. For instance, as described in the _Safety_ section above, invalid points are impossible to construct, and this would not be the case if we exposed point operations over FFI.\nHowever, `curve25519-dalek` is designed as a _mid-level_ API, aimed at implementing other, higher-level primitives. Instead of providing FFI at the mid-level, our suggestion is to implement the higher-level primitive (a signature, PAKE, ZKP, etc) in Rust, using `curve25519-dalek` as a dependency, and have that crate provide a minimal, byte-buffer-oriented FFI specific to that primitive.\n## \u00a7\u27e837\u27e9Contributing\nPlease see CONTRIBUTING.md\u27e838\u27e9.\n## \u00a7\u27e839\u27e9About\n**SPOILER ALERT:** _The Twelfth Doctor\u2019s first encounter with the Daleks is in his second full episode, \u201cInto the Dalek\u201d. A beleaguered ship of the \u201cCombined Galactic Resistance\u201d has discovered a broken Dalek that has turned \u201cgood\u201d, desiring to kill all other Daleks. The Doctor, Clara and a team of soldiers are miniaturized and enter the Dalek, which the Doctor names Rusty. They repair the damage, but accidentally restore it to its original nature, causing it to go on the rampage and alert the Dalek fleet to the whereabouts of the rebel ship. However, the Doctor manages to return Rusty to its previous state by linking his mind with the Dalek\u2019s: Rusty shares the Doctor\u2019s view of the universe\u2019s beauty, but also his deep hatred of the Daleks. Rusty destroys the other Daleks and departs the ship, determined to track down and bring an end to the Dalek race._\n`curve25519-dalek` is authored by Isis Agora Lovecruft and Henry de Valence.\nPortions of this library were originally a port of Adam Langley\u2019s Golang ed25519 library\u27e840\u27e9, which was in turn a port of the reference `ref10` implementation. Most of this code, including the 32-bit field arithmetic, has since been rewritten.\nThe fast `u32` and `u64` scalar arithmetic was implemented by Andrew Moon, and the addition chain for scalar inversion was provided by Brian Smith. The optimised batch inversion was contributed by Sean Bowe and Daira Hopwood.\nThe `no_std` and `zeroize` support was contributed by Tony Arcieri.\nThe formally verified `fiat_backend` integrates Rust code generated by the Fiat Crypto project\u27e820\u27e9 and was contributed by Fran\u00e7ois Garillot.\nThanks also to Ashley Hauck, Lucas Salibian, Manish Goregaokar, Jack Grigg, Pratyush Mishra, Michael Rosenberg, @pinkforest, and countless others for their contributions.\n## Re-exports\u00a7\u27e841\u27e9\n\n`pub use crate::edwards::EdwardsPoint[](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/edwards/struct.EdwardsPoint.html \"struct curve25519_dalek::edwards::EdwardsPoint\");`\n\n\n`pub use crate::montgomery::MontgomeryPoint[](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/montgomery/struct.MontgomeryPoint.html \"struct curve25519_dalek::montgomery::MontgomeryPoint\");`\n\n\n`pub use crate::ristretto::RistrettoPoint[](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/ristretto/struct.RistrettoPoint.html \"struct curve25519_dalek::ristretto::RistrettoPoint\");`\n\n\n`pub use crate::scalar::Scalar[](https://docs.rs/curve25519-dalek/latest/curve25519_dalek/scalar/struct.Scalar.html \"struct curve25519_dalek::scalar::Scalar\");`\n\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");``digest`\n\n## Modules\u00a7\u27e842\u27e9\n\nbackend\u27e843\u27e9\n    **INTERNALS:** Pluggable implementations for different architectures.\n\nconstants\u27e844\u27e9\n    Various constants, such as the Ristretto and Ed25519 basepoints.\n\nedwards\u27e845\u27e9\n    Group operations for Curve25519, in Edwards form.\n\nmontgomery\u27e846\u27e9\n    Scalar multiplication on the Montgomery form of Curve25519.\n\nristretto\u27e847\u27e9\n    An implementation of Ristretto\u27e848\u27e9, which provides a prime-order group.\n\nscalar\u27e849\u27e9\n    Arithmetic on scalars (integers mod the group order).\n\ntraits\u27e850\u27e9\n    Module for common traits.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/curve25519-dalek/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/curve25519-dalek/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/curve25519-dalek/latest/src/curve25519_dalek/lib.rs.html#12-113: Source\n\u27e84\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#curve25519-dalek---ci: \u00a7\n\u27e85\u27e9 https://buildstats.info/crate/curve25519-dalek: ![\n\u27e86\u27e9 https://img.shields.io/docsrs/curve25519-dalek: ![\n\u27e87\u27e9 https://github.com/dalek-cryptography/curve25519-dalek/actions/workflows/curve25519-dalek.yml/badge.svg?branch=main: ![CI\n\u27e88\u27e9 https://cdn.jsdelivr.net/gh/dalek-cryptography/curve25519-dalek/docs/assets/dalek-logo-clear.png: dalek-cryptography logo: a dalek with edwards curves as sparkles coming out of its radar-schnozzley blaster thingies\n\u27e89\u27e9 https://github.com/dalek-cryptography/curve25519-dalek/tree/main/x25519-dalek: `x25519-dalek`\n\u27e810\u27e9 https://github.com/dalek-cryptography/curve25519-dalek/tree/main/ed25519-dalek: `ed25519-dalek`\n\u27e811\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#use: \u00a7\n\u27e812\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#stable: \u00a7\n\u27e813\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#public-api-semver-exemptions: SemVer-exempted features\n\u27e814\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#feature-flags: \u00a7\n\u27e815\u27e9 https://docs.rs/zeroize/latest/zeroize/trait.Zeroize.html: `Zeroize`\n\u27e816\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#major-version-api-changes: \u00a7\n\u27e817\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/CHANGELOG.md: `CHANGELOG.md`\n\u27e818\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#breaking-changes-in-400: \u00a7\n\u27e819\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#backends: backends\n\u27e820\u27e9 https://github.com/mit-plv/fiat-crypto: fiat-crypto\n\u27e821\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#simd-backend: SIMD backend\n\u27e822\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#manual-backend-override: \u00a7\n\u27e823\u27e9 https://doc.rust-lang.org/cargo/reference/config.html#buildrustflags: here\n\u27e824\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#bits--word-size: \u00a7\n\u27e825\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#cross-compilation: \u00a7\n\u27e826\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#documentation: \u00a7\n\u27e827\u27e9 https://docs.rs/curve25519-dalek/: here\n\u27e828\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#building-docs-locally: \u00a7\n\u27e829\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#maintenance-policies: \u00a7\n\u27e830\u27e9 https://semver.org/spec/v2.0.0.html: semantic versioning\n\u27e831\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#minimum-supported-rust-version: \u00a7\n\u27e832\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#safety: \u00a7\n\u27e833\u27e9 https://docs.rs/subtle: the documentation for the `subtle` crate\n\u27e834\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#performance: \u00a7\n\u27e835\u27e9 https://github.com/japaric/criterion.rs: `criterion.rs`\n\u27e836\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#ffi: \u00a7\n\u27e837\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#contributing: \u00a7\n\u27e838\u27e9 https://github.com/dalek-cryptography/curve25519-dalek/blob/master/CONTRIBUTING.md: CONTRIBUTING.md\n\u27e839\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#about: \u00a7\n\u27e840\u27e9 https://github.com/agl/ed25519: Adam Langley\u2019s Golang ed25519 library\n\u27e841\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#reexports: \u00a7\n\u27e842\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/#modules: \u00a7\n\u27e843\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/backend/index.html: mod curve25519_dalek::backend - backend\n\u27e844\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/constants/index.html: mod curve25519_dalek::constants - constants\n\u27e845\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/edwards/index.html: mod curve25519_dalek::edwards - edwards\n\u27e846\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/montgomery/index.html: mod curve25519_dalek::montgomery - montgomery\n\u27e847\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/ristretto/index.html: mod curve25519_dalek::ristretto - ristretto\n\u27e848\u27e9 https://ristretto.group/: Ristretto\n\u27e849\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/scalar/index.html: mod curve25519_dalek::scalar - scalar\n\u27e850\u27e9 https://docs.rs/curve25519-dalek/latest/curve25519_dalek/traits/index.html: mod curve25519_dalek::traits - traits\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `curve25519-dalek` crate is a pure-Rust library for performing group operations on Curve25519 (Edwards and Montgomery forms) and the prime-order Ristretto group. It provides a clean, safe mid-level API for implementing ECC-based cryptographic protocols, such as key agreements, signatures, and zero-knowledge proofs. Key features include constant-time operations, backend flexibility (serial, fiat, SIMD), and support for optional features like `serde`, `zeroize`, and precomputed tables for performance optimization.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Feature Flags  \n\u2705 **Factual:** The `curve25519-dalek` crate includes a `zeroize` feature that ensures all scalar and curve point types can be securely zeroed in memory, and this feature is enabled by default.  \n\u274c **Counterfactual:** The `curve25519-dalek` crate requires manual activation of the `zeroize` feature for secure memory zeroing, as it is not enabled by default.  \n\n---\n\n### Pair 2: Backends  \n\u2705 **Factual:** The `curve25519-dalek` crate automatically selects the `simd` backend for Intel x86-64 targets if the appropriate CPU features (e.g., AVX2) are detected at runtime.  \n\u274c **Counterfactual:** The `curve25519-dalek` crate always uses the `serial` backend for Intel x86-64 targets, regardless of the CPU's SIMD capabilities.  \n\n---\n\n### Pair 3: Ristretto Implementation  \n\u2705 **Factual:** The `curve25519-dalek` crate implements Ristretto to construct a prime-order group from a non-prime-order Edwards curve, avoiding cofactor-related abstraction mismatches.  \n\u274c **Counterfactual:** The `curve25519-dalek` crate uses Ristretto to construct a non-prime-order group from a prime-order Edwards curve, introducing cofactor-related abstraction mismatches.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}