{
    "name": "scrypt",
    "version": "0.12.0-rc.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/scrypt/latest/scrypt/all.html \"show sidebar\")\n# Crate scryptCopy item path\n[Settings](https://docs.rs/scrypt/latest/settings.html)\n[Help](https://docs.rs/scrypt/latest/help.html)\nSummary[Source](https://docs.rs/scrypt/latest/src/scrypt/lib.rs.html#1-120)\nExpand description\nThis crate implements the Scrypt key derivation function as specified in [1].\nIf you are only using the low-level [`scrypt`](https://docs.rs/scrypt/latest/scrypt/fn.scrypt.html \"fn scrypt::scrypt\") function instead of the higher-level [`Scrypt`](https://docs.rs/scrypt/latest/scrypt/struct.Scrypt.html \"struct scrypt::Scrypt\") struct to produce/verify hash strings, it\u2019s recommended to disable default features in your `Cargo.toml`:\n```\n[dependencies]\nscrypt = { version = \"0.2\", default-features = false }\n```\n\n## [\u00a7](https://docs.rs/scrypt/latest/scrypt/#usage-simple-with-default-params)Usage (simple with default params)\n```\nuse scrypt::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Scrypt\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Hash password to PHC string ($scrypt$...)\nlet password_hash = Scrypt.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Scrypt.verify_password(password, &parsed_hash).is_ok());\n```\n\n## [\u00a7](https://docs.rs/scrypt/latest/scrypt/#references)References\n[1] - [C. Percival. Stronger Key Derivation Via Sequential Memory-Hard Functions](http://www.tarsnap.com/scrypt/scrypt.pdf)\n## Re-exports[\u00a7](https://docs.rs/scrypt/latest/scrypt/#reexports)\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");`\n\n## Modules[\u00a7](https://docs.rs/scrypt/latest/scrypt/#modules)\n\n[errors](https://docs.rs/scrypt/latest/scrypt/errors/index.html \"mod scrypt::errors\")\n    Errors for `scrypt` operations.\n## Structs[\u00a7](https://docs.rs/scrypt/latest/scrypt/#structs)\n\n[Params](https://docs.rs/scrypt/latest/scrypt/struct.Params.html \"struct scrypt::Params\")\n    The Scrypt parameter values.\n\n[Scrypt](https://docs.rs/scrypt/latest/scrypt/struct.Scrypt.html \"struct scrypt::Scrypt\")\n    scrypt type for use with [`PasswordHasher`](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/traits/trait.PasswordHasher.html \"trait password_hash::traits::PasswordHasher\").\n## Constants[\u00a7](https://docs.rs/scrypt/latest/scrypt/#constants)\n\n[ALG_ID](https://docs.rs/scrypt/latest/scrypt/constant.ALG_ID.html \"constant scrypt::ALG_ID\")\n    Algorithm identifier\n## Functions[\u00a7](https://docs.rs/scrypt/latest/scrypt/#functions)\n\n[scrypt](https://docs.rs/scrypt/latest/scrypt/fn.scrypt.html \"fn scrypt::scrypt\")\n    The scrypt key derivation function.\n",
        "markdown_with_citations": "[](https://docs.rs/scrypt/latest/scrypt/all.html \"show sidebar\")\n# Crate scryptCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate implements the Scrypt key derivation function as specified in [1].\nIf you are only using the low-level `scrypt`\u27e84\u27e9 function instead of the higher-level `Scrypt`\u27e85\u27e9 struct to produce/verify hash strings, it\u2019s recommended to disable default features in your `Cargo.toml`:\n```\n[dependencies]\nscrypt = { version = \"0.2\", default-features = false }\n```\n\n## \u00a7\u27e86\u27e9Usage (simple with default params)\n```\nuse scrypt::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Scrypt\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Hash password to PHC string ($scrypt$...)\nlet password_hash = Scrypt.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Scrypt.verify_password(password, &parsed_hash).is_ok());\n```\n\n## \u00a7\u27e87\u27e9References\n[1] - C. Percival. Stronger Key Derivation Via Sequential Memory-Hard Functions\u27e88\u27e9\n## Re-exports\u00a7\u27e89\u27e9\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");`\n\n## Modules\u00a7\u27e810\u27e9\n\nerrors\u27e811\u27e9\n    Errors for `scrypt` operations.\n## Structs\u00a7\u27e812\u27e9\n\nParams\u27e813\u27e9\n    The Scrypt parameter values.\n\nScrypt\u27e85\u27e9\n    scrypt type for use with `PasswordHasher`\u27e814\u27e9.\n## Constants\u00a7\u27e815\u27e9\n\nALG_ID\u27e816\u27e9\n    Algorithm identifier\n## Functions\u00a7\u27e817\u27e9\n\nscrypt\u27e84\u27e9\n    The scrypt key derivation function.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/scrypt/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/scrypt/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/scrypt/latest/src/scrypt/lib.rs.html#1-120: Source\n\u27e84\u27e9 https://docs.rs/scrypt/latest/scrypt/fn.scrypt.html: fn scrypt::scrypt - `scrypt`\n\u27e85\u27e9 https://docs.rs/scrypt/latest/scrypt/struct.Scrypt.html: struct scrypt::Scrypt - `Scrypt`\n\u27e86\u27e9 https://docs.rs/scrypt/latest/scrypt/#usage-simple-with-default-params: \u00a7\n\u27e87\u27e9 https://docs.rs/scrypt/latest/scrypt/#references: \u00a7\n\u27e88\u27e9 http://www.tarsnap.com/scrypt/scrypt.pdf: C. Percival. Stronger Key Derivation Via Sequential Memory-Hard Functions\n\u27e89\u27e9 https://docs.rs/scrypt/latest/scrypt/#reexports: \u00a7\n\u27e810\u27e9 https://docs.rs/scrypt/latest/scrypt/#modules: \u00a7\n\u27e811\u27e9 https://docs.rs/scrypt/latest/scrypt/errors/index.html: mod scrypt::errors - errors\n\u27e812\u27e9 https://docs.rs/scrypt/latest/scrypt/#structs: \u00a7\n\u27e813\u27e9 https://docs.rs/scrypt/latest/scrypt/struct.Params.html: struct scrypt::Params - Params\n\u27e814\u27e9 https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/traits/trait.PasswordHasher.html: trait password_hash::traits::PasswordHasher - `PasswordHasher`\n\u27e815\u27e9 https://docs.rs/scrypt/latest/scrypt/#constants: \u00a7\n\u27e816\u27e9 https://docs.rs/scrypt/latest/scrypt/constant.ALG_ID.html: constant scrypt::ALG_ID - ALG_ID\n\u27e817\u27e9 https://docs.rs/scrypt/latest/scrypt/#functions: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `scrypt` crate implements the Scrypt key derivation function, a memory-hard algorithm designed for secure password hashing. It provides both a low-level `scrypt` function and a high-level `Scrypt` struct for hashing and verifying passwords using the PHC string format. Key features include customizable parameters, integration with the `password-hash` crate, and support for secure salt generation and password verification.",
    "feature_summary": null,
    "use_case": "Cryptography",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Key Derivation Function\n\u2705 **Factual**: The `scrypt` crate implements the Scrypt key derivation function, which is designed to be memory-hard and resistant to brute-force attacks, as specified in Colin Percival's paper *Stronger Key Derivation Via Sequential Memory-Hard Functions*.  \n\u274c **Counterfactual**: The `scrypt` crate implements a hybrid key derivation function combining Scrypt and PBKDF2, providing dual-layer security by default.  \n\n---\n\n### Pair 2: Default Features Configuration\n\u2705 **Factual**: If you are only using the low-level `scrypt` function instead of the higher-level `Scrypt` struct, it is recommended to disable default features in your `Cargo.toml` to minimize unnecessary dependencies.  \n\u274c **Counterfactual**: The `scrypt` crate requires enabling all default features to use the low-level `scrypt` function, as disabling them breaks compatibility with the library.  \n\n---\n\n### Pair 3: Password Hashing and Verification\n\u2705 **Factual**: The `Scrypt` struct in the `scrypt` crate provides high-level functionality for hashing passwords into PHC (Password Hashing Competition) compliant strings and verifying them against provided passwords.  \n\u274c **Counterfactual**: The `Scrypt` struct in the `scrypt` crate only supports hashing passwords but does not include functionality for verifying hashed passwords.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}