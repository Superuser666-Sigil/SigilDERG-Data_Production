{
    "name": "async-io",
    "version": "2.4.1",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/async-io/latest/async_io/all.html \"show sidebar\")\n# Crate async_ioCopy item path\n[Settings](https://docs.rs/async-io/latest/settings.html)\n[Help](https://docs.rs/async-io/latest/help.html)\nSummary[Source](https://docs.rs/async-io/latest/src/async_io/lib.rs.html#1-2230)\nExpand description\nAsync I/O and timers.\nThis crate provides two tools:\n  * [`Async`](https://docs.rs/async-io/latest/async_io/struct.Async.html \"struct async_io::Async\"), an adapter for standard networking types (and [many other](https://github.com/smol-rs/async-io/tree/master/examples) types) to use in async programs.\n  * [`Timer`](https://docs.rs/async-io/latest/async_io/struct.Timer.html \"struct async_io::Timer\"), a future or stream that emits timed events.\n\n\nFor concrete async networking types built on top of this crate, see [`async-net`](https://docs.rs/async-net).\n## [\u00a7](https://docs.rs/async-io/latest/async_io/#implementation)Implementation\nThe first time [`Async`](https://docs.rs/async-io/latest/async_io/struct.Async.html \"struct async_io::Async\") or [`Timer`](https://docs.rs/async-io/latest/async_io/struct.Timer.html \"struct async_io::Timer\") is used, a thread named \u201casync-io\u201d will be spawned. The purpose of this thread is to wait for I/O events reported by the operating system, and then wake appropriate futures blocked on I/O or timers when they can be resumed.\nTo wait for the next I/O event, the \u201casync-io\u201d thread uses [epoll](https://en.wikipedia.org/wiki/Epoll) on Linux/Android/illumos, [kqueue](https://en.wikipedia.org/wiki/Kqueue) on macOS/iOS/BSD, [event ports](https://illumos.org/man/port_create) on illumos/Solaris, and [IOCP](https://learn.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports) on Windows. That functionality is provided by the [`polling`](https://docs.rs/polling) crate.\nHowever, note that you can also process I/O events and wake futures on any thread using the [`block_on()`](https://docs.rs/async-io/latest/async_io/fn.block_on.html \"fn async_io::block_on\") function. The \u201casync-io\u201d thread is therefore just a fallback mechanism processing I/O events in case no other threads are.\n## [\u00a7](https://docs.rs/async-io/latest/async_io/#examples)Examples\nConnect to `example.com:80`, or time out after 10 seconds.\n```\nuse async_io::{Async, Timer};\nuse futures_lite::{future::FutureExt, io};\nuse std::net::{TcpStream, ToSocketAddrs};\nuse std::time::Duration;\nlet addr = \"example.com:80\".to_socket_addrs()?.next().unwrap();\nlet stream = Async::<TcpStream>::connect(addr).or(async {\n  Timer::after(Duration::from_secs(10)).await;\n  Err(io::ErrorKind::TimedOut.into())\n})\n.await?;\n```\n\n## Modules[\u00a7](https://docs.rs/async-io/latest/async_io/#modules)\n\n[os](https://docs.rs/async-io/latest/async_io/os/index.html \"mod async_io::os\")\n    Platform-specific functionality.\n## Structs[\u00a7](https://docs.rs/async-io/latest/async_io/#structs)\n\n[Async](https://docs.rs/async-io/latest/async_io/struct.Async.html \"struct async_io::Async\")\n    Async adapter for I/O types.\n\n[Readable](https://docs.rs/async-io/latest/async_io/struct.Readable.html \"struct async_io::Readable\")\n    Future for [`Async::readable`](https://docs.rs/async-io/latest/async_io/struct.Async.html#method.readable \"method async_io::Async::readable\").\n\n[ReadableOwned](https://docs.rs/async-io/latest/async_io/struct.ReadableOwned.html \"struct async_io::ReadableOwned\")\n    Future for [`Async::readable_owned`](https://docs.rs/async-io/latest/async_io/struct.Async.html#method.readable_owned \"method async_io::Async::readable_owned\").\n\n[Timer](https://docs.rs/async-io/latest/async_io/struct.Timer.html \"struct async_io::Timer\")\n    A future or stream that emits timed events.\n\n[Writable](https://docs.rs/async-io/latest/async_io/struct.Writable.html \"struct async_io::Writable\")\n    Future for [`Async::writable`](https://docs.rs/async-io/latest/async_io/struct.Async.html#method.writable \"method async_io::Async::writable\").\n\n[WritableOwned](https://docs.rs/async-io/latest/async_io/struct.WritableOwned.html \"struct async_io::WritableOwned\")\n    Future for [`Async::writable_owned`](https://docs.rs/async-io/latest/async_io/struct.Async.html#method.writable_owned \"method async_io::Async::writable_owned\").\n## Traits[\u00a7](https://docs.rs/async-io/latest/async_io/#traits)\n\n[IoSafe](https://docs.rs/async-io/latest/async_io/trait.IoSafe.html \"trait async_io::IoSafe\")\n    Types whose I/O trait implementations do not drop the underlying I/O source.\n## Functions[\u00a7](https://docs.rs/async-io/latest/async_io/#functions)\n\n[block_on](https://docs.rs/async-io/latest/async_io/fn.block_on.html \"fn async_io::block_on\")\n    Blocks the current thread on a future, processing I/O events when idle.\n",
        "markdown_with_citations": "[](https://docs.rs/async-io/latest/async_io/all.html \"show sidebar\")\n# Crate async_ioCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAsync I/O and timers.\nThis crate provides two tools:\n  * `Async`\u27e84\u27e9, an adapter for standard networking types (and many other\u27e85\u27e9 types) to use in async programs.\n  * `Timer`\u27e86\u27e9, a future or stream that emits timed events.\n\n\nFor concrete async networking types built on top of this crate, see `async-net`\u27e87\u27e9.\n## \u00a7\u27e88\u27e9Implementation\nThe first time `Async`\u27e84\u27e9 or `Timer`\u27e86\u27e9 is used, a thread named \u201casync-io\u201d will be spawned. The purpose of this thread is to wait for I/O events reported by the operating system, and then wake appropriate futures blocked on I/O or timers when they can be resumed.\nTo wait for the next I/O event, the \u201casync-io\u201d thread uses epoll\u27e89\u27e9 on Linux/Android/illumos, kqueue\u27e810\u27e9 on macOS/iOS/BSD, event ports\u27e811\u27e9 on illumos/Solaris, and IOCP\u27e812\u27e9 on Windows. That functionality is provided by the `polling`\u27e813\u27e9 crate.\nHowever, note that you can also process I/O events and wake futures on any thread using the `block_on()`\u27e814\u27e9 function. The \u201casync-io\u201d thread is therefore just a fallback mechanism processing I/O events in case no other threads are.\n## \u00a7\u27e815\u27e9Examples\nConnect to `example.com:80`, or time out after 10 seconds.\n```\nuse async_io::{Async, Timer};\nuse futures_lite::{future::FutureExt, io};\nuse std::net::{TcpStream, ToSocketAddrs};\nuse std::time::Duration;\nlet addr = \"example.com:80\".to_socket_addrs()?.next().unwrap();\nlet stream = Async::<TcpStream>::connect(addr).or(async {\n  Timer::after(Duration::from_secs(10)).await;\n  Err(io::ErrorKind::TimedOut.into())\n})\n.await?;\n```\n\n## Modules\u00a7\u27e816\u27e9\n\nos\u27e817\u27e9\n    Platform-specific functionality.\n## Structs\u00a7\u27e818\u27e9\n\nAsync\u27e84\u27e9\n    Async adapter for I/O types.\n\nReadable\u27e819\u27e9\n    Future for `Async::readable`\u27e820\u27e9.\n\nReadableOwned\u27e821\u27e9\n    Future for `Async::readable_owned`\u27e822\u27e9.\n\nTimer\u27e86\u27e9\n    A future or stream that emits timed events.\n\nWritable\u27e823\u27e9\n    Future for `Async::writable`\u27e824\u27e9.\n\nWritableOwned\u27e825\u27e9\n    Future for `Async::writable_owned`\u27e826\u27e9.\n## Traits\u00a7\u27e827\u27e9\n\nIoSafe\u27e828\u27e9\n    Types whose I/O trait implementations do not drop the underlying I/O source.\n## Functions\u00a7\u27e829\u27e9\n\nblock_on\u27e814\u27e9\n    Blocks the current thread on a future, processing I/O events when idle.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-io/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-io/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-io/latest/src/async_io/lib.rs.html#1-2230: Source\n\u27e84\u27e9 https://docs.rs/async-io/latest/async_io/struct.Async.html: struct async_io::Async - `Async`\n\u27e85\u27e9 https://github.com/smol-rs/async-io/tree/master/examples: many other\n\u27e86\u27e9 https://docs.rs/async-io/latest/async_io/struct.Timer.html: struct async_io::Timer - `Timer`\n\u27e87\u27e9 https://docs.rs/async-net: `async-net`\n\u27e88\u27e9 https://docs.rs/async-io/latest/async_io/#implementation: \u00a7\n\u27e89\u27e9 https://en.wikipedia.org/wiki/Epoll: epoll\n\u27e810\u27e9 https://en.wikipedia.org/wiki/Kqueue: kqueue\n\u27e811\u27e9 https://illumos.org/man/port_create: event ports\n\u27e812\u27e9 https://learn.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports: IOCP\n\u27e813\u27e9 https://docs.rs/polling: `polling`\n\u27e814\u27e9 https://docs.rs/async-io/latest/async_io/fn.block_on.html: fn async_io::block_on - `block_on()`\n\u27e815\u27e9 https://docs.rs/async-io/latest/async_io/#examples: \u00a7\n\u27e816\u27e9 https://docs.rs/async-io/latest/async_io/#modules: \u00a7\n\u27e817\u27e9 https://docs.rs/async-io/latest/async_io/os/index.html: mod async_io::os - os\n\u27e818\u27e9 https://docs.rs/async-io/latest/async_io/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/async-io/latest/async_io/struct.Readable.html: struct async_io::Readable - Readable\n\u27e820\u27e9 https://docs.rs/async-io/latest/async_io/struct.Async.html#method.readable: method async_io::Async::readable - `Async::readable`\n\u27e821\u27e9 https://docs.rs/async-io/latest/async_io/struct.ReadableOwned.html: struct async_io::ReadableOwned - ReadableOwned\n\u27e822\u27e9 https://docs.rs/async-io/latest/async_io/struct.Async.html#method.readable_owned: method async_io::Async::readable_owned - `Async::readable_owned`\n\u27e823\u27e9 https://docs.rs/async-io/latest/async_io/struct.Writable.html: struct async_io::Writable - Writable\n\u27e824\u27e9 https://docs.rs/async-io/latest/async_io/struct.Async.html#method.writable: method async_io::Async::writable - `Async::writable`\n\u27e825\u27e9 https://docs.rs/async-io/latest/async_io/struct.WritableOwned.html: struct async_io::WritableOwned - WritableOwned\n\u27e826\u27e9 https://docs.rs/async-io/latest/async_io/struct.Async.html#method.writable_owned: method async_io::Async::writable_owned - `Async::writable_owned`\n\u27e827\u27e9 https://docs.rs/async-io/latest/async_io/#traits: \u00a7\n\u27e828\u27e9 https://docs.rs/async-io/latest/async_io/trait.IoSafe.html: trait async_io::IoSafe - IoSafe\n\u27e829\u27e9 https://docs.rs/async-io/latest/async_io/#functions: \u00a7\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `async-io` crate provides tools for asynchronous I/O operations and timers in Rust. Its key features include the `Async` adapter for standard networking and I/O types, enabling their use in async programs, and the `Timer` for emitting timed events as futures or streams. It efficiently handles I/O events using platform-specific mechanisms like epoll, kqueue, event ports, and IOCP, with a fallback \"async-io\" thread for event processing.",
    "feature_summary": null,
    "use_case": "Networking",
    "score": 6.0,
    "factual_counterfactual": "### Pair 1: Async I/O Thread Behavior  \n\u2705 **Factual:** The `async-io` crate spawns a dedicated thread named \"async-io\" the first time `Async` or `Timer` is used, which waits for I/O events and wakes futures blocked on I/O or timers.  \n\u274c **Counterfactual:** The `async-io` crate spawns a separate thread for each instance of `Async` or `Timer`, leading to multiple threads being created for handling I/O events.  \n\n---\n\n### Pair 2: Platform-Specific I/O Mechanisms  \n\u2705 **Factual:** On Linux, `async-io` uses `epoll` to wait for I/O events, while on macOS it uses `kqueue`, and on Windows it uses IOCP. These mechanisms are provided by the `polling` crate.  \n\u274c **Counterfactual:** The `async-io` crate uses a custom I/O event polling mechanism implemented directly within the crate, rather than relying on the `polling` crate for platform-specific functionality.  \n\n---\n\n### Pair 3: `block_on` Functionality  \n\u2705 **Factual:** The `block_on` function in `async-io` allows processing I/O events and waking futures on any thread, making the \"async-io\" thread a fallback mechanism.  \n\u274c **Counterfactual:** The `block_on` function in `async-io` exclusively relies on the \"",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}