{
    "name": "actix-web",
    "version": "4.11.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/actix-web/latest/actix_web/all.html \"show sidebar\")\n# Crate actix_webCopy item path\n[Settings](https://docs.rs/actix-web/latest/settings.html)\n[Help](https://docs.rs/actix-web/latest/help.html)\nSummary[Source](https://docs.rs/actix-web/latest/src/actix_web/lib.rs.html#1-149)\nExpand description\nActix Web is a powerful, pragmatic, and extremely fast web framework for Rust.\n## [\u00a7](https://docs.rs/actix-web/latest/actix_web/#examples)Examples\n```\nuse actix_web::{get, web, App, HttpServer, Responder};\n#[get(\"/hello/{name}\")]\nasync fn greet(name: web::Path<String>) -> impl Responder {\n  format!(\"Hello {}!\", name)\n}\n#[actix_web::main] // or #[tokio::main]\nasync fn main() -> std::io::Result<()> {\n  HttpServer::new(|| {\n    App::new().service(greet)\n  })\n  .bind((\"127.0.0.1\", 8080))?\n  .run()\n  .await\n}\n```\n\n## [\u00a7](https://docs.rs/actix-web/latest/actix_web/#documentation--community-resources)Documentation & Community Resources\nIn addition to this API documentation, several other resources are available:\n  * [Website & User Guide](https://actix.rs/)\n  * [Examples Repository](https://github.com/actix/examples)\n  * [Community Chat on Discord](https://discord.gg/NWpN5mmg3x)\n\n\nTo get started navigating the API docs, you may consider looking at the following pages first:\n  * [`App`](https://docs.rs/actix-web/latest/actix_web/struct.App.html \"struct actix_web::App\"): This struct represents an Actix Web application and is used to configure routes and other common application settings.\n  * [`HttpServer`](https://docs.rs/actix-web/latest/actix_web/struct.HttpServer.html \"struct actix_web::HttpServer\"): This struct represents an HTTP server instance and is used to instantiate and configure servers.\n  * [`web`](https://docs.rs/actix-web/latest/actix_web/web/index.html \"mod actix_web::web\"): This module provides essential types for route registration as well as common utilities for request handlers.\n  * [`HttpRequest`](https://docs.rs/actix-web/latest/actix_web/struct.HttpRequest.html \"struct actix_web::HttpRequest\") and [`HttpResponse`](https://docs.rs/actix-web/latest/actix_web/struct.HttpResponse.html \"struct actix_web::HttpResponse\"): These structs represent HTTP requests and responses and expose methods for creating, inspecting, and otherwise utilizing them.\n\n\n## [\u00a7](https://docs.rs/actix-web/latest/actix_web/#features)Features\n  * Supports HTTP/1.x and HTTP/2\n  * Streaming and pipelining\n  * Powerful [request routing](https://actix.rs/docs/url-dispatch/) with optional macros\n  * Full [Tokio](https://tokio.rs) compatibility\n  * Keep-alive and slow requests handling\n  * Client/server [WebSockets](https://actix.rs/docs/websockets/) support\n  * Transparent content compression/decompression (br, gzip, deflate, zstd)\n  * Multipart streams\n  * Static assets\n  * SSL support using OpenSSL or Rustls\n  * Middlewares ([Logger, Session, CORS, etc](https://docs.rs/actix-web/latest/actix_web/middleware/index.html \"mod actix_web::middleware\"))\n  * Integrates with the [`awc` HTTP client](https://docs.rs/awc/)\n  * Runs on stable Rust 1.54+\n\n\n## [\u00a7](https://docs.rs/actix-web/latest/actix_web/#crate-features)Crate Features\n  * `cookies` - cookies support (enabled by default)\n  * `macros` - routing and runtime macros (enabled by default)\n  * `compress-brotli` - brotli content encoding compression support (enabled by default)\n  * `compress-gzip` - gzip and deflate content encoding compression support (enabled by default)\n  * `compress-zstd` - zstd content encoding compression support (enabled by default)\n  * `openssl` - HTTPS support via `openssl` crate, supports `HTTP/2`\n  * `rustls` - HTTPS support via `rustls` 0.20 crate, supports `HTTP/2`\n  * `rustls-0_21` - HTTPS support via `rustls` 0.21 crate, supports `HTTP/2`\n  * `rustls-0_22` - HTTPS support via `rustls` 0.22 crate, supports `HTTP/2`\n  * `rustls-0_23` - HTTPS support via `rustls` 0.23 crate, supports `HTTP/2`\n  * `secure-cookies` - secure cookies support\n\n\n## Re-exports[\u00a7](https://docs.rs/actix-web/latest/actix_web/#reexports)\n\n`pub use crate::error::Error[](https://docs.rs/actix-web/latest/actix_web/error/struct.Error.html \"struct actix_web::error::Error\");`\n\n\n`pub use crate::error::ResponseError[](https://docs.rs/actix-web/latest/actix_web/error/trait.ResponseError.html \"trait actix_web::error::ResponseError\");`\n\n\n`pub use mime[](https://docs.rs/mime/0.3.17/x86_64-unknown-linux-gnu/mime/index.html \"mod mime\");`\n\n## Modules[\u00a7](https://docs.rs/actix-web/latest/actix_web/#modules)\n\n[body](https://docs.rs/actix-web/latest/actix_web/body/index.html \"mod actix_web::body\")\n    Traits and structures to aid consuming and writing HTTP payloads.\n\n[cookie](https://docs.rs/actix-web/latest/actix_web/cookie/index.html \"mod actix_web::cookie\")`cookies`\n    HTTP cookie parsing and cookie jar management.\n\n[dev](https://docs.rs/actix-web/latest/actix_web/dev/index.html \"mod actix_web::dev\")\n    Lower-level types and re-exports.\n\n[error](https://docs.rs/actix-web/latest/actix_web/error/index.html \"mod actix_web::error\")\n    Error and Result module\n\n[guard](https://docs.rs/actix-web/latest/actix_web/guard/index.html \"mod actix_web::guard\")\n    Route guards.\n\n[http](https://docs.rs/actix-web/latest/actix_web/http/index.html \"mod actix_web::http\")\n    Various HTTP related types.\n\n[middleware](https://docs.rs/actix-web/latest/actix_web/middleware/index.html \"mod actix_web::middleware\")\n    A collection of common middleware.\n\n[rt](https://docs.rs/actix-web/latest/actix_web/rt/index.html \"mod actix_web::rt\")\n    A selection of re-exports from [`tokio`](https://docs.rs/tokio) and [`actix-rt`](https://docs.rs/actix-rt).\n\n[test](https://docs.rs/actix-web/latest/actix_web/test/index.html \"mod actix_web::test\")\n    Various helpers for Actix applications to use during testing.\n\n[web](https://docs.rs/actix-web/latest/actix_web/web/index.html \"mod actix_web::web\")\n    Essentials helper functions and types for application registration.\n## Macros[\u00a7](https://docs.rs/actix-web/latest/actix_web/#macros)\n\n[services](https://docs.rs/actix-web/latest/actix_web/macro.services.html \"macro actix_web::services\")\n    Macro to help register different types of services at the same time.\n## Structs[\u00a7](https://docs.rs/actix-web/latest/actix_web/#structs)\n\n[App](https://docs.rs/actix-web/latest/actix_web/struct.App.html \"struct actix_web::App\")\n    The top-level builder for an Actix Web application.\n\n[CustomizeResponder](https://docs.rs/actix-web/latest/actix_web/struct.CustomizeResponder.html \"struct actix_web::CustomizeResponder\")\n    Allows overriding status code and headers (including cookies) for a [`Responder`](https://docs.rs/actix-web/latest/actix_web/trait.Responder.html \"trait actix_web::Responder\").\n\n[HttpRequest](https://docs.rs/actix-web/latest/actix_web/struct.HttpRequest.html \"struct actix_web::HttpRequest\")\n    An incoming request.\n\n[HttpResponse](https://docs.rs/actix-web/latest/actix_web/struct.HttpResponse.html \"struct actix_web::HttpResponse\")\n    An outgoing response.\n\n[HttpResponseBuilder](https://docs.rs/actix-web/latest/actix_web/struct.HttpResponseBuilder.html \"struct actix_web::HttpResponseBuilder\")\n    An HTTP response builder.\n\n[HttpServer](https://docs.rs/actix-web/latest/actix_web/struct.HttpServer.html \"struct actix_web::HttpServer\")\n    An HTTP Server.\n\n[Resource](https://docs.rs/actix-web/latest/actix_web/struct.Resource.html \"struct actix_web::Resource\")\n    A collection of [`Route`](https://docs.rs/actix-web/latest/actix_web/struct.Route.html \"struct actix_web::Route\")s that respond to the same path pattern.\n\n[Route](https://docs.rs/actix-web/latest/actix_web/struct.Route.html \"struct actix_web::Route\")\n    A request handler with [guards](https://docs.rs/actix-web/latest/actix_web/guard/index.html \"mod actix_web::guard\").\n\n[Scope](https://docs.rs/actix-web/latest/actix_web/struct.Scope.html \"struct actix_web::Scope\")\n    A collection of [`Route`](https://docs.rs/actix-web/latest/actix_web/struct.Route.html \"struct actix_web::Route\")s, [`Resource`](https://docs.rs/actix-web/latest/actix_web/struct.Resource.html \"struct actix_web::Resource\")s, or other services that share a common path prefix.\n## Enums[\u00a7](https://docs.rs/actix-web/latest/actix_web/#enums)\n\n[Either](https://docs.rs/actix-web/latest/actix_web/enum.Either.html \"enum actix_web::Either\")\n    Combines two extractor or responder types into a single type.\n## Traits[\u00a7](https://docs.rs/actix-web/latest/actix_web/#traits)\n\n[FromRequest](https://docs.rs/actix-web/latest/actix_web/trait.FromRequest.html \"trait actix_web::FromRequest\")\n    A type that implements [`FromRequest`](https://docs.rs/actix-web/latest/actix_web/trait.FromRequest.html \"trait actix_web::FromRequest\") is called an **extractor** and can extract data from the request. Some types that implement this trait are: [`Json`](https://docs.rs/actix-web/latest/actix_web/web/struct.Json.html \"struct actix_web::web::Json\"), [`Header`](https://docs.rs/actix-web/latest/actix_web/web/struct.Header.html \"struct actix_web::web::Header\"), and [`Path`](https://docs.rs/actix-web/latest/actix_web/web/struct.Path.html \"struct actix_web::web::Path\").\n\n[Handler](https://docs.rs/actix-web/latest/actix_web/trait.Handler.html \"trait actix_web::Handler\")\n    The interface for request handlers.\n\n[HttpMessage](https://docs.rs/actix-web/latest/actix_web/trait.HttpMessage.html \"trait actix_web::HttpMessage\")\n    Trait that implements general purpose operations on HTTP messages.\n\n[Responder](https://docs.rs/actix-web/latest/actix_web/trait.Responder.html \"trait actix_web::Responder\")\n    Trait implemented by types that can be converted to an HTTP response.\n## Type Aliases[\u00a7](https://docs.rs/actix-web/latest/actix_web/#types)\n\n[Result](https://docs.rs/actix-web/latest/actix_web/type.Result.html \"type actix_web::Result\")\n    A convenience [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\") for Actix Web operations.\n## Attribute Macros[\u00a7](https://docs.rs/actix-web/latest/actix_web/#attributes)\n\n[connect](https://docs.rs/actix-web/latest/actix_web/attr.connect.html \"attr actix_web::connect\")`macros`\n    Creates route handler with `actix_web::guard::Connect`.\n\n[delete](https://docs.rs/actix-web/latest/actix_web/attr.delete.html \"attr actix_web::delete\")`macros`\n    Creates route handler with `actix_web::guard::Delete`.\n\n[get](https://docs.rs/actix-web/latest/actix_web/attr.get.html \"attr actix_web::get\")`macros`\n    Creates route handler with `actix_web::guard::Get`.\n\n[head](https://docs.rs/actix-web/latest/actix_web/attr.head.html \"attr actix_web::head\")`macros`\n    Creates route handler with `actix_web::guard::Head`.\n\n[main](https://docs.rs/actix-web/latest/actix_web/attr.main.html \"attr actix_web::main\")`macros`\n    Marks async main function as the Actix Web system entry-point.\n\n[options](https://docs.rs/actix-web/latest/actix_web/attr.options.html \"attr actix_web::options\")`macros`\n    Creates route handler with `actix_web::guard::Options`.\n\n[patch](https://docs.rs/actix-web/latest/actix_web/attr.patch.html \"attr actix_web::patch\")`macros`\n    Creates route handler with `actix_web::guard::Patch`.\n\n[post](https://docs.rs/actix-web/latest/actix_web/attr.post.html \"attr actix_web::post\")`macros`\n    Creates route handler with `actix_web::guard::Post`.\n\n[put](https://docs.rs/actix-web/latest/actix_web/attr.put.html \"attr actix_web::put\")`macros`\n    Creates route handler with `actix_web::guard::Put`.\n\n[route](https://docs.rs/actix-web/latest/actix_web/attr.route.html \"attr actix_web::route\")`macros`\n    Creates resource handler, allowing multiple HTTP method guards.\n\n[routes](https://docs.rs/actix-web/latest/actix_web/attr.routes.html \"attr actix_web::routes\")`macros`\n    Creates resource handler, allowing multiple HTTP methods and paths.\n\n[scope](https://docs.rs/actix-web/latest/actix_web/attr.scope.html \"attr actix_web::scope\")`macros`\n    Prepends a path prefix to all handlers using routing macros inside the attached module.\n\n[test](https://docs.rs/actix-web/latest/actix_web/attr.test.html \"attr actix_web::test\")`macros`\n    Marks async test functions to use the Actix Web system entry-point.\n\n[trace](https://docs.rs/actix-web/latest/actix_web/attr.trace.html \"attr actix_web::trace\")`macros`\n    Creates route handler with `actix_web::guard::Trace`.\n",
        "markdown_with_citations": "[](https://docs.rs/actix-web/latest/actix_web/all.html \"show sidebar\")\n# Crate actix_webCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nActix Web is a powerful, pragmatic, and extremely fast web framework for Rust.\n## \u00a7\u27e84\u27e9Examples\n```\nuse actix_web::{get, web, App, HttpServer, Responder};\n#[get(\"/hello/{name}\")]\nasync fn greet(name: web::Path<String>) -> impl Responder {\n  format!(\"Hello {}!\", name)\n}\n#[actix_web::main] // or #[tokio::main]\nasync fn main() -> std::io::Result<()> {\n  HttpServer::new(|| {\n    App::new().service(greet)\n  })\n  .bind((\"127.0.0.1\", 8080))?\n  .run()\n  .await\n}\n```\n\n## \u00a7\u27e85\u27e9Documentation & Community Resources\nIn addition to this API documentation, several other resources are available:\n  * Website & User Guide\u27e86\u27e9\n  * Examples Repository\u27e87\u27e9\n  * Community Chat on Discord\u27e88\u27e9\n\n\nTo get started navigating the API docs, you may consider looking at the following pages first:\n  * `App`\u27e89\u27e9: This struct represents an Actix Web application and is used to configure routes and other common application settings.\n  * `HttpServer`\u27e810\u27e9: This struct represents an HTTP server instance and is used to instantiate and configure servers.\n  * `web`\u27e811\u27e9: This module provides essential types for route registration as well as common utilities for request handlers.\n  * `HttpRequest`\u27e812\u27e9 and `HttpResponse`\u27e813\u27e9: These structs represent HTTP requests and responses and expose methods for creating, inspecting, and otherwise utilizing them.\n\n\n## \u00a7\u27e814\u27e9Features\n  * Supports HTTP/1.x and HTTP/2\n  * Streaming and pipelining\n  * Powerful request routing\u27e815\u27e9 with optional macros\n  * Full Tokio\u27e816\u27e9 compatibility\n  * Keep-alive and slow requests handling\n  * Client/server WebSockets\u27e817\u27e9 support\n  * Transparent content compression/decompression (br, gzip, deflate, zstd)\n  * Multipart streams\n  * Static assets\n  * SSL support using OpenSSL or Rustls\n  * Middlewares (Logger, Session, CORS, etc\u27e818\u27e9)\n  * Integrates with the `awc` HTTP client\u27e819\u27e9\n  * Runs on stable Rust 1.54+\n\n\n## \u00a7\u27e820\u27e9Crate Features\n  * `cookies` - cookies support (enabled by default)\n  * `macros` - routing and runtime macros (enabled by default)\n  * `compress-brotli` - brotli content encoding compression support (enabled by default)\n  * `compress-gzip` - gzip and deflate content encoding compression support (enabled by default)\n  * `compress-zstd` - zstd content encoding compression support (enabled by default)\n  * `openssl` - HTTPS support via `openssl` crate, supports `HTTP/2`\n  * `rustls` - HTTPS support via `rustls` 0.20 crate, supports `HTTP/2`\n  * `rustls-0_21` - HTTPS support via `rustls` 0.21 crate, supports `HTTP/2`\n  * `rustls-0_22` - HTTPS support via `rustls` 0.22 crate, supports `HTTP/2`\n  * `rustls-0_23` - HTTPS support via `rustls` 0.23 crate, supports `HTTP/2`\n  * `secure-cookies` - secure cookies support\n\n\n## Re-exports\u00a7\u27e821\u27e9\n\n`pub use crate::error::Error[](https://docs.rs/actix-web/latest/actix_web/error/struct.Error.html \"struct actix_web::error::Error\");`\n\n\n`pub use crate::error::ResponseError[](https://docs.rs/actix-web/latest/actix_web/error/trait.ResponseError.html \"trait actix_web::error::ResponseError\");`\n\n\n`pub use mime[](https://docs.rs/mime/0.3.17/x86_64-unknown-linux-gnu/mime/index.html \"mod mime\");`\n\n## Modules\u00a7\u27e822\u27e9\n\nbody\u27e823\u27e9\n    Traits and structures to aid consuming and writing HTTP payloads.\n\ncookie\u27e824\u27e9`cookies`\n    HTTP cookie parsing and cookie jar management.\n\ndev\u27e825\u27e9\n    Lower-level types and re-exports.\n\nerror\u27e826\u27e9\n    Error and Result module\n\nguard\u27e827\u27e9\n    Route guards.\n\nhttp\u27e828\u27e9\n    Various HTTP related types.\n\nmiddleware\u27e818\u27e9\n    A collection of common middleware.\n\nrt\u27e829\u27e9\n    A selection of re-exports from `tokio`\u27e830\u27e9 and `actix-rt`\u27e831\u27e9.\n\ntest\u27e832\u27e9\n    Various helpers for Actix applications to use during testing.\n\nweb\u27e811\u27e9\n    Essentials helper functions and types for application registration.\n## Macros\u00a7\u27e833\u27e9\n\nservices\u27e834\u27e9\n    Macro to help register different types of services at the same time.\n## Structs\u00a7\u27e835\u27e9\n\nApp\u27e89\u27e9\n    The top-level builder for an Actix Web application.\n\nCustomizeResponder\u27e836\u27e9\n    Allows overriding status code and headers (including cookies) for a `Responder`\u27e837\u27e9.\n\nHttpRequest\u27e812\u27e9\n    An incoming request.\n\nHttpResponse\u27e813\u27e9\n    An outgoing response.\n\nHttpResponseBuilder\u27e838\u27e9\n    An HTTP response builder.\n\nHttpServer\u27e810\u27e9\n    An HTTP Server.\n\nResource\u27e839\u27e9\n    A collection of `Route`\u27e840\u27e9s that respond to the same path pattern.\n\nRoute\u27e840\u27e9\n    A request handler with guards\u27e827\u27e9.\n\nScope\u27e841\u27e9\n    A collection of `Route`\u27e840\u27e9s, `Resource`\u27e839\u27e9s, or other services that share a common path prefix.\n## Enums\u00a7\u27e842\u27e9\n\nEither\u27e843\u27e9\n    Combines two extractor or responder types into a single type.\n## Traits\u00a7\u27e844\u27e9\n\nFromRequest\u27e845\u27e9\n    A type that implements `FromRequest`\u27e845\u27e9 is called an **extractor** and can extract data from the request. Some types that implement this trait are: `Json`\u27e846\u27e9, `Header`\u27e847\u27e9, and `Path`\u27e848\u27e9.\n\nHandler\u27e849\u27e9\n    The interface for request handlers.\n\nHttpMessage\u27e850\u27e9\n    Trait that implements general purpose operations on HTTP messages.\n\nResponder\u27e837\u27e9\n    Trait implemented by types that can be converted to an HTTP response.\n## Type Aliases\u00a7\u27e851\u27e9\n\nResult\u27e852\u27e9\n    A convenience `Result`\u27e853\u27e9 for Actix Web operations.\n## Attribute Macros\u00a7\u27e854\u27e9\n\nconnect\u27e855\u27e9`macros`\n    Creates route handler with `actix_web::guard::Connect`.\n\ndelete\u27e856\u27e9`macros`\n    Creates route handler with `actix_web::guard::Delete`.\n\nget\u27e857\u27e9`macros`\n    Creates route handler with `actix_web::guard::Get`.\n\nhead\u27e858\u27e9`macros`\n    Creates route handler with `actix_web::guard::Head`.\n\nmain\u27e859\u27e9`macros`\n    Marks async main function as the Actix Web system entry-point.\n\noptions\u27e860\u27e9`macros`\n    Creates route handler with `actix_web::guard::Options`.\n\npatch\u27e861\u27e9`macros`\n    Creates route handler with `actix_web::guard::Patch`.\n\npost\u27e862\u27e9`macros`\n    Creates route handler with `actix_web::guard::Post`.\n\nput\u27e863\u27e9`macros`\n    Creates route handler with `actix_web::guard::Put`.\n\nroute\u27e864\u27e9`macros`\n    Creates resource handler, allowing multiple HTTP method guards.\n\nroutes\u27e865\u27e9`macros`\n    Creates resource handler, allowing multiple HTTP methods and paths.\n\nscope\u27e866\u27e9`macros`\n    Prepends a path prefix to all handlers using routing macros inside the attached module.\n\ntest\u27e867\u27e9`macros`\n    Marks async test functions to use the Actix Web system entry-point.\n\ntrace\u27e868\u27e9`macros`\n    Creates route handler with `actix_web::guard::Trace`.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/actix-web/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/actix-web/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/actix-web/latest/src/actix_web/lib.rs.html#1-149: Source\n\u27e84\u27e9 https://docs.rs/actix-web/latest/actix_web/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/actix-web/latest/actix_web/#documentation--community-resources: \u00a7\n\u27e86\u27e9 https://actix.rs/: Website & User Guide\n\u27e87\u27e9 https://github.com/actix/examples: Examples Repository\n\u27e88\u27e9 https://discord.gg/NWpN5mmg3x: Community Chat on Discord\n\u27e89\u27e9 https://docs.rs/actix-web/latest/actix_web/struct.App.html: struct actix_web::App - `App`\n\u27e810\u27e9 https://docs.rs/actix-web/latest/actix_web/struct.HttpServer.html: struct actix_web::HttpServer - `HttpServer`\n\u27e811\u27e9 https://docs.rs/actix-web/latest/actix_web/web/index.html: mod actix_web::web - `web`\n\u27e812\u27e9 https://docs.rs/actix-web/latest/actix_web/struct.HttpRequest.html: struct actix_web::HttpRequest - `HttpRequest`\n\u27e813\u27e9 https://docs.rs/actix-web/latest/actix_web/struct.HttpResponse.html: struct actix_web::HttpResponse - `HttpResponse`\n\u27e814\u27e9 https://docs.rs/actix-web/latest/actix_web/#features: \u00a7\n\u27e815\u27e9 https://actix.rs/docs/url-dispatch/: request routing\n\u27e816\u27e9 https://tokio.rs: Tokio\n\u27e817\u27e9 https://actix.rs/docs/websockets/: WebSockets\n\u27e818\u27e9 https://docs.rs/actix-web/latest/actix_web/middleware/index.html: mod actix_web::middleware - Logger, Session, CORS, etc\n\u27e819\u27e9 https://docs.rs/awc/: `awc` HTTP client\n\u27e820\u27e9 https://docs.rs/actix-web/latest/actix_web/#crate-features: \u00a7\n\u27e821\u27e9 https://docs.rs/actix-web/latest/actix_web/#reexports: \u00a7\n\u27e822\u27e9 https://docs.rs/actix-web/latest/actix_web/#modules: \u00a7\n\u27e823\u27e9 https://docs.rs/actix-web/latest/actix_web/body/index.html: mod actix_web::body - body\n\u27e824\u27e9 https://docs.rs/actix-web/latest/actix_web/cookie/index.html: mod actix_web::cookie - cookie\n\u27e825\u27e9 https://docs.rs/actix-web/latest/actix_web/dev/index.html: mod actix_web::dev - dev\n\u27e826\u27e9 https://docs.rs/actix-web/latest/actix_web/error/index.html: mod actix_web::error - error\n\u27e827\u27e9 https://docs.rs/actix-web/latest/actix_web/guard/index.html: mod actix_web::guard - guard\n\u27e828\u27e9 https://docs.rs/actix-web/latest/actix_web/http/index.html: mod actix_web::http - http\n\u27e829\u27e9 https://docs.rs/actix-web/latest/actix_web/rt/index.html: mod actix_web::rt - rt\n\u27e830\u27e9 https://docs.rs/tokio: `tokio`\n\u27e831\u27e9 https://docs.rs/actix-rt: `actix-rt`\n\u27e832\u27e9 https://docs.rs/actix-web/latest/actix_web/test/index.html: mod actix_web::test - test\n\u27e833\u27e9 https://docs.rs/actix-web/latest/actix_web/#macros: \u00a7\n\u27e834\u27e9 https://docs.rs/actix-web/latest/actix_web/macro.services.html: macro actix_web::services - services\n\u27e835\u27e9 https://docs.rs/actix-web/latest/actix_web/#structs: \u00a7\n\u27e836\u27e9 https://docs.rs/actix-web/latest/actix_web/struct.CustomizeResponder.html: struct actix_web::CustomizeResponder - CustomizeResponder\n\u27e837\u27e9 https://docs.rs/actix-web/latest/actix_web/trait.Responder.html: trait actix_web::Responder - `Responder`\n\u27e838\u27e9 https://docs.rs/actix-web/latest/actix_web/struct.HttpResponseBuilder.html: struct actix_web::HttpResponseBuilder - HttpResponseBuilder\n\u27e839\u27e9 https://docs.rs/actix-web/latest/actix_web/struct.Resource.html: struct actix_web::Resource - Resource\n\u27e840\u27e9 https://docs.rs/actix-web/latest/actix_web/struct.Route.html: struct actix_web::Route - `Route`\n\u27e841\u27e9 https://docs.rs/actix-web/latest/actix_web/struct.Scope.html: struct actix_web::Scope - Scope\n\u27e842\u27e9 https://docs.rs/actix-web/latest/actix_web/#enums: \u00a7\n\u27e843\u27e9 https://docs.rs/actix-web/latest/actix_web/enum.Either.html: enum actix_web::Either - Either\n\u27e844\u27e9 https://docs.rs/actix-web/latest/actix_web/#traits: \u00a7\n\u27e845\u27e9 https://docs.rs/actix-web/latest/actix_web/trait.FromRequest.html: trait actix_web::FromRequest - FromRequest\n\u27e846\u27e9 https://docs.rs/actix-web/latest/actix_web/web/struct.Json.html: struct actix_web::web::Json - `Json`\n\u27e847\u27e9 https://docs.rs/actix-web/latest/actix_web/web/struct.Header.html: struct actix_web::web::Header - `Header`\n\u27e848\u27e9 https://docs.rs/actix-web/latest/actix_web/web/struct.Path.html: struct actix_web::web::Path - `Path`\n\u27e849\u27e9 https://docs.rs/actix-web/latest/actix_web/trait.Handler.html: trait actix_web::Handler - Handler\n\u27e850\u27e9 https://docs.rs/actix-web/latest/actix_web/trait.HttpMessage.html: trait actix_web::HttpMessage - HttpMessage\n\u27e851\u27e9 https://docs.rs/actix-web/latest/actix_web/#types: \u00a7\n\u27e852\u27e9 https://docs.rs/actix-web/latest/actix_web/type.Result.html: type actix_web::Result - Result\n\u27e853\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n\u27e854\u27e9 https://docs.rs/actix-web/latest/actix_web/#attributes: \u00a7\n\u27e855\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.connect.html: attr actix_web::connect - connect\n\u27e856\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.delete.html: attr actix_web::delete - delete\n\u27e857\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.get.html: attr actix_web::get - get\n\u27e858\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.head.html: attr actix_web::head - head\n\u27e859\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.main.html: attr actix_web::main - main\n\u27e860\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.options.html: attr actix_web::options - options\n\u27e861\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.patch.html: attr actix_web::patch - patch\n\u27e862\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.post.html: attr actix_web::post - post\n\u27e863\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.put.html: attr actix_web::put - put\n\u27e864\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.route.html: attr actix_web::route - route\n\u27e865\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.routes.html: attr actix_web::routes - routes\n\u27e866\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.scope.html: attr actix_web::scope - scope\n\u27e867\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.test.html: attr actix_web::test - test\n\u27e868\u27e9 https://docs.rs/actix-web/latest/actix_web/attr.trace.html: attr actix_web::trace - trace\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `actix-web` crate is a high-performance, asynchronous web framework for Rust, designed for building fast and scalable web applications. It supports HTTP/1.x and HTTP/2, WebSockets, content compression, SSL via OpenSSL or Rustls, and integrates seamlessly with Tokio. Key features include powerful request routing with macros, middleware support (e.g., logging, CORS), and utilities for handling static assets, multipart streams, and cookies.",
    "feature_summary": null,
    "use_case": "Web Framework",
    "score": 9.0,
    "factual_counterfactual": "### Pair 1: HTTP Protocol Support  \n\u2705 Factual: Actix Web supports both HTTP/1.x and HTTP/2, enabling efficient communication with modern web servers and clients.  \n\u274c Counterfactual: Actix Web supports HTTP/3, providing cutting-edge performance for next-generation web applications.  \n\n---\n\n### Pair 2: Asynchronous Runtime Compatibility  \n\u2705 Factual: Actix Web is fully compatible with the Tokio asynchronous runtime, allowing seamless integration with other async libraries in the Rust ecosystem.  \n\u274c Counterfactual: Actix Web requires a custom asynchronous runtime and cannot be used with Tokio or other popular runtimes.  \n\n---\n\n### Pair 3: WebSocket Support  \n\u2705 Factual: Actix Web provides built-in support for WebSockets, enabling real-time bidirectional communication between clients and servers.  \n\u274c Counterfactual: Actix Web does not support WebSockets and requires third-party crates for real-time communication features.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}