{
    "name": "glium",
    "version": "0.36.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/glium/latest/glium/all.html \"show sidebar\")\n# Crate gliumCopy item path\n[Settings](https://docs.rs/glium/latest/settings.html)\n[Help](https://docs.rs/glium/latest/help.html)\nSummary[Source](https://docs.rs/glium/latest/src/glium/lib.rs.html#1-1407)\nExpand description\nEasy-to-use, high-level, OpenGL3+ wrapper.\nGlium is based on glutin - a cross-platform crate for building an OpenGL window and handling application events.\nGlium provides a [`Display`](https://docs.rs/glium/latest/glium/backend/glutin/struct.Display.html \"struct glium::backend::glutin::Display\") which uses `glutin` for the Window and its associated GL Context.\n## [\u00a7](https://docs.rs/glium/latest/glium/#initialization)Initialization\nThe initialisation of a simple glium display occurs in two steps.\n```\nextern crate glium;\n// Use the re-exported winit dependency to avoid version mismatches.\n// Requires the `simple_window_builder` feature.\nuse glium::winit;\nfn main() {\n  // 1. The **winit::EventLoop** for handling events.\n  let event_loop = winit::event_loop::EventLoopBuilder::new().build().unwrap();\n  // 2. Create a glutin context and glium Display\n  let (window, display) = glium::backend::glutin::SimpleWindowBuilder::new().build(&event_loop);\n}\n```\n\nThe `display` object is the most important object of this library and is used when you build buffers, textures, etc. and when you draw.\nYou can clone it and pass it around. However it doesn\u2019t implement the `Send` and `Sync` traits, meaning that you can\u2019t pass it to another thread.\nThe display has ownership of both the window and context, and also provides some methods related to domains such as events handling.\n## [\u00a7](https://docs.rs/glium/latest/glium/#overview)Overview\nOpenGL is similar to drawing software: you draw something, then draw over it, then over it again, etc. until you are satisfied of the result.\nOnce you have a `display`, you can call `let mut frame = display.draw();` to start drawing. This `frame` object implements [the `Surface` trait](https://docs.rs/glium/latest/glium/trait.Surface.html \"trait glium::Surface\") and provides some functions such as `clear_color`, but also allows you to draw with the rendering pipeline.\nIn order to draw something, you will need to pass:\n  * A source of vertices (see the [`vertex`](https://docs.rs/glium/latest/glium/vertex/index.html \"mod glium::vertex\") module)\n  * A source of indices (see the [`index`](https://docs.rs/glium/latest/glium/index/index.html \"mod glium::index\") module)\n  * A program that contains the shader that the GPU will execute (see the [`program`](https://docs.rs/glium/latest/glium/program/index.html \"mod glium::program\") module)\n  * A list of uniforms for the program (see the [`uniforms`](https://docs.rs/glium/latest/glium/uniforms/index.html \"mod glium::uniforms\") module)\n  * Draw parameters to customize the drawing process (see the [`draw_parameters`](https://docs.rs/glium/latest/glium/draw_parameters/index.html \"mod glium::draw_parameters\") module)\n\n\nOnce you have finished drawing, you can call `frame.finish()` to swap buffers and present the result to the user.\n## [\u00a7](https://docs.rs/glium/latest/glium/#opengl-equivalents-in-glium)OpenGL equivalents in glium\n  * **Bind points** : Glium automatically binds and unbinds buffers, textures, etc. in an optimized way.\n  * **Buffers** : Buffers are strongly typed and can be used through `vertex::VertexBuffer`, `index::IndexBuffer` or `uniforms::UniformBuffer`.\n  * **Debug output** : If you compile in debug mode, glium registers a debug output callback and panics if an OpenGL error happens.\n  * **Framebuffer Objects** : FBOs are automatically managed by glium and are stored in the `Context` object. You can specify the attachments that you wish with the `framebuffer` module.\n  * **Instancing** : Instancing is done either by passing a `vertex::EmptyInstanceAttributes` marker or one or several references to vertex buffers wrapped inside a `PerInstance` struct. See the `vertex` module for more infos.\n  * **Memory barriers** : Calling `glMemoryBarrier` is automatically handled by glium, however you still need to call `memoryBarrier()` in your GLSL code in some situations.\n  * **Programs** : See the `program` module.\n  * **Query objects** : The corresponding structs are in the `draw_parameters` module. They are passed as draw parameters.\n  * **Renderbuffer** : See the `framebuffer` module.\n  * **Render to texture** : If you just want to draw on a texture, you can call `texture.as_surface()`. For more advanced options, see the `framebuffer` module.\n  * **Samplers** : Samplers are automatically managed by glium and are stored in the `Context` object. You can specify how a texture should be sampled by using a `Sampler` dummy object in the `uniforms` module.\n  * **Shaders** : You can\u2019t manually create individual shaders. Instead you must create whole programs at once.\n  * **Textures** : Textures are strongly typed and are found in the `texture` module.\n  * **Uniform blocks** : If your program uses uniform blocks, you must pass a reference to a uniform buffer for the name of the block when drawing.\n  * **Vertex array objects** : VAOs are automatically managed by glium if the backend supports them.\n\n\n## Re-exports[\u00a7](https://docs.rs/glium/latest/glium/#reexports)\n\n`pub use crate::draw_parameters::Blend[](https://docs.rs/glium/latest/glium/draw_parameters/struct.Blend.html \"struct glium::draw_parameters::Blend\");`\n\n\n`pub use crate::draw_parameters::BlendingFunction[](https://docs.rs/glium/latest/glium/draw_parameters/enum.BlendingFunction.html \"enum glium::draw_parameters::BlendingFunction\");`\n\n\n`pub use crate::draw_parameters::LinearBlendingFactor[](https://docs.rs/glium/latest/glium/draw_parameters/enum.LinearBlendingFactor.html \"enum glium::draw_parameters::LinearBlendingFactor\");`\n\n\n`pub use crate::draw_parameters::BackfaceCullingMode[](https://docs.rs/glium/latest/glium/draw_parameters/enum.BackfaceCullingMode.html \"enum glium::draw_parameters::BackfaceCullingMode\");`\n\n\n`pub use crate::draw_parameters::Depth[](https://docs.rs/glium/latest/glium/draw_parameters/struct.Depth.html \"struct glium::draw_parameters::Depth\");`\n\n\n`pub use crate::draw_parameters::DepthTest[](https://docs.rs/glium/latest/glium/draw_parameters/enum.DepthTest.html \"enum glium::draw_parameters::DepthTest\");`\n\n\n`pub use crate::draw_parameters::PolygonMode[](https://docs.rs/glium/latest/glium/draw_parameters/enum.PolygonMode.html \"enum glium::draw_parameters::PolygonMode\");`\n\n\n`pub use crate::draw_parameters::DrawParameters[](https://docs.rs/glium/latest/glium/draw_parameters/struct.DrawParameters.html \"struct glium::draw_parameters::DrawParameters\");`\n\n\n`pub use crate::draw_parameters::StencilTest[](https://docs.rs/glium/latest/glium/draw_parameters/enum.StencilTest.html \"enum glium::draw_parameters::StencilTest\");`\n\n\n`pub use crate::draw_parameters::StencilOperation[](https://docs.rs/glium/latest/glium/draw_parameters/enum.StencilOperation.html \"enum glium::draw_parameters::StencilOperation\");`\n\n\n`pub use crate::draw_parameters::Smooth[](https://docs.rs/glium/latest/glium/draw_parameters/enum.Smooth.html \"enum glium::draw_parameters::Smooth\");`\n\n\n`pub use crate::index::IndexBuffer[](https://docs.rs/glium/latest/glium/index/struct.IndexBuffer.html \"struct glium::index::IndexBuffer\");`\n\n\n`pub use crate::vertex::VertexBuffer[](https://docs.rs/glium/latest/glium/vertex/struct.VertexBuffer.html \"struct glium::vertex::VertexBuffer\");`\n\n\n`pub use crate::vertex::Vertex[](https://docs.rs/glium/latest/glium/vertex/trait.Vertex.html \"trait glium::vertex::Vertex\");`\n\n\n`pub use crate::vertex::VertexFormat[](https://docs.rs/glium/latest/glium/vertex/type.VertexFormat.html \"type glium::vertex::VertexFormat\");`\n\n\n`pub use crate::program::Program[](https://docs.rs/glium/latest/glium/program/struct.Program.html \"struct glium::program::Program\");`\n\n\n`pub use crate::program::ProgramCreationError[](https://docs.rs/glium/latest/glium/program/enum.ProgramCreationError.html \"enum glium::program::ProgramCreationError\");`\n\n\n`pub use crate::program::ProgramCreationError::CompilationError[](https://docs.rs/glium/latest/glium/program/enum.ProgramCreationError.html \"enum glium::program::ProgramCreationError\");`\n\n\n`pub use crate::program::ProgramCreationError::LinkingError[](https://docs.rs/glium/latest/glium/program/enum.ProgramCreationError.html \"enum glium::program::ProgramCreationError\");`\n\n\n`pub use crate::program::ProgramCreationError::ShaderTypeNotSupported[](https://docs.rs/glium/latest/glium/program/enum.ProgramCreationError.html \"enum glium::program::ProgramCreationError\");`\n\n\n`pub use crate::texture::Texture2d[](https://docs.rs/glium/latest/glium/texture/struct.Texture2d.html \"struct glium::texture::Texture2d\");`\n\n\n`pub use crate::backend::glutin::Display[](https://docs.rs/glium/latest/glium/backend/glutin/struct.Display.html \"struct glium::backend::glutin::Display\");`\n\n\n`pub use crate::backend::glutin::glutin[](https://docs.rs/glutin/0.32.3/x86_64-unknown-linux-gnu/glutin/index.html \"mod glutin\");`\n\n\n`pub use crate::backend::winit[](https://docs.rs/winit/0.30.10/x86_64-unknown-linux-gnu/winit/index.html \"mod winit\");`\n\n## Modules[\u00a7](https://docs.rs/glium/latest/glium/#modules)\n\n[backend](https://docs.rs/glium/latest/glium/backend/index.html \"mod glium::backend\")\n    The `backend` module allows one to link between glium and the OpenGL context..\n\n[buffer](https://docs.rs/glium/latest/glium/buffer/index.html \"mod glium::buffer\")\n    A buffer is a memory location accessible to the video card.\n\n[debug](https://docs.rs/glium/latest/glium/debug/index.html \"mod glium::debug\")\n\n\n[draw_parameters](https://docs.rs/glium/latest/glium/draw_parameters/index.html \"mod glium::draw_parameters\")\n    Describes miscellaneous parameters to be used when drawing.\n\n[field](https://docs.rs/glium/latest/glium/field/index.html \"mod glium::field\")\n    Field utils\n\n[framebuffer](https://docs.rs/glium/latest/glium/framebuffer/index.html \"mod glium::framebuffer\")\n    Framebuffers allow you to customize the color, depth and stencil buffers you will draw on.\n\n[index](https://docs.rs/glium/latest/glium/index/index.html \"mod glium::index\")\n    In order to draw, you need to provide a way for the video card to know how to link primitives together.\n\n[memory_object](https://docs.rs/glium/latest/glium/memory_object/index.html \"mod glium::memory_object\")\n    Contains everything related to external API memory objects.\n\n[pixel_buffer](https://docs.rs/glium/latest/glium/pixel_buffer/index.html \"mod glium::pixel_buffer\")Deprecated\n    Moved to the `texture` module.\n\n[program](https://docs.rs/glium/latest/glium/program/index.html \"mod glium::program\")\n    Items related to creating an OpenGL program.\n\n[semaphore](https://docs.rs/glium/latest/glium/semaphore/index.html \"mod glium::semaphore\")\n    Contains everything related to external API semaphores.\n\n[texture](https://docs.rs/glium/latest/glium/texture/index.html \"mod glium::texture\")\n    A texture is an image loaded in video memory, which can be sampled in your shaders.\n\n[uniforms](https://docs.rs/glium/latest/glium/uniforms/index.html \"mod glium::uniforms\")\n    A uniform is a global variable in your program. In order to draw something, you will need to give `glium` the values of all your uniforms. Objects that implement the `Uniform` trait are here to do that.\n\n[vertex](https://docs.rs/glium/latest/glium/vertex/index.html \"mod glium::vertex\")\n    Contains everything related to vertex sources.\n## Macros[\u00a7](https://docs.rs/glium/latest/glium/#macros)\n\n[assert_no_gl_error](https://docs.rs/glium/latest/glium/macro.assert_no_gl_error.html \"macro glium::assert_no_gl_error\")\n    Calls the `assert_no_error` method on a `glium::Display` instance with file and line number information.\n\n[dynamic_uniform](https://docs.rs/glium/latest/glium/macro.dynamic_uniform.html \"macro glium::dynamic_uniform\")\n    Returns a Dynamic Uniforms Container to which values can be added later.\n\n[field](https://docs.rs/glium/latest/glium/macro.field.html \"macro glium::field\")\n    A macro to create a `Field`.\n\n[implement_buffer_content](https://docs.rs/glium/latest/glium/macro.implement_buffer_content.html \"macro glium::implement_buffer_content\")\n    Implements the `glium::buffer::Content` trait for the given type.\n\n[implement_uniform_block](https://docs.rs/glium/latest/glium/macro.implement_uniform_block.html \"macro glium::implement_uniform_block\")\n    Implements the `glium::uniforms::UniformBlock` trait for the given type.\n\n[implement_vertex](https://docs.rs/glium/latest/glium/macro.implement_vertex.html \"macro glium::implement_vertex\")\n    Implements the `glium::vertex::Vertex` trait for the given type.\n\n[program](https://docs.rs/glium/latest/glium/macro.program.html \"macro glium::program\")\n    Builds a program depending on the GLSL version supported by the backend.\n\n[uniform](https://docs.rs/glium/latest/glium/macro.uniform.html \"macro glium::uniform\")\n    Returns an implementation-defined type which implements the `Uniform` trait.\n## Structs[\u00a7](https://docs.rs/glium/latest/glium/#structs)\n\n[BlitMask](https://docs.rs/glium/latest/glium/struct.BlitMask.html \"struct glium::BlitMask\")\n    Mask specifying, which kinds of buffers to copy when blitting between two frame buffers.\n\n[BlitTarget](https://docs.rs/glium/latest/glium/struct.BlitTarget.html \"struct glium::BlitTarget\")\n    Area of a surface in pixels. Similar to a `Rect` except that dimensions can be negative.\n\n[Capabilities](https://docs.rs/glium/latest/glium/struct.Capabilities.html \"struct glium::Capabilities\")\n    Represents the capabilities of the context.\n\n[ExtensionsList](https://docs.rs/glium/latest/glium/struct.ExtensionsList.html \"struct glium::ExtensionsList\")\n    Contains data about the list of extensions.\n\n[Frame](https://docs.rs/glium/latest/glium/struct.Frame.html \"struct glium::Frame\")\n    Implementation of `Surface`, targeting the default framebuffer.\n\n[IncompatibleOpenGl](https://docs.rs/glium/latest/glium/struct.IncompatibleOpenGl.html \"struct glium::IncompatibleOpenGl\")\n    Returned during Context creation if the OpenGL implementation is too old.\n\n[LinearSyncFence](https://docs.rs/glium/latest/glium/struct.LinearSyncFence.html \"struct glium::LinearSyncFence\")\n    Prototype for a `SyncFence`.\n\n[Rect](https://docs.rs/glium/latest/glium/struct.Rect.html \"struct glium::Rect\")\n    Area of a surface in pixels.\n\n[SyncFence](https://docs.rs/glium/latest/glium/struct.SyncFence.html \"struct glium::SyncFence\")\n    Provides a way to wait for a server-side operation to be finished.\n\n[Version](https://docs.rs/glium/latest/glium/struct.Version.html \"struct glium::Version\")\n    Describes a version.\n## Enums[\u00a7](https://docs.rs/glium/latest/glium/#enums)\n\n[Api](https://docs.rs/glium/latest/glium/enum.Api.html \"enum glium::Api\")\n    Describes an OpenGL-related API.\n\n[DrawError](https://docs.rs/glium/latest/glium/enum.DrawError.html \"enum glium::DrawError\")\n    Error that can happen while drawing.\n\n[Handle](https://docs.rs/glium/latest/glium/enum.Handle.html \"enum glium::Handle\")\n    Handle to a shader or a program.\n\n[Profile](https://docs.rs/glium/latest/glium/enum.Profile.html \"enum glium::Profile\")\n    Describes the OpenGL context profile.\n\n[RawUniformValue](https://docs.rs/glium/latest/glium/enum.RawUniformValue.html \"enum glium::RawUniformValue\")\n    A raw value of a uniform. \u201cRaw\u201d means that it\u2019s passed directly with `glUniform`. Textures for example are just passed as integers.\n\n[ReadError](https://docs.rs/glium/latest/glium/enum.ReadError.html \"enum glium::ReadError\")\n    Error that can happen while reading.\n\n[SwapBuffersError](https://docs.rs/glium/latest/glium/enum.SwapBuffersError.html \"enum glium::SwapBuffersError\")\n    Error that can happen when swapping buffers.\n\n[UuidError](https://docs.rs/glium/latest/glium/enum.UuidError.html \"enum glium::UuidError\")\n    Describes an error preventing the retrieval of the uuid.\n## Traits[\u00a7](https://docs.rs/glium/latest/glium/#traits)\n\n[CapabilitiesSource](https://docs.rs/glium/latest/glium/trait.CapabilitiesSource.html \"trait glium::CapabilitiesSource\")\n    Trait for objects that describe the capabilities of an OpenGL backend.\n\n[GlObject](https://docs.rs/glium/latest/glium/trait.GlObject.html \"trait glium::GlObject\")\n    Trait for objects that are OpenGL objects.\n\n[Surface](https://docs.rs/glium/latest/glium/trait.Surface.html \"trait glium::Surface\")\n    Object that can be drawn upon.\n## Functions[\u00a7](https://docs.rs/glium/latest/glium/#functions)\n\n[get_supported_glsl_version](https://docs.rs/glium/latest/glium/fn.get_supported_glsl_version.html \"fn glium::get_supported_glsl_version\")\n    Given an API version, this function returns the GLSL version that the implementation is required to support.\n",
        "markdown_with_citations": "[](https://docs.rs/glium/latest/glium/all.html \"show sidebar\")\n# Crate gliumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nEasy-to-use, high-level, OpenGL3+ wrapper.\nGlium is based on glutin - a cross-platform crate for building an OpenGL window and handling application events.\nGlium provides a `Display`\u27e84\u27e9 which uses `glutin` for the Window and its associated GL Context.\n## \u00a7\u27e85\u27e9Initialization\nThe initialisation of a simple glium display occurs in two steps.\n```\nextern crate glium;\n// Use the re-exported winit dependency to avoid version mismatches.\n// Requires the `simple_window_builder` feature.\nuse glium::winit;\nfn main() {\n  // 1. The **winit::EventLoop** for handling events.\n  let event_loop = winit::event_loop::EventLoopBuilder::new().build().unwrap();\n  // 2. Create a glutin context and glium Display\n  let (window, display) = glium::backend::glutin::SimpleWindowBuilder::new().build(&event_loop);\n}\n```\n\nThe `display` object is the most important object of this library and is used when you build buffers, textures, etc. and when you draw.\nYou can clone it and pass it around. However it doesn\u2019t implement the `Send` and `Sync` traits, meaning that you can\u2019t pass it to another thread.\nThe display has ownership of both the window and context, and also provides some methods related to domains such as events handling.\n## \u00a7\u27e86\u27e9Overview\nOpenGL is similar to drawing software: you draw something, then draw over it, then over it again, etc. until you are satisfied of the result.\nOnce you have a `display`, you can call `let mut frame = display.draw();` to start drawing. This `frame` object implements the `Surface` trait\u27e87\u27e9 and provides some functions such as `clear_color`, but also allows you to draw with the rendering pipeline.\nIn order to draw something, you will need to pass:\n  * A source of vertices (see the `vertex`\u27e88\u27e9 module)\n  * A source of indices (see the `index`\u27e89\u27e9 module)\n  * A program that contains the shader that the GPU will execute (see the `program`\u27e810\u27e9 module)\n  * A list of uniforms for the program (see the `uniforms`\u27e811\u27e9 module)\n  * Draw parameters to customize the drawing process (see the `draw_parameters`\u27e812\u27e9 module)\n\n\nOnce you have finished drawing, you can call `frame.finish()` to swap buffers and present the result to the user.\n## \u00a7\u27e813\u27e9OpenGL equivalents in glium\n  * **Bind points** : Glium automatically binds and unbinds buffers, textures, etc. in an optimized way.\n  * **Buffers** : Buffers are strongly typed and can be used through `vertex::VertexBuffer`, `index::IndexBuffer` or `uniforms::UniformBuffer`.\n  * **Debug output** : If you compile in debug mode, glium registers a debug output callback and panics if an OpenGL error happens.\n  * **Framebuffer Objects** : FBOs are automatically managed by glium and are stored in the `Context` object. You can specify the attachments that you wish with the `framebuffer` module.\n  * **Instancing** : Instancing is done either by passing a `vertex::EmptyInstanceAttributes` marker or one or several references to vertex buffers wrapped inside a `PerInstance` struct. See the `vertex` module for more infos.\n  * **Memory barriers** : Calling `glMemoryBarrier` is automatically handled by glium, however you still need to call `memoryBarrier()` in your GLSL code in some situations.\n  * **Programs** : See the `program` module.\n  * **Query objects** : The corresponding structs are in the `draw_parameters` module. They are passed as draw parameters.\n  * **Renderbuffer** : See the `framebuffer` module.\n  * **Render to texture** : If you just want to draw on a texture, you can call `texture.as_surface()`. For more advanced options, see the `framebuffer` module.\n  * **Samplers** : Samplers are automatically managed by glium and are stored in the `Context` object. You can specify how a texture should be sampled by using a `Sampler` dummy object in the `uniforms` module.\n  * **Shaders** : You can\u2019t manually create individual shaders. Instead you must create whole programs at once.\n  * **Textures** : Textures are strongly typed and are found in the `texture` module.\n  * **Uniform blocks** : If your program uses uniform blocks, you must pass a reference to a uniform buffer for the name of the block when drawing.\n  * **Vertex array objects** : VAOs are automatically managed by glium if the backend supports them.\n\n\n## Re-exports\u00a7\u27e814\u27e9\n\n`pub use crate::draw_parameters::Blend[](https://docs.rs/glium/latest/glium/draw_parameters/struct.Blend.html \"struct glium::draw_parameters::Blend\");`\n\n\n`pub use crate::draw_parameters::BlendingFunction[](https://docs.rs/glium/latest/glium/draw_parameters/enum.BlendingFunction.html \"enum glium::draw_parameters::BlendingFunction\");`\n\n\n`pub use crate::draw_parameters::LinearBlendingFactor[](https://docs.rs/glium/latest/glium/draw_parameters/enum.LinearBlendingFactor.html \"enum glium::draw_parameters::LinearBlendingFactor\");`\n\n\n`pub use crate::draw_parameters::BackfaceCullingMode[](https://docs.rs/glium/latest/glium/draw_parameters/enum.BackfaceCullingMode.html \"enum glium::draw_parameters::BackfaceCullingMode\");`\n\n\n`pub use crate::draw_parameters::Depth[](https://docs.rs/glium/latest/glium/draw_parameters/struct.Depth.html \"struct glium::draw_parameters::Depth\");`\n\n\n`pub use crate::draw_parameters::DepthTest[](https://docs.rs/glium/latest/glium/draw_parameters/enum.DepthTest.html \"enum glium::draw_parameters::DepthTest\");`\n\n\n`pub use crate::draw_parameters::PolygonMode[](https://docs.rs/glium/latest/glium/draw_parameters/enum.PolygonMode.html \"enum glium::draw_parameters::PolygonMode\");`\n\n\n`pub use crate::draw_parameters::DrawParameters[](https://docs.rs/glium/latest/glium/draw_parameters/struct.DrawParameters.html \"struct glium::draw_parameters::DrawParameters\");`\n\n\n`pub use crate::draw_parameters::StencilTest[](https://docs.rs/glium/latest/glium/draw_parameters/enum.StencilTest.html \"enum glium::draw_parameters::StencilTest\");`\n\n\n`pub use crate::draw_parameters::StencilOperation[](https://docs.rs/glium/latest/glium/draw_parameters/enum.StencilOperation.html \"enum glium::draw_parameters::StencilOperation\");`\n\n\n`pub use crate::draw_parameters::Smooth[](https://docs.rs/glium/latest/glium/draw_parameters/enum.Smooth.html \"enum glium::draw_parameters::Smooth\");`\n\n\n`pub use crate::index::IndexBuffer[](https://docs.rs/glium/latest/glium/index/struct.IndexBuffer.html \"struct glium::index::IndexBuffer\");`\n\n\n`pub use crate::vertex::VertexBuffer[](https://docs.rs/glium/latest/glium/vertex/struct.VertexBuffer.html \"struct glium::vertex::VertexBuffer\");`\n\n\n`pub use crate::vertex::Vertex[](https://docs.rs/glium/latest/glium/vertex/trait.Vertex.html \"trait glium::vertex::Vertex\");`\n\n\n`pub use crate::vertex::VertexFormat[](https://docs.rs/glium/latest/glium/vertex/type.VertexFormat.html \"type glium::vertex::VertexFormat\");`\n\n\n`pub use crate::program::Program[](https://docs.rs/glium/latest/glium/program/struct.Program.html \"struct glium::program::Program\");`\n\n\n`pub use crate::program::ProgramCreationError[](https://docs.rs/glium/latest/glium/program/enum.ProgramCreationError.html \"enum glium::program::ProgramCreationError\");`\n\n\n`pub use crate::program::ProgramCreationError::CompilationError[](https://docs.rs/glium/latest/glium/program/enum.ProgramCreationError.html \"enum glium::program::ProgramCreationError\");`\n\n\n`pub use crate::program::ProgramCreationError::LinkingError[](https://docs.rs/glium/latest/glium/program/enum.ProgramCreationError.html \"enum glium::program::ProgramCreationError\");`\n\n\n`pub use crate::program::ProgramCreationError::ShaderTypeNotSupported[](https://docs.rs/glium/latest/glium/program/enum.ProgramCreationError.html \"enum glium::program::ProgramCreationError\");`\n\n\n`pub use crate::texture::Texture2d[](https://docs.rs/glium/latest/glium/texture/struct.Texture2d.html \"struct glium::texture::Texture2d\");`\n\n\n`pub use crate::backend::glutin::Display[](https://docs.rs/glium/latest/glium/backend/glutin/struct.Display.html \"struct glium::backend::glutin::Display\");`\n\n\n`pub use crate::backend::glutin::glutin[](https://docs.rs/glutin/0.32.3/x86_64-unknown-linux-gnu/glutin/index.html \"mod glutin\");`\n\n\n`pub use crate::backend::winit[](https://docs.rs/winit/0.30.10/x86_64-unknown-linux-gnu/winit/index.html \"mod winit\");`\n\n## Modules\u00a7\u27e815\u27e9\n\nbackend\u27e816\u27e9\n    The `backend` module allows one to link between glium and the OpenGL context..\n\nbuffer\u27e817\u27e9\n    A buffer is a memory location accessible to the video card.\n\ndebug\u27e818\u27e9\n\n\ndraw_parameters\u27e812\u27e9\n    Describes miscellaneous parameters to be used when drawing.\n\nfield\u27e819\u27e9\n    Field utils\n\nframebuffer\u27e820\u27e9\n    Framebuffers allow you to customize the color, depth and stencil buffers you will draw on.\n\nindex\u27e89\u27e9\n    In order to draw, you need to provide a way for the video card to know how to link primitives together.\n\nmemory_object\u27e821\u27e9\n    Contains everything related to external API memory objects.\n\npixel_buffer\u27e822\u27e9Deprecated\n    Moved to the `texture` module.\n\nprogram\u27e810\u27e9\n    Items related to creating an OpenGL program.\n\nsemaphore\u27e823\u27e9\n    Contains everything related to external API semaphores.\n\ntexture\u27e824\u27e9\n    A texture is an image loaded in video memory, which can be sampled in your shaders.\n\nuniforms\u27e811\u27e9\n    A uniform is a global variable in your program. In order to draw something, you will need to give `glium` the values of all your uniforms. Objects that implement the `Uniform` trait are here to do that.\n\nvertex\u27e88\u27e9\n    Contains everything related to vertex sources.\n## Macros\u00a7\u27e825\u27e9\n\nassert_no_gl_error\u27e826\u27e9\n    Calls the `assert_no_error` method on a `glium::Display` instance with file and line number information.\n\ndynamic_uniform\u27e827\u27e9\n    Returns a Dynamic Uniforms Container to which values can be added later.\n\nfield\u27e828\u27e9\n    A macro to create a `Field`.\n\nimplement_buffer_content\u27e829\u27e9\n    Implements the `glium::buffer::Content` trait for the given type.\n\nimplement_uniform_block\u27e830\u27e9\n    Implements the `glium::uniforms::UniformBlock` trait for the given type.\n\nimplement_vertex\u27e831\u27e9\n    Implements the `glium::vertex::Vertex` trait for the given type.\n\nprogram\u27e832\u27e9\n    Builds a program depending on the GLSL version supported by the backend.\n\nuniform\u27e833\u27e9\n    Returns an implementation-defined type which implements the `Uniform` trait.\n## Structs\u00a7\u27e834\u27e9\n\nBlitMask\u27e835\u27e9\n    Mask specifying, which kinds of buffers to copy when blitting between two frame buffers.\n\nBlitTarget\u27e836\u27e9\n    Area of a surface in pixels. Similar to a `Rect` except that dimensions can be negative.\n\nCapabilities\u27e837\u27e9\n    Represents the capabilities of the context.\n\nExtensionsList\u27e838\u27e9\n    Contains data about the list of extensions.\n\nFrame\u27e839\u27e9\n    Implementation of `Surface`, targeting the default framebuffer.\n\nIncompatibleOpenGl\u27e840\u27e9\n    Returned during Context creation if the OpenGL implementation is too old.\n\nLinearSyncFence\u27e841\u27e9\n    Prototype for a `SyncFence`.\n\nRect\u27e842\u27e9\n    Area of a surface in pixels.\n\nSyncFence\u27e843\u27e9\n    Provides a way to wait for a server-side operation to be finished.\n\nVersion\u27e844\u27e9\n    Describes a version.\n## Enums\u00a7\u27e845\u27e9\n\nApi\u27e846\u27e9\n    Describes an OpenGL-related API.\n\nDrawError\u27e847\u27e9\n    Error that can happen while drawing.\n\nHandle\u27e848\u27e9\n    Handle to a shader or a program.\n\nProfile\u27e849\u27e9\n    Describes the OpenGL context profile.\n\nRawUniformValue\u27e850\u27e9\n    A raw value of a uniform. \u201cRaw\u201d means that it\u2019s passed directly with `glUniform`. Textures for example are just passed as integers.\n\nReadError\u27e851\u27e9\n    Error that can happen while reading.\n\nSwapBuffersError\u27e852\u27e9\n    Error that can happen when swapping buffers.\n\nUuidError\u27e853\u27e9\n    Describes an error preventing the retrieval of the uuid.\n## Traits\u00a7\u27e854\u27e9\n\nCapabilitiesSource\u27e855\u27e9\n    Trait for objects that describe the capabilities of an OpenGL backend.\n\nGlObject\u27e856\u27e9\n    Trait for objects that are OpenGL objects.\n\nSurface\u27e87\u27e9\n    Object that can be drawn upon.\n## Functions\u00a7\u27e857\u27e9\n\nget_supported_glsl_version\u27e858\u27e9\n    Given an API version, this function returns the GLSL version that the implementation is required to support.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/glium/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/glium/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/glium/latest/src/glium/lib.rs.html#1-1407: Source\n\u27e84\u27e9 https://docs.rs/glium/latest/glium/backend/glutin/struct.Display.html: struct glium::backend::glutin::Display - `Display`\n\u27e85\u27e9 https://docs.rs/glium/latest/glium/#initialization: \u00a7\n\u27e86\u27e9 https://docs.rs/glium/latest/glium/#overview: \u00a7\n\u27e87\u27e9 https://docs.rs/glium/latest/glium/trait.Surface.html: trait glium::Surface - the `Surface` trait\n\u27e88\u27e9 https://docs.rs/glium/latest/glium/vertex/index.html: mod glium::vertex - `vertex`\n\u27e89\u27e9 https://docs.rs/glium/latest/glium/index/index.html: mod glium::index - `index`\n\u27e810\u27e9 https://docs.rs/glium/latest/glium/program/index.html: mod glium::program - `program`\n\u27e811\u27e9 https://docs.rs/glium/latest/glium/uniforms/index.html: mod glium::uniforms - `uniforms`\n\u27e812\u27e9 https://docs.rs/glium/latest/glium/draw_parameters/index.html: mod glium::draw_parameters - `draw_parameters`\n\u27e813\u27e9 https://docs.rs/glium/latest/glium/#opengl-equivalents-in-glium: \u00a7\n\u27e814\u27e9 https://docs.rs/glium/latest/glium/#reexports: \u00a7\n\u27e815\u27e9 https://docs.rs/glium/latest/glium/#modules: \u00a7\n\u27e816\u27e9 https://docs.rs/glium/latest/glium/backend/index.html: mod glium::backend - backend\n\u27e817\u27e9 https://docs.rs/glium/latest/glium/buffer/index.html: mod glium::buffer - buffer\n\u27e818\u27e9 https://docs.rs/glium/latest/glium/debug/index.html: mod glium::debug - debug\n\u27e819\u27e9 https://docs.rs/glium/latest/glium/field/index.html: mod glium::field - field\n\u27e820\u27e9 https://docs.rs/glium/latest/glium/framebuffer/index.html: mod glium::framebuffer - framebuffer\n\u27e821\u27e9 https://docs.rs/glium/latest/glium/memory_object/index.html: mod glium::memory_object - memory_object\n\u27e822\u27e9 https://docs.rs/glium/latest/glium/pixel_buffer/index.html: mod glium::pixel_buffer - pixel_buffer\n\u27e823\u27e9 https://docs.rs/glium/latest/glium/semaphore/index.html: mod glium::semaphore - semaphore\n\u27e824\u27e9 https://docs.rs/glium/latest/glium/texture/index.html: mod glium::texture - texture\n\u27e825\u27e9 https://docs.rs/glium/latest/glium/#macros: \u00a7\n\u27e826\u27e9 https://docs.rs/glium/latest/glium/macro.assert_no_gl_error.html: macro glium::assert_no_gl_error - assert_no_gl_error\n\u27e827\u27e9 https://docs.rs/glium/latest/glium/macro.dynamic_uniform.html: macro glium::dynamic_uniform - dynamic_uniform\n\u27e828\u27e9 https://docs.rs/glium/latest/glium/macro.field.html: macro glium::field - field\n\u27e829\u27e9 https://docs.rs/glium/latest/glium/macro.implement_buffer_content.html: macro glium::implement_buffer_content - implement_buffer_content\n\u27e830\u27e9 https://docs.rs/glium/latest/glium/macro.implement_uniform_block.html: macro glium::implement_uniform_block - implement_uniform_block\n\u27e831\u27e9 https://docs.rs/glium/latest/glium/macro.implement_vertex.html: macro glium::implement_vertex - implement_vertex\n\u27e832\u27e9 https://docs.rs/glium/latest/glium/macro.program.html: macro glium::program - program\n\u27e833\u27e9 https://docs.rs/glium/latest/glium/macro.uniform.html: macro glium::uniform - uniform\n\u27e834\u27e9 https://docs.rs/glium/latest/glium/#structs: \u00a7\n\u27e835\u27e9 https://docs.rs/glium/latest/glium/struct.BlitMask.html: struct glium::BlitMask - BlitMask\n\u27e836\u27e9 https://docs.rs/glium/latest/glium/struct.BlitTarget.html: struct glium::BlitTarget - BlitTarget\n\u27e837\u27e9 https://docs.rs/glium/latest/glium/struct.Capabilities.html: struct glium::Capabilities - Capabilities\n\u27e838\u27e9 https://docs.rs/glium/latest/glium/struct.ExtensionsList.html: struct glium::ExtensionsList - ExtensionsList\n\u27e839\u27e9 https://docs.rs/glium/latest/glium/struct.Frame.html: struct glium::Frame - Frame\n\u27e840\u27e9 https://docs.rs/glium/latest/glium/struct.IncompatibleOpenGl.html: struct glium::IncompatibleOpenGl - IncompatibleOpenGl\n\u27e841\u27e9 https://docs.rs/glium/latest/glium/struct.LinearSyncFence.html: struct glium::LinearSyncFence - LinearSyncFence\n\u27e842\u27e9 https://docs.rs/glium/latest/glium/struct.Rect.html: struct glium::Rect - Rect\n\u27e843\u27e9 https://docs.rs/glium/latest/glium/struct.SyncFence.html: struct glium::SyncFence - SyncFence\n\u27e844\u27e9 https://docs.rs/glium/latest/glium/struct.Version.html: struct glium::Version - Version\n\u27e845\u27e9 https://docs.rs/glium/latest/glium/#enums: \u00a7\n\u27e846\u27e9 https://docs.rs/glium/latest/glium/enum.Api.html: enum glium::Api - Api\n\u27e847\u27e9 https://docs.rs/glium/latest/glium/enum.DrawError.html: enum glium::DrawError - DrawError\n\u27e848\u27e9 https://docs.rs/glium/latest/glium/enum.Handle.html: enum glium::Handle - Handle\n\u27e849\u27e9 https://docs.rs/glium/latest/glium/enum.Profile.html: enum glium::Profile - Profile\n\u27e850\u27e9 https://docs.rs/glium/latest/glium/enum.RawUniformValue.html: enum glium::RawUniformValue - RawUniformValue\n\u27e851\u27e9 https://docs.rs/glium/latest/glium/enum.ReadError.html: enum glium::ReadError - ReadError\n\u27e852\u27e9 https://docs.rs/glium/latest/glium/enum.SwapBuffersError.html: enum glium::SwapBuffersError - SwapBuffersError\n\u27e853\u27e9 https://docs.rs/glium/latest/glium/enum.UuidError.html: enum glium::UuidError - UuidError\n\u27e854\u27e9 https://docs.rs/glium/latest/glium/#traits: \u00a7\n\u27e855\u27e9 https://docs.rs/glium/latest/glium/trait.CapabilitiesSource.html: trait glium::CapabilitiesSource - CapabilitiesSource\n\u27e856\u27e9 https://docs.rs/glium/latest/glium/trait.GlObject.html: trait glium::GlObject - GlObject\n\u27e857\u27e9 https://docs.rs/glium/latest/glium/#functions: \u00a7\n\u27e858\u27e9 https://docs.rs/glium/latest/glium/fn.get_supported_glsl_version.html: fn glium::get_supported_glsl_version - get_supported_glsl_version\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "The `glium` crate is a high-level, easy-to-use wrapper for OpenGL 3+ that simplifies graphics programming in Rust. It integrates with `glutin` for window creation and event handling, and provides abstractions for managing buffers, textures, shaders, and rendering pipelines. Key features include automatic resource management, debug output for OpenGL errors, support for instancing, render-to-texture capabilities, and strongly-typed APIs for vertices, uniforms, and textures.",
    "feature_summary": null,
    "use_case": "Unknown",
    "score": 7.0,
    "factual_counterfactual": "### Pair 1: Display and Thread Safety  \n\u2705 **Factual:** The `glium::Display` object is central to the crate and is used for creating buffers, textures, and rendering operations. It does not implement the `Send` and `Sync` traits, meaning it cannot be safely shared across threads.  \n\u274c **Counterfactual:** The `glium::Display` object is thread-safe and implements both the `Send` and `Sync` traits, allowing it to be shared across multiple threads for concurrent rendering operations.  \n\n---\n\n### Pair 2: Shader Compilation  \n\u2705 **Factual:** In `glium`, shaders are compiled as part of a complete program rather than individually. This ensures compatibility with the OpenGL rendering pipeline.  \n\u274c **Counterfactual:** `glium` allows shaders to be compiled individually and later linked together into a program, offering flexibility in shader management.  \n\n---\n\n### Pair 3: Debugging OpenGL Errors  \n\u2705 **Factual:** When compiled in debug mode, `glium` registers a debug output callback and panics if an OpenGL error occurs, aiding in error detection during development.  \n\u274c **Counterfactual:** `glium` does not provide any mechanism for detecting OpenGL errors during runtime, leaving developers to manually check for errors using external tools.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}