{
    "name": "rusqlite",
    "version": "0.36.0",
    "description": "ALLOW: Positive community sentiment",
    "repository": "",
    "keywords": [],
    "categories": [],
    "readme": {
        "raw_markdown": "[](https://docs.rs/rusqlite/latest/rusqlite/all.html \"show sidebar\")\n# Crate rusqliteCopy item path\n[Settings](https://docs.rs/rusqlite/latest/settings.html)\n[Help](https://docs.rs/rusqlite/latest/help.html)\nSummary[Source](https://docs.rs/rusqlite/latest/src/rusqlite/lib.rs.html#1-2296)\nExpand description\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\nHistorically, the API was based on the one from [`rust-postgres`](https://github.com/sfackler/rust-postgres). However, the two have diverged in many ways, and no compatibility between the two is intended.\n```\nuse rusqlite::{params, Connection, Result};\n#[derive(Debug)]\nstruct Person {\n  id: i32,\n  name: String,\n  data: Option<Vec<u8>>,\n}\nfn main() -> Result<()> {\n  let conn = Connection::open_in_memory()?;\n  conn.execute(\n    \"CREATE TABLE person (\n      id  INTEGER PRIMARY KEY,\n      name TEXT NOT NULL,\n      data BLOB\n    )\",\n    (), // empty list of parameters.\n  )?;\n  let me = Person {\n    id: 0,\n    name: \"Steven\".to_string(),\n    data: None,\n  };\n  conn.execute(\n    \"INSERT INTO person (name, data) VALUES (?1, ?2)\",\n    (&me.name, &me.data),\n  )?;\n  let mut stmt = conn.prepare(\"SELECT id, name, data FROM person\")?;\n  let person_iter = stmt.query_map([], |row| {\n    Ok(Person {\n      id: row.get(0)?,\n      name: row.get(1)?,\n      data: row.get(2)?,\n    })\n  })?;\n  for person in person_iter {\n    println!(\"Found person {:?}\", person?);\n  }\n  Ok(())\n}\n```\n\n## Re-exports[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#reexports)\n\n`pub use crate::types::ToSql[](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\");`\n\n\n`pub use fallible_iterator[](https://docs.rs/fallible-iterator/0.3.0/x86_64-unknown-linux-gnu/fallible_iterator/index.html \"mod fallible_iterator\");`\n\n\n`pub use fallible_streaming_iterator[](https://docs.rs/fallible-streaming-iterator/0.1.9/x86_64-unknown-linux-gnu/fallible_streaming_iterator/index.html \"mod fallible_streaming_iterator\");`\n\n\n`pub use libsqlite3_sys[](https://docs.rs/libsqlite3-sys/0.34.0/x86_64-unknown-linux-gnu/libsqlite3_sys/index.html \"mod libsqlite3_sys\") as ffi;`\n\n## Modules[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#modules)\n\n[auto_extension](https://docs.rs/rusqlite/latest/rusqlite/auto_extension/index.html \"mod rusqlite::auto_extension\")Non-`loadable_extension`\n    Automatic extension loading\n\n[backup](https://docs.rs/rusqlite/latest/rusqlite/backup/index.html \"mod rusqlite::backup\")`backup`\n    Online SQLite backup API.\n\n[blob](https://docs.rs/rusqlite/latest/rusqlite/blob/index.html \"mod rusqlite::blob\")`blob`\n    Incremental BLOB I/O.\n\n[config](https://docs.rs/rusqlite/latest/rusqlite/config/index.html \"mod rusqlite::config\")\n    Configure database connections\n\n[functions](https://docs.rs/rusqlite/latest/rusqlite/functions/index.html \"mod rusqlite::functions\")`functions`\n    Create or redefine SQL functions.\n\n[hooks](https://docs.rs/rusqlite/latest/rusqlite/hooks/index.html \"mod rusqlite::hooks\")`hooks`\n    Commit, Data Change and Rollback Notification Callbacks\n\n[limits](https://docs.rs/rusqlite/latest/rusqlite/limits/index.html \"mod rusqlite::limits\")`limits`\n    Run-Time Limits\n\n[serialize](https://docs.rs/rusqlite/latest/rusqlite/serialize/index.html \"mod rusqlite::serialize\")`serialize`\n    Serialize a database.\n\n[trace](https://docs.rs/rusqlite/latest/rusqlite/trace/index.html \"mod rusqlite::trace\")`trace`\n    Tracing and profiling functions. Error and warning log.\n\n[types](https://docs.rs/rusqlite/latest/rusqlite/types/index.html \"mod rusqlite::types\")\n    Traits dealing with SQLite data types.\n\n[vtab](https://docs.rs/rusqlite/latest/rusqlite/vtab/index.html \"mod rusqlite::vtab\")`vtab`\n    Create virtual tables.\n## Macros[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#macros)\n\n[named_params](https://docs.rs/rusqlite/latest/rusqlite/macro.named_params.html \"macro rusqlite::named_params\")\n    A macro making it more convenient to pass lists of named parameters as a `&[(&str, &dyn ToSql)]`.\n\n[params](https://docs.rs/rusqlite/latest/rusqlite/macro.params.html \"macro rusqlite::params\")\n    A macro making it more convenient to pass longer lists of parameters as a `&[&dyn ToSql]`.\n\n[prepare_and_bind](https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_and_bind.html \"macro rusqlite::prepare_and_bind\")`rusqlite-macros`\n    Captured identifiers in SQL\n\n[prepare_cached_and_bind](https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_cached_and_bind.html \"macro rusqlite::prepare_cached_and_bind\")`rusqlite-macros`\n    Captured identifiers in SQL\n## Structs[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#structs)\n\n[AndThenRows](https://docs.rs/rusqlite/latest/rusqlite/struct.AndThenRows.html \"struct rusqlite::AndThenRows\")\n    An iterator over the mapped resulting rows of a query, with an Error type unifying with Error.\n\n[Batch](https://docs.rs/rusqlite/latest/rusqlite/struct.Batch.html \"struct rusqlite::Batch\")\n    Batch fallible iterator\n\n[CachedStatement](https://docs.rs/rusqlite/latest/rusqlite/struct.CachedStatement.html \"struct rusqlite::CachedStatement\")\n    Cacheable statement.\n\n[Column](https://docs.rs/rusqlite/latest/rusqlite/struct.Column.html \"struct rusqlite::Column\")`column_decltype`\n    Information about a column of a SQLite query.\n\n[ColumnMetadata](https://docs.rs/rusqlite/latest/rusqlite/struct.ColumnMetadata.html \"struct rusqlite::ColumnMetadata\")`column_metadata`\n    Metadata about the origin of a column of a SQLite query\n\n[Connection](https://docs.rs/rusqlite/latest/rusqlite/struct.Connection.html \"struct rusqlite::Connection\")\n    A connection to a SQLite database.\n\n[InterruptHandle](https://docs.rs/rusqlite/latest/rusqlite/struct.InterruptHandle.html \"struct rusqlite::InterruptHandle\")\n    Allows interrupting a long-running computation.\n\n[LoadExtensionGuard](https://docs.rs/rusqlite/latest/rusqlite/struct.LoadExtensionGuard.html \"struct rusqlite::LoadExtensionGuard\")`load_extension`\n    RAII guard temporarily enabling SQLite extensions to be loaded.\n\n[Map](https://docs.rs/rusqlite/latest/rusqlite/struct.Map.html \"struct rusqlite::Map\")\n    `F` is used to transform the _streaming_ iterator into a _fallible_ iterator.\n\n[MappedRows](https://docs.rs/rusqlite/latest/rusqlite/struct.MappedRows.html \"struct rusqlite::MappedRows\")\n    An iterator over the mapped resulting rows of a query.\n\n[OpenFlags](https://docs.rs/rusqlite/latest/rusqlite/struct.OpenFlags.html \"struct rusqlite::OpenFlags\")\n    Flags for opening SQLite database connections. See [sqlite3_open_v2](https://www.sqlite.org/c3ref/open.html) for details.\n\n[ParamsFromIter](https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html \"struct rusqlite::ParamsFromIter\")\n    Adapter type which allows any iterator over [`ToSql`](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\") values to implement [`Params`](https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html \"trait rusqlite::Params\").\n\n[PrepFlags](https://docs.rs/rusqlite/latest/rusqlite/struct.PrepFlags.html \"struct rusqlite::PrepFlags\")\n    Prepare flags. See [sqlite3_prepare_v3](https://sqlite.org/c3ref/c_prepare_normalize.html) for details.\n\n[Row](https://docs.rs/rusqlite/latest/rusqlite/struct.Row.html \"struct rusqlite::Row\")\n    A single result row of a query.\n\n[Rows](https://docs.rs/rusqlite/latest/rusqlite/struct.Rows.html \"struct rusqlite::Rows\")\n    A handle (lazy fallible streaming iterator) for the resulting rows of a query.\n\n[Savepoint](https://docs.rs/rusqlite/latest/rusqlite/struct.Savepoint.html \"struct rusqlite::Savepoint\")\n    Represents a savepoint on a database connection.\n\n[Statement](https://docs.rs/rusqlite/latest/rusqlite/struct.Statement.html \"struct rusqlite::Statement\")\n    A prepared statement.\n\n[Transaction](https://docs.rs/rusqlite/latest/rusqlite/struct.Transaction.html \"struct rusqlite::Transaction\")\n    Represents a transaction on a database connection.\n## Enums[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#enums)\n\n[DropBehavior](https://docs.rs/rusqlite/latest/rusqlite/enum.DropBehavior.html \"enum rusqlite::DropBehavior\")\n    Options for how a Transaction or Savepoint should behave when it is dropped.\n\n[Error](https://docs.rs/rusqlite/latest/rusqlite/enum.Error.html \"enum rusqlite::Error\")\n    Enum listing possible errors from rusqlite.\n\n[ErrorCode](https://docs.rs/rusqlite/latest/rusqlite/enum.ErrorCode.html \"enum rusqlite::ErrorCode\")\n    Error Codes\n\n[StatementStatus](https://docs.rs/rusqlite/latest/rusqlite/enum.StatementStatus.html \"enum rusqlite::StatementStatus\")\n    Prepared statement status counters.\n\n[TransactionBehavior](https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionBehavior.html \"enum rusqlite::TransactionBehavior\")\n    Options for transaction behavior. See [BEGIN TRANSACTION](http://www.sqlite.org/lang_transaction.html) for details.\n\n[TransactionState](https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionState.html \"enum rusqlite::TransactionState\")`modern_sqlite`\n    Transaction state of a database\n## Constants[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#constants)\n\n[MAIN_DB](https://docs.rs/rusqlite/latest/rusqlite/constant.MAIN_DB.html \"constant rusqlite::MAIN_DB\")\n    Shorthand for `Main` database.\n\n[TEMP_DB](https://docs.rs/rusqlite/latest/rusqlite/constant.TEMP_DB.html \"constant rusqlite::TEMP_DB\")\n    Shorthand for `Temp` database.\n## Traits[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#traits)\n\n[BindIndex](https://docs.rs/rusqlite/latest/rusqlite/trait.BindIndex.html \"trait rusqlite::BindIndex\")\n    A trait implemented by types that can index into parameters of a statement.\n\n[Name](https://docs.rs/rusqlite/latest/rusqlite/trait.Name.html \"trait rusqlite::Name\")\n    Database, table, column, collation, function, module, vfs name\n\n[OptionalExtension](https://docs.rs/rusqlite/latest/rusqlite/trait.OptionalExtension.html \"trait rusqlite::OptionalExtension\")\n    See the [method documentation](https://docs.rs/rusqlite/latest/rusqlite/#tymethod.optional).\n\n[Params](https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html \"trait rusqlite::Params\")\n    Trait used for [sets of parameter](https://www.sqlite.org/c3ref/bind_blob.html) passed into SQL statements/queries.\n\n[RowIndex](https://docs.rs/rusqlite/latest/rusqlite/trait.RowIndex.html \"trait rusqlite::RowIndex\")\n    A trait implemented by types that can index into columns of a row.\n## Functions[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#functions)\n\n[params_from_iter](https://docs.rs/rusqlite/latest/rusqlite/fn.params_from_iter.html \"fn rusqlite::params_from_iter\")\n    Constructor function for a [`ParamsFromIter`](https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html \"struct rusqlite::ParamsFromIter\"). See its documentation for more.\n\n[to_sqlite_error](https://docs.rs/rusqlite/latest/rusqlite/fn.to_sqlite_error.html \"fn rusqlite::to_sqlite_error\")\u26a0\n    Transform Rust error to SQLite error (message and code).\n\n[version](https://docs.rs/rusqlite/latest/rusqlite/fn.version.html \"fn rusqlite::version\")\n    Returns the SQLite version as a string; e.g., `\"3.16.2\"` for version 3.16.2.\n\n[version_number](https://docs.rs/rusqlite/latest/rusqlite/fn.version_number.html \"fn rusqlite::version_number\")\n    Returns the SQLite version as an integer; e.g., `3016002` for version 3.16.2.\n## Type Aliases[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#types)\n\n[Result](https://docs.rs/rusqlite/latest/rusqlite/type.Result.html \"type rusqlite::Result\")\n    A typedef of the result returned by many methods.\n",
        "markdown_with_citations": "[](https://docs.rs/rusqlite/latest/rusqlite/all.html \"show sidebar\")\n# Crate rusqliteCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\nHistorically, the API was based on the one from `rust-postgres`\u27e84\u27e9. However, the two have diverged in many ways, and no compatibility between the two is intended.\n```\nuse rusqlite::{params, Connection, Result};\n#[derive(Debug)]\nstruct Person {\n  id: i32,\n  name: String,\n  data: Option<Vec<u8>>,\n}\nfn main() -> Result<()> {\n  let conn = Connection::open_in_memory()?;\n  conn.execute(\n    \"CREATE TABLE person (\n      id  INTEGER PRIMARY KEY,\n      name TEXT NOT NULL,\n      data BLOB\n    )\",\n    (), // empty list of parameters.\n  )?;\n  let me = Person {\n    id: 0,\n    name: \"Steven\".to_string(),\n    data: None,\n  };\n  conn.execute(\n    \"INSERT INTO person (name, data) VALUES (?1, ?2)\",\n    (&me.name, &me.data),\n  )?;\n  let mut stmt = conn.prepare(\"SELECT id, name, data FROM person\")?;\n  let person_iter = stmt.query_map([], |row| {\n    Ok(Person {\n      id: row.get(0)?,\n      name: row.get(1)?,\n      data: row.get(2)?,\n    })\n  })?;\n  for person in person_iter {\n    println!(\"Found person {:?}\", person?);\n  }\n  Ok(())\n}\n```\n\n## Re-exports\u00a7\u27e85\u27e9\n\n`pub use crate::types::ToSql[](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\");`\n\n\n`pub use fallible_iterator[](https://docs.rs/fallible-iterator/0.3.0/x86_64-unknown-linux-gnu/fallible_iterator/index.html \"mod fallible_iterator\");`\n\n\n`pub use fallible_streaming_iterator[](https://docs.rs/fallible-streaming-iterator/0.1.9/x86_64-unknown-linux-gnu/fallible_streaming_iterator/index.html \"mod fallible_streaming_iterator\");`\n\n\n`pub use libsqlite3_sys[](https://docs.rs/libsqlite3-sys/0.34.0/x86_64-unknown-linux-gnu/libsqlite3_sys/index.html \"mod libsqlite3_sys\") as ffi;`\n\n## Modules\u00a7\u27e86\u27e9\n\nauto_extension\u27e87\u27e9Non-`loadable_extension`\n    Automatic extension loading\n\nbackup\u27e88\u27e9`backup`\n    Online SQLite backup API.\n\nblob\u27e89\u27e9`blob`\n    Incremental BLOB I/O.\n\nconfig\u27e810\u27e9\n    Configure database connections\n\nfunctions\u27e811\u27e9`functions`\n    Create or redefine SQL functions.\n\nhooks\u27e812\u27e9`hooks`\n    Commit, Data Change and Rollback Notification Callbacks\n\nlimits\u27e813\u27e9`limits`\n    Run-Time Limits\n\nserialize\u27e814\u27e9`serialize`\n    Serialize a database.\n\ntrace\u27e815\u27e9`trace`\n    Tracing and profiling functions. Error and warning log.\n\ntypes\u27e816\u27e9\n    Traits dealing with SQLite data types.\n\nvtab\u27e817\u27e9`vtab`\n    Create virtual tables.\n## Macros\u00a7\u27e818\u27e9\n\nnamed_params\u27e819\u27e9\n    A macro making it more convenient to pass lists of named parameters as a `&[(&str, &dyn ToSql)]`.\n\nparams\u27e820\u27e9\n    A macro making it more convenient to pass longer lists of parameters as a `&[&dyn ToSql]`.\n\nprepare_and_bind\u27e821\u27e9`rusqlite-macros`\n    Captured identifiers in SQL\n\nprepare_cached_and_bind\u27e822\u27e9`rusqlite-macros`\n    Captured identifiers in SQL\n## Structs\u00a7\u27e823\u27e9\n\nAndThenRows\u27e824\u27e9\n    An iterator over the mapped resulting rows of a query, with an Error type unifying with Error.\n\nBatch\u27e825\u27e9\n    Batch fallible iterator\n\nCachedStatement\u27e826\u27e9\n    Cacheable statement.\n\nColumn\u27e827\u27e9`column_decltype`\n    Information about a column of a SQLite query.\n\nColumnMetadata\u27e828\u27e9`column_metadata`\n    Metadata about the origin of a column of a SQLite query\n\nConnection\u27e829\u27e9\n    A connection to a SQLite database.\n\nInterruptHandle\u27e830\u27e9\n    Allows interrupting a long-running computation.\n\nLoadExtensionGuard\u27e831\u27e9`load_extension`\n    RAII guard temporarily enabling SQLite extensions to be loaded.\n\nMap\u27e832\u27e9\n    `F` is used to transform the _streaming_ iterator into a _fallible_ iterator.\n\nMappedRows\u27e833\u27e9\n    An iterator over the mapped resulting rows of a query.\n\nOpenFlags\u27e834\u27e9\n    Flags for opening SQLite database connections. See sqlite3_open_v2\u27e835\u27e9 for details.\n\nParamsFromIter\u27e836\u27e9\n    Adapter type which allows any iterator over `ToSql`\u27e837\u27e9 values to implement `Params`\u27e838\u27e9.\n\nPrepFlags\u27e839\u27e9\n    Prepare flags. See sqlite3_prepare_v3\u27e840\u27e9 for details.\n\nRow\u27e841\u27e9\n    A single result row of a query.\n\nRows\u27e842\u27e9\n    A handle (lazy fallible streaming iterator) for the resulting rows of a query.\n\nSavepoint\u27e843\u27e9\n    Represents a savepoint on a database connection.\n\nStatement\u27e844\u27e9\n    A prepared statement.\n\nTransaction\u27e845\u27e9\n    Represents a transaction on a database connection.\n## Enums\u00a7\u27e846\u27e9\n\nDropBehavior\u27e847\u27e9\n    Options for how a Transaction or Savepoint should behave when it is dropped.\n\nError\u27e848\u27e9\n    Enum listing possible errors from rusqlite.\n\nErrorCode\u27e849\u27e9\n    Error Codes\n\nStatementStatus\u27e850\u27e9\n    Prepared statement status counters.\n\nTransactionBehavior\u27e851\u27e9\n    Options for transaction behavior. See BEGIN TRANSACTION\u27e852\u27e9 for details.\n\nTransactionState\u27e853\u27e9`modern_sqlite`\n    Transaction state of a database\n## Constants\u00a7\u27e854\u27e9\n\nMAIN_DB\u27e855\u27e9\n    Shorthand for `Main` database.\n\nTEMP_DB\u27e856\u27e9\n    Shorthand for `Temp` database.\n## Traits\u00a7\u27e857\u27e9\n\nBindIndex\u27e858\u27e9\n    A trait implemented by types that can index into parameters of a statement.\n\nName\u27e859\u27e9\n    Database, table, column, collation, function, module, vfs name\n\nOptionalExtension\u27e860\u27e9\n    See the method documentation\u27e861\u27e9.\n\nParams\u27e838\u27e9\n    Trait used for sets of parameter\u27e862\u27e9 passed into SQL statements/queries.\n\nRowIndex\u27e863\u27e9\n    A trait implemented by types that can index into columns of a row.\n## Functions\u00a7\u27e864\u27e9\n\nparams_from_iter\u27e865\u27e9\n    Constructor function for a `ParamsFromIter`\u27e836\u27e9. See its documentation for more.\n\nto_sqlite_error\u27e866\u27e9\u26a0\n    Transform Rust error to SQLite error (message and code).\n\nversion\u27e867\u27e9\n    Returns the SQLite version as a string; e.g., `\"3.16.2\"` for version 3.16.2.\n\nversion_number\u27e868\u27e9\n    Returns the SQLite version as an integer; e.g., `3016002` for version 3.16.2.\n## Type Aliases\u00a7\u27e869\u27e9\n\nResult\u27e870\u27e9\n    A typedef of the result returned by many methods.\n",
        "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rusqlite/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rusqlite/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rusqlite/latest/src/rusqlite/lib.rs.html#1-2296: Source\n\u27e84\u27e9 https://github.com/sfackler/rust-postgres: `rust-postgres`\n\u27e85\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#reexports: \u00a7\n\u27e86\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#modules: \u00a7\n\u27e87\u27e9 https://docs.rs/rusqlite/latest/rusqlite/auto_extension/index.html: mod rusqlite::auto_extension - auto_extension\n\u27e88\u27e9 https://docs.rs/rusqlite/latest/rusqlite/backup/index.html: mod rusqlite::backup - backup\n\u27e89\u27e9 https://docs.rs/rusqlite/latest/rusqlite/blob/index.html: mod rusqlite::blob - blob\n\u27e810\u27e9 https://docs.rs/rusqlite/latest/rusqlite/config/index.html: mod rusqlite::config - config\n\u27e811\u27e9 https://docs.rs/rusqlite/latest/rusqlite/functions/index.html: mod rusqlite::functions - functions\n\u27e812\u27e9 https://docs.rs/rusqlite/latest/rusqlite/hooks/index.html: mod rusqlite::hooks - hooks\n\u27e813\u27e9 https://docs.rs/rusqlite/latest/rusqlite/limits/index.html: mod rusqlite::limits - limits\n\u27e814\u27e9 https://docs.rs/rusqlite/latest/rusqlite/serialize/index.html: mod rusqlite::serialize - serialize\n\u27e815\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trace/index.html: mod rusqlite::trace - trace\n\u27e816\u27e9 https://docs.rs/rusqlite/latest/rusqlite/types/index.html: mod rusqlite::types - types\n\u27e817\u27e9 https://docs.rs/rusqlite/latest/rusqlite/vtab/index.html: mod rusqlite::vtab - vtab\n\u27e818\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#macros: \u00a7\n\u27e819\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.named_params.html: macro rusqlite::named_params - named_params\n\u27e820\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.params.html: macro rusqlite::params - params\n\u27e821\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_and_bind.html: macro rusqlite::prepare_and_bind - prepare_and_bind\n\u27e822\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_cached_and_bind.html: macro rusqlite::prepare_cached_and_bind - prepare_cached_and_bind\n\u27e823\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#structs: \u00a7\n\u27e824\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.AndThenRows.html: struct rusqlite::AndThenRows - AndThenRows\n\u27e825\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Batch.html: struct rusqlite::Batch - Batch\n\u27e826\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.CachedStatement.html: struct rusqlite::CachedStatement - CachedStatement\n\u27e827\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Column.html: struct rusqlite::Column - Column\n\u27e828\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.ColumnMetadata.html: struct rusqlite::ColumnMetadata - ColumnMetadata\n\u27e829\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Connection.html: struct rusqlite::Connection - Connection\n\u27e830\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.InterruptHandle.html: struct rusqlite::InterruptHandle - InterruptHandle\n\u27e831\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.LoadExtensionGuard.html: struct rusqlite::LoadExtensionGuard - LoadExtensionGuard\n\u27e832\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Map.html: struct rusqlite::Map - Map\n\u27e833\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.MappedRows.html: struct rusqlite::MappedRows - MappedRows\n\u27e834\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.OpenFlags.html: struct rusqlite::OpenFlags - OpenFlags\n\u27e835\u27e9 https://www.sqlite.org/c3ref/open.html: sqlite3_open_v2\n\u27e836\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html: struct rusqlite::ParamsFromIter - ParamsFromIter\n\u27e837\u27e9 https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html: trait rusqlite::types::ToSql - `ToSql`\n\u27e838\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html: trait rusqlite::Params - `Params`\n\u27e839\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.PrepFlags.html: struct rusqlite::PrepFlags - PrepFlags\n\u27e840\u27e9 https://sqlite.org/c3ref/c_prepare_normalize.html: sqlite3_prepare_v3\n\u27e841\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Row.html: struct rusqlite::Row - Row\n\u27e842\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Rows.html: struct rusqlite::Rows - Rows\n\u27e843\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Savepoint.html: struct rusqlite::Savepoint - Savepoint\n\u27e844\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Statement.html: struct rusqlite::Statement - Statement\n\u27e845\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Transaction.html: struct rusqlite::Transaction - Transaction\n\u27e846\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#enums: \u00a7\n\u27e847\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.DropBehavior.html: enum rusqlite::DropBehavior - DropBehavior\n\u27e848\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.Error.html: enum rusqlite::Error - Error\n\u27e849\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.ErrorCode.html: enum rusqlite::ErrorCode - ErrorCode\n\u27e850\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.StatementStatus.html: enum rusqlite::StatementStatus - StatementStatus\n\u27e851\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionBehavior.html: enum rusqlite::TransactionBehavior - TransactionBehavior\n\u27e852\u27e9 http://www.sqlite.org/lang_transaction.html: BEGIN TRANSACTION\n\u27e853\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionState.html: enum rusqlite::TransactionState - TransactionState\n\u27e854\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#constants: \u00a7\n\u27e855\u27e9 https://docs.rs/rusqlite/latest/rusqlite/constant.MAIN_DB.html: constant rusqlite::MAIN_DB - MAIN_DB\n\u27e856\u27e9 https://docs.rs/rusqlite/latest/rusqlite/constant.TEMP_DB.html: constant rusqlite::TEMP_DB - TEMP_DB\n\u27e857\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#traits: \u00a7\n\u27e858\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.BindIndex.html: trait rusqlite::BindIndex - BindIndex\n\u27e859\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.Name.html: trait rusqlite::Name - Name\n\u27e860\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.OptionalExtension.html: trait rusqlite::OptionalExtension - OptionalExtension\n\u27e861\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#tymethod.optional: method documentation\n\u27e862\u27e9 https://www.sqlite.org/c3ref/bind_blob.html: sets of parameter\n\u27e863\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.RowIndex.html: trait rusqlite::RowIndex - RowIndex\n\u27e864\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#functions: \u00a7\n\u27e865\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.params_from_iter.html: fn rusqlite::params_from_iter - params_from_iter\n\u27e866\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.to_sqlite_error.html: fn rusqlite::to_sqlite_error - to_sqlite_error\n\u27e867\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.version.html: fn rusqlite::version - version\n\u27e868\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.version_number.html: fn rusqlite::version_number - version_number\n\u27e869\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#types: \u00a7\n\u27e870\u27e9 https://docs.rs/rusqlite/latest/rusqlite/type.Result.html: type rusqlite::Result - Result\n",
        "fit_markdown": "",
        "fit_html": ""
    },
    "downloads": 0,
    "github_stars": 0,
    "dependencies": [],
    "features": {},
    "code_snippets": [],
    "readme_sections": {},
    "librs_downloads": null,
    "source": "crates.io",
    "enhanced_scraping": {},
    "enhanced_features": [],
    "enhanced_dependencies": [],
    "readme_summary": "`rusqlite` is a lightweight and ergonomic wrapper for SQLite in Rust, enabling seamless database interaction. It supports features like prepared statements, transactions, custom SQL functions, and incremental BLOB I/O. Additional capabilities include virtual table creation, database serialization, tracing, and runtime configuration, making it suitable for both simple and advanced SQLite use cases.",
    "feature_summary": null,
    "use_case": "Database",
    "score": 8.5,
    "factual_counterfactual": "### Pair 1: Connection Management  \n\u2705 Factual: `rusqlite` provides an in-memory database feature through `Connection::open_in_memory`, allowing temporary databases for testing or ephemeral data storage.  \n\u274c Counterfactual: `rusqlite` supports distributed database connections across multiple machines using `Connection::open_in_memory`.  \n\n---\n\n### Pair 2: SQL Functionality  \n\u2705 Factual: `rusqlite` allows users to create custom SQL functions using the `functions` module, enabling the definition of application-specific behavior in SQLite queries.  \n\u274c Counterfactual: `rusqlite` includes built-in support for executing NoSQL queries alongside SQL queries.  \n\n---\n\n### Pair 3: Error Handling  \n\u2705 Factual: The `Error` enum in `rusqlite` provides detailed error codes and messages, including SQLite-specific error codes for debugging database operations.  \n\u274c Counterfactual: `rusqlite` automatically retries failed database operations without requiring explicit error handling by the user.",
    "source_analysis": null,
    "user_behavior": null,
    "security": null
}